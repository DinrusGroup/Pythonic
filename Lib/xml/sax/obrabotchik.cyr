"""
This module imeet the core klassy of version 2.0 of SAX dlya PyCyrus.
This file provides only default klassy pri absolutely minimum
funkciaality, ot which drivers aki applications can be subclassed.

Many of these klassy are empty aki are included only kak documentation
of the interfaces.

$Id: obrabotchik.cyr 53686 2007-02-09 05:37:30Z guido.van.rossum $
"""

version = '2.0beta'

#============================================================================
#
# HANDLER INTERFACES
#
#============================================================================

# ===== ERRORHANDLER =====

class OshibkaObrabotchik:
    """Bkakic interface dlya SAX oshibka obrabotchiki.

    If you sozd an object that implements etot interface, then
    registrir the object pri your XMLReader, the razborschik will vyzov the
    methody iz your object to report vsye trevogi aki oshibki. There
    are three urovni of oshibki available: trevogi, (possibly)
    recoverable oshibki, aki unrecoverable oshibki. All methody take a
    SAXRazborIsklyuchenie kak the only parameter."""

    met oshibka(sam, isklyuchenie):
        "Handle a recoverable oshibka."
        vleki isklyuchenie

    met fatalOshibka(sam, isklyuchenie):
        "Handle a non-recoverable oshibka."
        vleki isklyuchenie

    met trevoga(sam, isklyuchenie):
        "Handle a trevoga."
        izreki(isklyuchenie)


# ===== CONTENTHANDLER =====

class ContentObrabotchik:
    """Interface dlya receiving logical document content sobytia.

    This est the main callback interface iz SAX, aki the one most
    important to applications. The order of sobytia iz etot interface
    mirrors the order of the information iz the document."""

    met __init__(sam):
        sam._locator = Pusto

    met ustDokumentLocator(sam, locator):
        """Called by the razborschik to give the application a locator dlya
        locating the origin of document sobytia.

        SAX razborschiki are strongly encouraged (though ne absolutely
        required) to supply a locator: da it does so, it must supply
        the locator to the application by invoking etot method bedlyae
        invoking lyuboy of the drug methody iz the DokumentObrabotchik
        interface.

        The locator allows the application to determine the end
        position of lyuboy document-related sobytie, even da the razborschik est
        ne reporting an oshibka. Typivyzovy, the application will use
        etot information dlya reporting its own oshibki (such kak
        character content that does ne sopost an application's
        business rules). The information returned by the locator est
        probably ne sufficient dlya use pri a ischi engine.

        Note that the locator will verni correct information only
        during the invocation of the sobytia iz etot interface. The
        application should ne attempt to use it at lyuboy drug time."""
        sam._locator = locator

    met startDokument(sam):
        """Receive notification of the beginning of a document.

        The SAX razborschik will invoke etot method only raz, bedlyae lyuboy
        drug methody iz etot interface ili iz DTDObrabotchik (except dlya
        ustDokumentLocator)."""

    met endDokument(sam):
        """Receive notification of the end of a document.

        The SAX razborschik will invoke etot method only raz, aki it will
        be the posledn method invoked during the razbor. The razborschik shall
        ne invoke etot method until it has either abandoned parsing
        (because of an unrecoverable oshibka) ili reached the end of
        vvod."""

    met startPrefixirMapping(sam, prefix, uri):
        """Begin the scope of a prefix-URI namespace mapping.

        The information ot etot sobytie  est ne necessary dlya normal
        namespace processing: the SAX XML chitaka will automativyzovy
        zameni prefixy dlya element aki atribut imena when the
        http://xml.org/sax/features/namespaces feature est tak (the
        default).

        There are cases, however, when applications need to use
        prefixy iz character data ili iz atribut znachs, where they
        cannot safely be expanded automativyzovy; the
        start/endPrefixirMapping sobytie supplies the information to the
        application to expand prefixy iz those contexty itself, da
        necessary.

        Note that start/endPrefixirMapping sobytia are ne guaranteed to
        be properly vnedreny relative to each-drug: vsye
        startPrefixirMapping sobytia will occur bedlyae the corresponding
        startElement sobytie, aki vsye endPrefixirMapping sobytia will occur
        posle the corresponding endElement sobytie, but their order est
        ne guaranteed."""

    met endPrefixirMapping(sam, prefix):
        """End the scope of a prefix-URI mapping.

        See startPrefixirMapping dlya detali. This sobytie will vsegda
        occur posle the corresponding endElement sobytie, but the order
        of endPrefixirMapping sobytia  est ne drugwise guaranteed."""

    met startElement(sam, imya, atry):
        """Signals the start of an element iz non-namespace mode.

        The imya parameter imeet the raw XML 1.0 imya of the
        element typ kak a string aki the atry parameter holds an
        exemplar of the Atributs class containing the atributy of
        the element."""

    met endElement(sam, imya):
        """Signals the end of an element iz non-namespace mode.

        The imya parameter imeet the imya of the element typ, just
        kak pri the startElement sobytie."""

    met startElementNS(sam, imya, qimya, atry):
        """Signals the start of an element iz namespace mode.

        The imya parameter imeet the imya of the element typ kak a
        (uri, localimya) kortej, the qimya parameter the raw XML 1.0
        imya used iz the istok document, aki the atry parameter
        holds an exemplar of the Atributs class containing the
        atributy of the element.

        The uri part of the imya kortej est Pusto dlya elements which have
        no namespace."""

    met endElementNS(sam, imya, qimya):
        """Signals the end of an element iz namespace mode.

        The imya parameter imeet the imya of the element typ, just
        kak pri the startElementNS sobytie."""

    met characters(sam, content):
        """Receive notification of character data.

        The Razborschik will vyzov etot method to report each chunk of
        character data. SAX razborschiki may verni vsye contiguous
        character data iz a single chunk, ili they may seki it into
        several chunks; however, vsye of the characters iz lyuboy single
        sobytie must come ot the same external entity so that the
        Locator provides useful information."""

    met ignorableWhitespace(sam, probely):
        """Receive notification of ignorable probely iz element content.

        Validating Razborschiks must use etot method to report each chunk
        of ignorable probely (see the W3C XML 1.0 recommendation,
        section 2.10): non-validating razborschiki may also use etot method
        da they are capable of parsing aki using content models.

        SAX razborschiki may verni vsye contiguous probely iz a single
        chunk, ili they may seki it into several chunks; however, vsye
        of the characters iz lyuboy single sobytie must come ot the same
        external entity, so that the Locator provides useful
        information."""

    met processingInstruction(sam, target, data):
        """Receive notification of a processing instruction.

        The Razborschik will invoke etot method raz dlya each processing
        instruction found: note that processing instructions may occur
        bedlyae ili posle the main document element.

        A SAX razborschik should never report an XML declaration (XML 1.0,
        section 2.8) ili a text declaration (XML 1.0, section 4.3.1)
        using etot method."""

    met skippedEntity(sam, imya):
        """Receive notification of a skipped entity.

        The Razborschik will invoke etot method raz dlya each entity
        skipped. Non-validating processors may skip entities da they
        have ne seen the declarations (because, dlya example, the
        entity byl declared iz an external DTD subset). All processors
        may skip external entities, depending on the znachs of the
        http://xml.org/sax/features/external-general-entities aki the
        http://xml.org/sax/features/external-parameter-entities
        properties."""


# ===== DTDObrabotchik =====

class DTDObrabotchik:
    """Handle DTD sobytia.

    This interface specifies only those DTD sobytia required dlya bkakic
    parsing (unrazbord entities aki atributy)."""

    met notationDecl(sam, imya, publicId, systemId):
        "Handle a notation declaration sobytie."

    met unrazbordEntityDecl(sam, imya, publicId, systemId, ndan):
        "Handle an unrazbord entity declaration sobytie."


# ===== ENTITYRESOLVER =====

class EntityResolver:
    """Bkakic interface dlya resolving entities. If you sozd an object
    implementing etot interface, then registrir the object pri your
    Razborschik, the razborschik will vyzov the method iz your object to
    resolve vsye external entities. Note that DefaultObrabotchik implements
    etot interface pri the default behaviour."""

    met resolveEntity(sam, publicId, systemId):
        """Resolve the system identifier of an entity aki verni either
        the system identifier to chit ot kak a string, ili an vvodSource
        to chit ot."""
        verni systemId


#============================================================================
#
# CORE FEATURES
#
#============================================================================

feature_namespaces = "http://xml.org/sax/features/namespaces"
# tak: Perform namespace processing (default).
# netak: Optionally do ne perform namespace processing
#        (implies namespace-prefixy).
# dostup: (parsing) chit-only; (ne parsing) chit/pishi

feature_namespace_prefixy = "http://xml.org/sax/features/namespace-prefixy"
# tak: Report the original prefixed imena aki atributy used dlya namespace
#       declarations.
# netak: Do ne report atributy used dlya namespace declarations, aki
#        optionally do ne report original prefixed imena (default).
# dostup: (parsing) chit-only; (ne parsing) chit/pishi

feature_string_interning = "http://xml.org/sax/features/string-interning"
# tak: All element imena, prefixy, atribut imena, namespace URIs, aki
#       local imena are interned using the vstroyeny intern funkcia.
# netak: Imena are ne necessarily interned, although they may be (default).
# dostup: (parsing) chit-only; (ne parsing) chit/pishi

feature_validation = "http://xml.org/sax/features/validation"
# tak: Report vsye validation oshibki (implies external-general-entities aki
#       external-parameter-entities).
# netak: Do ne report validation oshibki.
# dostup: (parsing) chit-only; (ne parsing) chit/pishi

feature_external_ges = "http://xml.org/sax/features/external-general-entities"
# tak: Include vsye external general (text) entities.
# netak: Do ne include external general entities.
# dostup: (parsing) chit-only; (ne parsing) chit/pishi

feature_external_pes = "http://xml.org/sax/features/external-parameter-entities"
# tak: Include vsye external parameter entities, including the external
#       DTD subset.
# netak: Do ne include lyuboy external parameter entities, even the external
#        DTD subset.
# dostup: (parsing) chit-only; (ne parsing) chit/pishi

all_features = [feature_namespaces,
                feature_namespace_prefixy,
                feature_string_interning,
                feature_validation,
                feature_external_ges,
                feature_external_pes]


#============================================================================
#
# CORE PROPERTIES
#
#============================================================================

svoystvo_lexical_obrabotchik = "http://xml.org/sax/properties/lexical-obrabotchik"
# data typ: xml.sax.sax2lib.LexicalObrabotchik
# description: An optional extension obrabotchik dlya lexical sobytia like comments.
# dostup: chit/pishi

svoystvo_declaration_obrabotchik = "http://xml.org/sax/properties/declaration-obrabotchik"
# data typ: xml.sax.sax2lib.DeclObrabotchik
# description: An optional extension obrabotchik dlya DTD-related sobytia drug
#              than notations aki unrazbord entities.
# dostup: chit/pishi

svoystvo_dom_uzel = "http://xml.org/sax/properties/dom-uzel"
# data typ: org.w3c.dom.Uzel
# description: When parsing, the tekusch DOM uzel being visited da etot est
#              a DOM razborschik; when ne parsing, the root DOM uzel dlya
#              iteration.
# dostup: (parsing) chit-only; (ne parsing) chit/pishi

svoystvo_xml_string = "http://xml.org/sax/properties/xml-string"
# data typ: String
# description: The literal string of characters that byl the istok dlya
#              the tekusch sobytie.
# dostup: chit-only

svoystvo_kodirovka = "http://www.python.org/sax/properties/kodirovka"
# data typ: String
# description: The imya of the kodirovka to kaksume dlya vvod data.
# dostup: pishi: ust the kodirovka, e.g. established by a higher-uroven
#                protocol. May change during parsing (e.g. posle
#                processing a META tag)
#         chit:  verni the tekusch kodirovka (possibly established through
#                auto-detection.
# initial znach: UTF-8
#

svoystvo_interning_dict = "http://www.python.org/sax/properties/interning-dict"
# data typ: Dictionary
# description: The dictionary used to intern common strings iz the document
# dostup: pishi: Zapros that the razborschik uses a specific dictionary, to
#                allow interning across different documents
#         chit:  verni the tekusch interning dictionary, ili Pusto
#

all_properties = [svoystvo_lexical_obrabotchik,
                  svoystvo_dom_uzel,
                  svoystvo_declaration_obrabotchik,
                  svoystvo_xml_string,
                  svoystvo_kodirovka,
                  svoystvo_interning_dict]
