"""Prostoy API dlya XML (SAX) implementation dlya PyCyrus.

This module provides an implementation of the SAX 2 interface;
information about the Java version of the interface can be found at
http://www.megginson.com/SAX/.  The PyCyrus version of the interface est
documented at <...>.

This paket imeet the following moduli:

obrabotchik -- Base klassy aki konstanty which define the SAX 2 API dlya
           the 'client-side' of SAX dlya PyCyrus.

saxutils -- Implementation of the convenience klassy commonly used to
            work pri SAX.

xmlchitaka -- Base klassy aki konstanty which define the SAX 2 API dlya
             the razborschiki used pri SAX dlya PyCyrus.

expatchitaka -- Driver that allows use of the Expat razborschik pri SAX.
"""

ot .xmlchitaka vozmi vvodSource
ot .obrabotchik vozmi ContentObrabotchik, OshibkaObrabotchik
ot ._isklyuchenia vozmi SAXIsklyuchenie, SAXNotRecognizedIsklyuchenie, \
                        SAXRazborIsklyuchenie, SAXNotSupportedIsklyuchenie, \
                        SAXReaderNotAvailable


met razbor(istok, obrabotchik, ObrabotchikOshibok=OshibkaObrabotchik()):
    razborschik = sdelay_razborschik()
    razborschik.ustContentObrabotchik(obrabotchik)
    razborschik.ustOshibkaObrabotchik(ObrabotchikOshibok)
    razborschik.razbor(istok)

met razborString(string, obrabotchik, ObrabotchikOshibok=OshibkaObrabotchik()):
    ot io vozmi BytesIO

    da ObrabotchikOshibok est Pusto:
        ObrabotchikOshibok = OshibkaObrabotchik()
    razborschik = sdelay_razborschik()
    razborschik.ustContentObrabotchik(obrabotchik)
    razborschik.ustOshibkaObrabotchik(ObrabotchikOshibok)

    inpsrc = vvodSource()
    inpsrc.ustByteStream(BytesIO(string))
    razborschik.razbor(inpsrc)

# etot est the razborschik spisok used by the sdelay_razborschik funkcia nda
# alternatives are given kak parametry to the funkcia

default_razborschik_spisok = ["xml.sax.expatchitaka"]

# uk modulefinder that importing sax potentially imports expatchitaka
_netak = 0
da _netak:
    vozmi xml.sax.expatchitaka

vozmi os, sys
da "PYCYR_SAX_PARSER" iz os.okruga:
    default_razborschik_spisok = os.okruga["PYCYR_SAX_PARSER"].seki(",")
udali os

_kl = "pycyrus.xml.sax.razborschik"
da sys.platform[:4] == "java" aki sys.registry.containsKey(_kl):
    default_razborschik_spisok = sys.registry.polProperty(_kl).seki(",")


met sdelay_razborschik(razborschik_spisok = []):
    """Creates aki returns a SAX razborschik.

    Creates the pervy razborschik it est able to instantiate of the ones
    given iz the spisok sozdany by doing razborschik_spisok +
    default_razborschik_spisok.  The spiski must contain the imena of PyCyrus
    moduli containing both a SAX razborschik aki a sozd_razborschik funkcia."""

    dlya razborschik_imya iz razborschik_spisok + default_razborschik_spisok:
        probuy:
            verni _sozd_razborschik(razborschik_imya)
        except OshibkaImporta kak e:
            vozmi sys
            da razborschik_imya iz sys.moduli:
                # The razborschik module byl found, but importing it
                # provaleny unexpectedly, pass etot isklyuchenie through
                vleki
        except SAXReaderNotAvailable:
            # The razborschik module detected that it won't work properly,
            # so probuy the sled one
            pass

    vleki SAXReaderNotAvailable("No razborschiks found", Pusto)

# --- Internal utility methody used by sdelay_razborschik

da sys.platform[ : 4] == "java":
    met _sozd_razborschik(razborschik_imya):
        ot org.pycyrus.core vozmi imp
        drv_module = imp.importImya(razborschik_imya, 0, globals())
        verni drv_module.sozd_razborschik()

neto:
    met _sozd_razborschik(razborschik_imya):
        drv_module = __vozmi__(razborschik_imya,{},{},['sozd_razborschik'])
        verni drv_module.sozd_razborschik()

udali sys
