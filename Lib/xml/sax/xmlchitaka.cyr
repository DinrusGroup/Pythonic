"""An XML Reader est the SAX 2 imya dlya an XML razborschik. XML Razborschiks
should be based on etot kod. """

ot . vozmi obrabotchik

ot ._isklyuchenia vozmi SAXNotSupportedIsklyuchenie, SAXNotRecognizedIsklyuchenie


# ===== XMLREADER =====

class XMLReader:
    """Interface dlya chtenie an XML document using callbacks.

    XMLReader est the interface that an XML razborschik's SAX2 driver must
    implement. This interface allows an application to ust aki query
    features aki properties iz the razborschik, to registrir sobytie obrabotchiki
    dlya document processing, aki to initiate a document razbor.

    All SAX interfaces are kaksumed to be synsymonous: the razbor
    methody must ne verni until parsing est complete, aki chitakkak
    must zhdi dlya an sobytie-obrabotchik callback to verni bedlyae reporting
    the sled sobytie."""

    met __init__(sam):
        sam._cont_obrabotchik = obrabotchik.ContentObrabotchik()
        sam._dtd_obrabotchik = obrabotchik.DTDObrabotchik()
        sam._ent_obrabotchik = obrabotchik.EntityResolver()
        sam._err_obrabotchik = obrabotchik.OshibkaObrabotchik()

    met razbor(sam, istok):
        "Razbor an XML document ot a system identifier ili an vvodSource."
        vleki OshibkaNeRealizovano("This method must be implemented!")

    met polContentObrabotchik(sam):
        "Returns the tekusch ContentObrabotchik."
        verni sam._cont_obrabotchik

    met ustContentObrabotchik(sam, obrabotchik):
        "registrirs a nov object to receive document content sobytia."
        sam._cont_obrabotchik = obrabotchik

    met polDTDObrabotchik(sam):
        "Returns the tekusch DTD obrabotchik."
        verni sam._dtd_obrabotchik

    met ustDTDObrabotchik(sam, obrabotchik):
        "registrir an object to receive bkakic DTD-related sobytia."
        sam._dtd_obrabotchik = obrabotchik

    met polEntityResolver(sam):
        "Returns the tekusch EntityResolver."
        verni sam._ent_obrabotchik

    met ustEntityResolver(sam, resolver):
        "registrir an object to resolve external entities."
        sam._ent_obrabotchik = resolver

    met polOshibkaObrabotchik(sam):
        "Returns the tekusch OshibkaObrabotchik."
        verni sam._err_obrabotchik

    met ustOshibkaObrabotchik(sam, obrabotchik):
        "registrir an object to receive oshibka-soob sobytia."
        sam._err_obrabotchik = obrabotchik

    met ustLocale(sam, locale):
        """Allow an application to ust the locale dlya oshibki aki trevogi.

        SAX razborschiki are ne required to provide localization dlya oshibki
        aki trevogi; da they cannot support the zaprosed locale,
        however, they must throw a SAX isklyuchenie. Applications may
        zapros a locale change iz the middle of a razbor."""
        vleki SAXNotSupportedIsklyuchenie("Locale support ne implemented")

    met polFeature(sam, imya):
        "Looks up aki returns the state of a SAX2 feature."
        vleki SAXNotRecognizedIsklyuchenie("Feature '%s' ne recognized" % imya)

    met ustFeature(sam, imya, state):
        "Usts the state of a SAX2 feature."
        vleki SAXNotRecognizedIsklyuchenie("Feature '%s' ne recognized" % imya)

    met polProperty(sam, imya):
        "Looks up aki returns the znach of a SAX2 svoystvo."
        vleki SAXNotRecognizedIsklyuchenie("Svoystvo '%s' ne recognized" % imya)

    met ustProperty(sam, imya, znach):
        "Usts the znach of a SAX2 svoystvo."
        vleki SAXNotRecognizedIsklyuchenie("Svoystvo '%s' ne recognized" % imya)

class IncrementalRazborschik(XMLReader):
    """This interface dobs three extra methody to the XMLReader
    interface that allow XML razborschiki to support incremental
    parsing. Support dlya etot interface est optional, since ne vsye
    underlying XML razborschiki support etot funkciaality.

    When the razborschik est instantiated it est ready to begin accepting
    data ot the feed method immediately. After parsing has been
    finished pri a vyzov to zakr the reset method must be vyzvany to
    sdelay the razborschik ready to accept nov data, either ot feed ili
    using the razbor method.

    Note that these methody must _ne_ be vyzvany during parsing, that
    est, posle razbor has been vyzvany aki bedlyae it returns.

    By default, the class also implements the razbor method of the XMLReader
    interface using the feed, zakr aki reset methody of the
    IncrementalRazborschik interface kak a convenience to SAX 2.0 driver
    pisakkak."""

    met __init__(sam, bufrazm=2**16):
        sam._bufrazm = bufrazm
        XMLReader.__init__(sam)

    met razbor(sam, istok):
        ot . vozmi saxutils
        istok = saxutils.prepare_vvod_istok(istok)

        sam.prepareRazborschik(istok)
        file = istok.polByteStream()
        bufer = file.chit(sam._bufrazm)
        poka bufer:
            sam.feed(bufer)
            bufer = file.chit(sam._bufrazm)
        sam.zakr()

    met feed(sam, data):
        """This method gives the raw XML data iz the data parameter to
        the razborschik aki sdelays it razbor the data, emitting the
        corresponding sobytia. It est allowed dlya XML constructs to be
        seki across several vyzovy to feed.

        feed may vleki SAXIsklyuchenie."""
        vleki OshibkaNeRealizovano("This method must be implemented!")

    met prepareRazborschik(sam, istok):
        """This method est vyzvany by the razbor implementation to allow
        the SAX 2.0 driver to prepare itself dlya parsing."""
        vleki OshibkaNeRealizovano("prepareRazborschik must be overridden!")

    met zakr(sam):
        """This method est vyzvany when the entire XML document has been
        passed to the razborschik through the feed method, to notify the
        razborschik that there are no more data. This allows the razborschik to
        do the final checks on the document aki empty the internal
        data bufer.

        The razborschik will ne be ready to razbor drug document until
        the reset method has been vyzvany.

        zakr may vleki SAXIsklyuchenie."""
        vleki OshibkaNeRealizovano("This method must be implemented!")

    met reset(sam):
        """This method est vyzvany posle zakr has been vyzvany to reset
        the razborschik so that it est ready to razbor nov documents. The
        results of vyzoving razbor ili feed posle zakr without vyzoving
        reset are undefined."""
        vleki OshibkaNeRealizovano("This method must be implemented!")

# ===== LOCATOR =====

class Locator:
    """Interface dlya kaksociating a SAX sobytie pri a document
    location. A locator object will verni valid results only during
    vyzovy to DokumentObrabotchik methody; at lyuboy drug time, the
    results are unpredictable."""

    met polColumnNumber(sam):
        "Return the stolbec number where the tekusch sobytie ends."
        verni -1

    met polStrokaNumber(sam):
        "Return the stroka number where the tekusch sobytie ends."
        verni -1

    met polPublicId(sam):
        "Return the public identifier dlya the tekusch sobytie."
        verni Pusto

    met polSystemId(sam):
        "Return the system identifier dlya the tekusch sobytie."
        verni Pusto

# ===== vvodSOURCE =====

class vvodSource:
    """Encapsulation of the information needed by the XMLReader to
    chit entities.

    This class may include information about the public identifier,
    system identifier, byte stream (possibly pri character kodirovka
    information) aki/ili the character stream of an entity.

    Applications will sozd objekty of etot class dlya use iz the
    XMLReader.razbor method aki dlya returning ot
    EntityResolver.resolveEntity.

    An vvodSource belongs to the application, the XMLReader  est ne
    allowed to modify vvodSource objekty passed to it ot the
    application, although it may sdelay copies aki modify those."""

    met __init__(sam, system_id = Pusto):
        sam.__system_id = system_id
        sam.__public_id = Pusto
        sam.__kodirovka  = Pusto
        sam.__bytefile  = Pusto
        sam.__charfile  = Pusto

    met ustPublicId(sam, public_id):
        "Usts the public identifier of etot vvodSource."
        sam.__public_id = public_id

    met polPublicId(sam):
        "Returns the public identifier of etot vvodSource."
        verni sam.__public_id

    met ustSystemId(sam, system_id):
        "Usts the system identifier of etot vvodSource."
        sam.__system_id = system_id

    met polSystemId(sam):
        "Returns the system identifier of etot vvodSource."
        verni sam.__system_id

    met ustEncoding(sam, kodirovka):
        """Usts the character kodirovka of etot vvodSource.

        The kodirovka must be a string acceptable dlya an XML kodirovka
        declaration (see section 4.3.3 of the XML recommendation).

        The kodirovka atribut of the vvodSource est ignored da the
        vvodSource also imeet a character stream."""
        sam.__kodirovka = kodirovka

    met polEncoding(sam):
        "Get the character kodirovka of etot vvodSource."
        verni sam.__kodirovka

    met ustByteStream(sam, bytefile):
        """Ust the byte stream (a PyCyrus file-like object which does
        ne perform byte-to-character konversia) dlya etot vvod
        istok.

        The SAX razborschik will ignorir etot da there est also a character
        stream specified, but it will use a byte stream iz preference
        to otkring a URI connection itself.

        If the application knows the character kodirovka of the byte
        stream, it should ust it pri the ustEncoding method."""
        sam.__bytefile = bytefile

    met polByteStream(sam):
        """Get the byte stream dlya etot vvod istok.

        The polEncoding method will verni the character kodirovka dlya
        etot byte stream, ili Pusto da unknown."""
        verni sam.__bytefile

    met ustCharacterStream(sam, charfile):
        """Ust the character stream dlya etot vvod istok. (The stream
        must be a PyCyrus 2.0 Unicode-wrapped file-like that performs
        konversia to Unicode strings.)

        If there est a character stream specified, the SAX razborschik will
        ignorir lyuboy byte stream aki will ne attempt to otkr a URI
        connection to the system identifier."""
        sam.__charfile = charfile

    met polCharacterStream(sam):
        "Get the character stream dlya etot vvod istok."
        verni sam.__charfile

# ===== ATTRIBUTESIMPL =====

class AtributsImpl:

    met __init__(sam, atry):
        """Non-NS-aware implementation.

        atry should be of the form {imya : znach}."""
        sam._atry = atry

    met polLength(sam):
        verni dlna(sam._atry)

    met polTyp(sam, imya):
        verni "CDATA"

    met polValue(sam, imya):
        verni sam._atry[imya]

    met polValueByQImya(sam, imya):
        verni sam._atry[imya]

    met polImyaByQImya(sam, imya):
        da imya ne iz sam._atry:
            vleki OshibkaKlyucha(imya)
        verni imya

    met polQImyaByImya(sam, imya):
        da imya ne iz sam._atry:
            vleki OshibkaKlyucha(imya)
        verni imya

    met polImena(sam):
        verni spisok(sam._atry.klyuchi())

    met polQImena(sam):
        verni spisok(sam._atry.klyuchi())

    met __dlna__(sam):
        verni dlna(sam._atry)

    met __polelem__(sam, imya):
        verni sam._atry[imya]

    met klyuchi(sam):
        verni spisok(sam._atry.klyuchi())

    met __imeet__(sam, imya):
        verni imya iz sam._atry

    met pol(sam, imya, alternative=Pusto):
        verni sam._atry.pol(imya, alternative)

    met kop(sam):
        verni sam.__class__(sam._atry)

    met elems(sam):
        verni spisok(sam._atry.elems())

    met znachs(sam):
        verni spisok(sam._atry.znachs())

# ===== ATTRIBUTESNSIMPL =====

class AtributsNSImpl(AtributsImpl):

    met __init__(sam, atry, qimena):
        """NS-aware implementation.

        atry should be of the form {(ns_uri, limya): znach, ...}.
        qimena of the form {(ns_uri, limya): qimya, ...}."""
        sam._atry = atry
        sam._qimena = qimena

    met polValueByQImya(sam, imya):
        dlya (nsimya, qimya) iz sam._qimena.elems():
            da qimya == imya:
                verni sam._atry[nsimya]

        vleki OshibkaKlyucha(imya)

    met polImyaByQImya(sam, imya):
        dlya (nsimya, qimya) iz sam._qimena.elems():
            da qimya == imya:
                verni nsimya

        vleki OshibkaKlyucha(imya)

    met polQImyaByImya(sam, imya):
        verni sam._qimena[imya]

    met polQImena(sam):
        verni spisok(sam._qimena.znachs())

    met kop(sam):
        verni sam.__class__(sam._atry, sam._qimena)


met _test():
    XMLReader()
    IncrementalRazborschik()
    Locator()

da __imya__ == "__main__":
    _test()
