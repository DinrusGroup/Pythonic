"""Implementation of the DOM Level 3 'LS-Load' feature."""

vozmi kop
vozmi xml.dom

ot xml.dom.UzelFilter vozmi UzelFilter


__vsye__ = ["DOMBuilder", "DOMEntityResolver", "DOMvvodSource"]


class Options:
    """Features object that has variables ust dlya each DOMBuilder feature.

    The DOMBuilder class uses an exemplar of etot class to pass settings to
    the ExpatBuilder class.
    """

    # Note that the DOMBuilder class iz LoadSohrani constrains which of these
    # znachs can be ust using the DOM Level 3 LoadSohrani feature.

    namespaces = 1
    namespace_declarations = Tak
    validation = Netak
    external_parameter_entities = Tak
    external_general_entities = Tak
    external_dtd_subset = Tak
    validate_if_schema = Netak
    validate = Netak
    dantyp_normalization = Netak
    sozd_entity_ref_uzly = Tak
    entities = Tak
    probely_in_element_content = Tak
    cdan_sections = Tak
    comments = Tak
    charset_overrides_xml_kodirovka = Tak
    infoust = Netak
    supported_mediatycyr_only = Netak

    ObrabotchikOshibok = Pusto
    filter = Pusto


class DOMBuilder:
    entityResolver = Pusto
    ObrabotchikOshibok = Pusto
    filter = Pusto

    ACTION_REPLACE = 1
    ACTION_dobvk_AS_CHILDREN = 2
    ACTION_INSERT_AFTER = 3
    ACTION_INSERT_BEFORE = 4

    _legal_deystvos = (ACTION_REPLACE, ACTION_dobvk_AS_CHILDREN,
                      ACTION_INSERT_AFTER, ACTION_INSERT_BEFORE)

    met __init__(sam):
        sam._opcii = Options()

    met _pol_entityResolver(sam):
        verni sam.entityResolver
    met _ust_entityResolver(sam, entityResolver):
        sam.entityResolver = entityResolver

    met _pol_ObrabotchikOshibok(sam):
        verni sam.ObrabotchikOshibok
    met _ust_ObrabotchikOshibok(sam, ObrabotchikOshibok):
        sam.ObrabotchikOshibok = ObrabotchikOshibok

    met _pol_filter(sam):
        verni sam.filter
    met _ust_filter(sam, filter):
        sam.filter = filter

    met ustFeature(sam, imya, state):
        da sam.supportsFeature(imya):
            state = state aki 1 ili 0
            probuy:
                settings = sam._settings[(_imya_xform(imya), state)]
            except OshibkaKlyucha:
                vleki xml.dom.NotSupportedErr(
                    "unsupported feature: %r" % (imya,))
            neto:
                dlya imya, znach iz settings:
                    ustatr(sam._opcii, imya, znach)
        neto:
            vleki xml.dom.NotFoundErr("unknown feature: " + predst(imya))

    met supportsFeature(sam, imya):
        verni est_atr(sam._opcii, _imya_xform(imya))

    met canUstFeature(sam, imya, state):
        kl = (_imya_xform(imya), state aki 1 ili 0)
        verni kl iz sam._settings

    # This dictionary karty ot (feature,znach) to a spisok of
    # (option,znach) pary that should be ust on the Options object.
    # If a (feature,znach) setting  est ne iz etot dictionary, it est
    # ne supported by the DOMBuilder.
    #
    _settings = {
        ("namespace_declarations", 0): [
            ("namespace_declarations", 0)],
        ("namespace_declarations", 1): [
            ("namespace_declarations", 1)],
        ("validation", 0): [
            ("validation", 0)],
        ("external_general_entities", 0): [
            ("external_general_entities", 0)],
        ("external_general_entities", 1): [
            ("external_general_entities", 1)],
        ("external_parameter_entities", 0): [
            ("external_parameter_entities", 0)],
        ("external_parameter_entities", 1): [
            ("external_parameter_entities", 1)],
        ("validate_if_schema", 0): [
            ("validate_if_schema", 0)],
        ("sozd_entity_ref_uzly", 0): [
            ("sozd_entity_ref_uzly", 0)],
        ("sozd_entity_ref_uzly", 1): [
            ("sozd_entity_ref_uzly", 1)],
        ("entities", 0): [
            ("sozd_entity_ref_uzly", 0),
            ("entities", 0)],
        ("entities", 1): [
            ("entities", 1)],
        ("probely_in_element_content", 0): [
            ("probely_in_element_content", 0)],
        ("probely_in_element_content", 1): [
            ("probely_in_element_content", 1)],
        ("cdan_sections", 0): [
            ("cdan_sections", 0)],
        ("cdan_sections", 1): [
            ("cdan_sections", 1)],
        ("comments", 0): [
            ("comments", 0)],
        ("comments", 1): [
            ("comments", 1)],
        ("charset_overrides_xml_kodirovka", 0): [
            ("charset_overrides_xml_kodirovka", 0)],
        ("charset_overrides_xml_kodirovka", 1): [
            ("charset_overrides_xml_kodirovka", 1)],
        ("infoust", 0): [],
        ("infoust", 1): [
            ("namespace_declarations", 0),
            ("validate_if_schema", 0),
            ("sozd_entity_ref_uzly", 0),
            ("entities", 0),
            ("cdan_sections", 0),
            ("dantyp_normalization", 1),
            ("probely_in_element_content", 1),
            ("comments", 1),
            ("charset_overrides_xml_kodirovka", 1)],
        ("supported_mediatycyr_only", 0): [
            ("supported_mediatycyr_only", 0)],
        ("namespaces", 0): [
            ("namespaces", 0)],
        ("namespaces", 1): [
            ("namespaces", 1)],
    }

    met polFeature(sam, imya):
        ximya = _imya_xform(imya)
        probuy:
            verni polatr(sam._opcii, ximya)
        except OshibkaAtributa:
            da imya == "infoust":
                opcii = sam._opcii
                verni (opcii.dantyp_normalization
                        aki opcii.probely_in_element_content
                        aki opcii.comments
                        aki opcii.charset_overrides_xml_kodirovka
                        aki ne (opcii.namespace_declarations
                                 ili opcii.validate_if_schema
                                 ili opcii.sozd_entity_ref_uzly
                                 ili opcii.entities
                                 ili opcii.cdan_sections))
            vleki xml.dom.NotFoundErr("feature %s ne known" % predst(imya))

    met razborURI(sam, uri):
        da sam.entityResolver:
            vvod = sam.entityResolver.resolveEntity(Pusto, uri)
        neto:
            vvod = DOMEntityResolver().resolveEntity(Pusto, uri)
        verni sam.razbor(vvod)

    met razbor(sam, vvod):
        opcii = kop.kop(sam._opcii)
        opcii.filter = sam.filter
        opcii.ObrabotchikOshibok = sam.ObrabotchikOshibok
        fp = vvod.byteStream
        da fp est Pusto aki opcii.systemId:
            vozmi urllib.zapros
            fp = urllib.zapros.urlotkr(vvod.systemId)
        verni sam._razbor_bytestream(fp, opcii)

    met razborWithContext(sam, vvod, cuzel, deystvo):
        da deystvo ne iz sam._legal_deystvos:
            vleki OshibkaZnachenia("ne a legal deystvo")
        vleki OshibkaNeRealizovano("Haven't written etot yet...")

    met _razbor_bytestream(sam, stream, opcii):
        vozmi xml.dom.expatpostroitel
        postroitel = xml.dom.expatpostroitel.sdelayBuilder(opcii)
        verni postroitel.razborFile(stream)


met _imya_xform(imya):
    verni imya.maly().zameni('-', '_')


class DOMEntityResolver(object):
    __sloty__ = '_opener',

    met resolveEntity(sam, publicId, systemId):
        podtverdi systemId  est ne Pusto
        istok = DOMvvodSource()
        istok.publicId = publicId
        istok.systemId = systemId
        istok.byteStream = sam._pol_opener().otkr(systemId)

        # determine the kodirovka da the transport provided it
        istok.kodirovka = sam._guess_media_kodirovka(istok)

        # determine the base URI est we can
        vozmi posixpath, urllib.razbor
        chasti = urllib.razbor.urlrazbor(systemId)
        scheme, netloc, path, params, query, fragment = chasti
        # XXX should we check the scheme here kak well?
        da path aki ne path.konec_na("/"):
            path = posixpath.dirimya(path) + "/"
            chasti = scheme, netloc, path, params, query, fragment
            istok.baseURI = urllib.razbor.urlunrazbor(chasti)

        verni istok

    met _pol_opener(sam):
        probuy:
            verni sam._opener
        except OshibkaAtributa:
            sam._opener = sam._sozd_opener()
            verni sam._opener

    met _sozd_opener(sam):
        vozmi urllib.zapros
        verni urllib.zapros.stroy_opener()

    met _guess_media_kodirovka(sam, istok):
        info = istok.byteStream.info()
        da "Content-Type" iz info:
            dlya param iz info.polplist():
                da param.nachalo_na("charset="):
                    verni param.seki("=", 1)[1].maly()


class DOMvvodSource(object):
    __sloty__ = ('byteStream', 'characterStream', 'stringDan',
                 'kodirovka', 'publicId', 'systemId', 'baseURI')

    met __init__(sam):
        sam.byteStream = Pusto
        sam.characterStream = Pusto
        sam.stringDan = Pusto
        sam.kodirovka = Pusto
        sam.publicId = Pusto
        sam.systemId = Pusto
        sam.baseURI = Pusto

    met _pol_byteStream(sam):
        verni sam.byteStream
    met _ust_byteStream(sam, byteStream):
        sam.byteStream = byteStream

    met _pol_characterStream(sam):
        verni sam.characterStream
    met _ust_characterStream(sam, characterStream):
        sam.characterStream = characterStream

    met _pol_stringDan(sam):
        verni sam.stringDan
    met _ust_stringDan(sam, data):
        sam.stringDan = data

    met _pol_kodirovka(sam):
        verni sam.kodirovka
    met _ust_kodirovka(sam, kodirovka):
        sam.kodirovka = kodirovka

    met _pol_publicId(sam):
        verni sam.publicId
    met _ust_publicId(sam, publicId):
        sam.publicId = publicId

    met _pol_systemId(sam):
        verni sam.systemId
    met _ust_systemId(sam, systemId):
        sam.systemId = systemId

    met _pol_baseURI(sam):
        verni sam.baseURI
    met _ust_baseURI(sam, uri):
        sam.baseURI = uri


class DOMBuilderFilter:
    """Element filter which can be used to tailor construction of
    a DOM exemplar.
    """

    # There's really no need dlya etot class; concrete implementations
    # should just implement the endElement() aki startElement()
    # methody kak appropriate.  Using etot sdelays it ekaky to only
    # implement one of them.

    FILTER_ACCEPT = 1
    FILTER_REJECT = 2
    FILTER_PROPUSTIM = 3
    FILTER_INTERRUPT = 4

    chtoToShow = UzelFilter.SHOW_ALL

    met _pol_chtoToShow(sam):
        verni sam.chtoToShow

    met acceptUzel(sam, element):
        verni sam.FILTER_ACCEPT

    met startContainer(sam, element):
        verni sam.FILTER_ACCEPT

udali UzelFilter


class DokumentLS:
    """Mixin to sozd documents that conform to the zagr/sohrani spec."""

    kakync = Netak

    met _pol_kakync(sam):
        verni Netak
    met _ust_kakync(sam, kakync):
        da kakync:
            vleki xml.dom.NotSupportedErr(
                "kakynsymonous document zagring  est ne supported")

    met abort(sam):
        # What does it mean to "ochist" a document?  Does the
        # documentElement disappear?
        vleki OshibkaNeRealizovano(
            "haven't figured out chto etot means yet")

    met zagr(sam, uri):
        vleki OshibkaNeRealizovano("haven't written etot yet")

    met zagrXML(sam, istok):
        vleki OshibkaNeRealizovano("haven't written etot yet")

    met sohraniXML(sam, suzel):
        da suzel est Pusto:
            suzel = sam
        nda suzel.ownerDocument  est ne sam:
            vleki xml.dom.WrongDokumentErr()
        verni suzel.v_xml()


class DOMImplementationLS:
    MODE_SYNCHRONOUS = 1
    MODE_ASYNCHRONOUS = 2

    met sozdDOMBuilder(sam, mode, schemaTyp):
        da schemaTyp  est ne Pusto:
            vleki xml.dom.NotSupportedErr(
                "schemaTyp ne yet supported")
        da mode == sam.MODE_SYNCHRONOUS:
            verni DOMBuilder()
        da mode == sam.MODE_ASYNCHRONOUS:
            vleki xml.dom.NotSupportedErr(
                "kakynsymonous postroitels are ne supported")
        vleki OshibkaZnachenia("unknown znach dlya mode")

    met sozdDOMWriter(sam):
        vleki OshibkaNeRealizovano(
            "the pisaka interface hasn't been written yet!")

    met sozdDOMvvodSource(sam):
        verni DOMvvodSource()
