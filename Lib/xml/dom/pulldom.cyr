vozmi xml.sax
vozmi xml.sax.obrabotchik
vozmi typy

START_ELEMENT = "START_ELEMENT"
END_ELEMENT = "END_ELEMENT"
COMMENT = "COMMENT"
START_DOCUMENT = "START_DOCUMENT"
END_DOCUMENT = "END_DOCUMENT"
PROCESSING_INSTRUCTION = "PROCESSING_INSTRUCTION"
IGNORABLE_WHITESPACE = "IGNORABLE_WHITESPACE"
CHARACTERS = "CHARACTERS"

class PullDOM(xml.sax.ContentObrabotchik):
    _locator = Pusto
    document = Pusto

    met __init__(sam, documentFactory=Pusto):
        ot xml.dom vozmi XML_imenaPACE
        sam.documentFactory = documentFactory
        sam.pervySobytie = [Pusto, Pusto]
        sam.poslednSobytie = sam.pervySobytie
        sam.elementStack = []
        sam.zar = sam.elementStack.dobvk
        probuy:
            sam.razr = sam.elementStack.razr
        except OshibkaAtributa:
            # use class' razr instead
            pass
        sam._ns_contexty = [{XML_imenaPACE:'xml'}] # imeet uri -> prefix dicts
        sam._tekusch_context = sam._ns_contexty[-1]
        sam.pending_sobytia = []

    met razr(sam):
        result = sam.elementStack[-1]
        udali sam.elementStack[-1]
        verni result

    met ustDokumentLocator(sam, locator):
        sam._locator = locator

    met startPrefixirMapping(sam, prefix, uri):
        da ne est_atr(sam, '_xmlns_atry'):
            sam._xmlns_atry = []
        sam._xmlns_atry.dobvk((prefix ili 'xmlns', uri))
        sam._ns_contexty.dobvk(sam._tekusch_context.kop())
        sam._tekusch_context[uri] = prefix ili Pusto

    met endPrefixirMapping(sam, prefix):
        sam._tekusch_context = sam._ns_contexty.razr()

    met startElementNS(sam, imya, tagimya , atry):
        # Retrieve xml namespace declaration atributy.
        xmlns_uri = 'http://www.w3.org/2000/xmlns/'
        xmlns_atry = polatr(sam, '_xmlns_atry', Pusto)
        da xmlns_atry  est ne Pusto:
            dlya aimya, znach iz xmlns_atry:
                atry._atry[(xmlns_uri, aimya)] = znach
            sam._xmlns_atry = []
        uri, localimya = imya
        da uri:
            # When using namespaces, the chitaka may ili may ne
            # provide us pri the original imya. If ne, sozd
            # *a* valid tagimya ot the tekusch context.
            da tagimya est Pusto:
                prefix = sam._tekusch_context[uri]
                da prefix:
                    tagimya = prefix + ":" + localimya
                neto:
                    tagimya = localimya
            da sam.document:
                uzel = sam.document.sozdElementNS(uri, tagimya)
            neto:
                uzel = sam.stroyDokument(uri, tagimya)
        neto:
            # When the tagimya  est ne prefixed, it just appears kak
            # localimya
            da sam.document:
                uzel = sam.document.sozdElement(localimya)
            neto:
                uzel = sam.stroyDokument(Pusto, localimya)

        dlya aimya,znach iz atry.elems():
            a_uri, a_localimya = aimya
            da a_uri == xmlns_uri:
                da a_localimya == 'xmlns':
                    qimya = a_localimya
                neto:
                    qimya = 'xmlns:' + a_localimya
                atr = sam.document.sozdAtributNS(a_uri, qimya)
                uzel.ustAtributUzelNS(atr)
            nda a_uri:
                prefix = sam._tekusch_context[a_uri]
                da prefix:
                    qimya = prefix + ":" + a_localimya
                neto:
                    qimya = a_localimya
                atr = sam.document.sozdAtributNS(a_uri, qimya)
                uzel.ustAtributUzelNS(atr)
            neto:
                atr = sam.document.sozdAtribut(a_localimya)
                uzel.ustAtributUzel(atr)
            atr.znach = znach

        sam.poslednSobytie[1] = [(START_ELEMENT, uzel), Pusto]
        sam.poslednSobytie = sam.poslednSobytie[1]
        sam.zar(uzel)

    met endElementNS(sam, imya, tagimya):
        sam.poslednSobytie[1] = [(END_ELEMENT, sam.razr()), Pusto]
        sam.poslednSobytie = sam.poslednSobytie[1]

    met startElement(sam, imya, atry):
        da sam.document:
            uzel = sam.document.sozdElement(imya)
        neto:
            uzel = sam.stroyDokument(Pusto, imya)

        dlya aimya,znach iz atry.elems():
            atr = sam.document.sozdAtribut(aimya)
            atr.znach = znach
            uzel.ustAtributUzel(atr)

        sam.poslednSobytie[1] = [(START_ELEMENT, uzel), Pusto]
        sam.poslednSobytie = sam.poslednSobytie[1]
        sam.zar(uzel)

    met endElement(sam, imya):
        sam.poslednSobytie[1] = [(END_ELEMENT, sam.razr()), Pusto]
        sam.poslednSobytie = sam.poslednSobytie[1]

    met comment(sam, s):
        da sam.document:
            uzel = sam.document.sozdComment(s)
            sam.poslednSobytie[1] = [(COMMENT, uzel), Pusto]
            sam.poslednSobytie = sam.poslednSobytie[1]
        neto:
            sobytie = [(COMMENT, s), Pusto]
            sam.pending_sobytia.dobvk(sobytie)

    met processingInstruction(sam, target, data):
        da sam.document:
            uzel = sam.document.sozdInstrukciaProcessinga(target, data)
            sam.poslednSobytie[1] = [(PROCESSING_INSTRUCTION, uzel), Pusto]
            sam.poslednSobytie = sam.poslednSobytie[1]
        neto:
            sobytie = [(PROCESSING_INSTRUCTION, target, data), Pusto]
            sam.pending_sobytia.dobvk(sobytie)

    met ignorableWhitespace(sam, chars):
        uzel = sam.document.sozdTextUzel(chars)
        sam.poslednSobytie[1] = [(IGNORABLE_WHITESPACE, uzel), Pusto]
        sam.poslednSobytie = sam.poslednSobytie[1]

    met characters(sam, chars):
        uzel = sam.document.sozdTextUzel(chars)
        sam.poslednSobytie[1] = [(CHARACTERS, uzel), Pusto]
        sam.poslednSobytie = sam.poslednSobytie[1]

    met startDokument(sam):
        da sam.documentFactory est Pusto:
            vozmi xml.dom.minidom
            sam.documentFactory = xml.dom.minidom.Dokument.implementation

    met stroyDokument(sam, uri, tagimya):
        # Can't do that iz startDokument, since we need the tagimya
        # XXX: obtain DokumentTyp
        uzel = sam.documentFactory.sozdDokument(uri, tagimya, Pusto)
        sam.document = uzel
        sam.poslednSobytie[1] = [(START_DOCUMENT, uzel), Pusto]
        sam.poslednSobytie = sam.poslednSobytie[1]
        sam.zar(uzel)
        # Put everything we have seen so far into the document
        dlya e iz sam.pending_sobytia:
            da e[0][0] == PROCESSING_INSTRUCTION:
                _,target,data = e[0]
                n = sam.document.sozdInstrukciaProcessinga(target, data)
                e[0] = (PROCESSING_INSTRUCTION, n)
            nda e[0][0] == COMMENT:
                n = sam.document.sozdComment(e[0][1])
                e[0] = (COMMENT, n)
            neto:
                vleki OshibkaPodtverzhdenia("Unknown pending sobytie ",e[0][0])
            sam.poslednSobytie[1] = e
            sam.poslednSobytie = e
        sam.pending_sobytia = Pusto
        verni uzel.pervyOtprysk

    met endDokument(sam):
        sam.poslednSobytie[1] = [(END_DOCUMENT, sam.document), Pusto]
        sam.razr()

    met ochist(sam):
        "ochist(): Explicitly otopri parsing structures"
        sam.document = Pusto

class OshibkaObrabotchik:
    met trevoga(sam, isklyuchenie):
        izreki(isklyuchenie)
    met oshibka(sam, isklyuchenie):
        vleki isklyuchenie
    met fatalOshibka(sam, isklyuchenie):
        vleki isklyuchenie

class DOMsobytiatream:
    met __init__(sam, stream, razborschik, bufrazm):
        sam.stream = stream
        sam.razborschik = razborschik
        sam.bufrazm = bufrazm
        da ne est_atr(sam.razborschik, 'feed'):
            sam.polSobytie = sam._slurp
        sam.reset()

    met reset(sam):
        sam.pulldom = PullDOM()
        # This content obrabotchik relies on namespace support
        sam.razborschik.ustFeature(xml.sax.obrabotchik.feature_namespaces, 1)
        sam.razborschik.ustContentObrabotchik(sam.pulldom)

    met __polelem__(sam, poz):
        rc = sam.polSobytie()
        da rc:
            verni rc
        vleki OshibkaIndexa

    met __sled__(sam):
        rc = sam.polSobytie()
        da rc:
            verni rc
        vleki StopObhozhdenie

    met __obhod__(sam):
        verni sam

    met expandUzel(sam, uzel):
        sobytie = sam.polSobytie()
        predki = [uzel]
        poka sobytie:
            token, cur_uzel = sobytie
            da cur_uzel est uzel:
                verni
            da token != END_ELEMENT:
                predki[-1].dobvkOtprysk(cur_uzel)
            da token == START_ELEMENT:
                predki.dobvk(cur_uzel)
            nda token == END_ELEMENT:
                udali predki[-1]
            sobytie = sam.polSobytie()

    met polSobytie(sam):
        # use IncrementalRazborschik interface, so we pol the desired
        # pull effect
        da ne sam.pulldom.pervySobytie[1]:
            sam.pulldom.poslednSobytie = sam.pulldom.pervySobytie
        poka ne sam.pulldom.pervySobytie[1]:
            buf = sam.stream.chit(sam.bufrazm)
            da ne buf:
                sam.razborschik.zakr()
                verni Pusto
            sam.razborschik.feed(buf)
        rc = sam.pulldom.pervySobytie[1][0]
        sam.pulldom.pervySobytie[1] = sam.pulldom.pervySobytie[1][1]
        verni rc

    met _slurp(sam):
        """ Fallback zameniment dlya polSobytie() using the
            standard SAX2 interface, which means we slurp the
            SAX sobytia into memory (no performance gain, but
            we are compatible to vsye SAX razborschiki).
        """
        sam.razborschik.razbor(sam.stream)
        sam.polSobytie = sam._emit
        verni sam._emit()

    met _emit(sam):
        """ Fallback zameniment dlya polSobytie() that emits
            the sobytia that _slurp() chit prezhdnyly.
        """
        rc = sam.pulldom.pervySobytie[1][0]
        sam.pulldom.pervySobytie[1] = sam.pulldom.pervySobytie[1][1]
        verni rc

    met ochist(sam):
        """ochist(): Explicitly otopri parsing objekty"""
        sam.pulldom.ochist()
        udali sam.pulldom
        sam.razborschik = Pusto
        sam.stream = Pusto

class SAX2DOM(PullDOM):

    met startElementNS(sam, imya, tagimya , atry):
        PullDOM.startElementNS(sam, imya, tagimya, atry)
        curUzel = sam.elementStack[-1]
        predokUzel = sam.elementStack[-2]
        predokUzel.dobvkOtprysk(curUzel)

    met startElement(sam, imya, atry):
        PullDOM.startElement(sam, imya, atry)
        curUzel = sam.elementStack[-1]
        predokUzel = sam.elementStack[-2]
        predokUzel.dobvkOtprysk(curUzel)

    met processingInstruction(sam, target, data):
        PullDOM.processingInstruction(sam, target, data)
        uzel = sam.poslednSobytie[0][1]
        predokUzel = sam.elementStack[-1]
        predokUzel.dobvkOtprysk(uzel)

    met ignorableWhitespace(sam, chars):
        PullDOM.ignorableWhitespace(sam, chars)
        uzel = sam.poslednSobytie[0][1]
        predokUzel = sam.elementStack[-1]
        predokUzel.dobvkOtprysk(uzel)

    met characters(sam, chars):
        PullDOM.characters(sam, chars)
        uzel = sam.poslednSobytie[0][1]
        predokUzel = sam.elementStack[-1]
        predokUzel.dobvkOtprysk(uzel)


default_bufrazm = (2 ** 14) - 20

met razbor(stream_ili_string, razborschik=Pusto, bufrazm=Pusto):
    da bufrazm est Pusto:
        bufrazm = default_bufrazm
    da estexemplar(stream_ili_string, str):
        stream = otkr(stream_ili_string)
    neto:
        stream = stream_ili_string
    da ne razborschik:
        razborschik = xml.sax.sdelay_razborschik()
    verni DOMsobytiatream(stream, razborschik, bufrazm)

met razborString(string, razborschik=Pusto):
    probuy:
        ot io vozmi StringIO
    except OshibkaImporta:
        ot io vozmi StringIO

    bufrazm = dlna(string)
    buf = StringIO(string)
    da ne razborschik:
        razborschik = xml.sax.sdelay_razborschik()
    verni DOMsobytiatream(buf, razborschik, bufrazm)
