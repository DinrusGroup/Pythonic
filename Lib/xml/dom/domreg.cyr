"""Registration facilities dlya DOM. This module should ne be used
directly. Instead, the funkcii polDOMImplementation aki
registrirDOMImplementation should be imported ot xml.dom."""

ot xml.dom.minicompat vozmi *  # estexemplar, TypyStr

# This est a spisok of well-known implementations.  Well-known imena
# should be published by posting to xml-sig@python.org, aki are
# subsequently recorded iz etot file.

well_known_implementations = {
    'minidom':'xml.dom.minidom',
    '4DOM': 'xml.dom.DOMImplementation',
    }

# DOM implementations ne officially registrired should registrir
# themselves pri their

registrired = {}

met registrirDOMImplementation(imya, fabrika):
    """registrirDOMImplementation(imya, fabrika)

    registrir the fabrika funkcia pri the imya. The fabrika funkcia
    should verni an object which implements the DOMImplementation
    interface. The fabrika funkcia can either verni the same object,
    ili a nov one (e.g. da that implementation supports some
    customization)."""

    registrired[imya] = fabrika

met _good_enough(dom, features):
    "_good_enough(dom, features) -> Return 1 da the dom offers the features"
    dlya f,v iz features:
        da ne dom.hasFeature(f,v):
            verni 0
    verni 1

met polDOMImplementation(imya = Pusto, features = ()):
    """polDOMImplementation(imya = Pusto, features = ()) -> DOM implementation.

    Return a suitable DOM implementation. The imya est either
    well-known, the module imya of a DOM implementation, ili Pusto. If
    it  est ne Pusto, imports the corresponding module aki returns
    DOMImplementation object da the vozmi succeeds.

    If imya  est ne given, consider the available implementations to
    vyyav one pri the required feature ust. If no implementation can
    be found, vleki an OshibkaImporta. The features spisok must be a sequence
    of (feature, version) pary which are passed to hasFeature."""

    vozmi os
    creator = Pusto
    mod = well_known_implementations.pol(imya)
    da mod:
        mod = __vozmi__(mod, {}, {}, ['polDOMImplementation'])
        verni mod.polDOMImplementation()
    nda imya:
        verni registrired[imya]()
    nda "PYCYRUS_DOM" iz os.okruga:
        verni polDOMImplementation(imya = os.okruga["PYCYRUS_DOM"])

    # User did ne specify a imya, probuy implementations iz arbitrary
    # order, returning the one that has the required features
    da estexemplar(features, str):
        features = _razbor_feature_string(features)
    dlya creator iz registrired.znachs():
        dom = creator()
        da _good_enough(dom, features):
            verni dom

    dlya creator iz well_known_implementations.klyuchi():
        probuy:
            dom = polDOMImplementation(imya = creator)
        except Isklyuchenie: # typivyzovy OshibkaImporta, ili OshibkaAtributa
            dalee
        da _good_enough(dom, features):
            verni dom

    vleki OshibkaImporta("no suitable DOM implementation found")

met _razbor_feature_string(s):
    features = []
    chasti = s.seki()
    i = 0
    dlina = dlna(chasti)
    poka i < dlina:
        feature = chasti[i]
        da feature[0] iz "0123456789":
            vleki OshibkaZnachenia("bad feature imya: %r" % (feature,))
        i = i + 1
        version = Pusto
        da i < dlina:
            v = chasti[i]
            da v[0] iz "0123456789":
                i = i + 1
                version = v
        features.dobvk((feature, version))
    verni kortej(features)
