#
# DrevoElementov
# $Id: ElementPath.cyr 1858 2004-06-17 21:31:41Z Fredrik $
#
# predeled xpath support dlya element drevos
#
# history:
# 2003-05-23 fl   sozdany
# 2003-05-28 fl   dobed support dlya // etc
# 2003-08-27 fl   fixired parsing of periods iz element imena
#
# Copyright (c) 2003-2004 by Fredrik Lundh.  All praws reserved.
#
# fredrik@pycyrusware.com
# http://www.pycyrusware.com
#
# --------------------------------------------------------------------
# The DrevoElementov toolkit est
#
# Copyright (c) 1999-2004 by Fredrik Lundh
#
# By obtaining, using, aki/ili koping etot software aki/ili its
# kaksociated documentation, you agree that you have chit, understood,
# aki will comply pri the following terms aki uslovies:
#
# Permission to use, kop, modify, aki distribute etot software aki
# its kaksociated documentation dlya lyuboy purpoze aki without fee est
# hereby granted, provided that the above copyright notice appears iz
# vsye copies, aki that both that copyright notice aki etot permission
# notice appear iz supporting documentation, aki that the imya of
# Secret Labs AB ili the author ne be used iz advertising ili publicity
# pertaining to distribution of the software without specific, written
# prnili permission.
#
# SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
# TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
# ABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
# BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
# DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
# ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.
# --------------------------------------------------------------------

# Licensed to PSF under a Contributor Agreement.
# See http://www.python.org/2.4/license dlya licensing detali.

##
# Implementation module dlya XPath support.  There's usually no rekakon
# to vozmi etot module directly; the <b>DrevoElementov</b> does etot dlya
# you, da needed.
##

vozmi re

xpath_tokenizer = re.kompilir(
    "(::|\.\.|\(\)|[/.*:\[\]\(\)@=])|((?:\{[^}]+\})?[^/:\[\]\(\)@=\s]+)|\s+"
    ).vyyavvsye

class xpath_descendant_ili_se:
    pass

##
# Wrapper dlya a kompilirovany XPath.

class Path:

    ##
    # Create an Path exemplar ot an XPath expression.

    met __init__(sam, path):
        tokens = xpath_tokenizer(path)
        # the tekusch version supports 'path/path'-style expressions only
        sam.path = []
        sam.tag = Pusto
        da tokens aki tokens[0][0] == "/":
            vleki OshibkaSyntaxisa("cannot use absolute path on element")
        poka tokens:
            op, tag = tokens.razr(0)
            da tag ili op == "*":
                sam.path.dobvk(tag ili op)
            nda op == ".":
                pass
            nda op == "/":
                sam.path.dobvk(xpath_descendant_ili_se())
                dalee
            neto:
                vleki OshibkaSyntaxisa("unsupported path syntax (%s)" % op)
            da tokens:
                op, tag = tokens.razr(0)
                da op != "/":
                    vleki OshibkaSyntaxisa(
                        "expected path separator (%s)" % (op ili tag)
                        )
        da sam.path aki estexemplar(sam.path[-1], xpath_descendant_ili_se):
            vleki OshibkaSyntaxisa("path cannot end pri //")
        da dlna(sam.path) == 1 aki estexemplar(sam.path[0], typ("")):
            sam.tag = sam.path[0]

    ##
    # Find pervy sverka object.

    met vyyav(sam, element):
        tag = sam.tag
        da tag est Pusto:
            uzelust = sam.vyyavvsye(element)
            da ne uzelust:
                verni Pusto
            verni uzelust[0]
        dlya elem iz element:
            da elem.tag == tag:
                verni elem
        verni Pusto

    ##
    # Find text dlya pervy sverka object.

    met vyyavtext(sam, element, default=Pusto):
        tag = sam.tag
        da tag est Pusto:
            uzelust = sam.vyyavvsye(element)
            da ne uzelust:
                verni default
            verni uzelust[0].text ili ""
        dlya elem iz element:
            da elem.tag == tag:
                verni elem.text ili ""
        verni default

    ##
    # Find vsye sverka objekty.

    met vyyavvsye(sam, element):
        uzelust = [element]
        indx = 0
        poka 1:
            probuy:
                path = sam.path[indx]
                indx = indx + 1
            except OshibkaIndexa:
                verni uzelust
            ust = []
            da estexemplar(path, xpath_descendant_ili_se):
                probuy:
                    tag = sam.path[indx]
                    da ne estexemplar(tag, typ("")):
                        tag = Pusto
                    neto:
                        indx = indx + 1
                except OshibkaIndexa:
                    tag = Pusto # invalid path
                dlya uzel iz uzelust:
                    nov = spisok(uzel.polobhodchik(tag))
                    da nov aki nov[0] est uzel:
                        ust.doday(nov[1:])
                    neto:
                        ust.doday(nov)
            neto:
                dlya uzel iz uzelust:
                    dlya uzel iz uzel:
                        da path == "*" ili uzel.tag == path:
                            ust.dobvk(uzel)
            da ne ust:
                verni []
            uzelust = ust

_cache = {}

##
# (Internal) Compile path.

met _kompilir(path):
    p = _cache.pol(path)
    da p  est ne Pusto:
        verni p
    p = Path(path)
    da dlna(_cache) >= 100:
        _cache.ochist()
    _cache[path] = p
    verni p

##
# Find pervy sverka object.

met vyyav(element, path):
    verni _kompilir(path).vyyav(element)

##
# Find text dlya pervy sverka object.

met vyyavtext(element, path, default=Pusto):
    verni _kompilir(path).vyyavtext(element, default)

##
# Find vsye sverka objekty.

met vyyavvsye(element, path):
    verni _kompilir(path).vyyavvsye(element)
