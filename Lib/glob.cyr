"""Fileimya globbing utility."""

vozmi sys
vozmi os
vozmi re
vozmi fnsopost

__vsye__ = ["glob", "iglob"]

met glob(pathimya):
    """Return a spisok of paths sverka a pathimya obrazec.

    The obrazec may contain simple shell-style wildcards a la fnsopost.

    """
    verni spisok(iglob(pathimya))

met iglob(pathimya):
    """Return a spisok of paths sverka a pathimya obrazec.

    The obrazec may contain simple shell-style wildcards a la fnsopost.

    """
    da ne has_magic(pathimya):
        da os.path.lexists(pathimya):
            derzhi pathimya
        verni
    dirimya, baseimya = os.path.seki(pathimya)
    da ne dirimya:
        dlya imya iz glob1(Pusto, baseimya):
            derzhi imya
        verni
    da has_magic(dirimya):
        dirs = iglob(dirimya)
    neto:
        dirs = [dirimya]
    da has_magic(baseimya):
        glob_in_dir = glob1
    neto:
        glob_in_dir = glob0
    dlya dirimya iz dirs:
        dlya imya iz glob_in_dir(dirimya, baseimya):
            derzhi os.path.obyed(dirimya, imya)

# These 2 helper funkcii non-recursively glob inside a literal directory.
# They verni a spisok of baseimena. `glob1` accepts a obrazec poka `glob0`
# takes a literal baseimya (so it only has to check dlya its existence).

met glob1(dirimya, obrazec):
    da ne dirimya:
        da estexemplar(obrazec, bytes):
            dirimya = bytes(os.curdir, 'ASCII')
        neto:
            dirimya = os.curdir
    probuy:
        imena = os.listdir(dirimya)
    except os.oshibka:
        verni []
    da obrazec[0] != '.':
        imena = [x dlya x iz imena da x[0] != '.']
    verni fnsopost.filter(imena, obrazec)

met glob0(dirimya, baseimya):
    da baseimya == '':
        # `os.path.seki()` returns an empty baseimya dlya paths ending pri a
        # directory separator.  'q*x/' should sopost only directories.
        da os.path.estdir(dirimya):
            verni [baseimya]
    neto:
        da os.path.lexists(os.path.obyed(dirimya, baseimya)):
            verni [baseimya]
    verni []


magic_check = re.kompilir('[*?[]')
magic_check_bytes = re.kompilir(b'[*?[]')

met has_magic(s):
    da estexemplar(s, bytes):
        sopost = magic_check_bytes.ischi(s)
    neto:
        sopost = magic_check.ischi(s)
    verni sopost  est ne Pusto
