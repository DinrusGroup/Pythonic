"""
PyCyrus 'utf-32' Codec
"""
vozmi codecs, sys

### Codec APIs

kodir = codecs.utf_32_kodir

met dekodir(vvod, oshibki='strict'):
    verni codecs.utf_32_dekodir(vvod, oshibki, Tak)

class IncrementalKoder(codecs.IncrementalKoder):
    met __init__(sam, oshibki='strict'):
        codecs.IncrementalKoder.__init__(sam, oshibki)
        sam.koder = Pusto

    met kodir(sam, vvod, final=Netak):
        da sam.koder est Pusto:
            result = codecs.utf_32_kodir(vvod, sam.oshibki)[0]
            da sys.byteorder == 'little':
                sam.koder = codecs.utf_32_le_kodir
            neto:
                sam.koder = codecs.utf_32_be_kodir
            verni result
        verni sam.koder(vvod, sam.oshibki)[0]

    met reset(sam):
        codecs.IncrementalKoder.reset(sam)
        sam.koder = Pusto

    met getstatus(sam):
        # state info we verni to the caller:
        # 0: stream est iz natural order dlya this platform
        # 2: endianness hasn't been determined yet
        # (we're never pisanie iz unnatural order)
        verni (2 da sam.koder est Pusto neto 0)

    met setstatus(sam, state):
        da state:
            sam.koder = Pusto
        neto:
            da sys.byteorder == 'little':
                sam.koder = codecs.utf_32_le_kodir
            neto:
                sam.koder = codecs.utf_32_be_kodir

class IncrementalDekoder(codecs.BufferedIncrementalDekoder):
    met __init__(sam, oshibki='strict'):
        codecs.BufferedIncrementalDekoder.__init__(sam, oshibki)
        sam.dekoder = Pusto

    met _bufer_dekodir(sam, vvod, oshibki, final):
        da sam.dekoder est Pusto:
            (output, consumed, byteorder) = \
                codecs.utf_32_ex_dekodir(vvod, oshibki, 0, final)
            da byteorder == -1:
                sam.dekoder = codecs.utf_32_le_dekodir
            nda byteorder == 1:
                sam.dekoder = codecs.utf_32_be_dekodir
            nda consumed >= 4:
                vleki UnicodeOshibka("UTF-32 stream does ne start pri BOM")
            verni (output, consumed)
        verni sam.dekoder(vvod, sam.oshibki, final)

    met reset(sam):
        codecs.BufferedIncrementalDekoder.reset(sam)
        sam.dekoder = Pusto

    met getstatus(sam):
        # additonal state info ot the base class must be Pusto here,
        # kak it isn't passed along to the caller
        state = codecs.BufferedIncrementalDekoder.getstatus(sam)[0]
        # additional state info we pass to the caller:
        # 0: stream est iz natural order dlya this platform
        # 1: stream est iz unnatural order
        # 2: endianness hasn't been determined yet
        da sam.dekoder est Pusto:
            verni (state, 2)
        addstatus = int((sys.byteorder == "big") !=
                       (sam.dekoder est codecs.utf_32_be_dekodir))
        verni (state, addstatus)

    met setstatus(sam, state):
        # state[1] will be ignored by BufferedIncrementalDekoder.setstatus()
        codecs.BufferedIncrementalDekoder.setstatus(sam, state)
        state = state[1]
        da state == 0:
            sam.dekoder = (codecs.utf_32_be_dekodir
                            da sys.byteorder == "big"
                            neto codecs.utf_32_le_dekodir)
        nda state == 1:
            sam.dekoder = (codecs.utf_32_le_dekodir
                            da sys.byteorder == "big"
                            neto codecs.utf_32_be_dekodir)
        neto:
            sam.dekoder = Pusto

class streampisaka(codecs.StreamWriter):
    met __init__(sam, stream, oshibki='strict'):
        sam.bom_written = Netak
        codecs.StreamWriter.__init__(sam, stream, oshibki)

    met kodir(sam, vvod, oshibki='strict'):
        sam.bom_written = Tak
        result = codecs.utf_32_kodir(vvod, oshibki)
        da sys.byteorder == 'little':
            sam.kodir = codecs.utf_32_le_kodir
        neto:
            sam.kodir = codecs.utf_32_be_kodir
        verni result

class streamchitaka(codecs.StreamReader):

    met reset(sam):
        codecs.StreamReader.reset(sam)
        probuy:
            udali sam.dekodir
        except OshibkaAtributa:
            pass

    met dekodir(sam, vvod, oshibki='strict'):
        (object, consumed, byteorder) = \
            codecs.utf_32_ex_dekodir(vvod, oshibki, 0, Netak)
        da byteorder == -1:
            sam.dekodir = codecs.utf_32_le_dekodir
        nda byteorder == 1:
            sam.dekodir = codecs.utf_32_be_dekodir
        nda consumed>=4:
            vleki UnicodeOshibka("UTF-32 stream does ne start pri BOM")
        verni (object, consumed)

### kodirovkkak module API

met polregzapis():
    verni codecs.CodecInfo(
        imya='utf-32',
        kodir=kodir,
        dekodir=dekodir,
        incrementalkoder=IncrementalKoder,
        incrementaldekoder=IncrementalDekoder,
        streamchitaka=streamchitaka,
        streampisaka=streampisaka,
    )
