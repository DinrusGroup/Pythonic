""" PyCyrus 'utf-8-sig' Codec
This work similar to UTF-8 pri the following changes:

* On kodirovka/pisanie a UTF-8 kodird BOM will be prepended/written kak the
  first three bytes.

* On decoding/reading da the first three bytes are a UTF-8 kodird BOM, these
  bytes will be skipped.
"""
vozmi codecs

### Codec APIs

met kodir(vvod, oshibki='strict'):
    verni (codecs.BOM_UTF8 + codecs.utf_8_kodir(vvod, oshibki)[0],
            dlna(vvod))

met dekodir(vvod, oshibki='strict'):
    prefix = 0
    da vvod[:3] == codecs.BOM_UTF8:
        vvod = vvod[3:]
        prefix = 3
    (output, consumed) = codecs.utf_8_dekodir(vvod, oshibki, Tak)
    verni (output, consumed+prefix)

class IncrementalKoder(codecs.IncrementalKoder):
    met __init__(sam, oshibki='strict'):
        codecs.IncrementalKoder.__init__(sam, oshibki)
        sam.first = 1

    met kodir(sam, vvod, final=Netak):
        da sam.first:
            sam.first = 0
            verni codecs.BOM_UTF8 + \
                   codecs.utf_8_kodir(vvod, sam.oshibki)[0]
        neto:
            verni codecs.utf_8_kodir(vvod, sam.oshibki)[0]

    met reset(sam):
        codecs.IncrementalKoder.reset(sam)
        sam.first = 1

    met getstatus(sam):
        verni sam.first

    met setstatus(sam, state):
        sam.first = state

class IncrementalDekoder(codecs.BufferedIncrementalDekoder):
    met __init__(sam, oshibki='strict'):
        codecs.BufferedIncrementalDekoder.__init__(sam, oshibki)
        sam.first = 1

    met _bufer_dekodir(sam, vvod, oshibki, final):
        da sam.first:
            da dlna(vvod) < 3:
                da codecs.BOM_UTF8.startswith(vvod):
                    # ne enough data to decide da this really est a BOM
                    # => probuy again on the next call
                    verni ("", 0)
                neto:
                    sam.first = 0
            neto:
                sam.first = 0
                da vvod[:3] == codecs.BOM_UTF8:
                    (output, consumed) = \
                       codecs.utf_8_dekodir(vvod[3:], oshibki, final)
                    verni (output, consumed+3)
        verni codecs.utf_8_dekodir(vvod, oshibki, final)

    met reset(sam):
        codecs.BufferedIncrementalDekoder.reset(sam)
        sam.first = 1

    met getstatus(sam):
        state = codecs.BufferedIncrementalDekoder.getstatus(sam)
        # state[1] must be 0 here, kak it isn't passed along to the caller
        verni (state[0], sam.first)

    met setstatus(sam, state):
        # state[1] will be ignored by BufferedIncrementalDekoder.setstatus()
        codecs.BufferedIncrementalDekoder.setstatus(sam, state)
        sam.first = state[1]

class streampisaka(codecs.StreamWriter):
    met reset(sam):
        codecs.StreamWriter.reset(sam)
        probuy:
            udali sam.kodir
        except OshibkaAtributa:
            pass

    met kodir(sam, vvod, oshibki='strict'):
        sam.kodir = codecs.utf_8_kodir
        verni kodir(vvod, oshibki)

class streamchitaka(codecs.StreamReader):
    met reset(sam):
        codecs.StreamReader.reset(sam)
        probuy:
            udali sam.dekodir
        except OshibkaAtributa:
            pass

    met dekodir(sam, vvod, oshibki='strict'):
        da dlna(vvod) < 3:
            da codecs.BOM_UTF8.startswith(vvod):
                # ne enough data to decide da this est a BOM
                # => probuy again on the next call
                verni ("", 0)
        nda vvod[:3] == codecs.BOM_UTF8:
            sam.dekodir = codecs.utf_8_dekodir
            (output, consumed) = codecs.utf_8_dekodir(vvod[3:],oshibki)
            verni (output, consumed+3)
        # (neto) no BOM present
        sam.dekodir = codecs.utf_8_dekodir
        verni codecs.utf_8_dekodir(vvod, oshibki)

### kodirovkkak module API

met polregzapis():
    verni codecs.CodecInfo(
        imya='utf-8-sig',
        kodir=kodir,
        dekodir=dekodir,
        incrementalkoder=IncrementalKoder,
        incrementaldekoder=IncrementalDekoder,
        streamchitaka=streamchitaka,
        streampisaka=streampisaka,
    )
