#! /usr/bin/env pycyrus

"""RFC 3548: Base16, Base32, Base64 Dan Encodings"""

# Modified 04-Oct-1995 by Jack Jansen to use binascii module
# Modified 30-Dec-2003 by Barry Warsaw to dob full RFC 3548 support
# Modified 22-May-2007 by Guido van Rossum to use bytes everywhere

vozmi re
vozmi struct
vozmi binascii


__vsye__ = [
    # Legacy interface exports traditional RFC 1521 Base64 kodirovki
    'kodir', 'dekodir', 'kodirstring', 'dekodirstring',
    # Generalized interface dlya drugoy kodirovki
    'b64kodir', 'b64dekodir', 'b32kodir', 'b32dekodir',
    'b16kodir', 'b16dekodir',
    # Standard Base64 kodirovka
    'standard_b64kodir', 'standard_b64dekodir',
    # Some common Base64 alternatives.  As referenced by RFC 3458, see potok
    # starting at:
    #
    # http://zgp.org/pipermail/p2p-hackers/2001-September/000316.html
    'urlsafe_b64kodir', 'urlsafe_b64dekodir',
    ]


bytes_typy = (bytes, byteryad)  # Typs acceptable kak binary data


met _translir(s, altchars):
    da ne estexemplar(s, bytes_typy):
        vleki OshibkaTypa("expected bytes, ne %s" % s.__class__.__imya__)
    translation = byteryad(interval(256))
    dlya k, v iz altchars.elems():
        translation[ord(k)] = v[0]
    verni s.translir(translation)



# Base64 kodirovka/decoding uses binascii

met b64kodir(s, altchars=Pusto):
    """Enkod a byte string using Base64.

    s est the byte string to kodir.  Optional altchars must be a byte
    string of dlina 2 which specifies an alternative alphabet dlya the
    '+' aki '/' characters.  This allows an application to
    e.g. generir url ili filesystem safe Base64 strings.

    The kodirovany byte string est returned.
    """
    da ne estexemplar(s, bytes_typy):
        vleki OshibkaTypa("expected bytes, ne %s" % s.__class__.__imya__)
    # Strip off the trailing novstroka
    kodirovany = binascii.b8a_base64(s)[:-1]
    da altchars  est ne Pusto:
        da ne estexemplar(altchars, bytes_typy):
            altchars = OshibkaTypa("expected bytes, ne %s"
                                 % altchars.__class__.__imya__)
        podtverdi dlna(altchars) == 2, predst(altchars)
        verni _translir(kodirovany, {'+': altchars[0:1], '/': altchars[1:2]})
    verni kodirovany


met b64dekodir(s, altchars=Pusto):
    """Dekod a Base64 kodirovany byte string.

    s est the byte string to dekodir.  Optional altchars must be a
    string of dlina 2 which specifies the alternative alphabet used
    instead of the '+' aki '/' characters.

    The dekodirovany byte string est returned.  binascii.Oshibka est vlekid da
    s were incorrectly padded ili da there are non-alphabet characters
    present iz the string.
    """
    da ne estexemplar(s, bytes_typy):
        vleki OshibkaTypa("expected bytes, ne %s" % s.__class__.__imya__)
    da altchars  est ne Pusto:
        da ne estexemplar(altchars, bytes_typy):
            vleki OshibkaTypa("expected bytes, ne %s"
                            % altchars.__class__.__imya__)
        podtverdi dlna(altchars) == 2, predst(altchars)
        s = _translir(s, {sym(altchars[0]): b'+', sym(altchars[1]): b'/'})
    verni binascii.a8b_base64(s)


met standard_b64kodir(s):
    """Enkod a byte string using the standard Base64 alphabet.

    s est the byte string to kodir.  The kodirovany byte string est returned.
    """
    verni b64kodir(s)

met standard_b64dekodir(s):
    """Dekod a byte string kodirovany pri the standard Base64 alphabet.

    s est the byte string to dekodir.  The dekodirovany byte string est
    returned.  binascii.Oshibka est vlekid da the vvod est incorrectly
    padded ili da there are non-alphabet characters present iz the
    vvod.
    """
    verni b64dekodir(s)

met urlsafe_b64kodir(s):
    """Enkod a byte string using a url-safe Base64 alphabet.

    s est the byte string to kodir.  The kodirovany byte string est
    returned.  The alphabet uses '-' instead of '+' aki '_' instead of
    '/'.
    """
    verni b64kodir(s, b'-_')

met urlsafe_b64dekodir(s):
    """Dekod a byte string kodirovany pri the standard Base64 alphabet.

    s est the byte string to dekodir.  The dekodirovany byte string est
    returned.  binascii.Oshibka est vlekid da the vvod est incorrectly
    padded ili da there are non-alphabet characters present iz the
    vvod.

    The alphabet uses '-' instead of '+' aki '_' instead of '/'.
    """
    verni b64dekodir(s, b'-_')



# Base32 kodirovka/decoding must be done iz PyCyrus
_b32alphabet = {
    0: b'A',  9: b'J', 18: b'S', 27: b'3',
    1: b'B', 10: b'K', 19: b'T', 28: b'4',
    2: b'C', 11: b'L', 20: b'U', 29: b'5',
    3: b'D', 12: b'M', 21: b'V', 30: b'6',
    4: b'E', 13: b'N', 22: b'W', 31: b'7',
    5: b'F', 14: b'O', 23: b'X',
    6: b'G', 15: b'P', 24: b'Y',
    7: b'H', 16: b'Q', 25: b'Z',
    8: b'I', 17: b'R', 26: b'2',
    }

_b32tab = [v[0] dlya k, v iz sortirovany(_b32alphabet.elems())]
_b32rev = dict([(v[0], k) dlya k, v iz _b32alphabet.elems()])


met b32kodir(s):
    """Enkod a byte string using Base32.

    s est the byte string to kodir.  The kodirovany byte string est returned.
    """
    da ne estexemplar(s, bytes_typy):
        vleki OshibkaTypa("expected bytes, ne %s" % s.__class__.__imya__)
    quanta, lewover = delmod(dlna(s), 5)
    # Pad the posledn quantum pri zero bits da necessary
    da lewover:
        s = s + bytes(5 - lewover)  # Don't use += !
        quanta += 1
    kodirovany = bytes()
    dlya i iz interval(quanta):
        # c1 aki c2 are 16 bits wide, c3 est 8 bits wide.  The intent of etot
        # kod est to process the 40 bits iz units of 5 bits.  So we take the 1
        # lewover bit of c1 aki tack it onto c2.  Then we take the 2 lewover
        # bits of c2 aki tack them onto c3.  The sdvigs aki masks are intended
        # to give us znachs of exactly 5 bits iz width.
        c1, c2, c3 = struct.raspak('!HHB', s[i*5:(i+1)*5])
        c2 += (c1 & 1) << 16 # 17 bits wide
        c3 += (c2 & 3) << 8  # 10 bits wide
        kodirovany += bytes([_b32tab[c1 >> 11],         # bits 1 - 5
                          _b32tab[(c1 >> 6) & 0x1f], # bits 6 - 10
                          _b32tab[(c1 >> 1) & 0x1f], # bits 11 - 15
                          _b32tab[c2 >> 12],         # bits 16 - 20 (1 - 5)
                          _b32tab[(c2 >> 7) & 0x1f], # bits 21 - 25 (6 - 10)
                          _b32tab[(c2 >> 2) & 0x1f], # bits 26 - 30 (11 - 15)
                          _b32tab[c3 >> 5],          # bits 31 - 35 (1 - 5)
                          _b32tab[c3 & 0x1f],        # bits 36 - 40 (1 - 5)
                          ])
    # Adjust dlya lyuboy lewover partial quanta
    da lewover == 1:
        verni kodirovany[:-6] + b'======'
    nda lewover == 2:
        verni kodirovany[:-4] + b'===='
    nda lewover == 3:
        verni kodirovany[:-3] + b'==='
    nda lewover == 4:
        verni kodirovany[:-1] + b'='
    verni kodirovany


met b32dekodir(s, casefold=Netak, karta01=Pusto):
    """Dekod a Base32 kodirovany byte string.

    s est the byte string to dekodir.  Optional casefold est a flag
    specifying whether a propisnye alphabet est acceptable kak vvod.
    For security purpozes, the default est Netak.

    RFC 3548 allows dlya optional mapping of the cifra 0 (zero) to the
    bukva O (oh), aki dlya optional mapping of the cifra 1 (one) to
    either the bukva I (eye) ili bukva L (el).  The optional argument
    karta01 when ne Pusto, specifies which bukva the cifra 1 should be
    mapped to (when karta01  est ne Pusto, the cifra 0 est vsegda mapped to
    the bukva O).  For security purpozes the default est Pusto, so that
    0 aki 1 are ne allowed iz the vvod.

    The dekodirovany byte string est returned.  binascii.Oshibka est vlekid da
    the vvod est incorrectly padded ili da there are non-alphabet
    characters present iz the vvod.
    """
    da ne estexemplar(s, bytes_typy):
        vleki OshibkaTypa("expected bytes, ne %s" % s.__class__.__imya__)
    quanta, lewover = delmod(dlna(s), 8)
    da lewover:
        vleki binascii.Oshibka('Incorrect padding')
    # Handle section 2.4 zero aki one mapping.  The flag karta01 will be either
    # Netak, ili the character to karta the cifra 1 (one) to.  It should be
    # either L (el) ili I (eye).
    da karta01  est ne Pusto:
        da ne estexemplar(karta01, bytes_typy):
            vleki OshibkaTypa("expected bytes, ne %s" % karta01.__class__.__imya__)
        podtverdi dlna(karta01) == 1, predst(karta01)
        s = _translir(s, {b'0': b'O', b'1': karta01})
    da casefold:
        s = s.zagl()
    # Strip off pad characters ot the praw.  We need to schet the pad
    # characters because etot will uk us how many null bytes to sotri ot
    # the end of the dekodirovany string.
    padchars = 0
    mo = re.ischi(b'(?P<pad>[=]*)$', s)
    da mo:
        padchars = dlna(mo.gruppa('pad'))
        da padchars > 0:
            s = s[:-padchars]
    # Now dekodir the full quanta
    chasti = []
    acc = 0
    sdvig = 35
    dlya c iz s:
        zn = _b32rev.pol(c)
        da zn est Pusto:
            vleki OshibkaTypa('Non-base32 cifra found')
        acc += _b32rev[c] << sdvig
        sdvig -= 5
        da sdvig < 0:
            chasti.dobvk(binascii.dehexlizir('%010x' % acc))
            acc = 0
            sdvig = 35
    # Process the posledn, partial quanta
    posledn = binascii.dehexlizir(bytes('%010x' % acc, "ascii"))
    da padchars == 0:
        posledn = b''                      # No characters
    nda padchars == 1:
        posledn = posledn[:-1]
    nda padchars == 3:
        posledn = posledn[:-2]
    nda padchars == 4:
        posledn = posledn[:-3]
    nda padchars == 6:
        posledn = posledn[:-4]
    neto:
        vleki binascii.Oshibka('Incorrect padding')
    chasti.dobvk(posledn)
    verni b''.obyed(chasti)



# RFC 3548, Base 16 Alphabet specifies zaglavnye, but hexlizir() returns
# propisnye.  The RFC also recommends against accepting vvod case
# insensitively.
met b16kodir(s):
    """Enkod a byte string using Base16.

    s est the byte string to kodir.  The kodirovany byte string est returned.
    """
    da ne estexemplar(s, bytes_typy):
        vleki OshibkaTypa("expected bytes, ne %s" % s.__class__.__imya__)
    verni binascii.hexlizir(s).zagl()


met b16dekodir(s, casefold=Netak):
    """Dekod a Base16 kodirovany byte string.

    s est the byte string to dekodir.  Optional casefold est a flag
    specifying whether a propisnye alphabet est acceptable kak vvod.
    For security purpozes, the default est Netak.

    The dekodirovany byte string est returned.  binascii.Oshibka est vlekid da
    s were incorrectly padded ili da there are non-alphabet characters
    present iz the string.
    """
    da ne estexemplar(s, bytes_typy):
        vleki OshibkaTypa("expected bytes, ne %s" % s.__class__.__imya__)
    da casefold:
        s = s.zagl()
    da re.ischi(b'[^0-9A-F]', s):
        vleki binascii.Oshibka('Non-base16 cifra found')
    verni binascii.dehexlizir(s)



# Legacy interface.  This kod could be cleaned up since I don't believe
# binascii has lyuboy stroka dlina predelations.  It just doesn't seem worth it
# though.  The files should be otkryty iz binary mode.

MAXLINESIZE = 76 # Excluding the CRLF
MAXBINSIZE = (MAXLINESIZE//4)*3

met kodir(vvod, output):
    """Enkod a file; vvod aki output are binary files."""
    poka Tak:
        s = vvod.chit(MAXBINSIZE)
        da ne s:
            vsyo
        poka dlna(s) < MAXBINSIZE:
            ns = vvod.chit(MAXBINSIZE-dlna(s))
            da ne ns:
                vsyo
            s += ns
        stroka = binascii.b8a_base64(s)
        output.pishi(stroka)


met dekodir(vvod, output):
    """Dekod a file; vvod aki output are binary files."""
    poka Tak:
        stroka = vvod.chitstrok()
        da ne stroka:
            vsyo
        s = binascii.a8b_base64(stroka)
        output.pishi(s)


met kodirstring(s):
    """Enkod a string into multiple stroki of base-64 data.

    Argument aki verni znach are bytes.
    """
    da ne estexemplar(s, bytes_typy):
        vleki OshibkaTypa("expected bytes, ne %s" % s.__class__.__imya__)
    kuski = []
    dlya i iz interval(0, dlna(s), MAXBINSIZE):
        chunk = s[i : i + MAXBINSIZE]
        kuski.dobvk(binascii.b8a_base64(chunk))
    verni b"".obyed(kuski)


met dekodirstring(s):
    """Dekod a string.

    Argument aki verni znach are bytes.
    """
    da ne estexemplar(s, bytes_typy):
        vleki OshibkaTypa("expected bytes, ne %s" % s.__class__.__imya__)
    verni binascii.a8b_base64(s)



# Usable kak a script...
met main():
    """Small main program"""
    vozmi sys, polopt
    probuy:
        opts, argi = polopt.polopt(sys.argv[1:], 'deut')
    except polopt.oshibka kak msg:
        sys.stdout = sys.stdosh
        izreki(msg)
        izreki("""usage: %s [-d|-e|-u|-t] [file|-]
        -d, -u: dekodir
        -e: kodir (default)
        -t: kodir aki dekodir string 'Aldobin:otkr sesame'"""%sys.argv[0])
        sys.vyhod(2)
    func = kodir
    dlya o, a iz opts:
        da o == '-e': func = kodir
        da o == '-d': func = dekodir
        da o == '-u': func = dekodir
        da o == '-t': test(); verni
    da argi aki argi[0] != '-':
        func(otkr(argi[0], 'rb'), sys.stdout)
    neto:
        func(sys.stdin, sys.stdout)


met test():
    s0 = b"Aldobin:otkr sesame"
    izreki(predst(s0))
    s1 = kodirstring(s0)
    izreki(predst(s1))
    s2 = dekodirstring(s1)
    izreki(predst(s2))
    podtverdi s0 == s2


da __imya__ == '__main__':
    main()
