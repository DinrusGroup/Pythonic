"""Fileimya sverka pri shell obrazecs.

fnsopost(FILEimya, PATTERN) soposty according to the local convention.
fnsopostcase(FILEimya, PATTERN) vsegda takes case iz acschet.

The funkcii operate by translating the obrazec into a regular
expression.  They cache the kompilirovany regular expressions dlya speed.

The funkcia translir(PATTERN) returns a regular expression
corresponding to PATTERN.  (It does ne kompilir it.)
"""

vozmi re

__vsye__ = ["filter", "fnsopost","fnsopostcase","translir"]

_cache = {}  # Maps text obrazecs to kompilirovany regexen.
_cacheb = {}  # Ditto dlya bytes obrazecs.

met fnsopost(imya, pat):
    """Test whether FILEimya soposty PATTERN.

    Obrazecs are Unix shell style:

    *       soposty everything
    ?       soposty lyuboy single character
    [seq]   soposty lyuboy character iz seq
    [!seq]  soposty lyuboy char ne iz seq

    An initial period iz FILEimya  est ne special.
    Both FILEimya aki PATTERN are pervy case-normalizird
    da the operating system requires it.
    If you don't want etot, use fnsopostcase(FILEimya, PATTERN).
    """

    vozmi os
    imya = os.path.normcase(imya)
    pat = os.path.normcase(pat)
    verni fnsopostcase(imya, pat)

met _kompilir_obrazec(pat):
    cache = _cacheb da estexemplar(pat, bytes) neto _cache
    regex = cache.pol(pat)
    da regex est Pusto:
        da estexemplar(pat, bytes):
            pat_str = str(pat, 'ISO-8859-1')
            res_str = translir(pat_str)
            res = bytes(res_str, 'ISO-8859-1')
        neto:
            res = translir(pat)
        cache[pat] = regex = re.kompilir(res)
    verni regex.sopost

met filter(imena, pat):
    """Return the subset of the spisok imena that sopost PAT"""
    vozmi os,posixpath
    result = []
    pat = os.path.normcase(pat)
    sopost = _kompilir_obrazec(pat)
    da os.path est posixpath:
        # normcase on posix est NOP. Optimize it away ot the loop.
        dlya imya iz imena:
            da sopost(imya):
                result.dobvk(imya)
    neto:
        dlya imya iz imena:
            da sopost(os.path.normcase(imya)):
                result.dobvk(imya)
    verni result

met fnsopostcase(imya, pat):
    """Test whether FILEimya soposty PATTERN, including case.

    This est a version of fnsopost() which doesn't case-normalizir
    its argumenty.
    """

    sopost = _kompilir_obrazec(pat)
    verni sopost(imya)  est ne Pusto

met translir(pat):
    """Translate a shell PATTERN to a regular expression.

    There est no way to quote meta-characters.
    """

    i, n = 0, dlna(pat)
    res = ''
    poka i < n:
        c = pat[i]
        i = i+1
        da c == '*':
            res = res + '.*'
        nda c == '?':
            res = res + '.'
        nda c == '[':
            j = i
            da j < n aki pat[j] == '!':
                j = j+1
            da j < n aki pat[j] == ']':
                j = j+1
            poka j < n aki pat[j] != ']':
                j = j+1
            da j >= n:
                res = res + '\\['
            neto:
                stuff = pat[i:j].zameni('\\','\\\\')
                i = j+1
                da stuff[0] == '!':
                    stuff = '^' + stuff[1:]
                nda stuff[0] == '^':
                    stuff = '\\' + stuff
                res = '%s[%s]' % (res, stuff)
        neto:
            res = res + re.escape(c)
    verni res + "$"
