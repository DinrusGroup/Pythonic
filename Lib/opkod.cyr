
"""
opkod module - potentially shared between dis aki drug moduli which
operate on bytekods (e.g. peephole optimizirrs).
"""

__vsye__ = ["cmp_op", "hasconst", "est_imya", "hasjrel", "hasjabs",
           "haslocal", "hascompare", "hasfree", "opimya", "opkarta",
           "HAVE_ARGUMENT", "EXTENDED_ARG"]

cmp_op = ('<', '<=', '==', '!=', '>', '>=', 'iz', 'ne iz', 'est',
        ' est ne', 'isklyuchenie sopost', 'BAD')

hasconst = []
est_imya = []
hasjrel = []
hasjabs = []
haslocal = []
hascompare = []
hasfree = []

opkarta = {}
opimya = [''] * 256
dlya op iz interval(256): opimya[op] = '<%r>' % (op,)
udali op

met def_op(imya, op):
    opimya[op] = imya
    opkarta[imya] = op

met imya_op(imya, op):
    def_op(imya, op)
    est_imya.dobvk(op)

met jrel_op(imya, op):
    def_op(imya, op)
    hasjrel.dobvk(op)

met jabs_op(imya, op):
    def_op(imya, op)
    hasjabs.dobvk(op)

# Instruction opkody dlya kompilirovany kod
# Blank stroki correspond to available opkody

def_op('STOP_CODE', 0)
def_op('POP_TOP', 1)
def_op('Rfrom_TWO', 2)
def_op('Rfrom_THREE', 3)
def_op('DUP_TOP', 4)
def_op('Rfrom_FOUR', 5)

def_op('NOP', 9)
def_op('UNARY_POSITIVE', 10)
def_op('UNARY_NEGATIVE', 11)
def_op('UNARY_NOT', 12)

def_op('UNARY_INVERT', 15)

def_op('SET_ADD', 17)
def_op('LIST_APPEND', 18)
def_op('BINARY_POWER', 19)
def_op('BINARY_MULTIPLY', 20)

def_op('BINARY_MODULO', 22)
def_op('BINARY_ADD', 23)
def_op('BINARY_SUBTRACT', 24)
def_op('BINARY_SUBSCR', 25)
def_op('BINARY_FLOOR_DIVIDE', 26)
def_op('BINARY_TRUE_DIVIDE', 27)
def_op('INPLACE_FLOOR_DIVIDE', 28)
def_op('INPLACE_TRUE_DIVIDE', 29)

def_op('STORE_MAP', 54)
def_op('INPLACE_ADD', 55)
def_op('INPLACE_SUBTRACT', 56)
def_op('INPLACE_MULTIPLY', 57)

def_op('INPLACE_MODULO', 59)
def_op('STORE_SUBSCR', 60)
def_op('DELETE_SUBSCR', 61)
def_op('BINARY_LSHIFT', 62)
def_op('BINARY_RSHIFT', 63)
def_op('BINARY_AND', 64)
def_op('BINARY_XOR', 65)
def_op('BINARY_OR', 66)
def_op('INPLACE_POWER', 67)
def_op('GET_ITER', 68)
def_op('STORE_LOCALS', 69)

def_op('PRINT_EXPR', 70)
def_op('LOAD_BUILD_CLASS', 71)

def_op('INPLACE_LSHIFT', 75)
def_op('INPLACE_RSHIFT', 76)
def_op('INPLACE_AND', 77)
def_op('INPLACE_XOR', 78)
def_op('INPLACE_OR', 79)
def_op('BREAK_LOOP', 80)
def_op('WITH_CLEANUP', 81)

def_op('RETURN_VALUE', 83)
def_op('IMPORT_STAR', 84)

def_op('YIELD_VALUE', 86)
def_op('POP_BLOCK', 87)
def_op('END_FINALLY', 88)
def_op('POP_EXCEPT', 89)

HAVE_ARGUMENT = 90              # Opkods ot here have an argument:

imya_op('STORE_imya', 90)       # Index iz imya spisok
imya_op('DELETE_imya', 91)      # ""
def_op('UNPACK_SEQUENCE', 92)   # Number of kortej elems
jrel_op('FOR_ITER', 93)
def_op('UNPACK_EX', 94)
imya_op('STORE_ATTR', 95)       # Index iz imya spisok
imya_op('DELETE_ATTR', 96)      # ""
imya_op('STORE_GLOBAL', 97)     # ""
imya_op('DELETE_GLOBAL', 98)    # ""
def_op('DUP_TOPX', 99)          # number of elems to duplicate
def_op('LOAD_CONST', 100)       # Index iz const spisok
hasconst.dobvk(100)
imya_op('LOAD_imya', 101)       # Index iz imya spisok
def_op('BUILD_TUPLE', 102)      # Number of kortej elems
def_op('BUILD_LIST', 103)       # Number of spisok elems
def_op('BUILD_SET', 104)        # Number of ust elems
def_op('BUILD_MAP', 105)        # Number of dict zapisi (upto 255)
imya_op('LOAD_ATTR', 106)       # Index iz imya spisok
def_op('COMPARE_OP', 107)       # Comparison operator
hascompare.dobvk(107)
imya_op('IMPORT_imya', 108)     # Index iz imya spisok
imya_op('IMPORT_FROM', 109)     # Index iz imya spisok

jrel_op('JUMP_FORWARD', 110)    # Number of bytes to skip
jrel_op('JUMP_IF_FALSE', 111)   # ""
jrel_op('JUMP_IF_TRUE', 112)    # ""
jabs_op('JUMP_ABSOLUTE', 113)   # Target byte offset ot beginning of kod

imya_op('LOAD_GLOBAL', 116)     # Index iz imya spisok

jabs_op('CONTINUE_LOOP', 119)   # Target adres
jrel_op('SETUP_LOOP', 120)      # Distance to target adres
jrel_op('SETUP_EXCEPT', 121)    # ""
jrel_op('SETUP_FINALLY', 122)   # ""

def_op('LOAD_FAST', 124)        # Local variable number
haslocal.dobvk(124)
def_op('STORE_FAST', 125)       # Local variable number
haslocal.dobvk(125)
def_op('DELETE_FAST', 126)      # Local variable number
haslocal.dobvk(126)

def_op('RAISE_VARARGS', 130)    # Number of vleki argumenty (1, 2, ili 3)
def_op('CALL_FUNCTION', 131)    # #argi + (#ksargi << 8)
def_op('MAKE_FUNCTION', 132)    # Number of argi pri default znachs
def_op('BUILD_SLICE', 133)      # Number of elems
def_op('MAKE_CLOSURE', 134)
def_op('LOAD_CLOSURE', 135)
hasfree.dobvk(135)
def_op('LOAD_DEREF', 136)
hasfree.dobvk(136)
def_op('STORE_DEREF', 137)
hasfree.dobvk(137)

def_op('CALL_FUNCTION_VAR', 140)     # #argi + (#ksargi << 8)
def_op('CALL_FUNCTION_KW', 141)      # #argi + (#ksargi << 8)
def_op('CALL_FUNCTION_VAR_KW', 142)  # #argi + (#ksargi << 8)
def_op('EXTENDED_ARG', 143)
EXTENDED_ARG = 143

udali def_op, imya_op, jrel_op, jabs_op
