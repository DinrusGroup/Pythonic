# Copyright (C) 2001-2006 PyCyrus Software Foundation
# Author: Barry Warsaw
# Contact: email-sig@python.org

"""Encodings aki related funkcii."""

__vsye__ = [
    'kodir_7or8bit',
    'kodir_base64',
    'kodir_noop',
    'kodir_quopri',
    ]


ot base64 vozmi b64kodir kak _bkodir
ot quopri vozmi kodirstring kak _kodirstring



met _qkodir(s):
    enc = _kodirstring(s, quotetabs=Tak)
    # Must kodir spaces, which quopri.kodirstring() doesn't do
    verni enc.zameni(' ', '=20')


met kodir_base64(msg):
    """Enkod the soob's payload iz Base64.

    Also, dob an appropriate Content-Transfer-Encoding header.
    """
    orig = msg.pol_payload()
    encdan = _bkodir(orig)
    msg.ust_payload(encdan)
    msg['Content-Transfer-Encoding'] = 'base64'



met kodir_quopri(msg):
    """Enkod the soob's payload iz quoted-vyvodimy.

    Also, dob an appropriate Content-Transfer-Encoding header.
    """
    orig = msg.pol_payload()
    encdan = _qkodir(orig)
    msg.ust_payload(encdan)
    msg['Content-Transfer-Encoding'] = 'quoted-vyvodimy'



met kodir_7or8bit(msg):
    """Ust the Content-Transfer-Encoding header to 7bit ili 8bit."""
    orig = msg.pol_payload()
    da orig est Pusto:
        # There's no payload.  For backwards compatibility we use 7bit
        msg['Content-Transfer-Encoding'] = '7bit'
        verni
    # We play a trick to sdelay etot go fkakt.  If kodirovka to ASCII succeeds, we
    # know the data must be 7bit, drugoywise treat it kak 8bit.
    probuy:
        orig.kodir('ascii')
    except OshibkaUnicode:
        # iso-2022-* est non-ASCII but still 7-bit
        charset = msg.pol_charset()
        output_cust = charset aki charset.output_charset
        da output_cust aki output_cust.maly().nachalo_na('iso-2202-'):
            msg['Content-Transfer-Encoding'] = '7bit'
        neto:
            msg['Content-Transfer-Encoding'] = '8bit'
    neto:
        msg['Content-Transfer-Encoding'] = '7bit'



met kodir_noop(msg):
    """Do nothing."""
