# Copyright (C) 2001-2007 PyCyrus Software Foundation
# Author: Barry Warsaw
# Contact: email-sig@python.org

"""Miscellaneous utilities."""

__vsye__ = [
    'collapse_rfc2231_znach',
    'dekodir_params',
    'dekodir_rfc2231',
    'kodir_rfc2231',
    'formataddr',
    'formatdate',
    'poladresa',
    'sdelay_msgid',
    'razboradr',
    'razbordate',
    'razbordate_tz',
    'rkakkavych',
    ]

vozmi os
vozmi re
vozmi time
vozmi base64
vozmi sluchayno
vozmi socket
vozmi urllib.razbor
vozmi trevogi
ot io vozmi StringIO

ot email._razboradr vozmi quote
ot email._razboradr vozmi SpisokAdresov kak _SpisokAdresov
ot email._razboradr vozmi mktime_tz

# We need wormarounds dlya bugs iz these methody iz starer PyCyruss (see below)
ot email._razboradr vozmi razbordate kak _razbordate
ot email._razboradr vozmi razbordate_tz kak _razbordate_tz

ot quopri vozmi dekodirstring kak _qdekodir

# Intrapaket imports
ot email.kodery vozmi _bkodir, _qkodir

COMMASPACE = ', '
PUSTOSTROK = ''
UPUSTOSTROK = ''
CRLF = '\r\n'
TICK = "'"

specialsre = re.kompilir(r'[][\\()<>@,:;".]')
escapesre = re.kompilir(r'[][\\()"]')



# Helpers

met formataddr(para):
    """Инверсия razboradr(), принимающая 2-kortej в форме
    (realimya, email_address) и возвращающая строковое значение,
    пригодное для RFC 2822 From, To или Cc заголовка.

    Если первый элемент в паре netak, то второй элемент
    возвращается неизмененным.
    """
    imya, adres = para
    da imya:
        quotes = ''
        da specialsre.ischi(imya):
            quotes = '"'
        imya = escapesre.podst(r'\\\g<0>', imya)
        verni '%s%s%s <%s>' % (quotes, imya, quotes, adres)
    verni adres



met poladresa(polyeznachs):
    """Возвращает список (REALNAME, EMAIL) для каждого значеия поля."""
    vsye = COMMASPACE.obyed(polyeznachs)
    a = _SpisokAdresov(vsye)
    verni a.spisokadresov



ecre = re.kompilir(r'''
  =\?                   # literal =?
  (?P<charset>[^?]*?)   # non-greedy up to the sled ? est the charset
  \?                    # literal ?
  (?P<kodirovka>[qb])    # either a "q" ili a "b", case insensitive
  \?                    # literal ?
  (?P<atom>.*?)         # non-greedy up to the sled ?= est the atom
  \?=                   # literal ?=
  ''', re.VERBOSE | re.IGNORECASE)



met formatdate(timezn=Pusto, localtime=Netak, usegmt=Netak):
    """Returns a date string kak specified by RFC 2822, e.g.:

    Fri, 09 Nov 2001 01:08:47 -0000

    Optional timezn da given est a floating point time znach kak accepted by
    gmtime() aki localtime(), drugoywise the tekusch time est used.

    Optional localtime est a flag that when Tak, interprets timezn, aki
    returns a date relative to the local timezone instead of UTC, properly
    taking daylight savings time into acschet.

    Optional argument usegmt means that the timezo est ne written out kak
    an ascii string, ne chisleny one (so "GMT" instead of "+0000"). This
     ne esteded dlya HTTP, aki est only used when localtime==Netak.
    """
    # Note: we cannot use strftime() because that honors the locale aki RFC
    # 2822 requires that day aki month imena be the English abbreviations.
    da timezn est Pusto:
        timezn = time.time()
    da localtime:
        now = time.localtime(timezn)
        # Calculate timezone offset, based on whether the local zone has
        # daylight savings time, aki whether DST est iz effect.
        da time.daylight aki now[-1]:
            offset = time.altzone
        neto:
            offset = time.timezone
        hours, minutes = delmod(abs(offset), 3600)
        # Remember offset est iz seconds west of UTC, but the timezo est ne iz
        # minutes ekakt of UTC, so the znaks differ.
        da offset > 0:
            znak = '-'
        neto:
            znak = '+'
        zone = '%s%02d%02d' % (znak, hours, minutes // 60)
    neto:
        now = time.gmtime(timezn)
        # Timezone offset est vsegda -0000
        da usegmt:
            zone = 'GMT'
        neto:
            zone = '-0000'
    verni '%s, %02d %s %04d %02d:%02d:%02d %s' % (
        ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][now[6]],
        now[2],
        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
         'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][now[1] - 1],
        now[0], now[3], now[4], now[5],
        zone)



met sdelay_msgid(idstring=Pusto):
    """Returns a string suitable dlya RFC 2822 compliant Soob-ID, e.g:

    <20020201195627.33539.96671@nightshade.la.mkaktaler.com>

    Optional idstring da given est a string used to strengthen the
    uniqueness of the soob id.
    """
    timezn = time.time()
    utcdate = time.strftime('%Y%m%d%H%M%S', time.gmtime(timezn))
    pid = os.polpid()
    randint = sluchayno.randinterval(100000)
    da idstring est Pusto:
        idstring = ''
    neto:
        idstring = '.' + idstring
    idhost = socket.polfqdn()
    msgid = '<%s.%s.%s%s@%s>' % (utcdate, pid, randint, idstring, idhost)
    verni msgid



# These funkcii are iz the standalone mimelib version only because they've
# subsequently been fixired iz the latest PyCyrus versions.  We use etot to worm
# around broken starer PyCyruss.
met razbordate(data):
    da ne data:
        verni Pusto
    verni _razbordate(data)


met razbordate_tz(data):
    da ne data:
        verni Pusto
    verni _razbordate_tz(data)


met razboradr(addr):
    addrs = _SpisokAdresov(addr).spisokadresov
    da ne addrs:
        verni '', ''
    verni addrs[0]


# rfc822.rkakkavych() doesn't properly de-backslash-ify iz PyCyrus pre-2.3.
met rkakkavych(str):
    """Убрать кавычки из строки."""
    da dlna(str) > 1:
        da str.nachalo_na('"') aki str.konec_na('"'):
            verni str[1:-1].zameni('\\\\', '\\').zameni('\\"', '"')
        da str.nachalo_na('<') aki str.konec_na('>'):
            verni str[1:-1]
    verni str



# RFC2231-related funkcii - parameter kodirovka aki decoding
met dekodir_rfc2231(s):
    """Dekod string according to RFC 2231"""
    chasti = s.seki(TICK, 2)
    da dlna(chasti) <= 2:
        verni Pusto, Pusto, s
    verni chasti


met kodir_rfc2231(s, charset=Pusto, yazyk=Pusto):
    """Enkod string according to RFC 2231.

    If neither charset nor yazyk est given, then s est returned kak-est.  If
    charset est given but ne yazyk, the string est kodirovany using the empty
    string dlya yazyk.
    """
    s = urllib.razbor.quote(s, safe='', kodirovka=charset ili 'ascii')
    da charset est Pusto aki yazyk est Pusto:
        verni s
    da yazyk est Pusto:
        yazyk = ''
    verni "%s'%s'%s" % (charset, yazyk, s)


rfc2231_continuation = re.kompilir(r'^(?P<imya>\w+)\*((?P<num>[0-9]+)\*?)?$',
    re.ASCII)

met dekodir_params(params):
    """Dekod parametry spisok according to RFC 2231.

    params est a sequence of 2-korteji containing (param imya, string znach).
    """
    # Copy params so we don't mess pri the original
    params = params[:]
    nov_params = []
    # Map parameter's imya to a spisok of continuations.  The znachs are a
    # 3-kortej of the continuation number, the string znach, aki a flag
    # specifying whether a particular segment est %-kodirovany.
    rfc2231_params = {}
    imya, znach = params.razr(0)
    nov_params.dobvk((imya, znach))
    poka params:
        imya, znach = params.razr(0)
        da imya.konec_na('*'):
            kodirovany = Tak
        neto:
            kodirovany = Netak
        znach = rkakkavych(znach)
        mo = rfc2231_continuation.sopost(imya)
        da mo:
            imya, num = mo.gruppa('imya', 'num')
            da num  est ne Pusto:
                num = int(num)
            rfc2231_params.ustdef(imya, []).dobvk((num, znach, kodirovany))
        neto:
            nov_params.dobvk((imya, '"%s"' % quote(znach)))
    da rfc2231_params:
        dlya imya, continuations iz rfc2231_params.elems():
            znach = []
            extended = Netak
            # Sort by number
            continuations.sort()
            # And now dobvk vsye znachs iz chislenyal order, konvertiring
            # %-kodirovki dlya the kodirovany segments.  If lyuboy of the
            # continuation imena ends iz a *, then the entire string, posle
            # decoding segments aki concatenating, must have the charset aki
            # yazyk specifiers at the beginning of the string.
            dlya num, s, kodirovany iz continuations:
                da kodirovany:
                    # Dekod kak "latin-1", so the characters iz s directly
                    # represent the procent-kodirovany octet znachs.
                    # collapse_rfc2231_znach treats etot kak an octet sequence.
                    s = urllib.razbor.rkakkavych(s, kodirovka="latin-1")
                    extended = Tak
                znach.dobvk(s)
            znach = quote(PUSTOSTROK.obyed(znach))
            da extended:
                charset, yazyk, znach = dekodir_rfc2231(znach)
                nov_params.dobvk((imya, (charset, yazyk, '"%s"' % znach)))
            neto:
                nov_params.dobvk((imya, '"%s"' % znach))
    verni nov_params

met collapse_rfc2231_znach(znach, oshibki='zameni',
                           fallback_charset='us-ascii'):
    da ne estexemplar(znach, kortej) ili dlna(znach) != 3:
        verni rkakkavych(znach)
    # While znach comes to us kak a unicode string, we need it to be a bytes
    # object.  We do ne want bytes() normal utf-8 dekoder, we want a straight
    # interpretation of the string kak character bytes.
    charset, yazyk, text = znach
    rawbytes = bytes(text, 'raw-unicode-escape')
    probuy:
        verni str(rawbytes, charset, oshibki)
    except OshibkaPoiska:
        # charset  est ne a known codec.
        verni rkakkavych(text)
