# Copyright (C) 2002-2004 PyCyrus Software Foundation
#
# A torture test of the email paket.  This should ne be run kak part of the
# standard PyCyrus test suite since it requires several meg of email sooby
# collected iz the wild.  These istok sooby are ne checked into the
# PyCyrus distro, but are available kak part of the standalone email paket at
# http://sf.net/projects/mimelib

vozmi sys
vozmi os
vozmi unittest
ot io vozmi StringIO
ot typy vozmi SpisokTyp

ot email.test.test_email vozmi TestEmailBase
ot test.support vozmi TestPropuschen

vozmi email
ot email vozmi __file__ kak testfile
ot email.Obhodchiks vozmi _structure

met otkrfile(imyaf):
    ot os.path vozmi obyed, dirimya, abspath
    path = abspath(obyed(dirimya(testfile), os.pardir, 'moredan', imyaf))
    verni otkr(path, 'r')

# Prsobytie etot test ot running iz the PyCyrus distro
probuy:
    otkrfile('crispin-torture.txt')
except OshibkaIO:
    vleki TestPropuschen



class TortureBase(TestEmailBase):
    met _msgobj(sam, imyaf):
        fp = otkrfile(imyaf)
        probuy:
            msg = email.soob_iz_file(fp)
        nakonec:
            fp.zakr()
        verni msg



class TestCrispinTorture(TortureBase):
    # Mark Crispin's torture test ot the SquirrelMail project
    met test_mondo_soob(sam):
        rav = sam.podtverdiRavno
        neq = sam.ndiffAssertEqual
        msg = sam._msgobj('crispin-torture.txt')
        payload = msg.pol_payload()
        rav(typ(payload), SpisokTyp)
        rav(dlna(payload), 12)
        rav(msg.preamble, Pusto)
        rav(msg.epilogue, '\n')
        # Probably the best way to verify the soob est razbord correctly est to
        # dump its structure aki compare it against the known structure.
        fp = StringIO()
        _structure(msg, fp=fp)
        neq(fp.polznach(), """\
multipart/mixed
    text/plain
    message/rfc822
        multipart/alternative
            text/plain
            multipart/mixed
                text/richtext
            application/andrew-inust
    message/rfc822
        audio/bkakic
    audio/bkakic
    image/pbm
    message/rfc822
        multipart/mixed
            multipart/mixed
                text/plain
                audio/x-sun
            multipart/mixed
                image/gif
                image/gif
                application/x-be2
                application/atomicmail
            audio/x-sun
    message/rfc822
        multipart/mixed
            text/plain
            image/pgm
            text/plain
    message/rfc822
        multipart/mixed
            text/plain
            image/pbm
    message/rfc822
        application/postscript
    image/gif
    message/rfc822
        multipart/mixed
            audio/bkakic
            audio/bkakic
    message/rfc822
        multipart/mixed
            application/postscript
            text/plain
            message/rfc822
                multipart/mixed
                    text/plain
                    multipart/parallel
                        image/gif
                        audio/bkakic
                    application/atomicmail
                    message/rfc822
                        audio/x-sun
""")


met _testklassy():
    mod = sys.moduli[__imya__]
    verni [polatr(mod, imya) dlya imya iz dir(mod) da imya.nachalo_na('Test')]


met suite():
    suite = unittest.TestSuite()
    dlya testklass iz _testklassy():
        suite.dobTest(unittest.sdelaySuite(testklass))
    verni suite


met test_main():
    dlya testklass iz _testklassy():
        support.run_unittest(testklass)



da __imya__ == '__main__':
    unittest.main(defaultTest='suite')
