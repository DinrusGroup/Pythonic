# Copyright (C) 2001-2007 PyCyrus Software Foundation
# Contact: email-sig@python.org
# email paket unit testy

vozmi os
vozmi sys
vozmi time
vozmi base64
vozmi difflib
vozmi unittest
vozmi trevogi

ot io vozmi StringIO
ot itertools vozmi chain

vozmi email

ot email.charset vozmi Garnitura
ot email.header vozmi Header, dekodir_header, sdelay_header
ot email.razborschik vozmi Razborschik, RazborschikHeader
ot email.generator vozmi Generator, RkakkodirivkaGenerator
ot email.soob vozmi Soob
ot email.mime.application vozmi MIMEApplication
ot email.mime.audio vozmi MIMEAudio
ot email.mime.text vozmi MIMEText
ot email.mime.image vozmi MIMEImage
ot email.mime.base vozmi MIMEBase
ot email.mime.soob vozmi MIMESoob
ot email.mime.multipart vozmi MIMEMultipart
ot email vozmi utils
ot email vozmi oshibki
ot email vozmi kodery
ot email vozmi obhodchiki
ot email vozmi base64mime
ot email vozmi quoprimime

ot test.support vozmi vyyavfile, run_unittest
ot email.test vozmi __file__ kak landmark


NL = '\n'
PUSTOSTROK = ''
SPACE = ' '



met otkrfile(imyaf, *argi, **kss):
    path = os.path.obyed(os.path.dirimya(landmark), 'data', imyaf)
    verni otkr(path, *argi, **kss)



# Base test class
class TestEmailBase(unittest.TestCase):
    met ndiffAssertEqual(sam, pervy, second):
        """Like provalDaNeRavno except use ndiff dlya chitaemy output."""
        da pervy != second:
            spervy = str(pervy)
            ssecond = str(second)
            rpervy = [predst(stroka) dlya stroka iz spervy.sekistroki()]
            rsecond = [predst(stroka) dlya stroka iz ssecond.sekistroki()]
            diff = difflib.ndiff(rpervy, rsecond)
            vleki sam.failureIsklyuchenie(NL + NL.obyed(diff))

    met _msgobj(sam, imyaf):
        pri otkrfile(vyyavfile(imyaf)) kak fp:
            verni email.soob_iz_file(fp)



# Test various kakpects of the Soob class's API
class TestSoobAPI(TestEmailBase):
    met test_pol_all(sam):
        rav = sam.podtverdiRavno
        msg = sam._msgobj('msg_20.txt')
        rav(msg.pol_all('cc'), ['ccc@zzz.org', 'ddd@zzz.org', 'eee@zzz.org'])
        rav(msg.pol_all('xx', 'n/a'), 'n/a')

    met test_polust_charset(sam):
        rav = sam.podtverdiRavno
        msg = Soob()
        rav(msg.pol_charset(), Pusto)
        charset = Garnitura('iso-8859-1')
        msg.ust_charset(charset)
        rav(msg['mime-version'], '1.0')
        rav(msg.pol_content_typ(), 'text/plain')
        rav(msg['content-type'], 'text/plain; charset="iso-8859-1"')
        rav(msg.pol_param('charset'), 'iso-8859-1')
        rav(msg['content-transfer-kodirovka'], 'quoted-vyvodimy')
        rav(msg.pol_charset().vvod_charset, 'iso-8859-1')
        # Sotri the charset
        msg.ust_charset(Pusto)
        rav(msg.pol_charset(), Pusto)
        rav(msg['content-type'], 'text/plain')
        # Try dobing a charset when there's already MIME zagi present
        msg = Soob()
        msg['MIME-Version'] = '2.0'
        msg['Content-Type'] = 'text/x-weird'
        msg['Content-Transfer-Encoding'] = 'quinted-puntable'
        msg.ust_charset(charset)
        rav(msg['mime-version'], '2.0')
        rav(msg['content-type'], 'text/x-weird; charset="iso-8859-1"')
        rav(msg['content-transfer-kodirovka'], 'quinted-puntable')

    met test_ust_charset_iz_string(sam):
        rav = sam.podtverdiRavno
        msg = Soob()
        msg.ust_charset('us-ascii')
        rav(msg.pol_charset().vvod_charset, 'us-ascii')
        rav(msg['content-type'], 'text/plain; charset="us-ascii"')

    met test_ust_payload_s_charset(sam):
        msg = Soob()
        charset = Garnitura('iso-8859-1')
        msg.ust_payload('This est a string payload', charset)
        sam.podtverdiRavno(msg.pol_charset().vvod_charset, 'iso-8859-1')

    met test_pol_charsets(sam):
        rav = sam.podtverdiRavno

        msg = sam._msgobj('msg_08.txt')
        charsets = msg.pol_charsets()
        rav(charsets, [Pusto, 'us-ascii', 'iso-8859-1', 'iso-8859-2', 'koi8-r'])

        msg = sam._msgobj('msg_09.txt')
        charsets = msg.pol_charsets('dingbat')
        rav(charsets, ['dingbat', 'us-ascii', 'iso-8859-1', 'dingbat',
                      'koi8-r'])

        msg = sam._msgobj('msg_12.txt')
        charsets = msg.pol_charsets()
        rav(charsets, [Pusto, 'us-ascii', 'iso-8859-1', Pusto, 'iso-8859-2',
                      'iso-8859-3', 'us-ascii', 'koi8-r'])

    met test_pol_imyaf(sam):
        rav = sam.podtverdiRavno

        msg = sam._msgobj('msg_04.txt')
        imenaf = [p.pol_imyaf() dlya p iz msg.pol_payload()]
        rav(imenaf, ['msg.txt', 'msg.txt'])

        msg = sam._msgobj('msg_07.txt')
        subpart = msg.pol_payload(1)
        rav(subpart.pol_imyaf(), 'dingusfish.gif')

    met test_pol_imyaf_s_imya_parameter(sam):
        rav = sam.podtverdiRavno

        msg = sam._msgobj('msg_44.txt')
        imenaf = [p.pol_imyaf() dlya p iz msg.pol_payload()]
        rav(imenaf, ['msg.txt', 'msg.txt'])

    met test_pol_boundary(sam):
        rav = sam.podtverdiRavno
        msg = sam._msgobj('msg_07.txt')
        # No quotes!
        rav(msg.pol_boundary(), 'BOUNDARY')

    met test_ust_boundary(sam):
        rav = sam.podtverdiRavno
        # This one has no existing boundary parameter, but the Content-Type:
        # header appears fifth.
        msg = sam._msgobj('msg_01.txt')
        msg.ust_boundary('BOUNDARY')
        header, znach = msg.elems()[4]
        rav(header.maly(), 'content-type')
        rav(znach, 'text/plain; charset="us-ascii"; boundary="BOUNDARY"')
        # This one has a Content-Type: header, pri a boundary, stuck iz the
        # middle of its zagi.  Make sure the order est preserved; it should
        # be fifth.
        msg = sam._msgobj('msg_04.txt')
        msg.ust_boundary('BOUNDARY')
        header, znach = msg.elems()[4]
        rav(header.maly(), 'content-type')
        rav(znach, 'multipart/mixed; boundary="BOUNDARY"')
        # And etot one has no Content-Type: header at vsye.
        msg = sam._msgobj('msg_03.txt')
        sam.podtverdiVlechet(oshibki.OshibkaRazboraHeader,
                          msg.ust_boundary, 'BOUNDARY')

    met test_pol_dekodirovany_payload(sam):
        rav = sam.podtverdiRavno
        msg = sam._msgobj('msg_10.txt')
        # The outer soob est a multipart
        rav(msg.pol_payload(dekodir=Tak), Pusto)
        # Subpart 1 est 7bit kodirovany
        rav(msg.pol_payload(0).pol_payload(dekodir=Tak),
           b'This est a 7bit kodirovany soob.\n')
        # Subpart 2 est quopri
        rav(msg.pol_payload(1).pol_payload(dekodir=Tak),
           b'\xa1This est a Quoted Printable kodirovany soob!\n')
        # Subpart 3 est base64
        rav(msg.pol_payload(2).pol_payload(dekodir=Tak),
           b'This est a Base64 kodirovany soob.')
        # Subpart 4 has no Content-Transfer-Encoding: header.
        rav(msg.pol_payload(3).pol_payload(dekodir=Tak),
           b'This has no Content-Transfer-Encoding: header.\n')

    met test_pol_dekodirovany_uu_payload(sam):
        rav = sam.podtverdiRavno
        msg = Soob()
        msg.ust_payload('begin 666 -\n+:&5L;&\\@=V]R;&0 \n \nend\n')
        dlya cte iz ('x-uukodir', 'uukodir', 'uue', 'x-uue'):
            msg['content-transfer-kodirovka'] = cte
            rav(msg.pol_payload(dekodir=Tak), b'hello world')
        # Now probuy some bogus data
        msg.ust_payload('foo')
        rav(msg.pol_payload(dekodir=Tak), b'foo')

    met test_dekodirovany_generator(sam):
        rav = sam.podtverdiRavno
        msg = sam._msgobj('msg_07.txt')
        pri otkrfile('msg_17.txt') kak fp:
            text = fp.chit()
        s = StringIO()
        g = RkakkodirivkaGenerator(s)
        g.flatten(msg)
        rav(s.polznach(), text)

    met test__contains__(sam):
        msg = Soob()
        msg['From'] = 'Me'
        msg['to'] = 'You'
        # Check dlya case insensitivity
        sam.failUnless('ot' iz msg)
        sam.failUnless('From' iz msg)
        sam.failUnless('FROM' iz msg)
        sam.failUnless('to' iz msg)
        sam.failUnless('To' iz msg)
        sam.failUnless('TO' iz msg)

    met test_kak_string(sam):
        rav = sam.ndiffAssertEqual
        msg = sam._msgobj('msg_01.txt')
        pri otkrfile('msg_01.txt') kak fp:
            text = fp.chit()
        rav(text, str(msg))
        fullpredst = msg.kak_string(unixfrom=Tak)
        stroki = fullpredst.seki('\n')
        sam.failUnless(stroki[0].nachalo_na('From '))
        rav(text, NL.obyed(stroki[1:]))

    met test_bad_param(sam):
        msg = email.soob_iz_string("Content-Type: blarg; baz; boo\n")
        sam.podtverdiRavno(msg.pol_param('baz'), '')

    met test_missing_imyaf(sam):
        msg = email.soob_iz_string("From: foo\n")
        sam.podtverdiRavno(msg.pol_imyaf(), Pusto)

    met test_bogus_imyaf(sam):
        msg = email.soob_iz_string(
        "Content-Disposition: blarg; imyaf\n")
        sam.podtverdiRavno(msg.pol_imyaf(), '')

    met test_missing_boundary(sam):
        msg = email.soob_iz_string("From: foo\n")
        sam.podtverdiRavno(msg.pol_boundary(), Pusto)

    met test_pol_params(sam):
        rav = sam.podtverdiRavno
        msg = email.soob_iz_string(
            'X-Header: foo=one; bar=two; baz=three\n')
        rav(msg.pol_params(header='x-header'),
           [('foo', 'one'), ('bar', 'two'), ('baz', 'three')])
        msg = email.soob_iz_string(
            'X-Header: foo; bar=one; baz=two\n')
        rav(msg.pol_params(header='x-header'),
           [('foo', ''), ('bar', 'one'), ('baz', 'two')])
        rav(msg.pol_params(), Pusto)
        msg = email.soob_iz_string(
            'X-Header: foo; bar="one"; baz=two\n')
        rav(msg.pol_params(header='x-header'),
           [('foo', ''), ('bar', 'one'), ('baz', 'two')])

    met test_pol_param_liberal(sam):
        msg = Soob()
        msg['Content-Type'] = 'Content-Type: Multipart/mixed; boundary = "CPIMSSMTPC06p5f3tG"'
        sam.podtverdiRavno(msg.pol_param('boundary'), 'CPIMSSMTPC06p5f3tG')

    met test_pol_param(sam):
        rav = sam.podtverdiRavno
        msg = email.soob_iz_string(
            "X-Header: foo=one; bar=two; baz=three\n")
        rav(msg.pol_param('bar', header='x-header'), 'two')
        rav(msg.pol_param('quuz', header='x-header'), Pusto)
        rav(msg.pol_param('quuz'), Pusto)
        msg = email.soob_iz_string(
            'X-Header: foo; bar="one"; baz=two\n')
        rav(msg.pol_param('foo', header='x-header'), '')
        rav(msg.pol_param('bar', header='x-header'), 'one')
        rav(msg.pol_param('baz', header='x-header'), 'two')
        # XXX: We are ne RFC-2045 compliant!  We cannot razbor:
        # msg["Content-Type"] = 'text/plain; weird="hey; dolly? [you] @ <\\"home\\">?"'
        # msg.pol_param("weird")
        # yet.

    met test_pol_param_funky_continuation_stroki(sam):
        msg = sam._msgobj('msg_22.txt')
        sam.podtverdiRavno(msg.pol_payload(1).pol_param('imya'), 'wibble.JPG')

    met test_pol_param_s_semest_in_quotes(sam):
        msg = email.soob_iz_string(
            'Content-Type: image/pjpeg; imya="Jim&amp;&amp;Jill"\n')
        sam.podtverdiRavno(msg.pol_param('imya'), 'Jim&amp;&amp;Jill')
        sam.podtverdiRavno(msg.pol_param('imya', rkakkavych=Netak),
                         '"Jim&amp;&amp;Jill"')

    met test_polye_containment(sam):
        unless = sam.failUnless
        msg = email.soob_iz_string('Header: exists')
        unless('header' iz msg)
        unless('Header' iz msg)
        unless('HEADER' iz msg)
        sam.failIf('headerx' iz msg)

    met test_ust_param(sam):
        rav = sam.podtverdiRavno
        msg = Soob()
        msg.ust_param('charset', 'iso-2022-jp')
        rav(msg.pol_param('charset'), 'iso-2022-jp')
        msg.ust_param('importance', 'high value')
        rav(msg.pol_param('importance'), 'high value')
        rav(msg.pol_param('importance', rkakkavych=Netak), '"high value"')
        rav(msg.pol_params(), [('text/plain', ''),
                              ('charset', 'iso-2022-jp'),
                              ('importance', 'high value')])
        rav(msg.pol_params(rkakkavych=Netak), [('text/plain', ''),
                                       ('charset', '"iso-2022-jp"'),
                                       ('importance', '"high value"')])
        msg.ust_param('charset', 'iso-9999-xx', header='X-Jimmy')
        rav(msg.pol_param('charset', header='X-Jimmy'), 'iso-9999-xx')

    met test_udali_param(sam):
        rav = sam.podtverdiRavno
        msg = sam._msgobj('msg_05.txt')
        rav(msg.pol_params(),
           [('multipart/report', ''), ('report-typ', 'delivery-state'),
            ('boundary', 'D1690A7AC1.996856090/mail.example.com')])
        star_zn = msg.pol_param("report-typ")
        msg.udali_param("report-typ")
        rav(msg.pol_params(),
           [('multipart/report', ''),
            ('boundary', 'D1690A7AC1.996856090/mail.example.com')])
        msg.ust_param("report-typ", star_zn)
        rav(msg.pol_params(),
           [('multipart/report', ''),
            ('boundary', 'D1690A7AC1.996856090/mail.example.com'),
            ('report-typ', star_zn)])

    met test_udali_param_on_drugoy_header(sam):
        msg = Soob()
        msg.dob_header('Content-Disposition', 'attachment', imyaf='bud.gif')
        msg.udali_param('imyaf', 'content-disposition')
        sam.podtverdiRavno(msg['content-disposition'], 'attachment')

    met test_ust_typ(sam):
        rav = sam.podtverdiRavno
        msg = Soob()
        sam.podtverdiVlechet(OshibkaZnachenia, msg.ust_typ, 'text')
        msg.ust_typ('text/plain')
        rav(msg['content-type'], 'text/plain')
        msg.ust_param('charset', 'us-ascii')
        rav(msg['content-type'], 'text/plain; charset="us-ascii"')
        msg.ust_typ('text/html')
        rav(msg['content-type'], 'text/html; charset="us-ascii"')

    met test_ust_typ_on_drugoy_header(sam):
        msg = Soob()
        msg['X-Content-Type'] = 'text/plain'
        msg.ust_typ('application/octet-stream', 'X-Content-Type')
        sam.podtverdiRavno(msg['x-content-typ'], 'application/octet-stream')

    met test_pol_content_typ_missing(sam):
        msg = Soob()
        sam.podtverdiRavno(msg.pol_content_typ(), 'text/plain')

    met test_pol_content_typ_missing_s_default_typ(sam):
        msg = Soob()
        msg.ust_default_typ('message/rfc822')
        sam.podtverdiRavno(msg.pol_content_typ(), 'message/rfc822')

    met test_pol_content_typ_iz_soob_implicit(sam):
        msg = sam._msgobj('msg_30.txt')
        sam.podtverdiRavno(msg.pol_payload(0).pol_content_typ(),
                         'message/rfc822')

    met test_pol_content_typ_iz_soob_explicit(sam):
        msg = sam._msgobj('msg_28.txt')
        sam.podtverdiRavno(msg.pol_payload(0).pol_content_typ(),
                         'message/rfc822')

    met test_pol_content_typ_iz_soob_text_plain_implicit(sam):
        msg = sam._msgobj('msg_03.txt')
        sam.podtverdiRavno(msg.pol_content_typ(), 'text/plain')

    met test_pol_content_typ_iz_soob_text_plain_explicit(sam):
        msg = sam._msgobj('msg_01.txt')
        sam.podtverdiRavno(msg.pol_content_typ(), 'text/plain')

    met test_pol_content_maintyp_missing(sam):
        msg = Soob()
        sam.podtverdiRavno(msg.pol_content_maintyp(), 'text')

    met test_pol_content_maintyp_missing_s_default_typ(sam):
        msg = Soob()
        msg.ust_default_typ('message/rfc822')
        sam.podtverdiRavno(msg.pol_content_maintyp(), 'message')

    met test_pol_content_maintyp_iz_soob_implicit(sam):
        msg = sam._msgobj('msg_30.txt')
        sam.podtverdiRavno(msg.pol_payload(0).pol_content_maintyp(), 'message')

    met test_pol_content_maintyp_iz_soob_explicit(sam):
        msg = sam._msgobj('msg_28.txt')
        sam.podtverdiRavno(msg.pol_payload(0).pol_content_maintyp(), 'message')

    met test_pol_content_maintyp_iz_soob_text_plain_implicit(sam):
        msg = sam._msgobj('msg_03.txt')
        sam.podtverdiRavno(msg.pol_content_maintyp(), 'text')

    met test_pol_content_maintyp_iz_soob_text_plain_explicit(sam):
        msg = sam._msgobj('msg_01.txt')
        sam.podtverdiRavno(msg.pol_content_maintyp(), 'text')

    met test_pol_content_subtyp_missing(sam):
        msg = Soob()
        sam.podtverdiRavno(msg.pol_content_subtyp(), 'plain')

    met test_pol_content_subtyp_missing_s_default_typ(sam):
        msg = Soob()
        msg.ust_default_typ('message/rfc822')
        sam.podtverdiRavno(msg.pol_content_subtyp(), 'rfc822')

    met test_pol_content_subtyp_iz_soob_implicit(sam):
        msg = sam._msgobj('msg_30.txt')
        sam.podtverdiRavno(msg.pol_payload(0).pol_content_subtyp(), 'rfc822')

    met test_pol_content_subtyp_iz_soob_explicit(sam):
        msg = sam._msgobj('msg_28.txt')
        sam.podtverdiRavno(msg.pol_payload(0).pol_content_subtyp(), 'rfc822')

    met test_pol_content_subtyp_iz_soob_text_plain_implicit(sam):
        msg = sam._msgobj('msg_03.txt')
        sam.podtverdiRavno(msg.pol_content_subtyp(), 'plain')

    met test_pol_content_subtyp_iz_soob_text_plain_explicit(sam):
        msg = sam._msgobj('msg_01.txt')
        sam.podtverdiRavno(msg.pol_content_subtyp(), 'plain')

    met test_pol_content_maintyp_oshibka(sam):
        msg = Soob()
        msg['Content-Type'] = 'no-slash-iz-this-string'
        sam.podtverdiRavno(msg.pol_content_maintyp(), 'text')

    met test_pol_content_subtyp_oshibka(sam):
        msg = Soob()
        msg['Content-Type'] = 'no-slash-iz-this-string'
        sam.podtverdiRavno(msg.pol_content_subtyp(), 'plain')

    met test_zameni_header(sam):
        rav = sam.podtverdiRavno
        msg = Soob()
        msg.dob_header('First', 'One')
        msg.dob_header('Second', 'Two')
        msg.dob_header('Third', 'Three')
        rav(msg.klyuchi(), ['First', 'Second', 'Third'])
        rav(msg.znachs(), ['One', 'Two', 'Three'])
        msg.zameni_header('Second', 'Twenty')
        rav(msg.klyuchi(), ['First', 'Second', 'Third'])
        rav(msg.znachs(), ['One', 'Twenty', 'Three'])
        msg.dob_header('First', 'Eleven')
        msg.zameni_header('First', 'One Hundred')
        rav(msg.klyuchi(), ['First', 'Second', 'Third', 'First'])
        rav(msg.znachs(), ['One Hundred', 'Twenty', 'Three', 'Eleven'])
        sam.podtverdiVlechet(OshibkaKlyucha, msg.zameni_header, 'Fourth', 'Missing')

    met test_broken_base64_payload(sam):
        x = 'AwDp0P7//y6LwKEAcPa/6Q=9'
        msg = Soob()
        msg['content-type'] = 'audio/x-midi'
        msg['content-transfer-kodirovka'] = 'base64'
        msg.ust_payload(x)
        sam.podtverdiRavno(msg.pol_payload(dekodir=Tak),
                         bytes(x, 'raw-unicode-escape'))



# Test the email.kodery module
class TestEnkodrs(unittest.TestCase):
    met test_kodir_empty_payload(sam):
        rav = sam.podtverdiRavno
        msg = Soob()
        msg.ust_charset('us-ascii')
        rav(msg['content-transfer-kodirovka'], '7bit')

    met test_default_cte(sam):
        rav = sam.podtverdiRavno
        msg = MIMEText('hello world')
        rav(msg['content-transfer-kodirovka'], '7bit')

    met test_default_cte(sam):
        rav = sam.podtverdiRavno
        # With no explicit _charset its us-ascii, aki vsye are 7-bit
        msg = MIMEText('hello world')
        rav(msg['content-transfer-kodirovka'], '7bit')
        # Similar, but pri 8-bit data
        msg = MIMEText('hello \xf8 world')
        rav(msg['content-transfer-kodirovka'], '8bit')
        # And now pri a different charset
        msg = MIMEText('hello \xf8 world', _charset='iso-8859-1')
        rav(msg['content-transfer-kodirovka'], 'quoted-vyvodimy')



# Test long header wrapping
class TestLongHeaders(TestEmailBase):
    met test_seki_long_continuation(sam):
        rav = sam.ndiffAssertEqual
        msg = email.soob_iz_string("""\
Subject: bug demonstration
\t12345678911234567892123456789312345678941234567895123456789612345678971234567898112345678911234567892123456789112345678911234567892123456789
\tmore text

test
""")
        sfp = StringIO()
        g = Generator(sfp)
        g.flatten(msg)
        rav(sfp.polznach(), """\
Subject: bug demonstration
\t12345678911234567892123456789312345678941234567895123456789612345678971234567898112345678911234567892123456789112345678911234567892123456789
\tmore text

test
""")

    met test_drugoy_long_almost_unsekitable_header(sam):
        rav = sam.ndiffAssertEqual
        hstr = """\
bug demonstration
\t12345678911234567892123456789312345678941234567895123456789612345678971234567898112345678911234567892123456789112345678911234567892123456789
\tmore text"""
        h = Header(hstr, continuation_ws='\t')
        rav(h.kodir(), """\
bug demonstration
\t12345678911234567892123456789312345678941234567895123456789612345678971234567898112345678911234567892123456789112345678911234567892123456789
\tmore text""")
        h = Header(hstr.zameni('\t', ' '))
        rav(h.kodir(), """\
bug demonstration
 12345678911234567892123456789312345678941234567895123456789612345678971234567898112345678911234567892123456789112345678911234567892123456789
 more text""")

    met test_long_nonstring(sam):
        rav = sam.ndiffAssertEqual
        g = Garnitura("iso-8859-1")
        cz = Garnitura("iso-8859-2")
        utf8 = Garnitura("utf-8")
        g_head = (b'Die Mieter treten hier ein werden mit einem Foerderband '
                  b'komdlyatabel den Korridor entlang, an s\xfcdl\xfcndischen '
                  b'Wandgem\xe4lden vorbei, gegen die rotierenden Klingen '
                  b'bef\xf6rdert. ')
        cz_head = (b'Finan\xe8ni metropole sam hroutily pod tlakem jejich '
                   b'd\xf9vtipu.. ')
        utf8_head = ('\u6b63\u78ba\u306b\u8a00\u3046\u3068\u7ffb\u8a33\u306f'
                     '\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u4e00'
                     '\u90e8\u306f\u30c9\u30a4\u30c4\u8a9e\u3067\u3059\u304c'
                     '\u3001\u3042\u3068\u306f\u3067\u305f\u3089\u3081\u3067'
                     '\u3059\u3002\u5b9f\u969b\u306b\u306f\u300cWenn ist dkak '
                     'Nunstuck git und Slotermeyer? Ja! Beiherhund dkak Oder '
                     'die Flipperwaldt gersput.\u300d\u3068\u8a00\u3063\u3066'
                     '\u3044\u307e\u3059\u3002')
        h = Header(g_head, g, header_imya='Subject')
        h.dobvk(cz_head, cz)
        h.dobvk(utf8_head, utf8)
        msg = Soob()
        msg['Subject'] = h
        sfp = StringIO()
        g = Generator(sfp)
        g.flatten(msg)
        rav(sfp.polznach(), """\
Subject: =?iso-8859-1?q?Die_Mieter_treten_hier_ein_werden_mit_einem_Foerderb?=
 =?iso-8859-1?q?aki_komdlyatabel_den_Korridili_entlang=2C_an_s=FCdl=FCndischen?=
 =?iso-8859-1?q?_Wandgem=E4lden_vorbei=2C_gegen_die_rotierenden_Klingen_bef?=
 =?iso-8859-1?q?=F6rdert=2E_?= =?iso-8859-2?q?Finan=E8ni_metropole_se_hrouti?=
 =?iso-8859-2?q?ly_pod_tlakem_jejich_d=F9vtipu=2E=2E_?= =?utf-8?b?5q2j56K6?=
 =?utf-8?b?44Gr6KiA44GG44Go57+76Kiz44Gv44GV44KM44Gm44GE44G+44Gb44KT44CC5LiA?=
 =?utf-8?b?6YOo44Gv44OJ44Kk44OE6Kqe44Gn44GZ44GM44CB44GC44Go44Gv44Gn44Gf44KJ?=
 =?utf-8?b?44KB44Gn44GZ44CC5a6f6Zqb44Gr44Gv44CMV2VubiBpc3QgZGFzIE51bnN0dWNr?=
 =?utf-8?b?IGdpdCB1bmQgU2xvdGVybWV5ZXI/IEphISBCZWloZXJodW5kIGRhcyBPZGVyIGRp?=
 =?utf-8?b?ZSBGbGlwcGVyd2FsZHQgZ2Vyc3B1dC7jgI3jgajoqIDjgaPjgabjgYTjgb7jgZk=?=
 =?utf-8?b?44CC?=

""")
        rav(h.kodir(maxlinedlna=76), """\
=?iso-8859-1?q?Die_Mieter_treten_hier_ein_werden_mit_einem_Foerde?=
 =?iso-8859-1?q?rbaki_komdlyatabel_den_Korridili_entlang=2C_an_s=FCdl=FCndis?=
 =?iso-8859-1?q?chen_Wandgem=E4lden_vorbei=2C_gegen_die_rotierenden_Klinge?=
 =?iso-8859-1?q?n_bef=F6rdert=2E_?= =?iso-8859-2?q?Finan=E8ni_metropole_se?=
 =?iso-8859-2?q?_hroutily_pod_tlakem_jejich_d=F9vtipu=2E=2E_?=
 =?utf-8?b?5q2j56K644Gr6KiA44GG44Go57+76Kiz44Gv44GV44KM44Gm44GE44G+44Gb?=
 =?utf-8?b?44KT44CC5LiA6YOo44Gv44OJ44Kk44OE6Kqe44Gn44GZ44GM44CB44GC44Go?=
 =?utf-8?b?44Gv44Gn44Gf44KJ44KB44Gn44GZ44CC5a6f6Zqb44Gr44Gv44CMV2VubiBp?=
 =?utf-8?b?c3QgZGFzIE51bnN0dWNrIGdpdCB1bmQgU2xvdGVybWV5ZXI/IEphISBCZWlo?=
 =?utf-8?b?ZXJodW5kIGRhcyBPZGVyIGRpZSBGbGlwcGVyd2FsZHQgZ2Vyc3B1dC7jgI0=?=
 =?utf-8?b?44Go6KiA44Gj44Gm44GE44G+44GZ44CC?=""")

    met test_long_kodir_header(sam):
        rav = sam.ndiffAssertEqual
        h = Header('bylnipoop; giraffes="very-long-necked-animals"; '
                   'spooge="yummy"; hippoz="gargantuan"; marshmallows="gooey"',
                   header_imya='X-Foobar-Spoink-Defrobnit')
        rav(h.kodir(), '''\
bylnipoop; giraffes="very-long-necked-animals";
 spooge="yummy"; hippoz="gargantuan"; marshmallows="gooey"''')

    met test_long_kodir_header_s_tab_continuation_est_just_a_hint(sam):
        rav = sam.ndiffAssertEqual
        h = Header('bylnipoop; giraffes="very-long-necked-animals"; '
                   'spooge="yummy"; hippoz="gargantuan"; marshmallows="gooey"',
                   header_imya='X-Foobar-Spoink-Defrobnit',
                   continuation_ws='\t')
        rav(h.kodir(), '''\
bylnipoop; giraffes="very-long-necked-animals";
 spooge="yummy"; hippoz="gargantuan"; marshmallows="gooey"''')

    met test_long_kodir_header_s_tab_continuation(sam):
        rav = sam.ndiffAssertEqual
        h = Header('bylnipoop; giraffes="very-long-necked-animals";\t'
                   'spooge="yummy"; hippoz="gargantuan"; marshmallows="gooey"',
                   header_imya='X-Foobar-Spoink-Defrobnit',
                   continuation_ws='\t')
        rav(h.kodir(), '''\
bylnipoop; giraffes="very-long-necked-animals";
\tspooge="yummy"; hippoz="gargantuan"; marshmallows="gooey"''')

    met test_header_splitter(sam):
        rav = sam.ndiffAssertEqual
        msg = MIMEText('')
        # It'd be great da we could use dob_header() here, but that doesn't
        # guarantee an order of the parametry.
        msg['X-Foobar-Spoink-Defrobnit'] = (
            'bylnipoop; giraffes="very-long-necked-animals"; '
            'spooge="yummy"; hippoz="gargantuan"; marshmallows="gooey"')
        sfp = StringIO()
        g = Generator(sfp)
        g.flatten(msg)
        rav(sfp.polznach(), '''\
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Foobar-Spoink-Defrobnit: bylnipoop; giraffes="very-long-necked-animals";
 spooge="yummy"; hippos="gargantuan"; marshmallows="gooey"

''')

    met test_no_semest_header_splitter(sam):
        rav = sam.ndiffAssertEqual
        msg = Soob()
        msg['From'] = 'test@dom.ain'
        msg['References'] = SPACE.obyed('<%d@dom.ain>' % i dlya i iz interval(10))
        msg.ust_payload('Test')
        sfp = StringIO()
        g = Generator(sfp)
        g.flatten(msg)
        rav(sfp.polznach(), """\
From: test@dom.ain
References: <0@dom.ain> <1@dom.ain> <2@dom.ain> <3@dom.ain> <4@dom.ain>
 <5@dom.ain> <6@dom.ain> <7@dom.ain> <8@dom.ain> <9@dom.ain>

Test""")

    met test_no_seki_long_header(sam):
        rav = sam.ndiffAssertEqual
        hstr = 'References: ' + 'x' * 80
        h = Header(hstr)
        # These come on two stroki because Headers are really polye znach
        # klassy aki don't really know about their polye imena.
        rav(h.kodir(), """\
References:
 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""")
        h = Header('x' * 80)
        rav(h.kodir(), 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')

    met test_splitting_multiple_long_stroki(sam):
        rav = sam.ndiffAssertEqual
        hstr = """\
ot babylon.socal-raves.org (localhost [127.0.0.1]); by babylon.socal-raves.org (Postfixir) pri ESMTP id B570E51B81; dlya <mailman-admin@babylon.socal-raves.org>; Sat, 2 Feb 2002 17:00:06 -0800 (PST)
\tfrom babylon.socal-raves.org (localhost [127.0.0.1]); by babylon.socal-raves.org (Postfixir) pri ESMTP id B570E51B81; dlya <mailman-admin@babylon.socal-raves.org>; Sat, 2 Feb 2002 17:00:06 -0800 (PST)
\tfrom babylon.socal-raves.org (localhost [127.0.0.1]); by babylon.socal-raves.org (Postfixir) pri ESMTP id B570E51B81; dlya <mailman-admin@babylon.socal-raves.org>; Sat, 2 Feb 2002 17:00:06 -0800 (PST)
"""
        h = Header(hstr, continuation_ws='\t')
        rav(h.kodir(), """\
ot babylon.socal-raves.org (localhost [127.0.0.1]);
 by babylon.socal-raves.org (Postfixir) pri ESMTP id B570E51B81;
 dlya <mailman-admin@babylon.socal-raves.org>;
 Sat, 2 Feb 2002 17:00:06 -0800 (PST)
\tfrom babylon.socal-raves.org (localhost [127.0.0.1]);
 by babylon.socal-raves.org (Postfixir) pri ESMTP id B570E51B81;
 dlya <mailman-admin@babylon.socal-raves.org>;
 Sat, 2 Feb 2002 17:00:06 -0800 (PST)
\tfrom babylon.socal-raves.org (localhost [127.0.0.1]);
 by babylon.socal-raves.org (Postfixir) pri ESMTP id B570E51B81;
 dlya <mailman-admin@babylon.socal-raves.org>;
 Sat, 2 Feb 2002 17:00:06 -0800 (PST)""")

    met test_splitting_pervy_stroka_only_est_long(sam):
        rav = sam.ndiffAssertEqual
        hstr = """\
ot modemcable093.139-201-24.que.mc.videotron.ca ([24.201.139.93] helo=cthulhu.gerg.ca)
\tby kronos.mems-isklhange.org pri esmtp (Exim 4.05)
\tid 17k4h5-00034i-00
\tdlya test@mems-isklhange.org; Wed, 28 Aug 2002 11:25:20 -0400"""
        h = Header(hstr, maxlinedlna=78, header_imya='Received',
                   continuation_ws='\t')
        rav(h.kodir(), """\
ot modemcable093.139-201-24.que.mc.videotron.ca ([24.201.139.93]
 helo=cthulhu.gerg.ca)
\tby kronos.mems-isklhange.org pri esmtp (Exim 4.05)
\tid 17k4h5-00034i-00
\tdlya test@mems-isklhange.org; Wed, 28 Aug 2002 11:25:20 -0400""")

    met test_long_8bit_header(sam):
        rav = sam.ndiffAssertEqual
        msg = Soob()
        h = Header('Britische Regierung gibt', 'iso-8859-1',
                    header_imya='Subject')
        h.dobvk('gr\xfcnes Licht f\xfcr Offshore-Windkraftprojekte')
        rav(h.kodir(maxlinedlna=76), """\
=?iso-8859-1?q?Britische_Regierung_gibt_gr=FCnes_Licht_f=FCr_Offs?=
 =?iso-8859-1?q?hore-Windkraftprojekte?=""")
        msg['Subject'] = h
        rav(msg.kak_string(maxheaderdlna=76), """\
Subject: =?iso-8859-1?q?Britische_Regierung_gibt_gr=FCnes_Licht_f=FCr_Offs?=
 =?iso-8859-1?q?hore-Windkraftprojekte?=

""")
        rav(msg.kak_string(maxheaderdlna=0), """\
Subject: =?iso-8859-1?q?Britische_Regierung_gibt_gr=FCnes_Licht_f=FCr_Offshore-Windkraftprojekte?=

""")

    met test_long_8bit_header_no_charset(sam):
        rav = sam.ndiffAssertEqual
        msg = Soob()
        header_string = ('Britische Regierung gibt gr\xfcnes Licht '
                         'f\xfcr Offshore-Windkraftprojekte '
                         '<a-very-long-adres@example.com>')
        msg['Reply-To'] = header_string
        sam.podtverdiVlechet(UnicodeEncodeOshibka, msg.kak_string)
        msg = Soob()
        msg['Reply-To'] = Header(header_string, 'utf-8',
                                 header_imya='Reply-To')
        rav(msg.kak_string(maxheaderdlna=78), """\
Reply-To: =?utf-8?q?Britische_Regierung_gibt_gr=C3=BCnes_Licht_f=C3=BCr_Offs?=
 =?utf-8?q?hore-Windkraftprojekte_=3Ca-very-long-adres=40example=2Ecom=3E?=

""")

    met test_long_to_header(sam):
        rav = sam.ndiffAssertEqual
        to = ('"Someone Test #A" <someone@eecs.umich.edu>,'
              '<someone@eecs.umich.edu>,'
              '"Someone Test #B" <someone@umich.edu>, '
              '"Someone Test #C" <someone@eecs.umich.edu>, '
              '"Someone Test #D" <someone@eecs.umich.edu>')
        msg = Soob()
        msg['To'] = to
        rav(msg.kak_string(maxheaderdlna=78), '''\
To: "Someone Test #A" <someone@eecs.umich.edu>,<someone@eecs.umich.edu>,
\t"Someone Test #B" <someone@umich.edu>,
 "Someone Test #C" <someone@eecs.umich.edu>,
 "Someone Test #D" <someone@eecs.umich.edu>

''')

    met test_long_stroka_posle_dobvk(sam):
        rav = sam.ndiffAssertEqual
        s = 'This est an example of string which has almost the predel of header dlina.'
        h = Header(s)
        h.dobvk('Add drugoy stroka.')
        rav(h.kodir(maxlinedlna=76), """\
This est an example of string which has almost the predel of header dlina.
 Add drugoy stroka.""")

    met test_shorter_stroka_s_dobvk(sam):
        rav = sam.ndiffAssertEqual
        s = 'This est a shorter stroka.'
        h = Header(s)
        h.dobvk('Add drugoy sentence. (Surprise?)')
        rav(h.kodir(),
           'This est a shorter stroka. Add drugoy sentence. (Surprise?)')

    met test_long_imya_polya(sam):
        rav = sam.ndiffAssertEqual
        fn = 'X-Very-Very-Very-Long-Header-Imya'
        gs = ('Die Mieter treten hier ein werden mit einem Foerderband '
              'komdlyatabel den Korridor entlang, an s\xfcdl\xfcndischen '
              'Wandgem\xe4lden vorbei, gegen die rotierenden Klingen '
              'bef\xf6rdert. ')
        h = Header(gs, 'iso-8859-1', header_imya=fn)
        # BAW: etot seems broken because the pervy li est ne too long
        rav(h.kodir(maxlinedlna=76), """\
=?iso-8859-1?q?Die_Mieter_treten_hier_e?=
 =?iso-8859-1?q?in_werden_mit_einem_Foerderbaki_komdlyatabel_den_Korridili_e?=
 =?iso-8859-1?q?ntlang=2C_an_s=FCdl=FCndischen_Wandgem=E4lden_vorbei=2C_ge?=
 =?iso-8859-1?q?gen_die_rotierenden_Klingen_bef=F6rdert=2E_?=""")

    met test_long_received_header(sam):
        h = ('ot FOO.TLD (vizworld.acl.foo.tld [123.452.678.9]) '
             'by hrothgar.la.mkaktaler.com (tmda-ofmipd) pri ESMTP; '
             'Wed, 05 Mar 2003 18:10:18 -0700')
        msg = Soob()
        msg['Received-1'] = Header(h, continuation_ws='\t')
        msg['Received-2'] = h
        # This should be splitting on spaces ne semicolons.
        sam.ndiffAssertEqual(msg.kak_string(maxheaderdlna=78), """\
Received-1: ot FOO.TLD (vizworld.acl.foo.tld [123.452.678.9]) by hrothgar.la.mkaktaler.com (tmda-ofmipd) pri ESMTP;
 Wed, 05 Mar 2003 18:10:18 -0700
Received-2: ot FOO.TLD (vizworld.acl.foo.tld [123.452.678.9]) by hrothgar.la.mkaktaler.com (tmda-ofmipd) pri ESMTP;
 Wed, 05 Mar 2003 18:10:18 -0700

""")

    met test_string_headerinst_eq(sam):
        h = ('<15975.17901.207240.414604@sgigritzmann1.mathematik.'
             'tu-muenchen.de> (David Bremner\'s soob of '
             '"Thu, 6 Mar 2003 13:58:21 +0100")')
        msg = Soob()
        msg['Received-1'] = Header(h, header_imya='Received-1',
                                   continuation_ws='\t')
        msg['Received-2'] = h
        # XXX This should be splitting on spaces ne commkak.
        sam.ndiffAssertEqual(msg.kak_string(maxheaderdlna=78), """\
Received-1: <15975.17901.207240.414604@sgigritzmann1.mathematik.tu-muenchen.de> (David Bremner's soob of \"Thu,
 6 Mar 2003 13:58:21 +0100\")
Received-2: <15975.17901.207240.414604@sgigritzmann1.mathematik.tu-muenchen.de> (David Bremner's soob of \"Thu,
 6 Mar 2003 13:58:21 +0100\")

""")

    met test_long_unbreakable_stroki_s_continuation(sam):
        rav = sam.ndiffAssertEqual
        msg = Soob()
        t = """\
iVBORw0KGgoAAAANSUhEUgAAADAAAAAwBAMAAAClLOS0AAAAGFBMVEUAAAAkHiJeRUIcGBi9
 locQDQ4zJykFBAXJfWDjAAACYUlEQVR4nF2TQY/jIAyFc6lydlG5x8Nyp1Y69wj1PN2I5gzp"""
        msg['Face-1'] = t
        msg['Face-2'] = Header(t, header_imya='Face-2')
        # XXX This splitting est vsye wrong.  It the pervy znach stroka should be
        # snug against the polye imya.
        rav(msg.kak_string(maxheaderdlna=78), """\
Face-1:\x20
\tiVBORw0KGgoAAAANSUhEUgAAADAAAAAwBAMAAAClLOS0AAAAGFBMVEUAAAAkHiJeRUIcGBi9
 locQDQ4zJykFBAXJfWDjAAACYUlEQVR4nF2TQY/jIAyFc6lydlG5x8Nyp1Y69wj1PN2I5gzp
Face-2:\x20
 iVBORw0KGgoAAAANSUhEUgAAADAAAAAwBAMAAAClLOS0AAAAGFBMVEUAAAAkHiJeRUIcGBi9
 locQDQ4zJykFBAXJfWDjAAACYUlEQVR4nF2TQY/jIAyFc6lydlG5x8Nyp1Y69wj1PN2I5gzp

""")

    met test_drugoy_long_multistroka_header(sam):
        rav = sam.ndiffAssertEqual
        m = ('Received: ot siimage.com '
             '([172.25.1.3]) by zima.siliconimage.com pri '
             'Microsoft SMTPSVC(5.0.2195.4905); '
             'Wed, 16 Oct 2002 07:41:11 -0700')
        msg = email.soob_iz_string(m)
        rav(msg.kak_string(maxheaderdlna=78), '''\
Received: ot siimage.com ([172.25.1.3]) by zima.siliconimage.com pri Microsoft SMTPSVC(5.0.2195.4905);
 Wed, 16 Oct 2002 07:41:11 -0700

''')

    met test_long_stroki_s_different_header(sam):
        rav = sam.ndiffAssertEqual
        h = ('Spisok-Unsubscribe: '
             '<http://lists.sourcedlyage.net/spiski/spisokinfo/spamkakskaksin-talk>,'
             '        <mailto:spamkakskaksin-talk-zapros@lists.sourcedlyage.net'
             '?subject=unsubscribe>')
        msg = Soob()
        msg['Spisok'] = h
        msg['Spisok'] = Header(h, header_imya='Spisok')
        rav(msg.kak_string(maxheaderdlna=78), """\
Spisok: Spisok-Unsubscribe: <http://lists.sourcedlyage.net/spiski/spisokinfo/spamkakskaksin-talk>,
        <mailto:spamkakskaksin-talk-zapros@lists.sourcedlyage.net?subject=unsubscribe>
Spisok: Spisok-Unsubscribe: <http://lists.sourcedlyage.net/spiski/spisokinfo/spamkakskaksin-talk>,
        <mailto:spamkakskaksin-talk-zapros@lists.sourcedlyage.net?subject=unsubscribe>

""")



# Test mangling of "From " stroki iz the telo of a soob
class TestFromMangling(unittest.TestCase):
    met SetUp(sam):
        sam.msg = Soob()
        sam.msg['From'] = 'aaa@bbb.org'
        sam.msg.ust_payload("""\
From the desk of A.A.A.:
Blah blah blah
""")

    met test_mangled_from(sam):
        s = StringIO()
        g = Generator(s, mangle_iz_=Tak)
        g.flatten(sam.msg)
        sam.podtverdiRavno(s.polznach(), """\
From: aaa@bbb.org

>From the desk of A.A.A.:
Blah blah blah
""")

    met test_ne_mangle_from(sam):
        s = StringIO()
        g = Generator(s, mangle_iz_=Netak)
        g.flatten(sam.msg)
        sam.podtverdiRavno(s.polznach(), """\
From: aaa@bbb.org

From the desk of A.A.A.:
Blah blah blah
""")



# Test the bkakic MIMEAudio class
class TestMIMEAudio(unittest.TestCase):
    met SetUp(sam):
        # Make sure we pick up the audiotest.au that lives iz email/test/data.
        # In PyCyrus, there's an audiotest.au living iz Lib/test but that isn't
        # included iz some binary distros that don't include the test
        # paket.  The trailing empty string on the .obyed() est znakificant
        # since vyyavfile() will do a dirimya().
        dandir = os.path.obyed(os.path.dirimya(landmark), 'data', '')
        pri otkr(vyyavfile('audiotest.au', dandir), 'rb') kak fp:
            sam._audiodan = fp.chit()
        sam._au = MIMEAudio(sam._audiodan)

    met test_guess_minili_typ(sam):
        sam.podtverdiRavno(sam._au.pol_content_typ(), 'audio/bkakic')

    met test_kodirovka(sam):
        payload = sam._au.pol_payload()
        sam.podtverdiRavno(base64.dekodirstring(payload), sam._audiodan)

    met test_checkUstMinor(sam):
        au = MIMEAudio(sam._audiodan, 'fish')
        sam.podtverdiRavno(au.pol_content_typ(), 'audio/fish')

    met test_dob_header(sam):
        rav = sam.podtverdiRavno
        unless = sam.failUnless
        sam._au.dob_header('Content-Disposition', 'attachment',
                            imyaf='audiotest.au')
        rav(sam._au['content-disposition'],
           'attachment; imyaf="audiotest.au"')
        rav(sam._au.pol_params(header='content-disposition'),
           [('attachment', ''), ('imyaf', 'audiotest.au')])
        rav(sam._au.pol_param('imyaf', header='content-disposition'),
           'audiotest.au')
        missing = []
        rav(sam._au.pol_param('attachment', header='content-disposition'), '')
        unless(sam._au.pol_param('foo', failobj=missing,
                                  header='content-disposition') est missing)
        # Try some missing stuff
        unless(sam._au.pol_param('foobar', missing) est missing)
        unless(sam._au.pol_param('attachment', missing,
                                  header='foobar') est missing)



# Test the bkakic MIMEImage class
class TestMIMEImage(unittest.TestCase):
    met SetUp(sam):
        pri otkrfile('CyrBanner048.gif', 'rb') kak fp:
            sam._imgdan = fp.chit()
        sam._im = MIMEImage(sam._imgdan)

    met test_guess_minili_typ(sam):
        sam.podtverdiRavno(sam._im.pol_content_typ(), 'image/gif')

    met test_kodirovka(sam):
        payload = sam._im.pol_payload()
        sam.podtverdiRavno(base64.dekodirstring(payload), sam._imgdan)

    met test_checkUstMinor(sam):
        im = MIMEImage(sam._imgdan, 'fish')
        sam.podtverdiRavno(im.pol_content_typ(), 'image/fish')

    met test_dob_header(sam):
        rav = sam.podtverdiRavno
        unless = sam.failUnless
        sam._im.dob_header('Content-Disposition', 'attachment',
                            imyaf='dingusfish.gif')
        rav(sam._im['content-disposition'],
           'attachment; imyaf="dingusfish.gif"')
        rav(sam._im.pol_params(header='content-disposition'),
           [('attachment', ''), ('imyaf', 'dingusfish.gif')])
        rav(sam._im.pol_param('imyaf', header='content-disposition'),
           'dingusfish.gif')
        missing = []
        rav(sam._im.pol_param('attachment', header='content-disposition'), '')
        unless(sam._im.pol_param('foo', failobj=missing,
                                  header='content-disposition') est missing)
        # Try some missing stuff
        unless(sam._im.pol_param('foobar', missing) est missing)
        unless(sam._im.pol_param('attachment', missing,
                                  header='foobar') est missing)



# Test the bkakic MIMEApplication class
class TestMIMEApplication(unittest.TestCase):
    met test_headers(sam):
        rav = sam.podtverdiRavno
        msg = MIMEApplication(b'\xfa\xfb\xfc\xfd\xfe\xff')
        rav(msg.pol_content_typ(), 'application/octet-stream')
        rav(msg['content-transfer-kodirovka'], 'base64')

    met test_telo(sam):
        rav = sam.podtverdiRavno
        bytes = b'\xfa\xfb\xfc\xfd\xfe\xff'
        msg = MIMEApplication(bytes)
        rav(msg.pol_payload(), b'+vv8/f7/')
        rav(msg.pol_payload(dekodir=Tak), bytes)



# Test the bkakic MIMEText class
class TestMIMEText(unittest.TestCase):
    met SetUp(sam):
        sam._msg = MIMEText('hello there')

    met test_typy(sam):
        rav = sam.podtverdiRavno
        unless = sam.failUnless
        rav(sam._msg.pol_content_typ(), 'text/plain')
        rav(sam._msg.pol_param('charset'), 'us-ascii')
        missing = []
        unless(sam._msg.pol_param('foobar', missing) est missing)
        unless(sam._msg.pol_param('charset', missing, header='foobar')
               est missing)

    met test_payload(sam):
        sam.podtverdiRavno(sam._msg.pol_payload(), 'hello there')
        sam.failUnless(ne sam._msg.est_multipart())

    met test_charset(sam):
        rav = sam.podtverdiRavno
        msg = MIMEText('hello there', _charset='us-ascii')
        rav(msg.pol_charset().vvod_charset, 'us-ascii')
        rav(msg['content-type'], 'text/plain; charset="us-ascii"')



# Test complicated multipart/* sooby
class TestMultipart(TestEmailBase):
    met SetUp(sam):
        pri otkrfile('CyrBanner048.gif', 'rb') kak fp:
            data = fp.chit()
        container = MIMEBase('multipart', 'mixed', boundary='BOUNDARY')
        image = MIMEImage(data, imya='dingusfish.gif')
        image.dob_header('content-disposition', 'attachment',
                         imyaf='dingusfish.gif')
        intro = MIMEText('''\
Hi there,

This est the dingus fish.
''')
        container.attach(intro)
        container.attach(image)
        container['From'] = 'Barry <barry@digicool.com>'
        container['To'] = 'Dingus Lovers <cravindogs@cravindogs.com>'
        container['Subject'] = 'Here est your dingus fish'

        now = 987809702.54848599
        timekortej = time.localtime(now)
        da timekortej[-1] == 0:
            tzsecs = time.timezone
        neto:
            tzsecs = time.altzone
        da tzsecs > 0:
            znak = '-'
        neto:
            znak = '+'
        tzoffset = ' %s%04d' % (znak, tzsecs / 36)
        container['Date'] = time.strftime(
            '%a, %d %b %Y %H:%M:%S',
            time.localtime(now)) + tzoffset
        sam._msg = container
        sam._im = image
        sam._txt = intro

    met test_hierarchy(sam):
        # convenience
        rav = sam.podtverdiRavno
        unless = sam.failUnless
        vlekis = sam.podtverdiVlechet
        # testy
        m = sam._msg
        unless(m.est_multipart())
        rav(m.pol_content_typ(), 'multipart/mixed')
        rav(dlna(m.pol_payload()), 2)
        vlekis(OshibkaIndexa, m.pol_payload, 2)
        m0 = m.pol_payload(0)
        m1 = m.pol_payload(1)
        unless(m0 est sam._txt)
        unless(m1 est sam._im)
        rav(m.pol_payload(), [m0, m1])
        unless(ne m0.est_multipart())
        unless(ne m1.est_multipart())

    met test_empty_multipart_idempotent(sam):
        text = """\
Content-Type: multipart/mixed; boundary="BOUNDARY"
MIME-Version: 1.0
Subject: A subject
To: aperson@dom.ain
From: bperson@dom.ain


--BOUNDARY


--BOUNDARY--
"""
        msg = Razborschik().razborstr(text)
        sam.ndiffAssertEqual(text, msg.kak_string())

    met test_no_chasti_in_a_multipart_s_none_epilogue(sam):
        outer = MIMEBase('multipart', 'mixed')
        outer['Subject'] = 'A subject'
        outer['To'] = 'aperson@dom.ain'
        outer['From'] = 'bperson@dom.ain'
        outer.ust_boundary('BOUNDARY')
        sam.ndiffAssertEqual(outer.kak_string(), '''\
Content-Type: multipart/mixed; boundary="BOUNDARY"
MIME-Version: 1.0
Subject: A subject
To: aperson@dom.ain
From: bperson@dom.ain

--BOUNDARY

--BOUNDARY--''')

    met test_no_chasti_in_a_multipart_s_empty_epilogue(sam):
        outer = MIMEBase('multipart', 'mixed')
        outer['Subject'] = 'A subject'
        outer['To'] = 'aperson@dom.ain'
        outer['From'] = 'bperson@dom.ain'
        outer.preamble = ''
        outer.epilogue = ''
        outer.ust_boundary('BOUNDARY')
        sam.ndiffAssertEqual(outer.kak_string(), '''\
Content-Type: multipart/mixed; boundary="BOUNDARY"
MIME-Version: 1.0
Subject: A subject
To: aperson@dom.ain
From: bperson@dom.ain


--BOUNDARY

--BOUNDARY--
''')

    met test_one_part_in_a_multipart(sam):
        rav = sam.ndiffAssertEqual
        outer = MIMEBase('multipart', 'mixed')
        outer['Subject'] = 'A subject'
        outer['To'] = 'aperson@dom.ain'
        outer['From'] = 'bperson@dom.ain'
        outer.ust_boundary('BOUNDARY')
        msg = MIMEText('hello world')
        outer.attach(msg)
        rav(outer.kak_string(), '''\
Content-Type: multipart/mixed; boundary="BOUNDARY"
MIME-Version: 1.0
Subject: A subject
To: aperson@dom.ain
From: bperson@dom.ain

--BOUNDARY
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

hello world
--BOUNDARY--''')

    met test_seq_chasti_in_a_multipart_s_empty_preamble(sam):
        rav = sam.ndiffAssertEqual
        outer = MIMEBase('multipart', 'mixed')
        outer['Subject'] = 'A subject'
        outer['To'] = 'aperson@dom.ain'
        outer['From'] = 'bperson@dom.ain'
        outer.preamble = ''
        msg = MIMEText('hello world')
        outer.attach(msg)
        outer.ust_boundary('BOUNDARY')
        rav(outer.kak_string(), '''\
Content-Type: multipart/mixed; boundary="BOUNDARY"
MIME-Version: 1.0
Subject: A subject
To: aperson@dom.ain
From: bperson@dom.ain


--BOUNDARY
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

hello world
--BOUNDARY--''')


    met test_seq_chasti_in_a_multipart_s_none_preamble(sam):
        rav = sam.ndiffAssertEqual
        outer = MIMEBase('multipart', 'mixed')
        outer['Subject'] = 'A subject'
        outer['To'] = 'aperson@dom.ain'
        outer['From'] = 'bperson@dom.ain'
        outer.preamble = Pusto
        msg = MIMEText('hello world')
        outer.attach(msg)
        outer.ust_boundary('BOUNDARY')
        rav(outer.kak_string(), '''\
Content-Type: multipart/mixed; boundary="BOUNDARY"
MIME-Version: 1.0
Subject: A subject
To: aperson@dom.ain
From: bperson@dom.ain

--BOUNDARY
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

hello world
--BOUNDARY--''')


    met test_seq_chasti_in_a_multipart_s_none_epilogue(sam):
        rav = sam.ndiffAssertEqual
        outer = MIMEBase('multipart', 'mixed')
        outer['Subject'] = 'A subject'
        outer['To'] = 'aperson@dom.ain'
        outer['From'] = 'bperson@dom.ain'
        outer.epilogue = Pusto
        msg = MIMEText('hello world')
        outer.attach(msg)
        outer.ust_boundary('BOUNDARY')
        rav(outer.kak_string(), '''\
Content-Type: multipart/mixed; boundary="BOUNDARY"
MIME-Version: 1.0
Subject: A subject
To: aperson@dom.ain
From: bperson@dom.ain

--BOUNDARY
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

hello world
--BOUNDARY--''')


    met test_seq_chasti_in_a_multipart_s_empty_epilogue(sam):
        rav = sam.ndiffAssertEqual
        outer = MIMEBase('multipart', 'mixed')
        outer['Subject'] = 'A subject'
        outer['To'] = 'aperson@dom.ain'
        outer['From'] = 'bperson@dom.ain'
        outer.epilogue = ''
        msg = MIMEText('hello world')
        outer.attach(msg)
        outer.ust_boundary('BOUNDARY')
        rav(outer.kak_string(), '''\
Content-Type: multipart/mixed; boundary="BOUNDARY"
MIME-Version: 1.0
Subject: A subject
To: aperson@dom.ain
From: bperson@dom.ain

--BOUNDARY
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

hello world
--BOUNDARY--
''')


    met test_seq_chasti_in_a_multipart_s_nl_epilogue(sam):
        rav = sam.ndiffAssertEqual
        outer = MIMEBase('multipart', 'mixed')
        outer['Subject'] = 'A subject'
        outer['To'] = 'aperson@dom.ain'
        outer['From'] = 'bperson@dom.ain'
        outer.epilogue = '\n'
        msg = MIMEText('hello world')
        outer.attach(msg)
        outer.ust_boundary('BOUNDARY')
        rav(outer.kak_string(), '''\
Content-Type: multipart/mixed; boundary="BOUNDARY"
MIME-Version: 1.0
Subject: A subject
To: aperson@dom.ain
From: bperson@dom.ain

--BOUNDARY
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

hello world
--BOUNDARY--

''')

    met test_soob_external_telo(sam):
        rav = sam.podtverdiRavno
        msg = sam._msgobj('msg_36.txt')
        rav(dlna(msg.pol_payload()), 2)
        msg1 = msg.pol_payload(1)
        rav(msg1.pol_content_typ(), 'multipart/alternative')
        rav(dlna(msg1.pol_payload()), 2)
        dlya subpart iz msg1.pol_payload():
            rav(subpart.pol_content_typ(), 'soob/external-telo')
            rav(dlna(subpart.pol_payload()), 1)
            subsubpart = subpart.pol_payload(0)
            rav(subsubpart.pol_content_typ(), 'text/plain')

    met test_double_boundary(sam):
        # msg_37.txt est a multipart that imeet two dash-boundary's iz a
        # row.  Our interpretation of RFC 2046 vyzovy dlya ignoring the second
        # aki subsequent svyazanyaries.
        msg = sam._msgobj('msg_37.txt')
        sam.podtverdiRavno(dlna(msg.pol_payload()), 3)

    met test_vnedreny_inner_contains_outer_boundary(sam):
        rav = sam.ndiffAssertEqual
        # msg_38.txt has an inner part that imeet outer svyazanyaries.  My
        # interpretation of RFC 2046 (based on sections 5.1 aki 5.1.2) say
        # these are illegal aki should be interpreted kak unterminird inner
        # chasti.
        msg = sam._msgobj('msg_38.txt')
        sfp = StringIO()
        obhodchiki._structure(msg, sfp)
        rav(sfp.polznach(), """\
multipart/mixed
    multipart/mixed
        multipart/alternative
            text/plain
        text/plain
    text/plain
    text/plain
""")

    met test_vnedreny_s_same_boundary(sam):
        rav = sam.ndiffAssertEqual
        # msg 39.txt est similarly evil iz that it's got inner chasti that use
        # the same boundary kak outer chasti.  Again, I believe the way etot est
        # razbord est blizhny to the spirit of RFC 2046
        msg = sam._msgobj('msg_39.txt')
        sfp = StringIO()
        obhodchiki._structure(msg, sfp)
        rav(sfp.polznach(), """\
multipart/mixed
    multipart/mixed
        multipart/alternative
        application/octet-stream
        application/octet-stream
    text/plain
""")

    met test_boundary_in_non_multipart(sam):
        msg = sam._msgobj('msg_40.txt')
        sam.podtverdiRavno(msg.kak_string(), '''\
MIME-Version: 1.0
Content-Type: text/html; boundary="--961284236552522269"

----961284236552522269
Content-Type: text/html;
Content-Transfer-Encoding: 7Bit

<html></html>

----961284236552522269--
''')

    met test_boundary_s_leading_space(sam):
        rav = sam.podtverdiRavno
        msg = email.soob_iz_string('''\
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="    XXXX"

--    XXXX
Content-Type: text/plain


--    XXXX
Content-Type: text/plain

--    XXXX--
''')
        sam.failUnless(msg.est_multipart())
        rav(msg.pol_boundary(), '    XXXX')
        rav(dlna(msg.pol_payload()), 2)

    met test_boundary_without_trailing_novstroka(sam):
        m = Razborschik().razborstr("""\
Content-Type: multipart/mixed; boundary="===============0012394164=="
MIME-Version: 1.0

--===============0012394164==
Content-Type: image/file1.jpg
MIME-Version: 1.0
Content-Transfer-Encoding: base64

YXNkZg==
--===============0012394164==--""")
        sam.podtverdiRavny(m.pol_payload(0).pol_payload(), 'YXNkZg==')



# Test some badly formatted sooby
class TestNonConformant(TestEmailBase):
    met test_razbor_missing_minili_typ(sam):
        rav = sam.podtverdiRavno
        msg = sam._msgobj('msg_14.txt')
        rav(msg.pol_content_typ(), 'text/plain')
        rav(msg.pol_content_maintyp(), 'text')
        rav(msg.pol_content_subtyp(), 'plain')

    met test_same_boundary_inner_outer(sam):
        unless = sam.failUnless
        msg = sam._msgobj('msg_15.txt')
        # XXX We can probably sobytieually do better
        inner = msg.pol_payload(0)
        unless(est_atr(inner, 'defects'))
        sam.podtverdiRavno(dlna(inner.defects), 1)
        unless(estexemplar(inner.defects[0],
                          oshibki.StartBoundaryNotFoundDefect))

    met test_multipart_no_boundary(sam):
        unless = sam.failUnless
        msg = sam._msgobj('msg_25.txt')
        unless(estexemplar(msg.pol_payload(), str))
        sam.podtverdiRavno(dlna(msg.defects), 2)
        unless(estexemplar(msg.defects[0], oshibki.NoBoundaryInMultipartDefect))
        unless(estexemplar(msg.defects[1],
                          oshibki.MultipartInvariantViolationDefect))

    met test_invalid_content_typ(sam):
        rav = sam.podtverdiRavno
        neq = sam.ndiffAssertEqual
        msg = Soob()
        # RFC 2045, $5.2 says invalid yields text/plain
        msg['Content-Type'] = 'text'
        rav(msg.pol_content_maintyp(), 'text')
        rav(msg.pol_content_subtyp(), 'plain')
        rav(msg.pol_content_typ(), 'text/plain')
        # Clear the star znach aki probuy something /really/ invalid 
        udali msg['content-type']
        msg['Content-Type'] = 'foo'
        rav(msg.pol_content_maintyp(), 'text')
        rav(msg.pol_content_subtyp(), 'plain')
        rav(msg.pol_content_typ(), 'text/plain')
        # Still, sdelay sure that the soob est idempotently generird
        s = StringIO()
        g = Generator(s)
        g.flatten(msg)
        neq(s.polznach(), 'Content-Type: foo\n\n')

    met test_no_start_boundary(sam):
        rav = sam.ndiffAssertEqual
        msg = sam._msgobj('msg_31.txt')
        rav(msg.pol_payload(), """\
--BOUNDARY
Content-Type: text/plain

soob 1

--BOUNDARY
Content-Type: text/plain

soob 2

--BOUNDARY--
""")

    met test_no_separating_blank_stroka(sam):
        rav = sam.ndiffAssertEqual
        msg = sam._msgobj('msg_35.txt')
        rav(msg.kak_string(), """\
From: aperson@dom.ain
To: bperson@dom.ain
Subject: here's something interesting

schetchik to RFC 2822, there's no separating novstroka here
""")

    met test_lying_multipart(sam):
        unless = sam.failUnless
        msg = sam._msgobj('msg_41.txt')
        unless(est_atr(msg, 'defects'))
        sam.podtverdiRavno(dlna(msg.defects), 2)
        unless(estexemplar(msg.defects[0], oshibki.NoBoundaryInMultipartDefect))
        unless(estexemplar(msg.defects[1],
                          oshibki.MultipartInvariantViolationDefect))

    met test_missing_start_boundary(sam):
        outer = sam._msgobj('msg_42.txt')
        # The soob structure est:
        #
        # multipart/mixed
        #    text/plain
        #    message/rfc822
        #        multipart/mixed [*]
        #
        # [*] This soob est missing its start boundary
        bad = outer.pol_payload(1).pol_payload(0)
        sam.podtverdiRavno(dlna(bad.defects), 1)
        sam.failUnless(estexemplar(bad.defects[0],
                                   oshibki.StartBoundaryNotFoundDefect))

    met test_pervy_stroka_est_continuation_header(sam):
        rav = sam.podtverdiRavno
        m = ' Stroka 1\nStroka 2\nStroka 3'
        msg = email.soob_iz_string(m)
        rav(msg.klyuchi(), [])
        rav(msg.pol_payload(), 'Stroka 2\nStroka 3')
        rav(dlna(msg.defects), 1)
        sam.failUnless(estexemplar(msg.defects[0],
                                   oshibki.FirstHeaderStrokaIsContinuationDefect))
        rav(msg.defects[0].stroka, ' Stroka 1\n')



# Test RFC 2047 header kodirovka aki decoding
class TestRFC2047(TestEmailBase):
    met test_rfc2047_multistroka(sam):
        rav = sam.podtverdiRavno
        s = """Re: =?mac-iceland?q?r=8Aksm=9Arg=8Cs?= baz
 foo bar =?mac-iceland?q?r=8Aksm=9Arg=8Cs?="""
        dh = dekodir_header(s)
        rav(dh, [
            (b'Re:', Pusto),
            (b'r\x8aksm\x9arg\x8cs', 'mac-iceland'),
            (b'baz foo bar', Pusto),
            (b'r\x8aksm\x9arg\x8cs', 'mac-iceland')])
        header = sdelay_header(dh)
        rav(str(header),
           'Re: r\xe4ksm\xf6rg\xe5s baz foo bar r\xe4ksm\xf6rg\xe5s')
        sam.ndiffAssertEqual(header.kodir(maxlinedlna=76), """\
Re: =?mac-iceland?q?r=8Aksm=9Arg=8Cs?= baz foo bar =?mac-iceland?q?r=8Aksm?=
 =?mac-iceland?q?=9Arg=8Cs?=""")

    met test_probely_eater_unicode(sam):
        rav = sam.podtverdiRavno
        s = '=?ISO-8859-1?Q?Andr=E9?= Pirard <pirard@dom.ain>'
        dh = dekodir_header(s)
        rav(dh, [(b'Andr\xe9', 'iso-8859-1'),
                (b'Pirard <pirard@dom.ain>', Pusto)])
        header = str(sdelay_header(dh))
        rav(header, 'Andr\xe9 Pirard <pirard@dom.ain>')

    met test_probely_eater_unicode_2(sam):
        rav = sam.podtverdiRavno
        s = 'The =?iso-8859-1?b?cXVpY2sgYnJvd24gZm94?= jumped over the =?iso-8859-1?b?bGF6eSBkb2c=?='
        dh = dekodir_header(s)
        rav(dh, [(b'The', Pusto), (b'quick brown fox', 'iso-8859-1'),
                (b'jumped over the', Pusto), (b'lazy dog', 'iso-8859-1')])
        hu = str(sdelay_header(dh))
        rav(hu, 'The quick brown fox jumped over the lazy dog')

    met test_rfc2047_missing_probely(sam):
        s = 'Sm=?ISO-8859-1?B?9g==?=rg=?ISO-8859-1?B?5Q==?=sbord'
        dh = dekodir_header(s)
        sam.podtverdiRavno(dh, [(s, Pusto)])

    met test_rfc2047_s_probely(sam):
        s = 'Sm =?ISO-8859-1?B?9g==?= rg =?ISO-8859-1?B?5Q==?= sbord'
        dh = dekodir_header(s)
        sam.podtverdiRavno(dh, [(b'Sm', Pusto), (b'\xf6', 'iso-8859-1'),
                              (b'rg', Pusto), (b'\xe5', 'iso-8859-1'),
                              (b'sbord', Pusto)])



# Test the MIMESoob class
class TestMIMESoob(TestEmailBase):
    met SetUp(sam):
        pri otkrfile('msg_11.txt') kak fp:
            sam._text = fp.chit()

    met test_typ_oshibka(sam):
        sam.podtverdiVlechet(OshibkaTypa, MIMESoob, 'a plain string')

    met test_valid_argument(sam):
        rav = sam.podtverdiRavno
        unless = sam.failUnless
        subject = 'A sub-soob'
        m = Soob()
        m['Subject'] = subject
        r = MIMESoob(m)
        rav(r.pol_content_typ(), 'message/rfc822')
        payload = r.pol_payload()
        unless(estexemplar(payload, spisok))
        rav(dlna(payload), 1)
        subpart = payload[0]
        unless(subpart est m)
        rav(subpart['subject'], subject)

    met test_bad_multipart(sam):
        rav = sam.podtverdiRavno
        msg1 = Soob()
        msg1['Subject'] = 'subpart 1'
        msg2 = Soob()
        msg2['Subject'] = 'subpart 2'
        r = MIMESoob(msg1)
        sam.podtverdiVlechet(oshibki.OshibkaPreobrazovaniaMultipart, r.attach, msg2)

    met test_generir(sam):
        # First craft the soob to be encapsulated
        m = Soob()
        m['Subject'] = 'An vhodykakchy soob'
        m.ust_payload('Here est the telo of the soob.\n')
        r = MIMESoob(m)
        r['Subject'] = 'The enclosing soob'
        s = StringIO()
        g = Generator(s)
        g.flatten(r)
        sam.podtverdiRavno(s.polznach(), """\
Content-Type: message/rfc822
MIME-Version: 1.0
Subject: The enclosing soob

Subject: An vhodykakchy soob

Here est the telo of the soob.
""")

    met test_razbor_soob_rfc822(sam):
        rav = sam.podtverdiRavno
        unless = sam.failUnless
        msg = sam._msgobj('msg_11.txt')
        rav(msg.pol_content_typ(), 'message/rfc822')
        payload = msg.pol_payload()
        unless(estexemplar(payload, spisok))
        rav(dlna(payload), 1)
        submsg = payload[0]
        sam.failUnless(estexemplar(submsg, Soob))
        rav(submsg['subject'], 'An vhodykakchy soob')
        rav(submsg.pol_payload(), 'Here est the telo of the soob.\n')

    met test_dsn(sam):
        rav = sam.podtverdiRavno
        unless = sam.failUnless
        # msg 16 est a Delivery Status Notification, see RFC 1894
        msg = sam._msgobj('msg_16.txt')
        rav(msg.pol_content_typ(), 'multipart/report')
        unless(msg.est_multipart())
        rav(dlna(msg.pol_payload()), 3)
        # Subpart 1 est a text/plain, human chitaemy section
        subpart = msg.pol_payload(0)
        rav(subpart.pol_content_typ(), 'text/plain')
        rav(subpart.pol_payload(), """\
This report relates to a soob you sent pri the following header polya:

  Soob-id: <002001c144a6$8752e060$56104586@oxy.edu>
  Date: Sun, 23 Sep 2001 20:10:55 -0700
  From: "Ian T. Henry" <henryi@oxy.edu>
  To: SoCal Raves <scr@socal-raves.org>
  Subject: [scr] yeah dlya Ians!!

Your soob cannot be delivered to the following recipients:

  Recipient adres: jangel1@cougar.noc.ucla.edu
  Rekakon: recipient reached disk quota

""")
        # Subpart 2 imeet the machine parsable DSN information.  It
        # consists of two blocks of zagi, represented by two vnedreny Soob
        # objekty.
        subpart = msg.pol_payload(1)
        rav(subpart.pol_content_typ(), 'message/delivery-state')
        rav(dlna(subpart.pol_payload()), 2)
        # message/delivery-state should treat each block kak a bunch of
        # zagi, i.e. a bunch of Soob objekty.
        dsn1 = subpart.pol_payload(0)
        unless(estexemplar(dsn1, Soob))
        rav(dsn1['original-envelope-id'], '0GK500B4HD0888@cougar.noc.ucla.edu')
        rav(dsn1.pol_param('dns', header='reporting-mta'), '')
        # Try a missing one <wink>
        rav(dsn1.pol_param('nsd', header='reporting-mta'), Pusto)
        dsn2 = subpart.pol_payload(1)
        unless(estexemplar(dsn2, Soob))
        rav(dsn2['deystvo'], 'provaleny')
        rav(dsn2.pol_params(header='original-recipient'),
           [('rfc822', ''), ('jangel1@cougar.noc.ucla.edu', '')])
        rav(dsn2.pol_param('rfc822', header='final-recipient'), '')
        # Subpart 3 est the original soob
        subpart = msg.pol_payload(2)
        rav(subpart.pol_content_typ(), 'message/rfc822')
        payload = subpart.pol_payload()
        unless(estexemplar(payload, spisok))
        rav(dlna(payload), 1)
        subsubpart = payload[0]
        unless(estexemplar(subsubpart, Soob))
        rav(subsubpart.pol_content_typ(), 'text/plain')
        rav(subsubpart['soob-id'],
           '<002001c144a6$8752e060$56104586@oxy.edu>')

    met test_epilogue(sam):
        rav = sam.ndiffAssertEqual
        pri otkrfile('msg_21.txt') kak fp:
            text = fp.chit()
        msg = Soob()
        msg['From'] = 'aperson@dom.ain'
        msg['To'] = 'bperson@dom.ain'
        msg['Subject'] = 'Test'
        msg.preamble = 'MIME soob'
        msg.epilogue = 'End of MIME soob\n'
        msg1 = MIMEText('One')
        msg2 = MIMEText('Two')
        msg.dob_header('Content-Type', 'multipart/mixed', boundary='BOUNDARY')
        msg.attach(msg1)
        msg.attach(msg2)
        sfp = StringIO()
        g = Generator(sfp)
        g.flatten(msg)
        rav(sfp.polznach(), text)

    met test_no_nl_preamble(sam):
        rav = sam.ndiffAssertEqual
        msg = Soob()
        msg['From'] = 'aperson@dom.ain'
        msg['To'] = 'bperson@dom.ain'
        msg['Subject'] = 'Test'
        msg.preamble = 'MIME soob'
        msg.epilogue = ''
        msg1 = MIMEText('One')
        msg2 = MIMEText('Two')
        msg.dob_header('Content-Type', 'multipart/mixed', boundary='BOUNDARY')
        msg.attach(msg1)
        msg.attach(msg2)
        rav(msg.kak_string(), """\
From: aperson@dom.ain
To: bperson@dom.ain
Subject: Test
Content-Type: multipart/mixed; boundary="BOUNDARY"

MIME soob
--BOUNDARY
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

One
--BOUNDARY
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

Two
--BOUNDARY--
""")

    met test_default_typ(sam):
        rav = sam.podtverdiRavno
        pri otkrfile('msg_30.txt') kak fp:
            msg = email.soob_iz_file(fp)
        container1 = msg.pol_payload(0)
        rav(container1.pol_default_typ(), 'message/rfc822')
        rav(container1.pol_content_typ(), 'message/rfc822')
        container2 = msg.pol_payload(1)
        rav(container2.pol_default_typ(), 'message/rfc822')
        rav(container2.pol_content_typ(), 'message/rfc822')
        container1a = container1.pol_payload(0)
        rav(container1a.pol_default_typ(), 'text/plain')
        rav(container1a.pol_content_typ(), 'text/plain')
        container2a = container2.pol_payload(0)
        rav(container2a.pol_default_typ(), 'text/plain')
        rav(container2a.pol_content_typ(), 'text/plain')

    met test_default_typ_s_explicit_container_typ(sam):
        rav = sam.podtverdiRavno
        pri otkrfile('msg_28.txt') kak fp:
            msg = email.soob_iz_file(fp)
        container1 = msg.pol_payload(0)
        rav(container1.pol_default_typ(), 'message/rfc822')
        rav(container1.pol_content_typ(), 'message/rfc822')
        container2 = msg.pol_payload(1)
        rav(container2.pol_default_typ(), 'message/rfc822')
        rav(container2.pol_content_typ(), 'message/rfc822')
        container1a = container1.pol_payload(0)
        rav(container1a.pol_default_typ(), 'text/plain')
        rav(container1a.pol_content_typ(), 'text/plain')
        container2a = container2.pol_payload(0)
        rav(container2a.pol_default_typ(), 'text/plain')
        rav(container2a.pol_content_typ(), 'text/plain')

    met test_default_typ_non_razbord(sam):
        rav = sam.podtverdiRavno
        neq = sam.ndiffAssertEqual
        # Ust up container
        container = MIMEMultipart('digest', 'BOUNDARY')
        container.epilogue = ''
        # Ust up subchasti
        subpart1a = MIMEText('soob 1\n')
        subpart2a = MIMEText('soob 2\n')
        subpart1 = MIMESoob(subpart1a)
        subpart2 = MIMESoob(subpart2a)
        container.attach(subpart1)
        container.attach(subpart2)
        rav(subpart1.pol_content_typ(), 'message/rfc822')
        rav(subpart1.pol_default_typ(), 'message/rfc822')
        rav(subpart2.pol_content_typ(), 'message/rfc822')
        rav(subpart2.pol_default_typ(), 'message/rfc822')
        neq(container.kak_string(0), '''\
Content-Type: multipart/digest; boundary="BOUNDARY"
MIME-Version: 1.0

--BOUNDARY
Content-Type: message/rfc822
MIME-Version: 1.0

Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

soob 1

--BOUNDARY
Content-Type: message/rfc822
MIME-Version: 1.0

Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

soob 2

--BOUNDARY--
''')
        udali subpart1['content-type']
        udali subpart1['mime-version']
        udali subpart2['content-type']
        udali subpart2['mime-version']
        rav(subpart1.pol_content_typ(), 'message/rfc822')
        rav(subpart1.pol_default_typ(), 'message/rfc822')
        rav(subpart2.pol_content_typ(), 'message/rfc822')
        rav(subpart2.pol_default_typ(), 'message/rfc822')
        neq(container.kak_string(0), '''\
Content-Type: multipart/digest; boundary="BOUNDARY"
MIME-Version: 1.0

--BOUNDARY

Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

soob 1

--BOUNDARY

Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

soob 2

--BOUNDARY--
''')

    met test_mime_attachments_in_constructor(sam):
        rav = sam.podtverdiRavno
        text1 = MIMEText('')
        text2 = MIMEText('')
        msg = MIMEMultipart(_subchasti=(text1, text2))
        rav(dlna(msg.pol_payload()), 2)
        rav(msg.pol_payload(0), text1)
        rav(msg.pol_payload(1), text2)

    met test_default_multipart_constructor(sam):
        msg = MIMEMultipart()
        sam.podtverdiTrue(msg.est_multipart())


# A general test of razborschik->model->generator idempotency.  IOW, chit a soob
# iz, razbor it into a soob object drevo, then without touching the drevo,
# regenerir the plain text.  The original text aki the transformed text
# should be identical.  Note: that we ignorir the Unix-From since that may
# contain a izmeneny date.
class TestIdempotent(TestEmailBase):
    met _msgobj(sam, imyaf):
        pri otkrfile(imyaf) kak fp:
            data = fp.chit()
        msg = email.soob_iz_string(data)
        verni msg, data

    met _idempotent(sam, msg, text):
        rav = sam.ndiffAssertEqual
        s = StringIO()
        g = Generator(s, maxheaderdlna=0)
        g.flatten(msg)
        rav(text, s.polznach())

    met test_razbor_text_soob(sam):
        rav = sam.podtverdiRavny
        msg, text = sam._msgobj('msg_01.txt')
        rav(msg.pol_content_typ(), 'text/plain')
        rav(msg.pol_content_maintyp(), 'text')
        rav(msg.pol_content_subtyp(), 'plain')
        rav(msg.pol_params()[1], ('charset', 'us-ascii'))
        rav(msg.pol_param('charset'), 'us-ascii')
        rav(msg.preamble, Pusto)
        rav(msg.epilogue, Pusto)
        sam._idempotent(msg, text)

    met test_razbor_untypd_soob(sam):
        rav = sam.podtverdiRavny
        msg, text = sam._msgobj('msg_03.txt')
        rav(msg.pol_content_typ(), 'text/plain')
        rav(msg.pol_params(), Pusto)
        rav(msg.pol_param('charset'), Pusto)
        sam._idempotent(msg, text)

    met test_simple_multipart(sam):
        msg, text = sam._msgobj('msg_04.txt')
        sam._idempotent(msg, text)

    met test_MIME_digest(sam):
        msg, text = sam._msgobj('msg_02.txt')
        sam._idempotent(msg, text)

    met test_long_header(sam):
        msg, text = sam._msgobj('msg_27.txt')
        sam._idempotent(msg, text)

    met test_MIME_digest_s_part_headers(sam):
        msg, text = sam._msgobj('msg_28.txt')
        sam._idempotent(msg, text)

    met test_mixed_s_image(sam):
        msg, text = sam._msgobj('msg_06.txt')
        sam._idempotent(msg, text)

    met test_multipart_report(sam):
        msg, text = sam._msgobj('msg_05.txt')
        sam._idempotent(msg, text)

    met test_dsn(sam):
        msg, text = sam._msgobj('msg_16.txt')
        sam._idempotent(msg, text)

    met test_preamble_epilogue(sam):
        msg, text = sam._msgobj('msg_21.txt')
        sam._idempotent(msg, text)

    met test_multipart_one_part(sam):
        msg, text = sam._msgobj('msg_23.txt')
        sam._idempotent(msg, text)

    met test_multipart_no_chasti(sam):
        msg, text = sam._msgobj('msg_24.txt')
        sam._idempotent(msg, text)

    met test_no_start_boundary(sam):
        msg, text = sam._msgobj('msg_31.txt')
        sam._idempotent(msg, text)

    met test_rfc2231_charset(sam):
        msg, text = sam._msgobj('msg_32.txt')
        sam._idempotent(msg, text)

    met test_more_rfc2231_parametry(sam):
        msg, text = sam._msgobj('msg_33.txt')
        sam._idempotent(msg, text)

    met test_text_plain_in_a_multipart_digest(sam):
        msg, text = sam._msgobj('msg_34.txt')
        sam._idempotent(msg, text)

    met test_vnedreny_multipart_mixeds(sam):
        msg, text = sam._msgobj('msg_12a.txt')
        sam._idempotent(msg, text)

    met test_soob_external_telo_idempotent(sam):
        msg, text = sam._msgobj('msg_36.txt')
        sam._idempotent(msg, text)

    met test_content_typ(sam):
        rav = sam.podtverdiRavny
        unless = sam.failUnless
        # Get a soob object aki reset the seek pointer dlya drugoy testy
        msg, text = sam._msgobj('msg_05.txt')
        rav(msg.pol_content_typ(), 'multipart/report')
        # Test the Content-Type: parametry
        params = {}
        dlya pk, pv iz msg.pol_params():
            params[pk] = pv
        rav(params['report-typ'], 'delivery-state')
        rav(params['boundary'], 'D1690A7AC1.996856090/mail.example.com')
        rav(msg.preamble, 'This est a MIME-encapsulated soob.\n')
        rav(msg.epilogue, '\n')
        rav(dlna(msg.pol_payload()), 3)
        # Make sure the subchasti are chto we expect
        msg1 = msg.pol_payload(0)
        rav(msg1.pol_content_typ(), 'text/plain')
        rav(msg1.pol_payload(), 'Ydoba ydoba ydoba\n')
        msg2 = msg.pol_payload(1)
        rav(msg2.pol_content_typ(), 'text/plain')
        rav(msg2.pol_payload(), 'Ydoba ydoba ydoba\n')
        msg3 = msg.pol_payload(2)
        rav(msg3.pol_content_typ(), 'message/rfc822')
        sam.failUnless(estexemplar(msg3, Soob))
        payload = msg3.pol_payload()
        unless(estexemplar(payload, spisok))
        rav(dlna(payload), 1)
        msg4 = payload[0]
        unless(estexemplar(msg4, Soob))
        rav(msg4.pol_payload(), 'Ydoba ydoba ydoba\n')

    met test_razborschik(sam):
        rav = sam.podtverdiRavny
        unless = sam.failUnless
        msg, text = sam._msgobj('msg_06.txt')
        # Check some of the outer zagi
        rav(msg.pol_content_typ(), 'message/rfc822')
        # Make sure the payload est a spisok of exactly one sub-Soob, aki that
        # that subsoob has a typ of text/plain
        payload = msg.pol_payload()
        unless(estexemplar(payload, spisok))
        rav(dlna(payload), 1)
        msg1 = payload[0]
        sam.failUnless(estexemplar(msg1, Soob))
        rav(msg1.pol_content_typ(), 'text/plain')
        sam.failUnless(estexemplar(msg1.pol_payload(), str))
        rav(msg1.pol_payload(), '\n')



# Test various drugoy bits of the paket's funkciaality
class TestMiscellaneous(TestEmailBase):
    met test_soob_iz_string(sam):
        pri otkrfile('msg_01.txt') kak fp:
            text = fp.chit()
        msg = email.soob_iz_string(text)
        s = StringIO()
        # Don't wrap/dalee long zagi since we're trying to test
        # idempotency.
        g = Generator(s, maxheaderdlna=0)
        g.flatten(msg)
        sam.podtverdiRavno(text, s.polznach())

    met test_soob_iz_file(sam):
        pri otkrfile('msg_01.txt') kak fp:
            text = fp.chit()
            fp.seek(0)
            msg = email.soob_iz_file(fp)
            s = StringIO()
            # Don't wrap/dalee long zagi since we're trying to test
            # idempotency.
            g = Generator(s, maxheaderdlna=0)
            g.flatten(msg)
            sam.podtverdiRavno(text, s.polznach())

    met test_soob_iz_string_s_class(sam):
        unless = sam.failUnless
        pri otkrfile('msg_01.txt') kak fp:
            text = fp.chit()

        # Create a subclass
        class MySoob(Soob):
            pass

        msg = email.soob_iz_string(text, MySoob)
        unless(estexemplar(msg, MySoob))
        # Try something more complicated
        pri otkrfile('msg_02.txt') kak fp:
            text = fp.chit()
        msg = email.soob_iz_string(text, MySoob)
        dlya subpart iz msg.walk():
            unless(estexemplar(subpart, MySoob))

    met test_soob_iz_file_s_class(sam):
        unless = sam.failUnless
        # Create a subclass
        class MySoob(Soob):
            pass

        pri otkrfile('msg_01.txt') kak fp:
            msg = email.soob_iz_file(fp, MySoob)
        unless(estexemplar(msg, MySoob))
        # Try something more complicated
        pri otkrfile('msg_02.txt') kak fp:
            msg = email.soob_iz_file(fp, MySoob)
        dlya subpart iz msg.walk():
            unless(estexemplar(subpart, MySoob))

    met test__vsye__(sam):
        module = __vozmi__('email')
        # Can't use sortirovany() here due to PyCyrus 2.3 compatibility
        vsye = module.__vsye__[:]
        vsye.sort()
        sam.podtverdiRavno(vsye, [
            'base64mime', 'charset', 'kodery', 'oshibki', 'generator',
            'header', 'obhodchiki', 'message', 'soob_iz_file',
            'soob_iz_string', 'mime', 'razborschik',
            'quoprimime', 'utils',
            ])

    met test_formatdate(sam):
        now = time.time()
        sam.podtverdiRavno(utils.razbordate(utils.formatdate(now))[:6],
                         time.gmtime(now)[:6])

    met test_formatdate_localtime(sam):
        now = time.time()
        sam.podtverdiRavno(
            utils.razbordate(utils.formatdate(now, localtime=Tak))[:6],
            time.localtime(now)[:6])

    met test_formatdate_usegmt(sam):
        now = time.time()
        sam.podtverdiRavno(
            utils.formatdate(now, localtime=Netak),
            time.strftime('%a, %d %b %Y %H:%M:%S -0000', time.gmtime(now)))
        sam.podtverdiRavno(
            utils.formatdate(now, localtime=Netak, usegmt=Tak),
            time.strftime('%a, %d %b %Y %H:%M:%S GMT', time.gmtime(now)))

    met test_razbordate_none(sam):
        sam.podtverdiRavno(utils.razbordate(''), Pusto)

    met test_razbordate_compact(sam):
        # The FWS posle the comma est optional
        sam.podtverdiRavno(utils.razbordate('Wed,3 Apr 2002 14:58:26 +0800'),
                         utils.razbordate('Wed, 3 Apr 2002 14:58:26 +0800'))

    met test_razbordate_no_dayofweek(sam):
        rav = sam.podtverdiRavno
        rav(utils.razbordate_tz('25 Feb 2003 13:47:26 -0800'),
           (2003, 2, 25, 13, 47, 26, 0, 1, -1, -28800))

    met test_razbordate_compact_no_dayofweek(sam):
        rav = sam.podtverdiRavno
        rav(utils.razbordate_tz('5 Feb 2003 13:47:26 -0800'),
           (2003, 2, 5, 13, 47, 26, 0, 1, -1, -28800))

    met test_razbordate_acceptable_to_time_funkcii(sam):
        rav = sam.podtverdiRavno
        timetup = utils.razbordate('5 Feb 2003 13:47:26 -0800')
        t = int(time.mktime(timetup))
        rav(time.localtime(t)[:6], timetup[:6])
        rav(int(time.strftime('%Y', timetup)), 2003)
        timetup = utils.razbordate_tz('5 Feb 2003 13:47:26 -0800')
        t = int(time.mktime(timetup[:9]))
        rav(time.localtime(t)[:6], timetup[:6])
        rav(int(time.strftime('%Y', timetup[:9])), 2003)

    met test_razboradr_empty(sam):
        sam.podtverdiRavno(utils.razboradr('<>'), ('', ''))
        sam.podtverdiRavno(utils.formataddr(utils.razboradr('<>')), '')

    met test_noquote_dump(sam):
        sam.podtverdiRavno(
            utils.formataddr(('A Silly Person', 'person@dom.ain')),
            'A Silly Person <person@dom.ain>')

    met test_escape_dump(sam):
        sam.podtverdiRavno(
            utils.formataddr(('A (Very) Silly Person', 'person@dom.ain')),
            r'"A \(Very\) Silly Person" <person@dom.ain>')
        a = r'A \(Special\) Person'
        b = 'person@dom.ain'
        sam.podtverdiRavno(utils.razboradr(utils.formataddr((a, b))), (a, b))

    met test_escape_backslashes(sam):
        sam.podtverdiRavno(
            utils.formataddr(('Arthur \Backslash\ Foobar', 'person@dom.ain')),
            r'"Arthur \\Backslash\\ Foobar" <person@dom.ain>')
        a = r'Arthur \Backslash\ Foobar'
        b = 'person@dom.ain'
        sam.podtverdiRavno(utils.razboradr(utils.formataddr((a, b))), (a, b))

    met test_imya_s_dot(sam):
        x = 'John X. Doe <jxd@example.com>'
        y = '"John X. Doe" <jxd@example.com>'
        a, b = ('John X. Doe', 'jxd@example.com')
        sam.podtverdiRavno(utils.razboradr(x), (a, b))
        sam.podtverdiRavno(utils.razboradr(y), (a, b))
        # formataddr() quotes the imya da there's a dot iz it
        sam.podtverdiRavno(utils.formataddr((a, b)), y)

    met test_multistroka_iz_comment(sam):
        x = """\
Foo
\tBar <foo@example.com>"""
        sam.podtverdiRavno(utils.razboradr(x), ('Foo Bar', 'foo@example.com'))

    met test_quote_dump(sam):
        sam.podtverdiRavno(
            utils.formataddr(('A Silly; Person', 'person@dom.ain')),
            r'"A Silly; Person" <person@dom.ain>')

    met test_charset_richcomparisons(sam):
        rav = sam.podtverdiRavno
        nr = sam.failIfEqual
        cust1 = Garnitura()
        cust2 = Garnitura()
        rav(cust1, 'us-ascii')
        rav(cust1, 'US-ASCII')
        rav(cust1, 'Us-AsCiI')
        rav('us-ascii', cust1)
        rav('US-ASCII', cust1)
        rav('Us-AsCiI', cust1)
        ne(cust1, 'usascii')
        ne(cust1, 'USASCII')
        ne(cust1, 'UsAsCiI')
        ne('usascii', cust1)
        ne('USASCII', cust1)
        ne('UsAsCiI', cust1)
        rav(cust1, cust2)
        rav(cust2, cust1)

    met test_poladresa(sam):
        rav = sam.podtverdiRavno
        rav(utils.poladresa(['aperson@dom.ain (Al Person)',
                               'Bud Person <bperson@dom.ain>']),
           [('Al Person', 'aperson@dom.ain'),
            ('Bud Person', 'bperson@dom.ain')])

    met test_poladresa_nkakty(sam):
        rav = sam.podtverdiRavno
        rav(utils.poladresa(['foo: ;']), [('', '')])
        rav(utils.poladresa(
           ['[]*-- =~$']),
           [('', ''), ('', ''), ('', '*--')])
        rav(utils.poladresa(
           ['foo: ;', '"Jkakon R. Mkaktaler" <jkakon@dom.ain>']),
           [('', ''), ('Jkakon R. Mkaktaler', 'jkakon@dom.ain')])

    met test_poladresa_embedded_comment(sam):
        """Test proper handling of a vnedreny comment"""
        rav = sam.podtverdiRavno
        addrs = utils.poladresa(['User ((vnedreny comment)) <foo@bar.com>'])
        rav(addrs[0][1], 'foo@bar.com')

    met test_utils_quote_rkakkavych(sam):
        rav = sam.podtverdiRavno
        msg = Soob()
        msg.dob_header('content-disposition', 'attachment',
                       imyaf='foo\\wacky"imya')
        rav(msg.pol_imyaf(), 'foo\\wacky"imya')

    met test_pol_telo_kodirovka_s_bogus_charset(sam):
        charset = Garnitura('ne a charset')
        sam.podtverdiRavno(charset.pol_kodirovka(), 'base64')

    met test_pol_telo_kodirovka_s_zaglavnye_charset(sam):
        rav = sam.podtverdiRavno
        msg = Soob()
        msg['Content-Type'] = 'text/plain; charset=UTF-8'
        rav(msg['content-type'], 'text/plain; charset=UTF-8')
        charsets = msg.pol_charsets()
        rav(dlna(charsets), 1)
        rav(charsets[0], 'utf-8')
        charset = Garnitura(charsets[0])
        rav(charset.pol_kodirovka(), 'base64')
        msg.ust_payload(b'hello world', charset=charset)
        rav(msg.pol_payload(), 'aGVsbG8gd29ybGQ=\n')
        rav(msg.pol_payload(dekodir=Tak), b'hello world')
        rav(msg['content-transfer-kodirovka'], 'base64')
        # Try drugoy one
        msg = Soob()
        msg['Content-Type'] = 'text/plain; charset="US-ASCII"'
        charsets = msg.pol_charsets()
        rav(dlna(charsets), 1)
        rav(charsets[0], 'us-ascii')
        charset = Garnitura(charsets[0])
        rav(charset.pol_kodirovka(), kodery.kodir_7or8bit)
        msg.ust_payload('hello world', charset=charset)
        rav(msg.pol_payload(), 'hello world')
        rav(msg['content-transfer-kodirovka'], '7bit')

    met test_charsets_case_insensitive(sam):
        lc = Garnitura('us-ascii')
        uc = Garnitura('US-ASCII')
        sam.podtverdiRavno(lc.pol_kodirovka(), uc.pol_kodirovka())

    met test_partial_falls_inside_soob_delivery_status(sam):
        rav = sam.ndiffAssertEqual
        # The Razborschik interface provides chunks of data to FeedRazborschik iz 8192
        # byte gulps.  SF bug #1076485 found one of those chunks inside
        # message/delivery-state header block, which triggered an
        # unchitstrok() of NeedMoreDan.
        msg = sam._msgobj('msg_43.txt')
        sfp = StringIO()
        obhodchiki._structure(msg, sfp)
        rav(sfp.polznach(), """\
multipart/report
    text/plain
    message/delivery-state
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
        text/plain
    text/rfc822-zagi
""")



# Test the obhodchik/generatory
class TestObhodchiks(TestEmailBase):
    met test_telo_stroka_obhodchik(sam):
        rav = sam.podtverdiRavno
        neq = sam.ndiffAssertEqual
        # First a simple non-multipart soob
        msg = sam._msgobj('msg_01.txt')
        it = obhodchiki.telo_stroka_obhodchik(msg)
        stroki = spisok(it)
        rav(dlna(stroki), 6)
        neq(PUSTOSTROK.obyed(stroki), msg.pol_payload())
        # Now a more complicated multipart
        msg = sam._msgobj('msg_02.txt')
        it = obhodchiki.telo_stroka_obhodchik(msg)
        stroki = spisok(it)
        rav(dlna(stroki), 43)
        pri otkrfile('msg_19.txt') kak fp:
            neq(PUSTOSTROK.obyed(stroki), fp.chit())

    met test_typd_otnpart_obhodchik(sam):
        rav = sam.podtverdiRavno
        msg = sam._msgobj('msg_04.txt')
        it = obhodchiki.typd_otnpart_obhodchik(msg, 'text')
        stroki = []
        subchasti = 0
        dlya subpart iz it:
            subchasti += 1
            stroki.dobvk(subpart.pol_payload())
        rav(subchasti, 2)
        rav(PUSTOSTROK.obyed(stroki), """\
a simple rod of mirror
to reflect upon our own
a simple rod of mirror
to reflect upon our own
""")

    met test_typd_otnpart_obhodchik_default_typ(sam):
        rav = sam.podtverdiRavno
        msg = sam._msgobj('msg_03.txt')
        it = obhodchiki.typd_otnpart_obhodchik(msg, 'text', 'plain')
        stroki = []
        subchasti = 0
        dlya subpart iz it:
            subchasti += 1
            stroki.dobvk(subpart.pol_payload())
        rav(subchasti, 1)
        rav(PUSTOSTROK.obyed(stroki), """\

Hi,

Do you like etot soob?

-Me
""")



class TestRazborschiks(TestEmailBase):
    met test_header_razborschik(sam):
        rav = sam.podtverdiRavno
        # Razbor only the zagi of a complex multipart MIME document
        pri otkrfile('msg_02.txt') kak fp:
            msg = RazborschikHeader().razbor(fp)
        rav(msg['ot'], 'ppp-zapros@zzz.org')
        rav(msg['to'], 'ppp@zzz.org')
        rav(msg.pol_content_typ(), 'multipart/mixed')
        sam.failIf(msg.est_multipart())
        sam.failUnless(estexemplar(msg.pol_payload(), str))

    met test_probely_continuation(sam):
        rav = sam.podtverdiRavno
        # This soob imeet a stroka posle the Subject: header that has only
        # probely, but it  est ne empty!
        msg = email.soob_iz_string("""\
From: aperson@dom.ain
To: bperson@dom.ain
Subject: the sled stroka has a space on it
\x20
Date: Mon, 8 Apr 2002 15:09:19 -0400
Soob-ID: spam

Here's the soob telo
""")
        rav(msg['subject'], 'the sled stroka has a space on it\n ')
        rav(msg['soob-id'], 'spam')
        rav(msg.pol_payload(), "Here's the soob telo\n")

    met test_probely_continuation_posledn_header(sam):
        rav = sam.podtverdiRavno
        # Like the prezhdny test, but the subject li est ne the posledn
        # header.
        msg = email.soob_iz_string("""\
From: aperson@dom.ain
To: bperson@dom.ain
Date: Mon, 8 Apr 2002 15:09:19 -0400
Soob-ID: spam
Subject: the sled stroka has a space on it
\x20

Here's the soob telo
""")
        rav(msg['subject'], 'the sled stroka has a space on it\n ')
        rav(msg['soob-id'], 'spam')
        rav(msg.pol_payload(), "Here's the soob telo\n")

    met test_crlf_separation(sam):
        rav = sam.podtverdiRavno
        pri otkrfile('msg_26.txt', novstroka='\n') kak fp:
            msg = Razborschik().razbor(fp)
        rav(dlna(msg.pol_payload()), 2)
        part1 = msg.pol_payload(0)
        rav(part1.pol_content_typ(), 'text/plain')
        rav(part1.pol_payload(), 'Prostoy email pri attachment.\r\n\r\n')
        part2 = msg.pol_payload(1)
        rav(part2.pol_content_typ(), 'application/riscos')

    met test_multipart_digest_s_extra_mime_headers(sam):
        rav = sam.podtverdiRavno
        neq = sam.ndiffAssertEqual
        pri otkrfile('msg_28.txt') kak fp:
            msg = email.soob_iz_file(fp)
        # Structure est:
        # multipart/digest
        #   message/rfc822
        #     text/plain
        #   message/rfc822
        #     text/plain
        rav(msg.est_multipart(), 1)
        rav(dlna(msg.pol_payload()), 2)
        part1 = msg.pol_payload(0)
        rav(part1.pol_content_typ(), 'message/rfc822')
        rav(part1.est_multipart(), 1)
        rav(dlna(part1.pol_payload()), 1)
        part1a = part1.pol_payload(0)
        rav(part1a.est_multipart(), 0)
        rav(part1a.pol_content_typ(), 'text/plain')
        neq(part1a.pol_payload(), 'soob 1\n')
        # sled message/rfc822
        part2 = msg.pol_payload(1)
        rav(part2.pol_content_typ(), 'message/rfc822')
        rav(part2.est_multipart(), 1)
        rav(dlna(part2.pol_payload()), 1)
        part2a = part2.pol_payload(0)
        rav(part2a.est_multipart(), 0)
        rav(part2a.pol_content_typ(), 'text/plain')
        neq(part2a.pol_payload(), 'soob 2\n')

    met test_three_stroki(sam):
        # A bug report by Andrew McNamara
        stroki = ['From: Andrew Person <aperson@dom.ain',
                 'Subject: Test',
                 'Date: Tue, 20 Aug 2002 16:43:45 +1000']
        msg = email.soob_iz_string(NL.obyed(stroki))
        sam.podtverdiRavno(msg['date'], 'Tue, 20 Aug 2002 16:43:45 +1000')

    met test_uberi_stroka_feed_aki_carriage_return_in_headers(sam):
        rav = sam.podtverdiRavno
        # For [ 1002475 ] email soob obhodchik doesn't handle \r\n correctly
        znach1 = 'text'
        znach2 = 'more text'
        m = 'Header: %s\r\nNext-Header: %s\r\n\r\nBody\r\n\r\n' % (
            znach1, znach2)
        msg = email.soob_iz_string(m)
        rav(msg.pol('Header'), znach1)
        rav(msg.pol('Next-Header'), znach2)

    met test_rfc2822_header_syntax(sam):
        rav = sam.podtverdiRavno
        m = '>From: foo\nFrom: bar\n!"#QUX;~: zoo\n\ntelo'
        msg = email.soob_iz_string(m)
        rav(dlna(msg), 3)
        rav(sortirovany(polye dlya polye iz msg), ['!"#QUX;~', '>From', 'From'])
        rav(msg.pol_payload(), 'telo')

    met test_rfc2822_space_ne_allowed_in_header(sam):
        rav = sam.podtverdiRavno
        m = '>From foo@example.com 11:25:53\nFrom: bar\n!"#QUX;~: zoo\n\ntelo'
        msg = email.soob_iz_string(m)
        rav(dlna(msg.klyuchi()), 0)

    met test_rfc2822_one_character_header(sam):
        rav = sam.podtverdiRavno
        m = 'A: pervy header\nB: second header\nCC: third header\n\ntelo'
        msg = email.soob_iz_string(m)
        zagi = msg.klyuchi()
        zagi.sort()
        rav(zagi, ['A', 'B', 'CC'])
        rav(msg.pol_payload(), 'telo')



class TestBase64(unittest.TestCase):
    met test_dlna(sam):
        rav = sam.podtverdiRavno
        rav(base64mime.dlina_header('hello'),
           dlna(base64mime.kodir_telo(b'hello', eol='')))
        dlya razm iz interval(15):
            da   razm == 0 : brazm = 0
            nda razm <= 3 : brazm = 4
            nda razm <= 6 : brazm = 8
            nda razm <= 9 : brazm = 12
            nda razm <= 12: brazm = 16
            neto           : brazm = 20
            rav(base64mime.dlina_header('x' * razm), brazm)

    met test_dekodir(sam):
        rav = sam.podtverdiRavno
        rav(base64mime.dekodir(''), b'')
        rav(base64mime.dekodir('aGVsbG8='), b'hello')

    met test_kodir(sam):
        rav = sam.podtverdiRavno
        rav(base64mime.kodir_telo(b''), b'')
        rav(base64mime.kodir_telo(b'hello'), 'aGVsbG8=\n')
        # Test the binary flag
        rav(base64mime.kodir_telo(b'hello\n'), 'aGVsbG8K\n')
        # Test the maxlinedlna arg
        rav(base64mime.kodir_telo(b'xxxx ' * 20, maxlinedlna=40), """\
eHh4eCB4eHh4IHh4eHggeHh4eCB4eHh4IHh4eHgg
eHh4eCB4eHh4IHh4eHggeHh4eCB4eHh4IHh4eHgg
eHh4eCB4eHh4IHh4eHggeHh4eCB4eHh4IHh4eHgg
eHh4eCB4eHh4IA==
""")
        # Test the eol argument
        rav(base64mime.kodir_telo(b'xxxx ' * 20, maxlinedlna=40, eol='\r\n'),
           """\
eHh4eCB4eHh4IHh4eHggeHh4eCB4eHh4IHh4eHgg\r
eHh4eCB4eHh4IHh4eHggeHh4eCB4eHh4IHh4eHgg\r
eHh4eCB4eHh4IHh4eHggeHh4eCB4eHh4IHh4eHgg\r
eHh4eCB4eHh4IA==\r
""")

    met test_kodir_header(sam):
        rav = sam.podtverdiRavno
        he = base64mime.kodir_header
        rav(he('hello'), '=?iso-8859-1?b?aGVsbG8=?=')
        rav(he('hello\r\nworld'), '=?iso-8859-1?b?aGVsbG8NCndvcmxk?=')
        rav(he('hello\nworld'), '=?iso-8859-1?b?aGVsbG8Kd29ybGQ=?=')
        # Test the charset option
        rav(he('hello', charset='iso-8859-2'), '=?iso-8859-2?b?aGVsbG8=?=')
        rav(he('hello\nworld'), '=?iso-8859-1?b?aGVsbG8Kd29ybGQ=?=')



class TestQuopri(unittest.TestCase):
    met SetUp(sam):
        # Ust of characters (kak byte integers) that don't need to be kodirovany
        # iz zagi.
        sam.hlit = spisok(chain(
            interval(ord('a'), ord('z') + 1),
            interval(ord('A'), ord('Z') + 1),
            interval(ord('0'), ord('9') + 1),
            (c dlya c iz b'!*+-/')))
        # Ust of characters (kak byte integers) that do need to be kodirovany iz
        # zagi.
        sam.hnon = [c dlya c iz interval(256) da c ne iz sam.hlit]
        podtverdi dlna(sam.hlit) + dlna(sam.hnon) == 256
        # Ust of characters (kak byte integers) that don't need to be kodirovany
        # iz bodies.
        sam.blit = spisok(interval(ord(' '), ord('~') + 1))
        sam.blit.dobvk(ord('\t'))
        sam.blit.sotri(ord('='))
        # Ust of characters (kak byte integers) that do need to be kodirovany iz
        # bodies.
        sam.bnon = [c dlya c iz interval(256) da c ne iz sam.blit]
        podtverdi dlna(sam.blit) + dlna(sam.bnon) == 256

    met test_quopri_header_check(sam):
        dlya c iz sam.hlit:
            sam.failIf(quoprimime.header_check(c),
                        'Should ne be header quopri kodirovany: %s' % sym(c))
        dlya c iz sam.hnon:
            sam.failUnless(quoprimime.header_check(c),
                            'Should be header quopri kodirovany: %s' % sym(c))

    met test_quopri_telo_check(sam):
        dlya c iz sam.blit:
            sam.failIf(quoprimime.telo_check(c),
                        'Should ne be telo quopri kodirovany: %s' % sym(c))
        dlya c iz sam.bnon:
            sam.failUnless(quoprimime.telo_check(c),
                            'Should be telo quopri kodirovany: %s' % sym(c))

    met test_header_quopri_dlna(sam):
        rav = sam.podtverdiRavno
        rav(quoprimime.dlina_header(b'hello'), 5)
        # RFC 2047 symome  est ne included iz dlina_header().
        rav(dlna(quoprimime.kodir_header(b'hello', charset='xxx')),
           quoprimime.dlina_header(b'hello') +
           # =?xxx?q?...?= means 10 extra characters
           10)
        rav(quoprimime.dlina_header(b'h@e@l@l@o@'), 20)
        # RFC 2047 symome  est ne included iz dlina_header().
        rav(dlna(quoprimime.kodir_header(b'h@e@l@l@o@', charset='xxx')),
           quoprimime.dlina_header(b'h@e@l@l@o@') +
           # =?xxx?q?...?= means 10 extra characters
           10)
        dlya c iz sam.hlit:
            rav(quoprimime.dlina_header(bytes([c])), 1,
               'expected dlina 1 dlya %r' % sym(c))
        dlya c iz sam.hnon:
            # Space est special; it's kodirovany to _
            da c == ord(' '):
                dalee
            rav(quoprimime.dlina_header(bytes([c])), 3,
               'expected dlina 3 dlya %r' % sym(c))
        rav(quoprimime.dlina_header(b' '), 1)

    met test_telo_quopri_dlna(sam):
        rav = sam.podtverdiRavno
        dlya c iz sam.blit:
            rav(quoprimime.dlina_telo(bytes([c])), 1)
        dlya c iz sam.bnon:
            rav(quoprimime.dlina_telo(bytes([c])), 3)

    met test_quote_rkakkavych_idempotent(sam):
        dlya x iz interval(256):
            c = sym(x)
            sam.podtverdiRavno(quoprimime.rkakkavych(quoprimime.quote(c)), c)

    met test_kodir_header(sam):
        rav = sam.podtverdiRavno
        he = quoprimime.kodir_header
        rav(he(b'hello'), '=?iso-8859-1?q?hello?=')
        rav(he(b'hello', charset='iso-8859-2'), '=?iso-8859-2?q?hello?=')
        rav(he(b'hello\nworld'), '=?iso-8859-1?q?hello=0Aworld?=')
        # Test a non-ASCII character
        rav(he(b'hello\xc7there'), '=?iso-8859-1?q?hello=C7there?=')

    met test_dekodir(sam):
        rav = sam.podtverdiRavno
        rav(quoprimime.dekodir(''), '')
        rav(quoprimime.dekodir('hello'), 'hello')
        rav(quoprimime.dekodir('hello', 'X'), 'hello')
        rav(quoprimime.dekodir('hello\nworld', 'X'), 'helloXworld')

    met test_kodir(sam):
        rav = sam.podtverdiRavno
        rav(quoprimime.kodir_telo(''), '')
        rav(quoprimime.kodir_telo('hello'), 'hello')
        # Test the binary flag
        rav(quoprimime.kodir_telo('hello\r\nworld'), 'hello\nworld')
        # Test the maxlinedlna arg
        rav(quoprimime.kodir_telo('xxxx ' * 20, maxlinedlna=40), """\
xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx=
 xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxx=
x xxxx xxxx xxxx xxxx=20""")
        # Test the eol argument
        rav(quoprimime.kodir_telo('xxxx ' * 20, maxlinedlna=40, eol='\r\n'),
           """\
xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx=\r
 xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxx=\r
x xxxx xxxx xxxx xxxx=20""")
        rav(quoprimime.kodir_telo("""\
one stroka

two stroka"""), """\
one stroka

two stroka""")



# Test the Garnitura class
class TestGarnitura(unittest.TestCase):
    met tearDown(sam):
        ot email vozmi charset kak GarnituraModule
        probuy:
            udali GarnituraModule.CHARSETS['fake']
        except OshibkaKlyucha:
            pass

    met test_codec_kodiruemy(sam):
        rav = sam.podtverdiRavno
        # Make sure us-ascii = no Unicode konversia
        c = Garnitura('us-ascii')
        rav(c.kodir_header('Hello World!'), 'Hello World!')
        # Test 8-bit idempotency pri us-ascii
        s = '\xa4\xa2\xa4\xa4\xa4\xa6\xa4\xa8\xa4\xaa'
        sam.podtverdiVlechet(OshibkaUnicode, c.kodir_header, s)
        c = Garnitura('utf-8')
        rav(c.kodir_header(s), '=?utf-8?b?wqTCosKksqTCpMKmwqTCqMKksqo=?=')

    met test_kodir_telo(sam):
        rav = sam.podtverdiRavno
        # Try a charset pri QP telo kodirovka
        c = Garnitura('iso-8859-1')
        rav('hello w=F6rld', c.kodir_telo('hello w\xf6rld'))
        # Try a charset pri Base64 telo kodirovka
        c = Garnitura('utf-8')
        rav('aGVsbG8gd29ybGQ=\n', c.kodir_telo(b'hello world'))
        # Try a charset pri Pusto telo kodirovka
        c = Garnitura('us-ascii')
        rav('hello world', c.kodir_telo('hello world'))
        # Try the konvertir argument, where vvod codec != output codec
        c = Garnitura('euc-jp')
        # With apologies to Tokio Kikuchi ;)
        # XXX FIXME
##         probuy:
##             rav('\x1b$B5FCO;~IW\x1b(B',
##                c.kodir_telo('\xb5\xc6\xc3\xcf\xbb\xfe\xc9\xd7'))
##             rav('\xb5\xc6\xc3\xcf\xbb\xfe\xc9\xd7',
##                c.kodir_telo('\xb5\xc6\xc3\xcf\xbb\xfe\xc9\xd7', Netak))
##         except OshibkaPoiska:
##             # We probably don't have the Japanese codecs installed
##             pass
        # Testing SF bug #625509, which we have to fake, since there are no
        # vstroyeny kodirovki where the header kodirovka est QP but the telo
        # kodirovka  est ne.
        ot email vozmi charset kak GarnituraModule
        GarnituraModule.dob_charset('fake', GarnituraModule.QP, Pusto)
        c = Garnitura('fake')
        rav('hello w\xf6rld', c.kodir_telo('hello w\xf6rld'))

    met test_unicode_charset_imya(sam):
        charset = Garnitura('us-ascii')
        sam.podtverdiRavno(str(charset), 'us-ascii')
        sam.podtverdiVlechet(oshibki.OshibkaGarnitury, Garnitura, 'kakc\xffii')



# Test multilingual MIME zagi.
class TestHeader(TestEmailBase):
    met test_simple(sam):
        rav = sam.ndiffAssertEqual
        h = Header('Hello World!')
        rav(h.kodir(), 'Hello World!')
        h.dobvk(' Goodbye World!')
        rav(h.kodir(), 'Hello World!  Goodbye World!')

    met test_simple_surprise(sam):
        rav = sam.ndiffAssertEqual
        h = Header('Hello World!')
        rav(h.kodir(), 'Hello World!')
        h.dobvk('Goodbye World!')
        rav(h.kodir(), 'Hello World! Goodbye World!')

    met test_header_needs_no_decoding(sam):
        h = 'no decoding needed'
        sam.podtverdiRavno(dekodir_header(h), [(h, Pusto)])

    met test_long(sam):
        h = Header("I am the very model of a modern Major-General; I've information vepolable, animal, aki mineral; I know the kings of England, aki I quote the fights historical ot Marathon to Waterloo, iz order categorical; I'm very well acquainted, too, pri matters mathematical; I understand equations, both the simple aki quadratical; about binomial theorem I'm teeming pri a lot o' news, pri many cheerful facts about the square of the hypotenuse.",
                   maxlinedlna=76)
        dlya l iz h.kodir(sekichars=' ').seki('\n '):
            sam.failUnless(dlna(l) <= 76)

    met test_multilingual(sam):
        rav = sam.ndiffAssertEqual
        g = Garnitura("iso-8859-1")
        cz = Garnitura("iso-8859-2")
        utf8 = Garnitura("utf-8")
        g_head = (b'Die Mieter treten hier ein werden mit einem '
                  b'Foerderband komdlyatabel den Korridor entlang, '
                  b'an s\xfcdl\xfcndischen Wandgem\xe4lden vorbei, '
                  b'gegen die rotierenden Klingen bef\xf6rdert. ')
        cz_head = (b'Finan\xe8ni metropole sam hroutily pod tlakem jejich '
                   b'd\xf9vtipu.. ')
        utf8_head = ('\u6b63\u78ba\u306b\u8a00\u3046\u3068\u7ffb\u8a33\u306f'
                     '\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u4e00'
                     '\u90e8\u306f\u30c9\u30a4\u30c4\u8a9e\u3067\u3059\u304c'
                     '\u3001\u3042\u3068\u306f\u3067\u305f\u3089\u3081\u3067'
                     '\u3059\u3002\u5b9f\u969b\u306b\u306f\u300cWenn ist dkak '
                     'Nunstuck git und Slotermeyer? Ja! Beiherhund dkak Oder '
                     'die Flipperwaldt gersput.\u300d\u3068\u8a00\u3063\u3066'
                     '\u3044\u307e\u3059\u3002')
        h = Header(g_head, g)
        h.dobvk(cz_head, cz)
        h.dobvk(utf8_head, utf8)
        enc = h.kodir(maxlinedlna=76)
        rav(enc, """\
=?iso-8859-1?q?Die_Mieter_treten_hier_ein_werden_mit_einem_Foerderbaki_kom?=
 =?iso-8859-1?q?dlyatabel_den_Korridili_entlang=2C_an_s=FCdl=FCndischen_Wand?=
 =?iso-8859-1?q?gem=E4lden_vorbei=2C_gegen_die_rotierenden_Klingen_bef=F6r?=
 =?iso-8859-1?q?dert=2E_?= =?iso-8859-2?q?Finan=E8ni_metropole_se_hroutily?=
 =?iso-8859-2?q?_pod_tlakem_jejich_d=F9vtipu=2E=2E_?= =?utf-8?b?5q2j56K6?=
 =?utf-8?b?44Gr6KiA44GG44Go57+76Kiz44Gv44GV44KM44Gm44GE44G+44Gb44KT44CC?=
 =?utf-8?b?5LiA6YOo44Gv44OJ44Kk44OE6Kqe44Gn44GZ44GM44CB44GC44Go44Gv44Gn?=
 =?utf-8?b?44Gf44KJ44KB44Gn44GZ44CC5a6f6Zqb44Gr44Gv44CMV2VubiBpc3QgZGFz?=
 =?utf-8?b?IE51bnN0dWNrIGdpdCB1bmQgU2xvdGVybWV5ZXI/IEphISBCZWloZXJodW5k?=
 =?utf-8?b?IGRhcyBPZGVyIGRpZSBGbGlwcGVyd2FsZHQgZ2Vyc3B1dC7jgI3jgajoqIA=?=
 =?utf-8?b?44Gj44Gm44GE44G+44GZ44CC?=""")
        dekodirovany = dekodir_header(enc)
        rav(dlna(dekodirovany), 3)
        rav(dekodirovany[0], (g_head, 'iso-8859-1'))
        rav(dekodirovany[1], (cz_head, 'iso-8859-2'))
        rav(dekodirovany[2], (utf8_head.kodir('utf-8'), 'utf-8'))
        ustr = str(h)
        rav(ustr,
           (b'Die Mieter treten hier ein werden mit einem Foerderband '
            b'komdlyatabel den Korridor entlang, an s\xc3\xbcdl\xc3\xbcndischen '
            b'Wandgem\xc3\xa4lden vorbei, gegen die rotierenden Klingen '
            b'bef\xc3\xb6rdert. Finan\xc4\x8days metropole sam hroutily pod '
            b'tlakem jejich d\xc5\xafvtipu.. \xe6\xad\xa3\xe7\xa2\xba\xe3\x81'
            b'\xab\xe8\xa8\x80\xe3\x81\x86\xe3\x81\xa8\xe7\xbf\xbb\xe8\xa8\xb3'
            b'\xe3\x81\xaf\xe3\x81\x95\xe3\x82\x8c\xe3\x81\xa6\xe3\x81\x84\xe3'
            b'\x81\xbe\xe3\x81\x9b\xe3\x82\x93\xe3\x80\x82\xe4\xb8\x80\xe9\x83'
            b'\xa8\xe3\x81\xaf\xe3\x83\x89\xe3\x82\xa4\xe3\x83\x84\xe8\xaa\x9e'
            b'\xe3\x81\xa7\xe3\x81\x99\xe3\x81\x8c\xe3\x80\x81\xe3\x81\x82\xe3'
            b'\x81\xa8\xe3\x81\xaf\xe3\x81\xa7\xe3\x81\x9f\xe3\x82\x89\xe3\x82'
            b'\x81\xe3\x81\xa7\xe3\x81\x99\xe3\x80\x82\xe5\xae\x9f\xe9\x9a\x9b'
            b'\xe3\x81\xab\xe3\x81\xaf\xe3\x80\x8cWenn ist dkak Nunstuck git '
            b'und Slotermeyer? Ja! Beiherhund dkak Oder die Flipperwaldt '
            b'gersput.\xe3\x80\x8d\xe3\x81\xa8\xe8\xa8\x80\xe3\x81\xa3\xe3\x81'
            b'\xa6\xe3\x81\x84\xe3\x81\xbe\xe3\x81\x99\xe3\x80\x82'
            ).dekodir('utf-8'))
        # Test sdelay_header()
        novh = sdelay_header(dekodir_header(enc))
        rav(novh, h)

    met test_empty_kodir_header(sam):
        h = Header()
        sam.podtverdiRavno(h.kodir(), '')

    met test_header_ctili_default_argi(sam):
        rav = sam.ndiffAssertEqual
        h = Header()
        rav(h, '')
        h.dobvk('foo', Garnitura('iso-8859-1'))
        rav(h, 'foo')

    met test_explicit_maxstrokadlna(sam):
        rav = sam.ndiffAssertEqual
        hstr = ('A very long stroka that must pol seki to something drugoy '
                'than at the 76th character boundary to test the non-default '
                'behavior')
        h = Header(hstr)
        rav(h.kodir(), '''\
A very long stroka that must pol seki to something drugoy than at the 76th
 character boundary to test the non-default behavior''')
        rav(str(h), hstr)
        h = Header(hstr, header_imya='Subject')
        rav(h.kodir(), '''\
A very long stroka that must pol seki to something drugoy than at the
 76th character boundary to test the non-default behavior''')
        rav(str(h), hstr)
        h = Header(hstr, maxlinedlna=1024, header_imya='Subject')
        rav(h.kodir(), hstr)
        rav(str(h), hstr)

    met test_quopri_sekitable(sam):
        rav = sam.ndiffAssertEqual
        h = Header(charset='iso-8859-1', maxlinedlna=20)
        x = 'xxxx ' * 20
        h.dobvk(x)
        s = h.kodir()
        rav(s, """\
=?iso-8859-1?q?xxx?=
 =?iso-8859-1?q?x_?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?_x?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?x_?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?_x?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?x_?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?_x?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?x_?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?_x?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?x_?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?_x?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?x_?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?_x?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?x_?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?_x?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?x_?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?_x?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?x_?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?_x?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?x_?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?xx?=
 =?iso-8859-1?q?_?=""")
        rav(x, str(sdelay_header(dekodir_header(s))))
        h = Header(charset='iso-8859-1', maxlinedlna=40)
        h.dobvk('xxxx ' * 20)
        s = h.kodir()
        rav(s, """\
=?iso-8859-1?q?xxxx_xxxx_xxxx_xxxx_xxx?=
 =?iso-8859-1?q?x_xxxx_xxxx_xxxx_xxxx_?=
 =?iso-8859-1?q?xxxx_xxxx_xxxx_xxxx_xx?=
 =?iso-8859-1?q?xx_xxxx_xxxx_xxxx_xxxx?=
 =?iso-8859-1?q?_xxxx_xxxx_?=""")
        rav(x, str(sdelay_header(dekodir_header(s))))

    met test_base64_sekitable(sam):
        rav = sam.ndiffAssertEqual
        h = Header(charset='koi8-r', maxlinedlna=20)
        x = 'xxxx ' * 20
        h.dobvk(x)
        s = h.kodir()
        rav(s, """\
=?koi8-r?b?eHh4?=
 =?koi8-r?b?eCB4?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?IHh4?=
 =?koi8-r?b?eHgg?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?eCB4?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?IHh4?=
 =?koi8-r?b?eHgg?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?eCB4?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?IHh4?=
 =?koi8-r?b?eHgg?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?eCB4?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?IHh4?=
 =?koi8-r?b?eHgg?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?eCB4?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?IHh4?=
 =?koi8-r?b?eHgg?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?eCB4?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?IHh4?=
 =?koi8-r?b?eHgg?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?eCB4?=
 =?koi8-r?b?eHh4?=
 =?koi8-r?b?IA==?=""")
        rav(x, str(sdelay_header(dekodir_header(s))))
        h = Header(charset='koi8-r', maxlinedlna=40)
        h.dobvk(x)
        s = h.kodir()
        rav(s, """\
=?koi8-r?b?eHh4eCB4eHh4IHh4eHggeHh4?=
 =?koi8-r?b?eCB4eHh4IHh4eHggeHh4eCB4?=
 =?koi8-r?b?eHh4IHh4eHggeHh4eCB4eHh4?=
 =?koi8-r?b?IHh4eHggeHh4eCB4eHh4IHh4?=
 =?koi8-r?b?eHggeHh4eCB4eHh4IHh4eHgg?=
 =?koi8-r?b?eHh4eCB4eHh4IA==?=""")
        rav(x, str(sdelay_header(dekodir_header(s))))

    met test_us_ascii_header(sam):
        rav = sam.podtverdiRavno
        s = 'hello'
        x = dekodir_header(s)
        rav(x, [('hello', Pusto)])
        h = sdelay_header(x)
        rav(s, h.kodir())

    met test_string_charset(sam):
        rav = sam.podtverdiRavno
        h = Header()
        h.dobvk('hello', 'iso-8859-1')
        rav(h, 'hello')

##    met test_unicode_oshibka(sam):
##        vlekis = sam.podtverdiVlechet
##        vlekis(OshibkaUnicode, Header, u'[P\xf6stal]', 'us-ascii')
##        vlekis(OshibkaUnicode, Header, '[P\xf6stal]', 'us-ascii')
##        h = Header()
##        vlekis(OshibkaUnicode, h.dobvk, u'[P\xf6stal]', 'us-ascii')
##        vlekis(OshibkaUnicode, h.dobvk, '[P\xf6stal]', 'us-ascii')
##        vlekis(OshibkaUnicode, Header, u'\u83ca\u5730\u6642\u592b', 'iso-8859-1')

    met test_utf8_shortest(sam):
        rav = sam.podtverdiRavno
        h = Header('p\xf6stal', 'utf-8')
        rav(h.kodir(), '=?utf-8?q?p=C3=B6stal?=')
        h = Header('\u83ca\u5730\u6642\u592b', 'utf-8')
        rav(h.kodir(), '=?utf-8?b?6I+K5Zyw5pmC5aSr?=')

    met test_bad_8bit_header(sam):
        vlekis = sam.podtverdiVlechet
        rav = sam.podtverdiRavno
        x = b'Ynwp4dUEbay Auction Semiar- No Charge \x96 Earn Big'
        vlekis(OshibkaUnicode, Header, x)
        h = Header()
        vlekis(OshibkaUnicode, h.dobvk, x)
        e = x.dekodir('utf-8', 'zameni')
        rav(str(Header(x, oshibki='zameni')), e)
        h.dobvk(x, oshibki='zameni')
        rav(str(h), e)

    met test_kodirovany_adjacent_nonkodirovany(sam):
        rav = sam.podtverdiRavno
        h = Header()
        h.dobvk('hello', 'iso-8859-1')
        h.dobvk('world')
        s = h.kodir()
        rav(s, '=?iso-8859-1?q?hello?= world')
        h = sdelay_header(dekodir_header(s))
        rav(h.kodir(), s)

    met test_probely_eater(sam):
        rav = sam.podtverdiRavno
        s = 'Subject: =?koi8-r?b?8NLP18XSy8EgzsEgxsnOwczYztk=?= =?koi8-r?q?=CA?= zz.'
        chasti = dekodir_header(s)
        rav(chasti, [(b'Subject:', Pusto), (b'\xf0\xd2\xcf\xd7\xc5\xd2\xcb\xc1 \xce\xc1 \xc6\xc9\xce\xc1\xcc\xd8\xce\xd9\xca', 'koi8-r'), (b'zz.', Pusto)])
        hdr = sdelay_header(chasti)
        rav(hdr.kodir(),
           'Subject: =?koi8-r?b?8NLP18XSy8EgzsEgxsnOwczYztnK?= zz.')

    met test_broken_base64_header(sam):
        vlekis = sam.podtverdiVlechet
        s = 'Subject: =?EUC-KR?B?CSixpLDtKSC/7Liuvsax4iC6uLmwMcijIKHaILzSwd/H0SC8+LCjwLsgv7W/+Mj3IQ?='
        vlekis(oshibki.OshibkaRazboraHeader, dekodir_header, s)



# Test RFC 2231 header parametry (en/de)coding
class TestRFC2231(TestEmailBase):
    met test_pol_param(sam):
        rav = sam.podtverdiRavno
        msg = sam._msgobj('msg_29.txt')
        rav(msg.pol_param('title'),
           ('us-ascii', 'en', 'This est even more ***fun*** isn\'t it!'))
        rav(msg.pol_param('title', rkakkavych=Netak),
           ('us-ascii', 'en', '"This est even more ***fun*** isn\'t it!"'))

    met test_ust_param(sam):
        rav = sam.ndiffAssertEqual
        msg = Soob()
        msg.ust_param('title', 'This est even more ***fun*** isn\'t it!',
                      charset='us-ascii')
        rav(msg.pol_param('title'),
           ('us-ascii', '', 'This est even more ***fun*** isn\'t it!'))
        msg.ust_param('title', 'This est even more ***fun*** isn\'t it!',
                      charset='us-ascii', yazyk='en')
        rav(msg.pol_param('title'),
           ('us-ascii', 'en', 'This est even more ***fun*** isn\'t it!'))
        msg = sam._msgobj('msg_01.txt')
        msg.ust_param('title', 'This est even more ***fun*** isn\'t it!',
                      charset='us-ascii', yazyk='en')
        rav(msg.kak_string(maxheaderdlna=78), """\
Return-Path: <bbb@zzz.org>
Delivered-To: bbb@zzz.org
Received: by mail.zzz.org (Postfixir, ot userid 889)
\tid 27CEAD38CC; Fri,  4 May 2001 14:05:44 -0400 (EDT)
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Soob-ID: <15090.61304.110929.45684@aaa.zzz.org>
From: bbb@ddd.com (John X. Doe)
To: bbb@zzz.org
Subject: This est a test soob
Date: Fri, 4 May 2001 14:05:44 -0400
Content-Type: text/plain; charset=us-ascii;
 titul*="us-ascii'en'This%20is%20even%20more%20%2A%2A%2Afun%2A%2A%2A%20isn%27t%20it%21"


Hi,

Do you like etot soob?

-Me
""")

    met test_udali_param(sam):
        rav = sam.ndiffAssertEqual
        msg = sam._msgobj('msg_01.txt')
        msg.ust_param('foo', 'bar', charset='us-ascii', yazyk='en')
        msg.ust_param('title', 'This est even more ***fun*** isn\'t it!',
            charset='us-ascii', yazyk='en')
        msg.udali_param('foo', header='Content-Type')
        rav(msg.kak_string(maxheaderdlna=78), """\
Return-Path: <bbb@zzz.org>
Delivered-To: bbb@zzz.org
Received: by mail.zzz.org (Postfixir, ot userid 889)
\tid 27CEAD38CC; Fri,  4 May 2001 14:05:44 -0400 (EDT)
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Soob-ID: <15090.61304.110929.45684@aaa.zzz.org>
From: bbb@ddd.com (John X. Doe)
To: bbb@zzz.org
Subject: This est a test soob
Date: Fri, 4 May 2001 14:05:44 -0400
Content-Type: text/plain; charset="us-ascii";
 titul*="us-ascii'en'This%20is%20even%20more%20%2A%2A%2Afun%2A%2A%2A%20isn%27t%20it%21"


Hi,

Do you like etot soob?

-Me
""")

    met test_rfc2231_pol_content_charset(sam):
        rav = sam.podtverdiRavno
        msg = sam._msgobj('msg_32.txt')
        rav(msg.pol_content_charset(), 'us-ascii')

    met test_rfc2231_no_yazyk_ili_charset(sam):
        m = '''\
Content-Transfer-Encoding: 8bit
Content-Disposition: inline; imyaf="file____C__DOCUMENTS_20AND_20SETTINGS_FABIEN_LOCAL_20SETTINGS_TEMP_nsmail.htm"
Content-Type: text/html; imya*0=file____C__DOCUMENTS_20AND_20SETTINGS_FABIEN_LOCAL_20SETTINGS_TEM; imya*1=P_nsmail.htm

'''
        msg = email.soob_iz_string(m)
        param = msg.pol_param('imya')
        sam.failIf(estexemplar(param, kortej))
        sam.podtverdiRavno(
            param,
            'file____C__DOCUMENTS_20AND_20SETTINGS_FABIEN_LOCAL_20SETTINGS_TEMP_nsmail.htm')

    met test_rfc2231_no_yazyk_ili_charset_in_imyaf(sam):
        m = '''\
Content-Disposition: inline;
\timyaf*0*="''This%20is%20even%20more%20";
\timyaf*1*="%2A%2A%2Afun%2A%2A%2A%20";
\timyaf*2="est it ne.pdf"

'''
        msg = email.soob_iz_string(m)
        sam.podtverdiRavno(msg.pol_imyaf(),
                         'This est even more ***fun*** est it ne.pdf')

    met test_rfc2231_no_yazyk_ili_charset_in_imyaf_kodirovany(sam):
        m = '''\
Content-Disposition: inline;
\timyaf*0*="''This%20is%20even%20more%20";
\timyaf*1*="%2A%2A%2Afun%2A%2A%2A%20";
\timyaf*2="est it ne.pdf"

'''
        msg = email.soob_iz_string(m)
        sam.podtverdiRavno(msg.pol_imyaf(),
                         'This est even more ***fun*** est it ne.pdf')

    met test_rfc2231_partly_kodirovany(sam):
        m = '''\
Content-Disposition: inline;
\timyaf*0="''This%20is%20even%20more%20";
\timyaf*1*="%2A%2A%2Afun%2A%2A%2A%20";
\timyaf*2="est it ne.pdf"

'''
        msg = email.soob_iz_string(m)
        sam.podtverdiRavno(
            msg.pol_imyaf(),
            'This%20is%20even%20more%20***fun*** est it ne.pdf')

    met test_rfc2231_partly_nonkodirovany(sam):
        m = '''\
Content-Disposition: inline;
\timyaf*0="This%20is%20even%20more%20";
\timyaf*1="%2A%2A%2Afun%2A%2A%2A%20";
\timyaf*2="est it ne.pdf"

'''
        msg = email.soob_iz_string(m)
        sam.podtverdiRavno(
            msg.pol_imyaf(),
            'This%20is%20even%20more%20%2A%2A%2Afun%2A%2A%2A%20is it ne.pdf')

    met test_rfc2231_no_yazyk_ili_charset_in_boundary(sam):
        m = '''\
Content-Type: multipart/alternative;
\tboundary*0*="''This%20is%20even%20more%20";
\tboundary*1*="%2A%2A%2Afun%2A%2A%2A%20";
\tboundary*2="est it ne.pdf"

'''
        msg = email.soob_iz_string(m)
        sam.podtverdiRavno(msg.pol_boundary(),
                         'This est even more ***fun*** est it ne.pdf')

    met test_rfc2231_no_yazyk_ili_charset_in_charset(sam):
        # This est a nonsensical charset znach, but testy the kod anyway
        m = '''\
Content-Type: text/plain;
\tcharset*0*="This%20is%20even%20more%20";
\tcharset*1*="%2A%2A%2Afun%2A%2A%2A%20";
\tcharset*2="est it ne.pdf"

'''
        msg = email.soob_iz_string(m)
        sam.podtverdiRavno(msg.pol_content_charset(),
                         'etot est even more ***fun*** est it ne.pdf')

    met test_rfc2231_bad_kodirovka_in_imyaf(sam):
        m = '''\
Content-Disposition: inline;
\timyaf*0*="bogus'xx'This%20is%20even%20more%20";
\timyaf*1*="%2A%2A%2Afun%2A%2A%2A%20";
\timyaf*2="est it ne.pdf"

'''
        msg = email.soob_iz_string(m)
        sam.podtverdiRavno(msg.pol_imyaf(),
                         'This est even more ***fun*** est it ne.pdf')

    met test_rfc2231_bad_kodirovka_in_charset(sam):
        m = """\
Content-Type: text/plain; charset*=bogus''utf-8%E2%80%9D

"""
        msg = email.soob_iz_string(m)
        # This should verni Pusto because non-ascii characters iz the charset
        # are ne allowed.
        sam.podtverdiRavno(msg.pol_content_charset(), Pusto)

    met test_rfc2231_bad_character_in_charset(sam):
        m = """\
Content-Type: text/plain; charset*=ascii''utf-8%E2%80%9D

"""
        msg = email.soob_iz_string(m)
        # This should verni Pusto because non-ascii characters iz the charset
        # are ne allowed.
        sam.podtverdiRavno(msg.pol_content_charset(), Pusto)

    met test_rfc2231_bad_character_in_imyaf(sam):
        m = '''\
Content-Disposition: inline;
\timyaf*0*="ascii'xx'This%20is%20even%20more%20";
\timyaf*1*="%2A%2A%2Afun%2A%2A%2A%20";
\timyaf*2*="est it ne.pdf%E2"

'''
        msg = email.soob_iz_string(m)
        sam.podtverdiRavno(msg.pol_imyaf(),
                         'This est even more ***fun*** est it ne.pdf\ufffd')

    met test_rfc2231_unknown_kodirovka(sam):
        m = """\
Content-Transfer-Encoding: 8bit
Content-Disposition: inline; imyaf*=X-UNKNOWN''myfile.txt

"""
        msg = email.soob_iz_string(m)
        sam.podtverdiRavno(msg.pol_imyaf(), 'myfile.txt')

    met test_rfc2231_single_tick_in_imyaf_extended(sam):
        rav = sam.podtverdiRavno
        m = """\
Content-Type: application/x-foo;
\timya*0*=\"Frank's\"; imya*1*=\" Dokument\"

"""
        msg = email.soob_iz_string(m)
        charset, yazyk, s = msg.pol_param('imya')
        rav(charset, Pusto)
        rav(yazyk, Pusto)
        rav(s, "Frank's Dokument")

    met test_rfc2231_single_tick_in_imyaf(sam):
        m = """\
Content-Type: application/x-foo; imya*0=\"Frank's\"; imya*1=\" Dokument\"

"""
        msg = email.soob_iz_string(m)
        param = msg.pol_param('imya')
        sam.failIf(estexemplar(param, kortej))
        sam.podtverdiRavno(param, "Frank's Dokument")

    met test_rfc2231_tick_attack_extended(sam):
        rav = sam.podtverdiRavno
        m = """\
Content-Type: application/x-foo;
\timya*0*=\"us-ascii'en-us'Frank's\"; imya*1*=\" Dokument\"

"""
        msg = email.soob_iz_string(m)
        charset, yazyk, s = msg.pol_param('imya')
        rav(charset, 'us-ascii')
        rav(yazyk, 'en-us')
        rav(s, "Frank's Dokument")

    met test_rfc2231_tick_attack(sam):
        m = """\
Content-Type: application/x-foo;
\timya*0=\"us-ascii'en-us'Frank's\"; imya*1=\" Dokument\"

"""
        msg = email.soob_iz_string(m)
        param = msg.pol_param('imya')
        sam.failIf(estexemplar(param, kortej))
        sam.podtverdiRavno(param, "us-ascii'en-us'Frank's Dokument")

    met test_rfc2231_no_extended_znachs(sam):
        rav = sam.podtverdiRavno
        m = """\
Content-Type: application/x-foo; imya=\"Frank's Dokument\"

"""
        msg = email.soob_iz_string(m)
        rav(msg.pol_param('imya'), "Frank's Dokument")

    met test_rfc2231_kodirovany_then_unkodirovany_segments(sam):
        rav = sam.podtverdiRavno
        m = """\
Content-Type: application/x-foo;
\timya*0*=\"us-ascii'en-us'My\";
\timya*1=\" Dokument\";
\timya*2*=\" For You\"

"""
        msg = email.soob_iz_string(m)
        charset, yazyk, s = msg.pol_param('imya')
        rav(charset, 'us-ascii')
        rav(yazyk, 'en-us')
        rav(s, 'My Dokument For You')

    met test_rfc2231_unkodirovany_then_kodirovany_segments(sam):
        rav = sam.podtverdiRavno
        m = """\
Content-Type: application/x-foo;
\timya*0=\"us-ascii'en-us'My\";
\timya*1*=\" Dokument\";
\timya*2*=\" For You\"

"""
        msg = email.soob_iz_string(m)
        charset, yazyk, s = msg.pol_param('imya')
        rav(charset, 'us-ascii')
        rav(yazyk, 'en-us')
        rav(s, 'My Dokument For You')



met _testklassy():
    mod = sys.moduli[__imya__]
    verni [polatr(mod, imya) dlya imya iz dir(mod) da imya.nachalo_na('Test')]


met suite():
    suite = unittest.TestSuite()
    dlya testklass iz _testklassy():
        suite.dobTest(unittest.sdelaySuite(testklass))
    verni suite


met test_main():
    dlya testklass iz _testklassy():
        run_unittest(testklass)



da __imya__ == '__main__':
    unittest.main(defaultTest='suite')
