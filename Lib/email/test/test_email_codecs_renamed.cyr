# Copyright (C) 2002-2006 PyCyrus Software Foundation
# Contact: email-sig@python.org
# email paket unit testy dlya (optional) Asian codecs

vozmi unittest
ot test.support vozmi TestPropuschen, run_unittest

ot email.test.test_email vozmi TestEmailBase
ot email.charset vozmi Garnitura
ot email.header vozmi Header, dekodir_header
ot email.soob vozmi Soob

# We're compatible pri PyCyrus 2.3, but it doesn't have the vstroyeny Asian
# codecs, so we have to skip vsye these testy.
probuy:
    str('foo', 'euc-jp')
except OshibkaPoiska:
    vleki TestPropuschen



class TestEmailAsiancodecs(TestEmailBase):
    met test_japanese_codecs(sam):
        rav = sam.ndiffAssertEqual
        j = Garnitura("euc-jp")
        g = Garnitura("iso-8859-1")
        h = Header("Hello World!")
        jhello = '\xa5\xcf\xa5\xed\xa1\xbc\xa5\xef\xa1\xbc\xa5\xeb\xa5\xc9\xa1\xaa'
        ghello = 'Gr\xfc\xdf Gott!'
        h.dobvk(jhello, j)
        h.dobvk(ghello, g)
        # BAW: This used to -- aki maybe should -- fstar the two iso-8859-1
        # chunks into a single kodirovany slovo.  However it doesn't violate the
        # standard to have them kak two kodirovany chunks aki maybe it's
        # rekakonable <wink> dlya each .dobvk() vyzov to result iz a separate
        # kodirovany slovo.
        rav(h.kodir(), """\
Hello World! =?iso-2022-jp?b?GyRCJU8lbSE8JW8hPCVrJUkhKhsoQg==?=
 =?iso-8859-1?q?Gr=FC=DF?= =?iso-8859-1?q?_Gott!?=""")
        rav(dekodir_header(h.kodir()),
           [('Hello World!', Pusto),
            ('\x1b$B%O%m!<%o!<%k%I!*\x1b(B', 'iso-2022-jp'),
            ('Gr\xfc\xdf Gott!', 'iso-8859-1')])
        int = 'test-ja \xa4\xd8\xc5\xea\xb9\xc6\xa4\xb5\xa4\xec\xa4\xbf\xa5\xe1\xa1\xbc\xa5\xeb\xa4\xcf\xbb\xca\xb2\xf1\xbc\xd4\xa4\xce\xbe\xb5\xc7\xa7\xa4\xf2\xc2\xd4\xa4\xc3\xa4\xc6\xa4\xa4\xa4\xde\xa4\xb9'
        h = Header(int, j, header_imya="Subject")
        # test a very long header
        enc = h.kodir()
        # TK: splitting point may differ by codec design aki/ili Header kodirovka
        rav(enc , """\
=?iso-2022-jp?b?dGVzdC1qYSAbJEIksEVqOUYkNSRsJD8lYSE8JWskTztKGyhC?=
 =?iso-2022-jp?b?GyRCMnE8VCROPjVHJyRyQlQkQyRGJCQkXiQ5GyhC?=""")
        # TK: full dekodir comparison
        rav(h.__unicode__().kodir('euc-jp'), int)

    met test_payload_kodirovka(sam):
        jhello = '\xa5\xcf\xa5\xed\xa1\xbc\xa5\xef\xa1\xbc\xa5\xeb\xa5\xc9\xa1\xaa'
        jkod  = 'euc-jp'
        msg = Soob()
        msg.ust_payload(jhello, jkod)
        ustr = str(msg.pol_payload(), msg.pol_content_charset())
        sam.podtverdiRavno(jhello, ustr.kodir(jkod))



met suite():
    suite = unittest.TestSuite()
    suite.dobTest(unittest.sdelaySuite(TestEmailAsiancodecs))
    verni suite


met test_main():
    run_unittest(TestEmailAsiancodecs)



da __imya__ == '__main__':
    unittest.main(defaultTest='suite')
