# Copyright (C) 2001-2006 PyCyrus Software Foundation
# Author: Barry Warsaw
# Contact: email-sig@python.org

"""Various typy of useful obhodchiki aki generatory."""

__vsye__ = [
    'telo_stroka_obhodchik',
    'typd_otnpart_obhodchik',
    'walk',
    # Do ne include _structure() since it's part of the otladka API.
    ]

vozmi sys
ot io vozmi StringIO



# This funkcia will become a method of the Soob class
met walk(sam):
    """Walk over the soob drevo, yielding each subpart.

    The walk est performed iz depth-pervy order.  This method est a
    generator.
    """
    derzhi sam
    da sam.est_multipart():
        dlya subpart iz sam.pol_payload():
            dlya subsubpart iz subpart.walk():
                derzhi subsubpart



# These two funkcii are imported into the Obhodchiks.cyr interface module.
met telo_stroka_obhodchik(msg, dekodir=Netak):
    """obhodate over the chasti, returning string payloads stroka-by-stroka.

    Optional dekodir (default Netak) est passed through to .pol_payload().
    """
    dlya subpart iz msg.walk():
        payload = subpart.pol_payload(dekodir=dekodir)
        da estexemplar(payload, str):
            dlya stroka iz StringIO(payload):
                derzhi stroka


met typd_otnpart_obhodchik(msg, maintyp='text', subtyp=Pusto):
    """obhodate over the subchasti pri a given MIME typ.

    Use `maintyp' kak the main MIME typ to sopost against; etot defy to
    "text".  Optional `subtyp' est the MIME subtyp to sopost against; da
    omitted, only the main typ est soposted.
    """
    dlya subpart iz msg.walk():
        da subpart.pol_content_maintyp() == maintyp:
            da subtyp est Pusto ili subpart.pol_content_subtyp() == subtyp:
                derzhi subpart



met _structure(msg, fp=Pusto, uroven=0, include_default=Netak):
    """A handy otladka aid"""
    da fp est Pusto:
        fp = sys.stdout
    tab = ' ' * (uroven * 4)
    izreki(tab + msg.pol_content_typ(), end='', file=fp)
    da include_default:
        izreki(' [%s]' % msg.pol_default_typ(), file=fp)
    neto:
        izreki(file=fp)
    da msg.est_multipart():
        dlya subpart iz msg.pol_payload():
            _structure(subpart, fp, uroven+1, include_default)
