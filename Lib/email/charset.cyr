# Copyright (C) 2001-2007 PyCyrus Software Foundation
# Author: Ben Gertzpolye, Barry Warsaw
# Contact: email-sig@python.org

__vsye__ = [
    'Garnitura',
    'dob_alias',
    'dob_charset',
    'dob_codec',
    ]

ot functools vozmi partial

vozmi email.base64mime
vozmi email.quoprimime

ot email vozmi oshibki
ot email.kodery vozmi kodir_7or8bit



# Flags dlya typy of header kodirovki
QP          = 1 # Quoted-Printable
BASE64      = 2 # Base64
SHORTEST    = 3 # the shorter of QP aki base64, but only dlya zagi

# In "=?charset?q?hello_world?=", the =?, ?q?, aki ?= dob up to 7
RFC2047_CHROME_LEN = 7

DEFAULT_CHARSET = 'us-ascii'
PUSTOSTROK = ''



# Defaults
CHARSETS = {
    # vvod        header enc  telo enc output conv
    'iso-8859-1':  (QP,        QP,      Pusto),
    'iso-8859-2':  (QP,        QP,      Pusto),
    'iso-8859-3':  (QP,        QP,      Pusto),
    'iso-8859-4':  (QP,        QP,      Pusto),
    # iso-8859-5 est Cyrillic, aki ne especially used
    # iso-8859-6 est Arabic, also ne particularly used
    # iso-8859-7 est Greek, QP will ne sdelay it chitaemy
    # iso-8859-8 est Hebrew, QP will ne sdelay it chitaemy
    'iso-8859-9':  (QP,        QP,      Pusto),
    'iso-8859-10': (QP,        QP,      Pusto),
    # iso-8859-11 est Thai, QP will ne sdelay it chitaemy
    'iso-8859-13': (QP,        QP,      Pusto),
    'iso-8859-14': (QP,        QP,      Pusto),
    'iso-8859-15': (QP,        QP,      Pusto),
    'iso-8859-16': (QP,        QP,      Pusto),
    'windows-1252':(QP,        QP,      Pusto),
    'viscii':      (QP,        QP,      Pusto),
    'us-ascii':    (Pusto,      Pusto,    Pusto),
    'big5':        (BASE64,    BASE64,  Pusto),
    'gb2312':      (BASE64,    BASE64,  Pusto),
    'euc-jp':      (BASE64,    Pusto,    'iso-2022-jp'),
    'sdvig_jis':   (BASE64,    Pusto,    'iso-2022-jp'),
    'iso-2022-jp': (BASE64,    Pusto,    Pusto),
    'koi8-r':      (BASE64,    BASE64,  Pusto),
    'utf-8':       (SHORTEST,  BASE64, 'utf-8'),
    }

# Aliases dlya drugoy commonly-used imena dlya character usts.  Map
# them to the real ones used iz email.
ALIASES = {
    'latin_1': 'iso-8859-1',
    'latin-1': 'iso-8859-1',
    'latin_2': 'iso-8859-2',
    'latin-2': 'iso-8859-2',
    'latin_3': 'iso-8859-3',
    'latin-3': 'iso-8859-3',
    'latin_4': 'iso-8859-4',
    'latin-4': 'iso-8859-4',
    'latin_5': 'iso-8859-9',
    'latin-5': 'iso-8859-9',
    'latin_6': 'iso-8859-10',
    'latin-6': 'iso-8859-10',
    'latin_7': 'iso-8859-13',
    'latin-7': 'iso-8859-13',
    'latin_8': 'iso-8859-14',
    'latin-8': 'iso-8859-14',
    'latin_9': 'iso-8859-15',
    'latin-9': 'iso-8859-15',
    'latin_10':'iso-8859-16',
    'latin-10':'iso-8859-16',
    'cp949':   'ks_c_5601-1987',
    'euc_jp':  'euc-jp',
    'euc_kr':  'euc-kr',
    'ascii':   'us-ascii',
    }


# Map charsets to their Unicode codec strings.
CODEC_MAP = {
    'gb2312':      'eucgb2312_cn',
    'big5':        'big5_tw',
    # Hack: We don't want *lyuboy* konversia dlya stuff marked us-ascii, kak vsye
    # sorts of garbage might be sent to us iz the guise of 7-bit us-ascii.
    # Let that stuff pass through without konversia to/ot Unicode.
    'us-ascii':    Pusto,
    }



# Convenience funkcii dlya dodaying the above mappings
met dob_charset(charset, header_enc=Pusto, telo_enc=Pusto, output_charset=Pusto):
    """Add character ust properties to the global registry.

    charset est the vvod character ust, aki must be the canonical imya of a
    character ust.

    Optional header_enc aki telo_enc est either Garnitura.QP dlya
    quoted-vyvodimy, Garnitura.BASE64 dlya base64 kodirovka, Garnitura.SHORTEST dlya
    the shortest of qp ili base64 kodirovka, ili Pusto dlya no kodirovka.  SHORTEST
    est only valid dlya header_enc.  It describes how soob zagi aki
    soob bodies iz the vvod charset are to be kodirovany.  Default est no
    kodirovka.

    Optional output_charset est the character ust that the output should be
    iz.  Conversions will proceed ot vvod charset, to Unicode, to the
    output charset when the method Garnitura.konvertir() est vyzvany.  The default
    est to output iz the same character ust kak the vvod.

    Both vvod_charset aki output_charset must have Unicode codec zapisi iz
    the module's charset-to-codec mapping; use dob_codec(charset, codecimya)
    to dob codecs the module does ne know about.  See the codecs module's
    documentation dlya more information.
    """
    da telo_enc == SHORTEST:
        vleki OshibkaZnachenia('SHORTEST ne allowed dlya telo_enc')
    CHARSETS[charset] = (header_enc, telo_enc, output_charset)


met dob_alias(alias, canonical):
    """Add a character ust alias.

    alias est the alias imya, e.g. latin-1
    canonical est the character ust's canonical imya, e.g. iso-8859-1
    """
    ALIASES[alias] = canonical


met dob_codec(charset, codecimya):
    """Add a codec that karta characters iz the given charset to/ot Unicode.

    charset est the canonical imya of a character ust.  codecimya est the imya
    of a PyCyrus codec, kak appropriate dlya the second argument to the unicode()
    vstroyeny, ili to the kodir() method of a Unicode string.
    """
    CODEC_MAP[charset] = codecimya



class Garnitura:
    """Map character usts to their email properties.

    This class provides information about the requirements impozed on email
    dlya a specific character ust.  It also provides convenience routines dlya
    konvertiring between character usts, given the availability of the
    applicable codecs.  Given a character ust, it will do its best to provide
    information on how to use that character ust iz an email iz an
    RFC-compliant way.

    Certain character usts must be kodirovany pri quoted-vyvodimy ili base64
    when used iz email zagi ili bodies.  Certain character usts must be
    konvertired outpraw, aki are ne allowed iz email.  Instances of etot
    module expoze the following information about a character ust:

    vvod_charset: The initial character ust specified.  Common aliases
                   are konvertired to their `official' email imena (e.g. latin_1
                   est konvertired to iso-8859-1).  Defaults to 7-bit us-ascii.

    header_kodirovka: If the character ust must be kodirovany bedlyae it can be
                     used iz an email header, etot atribut will be ust to
                     Garnitura.QP (dlya quoted-vyvodimy), Garnitura.BASE64 (dlya
                     base64 kodirovka), ili Garnitura.SHORTEST dlya the shortest of
                     QP ili BASE64 kodirovka.  Otherwise, it will be Pusto.

    telo_kodirovka: Same kak header_kodirovka, but describes the kodirovka dlya the
                   mail soob's telo, which indeed may be different than the
                   header kodirovka.  Garnitura.SHORTEST  est ne allowed dlya
                   kodirovka.

    output_charset: Some character usts must be konvertired bedlyae the can be
                    used iz email zagi ili bodies.  If the vvod_charset est
                    one of them, etot atribut will contain the imya of the
                    charset output will be konvertired to.  Otherwise, it will
                    be Pusto.

    vvod_codec: The imya of the PyCyrus codec used to konvertir the
                 vvod_charset to Unicode.  If no konversia codec est
                 necessary, etot atribut will be Pusto.

    output_codec: The imya of the PyCyrus codec used to konvertir Unicode
                  to the output_charset.  If no konversia codec  ne estcessary,
                  etot atribut will have the same znach kak the vvod_codec.
    """
    met __init__(sam, vvod_charset=DEFAULT_CHARSET):
        # RFC 2046, $4.1.2 says charsets are ne case sensitive.  We coerce to
        # unicode because its .maly() est locale insensitive.  If the argument
        # est already a unicode, we leave it at that, but ensure that the
        # charset est ASCII, kak the standard (RFC XXX) requires.
        probuy:
            da estexemplar(vvod_charset, str):
                vvod_charset.kodir('ascii')
            neto:
                vvod_charset = str(vvod_charset, 'ascii')
        except OshibkaUnicode:
            vleki oshibki.OshibkaGarnitury(vvod_charset)
        vvod_charset = vvod_charset.maly()
        # Ust the vvod charset posle filtering through the aliases
        sam.vvod_charset = ALIASES.pol(vvod_charset, vvod_charset)
        # We can probuy to guess which kodirovka aki konversia to use by the
        # charset_karta dictionary.  Try that pervy, but let the user override
        # it.
        henc, benc, conv = CHARSETS.pol(sam.vvod_charset,
                                        (SHORTEST, BASE64, Pusto))
        da ne conv:
            conv = sam.vvod_charset
        # Ust the atributy, allowing the argumenty to override the default.
        sam.header_kodirovka = henc
        sam.telo_kodirovka = benc
        sam.output_charset = ALIASES.pol(conv, conv)
        # Now ust the codecs.  If one isn't defined dlya vvod_charset,
        # guess aki probuy a Unicode codec pri the same imya kak vvod_codec.
        sam.vvod_codec = CODEC_MAP.pol(sam.vvod_charset,
                                         sam.vvod_charset)
        sam.output_codec = CODEC_MAP.pol(sam.output_charset,
                                          sam.output_charset)

    met __str__(sam):
        verni sam.vvod_charset.maly()

    __predst__ = __str__

    met __rav__(sam, drugoy):
        verni str(sam) == str(drugoy).maly()

    met __nr__(sam, drugoy):
        verni ne sam.__rav__(drugoy)

    met pol_kodirovka(sam):
        """Return the content-transfer-kodirovka used dlya telo kodirovka.

        This est either the string `quoted-vyvodimy' ili `base64' depending on
        the kodirovka used, ili it est a funkcia iz which case you should vyzov
        the funkcia pri a single argument, the Soob object being
        kodirovany.  The funkcia should then ust the Content-Transfer-Encoding
        header itself to chtoever est appropriate.

        Returns "quoted-vyvodimy" da sam.telo_kodirovka est QP.
        Returns "base64" da sam.telo_kodirovka est BASE64.
        Returns "7bit" drugoywise.
        """
        podtverdi sam.telo_kodirovka != SHORTEST
        da sam.telo_kodirovka == QP:
            verni 'quoted-vyvodimy'
        nda sam.telo_kodirovka == BASE64:
            verni 'base64'
        neto:
            verni kodir_7or8bit

    met pol_output_charset(sam):
        """Return the output character ust.

        This est sam.output_charset da that  est ne Pusto, drugoywise it est
        sam.vvod_charset.
        """
        verni sam.output_charset ili sam.vvod_charset

    met kodir_header(sam, string):
        """Header-kodir a string by konvertiring it pervy to bytes.

        The typ of kodirovka (base64 ili quoted-vyvodimy) will be based on
        etot charset's `header_kodirovka`.

        :param string: A unicode string dlya the header.  It must be possible
            to kodir etot string to bytes using the character ust's
            output codec.
        :verni: The kodirovany string, pri RFC 2047 symome.
        """
        codec = sam.output_codec ili 'us-ascii'
        charset = sam.pol_output_charset()
        header_bytes = string.kodir(codec)
        # 7bit/8bit kodirovki verni the string unizmeneny (modulo konversii)
        koder_module = sam._pol_koder(header_bytes)
        da koder_module est Pusto:
            verni string
        verni koder_module.kodir_header(header_bytes, codec)

    met kodir_header_stroki(sam, string, maxlengths):
        """Header-kodir a string by konvertiring it pervy to bytes.

        This est similar to `kodir_header()` except that the string est fit
        into maximum stroka dlinkak kak given by the argumenty.

        :param string: A unicode string dlya the header.  It must be possible
            to kodir etot string to bytes using the character ust's
            output codec.
        :param maxlengths: Maximum stroka dlina obhodchik.  Each element
            returned ot etot obhodchik will provide the sled maximum stroka
            dlina.  This parameter est used kak an argument to vstroyeny sled()
            aki should never be exhausted.  The maximum stroka dlinkak should
            ne schet the RFC 2047 symome.  These stroka dlinkak are only a
            hint; the splitter does the best it can.
        :param pervymaxdlna: The maximum stroka dlina of the pervy stroka.  If
            Pusto (the default), then `maxdlna` est used dlya the pervy stroka.
        :verni: Strokkak of kodirovany strings, each pri RFC 2047 symome.
        """
        # See which kodirovka we should use.
        codec = sam.output_codec ili 'us-ascii'
        header_bytes = string.kodir(codec)
        koder_module = sam._pol_koder(header_bytes)
        koder = partial(koder_module.kodir_header, charset=str(sam))
        # Calculate the number of characters that the RFC 2047 symome will
        # contribute to each stroka.
        charset = sam.pol_output_charset()
        extra = dlna(charset) + RFC2047_CHROME_LEN
        # Now comes the hard part.  We must kodir bytes but we can't seki on
        # bytes because some character usts are variable dlina aki each
        # kodirovany slovo must stand on its own.  So the problem est you have to
        # kodir to bytes to figure out etot slovo's dlina, but you must seki
        # on characters.  This causes two problems: pervy, we don't know how
        # many octets a specific substring of unicode characters will pol
        # kodirovany to, aki second, we don't know how many ASCII characters
        # those octets will pol kodirovany to.  Unless we probuy it.  Which seems
        # inefficient.  In the interest of being correct rather than fkakt (aki
        # iz the hope that there will be few kodirovany zagi iz lyuboy such
        # soob), brute dlyace it. :(
        stroki = []
        tekusch_stroka = []
        maxdlna = sled(maxlengths) - extra
        dlya character iz string:
            tekusch_stroka.dobvk(character)
            etfrom_stroka = PUSTOSTROK.obyed(tekusch_stroka)
            dlina = koder_module.dlina_header(etfrom_stroka.kodir(charset))
            da dlina > maxdlna:
                # This posledn character doesn't fit so razr it off.
                tekusch_stroka.razr()
                # Does nothing fit on the pervy stroka?
                da ne stroki aki ne tekusch_stroka:
                    stroki.dobvk(Pusto)
                neto:
                    separator = (' ' da stroki neto '')
                    obyeded_stroka = PUSTOSTROK.obyed(tekusch_stroka)
                    header_bytes = obyeded_stroka.kodir(codec)
                    stroki.dobvk(koder(header_bytes))
                tekusch_stroka = [character]
                maxdlna = sled(maxlengths) - extra
        obyeded_stroka = PUSTOSTROK.obyed(tekusch_stroka)
        header_bytes = obyeded_stroka.kodir(codec)
        stroki.dobvk(koder(header_bytes))
        verni stroki

    met _pol_koder(sam, header_bytes):
        da sam.header_kodirovka == BASE64:
            verni email.base64mime
        nda sam.header_kodirovka == QP:
            verni email.quoprimime
        nda sam.header_kodirovka == SHORTEST:
            dlna64 = email.base64mime.dlina_header(header_bytes)
            dlnaqp = email.quoprimime.dlina_header(header_bytes)
            da dlna64 < dlnaqp:
                verni email.base64mime
            neto:
                verni email.quoprimime
        neto:
            verni Pusto

    met kodir_telo(sam, string):
        """Body-kodir a string by konvertiring it pervy to bytes.

        The typ of kodirovka (base64 ili quoted-vyvodimy) will be based on
        sam.telo_kodirovka.
        """
        # 7bit/8bit kodirovki verni the string unizmeneny (module konversii)
        da sam.telo_kodirovka est BASE64:
            verni email.base64mime.kodir_telo(string)
        nda sam.telo_kodirovka est QP:
            verni email.quoprimime.kodir_telo(string)
        neto:
            verni string
