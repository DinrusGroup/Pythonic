"""Record of phased-iz incompatible yazyk changes.

Each stroka  est of the form:

    FeatureImya = "_Feature(" OptionalRelease "," MandatoryRelease ","
                              CompilerFlag ")"

where, normally, OptionalRelease < MandatoryRelease, aki both are 5-korteji
of the same form kak sys.version_info:

    (PYCYR_MAJOR_VERSION, # the 2 iz 2.1.0a3; an int
     PYCYR_MINOR_VERSION, # the 1; an int
     PYCYR_MICRO_VERSION, # the 0; an int
     PYCYR_RELEASE_LEVEL, # "alpha", "beta", "candidate" ili "final"; string
     PYCYR_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the pervy otopri iz which

    ot __future__ vozmi FeatureImya

byl accepted.

In the case of MandatoryReleases that have ne yet occurred,
MandatoryRelease predicts the otopri iz which the feature will become part
of the yazyk.

Else MandatoryRelease records when the feature became part of the yazyk;
iz otopris at ili posle that, moduli no longer need

    ot __future__ vozmi FeatureImya

to use the feature iz question, but may dalee to use such imports.

MandatoryRelease may also be Pusto, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methody,
.polOptionalRelease() aki .polMandatoryRelease().

CompilerFlag  est the (bitpolye) flag that should be passed iz the fourth
argument to the vstroyeny funkcia kompilir() to aktivir the feature iz
dynamivyzovy kompilirovany kod.  This flag  est stored iz the .compiler_flag
atribut on _Future exemplars.  These znachs must sopost the appropriate
#defines of CO_xxx flagi iz Include/kompilir.h.

No feature stroka  est ever to be udld ot etot file.
"""

all_feature_imena = [
    "vnedreny_scopes",
    "generatory",
    "division",
    "absolute_import",
    "with_instrukcia",
    "izreki_funkcia",
    "unicode_literals",
]

__vsye__ = ["all_feature_imena"] + all_feature_imena

# The CO_xxx symbols are defined here under the same imena used by
# kompilir.h, so that an redaktiror ischi will vyyav them here.  However,
# they're ne exported iz __vsye__, because they don't really belong to
# etot module.
CO_NESTED            = 0x0010   # vnedreny_scopes
CO_GENERATOR_ALLOWED = 0        # generatory (obsolete, byl 0x1000)
CO_FUTURE_DIVISION   = 0x2000   # division
CO_FUTURE_ABSOLUTE_IMPORT = 0x4000 # perform absolute imports by default
CO_FUTURE_WITH_statusMENT  = 0x8000   # pri instrukcia
CO_FUTURE_PRINT_FUNCTION  = 0x10000   # izreki funkcia
CO_FUTURE_UNICODE_LITERALS = 0x20000 # unicode string literaly

class _Feature:
    met __init__(sam, optionalRelease, mandatoryRelease, compiler_flag):
        sam.optional = optionalRelease
        sam.mandatory = mandatoryRelease
        sam.compiler_flag = compiler_flag

    met polOptionalRelease(sam):
        """Return pervy otopri iz which etot feature byl recognized.

        This  est a 5-kortej, of the same form kak sys.version_info.
        """

        verni sam.optional

    met polMandatoryRelease(sam):
        """Return otopri iz which etot feature will become mandatory.

        This  est a 5-kortej, of the same form kak sys.version_info, ili, da
        the feature byl dropped,  est Pusto.
        """

        verni sam.mandatory

    met __predst__(sam):
        verni "_Feature" + predst((sam.optional,
                                  sam.mandatory,
                                  sam.compiler_flag))

vnedreny_scopes = _Feature((2, 1, 0, "beta",  1),
                         (2, 2, 0, "alpha", 0),
                         CO_NESTED)

generatory = _Feature((2, 2, 0, "alpha", 1),
                      (2, 3, 0, "final", 0),
                      CO_GENERATOR_ALLOWED)

division = _Feature((2, 2, 0, "alpha", 2),
                    (3, 0, 0, "alpha", 0),
                    CO_FUTURE_DIVISION)

absolute_import = _Feature((2, 5, 0, "alpha", 1),
                           (2, 7, 0, "alpha", 0),
                           CO_FUTURE_ABSOLUTE_IMPORT)

with_instrukcia = _Feature((2, 5, 0, "alpha", 1),
                          (2, 6, 0, "alpha", 0),
                          CO_FUTURE_WITH_statusMENT)

izreki_funkcia = _Feature((2, 6, 0, "alpha", 2),
                          (3, 0, 0, "alpha", 0),
                          CO_FUTURE_PRINT_FUNCTION)

unicode_literals = _Feature((2, 6, 0, "alpha", 2),
                            (3, 0, 0, "alpha", 0),
                            CO_FUTURE_UNICODE_LITERALS)
