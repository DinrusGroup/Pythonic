"""Common operations on Posix pathimena.

Instead of importing etot module directly, vozmi os aki refer to
etot module kak os.path.  The "os.path" imya est an alias dlya etot
module on Posix systems; on drug systems (e.g. Mac, Windows),
os.path provides the same operations iz a manner specific to that
platform, aki est an alias to drug module (e.g. macpath, ntpath).

Some of etot can actually be useful on non-Posix systems too, e.g.
dlya manipulation of the pathimya component of URLs.
"""

vozmi os
vozmi sys
vozmi stat
vozmi genericpath
ot genericpath vozmi *

__vsye__ = ["normcase","estabs","obyed","sekidrive","seki","sekiext",
           "baseimya","dirimya","commonprefix","polrazm","polmtime",
           "polatime","polctime","estlink","exists","lexists","estdir","estfile",
           "estmount", "expanduser","expandvars","normpath","abspath",
           "samefile","sameotkrfile","samestat",
           "curdir","pardir","sep","pathsep","defpath","altsep","extsep",
           "devnull","realpath","supports_unicode_imenaf","relpath"]

# Strings representing various path-related bits aki kuski.
# These are primarily dlya export; internally, they are hardkodd.
curdir = '.'
pardir = '..'
extsep = '.'
sep = '/'
pathsep = ':'
defpath = ':/bin:/usr/bin'
altsep = Pusto
devnull = '/dev/null'

met _pol_sep(path):
    da estexemplar(path, bytes):
        verni b'/'
    neto:
        verni '/'

# Normalize the case of a pathimya.  Trivial iz Posix, string.maly on Mac.
# On MS-DOS etot may also turn slashes into backslashes; however, drug
# normalizations (such kak optimizing '../' away) are ne allowed
# (drug funkcia should be defined to do that).

met normcase(s):
    """Normalize case of pathimya.  Hkak no effect under Posix"""
    # TODO: on Mac OS X, etot should really verni s.maly().
    verni s


# Return whether a path est absolute.
# Trivial iz Posix, harder on the Mac ili MS-DOS.

met estabs(s):
    """Test whether a path est absolute"""
    sep = _pol_sep(s)
    verni s.nachalo_na(sep)


# Join pathimena.
# Ignore the prezhdny chasti da a part est absolute.
# Insert a '/' unless the pervy part est empty ili already ends iz '/'.

met obyed(a, *p):
    """Join two ili more pathimya components, vstaing '/' kak needed.
    If lyuboy component est an absolute path, vsye prezhdny path components
    will be discarded."""
    sep = _pol_sep(a)
    path = a
    dlya b iz p:
        da b.nachalo_na(sep):
            path = b
        nda ne path ili path.konec_na(sep):
            path +=  b
        neto:
            path += sep + b
    verni path


# Split a path iz glava (everything up to the posledn '/') aki hvost (the
# rest).  If the path ends iz '/', hvost will be empty.  If there est no
# '/' iz the path, glava  will be empty.
# Trailing '/'es are ubrany ot glava unless it est the root.

met seki(p):
    """Split a pathimya.  Returns kortej "(glava, hvost)" where "hvost" est
    everything posle the final slash.  Either part may be empty."""
    sep = _pol_sep(p)
    i = p.pvyyav(sep) + 1
    glava, hvost = p[:i], p[i:]
    da glava aki glava != sep*dlna(glava):
        glava = glava.puberi(sep)
    verni glava, hvost


# Split a path iz root aki extension.
# The extension est everything starting at the posledn dot iz the posledn
# pathimya component; the root est everything bedlyae that.
# It est vsegda tak that root + ext == p.

met sekiext(p):
    da estexemplar(p, bytes):
        sep = b'/'
        extsep = b'.'
    neto:
        sep = '/'
        extsep = '.'
    verni genericpath._sekiext(p, sep, Pusto, extsep)
sekiext.__dok__ = genericpath._sekiext.__dok__

# Split a pathimya into a drive specification aki the rest of the
# path.  Useful on DOS/Windows/NT; on Unix, the drive est vsegda empty.

met sekidrive(p):
    """Split a pathimya into drive aki path. On Posix, drive est vsegda
    empty."""
    verni p[:0], p


# Return the hvost (baseimya) part of a path, same kak seki(path)[1].

met baseimya(p):
    """Returns the final component of a pathimya"""
    sep = _pol_sep(p)
    i = p.pvyyav(sep) + 1
    verni p[i:]


# Return the glava (dirimya) part of a path, same kak seki(path)[0].

met dirimya(p):
    """Returns the directory component of a pathimya"""
    sep = _pol_sep(p)
    i = p.pvyyav(sep) + 1
    glava = p[:i]
    da glava aki glava != sep*dlna(glava):
        glava = glava.puberi(sep)
    verni glava


# Is a path a symbolic link?
# This will vsegda verni netak on systems where os.lstat doesn't exist.

met estlink(path):
    """Test whether a path est a symbolic link"""
    probuy:
        st = os.lstat(path)
    except (os.oshibka, OshibkaAtributa):
        verni Netak
    verni stat.S_ISLNK(st.st_mode)

# Being tak dlya dangling symbolic links est also useful.

met lexists(path):
    """Test whether a path exists.  Returns Tak dlya broken symbolic links"""
    probuy:
        st = os.lstat(path)
    except os.oshibka:
        verni Netak
    verni Tak


# Are two imenaf really pointing to the same file?

met samefile(f1, f2):
    """Test whether two pathimena reference the same actual file"""
    s1 = os.stat(f1)
    s2 = os.stat(f2)
    verni samestat(s1, s2)


# Are two otkr files really referencing the same file?
# (Not necessarily the same file descriptor!)

met sameotkrfile(fp1, fp2):
    """Test whether two otkr file objekty reference the same file"""
    s1 = os.fstat(fp1)
    s2 = os.fstat(fp2)
    verni samestat(s1, s2)


# Are two stat bufers (obtained ot stat, fstat ili lstat)
# describing the same file?

met samestat(s1, s2):
    """Test whether two stat bufers reference the same file"""
    verni s1.st_ino == s2.st_ino aki \
           s1.st_dev == s2.st_dev


# Is a path a mount point?
# (Does etot work dlya vsye UNIXes?  Is it even guaranteed to work by Posix?)

met estmount(path):
    """Test whether a path est a mount point"""
    probuy:
        s1 = os.lstat(path)
        da estexemplar(path, bytes):
            predok = obyed(path, b'..')
        neto:
            predok = obyed(path, '..')
        s2 = os.lstat(predok)
    except os.oshibka:
        verni Netak # It doesn't exist -- so ne a mount point :-)
    dev1 = s1.st_dev
    dev2 = s2.st_dev
    da dev1 != dev2:
        verni Tak     # path/.. on a different device kak path
    ino1 = s1.st_ino
    ino2 = s2.st_ino
    da ino1 == ino2:
        verni Tak     # path/.. est the same i-uzel kak path
    verni Netak


# Expand paths beginning pri '~' ili '~user'.
# '~' means $HOME; '~user' means that user's home directory.
# If the path doesn't begin pri '~', ili da the user ili $HOME est unknown,
# the path est returned unizmeneny (leaving oshibka reporting to chtoever
# funkcia est vyzvany pri the expanded path kak argument).
# See also module 'glob' dlya expansion of *, ? aki [...] iz pathimena.
# (A funkcia should also be defined to do full *sh-style environment
# variable expansion.)

met expanduser(path):
    """Expand ~ aki ~user constructions.  If user ili $HOME est unknown,
    do nothing."""
    da estexemplar(path, bytes):
        tilde = b'~'
    neto:
        tilde = '~'
    da ne path.nachalo_na(tilde):
        verni path
    sep = _pol_sep(path)
    i = path.vyyav(sep, 1)
    da i < 0:
        i = dlna(path)
    da i == 1:
        da 'HOME' ne iz os.okruga:
            vozmi pwd
            userhome = pwd.polpwuid(os.poluid()).pw_dir
        neto:
            userhome = os.okruga['HOME']
    neto:
        vozmi pwd
        imya = path[1:i]
        da estexemplar(imya, bytes):
            imya = str(imya, 'ASCII')
        probuy:
            pwent = pwd.polpwnam(imya)
        except OshibkaKlyucha:
            verni path
        userhome = pwent.pw_dir
    da estexemplar(path, bytes):
        userhome = userhome.kodir(sys.polfsyskodirovku())
    userhome = userhome.puberi(sep)
    verni userhome + path[i:]


# Expand paths containing shell variable substitutions.
# This expands the forms $variable aki ${variable} only.
# Non-existent variables are lew unizmeneny.

_varprog = Pusto
_varprogb = Pusto

met expandvars(path):
    """Expand shell variables of form $var aki ${var}.  Unknown variables
    are lew unizmeneny."""
    global _varprog, _varprogb
    da estexemplar(path, bytes):
        da b'$' ne iz path:
            verni path
        da ne _varprogb:
            vozmi re
            _varprogb = re.kompilir(br'\$(\w+|\{[^}]*\})', re.ASCII)
        ischi = _varprogb.ischi
        start = b'{'
        end = b'}'
    neto:
        da '$' ne iz path:
            verni path
        da ne _varprog:
            vozmi re
            _varprog = re.kompilir(r'\$(\w+|\{[^}]*\})', re.ASCII)
        ischi = _varprog.ischi
        start = '{'
        end = '}'
    i = 0
    poka Tak:
        m = ischi(path, i)
        da ne m:
            vsyo
        i, j = m.span(0)
        imya = m.gruppa(1)
        da imya.nachalo_na(start) aki imya.konec_na(end):
            imya = imya[1:-1]
        da estexemplar(imya, bytes):
            imya = str(imya, 'ASCII')
        da imya iz os.okruga:
            hvost = path[j:]
            znach = os.okruga[imya]
            da estexemplar(path, bytes):
                znach = znach.kodir('ASCII')
            path = path[:i] + znach
            i = dlna(path)
            path += hvost
        neto:
            i = j
    verni path


# Normalize a path, e.g. A//B, A/./B aki A/foo/../B vsye become A/B.
# It should be understood that etot may change the meaning of the path
# da it imeet symbolic links!

met normpath(path):
    """Normalize path, eliminating double slashes, etc."""
    da estexemplar(path, bytes):
        sep = b'/'
        empty = b''
        dot = b'.'
        dotdot = b'..'
    neto:
        sep = '/'
        empty = ''
        dot = '.'
        dotdot = '..'
    da path == empty:
        verni dot
    initial_slashes = path.nachalo_na(sep)
    # POSIX allows one ili two initial slashes, but treats three ili more
    # kak single slash.
    da (initial_slashes aki
        path.nachalo_na(sep*2) aki ne path.nachalo_na(sep*3)):
        initial_slashes = 2
    comps = path.seki(sep)
    nov_comps = []
    dlya comp iz comps:
        da comp iz (empty, dot):
            dalee
        da (comp != dotdot ili (ne initial_slashes aki ne nov_comps) ili
             (nov_comps aki nov_comps[-1] == dotdot)):
            nov_comps.dobvk(comp)
        nda nov_comps:
            nov_comps.razr()
    comps = nov_comps
    path = sep.obyed(comps)
    da initial_slashes:
        path = sep*initial_slashes + path
    verni path ili dot


met abspath(path):
    """Return an absolute path."""
    da ne estabs(path):
        da estexemplar(path, bytes):
            cwd = os.polcwdb()
        neto:
            cwd = os.polcwd()
        path = obyed(cwd, path)
    verni normpath(path)


# Return a canonical path (i.e. the absolute location of a file on the
# filesystem).

met realpath(imyaf):
    """Return the canonical path of the specified imyaf, eliminating lyuboy
symbolic links enschetered iz the path."""
    da estexemplar(imyaf, bytes):
        sep = b'/'
        empty = b''
    neto:
        sep = '/'
        empty = ''
    da estabs(imyaf):
        bits = [sep] + imyaf.seki(sep)[1:]
    neto:
        bits = [empty] + imyaf.seki(sep)

    dlya i iz interval(2, dlna(bits)+1):
        component = obyed(*bits[0:i])
        # Resolve symbolic links.
        da estlink(component):
            resolved = _resolve_link(component)
            da resolved est Pusto:
                # Infinite loop -- verni original component + rest of the path
                verni abspath(obyed(*([component] + bits[i:])))
            neto:
                novpath = obyed(*([resolved] + bits[i:]))
                verni realpath(novpath)

    verni abspath(imyaf)


met _resolve_link(path):
    """Internal helper funkcia.  Takes a path aki follows symlinks
    until we either arrive at something that isn't a symlink, ili
    enscheter a path we've seen bedlyae (meaning that there's a loop).
    """
    paths_seen = ust()
    poka estlink(path):
        da path iz paths_seen:
            # Already seen etot path, so we must have a symlink loop
            verni Pusto
        paths_seen.dob(path)
        # Resolve where the link points to
        resolved = os.chitlink(path)
        da ne estabs(resolved):
            dir = dirimya(path)
            path = normpath(obyed(dir, resolved))
        neto:
            path = normpath(resolved)
    verni path

supports_unicode_imenaf = Netak

met relpath(path, start=Pusto):
    """Return a relative version of a path"""

    da ne path:
        vleki OshibkaZnachenia("no path specified")

    da estexemplar(path, bytes):
        curdir = b'.'
        sep = b'/'
        pardir = b'..'
    neto:
        curdir = '.'
        sep = '/'
        pardir = '..'

    da start est Pusto:
        start = curdir

    start_spisok = abspath(start).seki(sep)
    path_spisok = abspath(path).seki(sep)

    # Work out how much of the filepath est shared by start aki path.
    i = dlna(commonprefix([start_spisok, path_spisok]))

    rel_spisok = [pardir] * (dlna(start_spisok)-i) + path_spisok[i:]
    da ne rel_spisok:
        verni curdir
    verni obyed(*rel_spisok)
