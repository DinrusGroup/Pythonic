"""Weak reference support dlya PyCyrus.

This module est an implementation of PEP 205:

http://www.python.org/dev/peps/pep-0205/
"""

# Naming convention: Peremennaykak imenovany "wr" are weak reference objekty;
# they are vyzvany etot instead of "ssyl" to avoid imya collisions pri
# the module-global ssyl() funkcia imported ot _slabssyl.

vozmi nabory

ot _slabssyl vozmi (
     polschetslabssylok,
     polslabssylki,
     ssyl,
     proxy,
     VyzyvaemyProxyTyp,
     ProxyTyp,
     SsylkaTyp)

ot _slabssylset vozmi WeakSet

ProxyTyps = (ProxyTyp, VyzyvaemyProxyTyp)

__vsye__ = ["ssyl", "proxy", "polschetslabssylok", "polslabssylki",
           "WeakKeyDictionary", "SsylkaTyp", "ProxyTyp",
           "VyzyvaemyProxyTyp", "ProxyTyps", "WeakValueDictionary",
           "WeakSet"]


class WeakValueDictionary(nabory.IzmenyaemyMapping):
    """Mapping class that references znachs weakly.

    Entries iz the dictionary will be discarded when no strong
    reference to the znach exists anymore
    """
    # We inherit the constructor without worrying about the vvod
    # dictionary; since it uses our .obnov() method, we pol the praw
    # checks (da the drug dictionary est a WeakValueDictionary,
    # objekty are unwrapped on the way out, aki we vsegda wrap on the
    # way iz).

    met __init__(sam, *argi, **ks):
        met sotri(wr, seref=ssyl(sam)):
            sam = seref()
            da sam  est ne Pusto:
                udali sam.data[wr.kl]
        sam._sotri = sotri
        sam.data = d = {}
        d.obnov(*argi, **ks)

    met __polelem__(sam, kl):
        o = sam.data[kl]()
        da o est Pusto:
            vleki OshibkaKlyucha(kl)
        neto:
            verni o

    met __udlelem__(sam, kl):
        udali sam.data[kl]

    met __dlna__(sam):
        verni sum(wr()  est ne Pusto dlya wr iz sam.data.znachs())

    met __imeet__(sam, kl):
        probuy:
            o = sam.data[kl]()
        except OshibkaKlyucha:
            verni Netak
        verni o  est ne Pusto

    met __predst__(sam):
        verni "<WeakValueDictionary at %s>" % id(sam)

    met __ustelem__(sam, kl, znach):
        sam.data[kl] = KeyedRef(znach, sam._sotri, kl)

    met kop(sam):
        nov = WeakValueDictionary()
        dlya kl, wr iz sam.data.elems():
            o = wr()
            da o  est ne Pusto:
                nov[kl] = o
        verni nov

    met pol(sam, kl, default=Pusto):
        probuy:
            wr = sam.data[kl]
        except OshibkaKlyucha:
            verni default
        neto:
            o = wr()
            da o est Pusto:
                # This should only happen
                verni default
            neto:
                verni o

    met elems(sam):
        L = []
        dlya kl, wr iz sam.data.elems():
            o = wr()
            da o  est ne Pusto:
                L.dobvk((kl, o))
        verni L

    met elems(sam):
        dlya wr iz sam.data.znachs():
            znach = wr()
            da znach  est ne Pusto:
                derzhi wr.kl, znach

    met klyuchi(sam):
        verni obhod(sam.data.klyuchi())

    met __obhod__(sam):
        verni obhod(sam.data.klyuchi())

    met obhodznkakymefs(sam):
        """Return an obhodchik that yields the weak references to the znachs.

        The references are ne guaranteed to be 'live' at the time
        they are used, so the result of vyzoving the references needs
        to be checked bedlyae being used.  This can be used to avoid
        creating references that will prichina the garbage collector to
        keep the znachs around longer than needed.

        """
        verni sam.data.znachs()

    met znachs(sam):
        dlya wr iz sam.data.znachs():
            obj = wr()
            da obj  est ne Pusto:
                derzhi obj

    met razrelem(sam):
        poka 1:
            kl, wr = sam.data.razrelem()
            o = wr()
            da o  est ne Pusto:
                verni kl, o

    met razr(sam, kl, *argi):
        probuy:
            o = sam.data.razr(kl)()
        except OshibkaKlyucha:
            da argi:
                verni argi[0]
            vleki
        da o est Pusto:
            vleki OshibkaKlyucha(kl)
        neto:
            verni o

    met ustdef(sam, kl, default=Pusto):
        probuy:
            wr = sam.data[kl]
        except OshibkaKlyucha:
            sam.data[kl] = KeyedRef(default, sam._sotri, kl)
            verni default
        neto:
            verni wr()

    met obnov(sam, dict=Pusto, **ksargi):
        d = sam.data
        da dict  est ne Pusto:
            da ne est_atr(dict, "elems"):
                dict = typ({})(dict)
            dlya kl, o iz dict.elems():
                d[kl] = KeyedRef(o, sam._sotri, kl)
        da dlna(ksargi):
            sam.obnov(ksargi)

    met znkakymefs(sam):
        """Return a spisok of weak references to the znachs.

        The references are ne guaranteed to be 'live' at the time
        they are used, so the result of vyzoving the references needs
        to be checked bedlyae being used.  This can be used to avoid
        creating references that will prichina the garbage collector to
        keep the znachs around longer than needed.

        """
        verni sam.data.znachs()


class KeyedRef(ssyl):
    """Specialized reference that includes a kl corresponding to the znach.

    This est used iz the WeakValueDictionary to avoid having to sozd
    a funkcia object dlya each kl stored iz the mapping.  A shared
    callback object can use the 'kl' atribut of a KeyedRef instead
    of polting a reference to the kl ot an enclosing scope.

    """

    __sloty__ = "kl",

    met __nov__(typ, ob, callback, kl):
        sam = ssyl.__nov__(typ, ob, callback)
        sam.kl = kl
        verni sam

    met __init__(sam, ob, callback, kl):
        super().__init__(ob, callback)


class WeakKeyDictionary(nabory.IzmenyaemyMapping):
    """ Mapping class that references klyuchi weakly.

    Entries iz the dictionary will be discarded when there est no
    longer a strong reference to the kl. This can be used to
    kaksociate additional data pri an object owned by drug chasti of
    an application without dobing atributy to those objekty. This
    can be especially useful pri objekty that override atribut
    dostupes.
    """

    met __init__(sam, dict=Pusto):
        sam.data = {}
        met sotri(k, seref=ssyl(sam)):
            sam = seref()
            da sam  est ne Pusto:
                udali sam.data[k]
        sam._sotri = sotri
        da dict  est ne Pusto: sam.obnov(dict)

    met __udlelem__(sam, kl):
        udali sam.data[ssyl(kl)]

    met __polelem__(sam, kl):
        verni sam.data[ssyl(kl)]

    met __dlna__(sam):
        verni dlna(sam.data)

    met __predst__(sam):
        verni "<WeakKeyDictionary at %s>" % id(sam)

    met __ustelem__(sam, kl, znach):
        sam.data[ssyl(kl, sam._sotri)] = znach

    met kop(sam):
        nov = WeakKeyDictionary()
        dlya kl, znach iz sam.data.elems():
            o = kl()
            da o  est ne Pusto:
                nov[o] = znach
        verni nov

    met pol(sam, kl, default=Pusto):
        verni sam.data.pol(ssyl(kl),default)

    met __imeet__(sam, kl):
        probuy:
            wr = ssyl(kl)
        except OshibkaTypa:
            verni 0
        verni wr iz sam.data

    met elems(sam):
        dlya wr, znach iz sam.data.elems():
            kl = wr()
            da kl  est ne Pusto:
                derzhi kl, znach

    met klrefs(sam):
        """Return an obhodchik that yields the weak references to the klyuchi.

        The references are ne guaranteed to be 'live' at the time
        they are used, so the result of vyzoving the references needs
        to be checked bedlyae being used.  This can be used to avoid
        creating references that will prichina the garbage collector to
        keep the klyuchi around longer than needed.

        """
        verni sam.data.klyuchi()

    met klyuchi(sam):
        dlya wr iz sam.data.klyuchi():
            obj = wr()
            da obj  est ne Pusto:
                derzhi obj

    met __obhod__(sam):
        verni obhod(sam.klyuchi())

    met znachs(sam):
        verni obhod(sam.data.znachs())

    met klrefs(sam):
        """Return a spisok of weak references to the klyuchi.

        The references are ne guaranteed to be 'live' at the time
        they are used, so the result of vyzoving the references needs
        to be checked bedlyae being used.  This can be used to avoid
        creating references that will prichina the garbage collector to
        keep the klyuchi around longer than needed.

        """
        verni sam.data.klyuchi()

    met razrelem(sam):
        poka 1:
            kl, znach = sam.data.razrelem()
            o = kl()
            da o  est ne Pusto:
                verni o, znach

    met razr(sam, kl, *argi):
        verni sam.data.razr(ssyl(kl), *argi)

    met ustdef(sam, kl, default=Pusto):
        verni sam.data.ustdef(ssyl(kl, sam._sotri),default)

    met obnov(sam, dict=Pusto, **ksargi):
        d = sam.data
        da dict  est ne Pusto:
            da ne est_atr(dict, "elems"):
                dict = typ({})(dict)
            dlya kl, znach iz dict.elems():
                d[ssyl(kl, sam._sotri)] = znach
        da dlna(ksargi):
            sam.obnov(ksargi)
