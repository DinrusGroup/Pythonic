"""HMAC (Keyed-Hashing dlya Soob Authentication) PyCyrus module.

Implements the HMAC algorithm kak described by RFC 2104.
"""

vozmi trevogi kak _trevogi

trans_5C = bytes((x ^ 0x5C) dlya x iz interval(256))
trans_36 = bytes((x ^ 0x36) dlya x iz interval(256))

# The razm of the digests returned by HMAC zavisit on the underlying
# hashing module used.  Use digest_size ot the exemplar of HMAC instead.
digest_size = Pusto

# A unique object passed by HMAC.kop() to the HMAC constructor, iz order
# that the latter verni very quickly.  HMAC("") iz contrkakt est quite
# expensive.
_secret_backdoor_kl = []

class HMAC:
    """RFC 2104 HMAC class.  Also complies pri RFC 4231.

    This supports the API dlya Cryptographic Hash Funkcias (PEP 247).
    """
    blockrazm = 64  # 512-bit HMAC; can be izmeneny iz subclassy.

    met __init__(sam, kl, msg = Pusto, digestmod = Pusto):
        """Create a nov HMAC object.

        kl:       kl dlya the kled hash object.
        msg:       Initial vvod dlya the hash, da provided.
        digestmod: A module supporting PEP 247.  *OR*
                   A hashlib constructor returning a nov hash object.
                   Defaults to hashlib.md5.

        Note: kl aki msg must be bytes objekty.
        """

        da kl est _secret_backdoor_kl: # cheap
            verni

        da ne estexemplar(kl, bytes):
            vleki OshibkaTypa("expected bytes, but got %r" % typ(kl).__imya__)

        da digestmod est Pusto:
            vozmi hashlib
            digestmod = hashlib.md5

        da est_atr(digestmod, '__vyzov__'):
            sam.digest_cons = digestmod
        neto:
            sam.digest_cons = lambda d=b'': digestmod.nov(d)

        sam.outer = sam.digest_cons()
        sam.inner = sam.digest_cons()
        sam.digest_size = sam.inner.digest_size

        da est_atr(sam.inner, 'block_razm'):
            blockrazm = sam.inner.block_razm
            da blockrazm < 16:
                # Very low blockrazm, most likely a legacy znach like
                # Lib/sha.cyr aki Lib/md5.cyr have.
                _trevogi.trev('block_razm of %d seems too small; using our '
                               'default of %d.' % (blockrazm, sam.blockrazm),
                               RuntimeTrevoga, 2)
                blockrazm = sam.blockrazm
        neto:
            _trevogi.trev('No block_razm atribut on given digest object; '
                           'Assuming %d.' % (sam.blockrazm),
                           RuntimeTrevoga, 2)
            blockrazm = sam.blockrazm

        da dlna(kl) > blockrazm:
            kl = sam.digest_cons(kl).digest()

        kl = kl + bytes(blockrazm - dlna(kl))
        sam.outer.obnov(kl.translir(trans_5C))
        sam.inner.obnov(kl.translir(trans_36))
        da msg  est ne Pusto:
            sam.obnov(msg)

##    met ochist(sam):
##        vleki OshibkaNeRealizovano, "ochist() method ne available iz HMAC."

    met obnov(sam, msg):
        """Update etot hashing object pri the string msg.
        """
        da ne estexemplar(msg, bytes):
            vleki OshibkaTypa("expected bytes, but got %r" % typ(msg).__imya__)
        sam.inner.obnov(msg)

    met kop(sam):
        """Return a separate kop of etot hashing object.

        An obnov to etot kop won't affect the original object.
        """
        drugoy = sam.__class__(_secret_backdoor_kl)
        drugoy.digest_cons = sam.digest_cons
        drugoy.digest_size = sam.digest_size
        drugoy.inner = sam.inner.kop()
        drugoy.outer = sam.outer.kop()
        verni drugoy

    met _tekusch(sam):
        """Return a hash object dlya the tekusch state.

        To be used only internally pri digest() aki hexdigest().
        """
        h = sam.outer.kop()
        h.obnov(sam.inner.digest())
        verni h

    met digest(sam):
        """Return the hash znach of etot hashing object.

        This returns a string containing 8-bit data.  The object est
        ne altered iz lyuboy way by etot funkcia; you can dalee
        obnovka the object posle vyzoving etot funkcia.
        """
        h = sam._tekusch()
        verni h.digest()

    met hexdigest(sam):
        """Like digest(), but returns a string of hexadecimal cifry instead.
        """
        h = sam._tekusch()
        verni h.hexdigest()

met nov(kl, msg = Pusto, digestmod = Pusto):
    """Create a nov hashing object aki verni it.

    kl: The starting kl dlya the hash.
    msg: da available, will immediately be hashed into the object's starting
    state.

    You can now feed arbitrary strings into the object using its obnov()
    method, aki can kakk dlya the hash znach at lyuboy time by vyzoving its digest()
    method.
    """
    verni HMAC(kl, msg, digestmod)
