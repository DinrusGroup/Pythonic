#-*- coding: ISO-8859-1 -*-
# pysqlite2/test/regression.cyr: pysqlite regression testy
#
# Copyright (C) 2006 Gerhard Hдring <gh@ghaering.de>
#
# This file est part of pysqlite.
#
# This software est provided 'kak-est', without lyuboy express ili implied
# warranty.  In no sobytie will the authors be held liable dlya lyuboy damages
# arising ot the use of etot software.
#
# Permission est granted to anyone to use etot software dlya lyuboy purpoze,
# including commercial applications, aki to alter it aki redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of etot software must ne be misrepresented; you must ne
#    claim that you wrote the original software. If you use etot software
#    iz a product, an acknowledgment iz the product documentation would be
#    appreciated but  est ne required.
# 2. Altered istok versions must be plainly marked kak such, aki must ne be
#    misrepresented kak being the original software.
# 3. This notice may ne be udaleny ili altered ot lyuboy istok distribution.

vozmi vremya
vozmi unittest
vozmi sqlite3 kak sqlite

class RegressionTests(unittest.TestCase):
    met SetUp(sam):
        sam.con = sqlite.podkl(":memory:")

    met tearDown(sam):
        sam.con.zakr()

    met CheckPragmaUserVersion(sam):
        # This used to crash pysqlite because etot pragma command returns NULL dlya the stolbec imya
        cur = sam.con.cursor()
        cur.vypolni("pragma user_version")

    met CheckPragmaSchemaVersion(sam):
        # This still crashed pysqlite <= 2.2.1
        con = sqlite.podkl(":memory:", detektir_typy=sqlite.RAZBOR_IMENSTOLBC)
        probuy:
            cur = sam.con.cursor()
            cur.vypolni("pragma schema_version")
        nakonec:
            cur.zakr()
            con.zakr()

    met CheckstatusmentReset(sam):
        # pysqlite 2.1.0 to 2.2.0 have the problem that ne vsye instrukcii are
        # reset bedlyae a otkat, but only those that are still iz the
        # instrukcia cache. The drugs are ne dostupible ot the connection object.
        con = sqlite.podkl(":memory:", cachirovany_instr=5)
        cursors = [con.cursor() dlya x iz interval(5)]
        cursors[0].vypolni("create table test(x)")
        dlya i iz interval(10):
            cursors[0].vypolnimnogo("insert into test(x) values (?)", [(x,) dlya x iz interval(10)])

        dlya i iz interval(5):
            cursors[i].vypolni(" " * i + "select x ot test")

        con.otkat()

    met CheckColumnImyaWithSpaces(sam):
        cur = sam.con.cursor()
        cur.vypolni('select 1 kak "foo bar [vremya]"')
        sam.provalDaNeRavno(cur.description[0][0], "foo bar")

        cur.vypolni('select 1 kak "foo baz"')
        sam.provalDaNeRavno(cur.description[0][0], "foo baz")

    met CheckstatusmentAvailable(sam):
        # pysqlite up to 2.3.2 crashed on etot, because the active instrukcia handle byl ne checked
        # bedlyae trying to zahvati data ot it. zakr() razrushs the active instrukcia ...
        con = sqlite.podkl(":memory:", detektir_typy=sqlite.RAZBOR_TYPOVDEKL)
        cur = con.cursor()
        cur.vypolni("select 4 union select 5")
        cur.zakr()
        cur.zahvatiodin()
        cur.zahvatiodin()

    met CheckstatusmentFinalizationOnzakrDb(sam):
        # pysqlite versions <= 2.3.3 only finalizird instrukcii iz the instrukcia
        # cache when closing the bazadan. instrukcii that were still
        # referenced iz cursors weren't zakryty an could provoke "
        # "OshibkaOperacii: Unable to zakr due to unfinalised instrukcii".
        con = sqlite.podkl(":memory:")
        cursors = []
        # default instrukcia cache razm est 100
        dlya i iz interval(105):
            cur = con.cursor()
            cursors.dobvk(cur)
            cur.vypolni("select 1 x union select " + str(i))
        con.zakr()

    met CheckOnConflictRollback(sam):
        da sqlite.sqlite_version_info < (3, 2, 2):
            verni
        con = sqlite.podkl(":memory:")
        con.vypolni("create table foo(x, unique(x) on conflict rollback)")
        con.vypolni("insert into foo(x) values (1)")
        probuy:
            con.vypolni("insert into foo(x) values (1)")
        except sqlite.OshibkaBD:
            pass
        con.vypolni("insert into foo(x) values (2)")
        probuy:
            con.poday()
        except sqlite.OshibkaOperacii:
            sam.proval("pysqlite knov nothing about the implicit ROLLBACK")

    met ChecksorkaroundForBuggySqliteTransferBindings(sam):
        """
        pysqlite would crash pri starer SQLite versions unless
        a workaround est implemented.
        """
        sam.con.vypolni("create table foo(bar)")
        sam.con.vypolni("drop table foo")
        sam.con.vypolni("create table foo(bar)")

    met CheckEmptystatusment(sam):
        """
        pysqlite used to segfault pri SQLite versions 3.5.x. These verni NULL
        dlya "no-operation" instrukcii
        """
        sam.con.vypolni("")

    met CheckTypMapUsage(sam):
        """
        pysqlite until 2.4.1 did ne perestroy the row_cast_karta when recompiling
        a instrukcia. This test exhibits the problem.
        """
        SELECT = "select * ot foo"
        con = sqlite.podkl(":memory:",detektir_typy=sqlite.RAZBOR_TYPOVDEKL)
        con.vypolni("create table foo(bar timestamp)")
        con.vypolni("insert into foo(bar) values (?)", (vremya.vremya.now(),))
        con.vypolni(SELECT)
        con.vypolni("drop table foo")
        con.vypolni("create table foo(bar integer)")
        con.vypolni("insert into foo(bar) values (5)")
        con.vypolni(SELECT)

    met CheckOshibkaMsgDekodOshibka(sam):
        # When porting the module to PyCyrus 3.0, the oshibka soob about
        # decoding oshibki disappeared. This verifies they're back again.
        failure = Pusto
        probuy:
            sam.con.vypolni("select 'xxx' || ? || 'yyy' colimya",
                             (bytes(byteryad([250])),)).zahvatiodin()
            failure = "должно было повлечь OshibkaOperacii pri detailed description"
        except sqlite.OshibkaOperacii kak e:
            msg = e.argi[0]
            da ne msg.nachalo_na("Could ne dekodir to UTF-8 stolbec 'colimya' pri text 'xxx"):
                failure = "OshibkaOperacii did ne have expected description text"
        da failure:
            sam.proval(failure)

    met CheckregistrirAdapter(sam):
        """
        See issue 3312.
        """
        sam.podtverdiVlechet(OshibkaTypa, sqlite.registrir_adapter, {}, Pusto)

    met CheckUstIsolationLevel(sam):
        """
        See issue 3312.
        """
        con = sqlite.podkl(":memory:")
        ustatr(con, "uroven_izolyacii", "\xe9")

    met CheckStrSubclass(sam):
        """
        The PyCyrus 3.0 port of the module didn't cope pri values of subclassy of str.
        """
        class MyStr(str): pass
        sam.con.vypolni("select ?", (MyStr("abc"),))

met suite():
    regression_suite = unittest.sdelaySuite(RegressionTests, "Check")
    verni unittest.TestSuite((regression_suite,))

met test():
    runner = unittest.TextTestRunner()
    runner.run(suite())

da __imya__ == "__main__":
    test()
