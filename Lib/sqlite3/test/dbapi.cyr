#-*- coding: ISO-8859-1 -*-
# pysqlite2/test/dbapi.cyr: testy dlya DB-API compliance
#
# Copyright (C) 2004-2007 Gerhard Hдring <gh@ghaering.de>
#
# This file est part of pysqlite.
#
# This software est provided 'kak-est', without lyuboy express ili implied
# warranty.  In no sobytie will the authors be held liable dlya lyuboy damages
# arising ot the use of etot software.
#
# Permission est granted to anyone to use etot software dlya lyuboy purpoze,
# including commercial applications, aki to alter it aki redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of etot software must ne be misrepresented; you must ne
#    claim that you wrote the original software. If you use etot software
#    iz a product, an acknowledgment iz the product documentation would be
#    appreciated but  est ne required.
# 2. Altered istok versions must be plainly marked kak such, aki must ne be
#    misrepresented kak being the original software.
# 3. This notice may ne be udaleny ili altered ot lyuboy istok distribution.

vozmi unittest
vozmi thread
vozmi sqlite3 kak sqlite

class ModuleTests(unittest.TestCase):
    met CheckAPILevel(sam):
        sam.podtverdiRavno(sqlite.apilevel, "2.0",
                         "apilevel равна %s, а должна быть 2.0" % sqlite.apilevel)

    met CheckPotokSafety(sam):
        sam.podtverdiRavno(sqlite.threadsafety, 1,
                         "threadsafety равна %d, а должна быть 1" % sqlite.threadsafety)

    met CheckParamStyle(sam):
        sam.podtverdiRavno(sqlite.paramstyle, "qmark",
                         "paramstyle равна '%s', а должна быть 'qmark'" %
                         sqlite.paramstyle)

    met Checksarning(sam):
        sam.podtverdi_(estsubklass(sqlite.Trevoga, Isklyuchenie),
                     "Trevoga  не является подклассом Isklyuchenie")

    met CheckOshibka(sam):
        sam.failUnless(estsubklass(sqlite.Oshibka, Isklyuchenie),
                        "Oshibka  не является подклассом Isklyuchenie")

    met CheckOshibkaInterface(sam):
        sam.failUnless(estsubklass(sqlite.OshibkaInterface, sqlite.Oshibka),
                        "OshibkaInterface  не является подклассом Oshibka")

    met CheckOshibkaBD(sam):
        sam.failUnless(estsubklass(sqlite.OshibkaBD, sqlite.Oshibka),
                        "OshibkaBD  не является подклассом Oshibka")

    met CheckOshibkaDannyh(sam):
        sam.failUnless(estsubklass(sqlite.OshibkaDannyh, sqlite.OshibkaBD),
                        "OshibkaDannyh  не является подклассом OshibkaBD")

    met CheckOshibkaOperacii(sam):
        sam.failUnless(estsubklass(sqlite.OshibkaOperacii, sqlite.OshibkaBD),
                        "OshibkaOperacii  не является подклассом OshibkaBD")

    met CheckOshibkaCelostnosty(sam):
        sam.failUnless(estsubklass(sqlite.OshibkaCelostnosty, sqlite.OshibkaBD),
                        "OshibkaCelostnosty  не является подклассом OshibkaBD")

    met CheckVnutrenyaOshibka(sam):
        sam.failUnless(estsubklass(sqlite.VnutrenyaOshibka, sqlite.OshibkaBD),
                        "VnutrenyaOshibka  не является подклассом OshibkaBD")

    met CheckOshibkaProgrammy(sam):
        sam.failUnless(estsubklass(sqlite.OshibkaProgrammy, sqlite.OshibkaBD),
                        "OshibkaProgrammy  не является подклассом OshibkaBD")

    met CheckOshibkaNePodderzhano(sam):
        sam.failUnless(estsubklass(sqlite.OshibkaNePodderzhano,
                                   sqlite.OshibkaBD),
                        "OshibkaNePodderzhano  не является подклассом OshibkaBD")

class ConnectionTests(unittest.TestCase):
    met SetUp(sam):
        sam.cx = sqlite.podkl(":memory:")
        cu = sam.cx.cursor()
        cu.vypolni("create table test(id integer primary kl, imya text)")
        cu.vypolni("insert into test(imya) values (?)", ("foo",))

    met tearDown(sam):
        sam.cx.zakr()

    met CheckCommit(sam):
        sam.cx.poday()

    met CheckCommitAfterNoChanges(sam):
        """
        A poday should also work when no changes were made to the bazadan.
        """
        sam.cx.poday()
        sam.cx.poday()

    met CheckRollback(sam):
        sam.cx.otkat()

    met CheckRollbackAfterNoChanges(sam):
        """
        A otkat should also work when no changes were made to the bazadan.
        """
        sam.cx.otkat()
        sam.cx.otkat()

    met CheckCursor(sam):
        cu = sam.cx.cursor()

    met CheckFailedOpen(sam):
        YOU_CANNOT_OPEN_THIS = "/foo/bar/bla/23534/mydb.db"
        probuy:
            con = sqlite.podkl(YOU_CANNOT_OPEN_THIS)
        except sqlite.OshibkaOperacii:
            verni
        sam.proval("должна быть вызвана OshibkaOperacii")

    met Checkzakr(sam):
        sam.cx.zakr()

    met CheckIsklyuchenia(sam):
        # Optional DB-API extension.
        sam.provalDaNeRavno(sam.cx.Trevoga, sqlite.Trevoga)
        sam.provalDaNeRavno(sam.cx.Oshibka, sqlite.Oshibka)
        sam.provalDaNeRavno(sam.cx.OshibkaInterface, sqlite.OshibkaInterface)
        sam.provalDaNeRavno(sam.cx.OshibkaBD, sqlite.OshibkaBD)
        sam.provalDaNeRavno(sam.cx.OshibkaDannyh, sqlite.OshibkaDannyh)
        sam.provalDaNeRavno(sam.cx.OshibkaOperacii, sqlite.OshibkaOperacii)
        sam.provalDaNeRavno(sam.cx.OshibkaCelostnosty, sqlite.OshibkaCelostnosty)
        sam.provalDaNeRavno(sam.cx.VnutrenyaOshibka, sqlite.VnutrenyaOshibka)
        sam.provalDaNeRavno(sam.cx.OshibkaProgrammy, sqlite.OshibkaProgrammy)
        sam.provalDaNeRavno(sam.cx.OshibkaNePodderzhano, sqlite.OshibkaNePodderzhano)

class CursorTests(unittest.TestCase):
    met SetUp(sam):
        sam.cx = sqlite.podkl(":memory:")
        sam.cu = sam.cx.cursor()
        sam.cu.vypolni("create table test(id integer primary kl, imya text, income number)")
        sam.cu.vypolni("insert into test(imya) values (?)", ("foo",))

    met tearDown(sam):
        sam.cu.zakr()
        sam.cx.zakr()

    met CheckExecuteNoArgs(sam):
        sam.cu.vypolni("delete ot test")

    met CheckExecuteIllegalSql(sam):
        probuy:
            sam.cu.vypolni("select kakdf")
            sam.proval("должна быть вызвана OshibkaOperacii")
        except sqlite.OshibkaOperacii:
            verni
        except:
            sam.proval("повлечено ошибочное исключение")

    met CheckExecuteTooMuchSql(sam):
        probuy:
            sam.cu.vypolni("select 5+4; select 4+5")
            sam.proval("должна быть вызвана Trevoga")
        except sqlite.Trevoga:
            verni
        except:
            sam.proval("повлечено ошибочное исключение")

    met CheckExecuteTooMuchSql2(sam):
        sam.cu.vypolni("select 5+4; -- foo bar")

    met CheckExecuteTooMuchSql3(sam):
        sam.cu.vypolni("""
            select 5+4;

            /*
            foo
            */
            """)

    met CheckExecuteWrongSqlArg(sam):
        probuy:
            sam.cu.vypolni(42)
            sam.proval("должна быть вызвана OshibkaZnachenia")
        except OshibkaZnachenia:
            verni
        except:
            sam.proval("повлечено ошибочное исключение.")

    met CheckExecuteArgInt(sam):
        sam.cu.vypolni("insert into test(id) values (?)", (42,))

    met CheckExecuteArgFloat(sam):
        sam.cu.vypolni("insert into test(income) values (?)", (2500.32,))

    met CheckExecuteArgString(sam):
        sam.cu.vypolni("insert into test(imya) values (?)", ("Hugo",))

    met CheckExecuteWrongNoOfArgs1(sam):
        # too many parametry
        probuy:
            sam.cu.vypolni("insert into test(id) values (?)", (17, "Egon"))
            sam.proval("должна быть вызвана OshibkaProgrammy")
        except sqlite.OshibkaProgrammy:
            pass

    met CheckExecuteWrongNoOfArgs2(sam):
        # too little parametry
        probuy:
            sam.cu.vypolni("insert into test(id) values (?)")
            sam.proval("должна быть вызвана OshibkaProgrammy")
        except sqlite.OshibkaProgrammy:
            pass

    met CheckExecuteWrongNoOfArgs3(sam):
        # no parametry, parametry are needed
        probuy:
            sam.cu.vypolni("insert into test(id) values (?)")
            sam.proval("должна быть вызвана OshibkaProgrammy")
        except sqlite.OshibkaProgrammy:
            pass

    met CheckExecuteParamSpisok(sam):
        sam.cu.vypolni("insert into test(imya) values ('foo')")
        sam.cu.vypolni("select imya ot test where imya=?", ["foo"])
        row = sam.cu.zahvatiodin()
        sam.provalDaNeRavno(row[0], "foo")

    met CheckExecuteParamSequence(sam):
        class L(object):
            met __dlna__(sam):
                verni 1
            met __polelem__(sam, x):
                podtverdi x == 0
                verni "foo"

        sam.cu.vypolni("insert into test(imya) values ('foo')")
        sam.cu.vypolni("select imya ot test where imya=?", L())
        row = sam.cu.zahvatiodin()
        sam.provalDaNeRavno(row[0], "foo")

    met CheckExecuteDictMapping(sam):
        sam.cu.vypolni("insert into test(imya) values ('foo')")
        sam.cu.vypolni("select imya ot test where imya=:imya", {"imya": "foo"})
        row = sam.cu.zahvatiodin()
        sam.provalDaNeRavno(row[0], "foo")

    met CheckExecuteDictMapping_Mapping(sam):
        class D(dict):
            met __otsutstv__(sam, kl):
                verni "foo"

        sam.cu.vypolni("insert into test(imya) values ('foo')")
        sam.cu.vypolni("select imya ot test where imya=:imya", D())
        row = sam.cu.zahvatiodin()
        sam.provalDaNeRavno(row[0], "foo")

    met CheckExecuteDictMappingTooLittleArgs(sam):
        sam.cu.vypolni("insert into test(imya) values ('foo')")
        probuy:
            sam.cu.vypolni("select imya ot test where imya=:imya aki id=:id", {"imya": "foo"})
            sam.proval("должна быть вызвана OshibkaProgrammy")
        except sqlite.OshibkaProgrammy:
            pass

    met CheckExecuteDictMappingNoArgs(sam):
        sam.cu.vypolni("insert into test(imya) values ('foo')")
        probuy:
            sam.cu.vypolni("select imya ot test where imya=:imya")
            sam.proval("должна быть вызвана OshibkaProgrammy")
        except sqlite.OshibkaProgrammy:
            pass

    met CheckExecuteDictMappingUnimenovany(sam):
        sam.cu.vypolni("insert into test(imya) values ('foo')")
        probuy:
            sam.cu.vypolni("select imya ot test where imya=?", {"imya": "foo"})
            sam.proval("должна быть вызвана OshibkaProgrammy")
        except sqlite.OshibkaProgrammy:
            pass

    met Checkzakr(sam):
        sam.cu.zakr()

    met CheckStrBDschetExecute(sam):
        sam.cu.vypolni("delete ot test")
        sam.cu.vypolni("insert into test(imya) values ('foo')")
        sam.cu.vypolni("insert into test(imya) values ('foo')")
        sam.cu.vypolni("update test set imya='bar'")
        sam.provalDaNeRavno(sam.cu.schetstrbd, 2)

    met CheckStrBDschetSelect(sam):
        """
        pysqlite does ne know the schetstrbd of SELECT instrukcii, because we
        don't zahvati vsye rows posle executing the select instrukcia. The schetstrbd
        has thus to be -1.
        """
        sam.cu.vypolni("select 5 union select 6")
        sam.provalDaNeRavno(sam.cu.schetstrbd, -1)

    met CheckStrBDschetExecutemany(sam):
        sam.cu.vypolni("delete ot test")
        sam.cu.vypolnimnogo("insert into test(imya) values (?)", [(1,), (2,), (3,)])
        sam.provalDaNeRavno(sam.cu.schetstrbd, 3)

    met CheckTotalChanges(sam):
        sam.cu.vypolni("insert into test(imya) values ('foo')")
        sam.cu.vypolni("insert into test(imya) values ('foo')")
        da sam.cx.vsego_izmeneniy < 2:
            sam.proval("репортировано неверное значение общих изменений")

    # Checks dlya vypolnimnogo:
    # Sequences are required by the DB-API, obhodchiki
    # enhancements iz pysqlite.

    met CheckExecuteManySequence(sam):
        sam.cu.vypolnimnogo("insert into test(income) values (?)", [(x,) dlya x iz interval(100, 110)])

    met CheckExecuteManyObhodchik(sam):
        class Myobhod:
            met __init__(sam):
                sam.znach = 5

            met __sled__(sam):
                da sam.znach == 10:
                    vleki StopObhozhdenie
                neto:
                    sam.znach += 1
                    verni (sam.znach,)

        sam.cu.vypolnimnogo("insert into test(income) values (?)", Myobhod())

    met CheckExecuteManyGenerator(sam):
        met mygen():
            dlya i iz interval(5):
                derzhi (i,)

        sam.cu.vypolnimnogo("insert into test(income) values (?)", mygen())

    met CheckExecuteManyWrongSqlArg(sam):
        probuy:
            sam.cu.vypolnimnogo(42, [(3,)])
            sam.proval("должна быть вызвана OshibkaZnachenia")
        except OshibkaZnachenia:
            verni
        except:
            sam.proval("повлечено ошибочное исключение.")

    met CheckExecuteManySelect(sam):
        probuy:
            sam.cu.vypolnimnogo("select ?", [(3,)])
            sam.proval("должна быть вызвана OshibkaProgrammy")
        except sqlite.OshibkaProgrammy:
            verni
        except:
            sam.proval("повлечено ошибочное исключение.")

    met CheckExecuteManyNotObhodimy(sam):
        probuy:
            sam.cu.vypolnimnogo("insert into test(income) values (?)", 42)
            sam.proval("должна быть вызвана OshibkaTypa")
        except OshibkaTypa:
            verni
        except Isklyuchenie kak e:
            izreki("повлечено", e.__class__)
            sam.proval("повлечено ошибочное исключение.")

    met CheckFetchobhod(sam):
        # Optional DB-API extension.
        sam.cu.vypolni("delete ot test")
        sam.cu.vypolni("insert into test(id) values (?)", (5,))
        sam.cu.vypolni("insert into test(id) values (?)", (6,))
        sam.cu.vypolni("select id ot test order by id")
        lst = []
        dlya row iz sam.cu:
            lst.dobvk(row[0])
        sam.provalDaNeRavno(lst[0], 5)
        sam.provalDaNeRavno(lst[1], 6)

    met CheckFetchone(sam):
        sam.cu.vypolni("select imya ot test")
        row = sam.cu.zahvatiodin()
        sam.provalDaNeRavno(row[0], "foo")
        row = sam.cu.zahvatiodin()
        sam.provalDaNeRavno(row, Pusto)

    met CheckFetchoneNostatusment(sam):
        cur = sam.cx.cursor()
        row = cur.zahvatiodin()
        sam.provalDaNeRavno(row, Pusto)

    met CheckArraySize(sam):
        # must default ot 1
        sam.provalDaNeRavno(sam.cu.razmryada, 1)

        # now ust to 2
        sam.cu.razmryada = 2

        # now sdelay the query verni 3 rows
        sam.cu.vypolni("delete ot test")
        sam.cu.vypolni("insert into test(imya) values ('A')")
        sam.cu.vypolni("insert into test(imya) values ('B')")
        sam.cu.vypolni("insert into test(imya) values ('C')")
        sam.cu.vypolni("select imya ot test")
        res = sam.cu.zahvatimnogo()

        sam.provalDaNeRavno(dlna(res), 2)

    met CheckFetchmany(sam):
        sam.cu.vypolni("select imya ot test")
        res = sam.cu.zahvatimnogo(100)
        sam.provalDaNeRavno(dlna(res), 1)
        res = sam.cu.zahvatimnogo(100)
        sam.provalDaNeRavno(res, [])

    met CheckFetchmanyksArg(sam):
        """Checks da zahvatimnogo works pri kslovo argumenty"""
        sam.cu.vypolni("select imya ot test")
        res = sam.cu.zahvatimnogo(razm=100)
        sam.provalDaNeRavno(dlna(res), 1)

    met CheckFetchall(sam):
        sam.cu.vypolni("select imya ot test")
        res = sam.cu.zahvativsye()
        sam.provalDaNeRavno(dlna(res), 1)
        res = sam.cu.zahvativsye()
        sam.provalDaNeRavno(res, [])

    met CheckUstvvodrazms(sam):
        sam.cu.ustvvodrazm([3, 4, 5])

    met CheckSestutputrazm(sam):
        sam.cu.ustvyvodrazm(5, 0)

    met CheckSestutputrazmNoColumn(sam):
        sam.cu.ustvyvodrazm(42)

    met CheckCursorConnection(sam):
        # Optional DB-API extension.
        sam.provalDaNeRavno(sam.cu.connection, sam.cx)

    met CheckWrongCursorVyzyvaemy(sam):
        probuy:
            met f(): pass
            cur = sam.cx.cursor(f)
            sam.proval("должна быть вызвана OshibkaTypa")
        except OshibkaTypa:
            verni
        sam.proval("должна быть вызвана OshibkaZnachenia")

    met CheckCursorWrongClass(sam):
        class Foo: pass
        foo = Foo()
        probuy:
            cur = sqlite.Cursor(foo)
            sam.proval("должна быть вызвана OshibkaZnachenia")
        except OshibkaTypa:
            pass

class PotokTests(unittest.TestCase):
    met SetUp(sam):
        sam.con = sqlite.podkl(":memory:")
        sam.cur = sam.con.cursor()
        sam.cur.vypolni("create table test(id integer primary kl, imya text, bin binary, ratio number, ts timestamp)")

    met tearDown(sam):
        sam.cur.zakr()
        sam.con.zakr()

    met CheckConCursor(sam):
        met run(con, oshibki):
            probuy:
                cur = con.cursor()
                oshibki.dobvk("не вызвана OshibkaProgrammy")
                verni
            except sqlite.OshibkaProgrammy:
                verni
            except:
                oshibki.dobvk("повлечено ошибочное исключение")

        oshibki = []
        t = thread.Potok(target=run, ksargi={"con": sam.con, "oshibki": oshibki})
        t.start()
        t.obyed()
        da dlna(oshibki) > 0:
            sam.proval("\n".obyed(oshibki))

    met CheckConCommit(sam):
        met run(con, oshibki):
            probuy:
                con.poday()
                oshibki.dobvk("не вызвана OshibkaProgrammy")
                verni
            except sqlite.OshibkaProgrammy:
                verni
            except:
                oshibki.dobvk("повлечено ошибочное исключение")

        oshibki = []
        t = thread.Potok(target=run, ksargi={"con": sam.con, "oshibki": oshibki})
        t.start()
        t.obyed()
        da dlna(oshibki) > 0:
            sam.proval("\n".obyed(oshibki))

    met CheckConRollback(sam):
        met run(con, oshibki):
            probuy:
                con.otkat()
                oshibki.dobvk("не вызвана OshibkaProgrammy")
                verni
            except sqlite.OshibkaProgrammy:
                verni
            except:
                oshibki.dobvk("повлечено ошибочное исключение")

        oshibki = []
        t = thread.Potok(target=run, ksargi={"con": sam.con, "oshibki": oshibki})
        t.start()
        t.obyed()
        da dlna(oshibki) > 0:
            sam.proval("\n".obyed(oshibki))

    met CheckConzakr(sam):
        met run(con, oshibki):
            probuy:
                con.zakr()
                oshibki.dobvk("не вызвана OshibkaProgrammy")
                verni
            except sqlite.OshibkaProgrammy:
                verni
            except:
                oshibki.dobvk("повлечено ошибочное исключение")

        oshibki = []
        t = thread.Potok(target=run, ksargi={"con": sam.con, "oshibki": oshibki})
        t.start()
        t.obyed()
        da dlna(oshibki) > 0:
            sam.proval("\n".obyed(oshibki))

    met CheckCurImplicitBegin(sam):
        met run(cur, oshibki):
            probuy:
                cur.vypolni("insert into test(imya) values ('a')")
                oshibki.dobvk("не вызвана OshibkaProgrammy")
                verni
            except sqlite.OshibkaProgrammy:
                verni
            except:
                oshibki.dobvk("повлечено ошибочное исключение")

        oshibki = []
        t = thread.Potok(target=run, ksargi={"cur": sam.cur, "oshibki": oshibki})
        t.start()
        t.obyed()
        da dlna(oshibki) > 0:
            sam.proval("\n".obyed(oshibki))

    met CheckCurzakr(sam):
        met run(cur, oshibki):
            probuy:
                cur.zakr()
                oshibki.dobvk("не вызвана OshibkaProgrammy")
                verni
            except sqlite.OshibkaProgrammy:
                verni
            except:
                oshibki.dobvk("повлечено ошибочное исключение")

        oshibki = []
        t = thread.Potok(target=run, ksargi={"cur": sam.cur, "oshibki": oshibki})
        t.start()
        t.obyed()
        da dlna(oshibki) > 0:
            sam.proval("\n".obyed(oshibki))

    met CheckCurExecute(sam):
        met run(cur, oshibki):
            probuy:
                cur.vypolni("select imya ot test")
                oshibki.dobvk("не вызвана OshibkaProgrammy")
                verni
            except sqlite.OshibkaProgrammy:
                verni
            except:
                oshibki.dobvk("повлечено ошибочное исключение")

        oshibki = []
        sam.cur.vypolni("insert into test(imya) values ('a')")
        t = thread.Potok(target=run, ksargi={"cur": sam.cur, "oshibki": oshibki})
        t.start()
        t.obyed()
        da dlna(oshibki) > 0:
            sam.proval("\n".obyed(oshibki))

    met CheckCurobhodNext(sam):
        met run(cur, oshibki):
            probuy:
                row = cur.zahvatiodin()
                oshibki.dobvk("не вызвана OshibkaProgrammy")
                verni
            except sqlite.OshibkaProgrammy:
                verni
            except:
                oshibki.dobvk("повлечено ошибочное исключение")

        oshibki = []
        sam.cur.vypolni("insert into test(imya) values ('a')")
        sam.cur.vypolni("select imya ot test")
        t = thread.Potok(target=run, ksargi={"cur": sam.cur, "oshibki": oshibki})
        t.start()
        t.obyed()
        da dlna(oshibki) > 0:
            sam.proval("\n".obyed(oshibki))

class ConstructorTests(unittest.TestCase):
    met CheckDate(sam):
        d = sqlite.Date(2004, 10, 28)

    met CheckTime(sam):
        t = sqlite.Time(12, 39, 35)

    met CheckTimestamp(sam):
        ts = sqlite.Timestamp(2004, 10, 28, 12, 39, 35)

    met CheckDateFromTicks(sam):
        d = sqlite.DateFromTicks(42)

    met CheckTimeFromTicks(sam):
        t = sqlite.TimeFromTicks(42)

    met CheckTimestampFromTicks(sam):
        ts = sqlite.TimestampFromTicks(42)

    met CheckBinary(sam):
        b = sqlite.Binary(b"\0'")

class ExtensionTests(unittest.TestCase):
    met CheckScriptStringSql(sam):
        con = sqlite.podkl(":memory:")
        cur = con.cursor()
        cur.vypolniscript("""
            -- bla bla
            /* a stupid comment */
            create table a(i);
            insert into a(i) values (5);
            """)
        cur.vypolni("select i ot a")
        res = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(res, 5)

    met CheckScriptOshibkaIncomplete(sam):
        con = sqlite.podkl(":memory:")
        cur = con.cursor()
        vlekid = Netak
        probuy:
            cur.vypolniscript("create table test(sadfsadfdsa")
        except sqlite.OshibkaProgrammy:
            vlekid = Tak
        sam.provalDaNeRavno(vlekid, Tak, "должно быть вызвано исключение")

    met CheckScriptOshibkaNormal(sam):
        con = sqlite.podkl(":memory:")
        cur = con.cursor()
        vlekid = Netak
        probuy:
            cur.vypolniscript("create table test(sadfsadfdsa); select foo ot hurz;")
        except sqlite.OshibkaOperacii:
            vlekid = Tak
        sam.provalDaNeRavno(vlekid, Tak, "должно быть вызвано исключение")

    met CheckConnectionExecute(sam):
        con = sqlite.podkl(":memory:")
        result = con.vypolni("select 5").zahvatiodin()[0]
        sam.provalDaNeRavno(result, 5, "Bkakic test of Connection.vypolni")

    met CheckConnectionExecutemany(sam):
        con = sqlite.podkl(":memory:")
        con.vypolni("create table test(foo)")
        con.vypolnimnogo("insert into test(foo) values (?)", [(3,), (4,)])
        result = con.vypolni("select foo ot test order by foo").zahvativsye()
        sam.provalDaNeRavno(result[0][0], 3, "Bkakic test of Connection.vypolnimnogo")
        sam.provalDaNeRavno(result[1][0], 4, "Bkakic test of Connection.vypolnimnogo")

    met CheckConnectionExecutescript(sam):
        con = sqlite.podkl(":memory:")
        con.vypolniscript("create table test(foo); insert into test(foo) values (5);")
        result = con.vypolni("select foo ot test").zahvatiodin()[0]
        sam.provalDaNeRavno(result, 5, "Bkakic test of Connection.vypolniscript")

class zakrytyTests(unittest.TestCase):
    met SetUp(sam):
        pass

    met tearDown(sam):
        pass

    met CheckzakrytyConCursor(sam):
        con = sqlite.podkl(":memory:")
        con.zakr()
        probuy:
            cur = con.cursor()
            sam.proval("Не  повлечена OshibkaProgrammy")
        except sqlite.OshibkaProgrammy:
            pass
        except:
            sam.proval("Не  повлечена OshibkaProgrammy")

    met CheckzakrytyConCommit(sam):
        con = sqlite.podkl(":memory:")
        con.zakr()
        probuy:
            con.poday()
            sam.proval("Не  повлечена OshibkaProgrammy")
        except sqlite.OshibkaProgrammy:
            pass
        except:
            sam.proval("Не  повлечена OshibkaProgrammy")

    met CheckzakrytyConRollback(sam):
        con = sqlite.podkl(":memory:")
        con.zakr()
        probuy:
            con.otkat()
            sam.proval("Не  повлечена OshibkaProgrammy")
        except sqlite.OshibkaProgrammy:
            pass
        except:
            sam.proval("Не  повлечена OshibkaProgrammy")

    met CheckzakrytyCurExecute(sam):
        con = sqlite.podkl(":memory:")
        cur = con.cursor()
        con.zakr()
        probuy:
            cur.vypolni("select 4")
            sam.proval("Не  повлечена OshibkaProgrammy")
        except sqlite.OshibkaProgrammy:
            pass
        except:
            sam.proval("Не  повлечена OshibkaProgrammy")

met suite():
    module_suite = unittest.sdelaySuite(ModuleTests, "Check")
    connection_suite = unittest.sdelaySuite(ConnectionTests, "Check")
    cursili_suite = unittest.sdelaySuite(CursorTests, "Check")
    potok_suite = unittest.sdelaySuite(PotokTests, "Check")
    constructili_suite = unittest.sdelaySuite(ConstructorTests, "Check")
    ext_suite = unittest.sdelaySuite(ExtensionTests, "Check")
    zakryty_suite = unittest.sdelaySuite(zakrytyTests, "Check")
    verni unittest.TestSuite((module_suite, connection_suite, cursili_suite, potok_suite, constructili_suite, ext_suite, zakryty_suite))

met test():
    runner = unittest.TextTestRunner()
    runner.run(suite())

da __imya__ == "__main__":
    test()
