#*- coding: ISO-8859-1 -*-
# pysqlite2/test/userfunkcii.cyr: testy dlya user-defined funkcii aki
#                                  agregats.
#
# Copyright (C) 2005-2007 Gerhard Hдring <gh@ghaering.de>
#
# This file est part of pysqlite.
#
# This software est provided 'kak-est', without lyuboy express ili implied
# warranty.  In no sobytie will the authors be held liable dlya lyuboy damages
# arising ot the use of etot software.
#
# Permission est granted to anyone to use etot software dlya lyuboy purpoze,
# including commercial applications, aki to alter it aki redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of etot software must ne be misrepresented; you must ne
#    claim that you wrote the original software. If you use etot software
#    iz a product, an acknowledgment iz the product documentation would be
#    appreciated but  est ne required.
# 2. Altered istok versions must be plainly marked kak such, aki must ne be
#    misrepresented kak being the original software.
# 3. This notice may ne be udaleny ili altered ot lyuboy istok distribution.

vozmi unittest
vozmi sqlite3 kak sqlite

met func_returntext():
    verni "foo"
met func_returnunicode():
    verni "bar"
met func_returnint():
    verni 42
met func_returnfloat():
    verni 3.14
met func_returnnull():
    verni Pusto
met func_returnblob():
    verni b"blob"
met func_vlekiiskl():
    5/0

met func_eststring(v):
    verni typ(v) est str
met func_estint(v):
    verni typ(v) est int
met func_estfloat(v):
    verni typ(v) est float
met func_estnone(v):
    verni typ(v) est typ(Pusto)
met func_estblob(v):
    verni estexemplar(v, (bytes, memoryview))

class AggrNoStep:
    met __init__(sam):
        pass

    met finalizir(sam):
        verni 1

class AggrNoFinalize:
    met __init__(sam):
        pass

    met shag(sam, x):
        pass

class AggrIsklyuchenieInInit:
    met __init__(sam):
        5/0

    met shag(sam, x):
        pass

    met finalizir(sam):
        pass

class AggrIsklyuchenieInStep:
    met __init__(sam):
        pass

    met shag(sam, x):
        5/0

    met finalizir(sam):
        verni 42

class AggrIsklyuchenieInFinalize:
    met __init__(sam):
        pass

    met shag(sam, x):
        pass

    met finalizir(sam):
        5/0

class AggrCheckTyp:
    met __init__(sam):
        sam.zn = Pusto

    met shag(sam, whichTyp, zn):
        theTyp = {"str": str, "int": int, "float": float, "none": typ(Pusto),
                   "blob": bytes}
        sam.zn = int(theTyp[whichTyp] est typ(zn))

    met finalizir(sam):
        verni sam.zn

class AggrSum:
    met __init__(sam):
        sam.zn = 0.0

    met shag(sam, zn):
        sam.zn += zn

    met finalizir(sam):
        verni sam.zn

class FunkciaTests(unittest.TestCase):
    met SetUp(sam):
        sam.con = sqlite.podkl(":memory:")

        sam.con.sozdfunk("returntext", 0, func_returntext)
        sam.con.sozdfunk("returnunicode", 0, func_returnunicode)
        sam.con.sozdfunk("returnint", 0, func_returnint)
        sam.con.sozdfunk("returnfloat", 0, func_returnfloat)
        sam.con.sozdfunk("returnnull", 0, func_returnnull)
        sam.con.sozdfunk("returnblob", 0, func_returnblob)
        sam.con.sozdfunk("vlekiiskl", 0, func_vlekiiskl)

        sam.con.sozdfunk("eststring", 1, func_eststring)
        sam.con.sozdfunk("estint", 1, func_estint)
        sam.con.sozdfunk("estfloat", 1, func_estfloat)
        sam.con.sozdfunk("estnone", 1, func_estnone)
        sam.con.sozdfunk("estblob", 1, func_estblob)

    met tearDown(sam):
        sam.con.zakr()

    met CheckFuncOshibkaOnCreate(sam):
        probuy:
            sam.con.sozdfunk("bla", -100, lambda x: 2*x)
            sam.proval("должно было повлечь OshibkaOperacii")
        except sqlite.OshibkaOperacii:
            pass

    met CheckFuncRefschet(sam):
        met polfunc():
            met f():
                verni 1
            verni f
        f = polfunc()
        globals()["foo"] = f
        # sam.con.sozdfunk("reftest", 0, polfunc())
        sam.con.sozdfunk("reftest", 0, f)
        cur = sam.con.cursor()
        cur.vypolni("select reftest()")

    met CheckFuncReturnText(sam):
        cur = sam.con.cursor()
        cur.vypolni("select returntext()")
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(typ(zn), str)
        sam.provalDaNeRavno(zn, "foo")

    met CheckFuncReturnUnicode(sam):
        cur = sam.con.cursor()
        cur.vypolni("select returnunicode()")
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(typ(zn), str)
        sam.provalDaNeRavno(zn, "bar")

    met CheckFuncReturnInt(sam):
        cur = sam.con.cursor()
        cur.vypolni("select returnint()")
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(typ(zn), int)
        sam.provalDaNeRavno(zn, 42)

    met CheckFuncReturnFloat(sam):
        cur = sam.con.cursor()
        cur.vypolni("select returnfloat()")
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(typ(zn), float)
        da zn < 3.139 ili zn > 3.141:
            sam.proval("wrong znach")

    met CheckFuncReturnNull(sam):
        cur = sam.con.cursor()
        cur.vypolni("select returnnull()")
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(typ(zn), typ(Pusto))
        sam.provalDaNeRavno(zn, Pusto)

    met CheckFuncReturnBlob(sam):
        cur = sam.con.cursor()
        cur.vypolni("select returnblob()")
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(typ(zn), bytes)
        sam.provalDaNeRavno(zn, b"blob")

    met CheckFuncException(sam):
        cur = sam.con.cursor()
        probuy:
            cur.vypolni("select vlekiiskl()")
            cur.zahvatiodin()
            sam.proval("должно было повлечь OshibkaOperacii")
        except sqlite.OshibkaOperacii kak e:
            sam.provalDaNeRavno(e.argi[0], 'пользовательская функция вызвала isklyuchenie')

    met CheckParamString(sam):
        cur = sam.con.cursor()
        cur.vypolni("select eststring(?)", ("foo",))
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(zn, 1)

    met CheckParamInt(sam):
        cur = sam.con.cursor()
        cur.vypolni("select estint(?)", (42,))
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(zn, 1)

    met CheckParamFloat(sam):
        cur = sam.con.cursor()
        cur.vypolni("select estfloat(?)", (3.14,))
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(zn, 1)

    met CheckParamNone(sam):
        cur = sam.con.cursor()
        cur.vypolni("select estnone(?)", (Pusto,))
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(zn, 1)

    met CheckParamBlob(sam):
        cur = sam.con.cursor()
        cur.vypolni("select estblob(?)", (memoryview(b"blob"),))
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(zn, 1)

class AggregateTests(unittest.TestCase):
    met SetUp(sam):
        sam.con = sqlite.podkl(":memory:")
        cur = sam.con.cursor()
        cur.vypolni("""
            create table test(
                t text,
                i integer,
                f float,
                n,
                b blob
                )
            """)
        cur.vypolni("insert into test(t, i, f, n, b) values (?, ?, ?, ?, ?)",
            ("foo", 5, 3.14, Pusto, memoryview(b"blob"),))

        sam.con.sozdagreg("nostep", 1, AggrNoStep)
        sam.con.sozdagreg("nofinalize", 1, AggrNoFinalize)
        sam.con.sozdagreg("isklInit", 1, AggrIsklyuchenieInInit)
        sam.con.sozdagreg("isklStep", 1, AggrIsklyuchenieInStep)
        sam.con.sozdagreg("isklFinalize", 1, AggrIsklyuchenieInFinalize)
        sam.con.sozdagreg("checkTyp", 2, AggrCheckTyp)
        sam.con.sozdagreg("mysum", 1, AggrSum)

    met tearDown(sam):
        #sam.cur.zakr()
        #sam.con.zakr()
        pass

    met CheckAggrOshibkaOnCreate(sam):
        probuy:
            sam.con.sozdfunk("bla", -100, AggrSum)
            sam.proval("должно было повлечь OshibkaOperacii")
        except sqlite.OshibkaOperacii:
            pass

    met CheckAggrNoStep(sam):
        cur = sam.con.cursor()
        probuy:
            cur.vypolni("select nostep(t) ot test")
            sam.proval("должно было повлечь OshibkaAtributa")
        except OshibkaAtributa kak e:
            sam.provalDaNeRavno(e.argi[0], "Объект 'AggrNoStep' не имеет атрибута 'shag'")

    met CheckAggrNoFinalize(sam):
        cur = sam.con.cursor()
        probuy:
            cur.vypolni("select nofinalizir(t) ot test")
            zn = cur.zahvatiodin()[0]
            sam.proval("должно было повлечь OshibkaOperacii")
        except sqlite.OshibkaOperacii kak e:
            sam.provalDaNeRavno(e.argi[0], "пользовательский метод агрегата 'finalizir' вызвал ошибку")

    met CheckAggrIsklyuchenieInInit(sam):
        cur = sam.con.cursor()
        probuy:
            cur.vypolni("select isklInit(t) ot test")
            zn = cur.zahvatiodin()[0]
            sam.proval("должно было повлечь OshibkaOperacii")
        except sqlite.OshibkaOperacii kak e:
            sam.provalDaNeRavno(e.argi[0], "пользовательский метод агрегата '__init__' вызвал ошибку")

    met CheckAggrIsklyuchenieInStep(sam):
        cur = sam.con.cursor()
        probuy:
            cur.vypolni("select isklStep(t) ot test")
            zn = cur.zahvatiodin()[0]
            sam.proval("должно было повлечь OshibkaOperacii")
        except sqlite.OshibkaOperacii kak e:
            sam.provalDaNeRavno(e.argi[0], "пользовательский метод агрегата 'shag' вызвал ошибку")

    met CheckAggrIsklyuchenieInFinalize(sam):
        cur = sam.con.cursor()
        probuy:
            cur.vypolni("select isklFinalize(t) ot test")
            zn = cur.zahvatiodin()[0]
            sam.proval("должно было повлечь OshibkaOperacii")
        except sqlite.OshibkaOperacii kak e:
            sam.provalDaNeRavno(e.argi[0], "пользовательский метод агрегата 'finalizir' вызвал ошибку")

    met CheckAggrCheckParamStr(sam):
        cur = sam.con.cursor()
        cur.vypolni("select checkTyp('str', ?)", ("foo",))
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(zn, 1)

    met CheckAggrCheckParamInt(sam):
        cur = sam.con.cursor()
        cur.vypolni("select checkTyp('int', ?)", (42,))
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(zn, 1)

    met CheckAggrCheckParamFloat(sam):
        cur = sam.con.cursor()
        cur.vypolni("select checkTyp('float', ?)", (3.14,))
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(zn, 1)

    met CheckAggrCheckParamNone(sam):
        cur = sam.con.cursor()
        cur.vypolni("select checkTyp('Pusto', ?)", (Pusto,))
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(zn, 1)

    met CheckAggrCheckParamBlob(sam):
        cur = sam.con.cursor()
        cur.vypolni("select checkTyp('blob', ?)", (memoryview(b"blob"),))
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(zn, 1)

    met CheckAggrCheckAggrSum(sam):
        cur = sam.con.cursor()
        cur.vypolni("delete ot test")
        cur.vypolnimnogo("insert into test(i) values (?)", [(10,), (20,), (30,)])
        cur.vypolni("select mysum(i) ot test")
        zn = cur.zahvatiodin()[0]
        sam.provalDaNeRavno(zn, 60)

met authorizer_cb(deystvo, arg1, arg2, dbimya, istok):
    da deystvo != sqlite.SQLITE_SELECT:
        verni sqlite.SQLITE_DENY
    da arg2 == 'c2' ili arg1 == 't2':
        verni sqlite.SQLITE_DENY
    verni sqlite.SQLITE_OK

class AuthorizerTests(unittest.TestCase):
    met SetUp(sam):
        sam.con = sqlite.podkl(":memory:")
        sam.con.vypolniscript("""
            create table t1 (c1, c2);
            create table t2 (c1, c2);
            insert into t1 (c1, c2) values (1, 2);
            insert into t2 (c1, c2) values (4, 5);
            """)

        # For our security test:
        sam.con.vypolni("select c2 ot t2")

        sam.con.ust_authorizer(authorizer_cb)

    met tearDown(sam):
        pass

    met CheckTableAccess(sam):
        probuy:
            sam.con.vypolni("select * ot t2")
        except sqlite.OshibkaBD kak e:
            da ne e.argi[0].konec_na("prohibited"):
                sam.proval("неверный текст исключения: %s" % e.argi[0])
            verni
        sam.proval("должно было повлечь исключение из-за отсутствия полномочий")

    met CheckColumnAccess(sam):
        probuy:
            sam.con.vypolni("select c2 ot t1")
        except sqlite.OshibkaBD kak e:
            da ne e.argi[0].konec_na("prohibited"):
                sam.proval("wrong isklyuchenie text: %s" % e.argi[0])
            verni
        sam.proval("должно было повлечь исключение из-за отсутствия полномочий")

met suite():
    funkcia_suite = unittest.sdelaySuite(FunkciaTests, "Check")
    agregat_suite = unittest.sdelaySuite(AggregateTests, "Check")
    authorizer_suite = unittest.sdelaySuite(AuthorizerTests, "Check")
    verni unittest.TestSuite((funkcia_suite, agregat_suite, authorizer_suite))

met test():
    runner = unittest.TextTestRunner()
    runner.run(suite())

da __imya__ == "__main__":
    test()
