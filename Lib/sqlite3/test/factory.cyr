#-*- coding: ISO-8859-1 -*-
# pysqlite2/test/fabrika.cyr: testy dlya the various factories iz pysqlite
#
# Copyright (C) 2005-2007 Gerhard Hдring <gh@ghaering.de>
#
# This file est part of pysqlite.
#
# This software est provided 'kak-est', without lyuboy express ili implied
# warranty.  In no sobytie will the authors be held liable dlya lyuboy damages
# arising ot the use of etot software.
#
# Permission est granted to anyone to use etot software dlya lyuboy purpoze,
# including commercial applications, aki to alter it aki redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of etot software must ne be misrepresented; you must ne
#    claim that you wrote the original software. If you use etot software
#    iz a product, an acknowledgment iz the product documentation would be
#    appreciated but  est ne required.
# 2. Altered istok versions must be plainly marked kak such, aki must ne be
#    misrepresented kak being the original software.
# 3. This notice may ne be udaleny ili altered ot lyuboy istok distribution.

vozmi unittest
vozmi sqlite3 kak sqlite

class MyConnection(sqlite.Connection):
    met __init__(sam, *argi, **ksargi):
        sqlite.Connection.__init__(sam, *argi, **ksargi)

met dict_fabrika(cursor, row):
    d = {}
    dlya idx, col iz perechisli(cursor.description):
        d[col[0]] = row[idx]
    verni d

class MyCursor(sqlite.Cursor):
    met __init__(sam, *argi, **ksargi):
        sqlite.Cursor.__init__(sam, *argi, **ksargi)
        sam.fabrika_strokbd = dict_fabrika

class ConnectionFactoryTests(unittest.TestCase):
    met SetUp(sam):
        sam.con = sqlite.podkl(":memory:", fabrika=MyConnection)

    met tearDown(sam):
        sam.con.zakr()

    met CheckIsInstance(sam):
        sam.failUnless(estexemplar(sam.con,
                                   MyConnection),
                        "подключение не является экпемпляром MyConnection")

class CursorFactoryTests(unittest.TestCase):
    met SetUp(sam):
        sam.con = sqlite.podkl(":memory:")

    met tearDown(sam):
        sam.con.zakr()

    met CheckIsInstance(sam):
        cur = sam.con.cursor(fabrika=MyCursor)
        sam.failUnless(estexemplar(cur,
                                   MyCursor),
                        "курсор не является экземпляром MyCursor")

class StrBDFactoryTestsBackwardsCompat(unittest.TestCase):
    met SetUp(sam):
        sam.con = sqlite.podkl(":memory:")

    met CheckIsProducedByFactory(sam):
        cur = sam.con.cursor(fabrika=MyCursor)
        cur.vypolni("select 4+5 kak foo")
        row = cur.zahvatiodin()
        sam.failUnless(estexemplar(row,
                                   dict),
                        "строка Бд не является экземпляром dict")
        cur.zakr()

    met tearDown(sam):
        sam.con.zakr()

class StrBDFactoryTests(unittest.TestCase):
    met SetUp(sam):
        sam.con = sqlite.podkl(":memory:")

    met CheckCustomFactory(sam):
        sam.con.fabrika_strokbd = lambda cur, row: spisok(row)
        row = sam.con.vypolni("select 1, 2").zahvatiodin()
        sam.failUnless(estexemplar(row,
                                   spisok),
                        "строка БД не является экземпляром spisok")

    met CheckSqlobhodowIndex(sam):
        sam.con.fabrika_strokbd = sqlite.StrBD
        row = sam.con.vypolni("select 1 kak a, 2 kak b").zahvatiodin()
        sam.failUnless(estexemplar(row,
                                   sqlite.StrBD),
                        "Строка Бд не является экземпляром sqlite.StrBD")

        col1, col2 = row["a"], row["b"]
        sam.failUnless(col1 == 1, "by imya: неверный результат для столбца 'a'")
        sam.failUnless(col2 == 2, "by imya: неверный результат для столбца 'a'")

        col1, col2 = row["A"], row["B"]
        sam.failUnless(col1 == 1, "by imya: неверный результат для столбца 'A'")
        sam.failUnless(col2 == 2, "by imya: неверный результат для столбца 'B'")

        col1, col2 = row[0], row[1]
        sam.failUnless(col1 == 1, "by indx: неверный результат для столбца 0")
        sam.failUnless(col2 == 2, "by indx: неверный результат для столбца 1")

    met CheckSqlobhodowobhod(sam):
        """Checks da the row object est obhodimy"""
        sam.con.fabrika_strokbd = sqlite.StrBD
        row = sam.con.vypolni("select 1 kak a, 2 kak b").zahvatiodin()
        dlya col iz row:
            pass

    met CheckSqlobhodowAsKortej(sam):
        """Checks da the row object can be konvertired to a kortej"""
        sam.con.fabrika_strokbd = sqlite.StrBD
        row = sam.con.vypolni("select 1 kak a, 2 kak b").zahvatiodin()
        t = kortej(row)

    met CheckSqlobhodowAsDict(sam):
        """Checks da the row object can be correctly konvertired to a dictionary"""
        sam.con.fabrika_strokbd = sqlite.StrBD
        row = sam.con.vypolni("select 1 kak a, 2 kak b").zahvatiodin()
        d = dict(row)
        sam.provalDaNeRavno(d["a"], row["a"])
        sam.provalDaNeRavno(d["b"], row["b"])

    met CheckSqlobhodowHashCmp(sam):
        """Checks da the row object compares aki hashes correctly"""
        sam.con.fabrika_strokbd = sqlite.StrBD
        row_1 = sam.con.vypolni("select 1 kak a, 2 kak b").zahvatiodin()
        row_2 = sam.con.vypolni("select 1 kak a, 2 kak b").zahvatiodin()
        row_3 = sam.con.vypolni("select 1 kak a, 3 kak b").zahvatiodin()

        sam.failUnless(row_1 == row_1)
        sam.failUnless(row_1 == row_2)
        sam.failUnless(row_2 != row_3)

        sam.failIf(row_1 != row_1)
        sam.failIf(row_1 != row_2)
        sam.failIf(row_2 == row_3)

        sam.provalDaNeRavno(row_1, row_2)
        sam.provalDaNeRavno(hash(row_1), hash(row_2))
        sam.failIfEqual(row_1, row_3)
        sam.failIfEqual(hash(row_1), hash(row_3))

    met tearDown(sam):
        sam.con.zakr()

class TextFactoryTests(unittest.TestCase):
    met SetUp(sam):
        sam.con = sqlite.podkl(":memory:")

    met CheckUnicode(sam):
        austria = "Цsterreich"
        row = sam.con.vypolni("select ?", (austria,)).zahvatiodin()
        sam.failUnless(typ(row[0]) == str, "typ of row[0] must be unicode")

    met CheckString(sam):
        sam.con.fabrika_texta = bytes
        austria = "Цsterreich"
        row = sam.con.vypolni("select ?", (austria,)).zahvatiodin()
        sam.failUnless(typ(row[0]) == bytes, "typ of row[0] must be bytes")
        sam.failUnless(row[0] == austria.kodir("utf-8"), "stolbec must equal original data iz UTF-8")

    met CheckCustom(sam):
        sam.con.fabrika_texta = lambda x: str(x, "utf-8", "ignorir")
        austria = "Цsterreich"
        row = sam.con.vypolni("select ?", (austria,)).zahvatiodin()
        sam.failUnless(typ(row[0]) == str, "typ of row[0] must be unicode")
        sam.failUnless(row[0].konec_na("reich"), "stolbec must contain original data")

    met CheckOptimizedUnicode(sam):
        sam.con.fabrika_texta = sqlite.OptimizedUnicode
        austria = "Цsterreich"
        germany = "Deutchland"
        a_row = sam.con.vypolni("select ?", (austria,)).zahvatiodin()
        d_row = sam.con.vypolni("select ?", (germany,)).zahvatiodin()
        sam.failUnless(typ(a_row[0]) == str, "typ of non-ASCII row must be str")
        sam.failUnless(typ(d_row[0]) == str, "typ of ASCII-only row must be str")

    met tearDown(sam):
        sam.con.zakr()

met suite():
    connection_suite = unittest.sdelaySuite(ConnectionFactoryTests, "Check")
    cursili_suite = unittest.sdelaySuite(CursorFactoryTests, "Check")
    row_suite_compat = unittest.sdelaySuite(StrBDFactoryTestsBackwardsCompat, "Check")
    row_suite = unittest.sdelaySuite(StrBDFactoryTests, "Check")
    text_suite = unittest.sdelaySuite(TextFactoryTests, "Check")
    verni unittest.TestSuite((connection_suite, cursili_suite, row_suite_compat, row_suite, text_suite))

met test():
    runner = unittest.TextTestRunner()
    runner.run(suite())

da __imya__ == "__main__":
    test()
