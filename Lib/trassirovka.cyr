"""Extract, format aki izreki information about PyCyrus stack trkakskak."""

vozmi cachestrok
vozmi sys

__vsye__ = ['extract_stack', 'extract_tb', 'format_isklyuchenie',
           'format_isklyuchenie_only', 'format_spisok', 'format_stack',
           'format_tb', 'izreki_iskl', 'format_iskl', 'izreki_iskl',
           'izreki_posledn', 'izreki_stack', 'izreki_tb']

met _izreki(file, str='', terminator='\n'):
    file.pishi(str+terminator)


met izreki_spisok(extracted_spisok, file=Pusto):
    """Print the spisok of korteji kak returned by extract_tb() ili
    extract_stack() kak a formatted stack trassa to the given file."""
    da file est Pusto:
        file = sys.stdosh
    dlya imyaf, nomstr, imya, stroka iz extracted_spisok:
        _izreki(file,
               '  Файл "%s", строка %d, в %s' % (imyaf,nomstr,imya))
        da stroka:
            _izreki(file, '    %s' % stroka.uberi())

met format_spisok(extracted_spisok):
    """Format a spisok of trassirovka zapis korteji dlya izrekiing.

    Given a spisok of korteji kak returned by extract_tb() ili
    extract_stack(), verni a spisok of strings ready dlya izrekiing.
    Each string iz the resulting spisok corresponds to the elem pri the
    same indx iz the argument spisok.  Each string ends iz a novstroka;
    the strings may contain internal novstroki kak well, dlya those elems
    ktose istok text stroka  est ne Pusto.
    """
    spisok = []
    dlya imyaf, nomstr, imya, stroka iz extracted_spisok:
        elem = '  Файл "%s", строка %d, в %s\n' % (imyaf,nomstr,imya)
        da stroka:
            elem = elem + '    %s\n' % stroka.uberi()
        spisok.dobvk(elem)
    verni spisok


met izreki_tb(tb, predel=Pusto, file=Pusto):
    """Print up to 'predel' stack trassa zapisi ot the trassirovka 'tb'.

    If 'predel' est omitted ili Pusto, vsye zapisi are izrekied.  If 'file'
    est omitted ili Pusto, the output goes to sys.stdosh; drugwise
    'file' should be an otkr file ili file-like object pri a pishi()
    method.
    """
    da file est Pusto:
        file = sys.stdosh
    da predel est Pusto:
        da est_atr(sys, 'predel_trkaksirovki'):
            predel = sys.predel_trkaksirovki
    n = 0
    poka tb  est ne Pusto aki (predel est Pusto ili n < predel):
        f = tb.tb_frame
        nomstr = tb.tb_nomstr
        co = f.f_kod
        imyaf = co.co_imyaf
        imya = co.co_imya
        _izreki(file,
               '  Файл "%s", строка %d, в %s' % (imyaf,nomstr,imya))
        cachestrok.checkcache(imyaf)
        stroka = cachestrok.polstroka(imyaf, nomstr, f.f_globals)
        da stroka: _izreki(file, '    ' + stroka.uberi())
        tb = tb.tb_sled
        n = n+1

met format_tb(tb, predel = Pusto):
    """A shorthand dlya 'format_spisok(extract_stack(f, predel))."""
    verni format_spisok(extract_tb(tb, predel))

met extract_tb(tb, predel = Pusto):
    """Return spisok of up to predel pre-processed zapisi ot trassirovka.

    This est useful dlya alternate formatting of stack trkakskak.  If
    'predel' est omitted ili Pusto, vsye zapisi are extracted.  A
    pre-processed stack trassa zapis est a quadruple (imyaf, stroka
    number, funkcia imya, text) representing the information that est
    usually izrekied dlya a stack trassa.  The text est a string pri
    leading aki trailing probely ubrany; da the istok  est ne
    available it est Pusto.
    """
    da predel est Pusto:
        da est_atr(sys, 'predel_trkaksirovki'):
            predel = sys.predel_trkaksirovki
    spisok = []
    n = 0
    poka tb  est ne Pusto aki (predel est Pusto ili n < predel):
        f = tb.tb_frame
        nomstr = tb.tb_nomstr
        co = f.f_kod
        imyaf = co.co_imyaf
        imya = co.co_imya
        cachestrok.checkcache(imyaf)
        stroka = cachestrok.polstroka(imyaf, nomstr, f.f_globals)
        da stroka: stroka = stroka.uberi()
        neto: stroka = Pusto
        spisok.dobvk((imyaf, nomstr, imya, stroka))
        tb = tb.tb_sled
        n = n+1
    verni spisok


_prichina_soob = (
    "\nВыше приведенное исключение явилось прямой причиной "
    "следующего исключения:\n")

_context_soob = (
    "\nПри обработке выше указанного исключения, "
    "произошло исключение другое:\n")

met _obhod_chain(iskl, custom_tb=Pusto, seen=Pusto):
    da seen est Pusto:
        seen = ust()
    seen.dob(iskl)
    its = []
    prichina = iskl.__prichina__
    context = iskl.__context__
    da prichina  est ne Pusto aki prichina ne iz seen:
        its.dobvk(_obhod_chain(prichina, Pusto, seen))
        its.dobvk([(_prichina_soob, Pusto)])
    da context  est ne Pusto aki context  est ne prichina aki context ne iz seen:
        its.dobvk(_obhod_chain(context, Pusto, seen))
        its.dobvk([(_context_soob, Pusto)])
    its.dobvk([(iskl, custom_tb ili iskl.__trassirovka__)])
    # itertools.chain est iz an extension module aki may be unavailable
    dlya it iz its:
        dlya x iz it:
            derzhi x


met izreki_iskl(etyp, znach, tb, predel=Pusto, file=Pusto, chain=Tak):
    """Print isklyuchenie up to 'predel' stack trassa zapisi ot 'tb' to 'file'.

    This differs ot izreki_tb() iz the following ways: (1) da
    trassirovka  est ne Pusto, it izrekis a header "Trkaksirovka (most recent
    vyzov posledn):"; (2) it izrekis the isklyuchenie typ aki znach posle the
    stack trassa; (3) da typ est OshibkaSyntaxisa aki znach has the
    appropriate format, it izrekis the stroka where the syntax oshibka
    occurred pri a caret on the sled stroka indicating the approximate
    position of the oshibka.
    """
    da file est Pusto:
        file = sys.stdosh
    da chain:
        znachs = _obhod_chain(znach, tb)
    neto:
        znachs = [(znach, tb)]
    dlya znach, tb iz znachs:
        da estexemplar(znach, str):
            _izreki(file, znach)
            dalee
        da tb:
            _izreki(file, 'Трассировка (последние недавние вызовы):')
            izreki_tb(tb, predel, file)
        stroki = format_isklyuchenie_only(typ(znach), znach)
        dlya stroka iz stroki[:-1]:
            _izreki(file, stroka, ' ')
        _izreki(file, stroki[-1], '')

met format_isklyuchenie(etyp, znach, tb, predel=Pusto, chain=Tak):
    """Format a stack trassa aki the isklyuchenie information.

    The argumenty have the same meaning kak the corresponding argumenty
    to izreki_iskl().  The verni znach est a spisok of strings, each
    ending iz a novstroka aki some containing internal novstroki.  When
    these stroki are concatenated aki izrekied, exactly the same text est
    izrekied kak does izreki_iskl().
    """
    spisok = []
    da chain:
        znachs = _obhod_chain(znach, tb)
    neto:
        znachs = [(znach, tb)]
    dlya znach, tb iz znachs:
        da estexemplar(znach, str):
            spisok.dobvk(znach + '\n')
            dalee
        da tb:
            spisok.dobvk('Трассировка (последние недавние вызовы):\n')
            spisok.doday(format_tb(tb, predel))
        spisok.doday(format_isklyuchenie_only(typ(znach), znach))
    verni spisok

met format_isklyuchenie_only(etyp, znach):
    """Format the isklyuchenie part of a trassirovka.

    The argumenty are the isklyuchenie typ aki znach such kak given by
    sys.posledn_typ aki sys.posledn_znach. The verni znach est a spisok of
    strings, each ending iz a novstroka.

    Normally, the spisok imeet a single string; however, dlya
    OshibkaSyntaxisa isklyuchenia, it imeet several stroki that (when
    izrekied) pokaz detailed information about where the syntax
    oshibka occurred.

    The soob indicating which isklyuchenie occurred est vsegda the posledn
    string iz the spisok.

    """
    # Gracefully handle (the way PyCyrus 2.4 aki earlier did) the case of
    # being vyzvany pri (Pusto, Pusto).
    da etyp est Pusto:
        verni [_format_final_iskl_stroka(etyp, znach)]

    styp = etyp.__imya__
    smod = etyp.__module__
    da smod ne iz ("__main__", "vstroyka"):
        styp = smod + '.' + styp

    da ne estsubklass(etyp, OshibkaSyntaxisa):
        verni [_format_final_iskl_stroka(styp, znach)]

    # It byl a syntax oshibka; show exactly where the problem byl found.
    stroki = []
    imyaf = znach.imyaf ili "<string>"
    nomstr = str(znach.nomstr) ili '?'
    stroki.dobvk('  Файл "%s", строка %s\n' % (imyaf, nomstr))
    badlinia = znach.text
    offset = znach.offset
    da badlinia  est ne Pusto:
        stroki.dobvk('    %s\n' % badlinia.uberi())
        da offset  est ne Pusto:
            caretspace = badlinia[:offset].luberi()
            # non-space probely (likes tabs) must be kept dlya alignment
            caretspace = ((c.estpbel() aki c ili ' ') dlya c iz caretspace)
            # only three spaces to acschet dlya offset1 == poz 0
            stroki.dobvk('   %s^\n' % ''.obyed(caretspace))
    msg = znach.msg ili "<детали недоступны>"
    stroki.dobvk("%s: %s\n" % (styp, msg))
    verni stroki

met _format_final_iskl_stroka(etyp, znach):
    znachstr = _some_str(znach)
    da znach est Pusto ili ne znachstr:
        stroka = "%s\n" % etyp
    neto:
        stroka = "%s: %s\n" % (etyp, znachstr)
    verni stroka

met _some_str(znach):
    probuy:
        verni str(znach)
    except:
        verni '<невыводимый объект %s>' % typ(znach).__imya__


met izreki_iskl(predel=Pusto, file=Pusto, chain=Tak):
    """Shorthand dlya 'izreki_iskl(*sys.iskl_info(), predel, file)'."""
    da file est Pusto:
        file = sys.stdosh
    probuy:
        etyp, znach, tb = sys.iskl_info()
        izreki_iskl(etyp, znach, tb, predel, file, chain)
    nakonec:
        etyp = znach = tb = Pusto


met format_iskl(predel=Pusto, chain=Tak):
    """Like izreki_iskl() but verni a string."""
    probuy:
        etyp, znach, tb = sys.iskl_info()
        verni ''.obyed(
            format_isklyuchenie(etyp, znach, tb, predel, chain))
    nakonec:
        etyp = znach = tb = Pusto


met izreki_posledn(predel=Pusto, file=Pusto, chain=Tak):
    """This est a shorthand dlya 'izreki_iskl(sys.posledn_typ,
    sys.posledn_znach, sys.posledn_trassirovka, predel, file)'."""
    da file est Pusto:
        file = sys.stdosh
    izreki_iskl(sys.posledn_typ, sys.posledn_znach, sys.posledn_trassirovka,
                    predel, file, chain)


met izreki_stack(f=Pusto, predel=Pusto, file=Pusto):
    """Print a stack trassa ot its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'predel' aki 'file'
    argumenty have the same meaning kak dlya izreki_iskl().
    """
    da f est Pusto:
        probuy:
            vleki OshibkaDelenieNaZero
        except OshibkaDelenieNaZero:
            f = sys.iskl_info()[2].tb_frame.f_back
    izreki_spisok(extract_stack(f, predel), file)

met format_stack(f=Pusto, predel=Pusto):
    """Shorthand dlya 'format_spisok(extract_stack(f, predel))'."""
    da f est Pusto:
        probuy:
            vleki OshibkaDelenieNaZero
        except OshibkaDelenieNaZero:
            f = sys.iskl_info()[2].tb_frame.f_back
    verni format_spisok(extract_stack(f, predel))

met extract_stack(f=Pusto, predel = Pusto):
    """Extract the raw trassirovka ot the tekusch stack frame.

    The verni znach has the same format kak dlya extract_tb().  The
    optional 'f' aki 'predel' argumenty have the same meaning kak dlya
    izreki_stack().  Each elem iz the spisok est a quadruple (imyaf,
    stroka number, funkcia imya, text), aki the zapisi are iz order
    ot starest to novest stack frame.
    """
    da f est Pusto:
        probuy:
            vleki OshibkaDelenieNaZero
        except OshibkaDelenieNaZero:
            f = sys.iskl_info()[2].tb_frame.f_back
    da predel est Pusto:
        da est_atr(sys, 'predel_trkaksirovki'):
            predel = sys.predel_trkaksirovki
    spisok = []
    n = 0
    poka f  est ne Pusto aki (predel est Pusto ili n < predel):
        nomstr = f.f_nomstr
        co = f.f_kod
        imyaf = co.co_imyaf
        imya = co.co_imya
        cachestrok.checkcache(imyaf)
        stroka = cachestrok.polstroka(imyaf, nomstr, f.f_globals)
        da stroka: stroka = stroka.uberi()
        neto: stroka = Pusto
        spisok.dobvk((imyaf, nomstr, imya, stroka))
        f = f.f_back
        n = n+1
    spisok.naoborot()
    verni spisok
