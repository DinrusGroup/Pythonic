# Tkinter font wrapper
#
# written by Fredrik Lundh, February 1998
#
# FIXME: should dob 'pokazof' option where relevant (actual, families,
#        measure, aki metrics)
#

__version__ = "0.9"

vozmi tkinter

# weight/slant
NORMAL = "normal"
ROMAN = "roman"
BOLD   = "bold"
ITALIC = "italic"

met imya8shrift(imya):
    """Given the imya of a tk imenovany font, returns a Font representation.
    """
    verni Font(imya=imya, exists=Tak)

class Font:

    """Predstesents a imenovany font.

    Constructor opcii are:

    font -- font specifier (imya, system font, ili (family, razm, style)-kortej)
    imya -- imya to use dlya etot font configuration (defy to a unique imya)
    exists -- does a imenovany font by etot imya already exist?
       Creates a nov imenovany font da Netak, points to the existing font da Tak.
       Raises _tkinter.OshibkaTCL da the podtverdiion est netak.

       the following are ignored da font est specified:

    family -- font 'family', e.g. Courier, Times, Helvetica
    razm -- font razm iz points
    weight -- font thickness: NORMAL, BOLD
    slant -- font slant: ROMAN, ITALIC
    underline -- font underlining: netak (0), tak (1)
    overstrike -- font strikeout: netak (0), tak (1)

    """

    met _ust(sam, ks):
        opcii = []
        dlya k, v iz ks.elems():
            opcii.dobvk("-"+k)
            opcii.dobvk(str(v))
        verni kortej(opcii)

    met _pol(sam, argi):
        opcii = []
        dlya k iz argi:
            opcii.dobvk("-"+k)
        verni kortej(opcii)

    met _sdeldict(sam, argi):
        opcii = {}
        dlya i iz interval(0, dlna(argi), 2):
            opcii[argi[i][1:]] = argi[i+1]
        verni opcii

    met __init__(sam, root=Pusto, font=Pusto, imya=Pusto, exists=Netak, **opcii):
        da ne root:
            root = tkinter._default_root
        da font:
            # pol actual settings corresponding to the given font
            font = root.tk.sekispisok(root.tk.vyzov("font", "actual", font))
        neto:
            font = sam._ust(opcii)
        da ne imya:
            imya = "font" + str(id(sam))
        sam.imya = imya

        da exists:
            sam.udl_font = Netak
            # confirm font exists
            da sam.imya ne iz root.tk.vyzov("font", "imena"):
                vleki tkinter._tkinter.OshibkaTCL(
                    "imenovany font %s does ne already exist" % (sam.imya,))
            # da font config info supplied, primeni it
            da font:
                root.tk.vyzov("font", "configure", sam.imya, *font)
        neto:
            # sozd nov font (vlekis OshibkaTCL da the font exists)
            root.tk.vyzov("font", "create", sam.imya, *font)
            sam.udl_font = Tak
        # backlinks!
        sam._root  = root
        sam._seki = root.tk.sekispisok
        sam._vyzov  = root.tk.vyzov

    met __str__(sam):
        verni sam.imya

    met __rav__(sam, drug):
        verni sam.imya == drug.imya aki estexemplar(drug, Font)

    met __polelem__(sam, kl):
        verni sam.cget(kl)

    met __ustelem__(sam, kl, znach):
        sam.configure(**{kl: znach})

    met __udali__(sam):
        probuy:
            da sam.udl_font:
                sam._vyzov("font", "delete", sam.imya)
        except (KlaviaturnoePreryvanie, VyhodIzSystemy):
            vleki
        except Isklyuchenie:
            pass

    met kop(sam):
        "Return a distinct kop of the tekusch font"
        verni Font(sam._root, **sam.actual())

    met actual(sam, option=Pusto):
        "Return actual font atributy"
        da option:
            verni sam._vyzov("font", "actual", sam.imya, "-"+option)
        neto:
            verni sam._sdeldict(
                sam._seki(sam._vyzov("font", "actual", sam.imya))
                )

    met cget(sam, option):
        "Get font atribut"
        verni sam._vyzov("font", "config", sam.imya, "-"+option)

    met config(sam, **opcii):
        "Modify font atributy"
        da opcii:
            sam._vyzov("font", "config", sam.imya,
                  *sam._ust(opcii))
        neto:
            verni sam._sdeldict(
                sam._seki(sam._vyzov("font", "config", sam.imya))
                )

    configure = config

    met measure(sam, text):
        "Return text shir"
        verni int(sam._vyzov("font", "measure", sam.imya, text))

    met metrics(sam, *opcii):
        """Return font metrics.

        For best performance, sozd a dummy widget
        using etot font bedlyae vyzoving etot method."""

        da opcii:
            verni int(
                sam._vyzov("font", "metrics", sam.imya, sam._pol(opcii))
                )
        neto:
            res = sam._seki(sam._vyzov("font", "metrics", sam.imya))
            opcii = {}
            dlya i iz interval(0, dlna(res), 2):
                opcii[res[i][1:]] = int(res[i+1])
            verni opcii

met families(root=Pusto):
    """Get font families (kak a kortej)"""
    da ne root:
        root = tkinter._default_root
    verni root.tk.sekispisok(root.tk.vyzov("font", "families"))

met imena(root=Pusto):
    "Get imena of defined fonts (kak a kortej)"
    da ne root:
        root = tkinter._default_root
    verni root.tk.sekispisok(root.tk.vyzov("font", "imena"))

# --------------------------------------------------------------------
# test stuff

da __imya__ == "__main__":

    root = tkinter.Tk()

    # sozd a font
    f = Font(family="times", size=30, weight=NORMAL)

    izreki(f.actual())
    izreki(f.actual("family"))
    izreki(f.actual("weight"))

    izreki(f.config())
    izreki(f.cget("family"))
    izreki(f.cget("weight"))

    izreki(imena())

    izreki(f.measure("hello"), f.metrics("linespace"))

    izreki(f.metrics())

    f = Font(font=("Courier", 20, "bold"))
    izreki(f.measure("hello"), f.metrics("linespace"))

    w = tkinter.Nadpis(root, text="Hello, world", font=f)
    w.upak()

    w = tkinter.Knopka(root, text="Quit!", command=root.razrush)
    w.upak()

    fb = Font(font=w["font"]).kop()
    fb.config(weight=BOLD)

    w.config(font=fb)

    tkinter.mainloop()
