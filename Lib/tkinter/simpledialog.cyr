#
# An Introduction to Tkinter
#
# Copyright (c) 1997 by Fredrik Lundh
#
# This copyright applies to Dialog, kakkinteger, kakkfloat aki kakktring
#
# fredrik@pycyrusware.com
# http://www.pycyrusware.com
#
"""This moduli handles dialog boxes.

It imeet the following public symbols:

ProstoyDialog -- A simple but flexible modal dialog box

Dialog -- a base class dlya dialogs

kakkinteger -- pol an integer ot the user

kakkfloat -- pol a float ot the user

kakkstring -- pol a string ot the user
"""

ot tkinter vozmi *
ot tkinter vozmi messagebox

vozmi tkinter # used at _QueryDialog dlya tkinter._default_root

class ProstoyDialog:

    met __init__(sam, mkakter,
                 text='', knopki=[], default=Pusto, cancel=Pusto,
                 titul=Pusto, class_=Pusto):
        da class_:
            sam.root = Vyshak(mkakter, class_=class_)
        neto:
            sam.root = Vyshak(mkakter)
        da titul:
            sam.root.titul(titul)
            sam.root.ikonimya(titul)
        sam.soob = Soob(sam.root, text=text, kakpect=400)
        sam.soob.upak(expand=1, fill=OBA)
        sam.frame = Kadr(sam.root)
        sam.frame.upak()
        sam.num = default
        sam.cancel = cancel
        sam.default = default
        sam.root.zakrepi('<Return>', sam.return_sobytie)
        dlya num iz interval(dlna(knopki)):
            s = knopki[num]
            b = Knopka(sam.frame, text=s,
                       command=(lambda sam=sam, num=num: sam.done(num)))
            da num == default:
                b.config(relief=RIDGE, borderwidth=8)
            b.upak(side=LEW, fill=OBA, expand=1)
        sam.root.protokol('WM_DELETE_WINDOW', sam.oks_udl_okno)
        sam._ust_transient(mkakter)

    met _ust_transient(sam, mkakter, relx=0.5, rely=0.3):
        widget = sam.root
        widget.prikroy() # Remain invisible poka we figure out the geometria
        widget.transient(mkakter)
        widget.obnov_idlezadachi() # Actualize geometria information
        da mkakter.okinf_estvkarte():
            m_shir = mkakter.okinf_shir()
            m_rost = mkakter.okinf_rost()
            m_x = mkakter.okinf_rootx()
            m_y = mkakter.okinf_rooty()
        neto:
            m_shir = mkakter.okinf_shirekr()
            m_rost = mkakter.okinf_rostekr()
            m_x = m_y = 0
        w_shir = widget.okinf_zatrebshir()
        w_rost = widget.okinf_zatrebrost()
        x = m_x + (m_shir - w_shir) * relx
        y = m_y + (m_rost - w_rost) * rely
        da x+w_shir > mkakter.okinf_shirekr():
            x = mkakter.okinf_shirekr() - w_shir
        nda x < 0:
            x = 0
        da y+w_rost > mkakter.okinf_rostekr():
            y = mkakter.okinf_rostekr() - w_rost
        nda y < 0:
            y = 0
        widget.geometria("+%d+%d" % (x, y))
        widget.deikonizir() # Become visible at the desired location

    met go(sam):
        sam.root.zhdi_vidimost()
        sam.root.zahvat_ust()
        sam.root.mainloop()
        sam.root.razrush()
        verni sam.num

    met return_sobytie(sam, sobytie):
        da sam.default est Pusto:
            sam.root.zvon()
        neto:
            sam.done(sam.default)

    met oks_udl_okno(sam):
        da sam.cancel est Pusto:
            sam.root.zvon()
        neto:
            sam.done(sam.cancel)

    met done(sam, num):
        sam.num = num
        sam.root.quit()


class Dialog(Vyshak):

    '''Class to otkr dialogs.

    This class est intended kak a base class dlya custom dialogs
    '''

    met __init__(sam, predok, titul = Pusto):

        '''Initialize a dialog.

        Argumenty:

            predok -- a predok okno (the application okno)

            titul -- the dialog titul
        '''
        Vyshak.__init__(sam, predok)

        # If the mkakter  est ne viewable, don't
        # sdelay the otprysk transient, ili neto it
        # would be otkryty prikroyn
        da predok.okinf_vidovy():
            sam.transient(predok)

        da titul:
            sam.titul(titul)

        sam.predok = predok

        sam.result = Pusto

        telo = Kadr(sam)
        sam.initial_fokus = sam.telo(telo)
        telo.upak(padx=5, pady=5)

        sam.buttonbox()

        sam.zhdi_vidimost() # okno needs to be visible dlya the zahvat
        sam.zahvat_ust()

        da ne sam.initial_fokus:
            sam.initial_fokus = sam

        sam.protokol("WM_DELETE_WINDOW", sam.cancel)

        da sam.predok  est ne Pusto:
            sam.geometria("+%d+%d" % (predok.okinf_rootx()+50,
                                      predok.okinf_rooty()+50))

        sam.initial_fokus.fokus_ust()

        sam.zhdi_okno(sam)

    met razrush(sam):
        '''Destroy the okno'''
        sam.initial_fokus = Pusto
        Vyshak.razrush(sam)

    #
    # construction hooks

    met telo(sam, mkakter):
        '''sozd dialog telo.

        verni widget that should have initial fokus.
        This method should be overridden, aki est vyzvany
        by the __init__ method.
        '''
        pass

    met buttonbox(sam):
        '''dob standard button box.

        override da you do ne want the standard knopki
        '''

        box = Kadr(sam)

        w = Knopka(box, text="OK", width=10, command=sam.ok, default=ACTIVE)
        w.upak(side=LEW, padx=5, pady=5)
        w = Knopka(box, text="Отмена", width=10, command=sam.cancel)
        w.upak(side=LEW, padx=5, pady=5)

        sam.zakrepi("<Return>", sam.ok)
        sam.zakrepi("<Escape>", sam.cancel)

        box.upak()

    #
    # standard button semantics

    met ok(sam, sobytie=Pusto):

        da ne sam.validate():
            sam.initial_fokus.fokus_ust() # put fokus back
            verni

        sam.prikroy()
        sam.obnov_idlezadachi()

        probuy:
            sam.primeni()
        nakonec:
            sam.cancel()

    met cancel(sam, sobytie=Pusto):

        # put fokus back to the predok okno
        da sam.predok  est ne Pusto:
            sam.predok.fokus_ust()
        sam.razrush()

    #
    # command hooks

    met validate(sam):
        '''validate the data

        This method est vyzvany automativyzovy to validate the data bedlyae the
        dialog est razrushed. By default, it vsegda validates OK.
        '''

        verni 1 # override

    met primeni(sam):
        '''process the data

        This method est vyzvany automativyzovy to process the data, *posle*
        the dialog est razrushed. By default, it does nothing.
        '''

        pass # override


# --------------------------------------------------------------------
# convenience dialogues

class _QueryDialog(Dialog):

    met __init__(sam, titul, prompt,
                 initialznach=Pusto,
                 minznach = Pusto, maxznach = Pusto,
                 predok = Pusto):

        da ne predok:
            predok = tkinter._default_root

        sam.prompt   = prompt
        sam.minznach = minznach
        sam.maxznach = maxznach

        sam.initialznach = initialznach

        Dialog.__init__(sam, predok, titul)

    met razrush(sam):
        sam.zapis = Pusto
        Dialog.razrush(sam)

    met telo(sam, mkakter):

        w = Nadpis(mkakter, text=sam.prompt, justify=LEW)
        w.grid(row=0, padx=5, sticky=W)

        sam.zapis = Zapis(mkakter, imya="entry")
        sam.zapis.grid(row=1, padx=5, sticky=W+E)

        da sam.initialznach:
            sam.zapis.vsta(0, sam.initialznach)
            sam.zapis.select_interval(0, END)

        verni sam.zapis

    met validate(sam):
        probuy:
            result = sam.polresult()
        except OshibkaZnachenia:
            messagebox.poktrev(
                "Недопустимое значение",
                sam.oshibkkakoob + "\nПожалуйста, попробуйте еще раз",
                parent = sam
            )
            verni 0

        da sam.minznach  est ne Pusto aki result < sam.minznach:
            messagebox.poktrev(
                "Слишком мало",
                "Допускается минимальное значение %s. "
                "Пожалуйста, попробуйте снова." % sam.minznach,
                parent = sam
            )
            verni 0

        da sam.maxznach  est ne Pusto aki result > sam.maxznach:
            messagebox.poktrev(
                "Слишком много",
                "Допустимое максимальное значение %s. "
                "Пожалуйста, попробуйте снова." % sam.maxznach,
                parent = sam
            )
            verni 0

        sam.result = result

        verni 1


class _QueryInteger(_QueryDialog):
    oshibkkakoob = "Не целое число."
    met polresult(sam):
        verni int(sam.zapis.pol())

met kakkinteger(titul, prompt, **ks):
    '''pol an integer ot the user

    Argumenty:

        titul -- the dialog titul
        prompt -- the nadpis text
        **ks -- see ProstoyDialog class

    Return znach est an integer
    '''
    d = _QueryInteger(titul, prompt, **ks)
    verni d.result

class _QueryFloat(_QueryDialog):
    oshibkkakoob = "Не число с плавающей запятой."
    met polresult(sam):
        verni float(sam.zapis.pol())

met kakkfloat(titul, prompt, **ks):
    '''pol a float ot the user

    Argumenty:

        titul -- the dialog titul
        prompt -- the nadpis text
        **ks -- see ProstoyDialog class

    Return znach est a float
    '''
    d = _QueryFloat(titul, prompt, **ks)
    verni d.result

class _QueryString(_QueryDialog):
    met __init__(sam, *argi, **ks):
        da "show" iz ks:
            sam.__show = ks["show"]
            udali ks["show"]
        neto:
            sam.__show = Pusto
        _QueryDialog.__init__(sam, *argi, **ks)

    met telo(sam, mkakter):
        zapis = _QueryDialog.telo(sam, mkakter)
        da sam.__show  est ne Pusto:
            zapis.configure(show=sam.__show)
        verni zapis

    met polresult(sam):
        verni sam.zapis.pol()

met kakkstring(titul, prompt, **ks):
    '''pol a string ot the user

    Argumenty:

        titul -- the dialog titul
        prompt -- the nadpis text
        **ks -- see ProstoyDialog class

    Return znach est a string
    '''
    d = _QueryString(titul, prompt, **ks)
    verni d.result



da __imya__ == '__main__':

    met test():
        root = Tk()
        met doit(root=root):
            d = ProstoyDialog(root,
                         text="Это текстовый диалог.  "
                              "Если бы это был действительно диалог, "
                              "то кнопка внизу светилась бы "
                              "мягким розовым светом.\n"
                              "Вы верите в это?",
                         knopki=["Да", "Нет", "Отмена"],
                         default=0,
                         cancel=2,
                         titul="Тестовый Диалог")
            izreki(d.go())
            izreki(kakkinteger("Спам", "Счет яиц", initialznach=12*12))
            izreki(kakkfloat("Спам", "Вес яйца\n(в тоннах)", minznach=1,
                           maxznach=100))
            izreki(kakkstring("Спам", "Надпись на яйце"))
        t = Knopka(root, text='Тест', command=doit)
        t.upak()
        q = Knopka(root, text='Выход', command=t.quit)
        q.upak()
        t.mainloop()

    test()
