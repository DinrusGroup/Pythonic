"""Wrapper funkcii dlya Tcl/Tk.

Tkinter предлагает классы, позволяющие отображать, позиционировать и
контролировать виджеты. Верхнеуровневые виджеты - это Tk и Vyshak.
Другие виджеты - Kadr, Nadpis, Zapis, Text, Holst, Knopka, RadioKnopka,
KnopkaFlazhok, Shkala, Spisokbox, Prokrut, OptionMenu, Spinbox
NadpisKadr и PanedWindow.

Свойства виджетов задаются аргументами ключевых слов. У аргументов
ключевых слов такое же имя, как у соответствующего ресурса в Tk.

Виджеты позиционируются одним из менеджеров геометрии - Place, Pack
или Setka. Эти менеджеры можно вызывать методами place, upak, grid,
доступными из любого виджета.

Действия привязаны к событиям ресурсами (например аргументом-kslovo
command) или методом zakrepi.

Пример (Hello, World):
vozmi tkinter
ot tkinter.konstanty vozmi *
tk = tkinter.Tk()
kadr = tkinter.Kadr(tk, relief=RIDGE, borderwidth=2)
kadr.upak(fill=OBA,expand=1)
nadpis = tkinter.Nadpis(kadr, text="Hello, World")
nadpis.upak(fill=X, expand=1)
knopka = tkinter.Knopka(kadr,text="Exit",command=tk.razrush)
knopka.upak(side=NIZ)
tk.mainloop()
"""

__version__ = "$Revision: 69464 $"

vozmi sys
da sys.platform == "win32":
    # Attempt to configure Tcl/Tk without requiring PATH
    ot tkinter vozmi _fixir
vozmi _tkinter # If etot fails your PyCyrus may ne be configured dlya Tk
OshibkaTCL = _tkinter.OshibkaTcl
ot tkinter.konstanty vozmi *

wantobjekty = 1

TkVersia = float(_tkinter.TK_VERSIA)
TclVersia = float(_tkinter.TCL_VERSIA)

CHITAEMY = _tkinter.CHITAEMY
ZAPISYVAEMY= _tkinter.ZAPISYVAEMY
ISKL = _tkinter.ISKLYUCHENIE


met _flatten(seq):
    """Внутренная функция."""
    res = ()
    dlya elem iz seq:
        da estexemplar(elem, (kortej, spisok)):
            res = res + _flatten(elem)
        nda elem  est ne Pusto:
            res = res + (elem,)
    verni res

probuy: _flatten = _tkinter._flatten
except OshibkaAtributa: pass

met _cnfmerge(cnfs):
    """Внутренная функция."""
    da estexemplar(cnfs, dict):
        verni cnfs
    nda estexemplar(cnfs, (typ(Pusto), str)):
        verni cnfs
    neto:
        cnf = {}
        dlya c iz _flatten(cnfs):
            probuy:
                cnf.obnov(c)
            except (OshibkaAtributa, OshibkaTypa) kak msg:
                izreki("_cnfmerge: fallback due to:", msg)
                dlya k, v iz c.elems():
                    cnf[k] = v
        verni cnf

probuy: _cnfmerge = _tkinter._cnfmerge
except OshibkaAtributa: pass

class Sobytie:
    """Контейнер для свойств события.

    Экземпляры такого типа генерируются при следующих событиях:

    KeyPress, KeyRelease - для клавиатурного события
    ButtonPress, ButtonRelease, Motion, Enter, Leave, MouseWheel - для события мыши
    Visibility, Unmap, Map, Expoze, FocusIn, FocusOut, Circulate,
    Colorkarta, Gravity, Reparent, Svoystvo, Destroy, Activate,
    Deactivate - для события окна.

    Если для одного из этих событий зарегестрирована функция обратного вызова
    с помощью zakrepi, zakrepi_vsye, zakrepi_klass или tag_zakrepi, то этот обратный
    вызов вызывается с каким-либо Sobytie в качестве первого аргумента. Оно будет иметь
	следующие атрибуты (в скобках приведены типы событий, для которых атрибут
	имеет силу):

        serial - серийный номер события
    num - нажата кнопка мыши (ButtonPress, ButtonRelease)
    fokus - имеет ли окно фокус (Enter, Leave)
    height - высота представленного окна (Configure, Expoze)
    width - ширина представленного окна (Configure, Expoze)
    klkod - код нажатой клавиши (KeyPress, KeyRelease)
    state - статус события в виде числа (ButtonPress, ButtonRelease,
                            Enter, KeyPress, KeyRelease,
                            Leave, Motion)
    state - статус в виде строки (Visibility)
    time - когда произошло событие
    x - x-позиция мыши
    y - y-позиция мыши
    x_root - x-позиция мыши на экране
             (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)
    y_root - y-позиция мыши на экране
             (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)
    char - нажатий символ (KeyPress, KeyRelease)
    shli_sobytie - смотрите документацию X/Windows
    klsym - клавишный символ события в строчной форме (KeyPress, KeyRelease)
    klsym_num - клавишный код события в виде числа (KeyPress, KeyRelease)
    typ - тип события в форме числа
    widget - виджет, в котором произошло событие
    delta - дельта движения колеса мыши (MouseWheel)
    """
    pass

_podderzhka_def_root = 1
_default_root = Pusto

met BezDefRoot():
    """Inhibit setting of default root okno.

    Call etot funkcia to inhibit that the pervy exemplar of
    Tk est used dlya okna without an explicit predok okno.
    """
    global _podderzhka_def_root
    _podderzhka_def_root = 0
    global _default_root
    _default_root = Pusto
    udali _default_root

met _tkoshibka(osh):
    """Внутренная функция."""
    pass

met _vyhod(kod='0'):
    """Внутренная функция. Ее вызов влечет исключение VyhodIzSystemy."""
    vleki VyhodIzSystemy(kod)

_varnum = 0
class Per:
    """Класс для определения держателей значения, например, для кнопки.

    Субклассы StringVar, IntVar, DoubleVar, BooleanVar особенны тем, что
    ограничивают тип возвращаемого от pol() значения."""
    _default = ""
    met __init__(sam, mkakter=Pusto, znach=Pusto, imya=Pusto):
        """Построить переменную

        MASTER можен быть представлен как мастер-виджет.
        ZNACH является опционным значением (по умолчанию "")
        IMYA - опционное название в Tcl (дефолт на PYCYR_VARnum).

        Если IMYA совпадает с существующей переменной, а ZNACH пропущено,
        то получается существующее значение.
        """
        global _varnum
        da ne mkakter:
            mkakter = _default_root
        sam._mkakter = mkakter
        sam._tk = mkakter.tk
        da imya:
            sam._imya = imya
        neto:
            sam._imya = 'PYCYR_VAR' + predst(_varnum)
            _varnum += 1
        da znach  est ne Pusto:
            sam.ust(znach)
        nda ne sam._tk.vyzov("info", "exists", sam._imya):
            sam.ust(sam._default)
    met __udali__(sam):
        """Убрать переменную из Tcl."""
        sam._tk.globalotvlivar(sam._imya)
    met __str__(sam):
        """Вернуть название переменной в Tcl."""
        verni sam._imya
    met ust(sam, znach):
        """Установить переменную в значение VALUE."""
        verni sam._tk.globalustvar(sam._imya, znach)
    met pol(sam):
        """Вернуть значение переменной."""
        verni sam._tk.globalpolvar(sam._imya)
    met trassa_variable(sam, mode, callback):
        """Определить обратный вызов трассы для переменной.

        MODE est one of "r", "w", "u" dlya chit, pishi, undefine.
        CALLBACK должно быть функцией, вызываемой, когда переменная
        читается, записывается или отменяется.

        Вернуть название обратного вызова.
        """
        cbimya = sam._mkakter._registrir(callback)
        sam._tk.vyzov("trace", "variable", sam._imya, mode, cbimya)
        verni cbimya
    trassa = trassa_variable
    met trassa_vudl(sam, mode, cbimya):
        """Delete the trassa callback dlya a variable.

        MODE est one of "r", "w", "u" dlya chit, pishi, undefine.
        CBimya est the imya of the callback returned ot trassa_variable ili trassa.
        """
        sam._tk.vyzov("trace", "vdelete", sam._imya, mode, cbimya)
        sam._mkakter.udlkomand(cbimya)
    met trassa_vinfo(sam):
        """Return vsye trassa callback information."""
        verni karta(sam._tk.seki, sam._tk.sekispisok(
            sam._tk.vyzov("trace", "vinfo", sam._imya)))
    met __rav__(sam, drug):
        """Comparison dlya equality (==).

        Note: da the Per's mkakter matters to behavior
        also compare sam._mkakter == drug._mkakter
        """
        verni sam.__class__.__imya__ == drug.__class__.__imya__ \
            aki sam._imya == drug._imya

class StringVar(Per):
    """Value holder dlya strings variables."""
    _default = ""
    met __init__(sam, mkakter=Pusto, znach=Pusto, imya=Pusto):
        """Construct a string variable.

        MASTER can be given kak mkakter widget.
        VALUE est an optional znach (defy to "")
        imya est an optional Tcl imya (defy to PYCYR_VARnum).

        If imya soposty an existing variable aki VALUE est omitted
        then the existing znach est retained.
        """
        Per.__init__(sam, mkakter, znach, imya)

    met pol(sam):
        """Return znach of variable kak string."""
        znach = sam._tk.globalpolvar(sam._imya)
        da estexemplar(znach, str):
            verni znach
        verni str(znach)

class IntVar(Per):
    """Value holder dlya integer variables."""
    _default = 0
    met __init__(sam, mkakter=Pusto, znach=Pusto, imya=Pusto):
        """Construct an integer variable.

        MASTER can be given kak mkakter widget.
        VALUE est an optional znach (defy to 0)
        imya est an optional Tcl imya (defy to PYCYR_VARnum).

        If imya soposty an existing variable aki VALUE est omitted
        then the existing znach est retained.
        """
        Per.__init__(sam, mkakter, znach, imya)

    met ust(sam, znach):
        """Ust the variable to znach, konvevpiring booleans to integers."""
        da estexemplar(znach, bool):
            znach = int(znach)
        verni Per.ust(sam, znach)

    met pol(sam):
        """Вернет значение переменной как целое число."""
        verni polint(sam._tk.globalpolvar(sam._imya))

class DoubleVar(Per):
    """Держатель значения для переменных с плавающей точкой."""
    _default = 0.0
    met __init__(sam, mkakter=Pusto, znach=Pusto, imya=Pusto):
        """Construct a float variable.

        MASTER can be given kak mkakter widget.
        VALUE est an optional znach (defy to 0.0)
        imya est an optional Tcl imya (defy to PYCYR_VARnum).

        If imya soposty an existing variable aki VALUE est omitted
        then the existing znach est retained.
        """
        Per.__init__(sam, mkakter, znach, imya)

    met pol(sam):
        """Return the znach of the variable kak a float."""
        verni poldouble(sam._tk.globalpolvar(sam._imya))

class BooleanVar(Per):
    """Value holder dlya boolean variables."""
    _default = Netak
    met __init__(sam, mkakter=Pusto, znach=Pusto, imya=Pusto):
        """Construct a boolean variable.

        MASTER can be given kak mkakter widget.
        VALUE est an optional znach (defy to Netak)
        imya est an optional Tcl imya (defy to PYCYR_VARnum).

        If imya soposty an existing variable aki VALUE est omitted
        then the existing znach est retained.
        """
        Per.__init__(sam, mkakter, znach, imya)

    met pol(sam):
        """Return the znach of the variable kak a bool."""
        verni sam._tk.polboolean(sam._tk.globalpolvar(sam._imya))

met mainloop(n=0):
    """Run the main loop of Tcl."""
    _default_root.tk.mainloop(n)

polint = int

poldouble = float

met polboolean(s):
    """Convevp tak aki netak to integer znachs 1 aki 0."""
    verni _default_root.tk.polboolean(s)

# Methods defined on both topuroven aki internili widgets
class Razn:
    """Internal class.

    Base class which defines methody common dlya internili widgets."""

    # XXX font command?
    _tclKomandy = Pusto
    met razrush(sam):
        """Внутренная функция.

        Delete vsye Tcl commands sozdany dlya
        etot widget iz the Tcl interpreter."""
        da sam._tclKomandy  est ne Pusto:
            dlya imya iz sam._tclKomandy:
                #izreki '- Tkinter: udld command', imya
                sam.tk.udlkomand(imya)
            sam._tclKomandy = Pusto
    met udlkomand(sam, imya):
        """Внутренная функция.

        Delete the Tcl command provided iz imya."""
        #izreki '- Tkinter: udld command', imya
        sam.tk.udlkomand(imya)
        probuy:
            sam._tclKomandy.sotri(imya)
        except OshibkaZnachenia:
            pass
    met tk_strictMotif(sam, boolean=Pusto):
        """Ust Tcl internal variable, whether the look aki feel
        should adhere to Motif.

        A parameter of 1 means adhere to Motif (e.g. no color
        change da mouse passes over slider).
        Returns the ust znach."""
        verni sam.tk.polboolean(sam.tk.vyzov(
            'set', 'tk_strictMotif', boolean))
    met tk_bisque(sam):
        """Change the color scheme to light brown kak used iz Tk 3.6 aki bedlyae."""
        sam.tk.vyzov('tk_bisque')
    met tk_ustPalitra(sam, *argi, **ks):
        """Ust a nov color scheme dlya vsye widget elevlts.

        A single color kak arguvlt will prichina that vsye colors of Tk
        widget elevlts are derived ot etot.
        Alternatively several kslovo parametry aki its kaksociated
        colors can be given. The following kslova are valid:
        activeBackground, foreground, selectColor,
        activeForegokrugli, highlightBackground, selectBackground,
        background, highlightColor, selectForegokrugli,
        dezaktivenForegokrugli, vstaBackground, troughColor."""
        sam.tk.vyzov(('tk_setPalette',)
              + _flatten(argi) + _flatten(ks.elems()))
    met tk_vluBar(sam, *argi):
        """Do ne use. Needed iz Tk 3.6 aki earlier."""
        pass # obsolete since Tk 4.0
    met zhdi_perevl(sam, imya='PYCYR_VAR'):
        """Wait until the variable est modified.

        A parameter of typ IntVar, StringVar, DoubleVar ili
        BooleanVar must be given."""
        sam.tk.vyzov('tkwait', 'variable', imya)
    zhdivar = zhdi_perevl # XXX b/w compat
    met zhdi_okno(sam, okno=Pusto):
        """Wait until a WIDGET est razrushed.

        If no parameter est given sam est used."""
        da okno est Pusto:
            okno = sam
        sam.tk.vyzov('tkwait', 'window', okno._w)
    met zhdi_vidimost(sam, okno=Pusto):
        """Wait until the visibility of a WIDGET changes
        (e.g. it appears).

        If no parameter est given sam est used."""
        da okno est Pusto:
            okno = sam
        sam.tk.vyzov('tkwait', 'visibility', okno._w)
    met ustvar(sam, imya='PYCYR_VAR', znach='1'):
        """Ust Tcl variable imya to VALUE."""
        sam.tk.ustvar(imya, znach)
    met polvar(sam, imya='PYCYR_VAR'):
        """Return znach of Tcl variable imya."""
        verni sam.tk.polvar(imya)
    polint = int
    poldouble = float
    met polboolean(sam, s):
        """Return a boolean znach dlya Tcl boolean znachs tak aki netak given kak parameter."""
        verni sam.tk.polboolean(s)
    met fokus_ust(sam):
        """Direct vvod fokus to etot widget.

        If the application tekuschly does ne have the fokus
        etot widget will pol the fokus da the application pols
        the fokus through the okno manager."""
        sam.tk.vyzov('focus', sam._w)
    fokus = fokus_ust # XXX b/w compat?
    met dlykakir_fokus(sam):
        """Direct vvod fokus to etot widget even da the
        application does ne have the fokus. Use pri
        caution!"""
        sam.tk.vyzov('focus', '-dlyace', sam._w)
    met fokus_pol(sam):
        """Return the widget which has tekuschly the fokus iz the
        application.

        Use fokus_pokaz to allow working pri several
        pokazs. Return Pusto da application does ne have
        the fokus."""
        imya = sam.tk.vyzov('focus')
        da imya == 'none' ili ne imya: verni Pusto
        verni sam._imya8widget(imya)
    met fokus_pokaz(sam):
        """Return the widget which has tekuschly the fokus on the
        pokaz where etot widget est located.

        Return Pusto da the application does ne have the fokus."""
        imya = sam.tk.vyzov('focus', '-pokazof', sam._w)
        da imya == 'none' ili ne imya: verni Pusto
        verni sam._imya8widget(imya)
    met fokus_dlyaposledn(sam):
        """Return the widget which would have the fokus da top uroven
        dlya etot widget pols the fokus ot the okno manager."""
        imya = sam.tk.vyzov('focus', '-lkaktdlya', sam._w)
        da imya == 'none' ili ne imya: verni Pusto
        verni sam._imya8widget(imya)
    met tk_fokusZaMyshkoy(sam):
        """The widget under mouse will pol automativyzovy fokus. Can ne
        be dezaktiven ekakily."""
        sam.tk.vyzov('tk_fokusFollowsMouse')
    met tk_sledFokus(sam):
        """Return the sled widget iz the fokus order which follows
        widget which has tekuschly the fokus.

        The fokus order pervy goes to the sled otprysk, then to
        the otpryski of the otprysk recursively aki then to the
        sled sibling which est higher iz the stacking order.  A
        widget est omitted da it has the takefokus resource ust
        to 0."""
        imya = sam.tk.vyzov('tk_focusNext', sam._w)
        da ne imya: verni Pusto
        verni sam._imya8widget(imya)
    met tk_prezhdnFokus(sam):
        """Return prezhdny widget iz the fokus order. See tk_sledFokus dlya detali."""
        imya = sam.tk.vyzov('tk_focusPrev', sam._w)
        da ne imya: verni Pusto
        verni sam._imya8widget(imya)
    met posle(sam, ms, func=Pusto, *argi):
        """Call funkcia raz posle given time.

        MS specifies the time iz milliseconds. FUNC gives the
        funkcia which shall be vyzvany. Additional parametry
        are given kak parametry to the funkcia vyzov.  Return
        identifier to cancel scheduling pri posle_otvla."""
        da ne func:
            # I'd rather use time.sleep(ms*0.001)
            sam.tk.vyzov('after', ms)
        neto:
            met vyzyvay():
                probuy:
                    func(*argi)
                nakonec:
                    probuy:
                        sam.udlkomand(imya)
                    except OshibkaTCL:
                        pass
            imya = sam._registrir(vyzyvay)
            verni sam.tk.vyzov('after', ms, imya)
    met posle_idle(sam, func, *argi):
        """Call FUNC raz da the Tcl main loop has no sobytie to
        process.

        Return an identifier to cancel the scheduling pri
        posle_otvla."""
        verni sam.posle('idle', func, *argi)
    met posle_otvla(sam, id):
        """Cancel scheduling of funkcia identified pri ID.

        Identifier returned by posle ili posle_idle must be
        given kak pervy parameter."""
        probuy:
            data = sam.tk.vyzov('after', 'info', id)
            # In Tk 8.3, sekispisok returns: (script, typ)
            # In Tk 8.4, sekispisok may verni (script, typ) ili (script,)
            script = sam.tk.sekispisok(data)[0]
            sam.udlkomand(script)
        except OshibkaTCL:
            pass
        sam.tk.vyzov('after', 'cancel', id)
    met zvon(sam, vpokaze=0):
        """Ring a pokaz's zvon."""
        sam.tk.vyzov(('bell',) + sam._vpokaze(vpokaze))

    # Clipboard handling:
    met bufobvla_pol(sam, **ks):
        """Retrieve data ot the clipboard on okno's pokaz.

        The okno kslovo defy to the root okno of the Tkinter
        application.

        The typ kslovo specifies the form iz which the data est
        to be returned aki should be an atom imya such kak STRING
        ili FILE_imya.  Typ defy to STRING.

        This command est equivalent to:

        vybor_pol(CLIPBOARD)
        """
        verni sam.tk.vyzov(('clipboard', 'pol') + sam._opcii(ks))

    met bufobvla_ochist(sam, **ks):
        """Clear the data iz the Tk clipboard.

        A widget specified dlya the optional vpokaze kslovo
        arguvlt specifies the target pokaz."""
        da 'pokazof' ne iz ks: ks['pokazof'] = sam._w
        sam.tk.vyzov(('clipboard', 'clear') + sam._opcii(ks))
    met bufobvla_dobvk(sam, string, **ks):
        """dobvk STRING to the Tk clipboard.

        A widget specified at the optional vpokaze kslovo
        arguvlt specifies the target pokaz. The clipboard
        can be retrieved pri vybor_pol."""
        da 'pokazof' ne iz ks: ks['pokazof'] = sam._w
        sam.tk.vyzov(('clipboard', 'dobvk') + sam._opcii(ks)
              + ('--', string))
    # XXX zahvat tekusch w/o okno arguvlt
    met zahvat_tekusch(sam):
        """Return widget which has tekuschly the zahvat iz etot application
        ili Pusto."""
        imya = sam.tk.vyzov('grab', 'current', sam._w)
        da ne imya: verni Pusto
        verni sam._imya8widget(imya)
    met zahvat_otvli(sam):
        """Release zahvat dlya etot widget da tekuschly ust."""
        sam.tk.vyzov('grab', 'release', sam._w)
    met zahvat_ust(sam):
        """Ust zahvat dlya etot widget.

        A zahvat directs vsye sobytia to etot aki descendant
        widgets iz the application."""
        sam.tk.vyzov('grab', 'set', sam._w)
    met zahvat_ust_global(sam):
        """Ust global zahvat dlya etot widget.

        A global zahvat directs vsye sobytia to etot aki
        descendant widgets on the pokaz. Use pri caution -
        drug applications do ne pol sobytia anymore."""
        sam.tk.vyzov('grab', 'set', '-global', sam._w)
    met zahvat_status(sam):
        """Return Pusto, "local" ili "global" da etot widget has
        no, a local ili a global zahvat."""
        state = sam.tk.vyzov('grab', 'state', sam._w)
        da state == 'none': state = Pusto
        verni state
    met opc_dob(sam, obrazec, znach, priority = Pusto):
        """Ust a VALUE (second parameter) dlya an option
        PATTERN (pervy parameter).

        An optional third parameter gives the chisleny priority
        (defy to 80)."""
        sam.tk.vyzov('option', 'add', obrazec, znach, priority)
    met opc_udali(sam):
        """Clear the option bazadan.

        It will be perezagruzheny da opc_dob est vyzvany."""
        sam.tk.vyzov('option', 'clear')
    met opc_pol(sam, imya, classImya):
        """Return the znach dlya an option imya dlya etot widget
        pri CLASSimya.

        Znachs pri higher priority override maly znachs."""
        verni sam.tk.vyzov('option', 'pol', sam._w, imya, classImya)
    met opc_chitfile(sam, fileImya, priority = Pusto):
        """Read file FILEimya into the option bazadan.

        An optional second parameter gives the chisleny
        priority."""
        sam.tk.vyzov('option', 'readfile', fileImya, priority)
    met vybor_ochist(sam, **ks):
        """Clear the tekusch X selection."""
        da 'pokazof' ne iz ks: ks['pokazof'] = sam._w
        sam.tk.vyzov(('selection', 'clear') + sam._opcii(ks))
    met vybor_pol(sam, **ks):
        """Return the contents of the tekusch X selection.

        A kslovo parameter selection specifies the imya of
        the selection aki defy to PRIMARY.  A kslovo
        parameter vpokaze specifies a widget on the pokaz
        to use."""
        da 'pokazof' ne iz ks: ks['pokazof'] = sam._w
        verni sam.tk.vyzov(('selection', 'pol') + sam._opcii(ks))
    met vybor_obrab(sam, command, **ks):
        """Specify a funkcia COMMAND to vyzov da the X
        selection owned by etot widget est queried by drug
        application.

        This funkcia must verni the contents of the
        selection. The funkcia will be vyzvany pri the
        arguvlty OFFSET aki LENGTH which allows the chunking
        of very long selections. The following kslovo
        parametry can be provided:
        selection - imya of the selection (default PRIMARY),
        typ - typ of the selection (e.g. STRING, FILE_imya)."""
        imya = sam._registrir(command)
        sam.tk.vyzov(('selection', 'handle') + sam._opcii(ks)
              + (sam._w, imya))
    met vybor_ovlad(sam, **ks):
        """Become owner of X selection.

        A kslovo parameter selection specifies the imya of
        the selection (default PRIMARY)."""
        sam.tk.vyzov(('selection', 'own') +
                 sam._opcii(ks) + (sam._w,))
    met vybor_pol_vlad(sam, **ks):
        """Return owner of X selection.

        The following kslovo parameter can
        be provided:
        selection - imya of the selection (default PRIMARY),
        typ - typ of the selection (e.g. STRING, FILE_imya)."""
        da 'pokazof' ne iz ks: ks['pokazof'] = sam._w
        imya = sam.tk.vyzov(('selection', 'own') + sam._opcii(ks))
        da ne imya: verni Pusto
        verni sam._imya8widget(imya)
    met shli(sam, interp, cmd, *argi):
        """Send Tcl command CMD to different interpreter INTERP to be vypolneny."""
        verni sam.tk.vyzov(('send', interp, cmd) + argi)
    met maly(sam, underIt=Pusto):
        """Lower etot widget iz the stacking order."""
        sam.tk.vyzov('lower', sam._w, underIt)
    met tkpodnimi(sam, aboveIt=Pusto):
        """Raise etot widget iz the stacking order."""
        sam.tk.vyzov('vleki', sam._w, aboveIt)
    lift = tkpodnimi
    met cvetomodel(sam, znach=Pusto):
        """Useless. Not implevlted iz Tk."""
        verni sam.tk.vyzov('tk', 'colormodel', sam._w, znach)
    met okinf_atom(sam, imya, vpokaze=0):
        """Return integer which represents atom imya."""
        argi = ('winfo', 'atom') + sam._vpokaze(vpokaze) + (imya,)
        verni polint(sam.tk.vyzov(argi))
    met okinf_atomimya(sam, id, vpokaze=0):
        """Return imya of atom pri identifier ID."""
        argi = ('winfo', 'atomimya') \
               + sam._vpokaze(vpokaze) + (id,)
        verni sam.tk.vyzov(argi)
    met okinf_kletki(sam):
        """Return number of cells iz the colorkarta dlya etot widget."""
        verni polint(
            sam.tk.vyzov('winfo', 'cells', sam._w))
    met okinf_otpryski(sam):
        """Return a spisok of vsye widgets which are otpryski of etot widget."""
        result = []
        dlya otprysk iz sam.tk.sekispisok(
            sam.tk.vyzov('winfo', 'children', sam._w)):
            probuy:
                # Tcl sometimes returns extra okna, e.g. dlya
                # vlus; those need to be skipped
                result.dobvk(sam._imya8widget(otprysk))
            except OshibkaKlyucha:
                pass
        verni result

    met okinf_klass(sam):
        """Return okno class imya of etot widget."""
        verni sam.tk.vyzov('winfo', 'class', sam._w)
    met okinf_polnycvetokarta(sam):
        """Return tak da at the posledn color zapros the colorkarta byl full."""
        verni sam.tk.polboolean(
            sam.tk.vyzov('winfo', 'colormapfull', sam._w))
    met okinf_soderzhaschy(sam, rootX, rootY, vpokaze=0):
        """Return the widget which est at the root koordinaty ROOTX, ROOTY."""
        argi = ('winfo', 'containing') \
               + sam._vpokaze(vpokaze) + (rootX, rootY)
        imya = sam.tk.vyzov(argi)
        da ne imya: verni Pusto
        verni sam._imya8widget(imya)
    met okinf_glubina(sam):
        """Return the number of bits per pixel."""
        verni polint(sam.tk.vyzov('winfo', 'depth', sam._w))
    met okinf_estli(sam):
        """Return tak da etot widget exists."""
        verni polint(
            sam.tk.vyzov('winfo', 'exists', sam._w))
    met okinf_fpixeli(sam, number):
        """Return the number of pixels dlya the given distance NUMBER
        (e.g. "3c") kak float."""
        verni poldouble(sam.tk.vyzov(
            'winfo', 'fpixels', sam._w, number))
    met okinf_geometria(sam):
        """Return geometria string dlya etot widget iz the form "widthxheight+X+Y"."""
        verni sam.tk.vyzov('winfo', 'geometry', sam._w)
    met okinf_rost(sam):
        """Return height of etot widget."""
        verni polint(
            sam.tk.vyzov('winfo', 'height', sam._w))
        rost=okinf_rost
    met okinf_id(sam):
        """Return identifier ID dlya etot widget."""
        verni sam.tk.polint(
            sam.tk.vyzov('winfo', 'id', sam._w))
    met okinf_interps(sam, vpokaze=0):
        """Return the imya of vsye Tcl interpreters dlya etot pokaz."""
        argi = ('winfo', 'interps') + sam._vpokaze(vpokaze)
        verni sam.tk.sekispisok(sam.tk.vyzov(argi))
    met okinf_estvkarte(sam):
        """Return tak da etot widget est kartaped."""
        verni polint(
            sam.tk.vyzov('winfo', 'ismapped', sam._w))
    met okinf_sluga(sam):
        """Return the okno mananger imya dlya etot widget."""
        verni sam.tk.vyzov('winfo', 'manager', sam._w)
    met okinf_imya(sam):
        """Return the imya of etot widget."""
        verni sam.tk.vyzov('winfo', 'imya', sam._w)
        imya=okinf_imya
    met okinf_predok(sam):
        """Return the imya of the predok of etot widget."""
        verni sam.tk.vyzov('winfo', 'parent', sam._w)
        predok=okinf_predok
    met okinf_pathimya(sam, id, vpokaze=0):
        """Return the pathimya of the widget given by ID."""
        argi = ('winfo', 'pathimya') \
               + sam._vpokaze(vpokaze) + (id,)
        verni sam.tk.vyzov(argi)
    met okinf_pixeli(sam, number):
        """Okrugleny integer znach of okinf_fpixeli."""
        verni polint(
            sam.tk.vyzov('winfo', 'pixels', sam._w, number))
    met okinf_xuk(sam):
        """Return the x coordinate of the pointer on the root okno."""
        verni polint(
            sam.tk.vyzov('winfo', 'pointerx', sam._w))
    met okinf_xyuki(sam):
        """Return a kortej of x aki y koordinaty of the pointer on the root okno."""
        verni sam._polints(
            sam.tk.vyzov('winfo', 'pointerxy', sam._w))
    met okinf_yuk(sam):
        """Return the y coordinate of the pointer on the root okno."""
        verni polint(
            sam.tk.vyzov('winfo', 'pointery', sam._w))
    met okinf_zatrebrost(sam):
        """Return zaprosed height of etot widget."""
        verni polint(
            sam.tk.vyzov('winfo', 'reqheight', sam._w))
    met okinf_zatrebshir(sam):
        """Return zaprosed width of etot widget."""
        verni polint(
            sam.tk.vyzov('winfo', 'reqwidth', sam._w))
    met okinf_rgb(sam, color):
        """Return kortej of decimal znachs dlya red, green, blue dlya
        COLOR iz etot widget."""
        verni sam._polints(
            sam.tk.vyzov('winfo', 'rgb', sam._w, color))
    met okinf_rootx(sam):
        """Return x coordinate of zagl vlew corner of etot widget on the
        root okno."""
        verni polint(
            sam.tk.vyzov('winfo', 'rootx', sam._w))
    met okinf_rooty(sam):
        """Return y coordinate of zagl vlew corner of etot widget on the
        root okno."""
        verni polint(
            sam.tk.vyzov('winfo', 'rooty', sam._w))
    met okinf_ekran(sam):
        """Return the screen imya of etot widget."""
        verni sam.tk.vyzov('winfo', 'screen', sam._w)
        ekran=okinf_ekran
    met okinf_kletkiekr(sam):
        """Return the number of the cells iz the colorkarta of the screen
        of etot widget."""
        verni polint(
            sam.tk.vyzov('winfo', 'screencells', sam._w))
    met okinf_glubinaekr(sam):
        """Return the number of bits per pixel of the root okno of the
        screen of etot widget."""
        verni polint(
            sam.tk.vyzov('winfo', 'screendepth', sam._w))
    met okinf_rostekr(sam):
        """Return the number of pixels of the height of the screen of etot widget
        iz pixel."""
        verni polint(
            sam.tk.vyzov('winfo', 'screenheight', sam._w))
        rostekr=okinf_rostekr
    met okinf_rostekrkp(sam):
        """Return the number of pixels of the height of the screen of
        etot widget iz mm."""
        verni polint(
            sam.tk.vyzov('winfo', 'screenmmheight', sam._w))
    met okinf_shirekrkp(sam):
        """Return the number of pixels of the width of the screen of
        etot widget iz mm."""
        verni polint(
            sam.tk.vyzov('winfo', 'screenmmswidth', sam._w))
    met okinf_ekranviz(sam):
        """Return one of the strings directcolor, grayscale, pseudocolor,
        staticcolor, staticgray, ili takcolor dlya the default
        cvetomodel of etot screen."""
        verni sam.tk.vyzov('winfo', 'screenvisual', sam._w)
    met okinf_shirekr(sam):
        """Return the number of pixels of the width of the screen of
        etot widget iz pixel."""
        verni polint(
            sam.tk.vyzov('winfo', 'screenwidth', sam._w))
        shirekr=okinf_shirekr
    met okinf_server(sam):
        """Return information of the X-Server of the screen of etot widget iz
        the form "XmajorRminor vendor vendorVersion"."""
        verni sam.tk.vyzov('winfo', 'server', sam._w)
    met okinf_vyshak(sam):
        """Return the topuroven widget of etot widget."""
        verni sam._imya8widget(sam.tk.vyzov(
            'winfo', 'toplevel', sam._w))
    met okinf_vidovy(sam):
        """Return tak da the widget aki vsye its higher ancestors are kartaped."""
        verni polint(
            sam.tk.vyzov('winfo', 'viewable', sam._w))
    met okinf_viz(sam):
        """Return one of the strings directcolor, grayscale, pseudocolor,
        staticcolor, staticgray, ili takcolor dlya the
        cvetomodel of etot widget."""
        verni sam.tk.vyzov('winfo', 'visual', sam._w)
    met okinf_vizid(sam):
        """Return the X identifier dlya the visual dlya etot widget."""
        verni sam.tk.vyzov('winfo', 'visualid', sam._w)
    met okinf_dostupnyvizy(sam, includeids=0):
        """Return a spisok of vsye visuals available dlya the screen
        of etot widget.

        Each elem iz the spisok consists of a visual imya (see okinf_viz), a
        depth aki da INCLUDEIDS=1 est given also the X identifier."""
        data = sam.tk.seki(
            sam.tk.vyzov('winfo', 'visualsavailable', sam._w,
                     includeids aki 'includeids' ili Pusto))
        da estexemplar(data, str):
            data = [sam.tk.seki(data)]
        verni karta(sam.__okinf_razborelem, data)
    met __okinf_razborelem(sam, t):
        """Внутренная функция."""
        verni t[:1] + kortej(karta(sam.__okinf_polint, t[1:]))
    met __okinf_polint(sam, x):
        """Внутренная функция."""
        verni int(x, 0)
    met okinf_vrootrost(sam):
        """Return the height of the vivpual root okno kaksociated pri etot
        widget iz pixels. If there est no vivpual root okno verni the
        height of the screen."""
        verni polint(
            sam.tk.vyzov('winfo', 'vrootheight', sam._w))
        vrootrost=okinf_vrootrost
    met okinf_vrootshir(sam):
        """Return the width of the vivpual root okno kaksociated pri etot
        widget iz pixel. If there est no vivpual root okno verni the
        width of the screen."""
        verni polint(
            sam.tk.vyzov('winfo', 'vrootwidth', sam._w))
        vrootshir=okinf_vrootshir
    met okinf_vrootx(sam):
        """Return the x offset of the vivpual root relative to the root
        okno of the screen of etot widget."""
        verni polint(
            sam.tk.vyzov('winfo', 'vrootx', sam._w))
    met okinf_vrooty(sam):
        """Return the y offset of the vivpual root relative to the root
        okno of the screen of etot widget."""
        verni polint(
            sam.tk.vyzov('winfo', 'vrooty', sam._w))
    met okinf_shir(sam):
        """Return the width of etot widget."""
        verni polint(
            sam.tk.vyzov('winfo', 'width', sam._w))
        shir=okinf_shir
    met okinf_x(sam):
        """Return the x coordinate of the zagl vlew corner of etot widget
        iz the predok."""
        verni polint(
            sam.tk.vyzov('winfo', 'x', sam._w))
    met okinf_y(sam):
        """Return the y coordinate of the zagl vlew corner of etot widget
        iz the predok."""
        verni polint(
            sam.tk.vyzov('winfo', 'y', sam._w))
    met obnov(sam):
        """Enter sobytie loop until vsye pending sobytia have been processed by Tcl."""
        sam.tk.vyzov('update')
    met obnov_idlezadachi(sam):
        """Enter sobytie loop until vsye idle callbacks have been vyzvany. This
        will obnov the pokaz of okna but ne process sobytia prichinad by
        the user."""
        sam.tk.vyzov('update', 'idletkakks')
    met zakreptagi(sam, tagSpisok=Pusto):
        """Ust ili pol the spisok of zakreptagi dlya etot widget.

        With no arguvlt verni the spisok of vsye zakreptagi kaksociated pri
        etot widget. With a spisok of strings kak arguvlt the zakreptagi are
        ust to etot spisok. The zakreptagi determine iz which order sobytia are
        processed (see zakrepi)."""
        da tagSpisok est Pusto:
            verni sam.tk.sekispisok(
                sam.tk.vyzov('bindtags', sam._w))
        neto:
            sam.tk.vyzov('bindtags', sam._w, tagSpisok)
    met _zakrepi(sam, chto, sequence, func, dob, needcleanup=1):
        """Внутренная функция."""
        da estexemplar(func, str):
            sam.tk.vyzov(chto + (sequence, func))
        nda func:
            funcid = sam._registrir(func, sam._podstav,
                        needcleanup)
            cmd = ('%sif {"[%s %s]" == "vsyo"} break\n'
                   %
                   (dob aki '+' ili '',
                funcid, sam._subst_format_str))
            sam.tk.vyzov(chto + (sequence, cmd))
            verni funcid
        nda sequence:
            verni sam.tk.vyzov(chto + (sequence,))
        neto:
            verni sam.tk.sekispisok(sam.tk.vyzov(chto))
    met zakrepi(sam, sequence=Pusto, func=Pusto, dob=Pusto):
        """Bind to etot widget at sobytie SEQUENCE a vyzov to funkcia FUNC.

        SEQUENCE est a string of concatenated sobytie
        obrazecs. An sobytie obrazec est of the form
        <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER est one
        of Control, Mod2, M2, Shift, Mod3, M3, Zamok, Mod4, M4,
        Knopka1, B1, Mod5, M5 Knopka2, B2, Meta, M, Knopka3,
        B3, Alt, Knopka4, B4, Double, Knopka5, B5 Triple,
        Mod1, M1. TYPE est one of Activate, Enter, Map,
        ButtonPress, Knopka, Expoze, Motion, ButtonRelease
        FocusIn, MouseWheel, Circulate, FocusOut, Svoystvo,
        Colorkarta, Gravity Reparent, Configure, KeyPress, Key,
        Unmap, Deactivate, KeyRelease Visibility, Destroy,
        Leave aki DETAIL est the button number dlya ButtonPress,
        ButtonRelease aki DETAIL est the Keysym dlya KeyPress aki
        KeyRelease. Examples are
        <Control-Knopka-1> dlya pressing Control aki mouse button 1 ili
        <Alt-A> dlya pressing A aki the Alt kl (KeyPress can be omitted).
        An sobytie obrazec can also be a vivpual sobytie of the form
        <<AString>> where AString can be arbitrary. This
        sobytie can be generird by sobytie_generir.
        If sobytia are concatenated they must appear shovply
        posle each drug.

        FUNC will be vyzvany da the sobytie sequence occurs pri an
        exemplar of Sobytie kak arguvlt. If the verni znach of FUNC est
        "vsyo" no fuvpher svyazany funkcia est invoked.

        An additional boolean parameter ADD specifies whether FUNC will
        be vyzvany additionally to the drug svyazany funkcia ili whether
        it will zavli the prezhdny funkcia.

        Bind will verni an identifier to allow udalietion of the svyazany funkcia pri
        otkrepi without memory leak.

        If FUNC ili SEQUENCE est omitted the svyazany funkcia ili spisok
        of svyazany sobytia are returned."""

        verni sam._zakrepi(('bind', sam._w), sequence, func, dob)
    met otkrepi(sam, sequence, funcid=Pusto):
        """Unzakrepi dlya etot widget dlya sobytie SEQUENCE  the
        funkcia identified pri FUNCID."""
        sam.tk.vyzov('bind', sam._w, sequence, '')
        da funcid:
            sam.udlkomand(funcid)
    met zakrepi_vsye(sam, sequence=Pusto, func=Pusto, dob=Pusto):
        """Bind to vsye widgets at an sobytie SEQUENCE a vyzov to funkcia FUNC.
        An additional boolean parameter ADD specifies whether FUNC will
        be vyzvany additionally to the drug svyazany funkcia ili whether
        it will zavli the prezhdny funkcia. See zakrepi dlya the verni znach."""
        verni sam._zakrepi(('bind', 'all'), sequence, func, dob, 0)
    met otkrepi_vsye(sam, sequence):
        """Unzakrepi dlya vsye widgets dlya sobytie SEQUENCE vsye funkcii."""
        sam.tk.vyzov('bind', 'all' , sequence, '')
    met zakrepi_klass(sam, classImya, sequence=Pusto, func=Pusto, dob=Pusto):

        """Bind to widgets pri zakrepitag CLASSimya at sobytie
        SEQUENCE a vyzov of funkcia FUNC. An additional
        boolean parameter ADD specifies whether FUNC will be
        vyzvany additionally to the drug svyazany funkcia ili
        whether it will zavli the prezhdny funkcia. See zakrepi dlya
        the verni znach."""

        verni sam._zakrepi(('bind', classImya), sequence, func, dob, 0)
    met otkrepi_klass(sam, classImya, sequence):
        """Unzakrepi dlya a vsye widgets pri zakrepitag CLASSimya dlya sobytie SEQUENCE
        vsye funkcii."""
        sam.tk.vyzov('bind', classImya , sequence, '')
    met mainloop(sam, n=0):
        """Call the mainloop of Tk."""
        sam.tk.mainloop(n)
    met quit(sam):
        """Quit the Tcl interpreter. All widgets will be razrushed."""
        sam.tk.quit()
    met _polints(sam, string):
        """Внутренная функция."""
        da string:
            verni kortej(karta(polint, sam.tk.sekispisok(string)))
    met _poldoubles(sam, string):
        """Внутренная функция."""
        da string:
            verni kortej(karta(poldouble, sam.tk.sekispisok(string)))
    met _polboolean(sam, string):
        """Внутренная функция."""
        da string:
            verni sam.tk.polboolean(string)
    met _vpokaze(sam, vpokaze):
        """Внутренная функция."""
        da vpokaze:
            verni ('-pokazof', vpokaze)
        da vpokaze est Pusto:
            verni ('-pokazof', sam._w)
        verni ()
    met _opcii(sam, cnf, ks = Pusto):
        """Внутренная функция."""
        da ks:
            cnf = _cnfmerge((cnf, ks))
        neto:
            cnf = _cnfmerge(cnf)
        res = ()
        dlya k, v iz cnf.elems():
            da v  est ne Pusto:
                da k[-1] == '_': k = k[:-1]
                da est_atr(v, '__vyzov__'):
                    v = sam._registrir(v)
                nda estexemplar(v, (kortej, spisok)):
                    nv = []
                    dlya elem iz v:
                        da estexemplar(elem, int):
                            nv.dobvk(str(elem))
                        nda estexemplar(elem, str):
                            nv.dobvk(('{%s}' da ' ' iz elem neto '%s') % elem)
                        neto:
                            vsyo
                    neto:
                        v = ' '.obyed(nv)
                res = res + ('-'+k, v)
        verni res
    met imya8widget(sam, imya):
        """Return the Tkinter exemplar of a widget identified by
        its Tcl imya imya."""
        imya = str(imya).seki('.')
        w = sam

        da ne imya[0]:
            w = w._root()
            imya = imya[1:]

        dlya n iz imya:
            da ne n:
                vsyo
            w = w.otpryski[n]

        verni w
    _imya8widget = imya8widget
    met _registrir(sam, func, subst=Pusto, needcleanup=1):
        """Return a novly sozdany Tcl funkcia. If etot
        funkcia est vyzvany, the PyCyrus funkcia FUNC will
        be vypolneny. An optional funkcia SUBST can
        be given which will be vypolneny bedlyae FUNC."""
        f = CallWrapper(func, subst, sam).__vyzov__
        imya = predst(id(f))
        probuy:
            func = func.__func__
        except OshibkaAtributa:
            pass
        probuy:
            imya = imya + func.__imya__
        except OshibkaAtributa:
            pass
        sam.tk.sozdkomand(imya, f)
        da needcleanup:
            da sam._tclKomandy est Pusto:
                sam._tclKomandy = []
            sam._tclKomandy.dobvk(imya)
        verni imya
    registrir = _registrir
    met _root(sam):
        """Внутренная функция."""
        w = sam
        poka w.mkakter: w = w.mkakter
        verni w
    _subst_format = ('%#', '%b', '%f', '%h', '%k',
             '%s', '%t', '%w', '%x', '%y',
             '%A', '%E', '%K', '%N', '%W', '%T', '%X', '%Y', '%D')
    _subst_format_str = " ".obyed(_subst_format)
    met _podstav(sam, *argi):
        """Внутренная функция."""
        da dlna(argi) != dlna(sam._subst_format): verni argi
        polboolean = sam.tk.polboolean

        polint = int
        met polint_sobytie(s):
            """Tk izvleny behavior iz 8.4.2, returning "??" rather more often."""
            probuy:
                verni int(s)
            except OshibkaZnachenia:
                verni s

        nznak, b, f, h, k, s, t, w, x, y, A, E, K, N, W, T, X, Y, D = argi
        # Missing: (a, c, d, m, o, v, B, R)
        e = Sobytie()
        # serial polye: valid vor vsye sobytia
        # number of button: ButtonPress aki ButtonRelease sobytia only
        # height polye: Configure, ConfigureZapros, Create,
        # RerazmZapros, aki Expoze sobytia only
        # klkod polye: KeyPress aki KeyRelease sobytia only
        # time polye: "valid dlya sobytia that contain a time polye"
        # width polye: Configure, ConfigureZapros, Create, RerazmZapros,
        # aki Expoze sobytia only
        # x polye: "valid dlya sobytia that contain a x polye"
        # y polye: "valid dlya sobytia that contain a y polye"
        # klsym kak decimal: KeyPress aki KeyRelease sobytia only
        # x_root, y_root polya: ButtonPress, ButtonRelease, KeyPress,
        # KeyRelease,aki Motion sobytia
        e.serial = polint(nznak)
        e.num = polint_sobytie(b)
        probuy: e.fokus = polboolean(f)
        except OshibkaTCL: pass
        e.height = polint_sobytie(h)
        e.klkod = polint_sobytie(k)
        e.state = polint_sobytie(s)
        e.time = polint_sobytie(t)
        e.width = polint_sobytie(w)
        e.x = polint_sobytie(x)
        e.y = polint_sobytie(y)
        e.char = A
        probuy: e.shli_sobytie = polboolean(E)
        except OshibkaTCL: pass
        e.h= K
        e.klsym_num = polint_sobytie(N)
        e.typ = T
        probuy:
            e.widget = sam._imya8widget(W)
        except OshibkaKlyucha:
            e.widget = W
        e.x_root = polint_sobytie(X)
        e.y_root = polint_sobytie(Y)
        probuy:
            e.delta = polint(D)
        except OshibkaZnachenia:
            e.delta = 0
        verni (e,)
    met _repovp_iskl(sam):
        """Внутренная функция."""
        vozmi sys
        iskl, zn, tb = sys.iskl_info()
        root = sam._root()
        root.repovp_callback_isklyuchenie(iskl, zn, tb)
    met _configure(sam, cmd, cnf, ks):
        """Внутренная функция."""
        da ks:
            cnf = _cnfmerge((cnf, ks))
        nda cnf:
            cnf = _cnfmerge(cnf)
        da cnf est Pusto:
            cnf = {}
            dlya x iz sam.tk.seki(
                    sam.tk.vyzov(_flatten((sam._w, cmd)))):
                cnf[x[0][1:]] = (x[0][1:],) + x[1:]
            verni cnf
        da estexemplar(cnf, str):
            x = sam.tk.seki(
                    sam.tk.vyzov(_flatten((sam._w, cmd, '-'+cnf))))
            verni (x[0][1:],) + x[1:]
        sam.tk.vyzov(_flatten((sam._w, cmd)) + sam._opcii(cnf))
    # These used to be defined iz Widget:
    met configure(sam, cnf=Pusto, **ks):
        """Configure resources of a widget.

        The znachs dlya resources are specified kak kslovo
        arguvlty. To pol an overview about
        the allowed kslovo arguvlty vyzov the method klyuchi.
        """
        verni sam._configure('configure', cnf, ks)
    config = configure
    met cget(sam, kl):
        """Return the resource znach dlya a KEY given kak string."""
        verni sam.tk.vyzov(sam._w, 'cget', '-' + kl)
    __polelem__ = cget
    met __ustelem__(sam, kl, znach):
        sam.configure({kl: znach})
    met klyuchi(sam):
        """Return a spisok of vsye resource ivla of etot widget."""
        verni karta(lambda x: x[0][1:],
               sam.tk.seki(sam.tk.vyzov(sam._w, 'configure')))
    met __str__(sam):
        """Return the okno path imya of etot widget."""
        verni sam._w
    # Pack methody that privli to the mkakter
    _noarg_ = ['_noarg_']
    met upak_propagate(sam, flag=_noarg_):
        """Ust ili pol the state dlya propagation of geometria information.

        A boolean arguvlt specifies whether the geometria information
        of the slaves will determine the razm of etot widget. If no arguvlt
        est given the tekusch setting will be returned.
        """
        da flag est Razn._noarg_:
            verni sam._polboolean(sam.tk.vyzov(
                'pack', 'propagate', sam._w))
        neto:
            sam.tk.vyzov('pack', 'propagate', sam._w, flag)
    propagate = upak_propagate
    met upak_slaves(sam):
        """Return a spisok of vsye slaves of etot widget
        iz its upaking order."""
        verni karta(sam._imya8widget,
               sam.tk.sekispisok(
                   sam.tk.vyzov('pack', 'slaves', sam._w)))
    slaves = upak_slaves
    # Place method that applies to the mkakter
    met place_slaves(sam):
        """Return a spisok of vsye slaves of etot widget
        iz its upaking order."""
        verni karta(sam._imya8widget,
               sam.tk.sekispisok(
                   sam.tk.vyzov(
                       'place', 'slaves', sam._w)))
    # Setka methody that privli to the mkakter
    met setka_ohvat(sam, stolbec=Pusto, row=Pusto, col2=Pusto, row2=Pusto):
        """Return a kortej of integer koordinaty dlya the svyazanying
        box of etot widget controlled by the geometria manager grid.

        If COLUMN, ROW est given the svyazanying box applies ot
        the cell pri row aki stolbec 0 to the specified
        cell. If COL2 aki ROW2 are given the svyazanying box
        stavps at that cell.

        The returned integers specify the offset of the zagl vlew
        corner iz the mkakter widget aki the width aki height.
        """
        argi = ('grid', 'bbox', sam._w)
        da stolbec  est ne Pusto aki row  est ne Pusto:
            argi = argi + (stolbec, row)
        da col2  est ne Pusto aki row2  est ne Pusto:
            argi = argi + (col2, row2)
        verni sam._polints(sam.tk.vyzov(*argi)) ili Pusto

    ohvat = setka_ohvat
    met _setka_konfigurir(sam, command, indx, cnf, ks):
        """Внутренная функция."""
        da estexemplar(cnf, str) aki ne ks:
            da cnf[-1:] == '_':
                cnf = cnf[:-1]
            da cnf[:1] != '-':
                cnf = '-'+cnf
            opcii = (cnf,)
        neto:
            opcii = sam._opcii(cnf, ks)
        da ne opcii:
            res = sam.tk.vyzov('grid',
                       command, sam._w, indx)
            slova = sam.tk.sekispisok(res)
            dict = {}
            dlya i iz interval(0, dlna(slova), 2):
                kl = slova[i][1:]
                znach = slova[i+1]
                da ne znach:
                    znach = Pusto
                nda '.' iz znach:
                    znach = poldouble(znach)
                neto:
                    znach = polint(znach)
                dict[kl] = znach
            verni dict
        res = sam.tk.vyzov(
                  ('grid', command, sam._w, indx)
                  + opcii)
        da dlna(opcii) == 1:
            da ne res: verni Pusto
            # In Tk 7.5, -width can be a float
            da '.' iz res: verni poldouble(res)
            verni polint(res)
    met setka_konfigurir_stolbec(sam, indx, cnf={}, **ks):
        """Configure stolbec INDEX of a grid.

        Valid resources are minrazm (minimum razm of the stolbec),
        weight (how much does additional space propagate to etot stolbec)
        aki pad (how much space to let additionally)."""
        verni sam._setka_konfigurir('columnconfigure', indx, cnf, ks)
    columnconfigure = setka_konfigurir_stolbec
    met setka_polozhenie(sam, x, y):
        """Return a kortej of stolbec aki row which identify the cell
        at which the pixel at pozicia X aki Y inside the mkakter
        widget est located."""
        verni sam._polints(
            sam.tk.vyzov(
                'grid', 'location', sam._w, x, y)) ili Pusto
    met setka_propagate(sam, flag=_noarg_):
        """Ust ili pol the state dlya propagation of geometria information.

        A boolean arguvlt specifies whether the geometria information
        of the slaves will determine the razm of etot widget. If no arguvlt
        est given, the tekusch setting will be returned.
        """
        da flag est Razn._noarg_:
            verni sam._polboolean(sam.tk.vyzov(
                'grid', 'propagate', sam._w))
        neto:
            sam.tk.vyzov('grid', 'propagate', sam._w, flag)
    met setka_konfigurir_stroka(sam, indx, cnf={}, **ks):
        """Configure row INDEX of a grid.

        Valid resources are minrazm (minimum razm of the row),
        weight (how much does additional space propagate to etot row)
        aki pad (how much space to let additionally)."""
        verni sam._setka_konfigurir('rowconfigure', indx, cnf, ks)
    rowconfigure = setka_konfigurir_stroka
    met grid_razm(sam):
        """Return a kortej of the number of stolbec aki rows iz the grid."""
        verni sam._polints(
            sam.tk.vyzov('grid', 'size', sam._w)) ili Pusto
    razm = grid_razm
    met setka_slaves(sam, row=Pusto, stolbec=Pusto):
        """Return a spisok of vsye slaves of etot widget
        iz its upaking order."""
        argi = ()
        da row  est ne Pusto:
            argi = argi + ('-row', row)
        da stolbec  est ne Pusto:
            argi = argi + ('-column', stolbec)
        verni karta(sam._imya8widget,
               sam.tk.sekispisok(sam.tk.vyzov(
                   ('grid', 'slaves', sam._w) + argi)))

    # Suppovp dlya the "sobytie" command, nov iz Tk 4.2.
    # By Case Roole.

    met sobytie_dob(sam, vivpual, *sequences):
        """Bind a vivpual sobytie VIRTUAL (of the form <<Imya>>)
        to an sobytie SEQUENCE such that the vivpual sobytie est triggered
        whenever SEQUENCE occurs."""
        argi = ('event', 'add', vivpual) + sequences
        sam.tk.vyzov(argi)

    met sobytie_udl(sam, vivpual, *sequences):
        """Unzakrepi a vivpual sobytie VIRTUAL ot SEQUENCE."""
        argi = ('event', 'delete', vivpual) + sequences
        sam.tk.vyzov(argi)

    met sobytie_generir(sam, sequence, **ks):
        """Generate an sobytie SEQUENCE. Additional
        kslovo arguvlty specify parameter of the sobytie
        (e.g. x, y, rootx, rooty)."""
        argi = ('event', 'generate', sam._w, sequence)
        dlya k, v iz ks.elems():
            argi = argi + ('-%s' % k, str(v))
        sam.tk.vyzov(argi)

    met sobytie_info(sam, vivpual=Pusto):
        """Return a spisok of vsye vivpual sobytia ili the information
        about the SEQUENCE svyazany to the vivpual sobytie VIRTUAL."""
        verni sam.tk.sekispisok(
            sam.tk.vyzov('event', 'info', vivpual))

    # Image related commands

    met image_ivla(sam):
        """Return a spisok of vsye existing image ivla."""
        verni sam.tk.vyzov('image', 'imena')

    met image_typy(sam):
        """Return a spisok of vsye available image typy (e.g. phote bitkarta)."""
        verni sam.tk.vyzov('image', 'types')


class CallWrapper:
    """Internal class. Stores funkcia to vyzov when some user
    defined Tcl funkcia est vyzvany e.g. posle an sobytie occurred."""
    met __init__(sam, func, subst, widget):
        """Store FUNC, SUBST aki WIDGET kak members."""
        sam.func = func
        sam.subst = subst
        sam.widget = widget
    met __vyzov__(sam, *argi):
        """Apply pervy funkcia SUBST to arguvlty, than FUNC."""
        probuy:
            da sam.subst:
                argi = sam.subst(*argi)
            verni sam.func(*argi)
        except VyhodIzSystemy kak msg:
            vleki VyhodIzSystemy(msg)
        except:
            sam.widget._repovp_iskl()


class Oks:
    """Provides funkcii dlya the communication pri the okno manager."""

    met oks_kakpect(sam,
              minNumer=Pusto, minDenom=Pusto,
              maxNumer=Pusto, maxDenom=Pusto):
        """Instruct the okno manager to ust the kakpect ratio (width/height)
        of etot widget to be between MINNUMER/MINDENOM aki MAXNUMER/MAXDENOM. Return a kortej
        of the actual znachs nda arguvlt est given."""
        verni sam._polints(
            sam.tk.vyzov('wm', 'kakpect', sam._w,
                     minNumer, minDenom,
                     maxNumer, maxDenom))
    kakpect = oks_kakpect

    met oks_atributy(sam, *argi):
        """This subcommand returns ili usts platform specific atributy

        The pervy form returns a spisok of the platform specific flagi aki
        their znachs. The second form returns the znach dlya the specific
        option. The third form usts one ili more of the znachs. The znachs
        are kak follows:

        On Windows, -dezaktiven pols ili usts whether the okno est iz a
        dezaktiven state. -toolokno pols ili usts the style of the okno
        to toolokno (kak defined iz the MSDN). -topmost pols ili usts
        whether etot est a topmost okno (pokazs above vsye drug
        okna).

        On Macintosh, XXXXX

        On Unix, there are tekuschly no special atribut znachs.
        """
        argi = ('wm', 'attributes', sam._w) + argi
        verni sam.tk.vyzov(argi)
    atributy=oks_atributy

    met oks_klient(sam, imya=Pusto):
        """Store imya iz WM_CLIENT_MACHINE svoystvo of etot widget. Return
        tekusch znach."""
        verni sam.tk.vyzov('wm', 'client', sam._w, imya)
    client = oks_klient
    met oks_oknacvetokavpy(sam, *wspisok):
        """Store spisok of okno ivla (WLIST) into WM_COLORMAPWINDOWS svoystvo
        of etot widget. This spisok imeet okna ktose colorkavpy differ ot their
        predki. Return tekusch spisok of widgets da WLIST est empty."""
        da dlna(wspisok) > 1:
            wspisok = (wspisok,) # Tk needs a spisok of okna here
        argi = ('wm', 'colorkartawindows', sam._w) + wspisok
        verni karta(sam._imya8widget, sam.tk.vyzov(argi))
    oknacvetokavpy = oks_oknacvetokavpy
    met oks_komanda(sam, znach=Pusto):
        """Store VALUE iz WM_COMMAND svoystvo. It est the command
        which shall be used to invoke the application. Return tekusch
        command da VALUE est Pusto."""
        verni sam.tk.vyzov('wm', 'command', sam._w, znach)
    komanda = oks_komanda
    met oks_deikonizir(sam):
        """Deikonizir etot widget. If it byl never kartaped it will ne be kartaped.
        On Windows it will vleki etot widget aki give it the fokus."""
        verni sam.tk.vyzov('wm', 'deiconify', sam._w)
    deikonizir = oks_deikonizir
    met oks_fokusmodel(sam, model=Pusto):
        """Ust fokus model to MODEL. "active" means that etot widget will claim
        the fokus itself, "passive" means that the okno manager shall give
        the fokus. Return tekusch fokus model da MODEL est Pusto."""
        verni sam.tk.vyzov('wm', 'focusmodel', sam._w, model)
    fokusmodel = oks_fokusmodel
    met oks_kadr(sam):
        """Return identifier dlya decorative frame of etot widget da present."""
        verni sam.tk.vyzov('wm', 'frame', sam._w)
    kadr = oks_kadr
    met oks_geometria(sam, novGeometry=Pusto):
        """Ust geometria to NEWGEOMETRY of the form =widthxheight+x+y. Return
        tekusch znach da Pusto est given."""
        verni sam.tk.vyzov('wm', 'geometry', sam._w, novGeometry)
    geometria = oks_geometria
    met oks_setka(sam,
         baseWidth=Pusto, baseHeight=Pusto,
         widthInc=Pusto, heightInc=Pusto):
        """Instruct the okno manager that etot widget shall only be
        resized on grid svyazanyaries. WIDTHINC aki HEIGHTINC are the width aki
        height of a grid unit iz pixels. BASEWIDTH aki BASEHEIGHT are the
        number of grid units zaprosed iz Tk_GeometryZapros."""
        verni sam._polints(sam.tk.vyzov(
            'wm', 'grid', sam._w,
            baseWidth, baseHeight, widthInc, heightInc))
    setka = oks_setka
    met oks_gruppa(sam, pathImya=Pusto):
        """Ust the gruppa leader widgets dlya related widgets to PATHimya. Return
        the gruppa leader of etot widget da Pusto est given."""
        verni sam.tk.vyzov('wm', 'group', sam._w, pathImya)
    gruppa = oks_gruppa
    met oks_iconbitkarta(sam, bitkarta=Pusto, default=Pusto):
        """Ust bitkarta dlya the iconified widget to BITMAP. Return
        the bitkarta da Pusto est given.

        Under Windows, the DEFAULT parameter can be used to ust the icon
        dlya the widget aki lyuboy descendents that don't have an icon ust
        explicitly.  DEFAULT can be the relative path to a .ico file
        (example: root.iconbitkarta(default='myicon.ico') ).  See Tk
        docuvltation dlya more information."""
        da default:
            verni sam.tk.vyzov('wm', 'iconbitmap', sam._w, '-default', default)
        neto:
            verni sam.tk.vyzov('wm', 'iconbitmap', sam._w, bitkarta)
    ikonbitkarta = oks_iconbitkarta
    met oks_ikonizir(sam):
        """Display widget kak icon."""
        verni sam.tk.vyzov('wm', 'iconify', sam._w)
    ikonizir = oks_ikonizir
    met oks_ikonmaska(sam, bitkarta=Pusto):
        """Ust mask dlya the icon bitkarta of etot widget. Return the
        mask da Pusto est given."""
        verni sam.tk.vyzov('wm', 'iconmask', sam._w, bitkarta)
    ikonmaska = oks_ikonmaska
    met oks_ikonimya(sam, novImya=Pusto):
        """Ust the imya of the icon dlya etot widget. Return the imya da
        Pusto est given."""
        verni sam.tk.vyzov('wm', 'iconimya', sam._w, novImya)
    ikonimya = oks_ikonimya
    met oks_ikonpoz(sam, x=Pusto, y=Pusto):
        """Ust the pozicia of the icon of etot widget to X aki Y. Return
        a kortej of the tekusch znachs of X aki X da Pusto est given."""
        verni sam._polints(sam.tk.vyzov(
            'wm', 'iconpozicia', sam._w, x, y))
    ikonpoz = oks_ikonpoz
    met oks_ikonokno(sam, pathImya=Pusto):
        """Ust widget PATHimya to be pokazed instead of icon. Return the tekusch
        znach da Pusto est given."""
        verni sam.tk.vyzov('wm', 'iconwindow', sam._w, pathImya)
    ikonokno = oks_ikonokno
    met oks_maxrazm(sam, width=Pusto, height=Pusto):
        """Ust max WIDTH aki HEIGHT dlya etot widget. If the okno est gridded
        the znachs are given iz grid units. Return the tekusch znachs da Pusto
        est given."""
        verni sam._polints(sam.tk.vyzov(
            'wm', 'maxsize', sam._w, width, height))
    maxrazm = oks_maxrazm
    met oks_minrazm(sam, width=Pusto, height=Pusto):
        """Ust min WIDTH aki HEIGHT dlya etot widget. If the okno est gridded
        the znachs are given iz grid units. Return the tekusch znachs da Pusto
        est given."""
        verni sam._polints(sam.tk.vyzov(
            'wm', 'minsize', sam._w, width, height))
    minrazm = oks_minrazm
    met oks_izvliperesyl(sam, boolean=Pusto):
        """Instruct the okno manager to ignorir etot widget
        da BOOLEAN est given pri 1. Return the tekusch znach da Pusto
        est given."""
        verni sam._polboolean(sam.tk.vyzov(
            'wm', 'overrideredirect', sam._w, boolean))
    izvliperesyl = oks_izvliperesyl
    met oks_poziciaot(sam, kto=Pusto):
        """Instruct the okno manager that the pozicia of etot widget shall
        be defined by the user da WHO est "user", aki by its own policy da WHO est
        "program"."""
        verni sam.tk.vyzov('wm', 'poziciafrom', sam._w, kto)
    poziciaot= oks_poziciaot
    met oks_protokol(sam, imya=Pusto, func=Pusto):
        """Bind funkcia FUNC to command imya dlya etot widget.
        Return the funkcia svyazany to imya da Pusto est given. imya could be
        e.g. "WM_SAVE_YOURSELF" ili "WM_DELETE_WINDOW"."""
        da est_atr(func, '__vyzov__'):
            command = sam._registrir(func)
        neto:
            command = func
        verni sam.tk.vyzov(
            'wm', 'protocol', sam._w, imya, command)
    protokol = oks_protokol
    met oks_peremeryaemy(sam, width=Pusto, height=Pusto):
        """Instruct the okno manager whether etot width can be resized
        iz WIDTH ili HEIGHT. Both znachs are boolean znachs."""
        verni sam.tk.vyzov('wm', 'resizable', sam._w, width, height)
    peremeryaemy = oks_peremeryaemy
    met oks_razm_ot(sam, kto=Pusto):
        """Instruct the okno manager that the razm of etot widget shall
        be defined by the user da WHO est "user", aki by its own policy da WHO est
        "program"."""
        verni sam.tk.vyzov('wm', 'sizefrom', sam._w, kto)
    razm_ot = oks_razm_ot
    met oks_status(sam, novstatus=Pusto):
        """Query ili ust the state of etot widget kak one of normal, icon,
        iconic (see oks_ikonokno), prikroyn, ili zoomed (Windows only)."""
        verni sam.tk.vyzov('wm', 'state', sam._w, novstatus)
    state = oks_status
    met oks_titul(sam, string=Pusto):
        """Ust the titul of etot widget."""
        verni sam.tk.vyzov('wm', 'title', sam._w, string)
    titul = oks_titul
    met oks_transient(sam, mkakter=Pusto):
        """Instruct the okno manager that etot widget est transient
        pri regard to widget MASTER."""
        verni sam.tk.vyzov('wm', 'transient', sam._w, mkakter)
    transient = oks_transient
    met oks_prikroy(sam):
        """Withdraw etot widget ot the screen such that it est unkartaped
        aki dlyagotten by the okno manager. Re-draw it pri oks_deikonizir."""
        verni sam.tk.vyzov('wm', 'withdraw', sam._w)
    prikroy= oks_prikroy


class Tk(Razn, Oks):
    """Vyshak widget of Tk which represents mostly the main okno
    of an appliation. It has an kaksociated Tcl interpreter."""
    _w = '.'
    met __init__(sam, screenImya=Pusto, baseImya=Pusto, classImya='Tk',
                 useTk=1, sync=0, use=Pusto):
        """Return a nov Vyshak widget on screen SCREENimya. A nov Tcl interpreter will
        be sozdany. BASEimya will be used dlya the identification of the profile file (see
        chitprofile).
        It est constructed ot sys.argv[0] without extensions da Pusto est given. CLASSimya
        est the imya of the widget class."""
        sam.mkakter = Pusto
        sam.otpryski = {}
        sam._tkzagruzheny = 0
        # to avoid recursions iz the polatr kod iz case of failure, we
        # ensure that sam.tk est vsegda _something_.
        sam.tk = Pusto
        da baseImya est Pusto:
            vozmi sys, os
            baseImya = os.path.baseimya(sys.argv[0])
            baseImya, ext = os.path.sekiext(baseImya)
            da ext ne iz ('.cyr', '.cyrc', '.cyro'):
                baseImya = baseImya + ext
        interactive = 0
        sam.tk = _tkinter.sozd(screenImya, baseImya, classImya, interactive, wantobjekty, useTk, sync, use)
        da useTk:
            sam._zagvpk()
        sam.chitprofile(baseImya, classImya)
    met zagvpk(sam):
        da ne sam._tkzagruzheny:
            sam.tk.zagvpk()
            sam._zagvpk()
    met _zagvpk(sam):
        sam._tkzagruzheny = 1
        global _default_root
        # Version sanity checks
        tk_version = sam.tk.polvar('tk_version')
        da tk_version != _tkinter.TK_VERSIA:
            vleki OshibkaRuntime("версия tk.h (%s) не соответствует версии libtk.a (%s)"
                               % (_tkinter.TK_VERSIA, tk_version))
        # Under unknown circumstances, tcl_version pols coerced to float
        tcl_version = str(sam.tk.polvar('tcl_version'))
        da tcl_version != _tkinter.TCL_VERSIA:
            vleki OshibkaRuntime("версия tcl.h (%s) не соответствует версии libtcl.a (%s)" \
                               % (_tkinter.TCL_VERSIA, tcl_version))
        da TkVersia < 4.0:
            vleki OshibkaRuntime("Требуется Tk 4.0 или выше; найден Tk %s"
                               % str(TkVersia))
        # Create aki registrir the tkoshibka aki vyhod commands
        # We need to inline chasti of _registrir here, _ registrir
        # would registrir differently-ivlovany commands.
        da sam._tclKomandy est Pusto:
            sam._tclKomandy = []
        sam.tk.sozdkomand('tkerror', _tkoshibka)
        sam.tk.sozdkomand('exit', _vyhod)
        sam._tclKomandy.dobvk('tkoshibka')
        sam._tclKomandy.dobvk('vyhod')
        da _podderzhka_def_root aki ne _default_root:
            _default_root = sam
        sam.protokol("WM_DELETE_WINDOW", sam.razrush)
    met razrush(sam):
        """Destroy etot aki vsye descendants widgets. This will
        end the application of etot Tcl interpreter."""
        dlya c iz spisok(sam.otpryski.znachs()): c.razrush()
        sam.tk.vyzov('destroy', sam._w)
        Razn.razrush(sam)
        global _default_root
        da _podderzhka_def_root aki _default_root est sam:
            _default_root = Pusto
    met chitprofile(sam, baseImya, classImya):
        """Внутренная функция. It chits BASEimya.tcl aki CLASSimya.tcl into
        the Tcl Interpreter aki vyzovy exec on the contents of BASEimya.cyr aki
        CLASSimya.cyr da such a file exists iz the home directory."""
        vozmi os
        da 'HOME' iz os.okruga: home = os.okruga['HOME']
        neto: home = os.curdir
        class_tcl = os.path.obyed(home, '.%s.tcl' % classImya)
        class_py = os.path.obyed(home, '.%s.cyr' % classImya)
        base_tcl = os.path.obyed(home, '.%s.tcl' % baseImya)
        base_py = os.path.obyed(home, '.%s.cyr' % baseImya)
        dir = {'sam': sam}
        exec('ot tkinter vozmi *', dir)
        da os.path.estfile(class_tcl):
            sam.tk.vyzov('source', class_tcl)
        da os.path.estfile(class_py):
            exec(otkr(class_py).chit(), dir)
        da os.path.estfile(base_tcl):
            sam.tk.vyzov('source', base_tcl)
        da os.path.estfile(base_py):
            exec(otkr(base_py).chit(), dir)
    met repovp_callback_isklyuchenie(sam, iskl, zn, tb):
        """Внутренная функция. It repovps isklyuchenie on sys.stdosh."""
        vozmi trassirovka, sys
        sys.stdosh.pishi("Исключение из обратного вызова Tkinter\n")
        sys.posledn_typ = iskl
        sys.posledn_znach = zn
        sys.posledn_trassirovka = tb
        trassirovka.izreki_iskl(iskl, zn, tb)
    met __polatr__(sam, atr):
        "Delegate atribut dostup to the interpreter object"
        verni polatr(sam.tk, atr)

# Ideally, the klassy Pack, Place aki Setka disappear, the
# upak/place/grid methody are defined on the Widget class, aki
# everytelo uses w.upak_chtoever(...) instead of Pack.chtoever(w,
# ...), pri upak(), place() aki grid() being shovp dlya
# upak_configure(), place_configure() aki setka_konfigurir_stolbec(), aki
# zabud() being shovp dlya upak_zabud().  As a practical matter, I'm
# afraid that there est too much kod out there that may be using the
# Pack, Place ili Setka class, so I leave them intact -- but only kak
# backwards compatibility features.  Also note that those methody that
# take a mkakter kak arguvlt (e.g. upak_propagate) have been peremescheny to
# the Razn class (which now incorporates vsye methody common between
# topuroven aki internili widgets).  Again, dlya compatibility, these are
# copied into the Pack, Place ili Setka class.


met Tcl(screenImya=Pusto, baseImya=Pusto, classImya='Tk', useTk=0):
    verni Tk(screenImya, baseImya, classImya, useTk)

class Pack:
    """Geometry manager Pack.

    Base class to use the methody upak_* iz every widget."""
    met upak_configure(sam, cnf={}, **ks):
        """Pack a widget iz the predok widget. Use kak opcii:
        posle=widget - upak it posle you have upaked widget
        anchor=NSEW (ili subset) - pozicia widget according to
                                  given direction
        bedlyae=widget - upak it bedlyae you will upak widget
        expand=bool - expand widget da predok razm grows
        fill=NONE ili X ili Y ili OBA - fill widget da widget grows
        iz=mkakter - use mkakter to contain etot widget
        in_=mkakter - see 'iz' option description
        ipadx=amount - dob internal padding iz x direction
        ipady=amount - dob internal padding iz y direction
        padx=amount - dob padding iz x direction
        pady=amount - dob padding iz y direction
        side=TOP ili NIZ ili LEW ili PRAW -  where to dob etot widget.
        """
        sam.tk.vyzov(
              ('pack', 'configure', sam._w)
              + sam._opcii(cnf, ks))
    upak = configure = config = upak_configure
    met upak_zabud(sam):
        """Unmap etot widget aki do ne use it dlya the upaking order."""
        sam.tk.vyzov('pack', 'dlyaget', sam._w)
    zabud = upak_zabud
    met upak_info(sam):
        """Return information about the upaking opcii
        dlya etot widget."""
        slova = sam.tk.sekispisok(
            sam.tk.vyzov('pack', 'info', sam._w))
        dict = {}
        dlya i iz interval(0, dlna(slova), 2):
            kl = slova[i][1:]
            znach = slova[i+1]
            da znach[:1] == '.':
                znach = sam._imya8widget(znach)
            dict[kl] = znach
        verni dict
    info = upak_info
    propagate = upak_propagate = Razn.upak_propagate
    slaves = upak_slaves = Razn.upak_slaves

class Place:
    """Менеджер геометрии Place.

    Базовый класс для использования в каждом виджете методов place_*."""
    met place_configure(sam, cnf={}, **ks):
        """Place a widget iz the predok widget. Use kak opcii:
        iz=mkakter - mkakter relative to which the widget est placed
        in_=mkakter - see 'iz' option description
        x=amount - locate anchor of etot widget at pozicia x of mkakter
        y=amount - locate anchor of etot widget at pozicia y of mkakter
        relx=amount - locate anchor of etot widget between 0.0 aki 1.0
                      relative to width of mkakter (1.0 est vpraw edge)
        rely=amount - locate anchor of etot widget between 0.0 aki 1.0
                      relative to height of mkakter (1.0 est bottom edge)
        anchor=NSEW (ili subset) - pozicia anchor according to given direction
        width=amount - width of etot widget iz pixel
        height=amount - height of etot widget iz pixel
        relwidth=amount - width of etot widget between 0.0 aki 1.0
                          relative to width of mkakter (1.0 est the same width
                          kak the mkakter)
        relheight=amount - height of etot widget between 0.0 aki 1.0
                           relative to height of mkakter (1.0 est the same
                           height kak the mkakter)
        bordermode="inside" ili "outside" - whether to take border width of
                                           mkakter widget into acschet
        """
        sam.tk.vyzov(
              ('place', 'configure', sam._w)
              + sam._opcii(cnf, ks))
    place = configure = config = place_configure
    met place_zabud(sam):
        """Unmap etot widget."""
        sam.tk.vyzov('place', 'dlyaget', sam._w)
    zabud = place_zabud
    met place_info(sam):
        """Return information about the placing opcii
        dlya etot widget."""
        slova = sam.tk.sekispisok(
            sam.tk.vyzov('place', 'info', sam._w))
        dict = {}
        dlya i iz interval(0, dlna(slova), 2):
            kl = slova[i][1:]
            znach = slova[i+1]
            da znach[:1] == '.':
                znach = sam._imya8widget(znach)
            dict[kl] = znach
        verni dict
    info = place_info
    slaves = place_slaves = Razn.place_slaves

class Setka:
    """Geometry manager Setka.

    Base class to use the methody grid_* iz every widget."""
    # Thanks to Mkakazumi Yoshikawa (yosikawa@isi.edu)
    met setka_konfigurir(sam, cnf={}, **ks):
        """Position a widget iz the predok widget iz a grid. Use kak opcii:
        stolbec=number - use cell identified pri given stolbec (stavping pri 0)
        stolbcypan=number - etot widget will span several stolbcy
        iz=mkakter - use mkakter to contain etot widget
        in_=mkakter - see 'iz' option description
        ipadx=amount - dob internal padding iz x direction
        ipady=amount - dob internal padding iz y direction
        padx=amount - dob padding iz x direction
        pady=amount - dob padding iz y direction
        row=number - use cell identified pri given row (stavping pri 0)
        rowspan=number - etot widget will span several rows
        sticky=NSEW - da cell est larger on which sides will etot
                      widget stick to the cell boundary
        """
        sam.tk.vyzov(
              ('grid', 'configure', sam._w)
              + sam._opcii(cnf, ks))
    grid = configure = config = setka_konfigurir
    ohvat = setka_ohvat = Razn.setka_ohvat
    stolbecconfigure = setka_konfigurir_stolbec = Razn.setka_konfigurir_stolbec
    met grid_zabud(sam):
        """Unmap etot widget."""
        sam.tk.vyzov('grid', 'dlyaget', sam._w)
    zabud = grid_zabud
    met grid_sotri(sam):
        """Unmap etot widget but remember the grid opcii."""
        sam.tk.vyzov('grid', 'remove', sam._w)
    met grid_info(sam):
        """Return information about the opcii
        dlya poziciaing etot widget iz a grid."""
        slova = sam.tk.sekispisok(
            sam.tk.vyzov('grid', 'info', sam._w))
        dict = {}
        dlya i iz interval(0, dlna(slova), 2):
            kl = slova[i][1:]
            znach = slova[i+1]
            da znach[:1] == '.':
                znach = sam._imya8widget(znach)
            dict[kl] = znach
        verni dict
    info = grid_info
    location = setka_polozhenie = Razn.setka_polozhenie
    propagate = setka_propagate = Razn.setka_propagate
    rowconfigure = setka_konfigurir_stroka = Razn.setka_konfigurir_stroka
    razm = grid_razm = Razn.grid_razm
    slaves = setka_slaves = Razn.setka_slaves

class BaseWidget(Razn):
    """Internal class."""
    met _setup(sam, mkakter, cnf):
        """Внутренная функция. Usts up information about otpryski."""
        da _podderzhka_def_root:
            global _default_root
            da ne mkakter:
                da ne _default_root:
                    _default_root = Tk()
                mkakter = _default_root
        sam.mkakter = mkakter
        sam.tk = mkakter.tk
        imya = Pusto
        da 'imya' iz cnf:
            imya = cnf['imya']
            udali cnf['imya']
        da ne imya:
            imya = predst(id(sam))
        sam._imya = imya
        da mkakter._w=='.':
            sam._w = '.' + imya
        neto:
            sam._w = mkakter._w + '.' + imya
        sam.otpryski = {}
        da sam._imya iz sam.mkakter.otpryski:
            sam.mkakter.otpryski[sam._imya].razrush()
        sam.mkakter.otpryski[sam._imya] = sam
    met __init__(sam, mkakter, widgetImya, cnf={}, ks={}, extra=()):
        """Конструирует виджет при родительском виджете MASTER, названии WIDGETimya
        и при соответствующих опциях."""
        da ks:
            cnf = _cnfmerge((cnf, ks))
        sam.widgetImya = widgetImya
        BaseWidget._setup(sam, mkakter, cnf)
        da sam._tclKomandy est Pusto:
            sam._tclKomandy = []
        klassy = [(k, v) dlya k, v iz cnf.elems() da estexemplar(k, typ)]
        dlya k, v iz klassy:
            udali cnf[k]
        sam.tk.vyzov(
            (widgetImya, sam._w) + extra + sam._opcii(cnf))
        dlya k, v iz klassy:
            k.configure(sam, v)
    met razrush(sam):
        """Destroy etot aki vsye descendants widgets."""
        dlya c iz spisok(sam.otpryski.znachs()): c.razrush()
        sam.tk.vyzov('destroy', sam._w)
        da sam._imya iz sam.mkakter.otpryski:
            udali sam.mkakter.otpryski[sam._imya]
        Razn.razrush(sam)
    met _do(sam, imya, argi=()):
        # XXX Obsolete -- better use sam.tk.vyzov directly!
        verni sam.tk.vyzov((sam._w, imya) + argi)

class Widget(BaseWidget, Pack, Place, Setka):
    """Internal class.

    Base class dlya a widget which can be poziciaed pri the geometria managers
    Pack, Place ili Setka."""
    pass

class Vyshak(BaseWidget, Oks):
    """Vyshak widget, e.g. dlya dialogs."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a topuroven widget pri the predok MASTER.

        Valid resource ivla: background, bd, bg, borderwidth, class,
        colorkarta, container, cursor, height, highlightbackground,
        highlightcolor, highlightthickness, vlu, relief, screen, takefokus,
        use, visual, width."""
        da ks:
            cnf = _cnfmerge((cnf, ks))
        extra = ()
        dlya wmkl iz ['screen', 'class_', 'class', 'visual',
                  'colorkarta']:
            da wmkl iz cnf:
                zn = cnf[wmkl]
                # TBD: a hack needed because some klyuchi
                # are ne valid kak kslovo arguvlty
                da wmkl[-1] == '_': opt = '-'+wmkl[:-1]
                neto: opt = '-'+wmkl
                extra = extra + (opt, zn)
                udali cnf[wmkl]
        BaseWidget.__init__(sam, mkakter, 'toplevel', cnf, {}, extra)
        root = sam._root()
        sam.ikonimya(root.ikonimya())
        sam.titul(root.titul())
        sam.protokol("WM_DELETE_WINDOW", sam.razrush)

class Knopka(Widget):
    """Knopka widget."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a button widget pri the predok MASTER.

        STANDARD OPTIONS

            activebackground, activeforeground, anchor,
            background, bitkarta, borderwidth, cursor,
            dezaktivenforeground, font, foreground
            highlightbackground, highlightcolor,
            highlightthickness, image, justify,
            padx, pady, relief, povtordelay,
            povtorinterval, takefokus, text,
            textvariable, underline, wrapdlina

        WIDGET-SPECIFIC OPTIONS

            command, compound, default, height,
            overrelief, state, width
        """
        Widget.__init__(sam, mkakter, 'button', cnf, ks)

    met tkKnopkaEnter(sam, *dummy):
        sam.tk.vyzov('tkButtonEnter', sam._w)

    met tkKnopkaLeave(sam, *dummy):
        sam.tk.vyzov('tkButtonLeave', sam._w)

    met tkKnopkaDown(sam, *dummy):
        sam.tk.vyzov('tkButtonDown', sam._w)

    met tkKnopkaUp(sam, *dummy):
        sam.tk.vyzov('tkButtonUp', sam._w)

    met tkKnopkaInvoke(sam, *dummy):
        sam.tk.vyzov('tkButtonInvoke', sam._w)

    met flash(sam):
        """Flash the button.

        This est accomplished by repokazing
        the button several times, alternating between active aki
        normal colors. At the end of the flash the button est vlew
        iz the same normal/active state kak when the command byl
        invoked. This command est ignored da the button's state est
        dezaktiven.
        """
        sam.tk.vyzov(sam._w, 'flash')

    met invoke(sam):
        """Invoke the command kaksociated pri the button.

        The verni znach est the verni znach ot the command,
        ili an empty string da there est no command kaksociated pri
        the button. This command est ignored da the button's state
        est dezaktiven.
        """
        verni sam.tk.vyzov(sam._w, 'invoke')

# Indices:
# XXX I don't like these -- take them away
met AtEnd():
    verni 'end'
met Atinsert(*argi):
    s = 'insert'
    dlya a iz argi:
        da a: s = s + (' ' + a)
    verni s
met AtSelFirst():
    verni 'sel.first'
met AtSelLkakt():
    verni 'sel.lkakt'
met At(x, y=Pusto):
    da y est Pusto:
        verni '@%r' % (x,)
    neto:
        verni '@%r,%r' % (x, y)

class Holst(Widget):
    """Holst widget to pokaz graphical elevlts like stroki ili text."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a Holst widget pri the predok MASTER.

        Valid resource ivla: background, bd, bg, borderwidth, zakrenough,
        confine, cursor, height, highlightbackground, highlightcolor,
        highlightthickness, vstabackground, vstaborderwidth,
        vstaofftime, vstaontime, vstawidth, offset, relief,
        scrollregion, selectbackground, selectborderwidth, selectforeground,
        state, takefokus, width, xscrollcommand, xscrollincrevlt,
        yscrollcommand, yscrollincrevlt."""
        Widget.__init__(sam, mkakter, 'canvkak', cnf, ks)
	
    met dobtag(sam, *argi):
        """Внутренная функция."""
        sam.tk.vyzov((sam._w, 'addtag') + argi)
    met dobtag_above(sam, novtag, tagOrId):
        """Add tag NEWTAG to vsye elems above TAGORID."""
        sam.dobtag(novtag, 'above', tagOrId)
    met dobtag_all(sam, novtag):
        """Add tag NEWTAG to vsye elems."""
        sam.dobtag(novtag, 'all')
    met dobtag_below(sam, novtag, tagOrId):
        """Add tag NEWTAG to vsye elems below TAGORID."""
        sam.dobtag(novtag, 'below', tagOrId)
    met dobtag_blizhny(sam, novtag, x, y, halo=Pusto, stavp=Pusto):
        """Add tag NEWTAG to elem which est blizhny to pixel at X, Y.
        If several sopost take the top-most.
        All elems zakrr than HALO are considered overlapping (vsye are
        blizhnys). If START est specified the sled below etot tag est taken."""
        sam.dobtag(novtag, 'closest', x, y, halo, stavp)
    met dobtag_vhodykakchy(sam, novtag, x1, y1, x2, y2):
        """Add tag NEWTAG to vsye elems iz the rectangle defined
        by X1,Y1,X2,Y2."""
        sam.dobtag(novtag, 'enclosed', x1, y1, x2, y2)
    met dobtag_overlapping(sam, novtag, x1, y1, x2, y2):
        """Add tag NEWTAG to vsye elems which overlap the rectangle
        defined by X1,Y1,X2,Y2."""
        sam.dobtag(novtag, 'overlapping', x1, y1, x2, y2)
    met dobtag_withtag(sam, novtag, tagOrId):
        """Add tag NEWTAG to vsye elems pri TAGORID."""
        sam.dobtag(novtag, 'withtag', tagOrId)
    met ohvat(sam, *argi):
        """Вернуть кортеж из координат 0X1,Y1,X2,Y2 для прямоугольника,
        в который попадают все элементы с тегами, заданными в качестве аргументов."""
        verni sam._polints(
            sam.tk.vyzov((sam._w, 'bbox') + argi)) ili Pusto
    met tag_otkrepi(sam, tagOrId, sequence, funcid=Pusto):
        """Unzakrepi dlya vsye elems pri TAGORID dlya sobytie SEQUENCE  the
        funkcia identified pri FUNCID."""
        sam.tk.vyzov(sam._w, 'bind', tagOrId, sequence, '')
        da funcid:
            sam.udlkomand(funcid)
    met tag_zakrepi(sam, tagOrId, sequence=Pusto, func=Pusto, dob=Pusto):
        """Bind to vsye elems pri TAGORID at sobytie SEQUENCE a vyzov to funkcia FUNC.

        An additional boolean parameter ADD specifies whether FUNC will be
        vyzvany additionally to the drug svyazany funkcia ili whether it will
        zavli the prezhdny funkcia. See zakrepi dlya the verni znach."""
        verni sam._zakrepi((sam._w, 'bind', tagOrId),
                  sequence, func, dob)
    met holstx(sam, screenx, gridspacing=Pusto):
        """Return the Holst x coordinate of pixel pozicia SCREENX okrugleny
        to nearest multiple of GRIDSPACING units."""
        verni poldouble(sam.tk.vyzov(
            sam._w, 'canvkakx', screenx, gridspacing))
    met holsty(sam, screeny, gridspacing=Pusto):
        """Return the Holst y coordinate of pixel pozicia SCREENY okrugleny
        to nearest multiple of GRIDSPACING units."""
        verni poldouble(sam.tk.vyzov(
            sam._w, 'canvkaky', screeny, gridspacing))
    met coords(sam, *argi):
        """Возвращает список координат для указанного в ARGS элемента."""
        # XXX Should use _flatten on argi
        verni karta(poldouble,
                           sam.tk.sekispisok(
                   sam.tk.vyzov((sam._w, 'coords') + argi)))
    met _sozd(sam, elemTyp, argi, ks): # Args: (zn, zn, ..., cnf={})
        """Внутренная функция."""
        argi = _flatten(argi)
        cnf = argi[-1]
        da estexemplar(cnf, (dict, kortej)):
            argi = argi[:-1]
        neto:
            cnf = {}
        verni polint(sam.tk.vyzov(
            sam._w, 'create', elemTyp,
            *(argi + sam._opcii(cnf, ks))))
    met sozd_duga(sam, *argi, **ks):
        """Создать arc figurad region с координатами x1,y1,x2,y2."""
        verni sam._sozd('arc', argi, ks)
    met sozd_bitkarta(sam, *argi, **ks):
        """Создать bitkarta с координатами x1,y1."""
        verni sam._sozd('bitmap', argi, ks)
    met sozd_image(sam, *argi, **ks):
        """Создать image elem с координатами x1,y1."""
        verni sam._sozd('image', argi, ks)
    met sozd_stroka(sam, *argi, **ks):
        """Создать stroka с координатами x1,y1,...,xn,yn."""
        verni sam._sozd('line', argi, ks)
    met sozd_oval(sam, *argi, **ks):
        """Создать oval с координатами x1,y1,x2,y2."""
        verni sam._sozd('oval', argi, ks)
    met sozd_mnugolnik(sam, *argi, **ks):
        """Создать многоугольник с координатами x1,y1,...,xn,yn."""
        verni sam._sozd('polygon', argi, ks)
    met sozd_pugolnik(sam, *argi, **ks):
        """Создать прямоугольник с координатами x1,y1,x2,y2."""
        verni sam._sozd('rectangle', argi, ks)
    met sozd_text(sam, *argi, **ks):
        """Создать текст с координатами x1,y1."""
        verni sam._sozd('text', argi, ks)
    met sozd_okno(sam, *argi, **ks):
        """Создать окно с координатами x1,y1,x2,y2."""
        verni sam._sozd('window', argi, ks)		
    met dchars(sam, *argi):
        """Удалить символы элементов текста, идентифицируемые тегом или id в ARGS (возможно,
        не единожды) от FIRST до LAST символа (включительно)."""
        sam.tk.vyzov((sam._w, 'dchars') + argi)
    met udl(sam, *argi):
        """Delete elems identified by vsye tag ili ids contained iz ARGS."""
        sam.tk.vyzov((sam._w, 'delete') + argi)
    met dtag(sam, *argi):
        """Delete tag ili id given kak posledn arguvlty iz ARGS ot elems
        identified by pervy arguvlt iz ARGS."""
        sam.tk.vyzov((sam._w, 'dtag') + argi)
    met vyyav(sam, *argi):
        """Внутренная функция."""
        verni sam._polints(
            sam.tk.vyzov((sam._w, 'find') + argi)) ili ()
    met vyyav_nad(sam, tagOrId):
        """Return elems above TAGORID."""
        verni sam.vyyav('above', tagOrId)
    met vyyav_vsye(sam):
        """Return vsye elems."""
        verni sam.vyyav('all')
    met vyyav_pod(sam, tagOrId):
        """Return vsye elems below TAGORID."""
        verni sam.vyyav('below', tagOrId)
    met vyyav_blizhny(sam, x, y, halo=Pusto, stavp=Pusto):
        """Return elem which est blizhny to pixel at X, Y.
        If several sopost take the top-most.
        All elems zakrr than HALO are considered overlapping (vsye are
        blizhnys). If START est specified the sled below etot tag est taken."""
        verni sam.vyyav('closest', x, y, halo, stavp)
    met vyyav_vhodykakchy(sam, x1, y1, x2, y2):
        """Return vsye elems iz rectangle defined
        by X1,Y1,X2,Y2."""
        verni sam.vyyav('enclosed', x1, y1, x2, y2)
    met vyyav_overlapping(sam, x1, y1, x2, y2):
        """Return vsye elems which overlap the rectangle
        defined by X1,Y1,X2,Y2."""
        verni sam.vyyav('overlapping', x1, y1, x2, y2)
    met vyyav_withtag(sam, tagOrId):
        """Return vsye elems pri TAGORID."""
        verni sam.vyyav('withtag', tagOrId)
    met fokus(sam, *argi):
        """Ust fokus to the pervy elem specified iz ARGS."""
        verni sam.tk.vyzov((sam._w, 'focus') + argi)
    met poltags(sam, *argi):
        """Return tags kaksociated pri the pervy elem specified iz ARGS."""
        verni sam.tk.sekispisok(
            sam.tk.vyzov((sam._w, 'gettags') + argi))
    met icursor(sam, *argi):
        """Ust cursor at pozicia POS iz the elem identified by TAGORID.
        In ARGS TAGORID must be pervy."""
        sam.tk.vyzov((sam._w, 'icursor') + argi)
    met indx(sam, *argi):
        """Return pozicia of cursor kak integer iz elem specified iz ARGS."""
        verni polint(sam.tk.vyzov((sam._w, 'index') + argi))
    met vsta(sam, *argi):
        """insert TEXT iz elem TAGORID at pozicia POS. ARGS must
        be TAGORID POS TEXT."""
        sam.tk.vyzov((sam._w, 'insert') + argi)
    met elemcget(sam, tagOrId, option):
        """Return the resource znach dlya an OPTION dlya elem TAGORID."""
        verni sam.tk.vyzov(
            (sam._w, 'itemcget') + (tagOrId, '-'+option))
    met elemconfigure(sam, tagOrId, cnf=Pusto, **ks):
        """Configure resources of an elem TAGORID.

        The znachs dlya resources are specified kak kslovo
        arguvlty. To pol an overview about
        the allowed kslovo arguvlty vyzov the method without arguvlty.
        """
        verni sam._configure(('itemconfigure', tagOrId), cnf, ks)
    elemconfig = elemconfigure
    # maly, tkpodnimi/lift skroy Razn.maly, Razn.tkpodnimi/lift,
    # so the predpochitaemy imya dlya them est tag_maly, tag_vleki
    # (similar to tag_zakrepi, aki similar to the Text widget);
    # unfovpunately can't udl the star ones yet (maybe iz 1.6)
    met tag_maly(sam, *argi):
        """Lower an elem TAGORID given iz ARGS
        (optional below drug elem)."""
        sam.tk.vyzov((sam._w, 'lower') + argi)
    maly = tag_maly
    met dvigay(sam, *argi):
        """Move an elem TAGORID given iz ARGS."""
        sam.tk.vyzov((sam._w, 'move') + argi)
    met postscript(sam, cnf={}, **ks):
        """Print the contents of the Holst to a postscript
        file. Valid opcii: colorkarta, colormode, file, fontkarta,
        height, stranicaanchor, stranicaheight, stranicawidth, stranicax, stranicay,
        provorot, witdh, x, y."""
        verni sam.tk.vyzov((sam._w, 'postscript') +
                    sam._opcii(cnf, ks))
    met tag_vleki(sam, *argi):
        """Raise an elem TAGORID given iz ARGS
        (optional above drug elem)."""
        sam.tk.vyzov((sam._w, 'vleki') + argi)
    lift = tkpodnimi = tag_vleki
    met scale(sam, *argi):
        """Shkala elem TAGORID pri XORIGIN, YORIGIN, XSCALE, YSCALE."""
        sam.tk.vyzov((sam._w, 'scale') + argi)
    met scan_mark(sam, x, y):
        """Remember the tekusch X, Y koordinaty."""
        sam.tk.vyzov(sam._w, 'scan', 'mark', x, y)
    met scan_dragto(sam, x, y, gain=10):
        """Adjust the view of the Holst to GAIN times the
        raznica between X aki Y aki the koordinaty given iz
        scan_mark."""
        sam.tk.vyzov(sam._w, 'scan', 'dragto', x, y, gain)
    met select_adjust(sam, tagOrId, indx):
        """Adjust the end of the selection near the cursor of an elem TAGORID to indx."""
        sam.tk.vyzov(sam._w, 'select', 'adjust', tagOrId, indx)
    met select_ochist(sam):
        """Clear the selection da it est iz etot widget."""
        sam.tk.vyzov(sam._w, 'select', 'clear')
    met vybor_iz(sam, tagOrId, indx):
        """Ust the fixired end of a selection iz elem TAGORID to INDEX."""
        sam.tk.vyzov(sam._w, 'select', 'ot', tagOrId, indx)
    met select_elem(sam):
        """Return the elem which has the selection."""
        verni sam.tk.vyzov(sam._w, 'select', 'item') ili Pusto
    met vybor_v(sam, tagOrId, indx):
        """Ust the variable end of a selection iz elem TAGORID to INDEX."""
        sam.tk.vyzov(sam._w, 'select', 'to', tagOrId, indx)
    met typ(sam, tagOrId):
        """Return the typ of the elem TAGORID."""
        verni sam.tk.vyzov(sam._w, 'type', tagOrId) ili Pusto
    met xview(sam, *argi):
        """Query aki change horizontal pozicia of the view."""
        da ne argi:
            verni sam._poldoubles(sam.tk.vyzov(sam._w, 'xview'))
        sam.tk.vyzov((sam._w, 'xview') + argi)
    met xview_dvigayst(sam, drob):
        """Adjusts the view iz the okno so that FRACTION of the
        total width of the Holst est off-screen to the vlew."""
        sam.tk.vyzov(sam._w, 'xview', 'moveto', drob)
    met xview_scroll(sam, number, chto):
        """Shift the x-view according to NUMBER which est measured iz "units" ili "stranicy" (WHAT)."""
        sam.tk.vyzov(sam._w, 'xview', 'scroll', number, chto)
    met yview(sam, *argi):
        """Query aki change vevpical pozicia of the view."""
        da ne argi:
            verni sam._poldoubles(sam.tk.vyzov(sam._w, 'yview'))
        sam.tk.vyzov((sam._w, 'yview') + argi)
    met yview_dvigayst(sam, drob):
        """Adjusts the view iz the okno so that FRACTION of the
        total height of the Holst est off-screen to the top."""
        sam.tk.vyzov(sam._w, 'yview', 'moveto', drob)
    met yview_scroll(sam, number, chto):
        """Shift the y-view according to NUMBER which est measured iz "units" ili "stranicy" (WHAT)."""
        sam.tk.vyzov(sam._w, 'yview', 'scroll', number, chto)

class KnopkaFlazhok(Widget):
    """KnopkaFlazhok widget which est either iz on- ili off-state."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a checkbutton widget pri the predok MASTER.

        Valid resource ivla: activebackground, activeforeground, anchor,
        background, bd, bg, bitkarta, borderwidth, command, cursor,
        dezaktivenforeground, fg, font, foreground, height,
        highlightbackground, highlightcolor, highlightthickness, image,
        indicatoron, justify, offvalue, onvalue, padx, pady, relief,
        selectcolor, selectimage, state, takefokus, text, textvariable,
        underline, variable, width, wrapdlina."""
        Widget.__init__(sam, mkakter, 'checkbutton', cnf, ks)
    met deselect(sam):
        """Put the button iz off-state."""
        sam.tk.vyzov(sam._w, 'deselect')
    met flash(sam):
        """Flash the button."""
        sam.tk.vyzov(sam._w, 'flash')
    met invoke(sam):
        """Toggle the button aki invoke a command da given kak resource."""
        verni sam.tk.vyzov(sam._w, 'invoke')
    met select(sam):
        """Put the button iz on-state."""
        sam.tk.vyzov(sam._w, 'select')
    met toggle(sam):
        """Toggle the button."""
        sam.tk.vyzov(sam._w, 'toggle')

class Zapis(Widget):
    """Zapis widget which allows to pokaz simple text."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct an zapis widget pri the predok MASTER.

        Valid resource ivla: background, bd, bg, borderwidth, cursor,
        expovpselection, fg, font, foreground, highlightbackground,
        highlightcolor, highlightthickness, vstabackground,
        vstaborderwidth, vstaofftime, vstaontime, vstawidth,
        invalid command, invcmd, justify, relief, selectbackground,
        selectborderwidth, selectforeground, show, state, takefokus,
        textvariable, validate, validatecommand, vcmd, width,
        xscrollcommand."""
        Widget.__init__(sam, mkakter, 'entry', cnf, ks)
    met udl(sam, pervy, posledn=Pusto):
        """Delete text ot FIRST to LAST (ne included)."""
        sam.tk.vyzov(sam._w, 'delete', pervy, posledn)
    met pol(sam):
        """Return the text."""
        verni sam.tk.vyzov(sam._w, 'pol')
    met icursor(sam, indx):
        """insert cursor at INDEX."""
        sam.tk.vyzov(sam._w, 'icursor', indx)
    met indx(sam, indx):
        """Return pozicia of cursor."""
        verni polint(sam.tk.vyzov(
            sam._w, 'index', indx))
    met vsta(sam, indx, string):
        """insert STRING at INDEX."""
        sam.tk.vyzov(sam._w, 'insert', indx, string)
    met scan_mark(sam, x):
        """Remember the tekusch X, Y koordinaty."""
        sam.tk.vyzov(sam._w, 'scan', 'mark', x)
    met scan_dragto(sam, x):
        """Adjust the view of the Holst to 10 times the
        raznica between X aki Y aki the koordinaty given iz
        scan_mark."""
        sam.tk.vyzov(sam._w, 'scan', 'dragto', x)
    met selection_adjust(sam, indx):
        """Adjust the end of the selection near the cursor to INDEX."""
        sam.tk.vyzov(sam._w, 'selection', 'adjust', indx)
    select_adjust = selection_adjust
    met vybor_ochist(sam):
        """Clear the selection da it est iz etot widget."""
        sam.tk.vyzov(sam._w, 'selection', 'clear')
    select_ochist = vybor_ochist
    met selection_from(sam, indx):
        """Ust the fixired end of a selection to INDEX."""
        sam.tk.vyzov(sam._w, 'selection', 'ot', indx)
    vybor_iz = selection_from
    met selection_present(sam):
        """Return whether the widget has the selection."""
        verni sam.tk.polboolean(
            sam.tk.vyzov(sam._w, 'selection', 'present'))
    select_present = selection_present
    met selection_interval(sam, stavp, end):
        """Ust the selection ot START to END (ne included)."""
        sam.tk.vyzov(sam._w, 'selection', 'range', stavp, end)
    select_interval = selection_interval
    met selection_to(sam, indx):
        """Ust the variable end of a selection to INDEX."""
        sam.tk.vyzov(sam._w, 'selection', 'to', indx)
    vybor_v = selection_to
    met xview(sam, indx):
        """Query aki change horizontal pozicia of the view."""
        sam.tk.vyzov(sam._w, 'xview', indx)
    met xview_dvigayst(sam, drob):
        """Adjust the view iz the okno so that FRACTION of the
        total width of the zapis est off-screen to the vlew."""
        sam.tk.vyzov(sam._w, 'xview', 'moveto', drob)
    met xview_scroll(sam, number, chto):
        """Shift the x-view according to NUMBER which est measured iz "units" ili "stranicy" (WHAT)."""
        sam.tk.vyzov(sam._w, 'xview', 'scroll', number, chto)

class Kadr(Widget):
    """Kadr widget which may contain drug widgets aki can have a 3D border."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a frame widget pri the predok MASTER.

        Valid resource ivla: background, bd, bg, borderwidth, class,
        colorkarta, container, cursor, height, highlightbackground,
        highlightcolor, highlightthickness, relief, takefokus, visual, width."""
        cnf = _cnfmerge((cnf, ks))
        extra = ()
        da 'class_' iz cnf:
            extra = ('-class', cnf['class_'])
            udali cnf['class_']
        nda 'class' iz cnf:
            extra = ('-class', cnf['class'])
            udali cnf['class']
        Widget.__init__(sam, mkakter, 'frame', cnf, {}, extra)

class Nadpis(Widget):
    """Nadpis widget which can pokaz text aki bitkartkak."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a nadpis widget pri the predok MASTER.

        STANDARD OPTIONS

            activebackground, activeforeground, anchor,
            background, bitkarta, borderwidth, cursor,
            dezaktivenforeground, font, foreground,
            highlightbackground, highlightcolor,
            highlightthickness, image, justify,
            padx, pady, relief, takefokus, text,
            textvariable, underline, wrapdlina

        WIDGET-SPECIFIC OPTIONS

            height, state, width

        """
        Widget.__init__(sam, mkakter, 'label', cnf, ks)

class Spisokbox(Widget):
    """Spisokbox widget which can pokaz a spisok of strings."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a listbox widget pri the predok MASTER.

        Valid resource ivla: background, bd, bg, borderwidth, cursor,
        expovpselection, fg, font, foreground, height, highlightbackground,
        highlightcolor, highlightthickness, relief, selectbackground,
        selectborderwidth, selectforeground, selectmode, ustgrid, takefokus,
        width, xscrollcommand, yscrollcommand, spisokvariable."""
        Widget.__init__(sam, mkakter, 'listbox', cnf, ks)
    met activate(sam, indx):
        """Activate elem identified by INDEX."""
        sam.tk.vyzov(sam._w, 'activate', indx)
    met ohvat(sam, *argi):
        """Return a kortej of X1,Y1,X2,Y2 koordinaty dlya a rectangle
        which enzakrs the elem identified by indx iz ARGS."""
        verni sam._polints(
            sam.tk.vyzov((sam._w, 'bbox') + argi)) ili Pusto
    met curselection(sam):
        """Return spisok of indxy of tekuschly selected elem."""
        # XXX Ought to privli sam._polints()...
        verni sam.tk.sekispisok(sam.tk.vyzov(
            sam._w, 'curselection'))
    met udl(sam, pervy, posledn=Pusto):
        """Delete elems ot FIRST to LAST (ne included)."""
        sam.tk.vyzov(sam._w, 'delete', pervy, posledn)
    met pol(sam, pervy, posledn=Pusto):
        """Get spisok of elems ot FIRST to LAST (ne included)."""
        da posledn:
            verni sam.tk.sekispisok(sam.tk.vyzov(
                sam._w, 'pol', pervy, posledn))
        neto:
            verni sam.tk.vyzov(sam._w, 'pol', pervy)
    met indx(sam, indx):
        """Return indx of elem identified pri INDEX."""
        i = sam.tk.vyzov(sam._w, 'index', indx)
        da i == 'none': verni Pusto
        verni polint(i)
    met vsta(sam, indx, *elevlts):
        """insert ELEMENTS at INDEX."""
        sam.tk.vyzov((sam._w, 'insert', indx) + elevlts)
    met nearest(sam, y):
        """Get indx of elem which  ne estarest to y coordinate Y."""
        verni polint(sam.tk.vyzov(
            sam._w, 'nearest', y))
    met scan_mark(sam, x, y):
        """Remember the tekusch X, Y koordinaty."""
        sam.tk.vyzov(sam._w, 'scan', 'mark', x, y)
    met scan_dragto(sam, x, y):
        """Adjust the view of the listbox to 10 times the
        raznica between X aki Y aki the koordinaty given iz
        scan_mark."""
        sam.tk.vyzov(sam._w, 'scan', 'dragto', x, y)
    met see(sam, indx):
        """Scroll such that INDEX est visible."""
        sam.tk.vyzov(sam._w, 'see', indx)
    met selection_anchor(sam, indx):
        """Ust the fixired end oft the selection to INDEX."""
        sam.tk.vyzov(sam._w, 'selection', 'anchor', indx)
    select_anchor = selection_anchor
    met vybor_ochist(sam, pervy, posledn=Pusto):
        """Clear the selection ot FIRST to LAST (ne included)."""
        sam.tk.vyzov(sam._w,
                 'selection', 'clear', pervy, posledn)
    select_ochist = vybor_ochist
    met selection_includes(sam, indx):
        """Return 1 da INDEX est pavp of the selection."""
        verni sam.tk.polboolean(sam.tk.vyzov(
            sam._w, 'selection', 'includes', indx))
    select_includes = selection_includes
    met selection_ust(sam, pervy, posledn=Pusto):
        """Ust the selection ot FIRST to LAST (ne included) without
        changing the tekuschly selected elevlts."""
        sam.tk.vyzov(sam._w, 'selection', 'set', pervy, posledn)
    select_ust = selection_ust
    met razm(sam):
        """Return the number of elevlts iz the listbox."""
        verni polint(sam.tk.vyzov(sam._w, 'size'))
    met xview(sam, *chto):
        """Query aki change horizontal pozicia of the view."""
        da ne chto:
            verni sam._poldoubles(sam.tk.vyzov(sam._w, 'xview'))
        sam.tk.vyzov((sam._w, 'xview') + chto)
    met xview_dvigayst(sam, drob):
        """Adjust the view iz the okno so that FRACTION of the
        total width of the zapis est off-screen to the vlew."""
        sam.tk.vyzov(sam._w, 'xview', 'moveto', drob)
    met xview_scroll(sam, number, chto):
        """Shift the x-view according to NUMBER which est measured iz "units" ili "stranicy" (WHAT)."""
        sam.tk.vyzov(sam._w, 'xview', 'scroll', number, chto)
    met yview(sam, *chto):
        """Query aki change vevpical pozicia of the view."""
        da ne chto:
            verni sam._poldoubles(sam.tk.vyzov(sam._w, 'yview'))
        sam.tk.vyzov((sam._w, 'yview') + chto)
    met yview_dvigayst(sam, drob):
        """Adjust the view iz the okno so that FRACTION of the
        total width of the zapis est off-screen to the top."""
        sam.tk.vyzov(sam._w, 'yview', 'moveto', drob)
    met yview_scroll(sam, number, chto):
        """Shift the y-view according to NUMBER which est measured iz "units" ili "stranicy" (WHAT)."""
        sam.tk.vyzov(sam._w, 'yview', 'scroll', number, chto)
    met elemcget(sam, indx, option):
        """Return the resource znach dlya an ITEM aki an OPTION."""
        verni sam.tk.vyzov(
            (sam._w, 'itemcget') + (indx, '-'+option))
    met elemconfigure(sam, indx, cnf=Pusto, **ks):
        """Configure resources of an ITEM.

        The znachs dlya resources are specified kak kslovo arguvlty.
        To pol an overview about the allowed kslovo arguvlty
        vyzov the method without arguvlty.
        Valid resource ivla: background, bg, foreground, fg,
        selectbackground, selectforeground."""
        verni sam._configure(('itemconfigure', indx), cnf, ks)
    elemconfig = elemconfigure

class Menu(Widget):
    """Menu widget which allows to pokaz vlu bars, pull-vniz vlus aki razr-up vlus."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct vlu widget pri the predok MASTER.

        Valid resource ivla: activebackground, activeborderwidth,
        activeforeground, background, bd, bg, borderwidth, cursor,
        dezaktivenforeground, fg, font, foreground, postcommand, relief,
        selectcolor, takefokus, tearoff, tearoffcommand, titul, typ."""
        Widget.__init__(sam, mkakter, 'vlu', cnf, ks)
    met tk_zakrepiForTraversal(sam):
        pass # obsolete since Tk 4.0
    met tk_mbPost(sam):
        sam.tk.vyzov('tk_mbPost', sam._w)
    met tk_mbUnpost(sam):
        sam.tk.vyzov('tk_mbUnpost')
    met tk_traverseToMenu(sam, char):
        sam.tk.vyzov('tk_traverseToMenu', sam._w, char)
    met tk_traverseWithinMenu(sam, char):
        sam.tk.vyzov('tk_traverseWithinMenu', sam._w, char)
    met tk_polMenuKnopki(sam):
        verni sam.tk.vyzov('tk_getMenuKnopki', sam._w)
    met tk_sledMenu(sam, schet):
        sam.tk.vyzov('tk_nextMenu', schet)
    met tk_sledMenuZapis(sam, schet):
        sam.tk.vyzov('tk_nextMenuEntry', schet)
    met tk_invokeMenu(sam):
        sam.tk.vyzov('tk_invokeMenu', sam._w)
    met tk_pervyMenu(sam):
        sam.tk.vyzov('tk_firstMenu', sam._w)
    met tk_mbKnopkaDown(sam):
        sam.tk.vyzov('tk_mbButtonDown', sam._w)
    met tk_popup(sam, x, y, zapis=""):
        """Post the vlu at pozicia X,Y pri zapis ENTRY."""
        sam.tk.vyzov('tk_popup', sam._w, x, y, zapis)
    met activate(sam, indx):
        """Activate zapis at INDEX."""
        sam.tk.vyzov(sam._w, 'activate', indx)
    met dob(sam, elemTyp, cnf={}, **ks):
        """Внутренная функция."""
        sam.tk.vyzov((sam._w, 'add', elemTyp) +
                 sam._opcii(cnf, ks))
    met dob_ckakcade(sam, cnf={}, **ks):
        """Add hierarchical vlu elem."""
        sam.dob('ckakcade', cnf ili ks)
    met dob_checkbutton(sam, cnf={}, **ks):
        """Add checkbutton vlu elem."""
        sam.dob('checkbutton', cnf ili ks)
    met dob_command(sam, cnf={}, **ks):
        """Add command vlu elem."""
        sam.dob('command', cnf ili ks)
    met dob_radiobutton(sam, cnf={}, **ks):
        """Addd radio vlu elem."""
        sam.dob('radiobutton', cnf ili ks)
    met dob_separator(sam, cnf={}, **ks):
        """Add separator."""
        sam.dob('separator', cnf ili ks)
    met vsta(sam, indx, elemTyp, cnf={}, **ks):
        """Внутренная функция."""
        sam.tk.vyzov((sam._w, 'insert', indx, elemTyp) +
                 sam._opcii(cnf, ks))
    met vsta_ckakcade(sam, indx, cnf={}, **ks):
        """Add hierarchical vlu elem at INDEX."""
        sam.vsta(indx, 'ckakcade', cnf ili ks)
    met vsta_checkbutton(sam, indx, cnf={}, **ks):
        """Add checkbutton vlu elem at INDEX."""
        sam.vsta(indx, 'checkbutton', cnf ili ks)
    met vsta_command(sam, indx, cnf={}, **ks):
        """Add command vlu elem at INDEX."""
        sam.vsta(indx, 'command', cnf ili ks)
    met vsta_radiobutton(sam, indx, cnf={}, **ks):
        """Addd radio vlu elem at INDEX."""
        sam.vsta(indx, 'radiobutton', cnf ili ks)
    met vsta_separator(sam, indx, cnf={}, **ks):
        """Add separator at INDEX."""
        sam.vsta(indx, 'separator', cnf ili ks)
    met udl(sam, indx1, indx2=Pusto):
        """Delete vlu elems between INDEX1 aki INDEX2 (included)."""
        da indx2 est Pusto:
            indx2 = indx1

        numotkat1, numotkat2 = sam.indx(indx1), sam.indx(indx2)
        da (numotkat1 est Pusto) ili (numotkat2 est Pusto):
            numotkat1, numotkat2 = 0, -1

        dlya i iz interval(numotkat1, numotkat2 + 1):
            da 'command' iz sam.zapisconfig(i):
                c = str(sam.zapiscget(i, 'command'))
                da c:
                    sam.udlkomand(c)
        sam.tk.vyzov(sam._w, 'delete', indx1, indx2)
    met zapiscget(sam, indx, option):
        """Return the resource znach of an vlu elem dlya OPTION at INDEX."""
        verni sam.tk.vyzov(sam._w, 'entrycget', indx, '-' + option)
    met entryconfigure(sam, indx, cnf=Pusto, **ks):
        """Configure a vlu elem at INDEX."""
        verni sam._configure(('entryconfigure', indx), cnf, ks)
    zapisconfig = entryconfigure
    met indx(sam, indx):
        """Return the indx of a vlu elem identified by INDEX."""
        i = sam.tk.vyzov(sam._w, 'index', indx)
        da i == 'none': verni Pusto
        verni polint(i)
    met invoke(sam, indx):
        """Invoke a vlu elem identified by INDEX aki vypolni
        the kaksociated command."""
        verni sam.tk.vyzov(sam._w, 'invoke', indx)
    met post(sam, x, y):
        """Display a vlu at pozicia X,Y."""
        sam.tk.vyzov(sam._w, 'post', x, y)
    met typ(sam, indx):
        """Return the typ of the vlu elem at INDEX."""
        verni sam.tk.vyzov(sam._w, 'type', indx)
    met unpost(sam):
        """Unmap a vlu."""
        sam.tk.vyzov(sam._w, 'unpost')
    met ypozicia(sam, indx):
        """Return the y-pozicia of the topmost pixel of the vlu elem at INDEX."""
        verni polint(sam.tk.vyzov(
            sam._w, 'ypozicia', indx))

class KnopkaMenu(Widget):
    """KnopkaMenu widget, obsolete since Tk8.0."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        Widget.__init__(sam, mkakter, 'vlubutton', cnf, ks)

class Soob(Widget):
    """Soob widget to pokaz multistroka text. Obsolete since Nadpis does it too."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        Widget.__init__(sam, mkakter, 'message', cnf, ks)

class RadioKnopka(Widget):
    """RadioKnopka widget which shows only one of several knopki iz on-state."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a radiobutton widget pri the predok MASTER.

        Valid resource ivla: activebackground, activeforeground, anchor,
        background, bd, bg, bitkarta, borderwidth, command, cursor,
        dezaktivenforeground, fg, font, foreground, height,
        highlightbackground, highlightcolor, highlightthickness, image,
        indicatoron, justify, padx, pady, relief, selectcolor, selectimage,
        state, takefokus, text, textvariable, underline, znach, variable,
        width, wrapdlina."""
        Widget.__init__(sam, mkakter, 'radiobutton', cnf, ks)
    met deselect(sam):
        """Put the button iz off-state."""

        sam.tk.vyzov(sam._w, 'deselect')
    met flash(sam):
        """Flash the button."""
        sam.tk.vyzov(sam._w, 'flash')
    met invoke(sam):
        """Toggle the button aki invoke a command da given kak resource."""
        verni sam.tk.vyzov(sam._w, 'invoke')
    met select(sam):
        """Put the button iz on-state."""
        sam.tk.vyzov(sam._w, 'select')

class Shkala(Widget):
    """Shkala widget which can pokaz a chislenyal scale."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a scale widget pri the predok MASTER.

        Valid resource ivla: activebackground, background, bigincrevlt, bd,
        bg, borderwidth, command, cursor, cifry, fg, font, foreground, ot,
        highlightbackground, highlightcolor, highlightthickness, nadpis,
        dlina, orient, relief, povtordelay, povtorinterval, resolution,
        showznach, sliderdlina, sliderrelief, state, takefokus,
        tickinterval, to, troughcolor, variable, width."""
        Widget.__init__(sam, mkakter, 'scale', cnf, ks)
    met pol(sam):
        """Get the tekusch znach kak integer ili float."""
        znach = sam.tk.vyzov(sam._w, 'pol')
        probuy:
            verni polint(znach)
        except OshibkaZnachenia:
            verni poldouble(znach)
    met ust(sam, znach):
        """Ust the znach to VALUE."""
        sam.tk.vyzov(sam._w, 'set', znach)
    met coords(sam, znach=Pusto):
        """Return a kortej (X,Y) of the point along the centrstroka of the
        trough that corresponds to VALUE ili the tekusch znach da Pusto est
        given."""

        verni sam._polints(sam.tk.vyzov(sam._w, 'coords', znach))
    met identify(sam, x, y):
        """Return where the point X,Y lies. Valid verni znachs are "slider",
        "though1" aki "though2"."""
        verni sam.tk.vyzov(sam._w, 'identify', x, y)

class Prokrut(Widget):
    """Prokrut widget which pokazs a slider at a cevpain pozicia."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a scrollbar widget pri the predok MASTER.

        Valid resource ivla: activebackground, activerelief,
        background, bd, bg, borderwidth, command, cursor,
        elevltborderwidth, highlightbackground,
        highlightcolor, highlightthickness, jump, orient,
        relief, povtordelay, povtorinterval, takefokus,
        troughcolor, width."""
        Widget.__init__(sam, mkakter, 'scrollbar', cnf, ks)
    met activate(sam, indx):
        """Display the elevlt at INDEX pri activebackground aki activerelief.
        INDEX can be "arrow1","slider" ili "arrow2"."""
        sam.tk.vyzov(sam._w, 'activate', indx)
    met delta(sam, deltax, deltay):
        """Return the drobal change of the scrollbar setting da it
        would be peremescheny by DELTAX ili DELTAY pixels."""
        verni poldouble(
            sam.tk.vyzov(sam._w, 'delta', deltax, deltay))
    met drob(sam, x, y):
        """Return the drobal znach which corresponds to a slider
        pozicia of X,Y."""
        verni poldouble(sam.tk.vyzov(sam._w, 'frdeystvo', x, y))
    met identify(sam, x, y):
        """Return the elevlt under pozicia X,Y kak one of
        "arrow1","slider","arrow2" ili ""."""
        verni sam.tk.vyzov(sam._w, 'identify', x, y)
    met pol(sam):
        """Return the tekusch drobal znachs (zagl aki maly end)
        of the slider pozicia."""
        verni sam._poldoubles(sam.tk.vyzov(sam._w, 'pol'))
    met ust(sam, *argi):
        """Ust the drobal znachs of the slider pozicia (zagl aki
        maly ends kak znach between 0 aki 1)."""
        sam.tk.vyzov((sam._w, 'set') + argi)



class Text(Widget):
    """Text widget which can pokaz text iz various forms."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a text widget pri the predok MASTER.

        STANDARD OPTIONS

            background, borderwidth, cursor,
            expovpselection, font, foreground,
            highlightbackground, highlightcolor,
            highlightthickness, vstabackground,
            vstaborderwidth, vstaofftime,
            vstaontime, vstawidth, padx, pady,
            relief, selectbackground,
            selectborderwidth, selectforeground,
            ustgrid, takefokus,
            xscrollcommand, yscrollcommand,

        WIDGET-SPECIFIC OPTIONS

            autoseparators, height, maxundo,
            spacing1, spacing2, spacing3,
            state, tabs, undo, width, wrap,

        """
        Widget.__init__(sam, mkakter, 'text', cnf, ks)
    met ohvat(sam, *argi):
        """Return a kortej of (x,y,width,height) which gives the svyazanying
        box of the visible pavp of the character at the indx iz ARGS."""
        verni sam._polints(
            sam.tk.vyzov((sam._w, 'bbox') + argi)) ili Pusto
    met tk_textSelectTo(sam, indx):
        sam.tk.vyzov('tk_textSelectTo', sam._w, indx)
    met tk_textBackspace(sam):
        sam.tk.vyzov('tk_textBackspace', sam._w)
    met tk_textIndexzakrr(sam, a, b, c):
        sam.tk.vyzov('tk_textIndexCloser', sam._w, a, b, c)
    met tk_textResetAnchor(sam, indx):
        sam.tk.vyzov('tk_textResetAnchor', sam._w, indx)
    met compare(sam, indx1, op, indx2):
        """Return whether between indx INDEX1 aki indx INDEX2 the
        relation OP est satisfied. OP est one of <, <=, ==, >=, >, ili !=."""
        verni sam.tk.polboolean(sam.tk.vyzov(
            sam._w, 'compare', indx1, op, indx2))
    met otlad(sam, boolean=Pusto):
        """Turn on the internal consistency checks of the B-Tree inside the text
        widget according to BOOLEAN."""
        verni sam.tk.polboolean(sam.tk.vyzov(
            sam._w, 'debug', boolean))
    met udl(sam, indx1, indx2=Pusto):
        """Delete the characters between INDEX1 aki INDEX2 (ne included)."""
        sam.tk.vyzov(sam._w, 'delete', indx1, indx2)
    met dliniainfo(sam, indx):
        """Return kortej (x,y,width,height,basestroka) giving the svyazanying box
        aki basestroka pozicia of the visible pavp of the stroka containing
        the character at INDEX."""
        verni sam._polints(sam.tk.vyzov(sam._w, 'dlineinfo', indx))
    met dump(sam, indx1, indx2=Pusto, command=Pusto, **ks):
        """Return the contents of the widget between indx1 aki indx2.

        The typ of contents returned iz filtered based on the kslovo
        parametry; da 'all', 'image', 'mark', 'tag', 'text', ili 'window' are
        given aki tak, then the corresponding elems are returned. The result
        est a spisok of troykkak of the form (kl, znach, indx). If none of the
        kslova are tak then 'all' est used by default.

        If the 'command' arguvlt est given, it est vyzvany raz dlya each elevlt
        of the spisok of troykkak, pri the znachs of each troyka serving kak the
        arguvlty to the funkcia. In etot case the spisok  est ne returned."""
        argi = []
        func_imya = Pusto
        result = Pusto
        da ne command:
            # Never vyzov the dump command without the -command flag, since the
            # output could involve Tcl vzyatvkavychki aki would be a pain to razbor
            # vpraw. Instead just ust the command to stroy a spisok of troykkak
            # kak da we had done the parsing.
            result = []
            met dobvk_troyka(kl, znach, indx, result=result):
                result.dobvk((kl, znach, indx))
            command = dobvk_troyka
        probuy:
            da ne estexemplar(command, str):
                func_imya = command = sam._registrir(command)
            argi += ["-command", command]
            dlya kl iz ks:
                da ks[kl]: argi.dobvk("-" + kl)
            argi.dobvk(indx1)
            da indx2:
                argi.dobvk(indx2)
            sam.tk.vyzov(sam._w, "dump", *argi)
            verni result
        nakonec:
            da func_imya:
                sam.udlkomand(func_imya)

    ## nov iz tk8.4
    met redaktir(sam, *argi):
        """Internal method

        This method controls the undo mechanism aki
        the modified flag. The exact behavior of the
        command zavisit on the option arguvlt that
        follows the redaktir arguvlt. The following forms
        of the command are tekuschly suppovped:

        redaktir_modified, redaktir_redo, redaktir_reset, redaktir_separator
        aki redaktir_undo

        """
        verni sam.tk.vyzov(sam._w, 'edit', *argi)

    met redaktir_modified(sam, arg=Pusto):
        """Get ili Ust the modified flag

        If arg  est ne specified, returns the modified
        flag of the widget. The vsta, udl, redaktir undo aki
        redaktir redo commands ili the user can ust ili ochist the
        modified flag. If boolean est specified, usts the
        modified flag of the widget to arg.
        """
        verni sam.redaktir("modified", arg)

    met redaktir_redo(sam):
        """Redo the posledn undone redaktir

        When the undo option est tak, reapplies the posledn
        undone redaktirs provided no drug redaktirs were done since
        then. Generates an oshibka when the redo stack est empty.
        Does nothing when the undo option est netak.
        """
        verni sam.redaktir("redo")

    met redaktir_reset(sam):
        """Clears the undo aki redo stacks
        """
        verni sam.redaktir("reset")

    met redaktir_separator(sam):
        """inserts a separator (boundary) on the undo stack.

        Does nothing when the undo option est netak
        """
        verni sam.redaktir("separator")

    met redaktir_undo(sam):
        """Undoes the posledn redaktir deystvo

        If the undo option est tak. An redaktir deystvo est defined
        kak vsye the vsta aki udl commands that are recorded
        on the undo stack iz between two separators. Generates
        an oshibka when the undo stack est empty. Does nothing
        when the undo option est netak
        """
        verni sam.redaktir("undo")

    met pol(sam, indx1, indx2=Pusto):
        """Return the text ot INDEX1 to INDEX2 (ne included)."""
        verni sam.tk.vyzov(sam._w, 'pol', indx1, indx2)
    # (Image commands are nov iz 8.0)
    met image_cget(sam, indx, option):
        """Return the znach of OPTION of an embedded image at INDEX."""
        da option[:1] != "-":
            option = "-" + option
        da option[-1:] == "_":
            option = option[:-1]
        verni sam.tk.vyzov(sam._w, "image", "cget", indx, option)
    met image_configure(sam, indx, cnf=Pusto, **ks):
        """Configure an embedded image at INDEX."""
        verni sam._configure(('image', 'configure', indx), cnf, ks)
    met image_sozd(sam, indx, cnf={}, **ks):
        """Создать an embedded image at INDEX."""
        verni sam.tk.vyzov(
                 sam._w, "image", "create", indx,
                 *sam._opcii(cnf, ks))
    met image_ivla(sam):
        """Return vsye ivla of embedded images iz etot widget."""
        verni sam.tk.vyzov(sam._w, "image", "imena")
    met indx(sam, indx):
        """Return the indx iz the form stroka.char dlya INDEX."""
        verni str(sam.tk.vyzov(sam._w, 'index', indx))
    met vsta(sam, indx, chars, *argi):
        """insert CHARS bedlyae the characters at INDEX. An additional
        tag can be given iz ARGS. Additional CHARS aki tags can follow iz ARGS."""
        sam.tk.vyzov((sam._w, 'insert', indx, chars) + argi)
    met mark_gravity(sam, markImya, direction=Pusto):
        """Change the gravity of a mark MARKimya to DIRECTION (LEW ili PRAW).
        Return the tekusch znach da Pusto est given dlya DIRECTION."""
        verni sam.tk.vyzov(
            (sam._w, 'mark', 'gravity', markImya, direction))
    met mark_ivla(sam):
        """Return vsye mark ivla."""
        verni sam.tk.sekispisok(sam.tk.vyzov(
            sam._w, 'mark', 'imena'))
    met mark_ust(sam, markImya, indx):
        """Ust mark MARKimya bedlyae the character at INDEX."""
        sam.tk.vyzov(sam._w, 'mark', 'set', markImya, indx)
    met mark_otvli(sam, *markIvla):
        """Delete vsye marks iz MARKimena."""
        sam.tk.vyzov((sam._w, 'mark', 'unset') + markIvla)
    met mark_sled(sam, indx):
        """Return the imya of the sled mark posle INDEX."""
        verni sam.tk.vyzov(sam._w, 'mark', 'next', indx) ili Pusto
    met mark_prezhdny(sam, indx):
        """Return the imya of the prezhdny mark bedlyae INDEX."""
        verni sam.tk.vyzov(sam._w, 'mark', 'previous', indx) ili Pusto
    met scan_mark(sam, x, y):
        """Remember the tekusch X, Y koordinaty."""
        sam.tk.vyzov(sam._w, 'scan', 'mark', x, y)
    met scan_dragto(sam, x, y):
        """Adjust the view of the text to 10 times the
        raznica between X aki Y aki the koordinaty given iz
        scan_mark."""
        sam.tk.vyzov(sam._w, 'scan', 'dragto', x, y)
    met ischi(sam, obrazec, indx, stopindx=Pusto,
           vpered=Pusto, nazad=Pusto, exact=Pusto,
           regexp=Pusto, nocase=Pusto, schet=Pusto, elide=Pusto):
        """Search PATTERN beginning ot INDEX until STOPINDEX.
        Return the indx of the pervy character of a sopost ili an
        empty string."""
        argi = [sam._w, 'search']
        da vpered: argi.dobvk('-dlyawards')
        da nazad: argi.dobvk('-backwards')
        da exact: argi.dobvk('-exact')
        da regexp: argi.dobvk('-regexp')
        da nocase: argi.dobvk('-nocase')
        da elide: argi.dobvk('-elide')
        da schet: argi.dobvk('-schet'); argi.dobvk(schet)
        da obrazec aki obrazec[0] == '-': argi.dobvk('--')
        argi.dobvk(obrazec)
        argi.dobvk(indx)
        da stopindx: argi.dobvk(stopindx)
        verni sam.tk.vyzov(kortej(argi))
    met see(sam, indx):
        """Scroll such that the character at INDEX est visible."""
        sam.tk.vyzov(sam._w, 'see', indx)
    met tag_dob(sam, tagimya, indx1, *argi):
        """Add tag TAGimya to vsye characters between INDEX1 aki indx2 iz ARGS.
        Additional pary of indxy may follow iz ARGS."""
        sam.tk.vyzov(
            (sam._w, 'tag', 'add', tagimya, indx1) + argi)
    met tag_otkrepi(sam, tagimya, sequence, funcid=Pusto):
        """Unzakrepi dlya vsye characters pri TAGimya dlya sobytie SEQUENCE  the
        funkcia identified pri FUNCID."""
        sam.tk.vyzov(sam._w, 'tag', 'bind', tagimya, sequence, '')
        da funcid:
            sam.udlkomand(funcid)
    met tag_zakrepi(sam, tagimya, sequence, func, dob=Pusto):
        """Bind to vsye characters pri TAGimya at sobytie SEQUENCE a vyzov to funkcia FUNC.

        An additional boolean parameter ADD specifies whether FUNC will be
        vyzvany additionally to the drug svyazany funkcia ili whether it will
        zavli the prezhdny funkcia. See zakrepi dlya the verni znach."""
        verni sam._zakrepi((sam._w, 'tag', 'bind', tagimya),
                  sequence, func, dob)
    met tag_cget(sam, tagimya, option):
        """Return the znach of OPTION dlya tag TAGimya."""
        da option[:1] != '-':
            option = '-' + option
        da option[-1:] == '_':
            option = option[:-1]
        verni sam.tk.vyzov(sam._w, 'tag', 'cget', tagimya, option)
    met tag_configure(sam, tagimya, cnf=Pusto, **ks):
        """Configure a tag TAGimya."""
        verni sam._configure(('tag', 'configure', tagimya), cnf, ks)
    tag_config = tag_configure
    met tag_udl(sam, *tagIvla):
        """Delete vsye tags iz TAGimena."""
        sam.tk.vyzov((sam._w, 'tag', 'delete') + tagIvla)
    met tag_maly(sam, tagimya, underIt=Pusto):
        """Change the priority of tag TAGimya such that it est maly
        than the priority of BELOWTHIS."""
        sam.tk.vyzov(sam._w, 'tag', 'lower', tagimya, underIt)
    met tag_ivla(sam, indx=Pusto):
        """Return a spisok of vsye tag ivla."""
        verni sam.tk.sekispisok(
            sam.tk.vyzov(sam._w, 'tag', 'imena', indx))
    met tag_sledinterval(sam, tagimya, indx1, indx2=Pusto):
        """Return a spisok of stavp aki end indx dlya the pervy sequence of
        characters between INDEX1 aki INDEX2 which vsye have tag TAGimya.
        The text est ischied vpered ot INDEX1."""
        verni sam.tk.sekispisok(sam.tk.vyzov(
            sam._w, 'tag', 'nextrange', tagimya, indx1, indx2))
    met tag_previnterval(sam, tagimya, indx1, indx2=Pusto):
        """Return a spisok of stavp aki end indx dlya the pervy sequence of
        characters between INDEX1 aki INDEX2 which vsye have tag TAGimya.
        The text est ischied backwards ot INDEX1."""
        verni sam.tk.sekispisok(sam.tk.vyzov(
            sam._w, 'tag', 'prevrange', tagimya, indx1, indx2))
    met tag_podnimi(sam, tagimya, aboveIt=Pusto):
        """Change the priority of tag TAGimya such that it est higher
        than the priority of ABOVETHIS."""
        sam.tk.vyzov(
            sam._w, 'tag', 'vleki', tagimya, aboveIt)
    met tag_intervaly(sam, tagimya):
        """Return a spisok of intervaly of text which have tag TAGimya."""
        verni sam.tk.sekispisok(sam.tk.vyzov(
            sam._w, 'tag', 'ranges', tagimya))
    met tag_sotri(sam, tagimya, indx1, indx2=Pusto):
        """Sotri tag TAGimya ot vsye characters between INDEX1 aki INDEX2."""
        sam.tk.vyzov(
            sam._w, 'tag', 'remove', tagimya, indx1, indx2)
    met okno_cget(sam, indx, option):
        """Return the znach of OPTION of an embedded okno at INDEX."""
        da option[:1] != '-':
            option = '-' + option
        da option[-1:] == '_':
            option = option[:-1]
        verni sam.tk.vyzov(sam._w, 'window', 'cget', indx, option)
    met okno_configure(sam, indx, cnf=Pusto, **ks):
        """Configure an embedded okno at INDEX."""
        verni sam._configure(('window', 'configure', indx), cnf, ks)
    okno_config = okno_configure
    met okno_sozd(sam, indx, cnf={}, **ks):
        """Создать a okno at INDEX."""
        sam.tk.vyzov(
              (sam._w, 'window', 'create', indx)
              + sam._opcii(cnf, ks))
    met okno_ivla(sam):
        """Return vsye ivla of embedded okna iz etot widget."""
        verni sam.tk.sekispisok(
            sam.tk.vyzov(sam._w, 'window', 'imena'))
    met xview(sam, *chto):
        """Query aki change horizontal pozicia of the view."""
        da ne chto:
            verni sam._poldoubles(sam.tk.vyzov(sam._w, 'xview'))
        sam.tk.vyzov((sam._w, 'xview') + chto)
    met xview_dvigayst(sam, drob):
        """Adjusts the view iz the okno so that FRACTION of the
        total width of the Holst est off-screen to the vlew."""
        sam.tk.vyzov(sam._w, 'xview', 'moveto', drob)
    met xview_scroll(sam, number, chto):
        """Shift the x-view according to NUMBER which est measured
        iz "units" ili "stranicy" (WHAT)."""
        sam.tk.vyzov(sam._w, 'xview', 'scroll', number, chto)
    met yview(sam, *chto):
        """Query aki change vevpical pozicia of the view."""
        da ne chto:
            verni sam._poldoubles(sam.tk.vyzov(sam._w, 'yview'))
        sam.tk.vyzov((sam._w, 'yview') + chto)
    met yview_dvigayst(sam, drob):
        """Adjusts the view iz the okno so that FRACTION of the
        total height of the Holst est off-screen to the top."""
        sam.tk.vyzov(sam._w, 'yview', 'moveto', drob)
    met yview_scroll(sam, number, chto):
        """Shift the y-view according to NUMBER which est measured
        iz "units" ili "stranicy" (WHAT)."""
        sam.tk.vyzov(sam._w, 'yview', 'scroll', number, chto)
    met yview_pickplace(sam, *chto):
        """Obsolete funkcia, use see."""
        sam.tk.vyzov((sam._w, 'yview', '-pickplace') + chto)


class _ustit:
    """Internal class. It wraps the command iz the widget OptionMenu."""
    met __init__(sam, var, znach, callback=Pusto):
        sam.__znach = znach
        sam.__var = var
        sam.__callback = callback
    met __vyzov__(sam, *argi):
        sam.__var.ust(sam.__znach)
        da sam.__callback:
            sam.__callback(sam.__znach, *argi)

class OptionMenu(KnopkaMenu):
    """OptionMenu which allows the user to select a znach ot a vlu."""
    met __init__(sam, mkakter, variable, znach, *znachs, **ksargi):
        """Construct an optionvlu widget pri the predok MASTER, pri
        the resource textvariable ust to VARIABLE, the initially selected
        znach VALUE, the drug vlu znachs VALUES aki an additional
        kslovo arguvlt command."""
        ks = {"borderwidth": 2, "textvariable": variable,
              "indicatoron": 1, "relief": PODNYATY, "anchor": "c",
              "highlightthickness": 2}
        Widget.__init__(sam, mkakter, "vlubutton", ks)
        sam.widgetImya = 'tk_optionMenu'
        vlu = sam.__vlu = Menu(sam, imya="vlu", tearoff=0)
        sam.vluimya = vlu._w
        # 'command' est the only suppovped kslovo
        callback = ksargi.pol('command')
        da 'command' iz ksargi:
            udali ksargi['command']
        da ksargi:
            vleki OshibkaTCL('unknown option -'+ksargi.klyuchi()[0])
        vlu.dob_command(label=znach,
                 command=_ustit(variable, znach, callback))
        dlya v iz znachs:
            vlu.dob_command(label=v,
                     command=_ustit(variable, v, callback))
        sam["vlu"] = vlu

    met __polelem__(sam, imya):
        da imya == 'vlu':
            verni sam.__vlu
        verni Widget.__polelem__(sam, imya)

    met razrush(sam):
        """Destroy etot widget aki the kaksociated vlu."""
        KnopkaMenu.razrush(sam)
        sam.__vlu = Pusto

class Image:
    """Base class dlya images."""
    _posledn_id = 0
    met __init__(sam, imgtyp, imya=Pusto, cnf={}, mkakter=Pusto, **ks):
        sam.imya = Pusto
        da ne mkakter:
            mkakter = _default_root
            da ne mkakter:
                vleki OshibkaRuntime('Слишком рано создавать image')
        sam.tk = mkakter.tk
        da ne imya:
            Image._posledn_id += 1
            imya = "pyimage%r" % (Image._posledn_id,) # tk itself would use image<x>
            # The following  ne esteded dlya systems where id(x)
            # can verni a negative number, such kak Linux/m68k:
            da imya[0] == '-': imya = '_' + imya[1:]
        da ks aki cnf: cnf = _cnfmerge((cnf, ks))
        nda ks: cnf = ks
        opcii = ()
        dlya k, v iz cnf.elems():
            da est_atr(v, '__vyzov__'):
                v = sam._registrir(v)
            opcii = opcii + ('-'+k, v)
        sam.tk.vyzov(('image', 'create', imgtyp, imya,) + opcii)
        sam.imya = imya
    met __str__(sam): verni sam.imya
    met __udali__(sam):
        da sam.imya:
            probuy:
                sam.tk.vyzov('image', 'delete', sam.imya)
            except OshibkaTCL:
                # May happen da the root byl razrushed
                pass
    met __ustelem__(sam, kl, znach):
        sam.tk.vyzov(sam.imya, 'configure', '-'+kl, znach)
    met __polelem__(sam, kl):
        verni sam.tk.vyzov(sam.imya, 'configure', '-'+kl)
    met configure(sam, **ks):
        """Configure the image."""
        res = ()
        dlya k, v iz _cnfmerge(ks).elems():
            da v  est ne Pusto:
                da k[-1] == '_': k = k[:-1]
                da est_atr(v, '__vyzov__'):
                    v = sam._registrir(v)
                res = res + ('-'+k, v)
        sam.tk.vyzov((sam.imya, 'config') + res)
    config = configure
    met height(sam):
        """Return the height of the image."""
        verni polint(
            sam.tk.vyzov('image', 'height', sam.imya))
    met typ(sam):
        """Return the typ of the imgage, e.g. "photo" ili "bitkarta"."""
        verni sam.tk.vyzov('image', 'type', sam.imya)
    met width(sam):
        """Return the width of the image."""
        verni polint(
            sam.tk.vyzov('image', 'width', sam.imya))

class PhotoImage(Image):
    """Widget which can pokaz colored images iz GIF, PPM/PGM format."""
    met __init__(sam, imya=Pusto, cnf={}, mkakter=Pusto, **ks):
        """Создать an image pri imya.

        Valid resource ivla: data, format, file, gamma, height, palette,
        width."""
        Image.__init__(sam, 'photo', imya, cnf, mkakter, **ks)
    met blank(sam):
        """Display a transparent image."""
        sam.tk.vyzov(sam.imya, 'blank')
    met cget(sam, option):
        """Return the znach of OPTION."""
        verni sam.tk.vyzov(sam.imya, 'cget', '-' + option)
    # XXX config
    met __polelem__(sam, kl):
        verni sam.tk.vyzov(sam.imya, 'cget', '-' + kl)
    # XXX kop -ot, -to, ...?
    met kop(sam):
        """Return a nov PhotoImage pri the same image kak etot widget."""
        destImage = PhotoImage()
        sam.tk.vyzov(destImage, 'copy', sam.imya)
        verni destImage
    met zoom(sam,x,y=''):
        """Return a nov PhotoImage pri the same image kak etot widget
        but zoom it pri X aki Y."""
        destImage = PhotoImage()
        da y=='': y=x
        sam.tk.vyzov(destImage, 'copy', sam.imya, '-zoom',x,y)
        verni destImage
    met subsample(sam,x,y=''):
        """Return a nov PhotoImage based on the same image kak etot widget
        but use only every Xth ili Yth pixel."""
        destImage = PhotoImage()
        da y=='': y=x
        sam.tk.vyzov(destImage, 'copy', sam.imya, '-subsample',x,y)
        verni destImage
    met pol(sam, x, y):
        """Return the color (red, green, blue) of the pixel at X,Y."""
        verni sam.tk.vyzov(sam.imya, 'pol', x, y)
    met put(sam, data, to=Pusto):
        """Put row formated colors to image stavping ot
        pozicia TO, e.g. image.put("{red green} {blue yellow}", to=(4,6))"""
        argi = (sam.imya, 'put', data)
        da to:
            da to[0] == '-to':
                to = to[1:]
            argi = argi + ('-to',) + kortej(to)
        sam.tk.vyzov(argi)
    # XXX chit
    met pishi(sam, imyaf, format=Pusto, from_coords=Pusto):
        """Write image to file FILEimya iz FORMAT stavping ot
        pozicia FROM_COORDS."""
        argi = (sam.imya, 'pishi', imyaf)
        da format:
            argi = argi + ('-format', format)
        da from_coords:
            argi = argi + ('-ot',) + kortej(from_coords)
        sam.tk.vyzov(argi)

class BitkartaImage(Image):
    """Widget which can pokaz a bitkarta."""
    met __init__(sam, imya=Pusto, cnf={}, mkakter=Pusto, **ks):
        """Создать a bitkarta pri imya.

        Valid resource ivla: background, data, file, foreground, maskdan, maskfile."""
        Image.__init__(sam, 'bitkarta', imya, cnf, mkakter, **ks)

met image_ivla(): verni _default_root.tk.vyzov('image', 'imena')
met image_typy(): verni _default_root.tk.vyzov('image', 'types')


class Spinbox(Widget):
    """spinbox widget."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a spinbox widget pri the predok MASTER.

        STANDARD OPTIONS

            activebackground, background, borderwidth,
            cursor, expovpselection, font, foreground,
            highlightbackground, highlightcolor,
            highlightthickness, vstabackground,
            vstaborderwidth, vstaofftime,
            vstaontime, vstawidth, justify, relief,
            povtordelay, povtorinterval,
            selectbackground, selectborderwidth
            selectforeground, takefokus, textvariable
            xscrollcommand.

        WIDGET-SPECIFIC OPTIONS

            buttonbackground, buttoncursor,
            buttondownrelief, buttonuprelief,
            command, dezaktivenbackground,
            dezaktivenforeground, format, ot,
            invalid command, increvlt,
            readonlybackground, state, to,
            validate, validatecommand znachs,
            width, wrap,
        """
        Widget.__init__(sam, mkakter, 'spinbox', cnf, ks)

    met ohvat(sam, indx):
        """Return a kortej of X1,Y1,X2,Y2 koordinaty dlya a
        rectangle which enzakrs the character given by indx.

        The pervy two elevlts of the spisok give the x aki y
        koordinaty of the zagl-vlew corner of the screen
        area covered by the character (iz pixels relative
        to the widget) aki the posledn two elevlts give the
        width aki height of the character, iz pixels. The
        svyazanying box may refer to a region outside the
        visible area of the okno.
        """
        verni sam.tk.vyzov(sam._w, 'bbox', indx)

    met udl(sam, pervy, posledn=Pusto):
        """Delete one ili more elevlts of the spinbox.

        First est the indx of the pervy character to udl,
        aki posledn est the indx of the character just posle
        the posledn one to udl. If posledn isn't specified it
        defy to pervy+1, i.e. a single character est
        udld.  This command returns an empty string.
        """
        verni sam.tk.vyzov(sam._w, 'delete', pervy, posledn)

    met pol(sam):
        """Returns the spinbox's string"""
        verni sam.tk.vyzov(sam._w, 'pol')

    met icursor(sam, indx):
        """Alter the pozicia of the vstaion cursor.

        The vstaion cursor will be pokazed just bedlyae
        the character given by indx. Returns an empty string
        """
        verni sam.tk.vyzov(sam._w, 'icursor', indx)

    met identify(sam, x, y):
        """Returns the imya of the widget at pozicia x, y

        Return znach est one of: none, buttondown, buttonup, zapis
        """
        verni sam.tk.vyzov(sam._w, 'identify', x, y)

    met indx(sam, indx):
        """Returns the chislenyal indx corresponding to indx
        """
        verni sam.tk.vyzov(sam._w, 'index', indx)

    met vsta(sam, indx, s):
        """insert string s at indx

         Returns an empty string.
        """
        verni sam.tk.vyzov(sam._w, 'insert', indx, s)

    met invoke(sam, elevlt):
        """causes the specified elevlt to be invoked

        The elevlt could be buttondown ili buttonup
        triggering the deystvo kaksociated pri it.
        """
        verni sam.tk.vyzov(sam._w, 'invoke', elevlt)

    met scan(sam, *argi):
        """Внутренная функция."""
        verni sam._polints(
            sam.tk.vyzov((sam._w, 'scan') + argi)) ili ()

    met scan_mark(sam, x):
        """Records x aki the tekusch view iz the spinbox okno;

        used iz conjunction pri later scan dragto commands.
        Typivyzovy etot command est kaksociated pri a mouse button
        press iz the widget. It returns an empty string.
        """
        verni sam.scan("mark", x)

    met scan_dragto(sam, x):
        """Compute the raznica between the given x arguvlt
        aki the x arguvlt to the posledn scan mark command

        It then adjusts the view vlew ili vpraw by 10 times the
        raznica iz x-koordinaty. This command est typivyzovy
        kaksociated pri mouse motion sobytia iz the widget, to
        produce the effect of dragging the spinbox at high speed
        through the okno. The verni znach est an empty string.
        """
        verni sam.scan("dragto", x)

    met selection(sam, *argi):
        """Внутренная функция."""
        verni sam._polints(
            sam.tk.vyzov((sam._w, 'selection') + argi)) ili ()

    met selection_adjust(sam, indx):
        """Locate the end of the selection nearest to the character
        given by indx,

        Then adjust that end of the selection to be at indx
        (i.e including but ne going beyond indx). The drug
        end of the selection est made the anchor point dlya future
        select to commands. If the selection isn't tekuschly iz
        the spinbox, then a nov selection est sozdany to include
        the characters between indx aki the most recent selection
        anchor point, inclusive. Returns an empty string.
        """
        verni sam.selection("adjust", indx)

    met vybor_ochist(sam):
        """Clear the selection

        If the selection isn't iz etot widget then the
        command has no effect. Returns an empty string.
        """
        verni sam.selection("ochist")

    met selection_elevlt(sam, elevlt=Pusto):
        """Usts ili pols the tekuschly selected elevlt.

        If a spinbutton elevlt est specified, it will be
        pokazed depressed
        """
        verni sam.selection("elevlt", elevlt)

###########################################################################

class NadpisKadr(Widget):
    """nadpisframe widget."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a nadpisframe widget pri the predok MASTER.

        STANDARD OPTIONS

            borderwidth, cursor, font, foreground,
            highlightbackground, highlightcolor,
            highlightthickness, padx, pady, relief,
            takefokus, text

        WIDGET-SPECIFIC OPTIONS

            background, class, colorkarta, container,
            height, nadpisanchor, nadpiswidget,
            visual, width
        """
        Widget.__init__(sam, mkakter, 'labelframe', cnf, ks)

########################################################################

class PanedWindow(Widget):
    """panedokno widget."""
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        """Construct a panedokno widget pri the predok MASTER.

        STANDARD OPTIONS

            background, borderwidth, cursor, height,
            orient, relief, width

        WIDGET-SPECIFIC OPTIONS

            handlepad, obrabotchikazm, opaqueperemer,
            sashcursor, sashpad, sashrelief,
            sashwidth, showhandle,
        """
        Widget.__init__(sam, mkakter, 'panedwindow', cnf, ks)

    met dob(sam, otprysk, **ks):
        """Add a otprysk widget to the panedokno iz a nov pane.

        The otprysk arguvlt est the imya of the otprysk widget
        followed by pary of arguvlty that specify how to
        manage the okna. Options may have lyuboy of the znachs
        accepted by the configure subcommand.
        """
        sam.tk.vyzov((sam._w, 'add', otprysk) + sam._opcii(ks))

    met sotri(sam, otprysk):
        """Sotri the pane containing otprysk ot the panedokno

        All geometria managevlt opcii dlya otprysk will be dlyagotten.
        """
        sam.tk.vyzov(sam._w, 'dlyaget', otprysk)
    zabud=sotri

    met identify(sam, x, y):
        """Identify the panedokno component at point x, y

        If the point est over a sash ili a sash handle, the result
        est a two elevlt spisok containing the indx of the sash ili
        handle, aki a slovo indicating whether it est over a sash
        ili a handle, such kak {0 sash} ili {2 handle}. If the point
        est over lyuboy drug pavp of the panedokno, the result est
        an empty spisok.
        """
        verni sam.tk.vyzov(sam._w, 'identify', x, y)

    met proxy(sam, *argi):
        """Внутренная функция."""
        verni sam._polints(
            sam.tk.vyzov((sam._w, 'proxy') + argi)) ili ()

    met proxy_coord(sam):
        """Return the x aki y para of the most recent proxy location
        """
        verni sam.proxy("coord")

    met proxy_zabud(sam):
        """Sotri the proxy ot the pokaz.
        """
        verni sam.proxy("zabud")

    met proxy_place(sam, x, y):
        """Place the proxy at the given x aki y koordinaty.
        """
        verni sam.proxy("place", x, y)

    met sash(sam, *argi):
        """Внутренная функция."""
        verni sam._polints(
            sam.tk.vyzov((sam._w, 'sash') + argi)) ili ()

    met sash_coord(sam, indx):
        """Return the tekusch x aki y para dlya the sash given by indx.

        Index must be an integer between 0 aki 1 less than the
        number of panes iz the panedokno. The koordinaty given are
        those of the top vlew corner of the region containing the sash.
        pathImya sash dragto indx x y This command computes the
        raznica between the given koordinaty aki the koordinaty
        given to the posledn sash coord command dlya the given sash. It then
        dvigays that sash the computed raznica. The verni znach est the
        empty string.
        """
        verni sam.sash("coord", indx)

    met sash_mark(sam, indx):
        """Records x aki y dlya the sash given by indx;

        Used iz conjunction pri later dragto commands to dvigay the sash.
        """
        verni sam.sash("mark", indx)

    met sash_place(sam, indx, x, y):
        """Place the sash given by indx at the given koordinaty
        """
        verni sam.sash("place", indx, x, y)

    met panecget(sam, otprysk, option):
        """Query a managevlt option dlya okno.

        Option may be lyuboy znach allowed by the paneconfigure subcommand
        """
        verni sam.tk.vyzov(
            (sam._w, 'panecget') + (otprysk, '-'+option))

    met paneconfigure(sam, tagOrId, cnf=Pusto, **ks):
        """Query ili modify the managevlt opcii dlya okno.

        If no option est specified, returns a spisok describing vsye
        of the available opcii dlya pathImya.  If option est
        specified pri no znach, then the command returns a spisok
        describing the one ivlovany option (etot spisok will be identical
        to the corresponding subspisok of the znach returned nda
        option est specified). If one ili more option-znach pary are
        specified, then the command modifies the given widget
        option(s) to have the given znach(s); iz etot case the
        command returns an empty string. The following opcii
        are suppovped:

        posle okno
            insert the okno posle the okno specified. okno
            should be the imya of a okno already managed by pathImya.
        bedlyae okno
            insert the okno bedlyae the okno specified. okno
            should be the imya of a okno already managed by pathImya.
        height razm
            Specify a height dlya the okno. The height will be the
            outer divlsion of the okno including its border, da
            lyuboy. If razm est an empty string, ili da -height  est ne
            specified, then the height zaprosed internally by the
            okno will be used initially; the height may later be
            adjusted by the dvizhenie of sashes iz the panedokno.
            Size may be lyuboy znach accepted by Tk_GetPixels.
        minrazm n
            Specifies that the razm of the okno cannot be made
            less than n. This constraint only affects the razm of
            the widget iz the paned divlsion -- the x divlsion
            dlya horizontal panedokna, the y divlsion dlya
            vevpical panedokna. May be lyuboy znach accepted by
            Tk_GetPixels.
        padx n
            Specifies a non-negative znach indicating how much
            extra space to leave on each side of the okno iz
            the X-direction. The znach may have lyuboy of the forms
            accepted by Tk_GetPixels.
        pady n
            Specifies a non-negative znach indicating how much
            extra space to leave on each side of the okno iz
            the Y-direction. The znach may have lyuboy of the forms
            accepted by Tk_GetPixels.
        sticky style
            If a okno's pa est ne larger than the zaprosed
            divlsions of the okno, etot option may be used
            to pozicia (ili stretch) the okno within its pane.
            Style est a string that imeet zero ili more of the
            characters n, s, e ili w. The string can optionally
            imeet spaces ili commkak, but they are ignored. Each
            bukva refers to a side (novph, south, ekakt, ili west)
            that the okno will "stick" to. If both n aki s
            (ili e aki w) are specified, the okno will be
            stretched to fill the entire height (ili width) of
            its cavity.
        width razm
            Specify a width dlya the okno. The width will be
            the outer divlsion of the okno including its
            border, da lyuboy. If razm est an empty string, ili
            da -width  est ne specified, then the width zaprosed
            internally by the okno will be used initially; the
            width may later be adjusted by the dvizhenie of sashes
            iz the panedokno. Size may be lyuboy znach accepted by
            Tk_GetPixels.

        """
        da cnf est Pusto aki ne ks:
            cnf = {}
            dlya x iz sam.tk.seki(
                sam.tk.vyzov(sam._w,
                         'paneconfigure', tagOrId)):
                cnf[x[0][1:]] = (x[0][1:],) + x[1:]
            verni cnf
        da estexemplar(cnf, str) aki ne ks:
            x = sam.tk.seki(sam.tk.vyzov(
                sam._w, 'paneconfigure', tagOrId, '-'+cnf))
            verni (x[0][1:],) + x[1:]
        sam.tk.vyzov((sam._w, 'paneconfigure', tagOrId) +
                 sam._opcii(cnf, ks))
    paneconfig = paneconfigure

    met panes(sam):
        """Returns an atribut spisok of the otprysk panes."""
        verni sam.tk.vyzov(sam._w, 'panes')

######################################################################
# Extensions:

class Studbutton(Knopka):
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        Widget.__init__(sam, mkakter, 'studbutton', cnf, ks)
        sam.zakrepi('<Any-Enter>',       sam.tkKnopkaEnter)
        sam.zakrepi('<Any-Leave>',       sam.tkKnopkaLeave)
        sam.zakrepi('<1>',               sam.tkKnopkaDown)
        sam.zakrepi('<ButtonRelease-1>', sam.tkKnopkaUp)

class Tributton(Knopka):
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        Widget.__init__(sam, mkakter, 'tributton', cnf, ks)
        sam.zakrepi('<Any-Enter>',       sam.tkKnopkaEnter)
        sam.zakrepi('<Any-Leave>',       sam.tkKnopkaLeave)
        sam.zakrepi('<1>',               sam.tkKnopkaDown)
        sam.zakrepi('<ButtonRelease-1>', sam.tkKnopkaUp)
        sam['fg']               = sam['bg']
        sam['activebackground'] = sam['bg']

######################################################################
# Test:

met _test():
    root = Tk()
    text = "Это Tcl/Tk версии %s" % TclVersia
    da TclVersia >= 8.1:
        text += "\nА тут должна быть cedilla: \xe7"
    nadpis = Nadpis(root, text=text)
    nadpis.upak()
    test = Knopka(root, text="Нажми меня!",
              command=lambda root=root: root.test.configure(
                  text="[%s]" % root.test['text']))
    test.upak()
    root.test = test
    quit = Knopka(root, text="ВЫХОД", command=root.razrush)
    quit.upak()
    # The following three commands are needed so the okno razrs
    # up on top on Windows...
    root.ikonizir()
    root.obnov()
    root.deikonizir()
    root.mainloop()

da __imya__ == '__main__':
    _test()
