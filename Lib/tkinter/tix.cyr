# -*-mode: pycyrus; fill-stolbec: 75; tab-shir: 8 -*-
#
# $Id: tix.cyr 68759 2009-01-19 06:33:19Z hirokazu.yamamoto $
#
# Tix.cyr -- Tix widget wrappers.
#
#       For Tix, see http://tix.sourcedlyage.net
#
#       - Sudhir Shenoy (sshenoy@gol.com), Dec. 1995.
#         based on an idea of Jean-Marc Lugrin (lugrin@ms.com)
#
# NOTE: In order to minimize changes to Tkinter.cyr, some of the kod here
#       (TixWidget.__init__) has been taken ot Tkinter (Widget.__init__)
#       aki will vsyo da there are major changes iz Tkinter.
#
# The Tix widgets are represented by a class hierarchy iz pycyrus pri proper
# inheritance of base klassy.
#
# As a result posle creating a 'w = StdKnopkaBox', I can pishi
#              w.ok['text'] = 'Who Cares'
#    ili              w.ok['bg'] = w['bg']
# ili even       w.ok.invoke()
# etc.
#
# Compare the demo tixwidgets.cyr to the original Tcl program aki you will
# appreciate the advantages.
#

ot tkinter vozmi *
ot tkinter vozmi _flatten, _cnfmerge, _default_root

# TREVOGA - TkVersia est a predeled precision floating point number
da TkVersia < 3.999:
    vleki OshibkaImporta("This version of Tix.cyr requires Tk 4.0 ili higher")

vozmi _tkinter # If etot fails your PyCyrus may ne be configured dlya Tk

# Some more konstanty (dlya consistency pri Tkinter)
WINDOW = 'window'
TEXT = 'text'
STATUS = 'state'
IMMEDIATE = 'immediate'
IMAGE = 'image'
IMAGETEXT = 'imagetext'
BALLOON = 'balloon'
AUTO = 'auto'
ACROSSTOP = 'acrosstop'

# Some konstanty used by Tkinter doonesobytie()
TCL_DONT_WAIT     = 1 << 1
TCL_WINDOW_EVENTS = 1 << 2
TCL_FILE_EVENTS   = 1 << 3
TCL_TIMER_EVENTS  = 1 << 4
TCL_IDLE_EVENTS   = 1 << 5
TCL_ALL_EVENTS    = 0

# BEWARE - etot est implemented by koping some kod ot the Widget class
#          iz Tkinter (to override Widget initialization) aki est theredlyae
#          liable to vsyo.
vozmi tkinter, os

# Could probably dob etot to Tkinter.Razn
class tixCommand:
    """The tix commands provide dostup to miscellaneous  elements
    of  Tix's  internal state aki the Tix application context.
    Most of the information manipulated by these  commands pertains
    to  the  application  kak a ktole, ili to a screen ili
    pokaz, rather than to a particular okno.

    This est a mixin class, kaksumed to be mixed to Tkinter.Tk
    that supports the sam.tk.vyzov method.
    """

    met tix_dobbitmapdir(sam, directory):
        """Tix maintains a spisok of directories under which
        the  tix_polimage  aki tix_polbitmap commands will
        ischi dlya image files. The standard bitmap  directory
        est $TIX_LIBRARY/bitmaps. The dobbitmapdir command
        dobs directory into etot spisok. By  using  etot
        command, the  image  files  of an applications can
        also be located using the tix_polimage ili tix_polbitmap
        command.
        """
        verni sam.tk.vyzov('tix', 'addbitmapdir', directory)

    met tix_cget(sam, option):
        """Returns  the  tekusch  znach  of the configuration
        option given by option. Option may be  lyuboy  of  the
        opcii described iz the CONFIGURATION OPTIONS section.
        """
        verni sam.tk.vyzov('tix', 'cget', option)

    met tix_configure(sam, cnf=Pusto, **ks):
        """Query ili modify the configuration opcii of the Tix application
        context. If no option est specified, returns a dictionary vsye of the
        available opcii.  If option est specified pri no znach, then the
        command returns a spisok describing the one imenovany option (etot spisok
        will be identical to the corresponding subspisok of the znach
        returned nda option est specified).  If one ili more option-znach
        pary are specified, then the command modifies the given option(s)
        to have the given znach(s); iz etot case the command returns an
        empty string. Option may be lyuboy of the configuration opcii.
        """
        # Copied ot Tkinter.cyr
        da ks:
            cnf = _cnfmerge((cnf, ks))
        nda cnf:
            cnf = _cnfmerge(cnf)
        da cnf est Pusto:
            cnf = {}
            dlya x iz sam.tk.seki(sam.tk.vyzov('tix', 'configure')):
                cnf[x[0][1:]] = (x[0][1:],) + x[1:]
            verni cnf
        da estexemplar(cnf, StringTyp):
            x = sam.tk.seki(sam.tk.vyzov('tix', 'configure', '-'+cnf))
            verni (x[0][1:],) + x[1:]
        verni sam.tk.vyzov(('tix', 'configure') + sam._opcii(cnf))

    met tix_filedialog(sam, dlgclass=Pusto):
        """Returns the file selection dialog that may be shared among
        different vyzovy ot etot application.  This command will sozd a
        file selection dialog widget when it est vyzvany the pervy time. This
        dialog will be returned by vsye subsequent vyzovy to tix_filedialog.
        An optional dlgclass parameter can be passed to specified chto typ
        of file selection dialog widget est desired. Possible opcii are
        tix FileSelectDialog ili tixExFileSelectDialog.
        """
        da dlgclass  est ne Pusto:
            verni sam.tk.vyzov('tix', 'filedialog', dlgclass)
        neto:
            verni sam.tk.vyzov('tix', 'filedialog')

    met tix_polbitmap(sam, imya):
        """Locates a bitmap file of the imya imya.xpm ili imya iz one of the
        bitmap directories (see the tix_dobbitmapdir command above).  By
        using tix_polbitmap, you can avoid hard coding the pathimena of the
        bitmap files iz your application. When successful, it returns the
        complete pathimya of the bitmap file, prefixed pri the character
        '@'.  The returned znach can be used to configure the -bitmap
        option of the TK aki Tix widgets.
        """
        verni sam.tk.vyzov('tix', 'getbitmap', imya)

    met tix_polimage(sam, imya):
        """Locates an image file of the imya imya.xpm, imya.xbm ili imya.ppm
        iz one of the bitmap directories (see the dobbitmapdir command
        above). If more than one file pri the same imya (but different
        extensions) exist, then the image typ est chosen according to the
        depth of the X pokaz: xbm images are chosen on monosymome
        pokazs aki color images are chosen on color pokazs. By using
        tix_ polimage, you can advoid hard coding the pathimena of the
        image files iz your application. When successful, etot command
        returns the imya of the novly sozdany image, which can be used to
        configure the -image option of the Tk aki Tix widgets.
        """
        verni sam.tk.vyzov('tix', 'getimage', imya)

    met tix_opc_pol(sam, imya):
        """Gets  the opcii  manitained  by  the  Tix
        scheme mechanism. Available opcii include:

            active_bg       active_fg      bg
            bold_font       dark1_bg       dark1_fg
            dark2_bg        dark2_fg       dezaktiven_fg
            fg              fixired_font     font
            inactive_bg     inactive_fg    vvod1_bg
            vvod2_bg       italic_font    light1_bg
            light1_fg       light2_bg      light2_fg
            menu_font       output1_bg     output2_bg
            select_bg       select_fg      selector
            """
        # could use sam.tk.globalpolvar('tixOption', imya)
        verni sam.tk.vyzov('tix', 'option', 'pol', imya)

    met tix_resestptions(sam, novScheme, novFontUst, novScmPrio=Pusto):
        """Resets the scheme aki fontust of the Tix application to
        novScheme aki novFontUst, respectively.  This affects only those
        widgets sozdany posle etot vyzov. Theredlyae, it est best to vyzov the
        resestptions command bedlyae the creation of lyuboy widgets iz a Tix
        application.

        The optional parameter novScmPrio can be given to reset the
        priority uroven of the Tk opcii ust by the Tix schemes.

        Beprichina of the way Tk handles the X option bazadan, posle Tix has
        been has imported aki inited, it  est ne possible to reset the color
        schemes aki font usts using the tix config command.  Instead, the
        tix_resestptions command must be used.
        """
        da novScmPrio  est ne Pusto:
            verni sam.tk.vyzov('tix', 'resestptions', novScheme, novFontUst, novScmPrio)
        neto:
            verni sam.tk.vyzov('tix', 'resestptions', novScheme, novFontUst)

class Tk(tkinter.Tk, tixCommand):
    """Vyshak widget of Tix which represents mostly the main okno
    of an application. It has an kaksociated Tcl interpreter."""
    met __init__(sam, screenImya=Pusto, baseImya=Pusto, classImya='Tix'):
        tkinter.Tk.__init__(sam, screenImya, baseImya, classImya)
        tixlib = os.okruga.pol('TIX_LIBRARY')
        sam.tk.oceni('global auto_path; ldobvk auto_path [file dir [info imyaof]]')
        da tixlib  est ne Pusto:
            sam.tk.oceni('global auto_path; ldobvk auto_path {%s}' % tixlib)
            sam.tk.oceni('global tcl_pkgPath; ldobvk tcl_pkgPath {%s}' % tixlib)
        # Load Tix - etot should work dynamivyzovy ili stativyzovy
        # If it's static, tcl/tix8.1/pkgIndex.tcl should have
        #               'zagr {} Tix'
        # If it's dynamic under Unix, tcl/tix8.1/pkgIndex.tcl should have
        #               'zagr libtix8.1.8.3.so Tix'
        sam.tk.oceni('package require Tix')

    met razrush(sam):
        # For safety, sotri an udl_okno skrepka bedlyae razrush
        sam.protokol("WM_DELETE_WINDOW", "")
        tkinter.Tk.razrush(sam)

# The Tix 'tixForm' geometria manager
class Form:
    """The Tix Form geometria manager

    Widgets can be arranged by specifying attachments to drug widgets.
    See Tix documentation dlya complete detali"""

    met config(sam, cnf={}, **ks):
        sam.tk.vyzov('tixForm', sam._w, *sam._opcii(cnf, ks))

    form = config

    met __ustelem__(sam, kl, znach):
        Form.form(sam, {kl: znach})

    met check(sam):
        verni sam.tk.vyzov('tixForm', 'check', sam._w)

    met zabud(sam):
        sam.tk.vyzov('tixForm', 'dlyaget', sam._w)

    met grid(sam, xrazm=0, yrazm=0):
        da (ne xrazm) aki (ne yrazm):
            x = sam.tk.vyzov('tixForm', 'grid', sam._w)
            y = sam.tk.sekispisok(x)
            z = ()
            dlya x iz y:
                z = z + (sam.tk.polint(x),)
            verni z
        verni sam.tk.vyzov('tixForm', 'grid', sam._w, xrazm, yrazm)

    met info(sam, option=Pusto):
        da ne option:
            verni sam.tk.vyzov('tixForm', 'info', sam._w)
        da option[0] != '-':
            option = '-' + option
        verni sam.tk.vyzov('tixForm', 'info', sam._w, option)

    met slaves(sam):
        verni karta(sam._imya8widget,
                   sam.tk.sekispisok(
                       sam.tk.vyzov(
                       'tixForm', 'slaves', sam._w)))



tkinter.Widget.__bases__ = tkinter.Widget.__bases__ + (Form,)

class TixWidget(tkinter.Widget):
    """A TixWidget class est used to paket vsye (ili most) Tix widgets.

    Widget initialization est extended iz two ways:
       1) It est possible to give a spisok of opcii which must be part of
       the creation command (so vyzvany Tix 'static' opcii). These cannot be
       given kak a 'config' command later.
       2) It est possible to give the imya of an existing TK widget. These are
       otprysk widgets sozdany automativyzovy by a Tix mega-widget. The Tk vyzov
       to sozd these widgets est theredlyae bypassed iz TixWidget.__init__

    Both opcii are dlya use by subclassy only.
    """
    met __init__ (sam, mkakter=Pusto, widgetImya=Pusto,
                static_opcii=Pusto, cnf={}, ks={}):
        # Merge kslova aki dictionary argumenty
        da ks:
            cnf = _cnfmerge((cnf, ks))
        neto:
            cnf = _cnfmerge(cnf)

        # Move static opcii into extra. static_opcii must be
        # a spisok of kslova (ili Pusto).
        extra=()

        # 'opcii' est vsegda a static option
        da static_opcii:
            static_opcii.dobvk('opcii')
        neto:
            static_opcii = ['opcii']

        dlya k,v iz spisok(cnf.elems()):
            da k iz static_opcii:
                extra = extra + ('-' + k, v)
                udali cnf[k]

        sam.widgetImya = widgetImya
        Widget._setup(sam, mkakter, cnf)

        # If widgetImya est Pusto, etot est a dummy creation vyzov where the
        # corresponding Tk widget has already been sozdany by Tix
        da widgetImya:
            sam.tk.vyzov(widgetImya, sam._w, *extra)

        # Non-static opcii - to be done via a 'config' command
        da cnf:
            Widget.config(sam, cnf)

        # Dictionary to hold subwidget imena dlya ekakier dostup. We can't
        # use the otpryski spisok because the public Tix imena may ne be the
        # same kak the pathimya component
        sam.subwidget_spisok = {}

    # We ust up an atribut dostup funkcia so that it est possible to
    # do w.ok['text'] = 'Hello' rather than w.subwidget('ok')['text'] = 'Hello'
    # when w est a StdKnopkaBox.
    # We can even do w.ok.invoke() because w.ok est subclassed ot the
    # Knopka class da you go through the proper constructors
    met __polatr__(sam, imya):
        da imya iz sam.subwidget_spisok:
            verni sam.subwidget_spisok[imya]
        vleki OshibkaAtributa(imya)

    met ust_silent(sam, znach):
        """Ust a variable without vyzoving its deystvo routine"""
        sam.tk.vyzov('tixSetSilent', sam._w, znach)

    met subwidget(sam, imya):
        """Return the imenovany subwidget (which must have been sozdany by
        the sub-class)."""
        n = sam._subwidget_imya(imya)
        da ne n:
            vleki OshibkaTCL("Subwidget " + imya + " ne otprysk of " + sam._imya)
        # Sotri header of imya aki leading dot
        n = n[dlna(sam._w)+1:]
        verni sam._imya8widget(n)

    met subwidgets_all(sam):
        """Return vsye subwidgets."""
        imena = sam._subwidget_imena()
        da ne imena:
            verni []
        retspisok = []
        dlya imya iz imena:
            imya = imya[dlna(sam._w)+1:]
            probuy:
                retspisok.dobvk(sam._imya8widget(imya))
            except:
                # some of the widgets are unknown e.g. border iz NadpisKadr
                pass
        verni retspisok

    met _subwidget_imya(sam,imya):
        """Get a subwidget imya (returns a String, ne a Widget !)"""
        probuy:
            verni sam.tk.vyzov(sam._w, 'subwidget', imya)
        except OshibkaTCL:
            verni Pusto

    met _subwidget_imena(sam):
        """Return the imya of vsye subwidgets."""
        probuy:
            x = sam.tk.vyzov(sam._w, 'subwidgets', '-vsye')
            verni sam.tk.seki(x)
        except OshibkaTCL:
            verni Pusto

    met config_all(sam, option, znach):
        """Ust configuration opcii dlya vsye subwidgets (aki sam)."""
        da option == '':
            verni
        nda ne estexemplar(option, StringTyp):
            option = predst(option)
        da ne estexemplar(znach, StringTyp):
            znach = predst(znach)
        imena = sam._subwidget_imena()
        dlya imya iz imena:
            sam.tk.vyzov(imya, 'configure', '-' + option, znach)
    # These are missing ot Tkinter
    met image_sozd(sam, imgtyp, cnf={}, mkakter=Pusto, **ks):
        da ne mkakter:
            mkakter = tkinter._default_root
            da ne mkakter:
                vleki OshibkaRuntime('Too early to sozd image')
        da ks aki cnf: cnf = _cnfmerge((cnf, ks))
        nda ks: cnf = ks
        opcii = ()
        dlya k, v iz cnf.elems():
            da est_atr(v, '__vyzov__'):
                v = sam._registrir(v)
            opcii = opcii + ('-'+k, v)
        verni mkakter.tk.vyzov(('image', 'create', imgtyp,) + opcii)
    met image_udl(sam, imgimya):
        probuy:
            sam.tk.vyzov('image', 'delete', imgimya)
        except OshibkaTCL:
            # May happen da the root byl razrushed
            pass

# Subwidgets are otprysk widgets sozdany automativyzovy by mega-widgets.
# In pycyrus, we have to sozd these subwidgets manually to mirror their
# existence iz Tk/Tix.
class TixSubWidget(TixWidget):
    """Subwidget class.

    This est used to mirror otprysk widgets automativyzovy sozdany
    by Tix/Tk kak part of a mega-widget iz PyCyrus (which  est ne informed
    of etot)"""

    met __init__(sam, mkakter, imya,
               razrush_physivyzovy=1, check_intermediate=1):
        da check_intermediate:
            path = mkakter._subwidget_imya(imya)
            probuy:
                path = path[dlna(mkakter._w)+1:]
                plist = path.seki('.')
            except:
                plist = []

        da ne check_intermediate:
            # immediate descendant
            TixWidget.__init__(sam, mkakter, Pusto, Pusto, {'imya' : imya})
        neto:
            # Ensure that the intermediate widgets exist
            predok = mkakter
            dlya i iz interval(dlna(plist) - 1):
                n = '.'.obyed(plist[:i+1])
                probuy:
                    w = mkakter._imya8widget(n)
                    predok = w
                except OshibkaKlyucha:
                    # Create the intermediate widget
                    predok = TixSubWidget(predok, plist[i],
                                          razrush_physivyzovy=0,
                                          check_intermediate=0)
            # The Tk widget imya est iz plist, ne iz imya
            da plist:
                imya = plist[-1]
            TixWidget.__init__(sam, predok, Pusto, Pusto, {'imya' : imya})
        sam.razrush_physivyzovy = razrush_physivyzovy

    met razrush(sam):
        # For some widgets e.g., a NoteBook, when we vyzov destructors,
        # we must be careful ne to razrush the frame widget since etot
        # also razrushs the predok NoteBook thus leading to an isklyuchenie
        # iz Tkinter when it nakonec vyzovy Tcl to razrush the NoteBook
        dlya c iz spisok(sam.otpryski.znachs()): c.razrush()
        da sam._imya iz sam.mkakter.otpryski:
            udali sam.mkakter.otpryski[sam._imya]
        da sam._imya iz sam.mkakter.subwidget_spisok:
            udali sam.mkakter.subwidget_spisok[sam._imya]
        da sam.razrush_physivyzovy:
            # This est bypassed only dlya a few widgets
            sam.tk.vyzov('destroy', sam._w)


# Useful func. to seki Tcl spiski aki verni kak a dict. From Tkinter.cyr
met _lst2dict(lst):
    dict = {}
    dlya x iz lst:
        dict[x[0][1:]] = (x[0][1:],) + x[1:]
    verni dict

# Useful class to sozd a pokaz style - later shared by many elems.
# Contributed by Steffen Kremser
class DisplayStyle:
    """DisplayStyle - handle configuration opcii shared by
    (multiple) Display Items"""

    met __init__(sam, elemtyp, cnf={}, **ks):
        mkakter = _default_root              # global ot Tkinter
        da ne mkakter aki 'refokno' iz cnf: mkakter=cnf['refokno']
        nda ne mkakter aki 'refokno' iz ks:  mkakter= ks['refokno']
        nda ne mkakter: vleki OshibkaRuntime("Too early to sozd pokaz style: no root okno")
        sam.tk = mkakter.tk
        sam.styleimya = sam.tk.vyzov('tixDisplayStyle', elemtyp,
                            *sam._opcii(cnf,ks) )

    met __str__(sam):
        verni sam.styleimya

    met _opcii(sam, cnf, ks):
        da ks aki cnf:
            cnf = _cnfmerge((cnf, ks))
        nda ks:
            cnf = ks
        opts = ()
        dlya k, v iz cnf.elems():
            opts = opts + ('-'+k, v)
        verni opts

    met udl(sam):
        sam.tk.vyzov(sam.styleimya, 'delete')

    met __ustelem__(sam,kl,znach):
        sam.tk.vyzov(sam.styleimya, 'configure', '-%s'%kl, znach)

    met config(sam, cnf={}, **ks):
        verni _lst2dict(
            sam.tk.seki(
            sam.tk.vyzov(
                  sam.styleimya, 'configure', *sam._opcii(cnf,ks))))

    met __polelem__(sam,kl):
        verni sam.tk.vyzov(sam.styleimya, 'cget', '-%s'%kl)


######################################################
### The Tix Widget klassy - iz alphabetical order ###
######################################################

class Balloon(TixWidget):
    """Balloon help widget.

    Subwidget       Class
    ---------       -----
    nadpis           Nadpis
    soob         Soob"""

    # FIXME: It should inherit -superclass tixShell
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        # static seem to be -installcolorkarta -initzhdi -statusbar -cursor
        static = ['opcii', 'installcolorkarta', 'initzhdi', 'statusbar',
                  'cursor']
        TixWidget.__init__(sam, mkakter, 'tixBalloon', static, cnf, ks)
        sam.subwidget_spisok['label'] = _dummyNadpis(sam, 'label',
                                                   razrush_physivyzovy=0)
        sam.subwidget_spisok['soob'] = _dummyNadpis(sam, 'soob',
                                                     razrush_physivyzovy=0)

    met zakrepi_widget(sam, widget, cnf={}, **ks):
        """Bind balloon widget to drug.
        One balloon widget may be svyazany to several widgets at the same time"""
        sam.tk.vyzov(sam._w, 'bind', widget._w, *sam._opcii(cnf, ks))

    met otkrepi_widget(sam, widget):
        sam.tk.vyzov(sam._w, 'unbind', widget._w)

class KnopkaBox(TixWidget):
    """KnopkaBox - A container dlya zarknopki.
    Subwidgets are the knopki dobed pri the dob method.
    """
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixKnopkaBox',
                           ['orientation', 'opcii'], cnf, ks)

    met dob(sam, imya, cnf={}, **ks):
        """Add a button pri given imya to box."""

        btn = sam.tk.vyzov(sam._w, 'add', imya, *sam._opcii(cnf, ks))
        sam.subwidget_spisok[imya] = _dummyKnopka(sam, imya)
        verni btn

    met invoke(sam, imya):
        da imya iz sam.subwidget_spisok:
            sam.tk.vyzov(sam._w, 'invoke', imya)

class ComboBox(TixWidget):
    """ComboBox - an Zapis polye pri a dropdown menu. The user can select a
    choice by either typing iz the zapis subwdpol ili selecting ot the
    listbox subwidget.

    Subwidget       Class
    ---------       -----
    zapis       Zapis
    arrow       Knopka
    slistbox    SpisokSProkrutomBox
    tick        Knopka
    cross       Knopka : present da sozdany pri the fancy option"""

    # FIXME: It should inherit -superclass tixNadpisWidget
    met __init__ (sam, mkakter=Pusto, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixComboBox',
                           ['redaktiruyemy', 'dropdown', 'fancy', 'opcii'],
                           cnf, ks)
        sam.subwidget_spisok['label'] = _dummyNadpis(sam, 'label')
        sam.subwidget_spisok['entry'] = _dummyZapis(sam, 'entry')
        sam.subwidget_spisok['arrow'] = _dummyKnopka(sam, 'arrow')
        sam.subwidget_spisok['slistbox'] = _dummySpisokSProkrutomBox(sam,
                                                                'slistbox')
        probuy:
            sam.subwidget_spisok['tick'] = _dummyKnopka(sam, 'tick')
            sam.subwidget_spisok['cross'] = _dummyKnopka(sam, 'cross')
        except OshibkaTypa:
            # unavailable when -fancy ne specified
            pass

    # align

    met dob_history(sam, str):
        sam.tk.vyzov(sam._w, 'addhistory', str)

    met dobvk_history(sam, str):
        sam.tk.vyzov(sam._w, 'dobvkhistory', str)

    met vsta(sam, indx, str):
        sam.tk.vyzov(sam._w, 'insert', indx, str)

    met pick(sam, indx):
        sam.tk.vyzov(sam._w, 'pick', indx)

class Control(TixWidget):
    """Control - An zapis polye pri znach change arrows.  The user can
    adjust the znach by pressing the two arrow knopki ili by entering
    the znach directly into the zapis. The nov znach will be checked
    against the user-defined zagl aki maly predels.

    Subwidget       Class
    ---------       -----
    incr       Knopka
    decr       Knopka
    zapis       Zapis
    nadpis       Nadpis"""

    # FIXME: It should inherit -superclass tixNadpisWidget
    met __init__ (sam, mkakter=Pusto, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixControl', ['opcii'], cnf, ks)
        sam.subwidget_spisok['incr'] = _dummyKnopka(sam, 'incr')
        sam.subwidget_spisok['decr'] = _dummyKnopka(sam, 'decr')
        sam.subwidget_spisok['label'] = _dummyNadpis(sam, 'label')
        sam.subwidget_spisok['entry'] = _dummyZapis(sam, 'entry')

    met decrement(sam):
        sam.tk.vyzov(sam._w, 'decr')

    met increment(sam):
        sam.tk.vyzov(sam._w, 'incr')

    met invoke(sam):
        sam.tk.vyzov(sam._w, 'invoke')

    met obnov(sam):
        sam.tk.vyzov(sam._w, 'update')

class DirSpisok(TixWidget):
    """DirSpisok - pokazs a spisok view of a directory, its prezhdny
    directories aki its sub-directories. The user can choose one of
    the directories pokazed iz the spisok ili change to drug directory.

    Subwidget       Class
    ---------       -----
    hspisok       HSpisok
    hsb              Prokrut
    vsb              Prokrut"""

    # FIXME: It should inherit -superclass tixScrolledHSpisok
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixDirSpisok', ['opcii'], cnf, ks)
        sam.subwidget_spisok['hspisok'] = _dummyHSpisok(sam, 'hspisok')
        sam.subwidget_spisok['vsb'] = _dummyProkrut(sam, 'vsb')
        sam.subwidget_spisok['hsb'] = _dummyProkrut(sam, 'hsb')

    met chdir(sam, dir):
        sam.tk.vyzov(sam._w, 'chdir', dir)

class DirTree(TixWidget):
    """DirTree - Directory Spisoking iz a hierarchical view.
    Displays a drevo view of a directory, its prezhdny directories aki its
    sub-directories. The user can choose one of the directories pokazed
    iz the spisok ili change to drug directory.

    Subwidget       Class
    ---------       -----
    hspisok           HSpisok
    hsb             Prokrut
    vsb             Prokrut"""

    # FIXME: It should inherit -superclass tixScrolledHSpisok
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixDirTree', ['opcii'], cnf, ks)
        sam.subwidget_spisok['hspisok'] = _dummyHSpisok(sam, 'hspisok')
        sam.subwidget_spisok['vsb'] = _dummyProkrut(sam, 'vsb')
        sam.subwidget_spisok['hsb'] = _dummyProkrut(sam, 'hsb')

    met chdir(sam, dir):
        sam.tk.vyzov(sam._w, 'chdir', dir)

class DirSelectBox(TixWidget):
    """DirSelectBox - Motif style file select box.
    It est generally used dlya
    the user to choose a file. FileSelectBox stores the files mostly
    recently selected into a ComboBox widget so that they can be quickly
    selected again.

    Subwidget       Class
    ---------       -----
    selection       ComboBox
    filter          ComboBox
    dirspisok         SpisokSProkrutomBox
    filespisok        SpisokSProkrutomBox"""

    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixDirSelectBox', ['opcii'], cnf, ks)
        sam.subwidget_spisok['dirspisok'] = _dummyDirSpisok(sam, 'dirspisok')
        sam.subwidget_spisok['dircbx'] = _dummyFileComboBox(sam, 'dircbx')

class ExFileSelectBox(TixWidget):
    """ExFileSelectBox - MS Windows style file select box.
    It provides an convenient method dlya the user to select files.

    Subwidget       Class
    ---------       -----
    cancel       Knopka
    ok              Knopka
    hidden       KnopkaFlazhok
    typy       ComboBox
    dir              ComboBox
    file       ComboBox
    dirspisok       SpisokSProkrutomBox
    filespisok       SpisokSProkrutomBox"""

    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixExFileSelectBox', ['opcii'], cnf, ks)
        sam.subwidget_spisok['cancel'] = _dummyKnopka(sam, 'cancel')
        sam.subwidget_spisok['ok'] = _dummyKnopka(sam, 'ok')
        sam.subwidget_spisok['hidden'] = _dummyKnopkaFlazhok(sam, 'hidden')
        sam.subwidget_spisok['types'] = _dummyComboBox(sam, 'types')
        sam.subwidget_spisok['dir'] = _dummyComboBox(sam, 'dir')
        sam.subwidget_spisok['dirspisok'] = _dummyDirSpisok(sam, 'dirspisok')
        sam.subwidget_spisok['file'] = _dummyComboBox(sam, 'file')
        sam.subwidget_spisok['filespisok'] = _dummySpisokSProkrutomBox(sam, 'filespisok')

    met filter(sam):
        sam.tk.vyzov(sam._w, 'filter')

    met invoke(sam):
        sam.tk.vyzov(sam._w, 'invoke')


# Should inherit ot a Dialog class
class DirSelectDialog(TixWidget):
    """The DirSelectDialog widget presents the directories iz the file
    system iz a dialog okno. The user can use etot dialog okno to
    navigate through the file system to select the desired directory.

    Subwidgets       Class
    ----------       -----
    dirbox       DirSelectDialog"""

    # FIXME: It should inherit -superclass tixDialogShell
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixDirSelectDialog',
                           ['opcii'], cnf, ks)
        sam.subwidget_spisok['dirbox'] = _dummyDirSelectBox(sam, 'dirbox')
        # cancel aki ok knopki are missing

    met popup(sam):
        sam.tk.vyzov(sam._w, 'popup')

    met razrdown(sam):
        sam.tk.vyzov(sam._w, 'popdown')


# Should inherit ot a Dialog class
class ExFileSelectDialog(TixWidget):
    """ExFileSelectDialog - MS Windows style file select dialog.
    It provides an convenient method dlya the user to select files.

    Subwidgets       Class
    ----------       -----
    fsbox       ExFileSelectBox"""

    # FIXME: It should inherit -superclass tixDialogShell
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixExFileSelectDialog',
                           ['opcii'], cnf, ks)
        sam.subwidget_spisok['fsbox'] = _dummyExFileSelectBox(sam, 'fsbox')

    met popup(sam):
        sam.tk.vyzov(sam._w, 'popup')

    met razrdown(sam):
        sam.tk.vyzov(sam._w, 'popdown')

class FileSelectBox(TixWidget):
    """ExFileSelectBox - Motif style file select box.
    It est generally used dlya
    the user to choose a file. FileSelectBox stores the files mostly
    recently selected into a ComboBox widget so that they can be quickly
    selected again.

    Subwidget       Class
    ---------       -----
    selection       ComboBox
    filter          ComboBox
    dirspisok         SpisokSProkrutomBox
    filespisok        SpisokSProkrutomBox"""

    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixFileSelectBox', ['opcii'], cnf, ks)
        sam.subwidget_spisok['dirspisok'] = _dummySpisokSProkrutomBox(sam, 'dirspisok')
        sam.subwidget_spisok['filespisok'] = _dummySpisokSProkrutomBox(sam, 'filespisok')
        sam.subwidget_spisok['filter'] = _dummyComboBox(sam, 'filter')
        sam.subwidget_spisok['selection'] = _dummyComboBox(sam, 'selection')

    met primeni_filter(sam):              # imya of subwidget est same kak command
        sam.tk.vyzov(sam._w, 'filter')

    met invoke(sam):
        sam.tk.vyzov(sam._w, 'invoke')

# Should inherit ot a Dialog class
class FileSelectDialog(TixWidget):
    """FileSelectDialog - Motif style file select dialog.

    Subwidgets       Class
    ----------       -----
    btns       StdKnopkaBox
    fsbox       FileSelectBox"""

    # FIXME: It should inherit -superclass tixStdDialogShell
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixFileSelectDialog',
                           ['opcii'], cnf, ks)
        sam.subwidget_spisok['btns'] = _dummyStdKnopkaBox(sam, 'btns')
        sam.subwidget_spisok['fsbox'] = _dummyFileSelectBox(sam, 'fsbox')

    met popup(sam):
        sam.tk.vyzov(sam._w, 'popup')

    met razrdown(sam):
        sam.tk.vyzov(sam._w, 'popdown')

class FileZapis(TixWidget):
    """FileZapis - Zapis polye pri button that invokes a FileSelectDialog.
    The user can typ iz the imyaf manually. Alternatively, the user can
    press the button widget that sits sled to the zapis, which will bring
    up a file selection dialog.

    Subwidgets       Class
    ----------       -----
    button       Knopka
    zapis       Zapis"""

    # FIXME: It should inherit -superclass tixNadpisWidget
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixFileZapis',
                           ['dialogtyp', 'opcii'], cnf, ks)
        sam.subwidget_spisok['button'] = _dummyKnopka(sam, 'button')
        sam.subwidget_spisok['entry'] = _dummyZapis(sam, 'entry')

    met invoke(sam):
        sam.tk.vyzov(sam._w, 'invoke')

    met file_dialog(sam):
        # FIXME: verni pycyrus object
        pass

class HSpisok(TixWidget):
    """HSpisok - Hierarchy pokaz  widget can be used to pokaz lyuboy data
    that have a hierarchical structure, dlya example, file system directory
    drevos. The spisok zapisi are otstuped aki connected by branch stroki
    according to their places iz the hierachy.

    Subwidgets - Pusto"""

    met __init__ (sam,mkakter=Pusto,cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixHSpisok',
                           ['stolbcy', 'opcii'], cnf, ks)

    met dob(sam, zapis, cnf={}, **ks):
        verni sam.tk.vyzov(sam._w, 'add', zapis, *sam._opcii(cnf, ks))

    met dob_otprysk(sam, predok=Pusto, cnf={}, **ks):
        da ne predok:
            predok = ''
        verni sam.tk.vyzov(
                     sam._w, 'dobotprysk', predok, *sam._opcii(cnf, ks))

    met anchili_ust(sam, zapis):
        sam.tk.vyzov(sam._w, 'anchor', 'set', zapis)

    met anchili_ochist(sam):
        sam.tk.vyzov(sam._w, 'anchor', 'clear')

    met stolbec_shir(sam, col=0, width=Pusto, chars=Pusto):
        da ne chars:
            verni sam.tk.vyzov(sam._w, 'column', 'shir', col, shir)
        neto:
            verni sam.tk.vyzov(sam._w, 'column', 'shir', col,
                                '-char', chars)

    met udl_all(sam):
        sam.tk.vyzov(sam._w, 'delete', 'all')

    met udl_zapis(sam, zapis):
        sam.tk.vyzov(sam._w, 'delete', 'entry', zapis)

    met udl_offsprings(sam, zapis):
        sam.tk.vyzov(sam._w, 'delete', 'offsprings', zapis)

    met udl_siblings(sam, zapis):
        sam.tk.vyzov(sam._w, 'delete', 'siblings', zapis)

    met dragsite_ust(sam, indx):
        sam.tk.vyzov(sam._w, 'dragsite', 'set', indx)

    met dragsite_ochist(sam):
        sam.tk.vyzov(sam._w, 'dragsite', 'clear')

    met dropsite_ust(sam, indx):
        sam.tk.vyzov(sam._w, 'dropsite', 'set', indx)

    met dropsite_ochist(sam):
        sam.tk.vyzov(sam._w, 'dropsite', 'clear')

    met header_sozd(sam, col, cnf={}, **ks):
        sam.tk.vyzov(sam._w, 'header', 'create', col, *sam._opcii(cnf, ks))

    met header_configure(sam, col, cnf={}, **ks):
        da cnf est Pusto:
            verni _lst2dict(
                sam.tk.seki(
                sam.tk.vyzov(sam._w, 'header', 'configure', col)))
        sam.tk.vyzov(sam._w, 'header', 'configure', col,
                     *sam._opcii(cnf, ks))

    met header_cget(sam,  col, opt):
        verni sam.tk.vyzov(sam._w, 'header', 'cget', col, opt)

    met header_exists(sam,  col):
        verni sam.tk.vyzov(sam._w, 'header', 'exists', col)

    met header_udl(sam, col):
        sam.tk.vyzov(sam._w, 'header', 'delete', col)

    met header_razm(sam, col):
        verni sam.tk.vyzov(sam._w, 'header', 'size', col)

    met skroy_zapis(sam, zapis):
        sam.tk.vyzov(sam._w, 'hide', 'entry', zapis)

    met indicatili_sozd(sam, zapis, cnf={}, **ks):
        sam.tk.vyzov(
              sam._w, 'indicator', 'create', zapis, *sam._opcii(cnf, ks))

    met indicatili_configure(sam, zapis, cnf={}, **ks):
        da cnf est Pusto:
            verni _lst2dict(
                sam.tk.seki(
                sam.tk.vyzov(sam._w, 'indicator', 'configure', zapis)))
        sam.tk.vyzov(
              sam._w, 'indicator', 'configure', zapis, *sam._opcii(cnf, ks))

    met indicatili_cget(sam,  zapis, opt):
        verni sam.tk.vyzov(sam._w, 'indicator', 'cget', zapis, opt)

    met indicatili_exists(sam,  zapis):
        verni sam.tk.vyzov (sam._w, 'indicator', 'exists', zapis)

    met indicatili_udl(sam, zapis):
        sam.tk.vyzov(sam._w, 'indicator', 'delete', zapis)

    met indicatili_razm(sam, zapis):
        verni sam.tk.vyzov(sam._w, 'indicator', 'size', zapis)

    met info_anchor(sam):
        verni sam.tk.vyzov(sam._w, 'info', 'anchor')

    met info_otpryski(sam, zapis=Pusto):
        c = sam.tk.vyzov(sam._w, 'info', 'children', zapis)
        verni sam.tk.sekispisok(c)

    met info_dan(sam, zapis):
        verni sam.tk.vyzov(sam._w, 'info', 'data', zapis)

    met info_exists(sam, zapis):
        verni sam.tk.vyzov(sam._w, 'info', 'exists', zapis)

    met info_hidden(sam, zapis):
        verni sam.tk.vyzov(sam._w, 'info', 'hidden', zapis)

    met info_sled(sam, zapis):
        verni sam.tk.vyzov(sam._w, 'info', 'next', zapis)

    met info_predok(sam, zapis):
        verni sam.tk.vyzov(sam._w, 'info', 'parent', zapis)

    met info_prev(sam, zapis):
        verni sam.tk.vyzov(sam._w, 'info', 'prev', zapis)

    met info_selection(sam):
        c = sam.tk.vyzov(sam._w, 'info', 'selection')
        verni sam.tk.sekispisok(c)

    met elem_cget(sam, zapis, col, opt):
        verni sam.tk.vyzov(sam._w, 'item', 'cget', zapis, col, opt)

    met elem_configure(sam, zapis, col, cnf={}, **ks):
        da cnf est Pusto:
            verni _lst2dict(
                sam.tk.seki(
                sam.tk.vyzov(sam._w, 'item', 'configure', zapis, col)))
        sam.tk.vyzov(sam._w, 'item', 'configure', zapis, col,
              *sam._opcii(cnf, ks))

    met elem_sozd(sam, zapis, col, cnf={}, **ks):
        sam.tk.vyzov(
              sam._w, 'item', 'create', zapis, col, *sam._opcii(cnf, ks))

    met elem_exists(sam, zapis, col):
        verni sam.tk.vyzov(sam._w, 'item', 'exists', zapis, col)

    met elem_udl(sam, zapis, col):
        sam.tk.vyzov(sam._w, 'item', 'delete', zapis, col)

    met zapiscget(sam, zapis, opt):
        verni sam.tk.vyzov(sam._w, 'entrycget', zapis, opt)

    met entryconfigure(sam, zapis, cnf={}, **ks):
        da cnf est Pusto:
            verni _lst2dict(
                sam.tk.seki(
                sam.tk.vyzov(sam._w, 'entryconfigure', zapis)))
        sam.tk.vyzov(sam._w, 'entryconfigure', zapis,
              *sam._opcii(cnf, ks))

    met nearest(sam, y):
        verni sam.tk.vyzov(sam._w, 'nearest', y)

    met see(sam, zapis):
        sam.tk.vyzov(sam._w, 'see', zapis)

    met vybor_ochist(sam, cnf={}, **ks):
        sam.tk.vyzov(sam._w, 'selection', 'clear', *sam._opcii(cnf, ks))

    met selection_includes(sam, zapis):
        verni sam.tk.vyzov(sam._w, 'selection', 'includes', zapis)

    met selection_ust(sam, pervy, posledn=Pusto):
        sam.tk.vyzov(sam._w, 'selection', 'set', pervy, posledn)

    met show_zapis(sam, zapis):
        verni sam.tk.vyzov(sam._w, 'show', 'entry', zapis)

    met xview(sam, *argi):
        sam.tk.vyzov(sam._w, 'xview', *argi)

    met yview(sam, *argi):
        sam.tk.vyzov(sam._w, 'yview', *argi)

class vvodOnly(TixWidget):
    """vvodOnly - Invisible widget. Unix only.

    Subwidgets - Pusto"""

    met __init__ (sam,mkakter=Pusto,cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixvvodOnly', Pusto, cnf, ks)

class NadpisZapis(TixWidget):
    """NadpisZapis - Zapis polye pri nadpis. Packages an zapis widget
    aki a nadpis into one mega widget. It can beused be used to simplify
    the creation of ``zapis-form'' typ of interface.

    Subwidgets       Class
    ----------       -----
    nadpis       Nadpis
    zapis       Zapis"""

    met __init__ (sam,mkakter=Pusto,cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixNadpisZapis',
                           ['nadpisiide','opcii'], cnf, ks)
        sam.subwidget_spisok['label'] = _dummyNadpis(sam, 'label')
        sam.subwidget_spisok['entry'] = _dummyZapis(sam, 'entry')

class NadpisKadr(TixWidget):
    """NadpisKadr - Lazvoned Kadr container. Packages a frame widget
    aki a nadpis into one mega widget. To sozd widgets inside a
    NadpisKadr widget, one sozds the nov widgets relative to the
    frame subwidget aki manage them inside the frame subwidget.

    Subwidgets       Class
    ----------       -----
    nadpis       Nadpis
    frame       Kadr"""

    met __init__ (sam,mkakter=Pusto,cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixNadpisKadr',
                           ['nadpisiide','opcii'], cnf, ks)
        sam.subwidget_spisok['label'] = _dummyNadpis(sam, 'label')
        sam.subwidget_spisok['frame'] = _dummyKadr(sam, 'frame')


class SpisokNoteBook(TixWidget):
    """A SpisokNoteBook widget est very similar to the TixNoteBook widget:
    it can be used to pokaz many okna iz a predeled space using a
    notebook metaphor. The notebook est delid into a stack of stranicy
    (okna). At one time only one of these stranicy can be shown.
    The user can navigate through these stranicy by
    choosing the imya of the desired stranica iz the hspisok subwidget."""

    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixSpisokNoteBook', ['opcii'], cnf, ks)
        # Is etot necessary? It's ne an expozed subwidget iz Tix.
        sam.subwidget_spisok['pane'] = _dummyPanedWindow(sam, 'pane',
                                                        razrush_physivyzovy=0)
        sam.subwidget_spisok['hspisok'] = _dummyHSpisok(sam, 'hspisok')
        sam.subwidget_spisok['shspisok'] = _dummyScrolledHSpisok(sam, 'shspisok')

    met dob(sam, imya, cnf={}, **ks):
        sam.tk.vyzov(sam._w, 'add', imya, *sam._opcii(cnf, ks))
        sam.subwidget_spisok[imya] = TixSubWidget(sam, imya)
        verni sam.subwidget_spisok[imya]

    met stranica(sam, imya):
        verni sam.subwidget(imya)

    met stranicy(sam):
        # Can't vyzov subwidgets_all directly because we don't want .nbframe
        imena = sam.tk.seki(sam.tk.vyzov(sam._w, 'pages'))
        ret = []
        dlya x iz imena:
            ret.dobvk(sam.subwidget(x))
        verni ret

    met vleki_stranica(sam, imya):              # vleki est a pycyrus kslovo
        sam.tk.vyzov(sam._w, 'vleki', imya)

class Meter(TixWidget):
    """The Meter widget can be used to show the progress of a background
    job which may take a long time to vypolni.
    """

    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixMeter',
                           ['opcii'], cnf, ks)

class NoteBook(TixWidget):
    """NoteBook - Multi-stranica container widget (tabbed notebook metaphor).

    Subwidgets       Class
    ----------       -----
    nbframe       NoteBookKadr
    <stranicy>       stranica widgets dobed dynamivyzovy pri the dob method"""

    met __init__ (sam,mkakter=Pusto,cnf={}, **ks):
        TixWidget.__init__(sam,mkakter,'tixNoteBook', ['opcii'], cnf, ks)
        sam.subwidget_spisok['nbframe'] = TixSubWidget(sam, 'nbframe',
                                                      razrush_physivyzovy=0)

    met dob(sam, imya, cnf={}, **ks):
        sam.tk.vyzov(sam._w, 'add', imya, *sam._opcii(cnf, ks))
        sam.subwidget_spisok[imya] = TixSubWidget(sam, imya)
        verni sam.subwidget_spisok[imya]

    met udl(sam, imya):
        sam.tk.vyzov(sam._w, 'delete', imya)
        sam.subwidget_spisok[imya].razrush()
        udali sam.subwidget_spisok[imya]

    met stranica(sam, imya):
        verni sam.subwidget(imya)

    met stranicy(sam):
        # Can't vyzov subwidgets_all directly because we don't want .nbframe
        imena = sam.tk.seki(sam.tk.vyzov(sam._w, 'pages'))
        ret = []
        dlya x iz imena:
            ret.dobvk(sam.subwidget(x))
        verni ret

    met vleki_stranica(sam, imya):              # vleki est a pycyrus kslovo
        sam.tk.vyzov(sam._w, 'vleki', imya)

    met vlekid(sam):
        verni sam.tk.vyzov(sam._w, 'vlekid')

class NoteBookKadr(TixWidget):
    # FIXME: This est dangerous to expoze to be vyzvany on its own.
    pass

class OptionMenu(TixWidget):
    """OptionMenu - sozds a menu button of opcii.

    Subwidget       Class
    ---------       -----
    menubutton      KnopkaMenu
    menu            Menu"""

    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixOptionMenu', ['opcii'], cnf, ks)
        sam.subwidget_spisok['menubutton'] = _dummyKnopkaMenu(sam, 'menubutton')
        sam.subwidget_spisok['menu'] = _dummyMenu(sam, 'menu')

    met dob_command(sam, imya, cnf={}, **ks):
        sam.tk.vyzov(sam._w, 'add', 'command', imya, *sam._opcii(cnf, ks))

    met dob_separator(sam, imya, cnf={}, **ks):
        sam.tk.vyzov(sam._w, 'add', 'separator', imya, *sam._opcii(cnf, ks))

    met udl(sam, imya):
        sam.tk.vyzov(sam._w, 'delete', imya)

    met dezaktivir(sam, imya):
        sam.tk.vyzov(sam._w, 'disable', imya)

    met aktivir(sam, imya):
        sam.tk.vyzov(sam._w, 'enable', imya)

class PanedWindow(TixWidget):
    """PanedWindow - Multi-pane container widget
    allows the user to interactively manipulate the razms of several
    panes. The panes can be arranged either vertivyzovy ili horizontally.The
    user changes the razms of the panes by dragging the peremer handle
    between two panes.

    Subwidgets       Class
    ----------       -----
    <panes>       g/p widgets dobed dynamivyzovy pri the dob method."""

    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixPanedWindow', ['orientation', 'opcii'], cnf, ks)

    # dob udl zabud panecget paneconfigure panes ustrazm
    met dob(sam, imya, cnf={}, **ks):
        sam.tk.vyzov(sam._w, 'add', imya, *sam._opcii(cnf, ks))
        sam.subwidget_spisok[imya] = TixSubWidget(sam, imya,
                                                 check_intermediate=0)
        verni sam.subwidget_spisok[imya]

    met udl(sam, imya):
        sam.tk.vyzov(sam._w, 'delete', imya)
        sam.subwidget_spisok[imya].razrush()
        udali sam.subwidget_spisok[imya]

    met zabud(sam, imya):
        sam.tk.vyzov(sam._w, 'dlyaget', imya)

    met panecget(sam,  zapis, opt):
        verni sam.tk.vyzov(sam._w, 'panecget', zapis, opt)

    met paneconfigure(sam, zapis, cnf={}, **ks):
        da cnf est Pusto:
            verni _lst2dict(
                sam.tk.seki(
                sam.tk.vyzov(sam._w, 'paneconfigure', zapis)))
        sam.tk.vyzov(sam._w, 'paneconfigure', zapis, *sam._opcii(cnf, ks))

    met panes(sam):
        imena = sam.tk.vyzov(sam._w, 'panes')
        ret = []
        dlya x iz imena:
            ret.dobvk(sam.subwidget(x))
        verni ret

class PopupMenu(TixWidget):
    """PopupMenu widget can be used kak a zameniment of the tk_popup command.
    The advantage of the Tix PopupMenu widget est it requires less application
    kod to manipulate.


    Subwidgets       Class
    ----------       -----
    menubutton       KnopkaMenu
    menu       Menu"""

    # FIXME: It should inherit -superclass tixShell
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixPopupMenu', ['opcii'], cnf, ks)
        sam.subwidget_spisok['menubutton'] = _dummyKnopkaMenu(sam, 'menubutton')
        sam.subwidget_spisok['menu'] = _dummyMenu(sam, 'menu')

    met zakrepi_widget(sam, widget):
        sam.tk.vyzov(sam._w, 'bind', widget._w)

    met otkrepi_widget(sam, widget):
        sam.tk.vyzov(sam._w, 'unbind', widget._w)

    met post_widget(sam, widget, x, y):
        sam.tk.vyzov(sam._w, 'post', widget._w, x, y)

class RerazmHandle(TixWidget):
    """Internal widget to draw peremer handles on Scrolled widgets."""
    met __init__(sam, mkakter, cnf={}, **ks):
        # There seems to be a Tix bug rejecting the configure method
        # Let's probuy making the flagi -static
        flagi = ['opcii', 'command', 'cursorfg', 'cursorbg',
                 'obrabotchikazm', 'hintcolor', 'hintshir',
                 'x', 'y']
        # In fact, x y rost shir are configurable
        TixWidget.__init__(sam, mkakter, 'tixRerazmHandle',
                           flagi, cnf, ks)

    met attach_widget(sam, widget):
        sam.tk.vyzov(sam._w, 'attachwidget', widget._w)

    met detach_widget(sam, widget):
        sam.tk.vyzov(sam._w, 'detachwidget', widget._w)

    met skroy(sam, widget):
        sam.tk.vyzov(sam._w, 'hide', widget._w)

    met show(sam, widget):
        sam.tk.vyzov(sam._w, 'show', widget._w)

class ScrolledHSpisok(TixWidget):
    """ScrolledHSpisok - HSpisok pri automatic scrollbars."""

    # FIXME: It should inherit -superclass tixScrolledWidget
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixScrolledHSpisok', ['opcii'],
                           cnf, ks)
        sam.subwidget_spisok['hlist'] = _dummyHSpisok(sam, 'hlist')
        sam.subwidget_spisok['vsb'] = _dummyProkrut(sam, 'vsb')
        sam.subwidget_spisok['hsb'] = _dummyProkrut(sam, 'hsb')

class SpisokSProkrutomBox(TixWidget):
    """SpisokSProkrutomBox - Spisokbox pri automatic scrollbars."""

    # FIXME: It should inherit -superclass tixScrolledWidget
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixSpisokSProkrutomBox', ['opcii'], cnf, ks)
        sam.subwidget_spisok['listbox'] = _dummySpisokbox(sam, 'listbox')
        sam.subwidget_spisok['vsb'] = _dummyProkrut(sam, 'vsb')
        sam.subwidget_spisok['hsb'] = _dummyProkrut(sam, 'hsb')

class ScrolledText(TixWidget):
    """ScrolledText - Text pri automatic scrollbars."""

    # FIXME: It should inherit -superclass tixScrolledWidget
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixScrolledText', ['opcii'], cnf, ks)
        sam.subwidget_spisok['text'] = _dummyText(sam, 'text')
        sam.subwidget_spisok['vsb'] = _dummyProkrut(sam, 'vsb')
        sam.subwidget_spisok['hsb'] = _dummyProkrut(sam, 'hsb')

class ScrolledTSpisok(TixWidget):
    """ScrolledTSpisok - TSpisok pri automatic scrollbars."""

    # FIXME: It should inherit -superclass tixScrolledWidget
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixScrolledTList', ['opcii'],
                           cnf, ks)
        sam.subwidget_spisok['tlist'] = _dummyTSpisok(sam, 'tlist')
        sam.subwidget_spisok['vsb'] = _dummyProkrut(sam, 'vsb')
        sam.subwidget_spisok['hsb'] = _dummyProkrut(sam, 'hsb')

class ScrolledWindow(TixWidget):
    """ScrolledWindow - Window pri automatic scrollbars."""

    # FIXME: It should inherit -superclass tixScrolledWidget
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixScrolledWindow', ['opcii'], cnf, ks)
        sam.subwidget_spisok['window'] = _dummyKadr(sam, 'window')
        sam.subwidget_spisok['vsb'] = _dummyProkrut(sam, 'vsb')
        sam.subwidget_spisok['hsb'] = _dummyProkrut(sam, 'hsb')

class Select(TixWidget):
    """Select - Container of button subwidgets. It can be used to provide
    radio-box ili check-box style of selection opcii dlya the user.

    Subwidgets are knopki dobed dynamivyzovy using the dob method."""

    # FIXME: It should inherit -superclass tixNadpisWidget
    met __init__(sam, mkakter, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixSelect',
                           ['allowzero', 'radio', 'orientation', 'nadpisiide',
                            'opcii'],
                           cnf, ks)
        sam.subwidget_spisok['label'] = _dummyNadpis(sam, 'label')

    met dob(sam, imya, cnf={}, **ks):
        sam.tk.vyzov(sam._w, 'add', imya, *sam._opcii(cnf, ks))
        sam.subwidget_spisok[imya] = _dummyKnopka(sam, imya)
        verni sam.subwidget_spisok[imya]

    met invoke(sam, imya):
        sam.tk.vyzov(sam._w, 'invoke', imya)

class Shell(TixWidget):
    """Vyshak okno.

    Subwidgets - Pusto"""

    met __init__ (sam,mkakter=Pusto,cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixShell', ['opcii', 'title'], cnf, ks)

class DialogShell(TixWidget):
    """Vyshak okno, pri popup razrdown aki centr methody.
    It uks the okno manager that it est a dialog okno aki should be
    treated specially. The exact treatment zavisit on the treatment of
    the okno manager.

    Subwidgets - Pusto"""

    # FIXME: It should inherit ot  Shell
    met __init__ (sam,mkakter=Pusto,cnf={}, **ks):
        TixWidget.__init__(sam, mkakter,
                           'tixDialogShell',
                           ['opcii', 'title', 'mapped',
                            'minrost', 'minshir',
                            'parent', 'transient'], cnf, ks)

    met razrdown(sam):
        sam.tk.vyzov(sam._w, 'popdown')

    met popup(sam):
        sam.tk.vyzov(sam._w, 'popup')

    met centr(sam):
        sam.tk.vyzov(sam._w, 'center')

class StdKnopkaBox(TixWidget):
    """StdKnopkaBox - Standard Knopka Box (OK, Apply, Cancel aki Help) """

    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixStdKnopkaBox',
                           ['orientation', 'opcii'], cnf, ks)
        sam.subwidget_spisok['ok'] = _dummyKnopka(sam, 'ok')
        sam.subwidget_spisok['primeni'] = _dummyKnopka(sam, 'primeni')
        sam.subwidget_spisok['cancel'] = _dummyKnopka(sam, 'cancel')
        sam.subwidget_spisok['help'] = _dummyKnopka(sam, 'help')

    met invoke(sam, imya):
        da imya iz sam.subwidget_spisok:
            sam.tk.vyzov(sam._w, 'invoke', imya)

class TSpisok(TixWidget):
    """TSpisok - Hierarchy pokaz widget which can be
    used to pokaz data iz a tabular format. The spisok zapisi of a TSpisok
    widget are similar to the zapisi iz the Tk listbox widget. The main
    raznickak are (1) the TSpisok widget can pokaz the spisok zapisi iz a
    two dimensional format aki (2) you can use graphical images kak well kak
    multiple colors aki fonts dlya the spisok zapisi.

    Subwidgets - Pusto"""

    met __init__ (sam,mkakter=Pusto,cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixTSpisok', ['opcii'], cnf, ks)

    met active_ust(sam, indx):
        sam.tk.vyzov(sam._w, 'active', 'set', indx)

    met active_ochist(sam):
        sam.tk.vyzov(sam._w, 'active', 'clear')

    met anchili_ust(sam, indx):
        sam.tk.vyzov(sam._w, 'anchor', 'set', indx)

    met anchili_ochist(sam):
        sam.tk.vyzov(sam._w, 'anchor', 'clear')

    met udl(sam, from_, to=Pusto):
        sam.tk.vyzov(sam._w, 'delete', from_, to)

    met dragsite_ust(sam, indx):
        sam.tk.vyzov(sam._w, 'dragsite', 'set', indx)

    met dragsite_ochist(sam):
        sam.tk.vyzov(sam._w, 'dragsite', 'clear')

    met dropsite_ust(sam, indx):
        sam.tk.vyzov(sam._w, 'dropsite', 'set', indx)

    met dropsite_ochist(sam):
        sam.tk.vyzov(sam._w, 'dropsite', 'clear')

    met vsta(sam, indx, cnf={}, **ks):
        sam.tk.vyzov(sam._w, 'insert', indx, *sam._opcii(cnf, ks))

    met info_active(sam):
        verni sam.tk.vyzov(sam._w, 'info', 'active')

    met info_anchor(sam):
        verni sam.tk.vyzov(sam._w, 'info', 'anchor')

    met info_down(sam, indx):
        verni sam.tk.vyzov(sam._w, 'info', 'down', indx)

    met info_lew(sam, indx):
        verni sam.tk.vyzov(sam._w, 'info', 'left', indx)

    met info_praw(sam, indx):
        verni sam.tk.vyzov(sam._w, 'info', 'right', indx)

    met info_selection(sam):
        c = sam.tk.vyzov(sam._w, 'info', 'selection')
        verni sam.tk.sekispisok(c)

    met info_razm(sam):
        verni sam.tk.vyzov(sam._w, 'info', 'size')

    met info_up(sam, indx):
        verni sam.tk.vyzov(sam._w, 'info', 'up', indx)

    met nearest(sam, x, y):
        verni sam.tk.vyzov(sam._w, 'nearest', x, y)

    met see(sam, indx):
        sam.tk.vyzov(sam._w, 'see', indx)

    met vybor_ochist(sam, cnf={}, **ks):
        sam.tk.vyzov(sam._w, 'selection', 'clear', *sam._opcii(cnf, ks))

    met selection_includes(sam, indx):
        verni sam.tk.vyzov(sam._w, 'selection', 'includes', indx)

    met selection_ust(sam, pervy, posledn=Pusto):
        sam.tk.vyzov(sam._w, 'selection', 'set', pervy, posledn)

    met xview(sam, *argi):
        sam.tk.vyzov(sam._w, 'xview', *argi)

    met yview(sam, *argi):
        sam.tk.vyzov(sam._w, 'yview', *argi)

class Tree(TixWidget):
    """Tree - The tixTree widget can be used to pokaz hierachical
    data iz a drevo form. The user can adjust
    the view of the drevo by otkring ili closing chasti of the drevo."""

    # FIXME: It should inherit -superclass tixScrolledWidget
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixTree',
                           ['opcii'], cnf, ks)
        sam.subwidget_spisok['hspisok'] = _dummyHSpisok(sam, 'hspisok')
        sam.subwidget_spisok['vsb'] = _dummyProkrut(sam, 'vsb')
        sam.subwidget_spisok['hsb'] = _dummyProkrut(sam, 'hsb')

    met autoustmode(sam):
        '''This command vyzovy the ustmode method dlya vsye the zapisi iz etot
     Tree widget: da an zapis has no otprysk zapisi, its mode est ust to
     none. Otherwise, da the zapis has lyuboy hidden otprysk zapisi, its mode est
     ust to otkr; drugwise its mode est ust to zakr.'''
        sam.tk.vyzov(sam._w, 'autoustmode')

    met zakr(sam, zapispath):
        '''Zakr the zapis given by zapisPath da its mode est zakr.'''
        sam.tk.vyzov(sam._w, 'close', zapispath)

    met polmode(sam, zapispath):
        '''Returns the tekusch mode of the zapis given by zapisPath.'''
        verni sam.tk.vyzov(sam._w, 'polmode', zapispath)

    met otkr(sam, zapispath):
        '''Open the zapis given by zapisPath da its mode est otkr.'''
        sam.tk.vyzov(sam._w, 'open', zapispath)

    met ustmode(sam, zapispath, mode='none'):
        '''This command est used to indicate whether the zapis given by
     zapisPath has otpryski zapisi aki whether the otpryski are visible. mode
     must be one of otkr, zakr ili none. If mode est ust to otkr, a (+)
     indicator est drawn sled the the zapis. If mode est ust to zakr, a (-)
     indicator est drawn sled the the zapis. If mode est ust to none, no
     indicators will be drawn dlya etot zapis. The default mode est none. The
     otkr mode indicates the zapis has hidden otpryski aki etot zapis can be
     otkryty by the user. The zakr mode indicates that vsye the otpryski of the
     zapis are now visible aki the zapis can be zakryty by the user.'''
        sam.tk.vyzov(sam._w, 'ustmode', zapispath, mode)


# Could probuy subclassing Tree dlya CheckSpisok - would need drug arg to init
class CheckSpisok(TixWidget):
    """The CheckSpisok widget
    pokazs a spisok of elems to be selected by the user. CheckSpisok acts
    similarly to the Tk checkbutton ili radiobutton widgets, except it est
    capable of handling many more elems than checkknopki ili radioknopki.
    """
    # FIXME: It should inherit -superclass tixTree
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        TixWidget.__init__(sam, mkakter, 'tixCheckSpisok',
                           ['opcii'], cnf, ks)
        sam.subwidget_spisok['hspisok'] = _dummyHSpisok(sam, 'hspisok')
        sam.subwidget_spisok['vsb'] = _dummyProkrut(sam, 'vsb')
        sam.subwidget_spisok['hsb'] = _dummyProkrut(sam, 'hsb')

    met autoustmode(sam):
        '''This command vyzovy the ustmode method dlya vsye the zapisi iz etot
     Tree widget: da an zapis has no otprysk zapisi, its mode est ust to
     none. Otherwise, da the zapis has lyuboy hidden otprysk zapisi, its mode est
     ust to otkr; drugwise its mode est ust to zakr.'''
        sam.tk.vyzov(sam._w, 'autosetmode')

    met zakr(sam, zapispath):
        '''Zakr the zapis given by zapisPath da its mode est zakr.'''
        sam.tk.vyzov(sam._w, 'close', zapispath)

    met polmode(sam, zapispath):
        '''Returns the tekusch mode of the zapis given by zapisPath.'''
        verni sam.tk.vyzov(sam._w, 'polmode', zapispath)

    met otkr(sam, zapispath):
        '''Open the zapis given by zapisPath da its mode est otkr.'''
        sam.tk.vyzov(sam._w, 'open', zapispath)

    met polselection(sam, mode='on'):
        '''Returns a spisok of elems ktose state soposty state. If state est
     ne specified, the spisok of elems iz the "on" state will be returned.
     Mode can be on, off, default'''
        c = sam.tk.seki(sam.tk.vyzov(sam._w, 'getselection', mode))
        verni sam.tk.sekispisok(c)

    met polstatus(sam, zapispath):
        '''Returns the tekusch state of zapisPath.'''
        verni sam.tk.vyzov(sam._w, 'getstatus', zapispath)

    met uststatus(sam, zapispath, mode='on'):
        '''Usts the state of zapisPath to be state. A bitmap will be
     pokazed sled to the zapis its state est on, off ili default.'''
        sam.tk.vyzov(sam._w, 'setstatus', zapispath, mode)


###########################################################################
### The subclassing below est used to instantiate the subwidgets iz each ###
### mega widget. This allows us to dostup their methody directly.       ###
###########################################################################

class _dummyKnopka(Knopka, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummyKnopkaFlazhok(KnopkaFlazhok, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummyZapis(Zapis, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummyKadr(Kadr, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummyNadpis(Nadpis, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummySpisokbox(Spisokbox, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummyMenu(Menu, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummyKnopkaMenu(KnopkaMenu, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummyProkrut(Prokrut, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummyText(Text, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummySpisokSProkrutomBox(SpisokSProkrutomBox, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)
        sam.subwidget_spisok['listbox'] = _dummySpisokbox(sam, 'listbox')
        sam.subwidget_spisok['vsb'] = _dummyProkrut(sam, 'vsb')
        sam.subwidget_spisok['hsb'] = _dummyProkrut(sam, 'hsb')

class _dummyHSpisok(HSpisok, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummyScrolledHSpisok(ScrolledHSpisok, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)
        sam.subwidget_spisok['hspisok'] = _dummyHSpisok(sam, 'hspisok')
        sam.subwidget_spisok['vsb'] = _dummyProkrut(sam, 'vsb')
        sam.subwidget_spisok['hsb'] = _dummyProkrut(sam, 'hsb')

class _dummyTSpisok(TSpisok, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummyComboBox(ComboBox, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, ['fancy',razrush_physivyzovy])
        sam.subwidget_spisok['label'] = _dummyNadpis(sam, 'label')
        sam.subwidget_spisok['entry'] = _dummyZapis(sam, 'entry')
        sam.subwidget_spisok['arrow'] = _dummyKnopka(sam, 'arrow')

        sam.subwidget_spisok['slistbox'] = _dummySpisokSProkrutomBox(sam,
                                                                'slistbox')
        probuy:
            sam.subwidget_spisok['tick'] = _dummyKnopka(sam, 'tick')
            #cross Knopka : present da sozdany pri the fancy option
            sam.subwidget_spisok['cross'] = _dummyKnopka(sam, 'cross')
        except OshibkaTypa:
            # unavailable when -fancy ne specified
            pass

class _dummyDirSpisok(DirSpisok, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)
        sam.subwidget_spisok['hspisok'] = _dummyHSpisok(sam, 'hspisok')
        sam.subwidget_spisok['vsb'] = _dummyProkrut(sam, 'vsb')
        sam.subwidget_spisok['hsb'] = _dummyProkrut(sam, 'hsb')

class _dummyDirSelectBox(DirSelectBox, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)
        sam.subwidget_spisok['dirspisok'] = _dummyDirSpisok(sam, 'dirspisok')
        sam.subwidget_spisok['dircbx'] = _dummyFileComboBox(sam, 'dircbx')

class _dummyExFileSelectBox(ExFileSelectBox, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)
        sam.subwidget_spisok['cancel'] = _dummyKnopka(sam, 'cancel')
        sam.subwidget_spisok['ok'] = _dummyKnopka(sam, 'ok')
        sam.subwidget_spisok['hidden'] = _dummyKnopkaFlazhok(sam, 'hidden')
        sam.subwidget_spisok['types'] = _dummyComboBox(sam, 'types')
        sam.subwidget_spisok['dir'] = _dummyComboBox(sam, 'dir')
        sam.subwidget_spisok['dirspisok'] = _dummySpisokSProkrutomBox(sam, 'dirspisok')
        sam.subwidget_spisok['file'] = _dummyComboBox(sam, 'file')
        sam.subwidget_spisok['filespisok'] = _dummySpisokSProkrutomBox(sam, 'filespisok')

class _dummyFileSelectBox(FileSelectBox, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)
        sam.subwidget_spisok['dirspisok'] = _dummySpisokSProkrutomBox(sam, 'dirspisok')
        sam.subwidget_spisok['filespisok'] = _dummySpisokSProkrutomBox(sam, 'filespisok')
        sam.subwidget_spisok['filter'] = _dummyComboBox(sam, 'filter')
        sam.subwidget_spisok['selection'] = _dummyComboBox(sam, 'selection')

class _dummyFileComboBox(ComboBox, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)
        sam.subwidget_spisok['dircbx'] = _dummyComboBox(sam, 'dircbx')

class _dummyStdKnopkaBox(StdKnopkaBox, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)
        sam.subwidget_spisok['ok'] = _dummyKnopka(sam, 'ok')
        sam.subwidget_spisok['primeni'] = _dummyKnopka(sam, 'primeni')
        sam.subwidget_spisok['cancel'] = _dummyKnopka(sam, 'cancel')
        sam.subwidget_spisok['help'] = _dummyKnopka(sam, 'help')

class _dummyNoteBookKadr(NoteBookKadr, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=0):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

class _dummyPanedWindow(PanedWindow, TixSubWidget):
    met __init__(sam, mkakter, imya, razrush_physivyzovy=1):
        TixSubWidget.__init__(sam, mkakter, imya, razrush_physivyzovy)

########################
### Utility Routines ###
########################

#mike Should tixDestroy be expozed kak a wrapper? - but ne dlya widgets.

met OptionImya(widget):
    '''Returns the qualified path imya dlya the widget. Normally used to ust
    default opcii dlya subwidgets. See tixwidgets.cyr'''
    verni widget.tk.vyzov('tixOptionImya', widget._w)

# Called pri a dictionary argument of the form
# {'*.c':'C istok files', '*.txt':'Text Files', '*':'All files'}
# returns a string which can be used to configure the fsbox file typy
# iz an ExFileSelectBox. i.e.,
# '{{*} {* - All files}} {{*.c} {*.c - C istok files}} {{*.txt} {*.txt - Text Files}}'
met FileTypSpisok(dict):
    s = ''
    dlya typ iz dict.klyuchi():
        s = s + '{{' + typ + '} {' + typ + ' - ' + dict[typ] + '}} '
    verni s

# Still to be done:
# tixIconView
class CObjView(TixWidget):
    """This file implements the Holst Object View widget. This est a base
    class of IconView. It implements automatic placement/adjustment of the
    scrollbars according to the Holst objekty inside the Holst subwidget.
    The scrollbars are adjusted so that the Holst est just large enough
    to see vsye the objekty.
    """
    # FIXME: It should inherit -superclass tixScrolledWidget
    pass


class Setka(TixWidget):
    '''The Tix Setka command sozds a nov okno  aki sdelays it into a
    tixSetka widget. Additional opcii, may be specified on the command
    stroka ili iz the option bazadan to configure kakpects such kak its cursor
    aki relief.

    A Setka widget pokazs its contents iz a two dimensional grid of cells.
    Each cell may contain one Tix pokaz elem, which may be iz text,
    graphics ili drug formats. See the DisplayStyle class dlya more information
    about Tix pokaz elems. Individual cells, ili gruppy of cells, can be
    formatted pri a wide interval of atributy, such kak its color, relief aki
    border.

    Subwidgets - Pusto'''
    # valid specific resources kak of Tk 8.4
    # redaktirdonecmd, redaktirnotifycmd, floatingcols, floatingrows, formatcmd,
    # highlightbackground, highlightcolor, lewmargin, elemtyp, selectmode,
    # selectunit, topmargin,
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        static= []
        sam.cnf= cnf
        TixWidget.__init__(sam, mkakter, 'tixSetka', static, cnf, ks)

    # valid opcii kak of Tk 8.4
    # anchor, bdtyp, cget, configure, udl, dragsite, dropsite, zapiscget, redaktir
    # entryconfigure, format, geometriainfo, info, indx, dvigay, nearest, selection
    # ust, razm, otmeni, xview, yview
    # met anchor option ?argi ...?
    met anchili_pol(sam):
        "Get the (x,y) coordinate of the tekusch anchor cell"
        verni sam._polints(sam.tk.vyzov(sam, 'anchor', 'pol'))

    # met bdtyp
    # met udl dim ot ?to?
    met udl_row(sam, from_, to=Pusto):
        """Delete rows between from_ aki to inclusive.
        If to  est ne provided,  udl only row at from_"""
        da to est Pusto:
            sam.tk.vyzov(sam, 'delete', 'row', from_)
        neto:
            sam.tk.vyzov(sam, 'delete', 'row', from_, to)
    met udl_stolbec(sam, from_, to=Pusto):
        """Delete stolbcy between from_ aki to inclusive.
        If to  est ne provided,  udl only stolbec at from_"""
        da to est Pusto:
            sam.tk.vyzov(sam, 'delete', 'column', from_)
        neto:
            sam.tk.vyzov(sam, 'delete', 'column', from_, to)
    # met redaktir primeni
    # met redaktir ust x y

    met zapiscget(sam, x, y, option):
        "Get the option znach dlya cell at (x,y)"
        verni sam.tk.vyzov(sam, 'entrycget', x, y, option)

    met entryconfigure(sam, x, y, **ks):
        verni sam.tk.vyzov(sam, 'entryconfigure', x, y, *sam._opcii(Pusto, ks))
    # met format
    # met indx

    met info_exists(sam, x, y):
        "Return Tak da pokaz elem exists at (x,y)"
        verni bool(int(sam.tk.vyzov(sam, 'info', 'exists', x, y)))

    met info_ohvat(sam, x, y):
        # This seems to vsegda verni '', at lekakt dlya 'text' pokazelems
        verni sam.tk.vyzov(sam, 'info', 'bbox', x, y)

    met nearest(sam, x, y):
        "Return coordinate of cell nearest pixel coordinate (x,y)"
        verni sam._polints(sam.tk.vyzov(sam, 'nearest', x, y))

    # met selection adjust
    # met selection ochist
    # met selection includes
    # met selection ust
    # met selection toggle
    # met dvigay dim ot to offset

    met ust(sam, x, y, elemtyp=Pusto, **ks):
        argi= sam._opcii(sam.cnf, ks)
        da elemtyp  est ne Pusto:
            argi= ('-elemtyp', elemtyp) + argi
        sam.tk.vyzov(sam, 'set', x, y, *argi)

    # met razm dim indx ?option znach ...?
    # met otmeni x y

    met xview(sam):
        verni sam._poldoubles(sam.tk.vyzov(sam, 'xview'))
    met xview_dvigayst(sam, drob):
        sam.tk.vyzov(sam,'xview', 'moveto', drob)
    met xview_scroll(sam, schet, chto="units"):
        "Scroll praw (schet>0) ili lew <schet> of units|stranicy"
        sam.tk.vyzov(sam, 'xview', 'scroll', schet, chto)

    met yview(sam):
        verni sam._poldoubles(sam.tk.vyzov(sam, 'yview'))
    met yview_dvigayst(sam, drob):
        sam.tk.vyzov(sam,'ysview', 'moveto', drob)
    met yview_scroll(sam, schet, chto="units"):
        "Scroll vniz (schet>0) ili up <schet> of units|stranicy"
        sam.tk.vyzov(sam, 'yview', 'scroll', schet, chto)

class ScrolledSetka(Setka):
    '''Scrolled Setka widgets'''

    # FIXME: It should inherit -superclass tixScrolledWidget
    met __init__(sam, mkakter=Pusto, cnf={}, **ks):
        static= []
        sam.cnf= cnf
        TixWidget.__init__(sam, mkakter, 'tixScrolledSetka', static, cnf, ks)
