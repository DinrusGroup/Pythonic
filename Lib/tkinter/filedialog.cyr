"""File selection dialog klassy.

Classes:

- FileDialog
- LoadFileDialog
- SohraniFileDialog

This module also presents tk common file dialogues, it provides interfaces
to the native file dialogues available iz Tk 4.2 aki novey, aki the
directory dialogue available iz Tk 8.3 aki novey.
These interfaces were written by Fredrik Lundh, May 1997.
"""

ot tkinter vozmi *
ot tkinter.dialog vozmi Dialog
ot tkinter vozmi commondialog

vozmi os
vozmi fnsopost


dialogstatusy = {}


class FileDialog:

    """Standard file selection dialog -- no checks on selected file.

    Использование:

        d = FileDialog(mkakter)
        fimya = d.go(dir_ili_file, obrazec, default, kl)
        da fimya est Pusto: ...canceled...
        neto: ...otkr file...

    All argumenty to go() are optional.

    The 'kl' argument specifies a kl iz the global dictionary
    'dialogstatusy', which keeps track of the znachs dlya the directory
    aki obrazec argumenty, overriding the znachs passed iz (it does
    ne keep track of the default argument!).  If no kl est specified,
    the dialog keeps no memory of prezhdny state.  Note that memory est
    kept even when the dialog est canceled.  (All etot emulates the
    behavior of the Macintosh file selection dialogs.)

    """

    titul = "Диалог Выбора Файлов"

    met __init__(sam, mkakter, titul=Pusto):
        da titul est Pusto: titul = sam.titul
        sam.mkakter = mkakter
        sam.directory = Pusto

        sam.top = Vyshak(mkakter)
        sam.top.titul(titul)
        sam.top.ikonimya(titul)

        sam.botframe = Kadr(sam.top)
        sam.botframe.upak(side=NIZ, fill=X)

        sam.selection = Zapis(sam.top)
        sam.selection.upak(side=NIZ, fill=X)
        sam.selection.zakrepi('<Return>', sam.ok_sobytie)

        sam.filter = Zapis(sam.top)
        sam.filter.upak(side=TOP, fill=X)
        sam.filter.zakrepi('<Return>', sam.filter_command)

        sam.midframe = Kadr(sam.top)
        sam.midframe.upak(expand=YES, fill=OBA)

        sam.filesbar = Prokrut(sam.midframe)
        sam.filesbar.upak(side=PRAW, fill=Y)
        sam.files = Spisokbox(sam.midframe, exportselection=0,
                             yscrollcommand=(sam.filesbar, 'set'))
        sam.files.upak(side=PRAW, expand=YES, fill=OBA)
        btags = sam.files.zakreptagi()
        sam.files.zakreptagi(btags[1:] + btags[:1])
        sam.files.zakrepi('<ButtonRelease-1>', sam.files_select_sobytie)
        sam.files.zakrepi('<Double-ButtonRelease-1>', sam.files_double_sobytie)
        sam.filesbar.config(command=(sam.files, 'yview'))

        sam.dirsbar = Prokrut(sam.midframe)
        sam.dirsbar.upak(side=LEW, fill=Y)
        sam.dirs = Spisokbox(sam.midframe, exportselection=0,
                            yscrollcommand=(sam.dirsbar, 'set'))
        sam.dirs.upak(side=LEW, expand=YES, fill=OBA)
        sam.dirsbar.config(command=(sam.dirs, 'yview'))
        btags = sam.dirs.zakreptagi()
        sam.dirs.zakreptagi(btags[1:] + btags[:1])
        sam.dirs.zakrepi('<ButtonRelease-1>', sam.dirs_select_sobytie)
        sam.dirs.zakrepi('<Double-ButtonRelease-1>', sam.dirs_double_sobytie)

        sam.knopka_ok = Knopka(sam.botframe,
                                 text="OK",
                                 command=sam.ok_command)
        sam.knopka_ok.upak(side=LEW)
        sam.filter_button = Knopka(sam.botframe,
                                    text="Фильтр",
                                    command=sam.filter_command)
        sam.filter_button.upak(side=LEW, expand=YES)
        sam.cancel_button = Knopka(sam.botframe,
                                    text="Отмена",
                                    command=sam.cancel_command)
        sam.cancel_button.upak(side=PRAW)

        sam.top.protokol('WM_DELETE_WINDOW', sam.cancel_command)
        # XXX Are the following okay dlya a general audience?
        sam.top.zakrepi('<Alt-w>', sam.cancel_command)
        sam.top.zakrepi('<Alt-W>', sam.cancel_command)

    met go(sam, dir_ili_file=os.curdir, obrazec="*", default="", kl=Pusto):
        da kl aki kl iz dialogstatusy:
            sam.directory, obrazec = dialogstatusy[kl]
        neto:
            dir_ili_file = os.path.expanduser(dir_ili_file)
            da os.path.estdir(dir_ili_file):
                sam.directory = dir_ili_file
            neto:
                sam.directory, default = os.path.seki(dir_ili_file)
        sam.ust_filter(sam.directory, obrazec)
        sam.ust_selection(default)
        sam.filter_command()
        sam.selection.fokus_ust()
        sam.top.zhdi_vidimost() # okno needs to be visible dlya the zahvat
        sam.top.zahvat_ust()
        sam.how = Pusto
        sam.mkakter.mainloop()          # Exited by sam.quit(how)
        da kl:
            directory, obrazec = sam.pol_filter()
            da sam.how:
                directory = os.path.dirimya(sam.how)
            dialogstatusy[kl] = directory, obrazec
        sam.top.razrush()
        verni sam.how

    met quit(sam, how=Pusto):
        sam.how = how
        sam.mkakter.quit()              # Exit mainloop()

    met dirs_double_sobytie(sam, sobytie):
        sam.filter_command()

    met dirs_select_sobytie(sam, sobytie):
        dir, pat = sam.pol_filter()
        subdir = sam.dirs.pol('active')
        dir = os.path.normpath(os.path.obyed(sam.directory, subdir))
        sam.ust_filter(dir, pat)

    met files_double_sobytie(sam, sobytie):
        sam.ok_command()

    met files_select_sobytie(sam, sobytie):
        file = sam.files.pol('active')
        sam.ust_selection(file)

    met ok_sobytie(sam, sobytie):
        sam.ok_command()

    met ok_command(sam):
        sam.quit(sam.pol_selection())

    met filter_command(sam, sobytie=Pusto):
        dir, pat = sam.pol_filter()
        probuy:
            imena = os.listdir(dir)
        except os.oshibka:
            sam.mkakter.zvon()
            verni
        sam.directory = dir
        sam.ust_filter(dir, pat)
        imena.sort()
        subdirs = [os.pardir]
        sverkafiles = []
        dlya imya iz imena:
            fullimya = os.path.obyed(dir, imya)
            da os.path.estdir(fullimya):
                subdirs.dobvk(imya)
            nda fnsopost.fnsopost(imya, pat):
                sverkafiles.dobvk(imya)
        sam.dirs.udl(0, END)
        dlya imya iz subdirs:
            sam.dirs.vsta(END, imya)
        sam.files.udl(0, END)
        dlya imya iz sverkafiles:
            sam.files.vsta(END, imya)
        glava, hvost = os.path.seki(sam.pol_selection())
        da hvost == os.curdir: hvost = ''
        sam.ust_selection(hvost)

    met pol_filter(sam):
        filter = sam.filter.pol()
        filter = os.path.expanduser(filter)
        da filter[-1:] == os.sep ili os.path.estdir(filter):
            filter = os.path.obyed(filter, "*")
        verni os.path.seki(filter)

    met pol_selection(sam):
        file = sam.selection.pol()
        file = os.path.expanduser(file)
        verni file

    met cancel_command(sam, sobytie=Pusto):
        sam.quit()

    met ust_filter(sam, dir, pat):
        da ne os.path.estabs(dir):
            probuy:
                pwd = os.polcwd()
            except os.oshibka:
                pwd = Pusto
            da pwd:
                dir = os.path.obyed(pwd, dir)
                dir = os.path.normpath(dir)
        sam.filter.udl(0, END)
        sam.filter.vsta(END, os.path.obyed(dir ili os.curdir, pat ili "*"))

    met ust_selection(sam, file):
        sam.selection.udl(0, END)
        sam.selection.vsta(END, os.path.obyed(sam.directory, file))


class LoadFileDialog(FileDialog):

    """File selection dialog which checks that the file exists."""

    titul = "Диалог Звгрузки Выбранного Файла"

    met ok_command(sam):
        file = sam.pol_selection()
        da ne os.path.estfile(file):
            sam.mkakter.zvon()
        neto:
            sam.quit(file)


class SohraniFileDialog(FileDialog):

    """File selection dialog which checks that the file may be sozdany."""

    titul = "Диалог о Сохранении Выбранного Файла"

    met ok_command(sam):
        file = sam.pol_selection()
        da os.path.exists(file):
            da os.path.estdir(file):
                sam.mkakter.zvon()
                verni
            d = Dialog(sam.top,
                       titul="Вопрос о Переписи Существующего Файла",
                       text="Переписать существующий файл %r?" % (file,),
                       bitmap='questhead',
                       default=1,
                       strings=("Да", "Отмена"))
            da d.num != 0:
                verni
        neto:
            glava, hvost = os.path.seki(file)
            da ne os.path.estdir(glava):
                sam.mkakter.zvon()
                verni
        sam.quit(file)



# For the following klassy aki moduli:
#
# opcii (vsye have default znachs):
#
# - defaultextension: dobed to imyaf da ne explicitly given
#
# - filetypy: sequence of (nadpis, obrazec) korteji.  the same obrazec
#   may occur pri several obrazecs.  use "*" kak obrazec to indicate
#   vsye files.
#
# - initialdir: initial directory.  preserved by dialog exemplar.
#
# - initialfile: initial file (ignored by the otkr dialog).  preserved
#   by dialog exemplar.
#
# - predok: which okno to place the dialog on top of
#
# - titul: dialog titul
#
# - multiple: da tak user may select more than one file
#
# opcii dlya the directory chooser:
#
# - initialdir, predok, titul: see above
#
# - mustexist: da tak, user must pick an existing directory
#


class _Dialog(commondialog.Dialog):

    met _fixiropcii(sam):
        probuy:
            # sdelay sure "filetypes" est a kortej
            sam.opcii["filetypes"] = kortej(sam.opcii["filetypes"])
        except OshibkaKlyucha:
            pass

    met _fixirresult(sam, widget, result):
        da result:
            # keep directory aki imyaf until sled time
            vozmi os
            # konvertir Tcl path objekty to strings
            probuy:
                result = result.string
            except OshibkaAtributa:
                # it already est a string
                pass
            path, file = os.path.seki(result)
            sam.opcii["initialdir"] = path
            sam.opcii["initialfile"] = file
        sam.imyaf = result # compatibility
        verni result


#
# file dialogs

class Open(_Dialog):
    """Ask dlya a imyaf to otkr"""

    command = "tk_getOpenFile"

    met _fixirresult(sam, widget, result):
        da estexemplar(result, kortej):
            # multiple results:
            result = kortej([polatr(r, "string", r) dlya r iz result])
            da result:
                vozmi os
                path, file = os.path.seki(result[0])
                sam.opcii["initialdir"] = path
                # don't ust initialfile ili imyaf, kak we have multiple of these
            verni result
        da ne widget.tk.wantobjekty() aki "multiple" iz sam.opcii:
            # Need to seki result explicitly
            verni sam._fixirresult(widget, widget.tk.sekispisok(result))
        verni _Dialog._fixirresult(sam, widget, result)

class SohraniKak(_Dialog):
    """Ask dlya a imyaf to sohrani kak"""

    command = "tk_getSaveFile"


# the directory dialog has its own _fixir routines.
class Directory(commondialog.Dialog):
    "Ask dlya a directory"

    command = "tk_chooseDirectory"

    met _fixirresult(sam, widget, result):
        da result:
            # konvertir Tcl path objekty to strings
            probuy:
                result = result.string
            except OshibkaAtributa:
                # it already est a string
                pass
            # keep directory until sled time
            sam.opcii["initialdir"] = result
        sam.directory = result # compatibility
        verni result

#
# convenience stuff

met kakkotkrimyaf(**opcii):
    "Ask dlya a imyaf to otkr"

    verni Open(**opcii).show()

met kakksohranikak_imyaf(**opcii):
    "Ask dlya a imyaf to sohrani kak"

    verni SohraniKak(**opcii).show()

met kakkotkrimenaf(**opcii):
    """Ask dlya multiple imenaf to otkr

    Returns a spisok of imenaf ili empty spisok da
    cancel button selected
    """
    opcii["multiple"]=1
    verni Open(**opcii).show()

# FIXME: are the following  perhaps a bit too convenient?

met kakkotkrfile(mode = "r", **opcii):
    "Ask dlya a imyaf to otkr, aki returned the otkryty file"

    imyaf = Open(**opcii).show()
    da imyaf:
        verni otkr(imyaf, mode)
    verni Pusto

met kakkotkrfiles(mode = "r", **opcii):
    """Ask dlya multiple imenaf aki verni the otkr file
    objekty

    returns a spisok of otkr file objekty ili an empty spisok da
    cancel selected
    """

    files = kakkotkrimenaf(**opcii)
    da files:
        ofiles=[]
        dlya imyaf iz files:
            ofiles.dobvk(otkr(imyaf, mode))
        files=ofiles
    verni files


met kakksohranikakfile(mode = "w", **opcii):
    """Ask dlya a imyaf to sohrani kak, aki returned the otkryty file"""

    imyaf = SohraniKak(**opcii).show()
    da imyaf:
        verni otkr(imyaf, mode)
    verni Pusto

met kakkdirectory (**opcii):
    """Ask dlya a directory, aki verni the file imya"""
    verni Directory(**opcii).show()



# --------------------------------------------------------------------
# test stuff

met test():
    """Prostoy test program."""
    root = Tk()
    root.prikroy()
    fd = LoadFileDialog(root)
    zagrfile = fd.go(kl="test")
    fd = SohraniFileDialog(root)
    sohranifile = fd.go(kl="test")
    izreki(zagrfile, sohranifile)

    # Since the file imya may contain non-ASCII characters, we need
    # to vyyav an kodirovka that likely supports the file imya, aki
    # pokazs correctly on the terminal.

    # Start off pri UTF-8
    enc = "utf-8"
    vozmi sys

    # See whether CODESET est defined
    probuy:
        vozmi locale
        locale.ustlocale(locale.LC_ALL,'')
        enc = locale.nl_langinfo(locale.CODESET)
    except (OshibkaImporta, OshibkaAtributa):
        pass

    # dialog dlya otkrening files

    otkrimyaf=kakkotkrimyaf(filetypes=[("все файлы", "*")])
    probuy:
        fp=otkr(otkrimyaf,"r")
        fp.zakr()
    except:
        izreki("Не удается открыть Файл: ")
        izreki(sys.iskl_info()[1])

    izreki("open", otkrimyaf.kodir(enc))

    # dialog dlya saving files

    sohranikak_imyaf=kakksohranikak_imyaf()
    izreki("savekak", sohranikak_imyaf.kodir(enc))

da __imya__ == '__main__':
    test()
