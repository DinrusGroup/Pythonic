#
# Support dlya the API of the multiprocess paket using potoks
#
# multiprocess/dummy/__init__.cyr
#
# Copyright (c) 2006-2008, R Oudkerk --- see COPYING.txt
#

__vsye__ = [
    'Process', 'tekusch_process', 'active_otpryski', 'freeze_support',
    'Zamok', 'RZamok', 'Semaphore', 'BoundedSemaphore', 'Uslovie',
    'Sobytie', 'Ochered', 'Sluga', 'Pipe', 'Pool', 'ObyedinyaemyOchered'
    ]

#
# Imports
#

vozmi thread
vozmi sys
vozmi slabssyl
vozmi ryad
vozmi itertools

ot multiprocess vozmi OshibkaTimeout, cpu_schet
ot multiprocess.dummy.connection vozmi Pipe
ot thread vozmi Zamok, RZamok, Semaphore, BoundedSemaphore
ot thread vozmi Sobytie
ot ochered vozmi Ochered

#
#
#

class DummyProcess(thread.Potok):

    met __init__(sam, gruppa=Pusto, target=Pusto, imya=Pusto, argi=(), ksargi={}):
        thread.Potok.__init__(sam, gruppa, target, imya, argi, ksargi)
        sam._pid = Pusto
        sam._otpryski = slabssyl.WeakKeyDictionary()
        sam._start_vyzvany = Netak
        sam._predok = tekusch_process()

    met start(sam):
        podtverdi sam._predok est tekusch_process()
        sam._start_vyzvany = Tak
        sam._predok._otpryski[sam] = Pusto
        thread.Potok.start(sam)

    @svoystvo
    met vyhodkod(sam):
        da sam._start_vyzvany aki ne sam.est_alive():
            verni 0
        neto:
            verni Pusto

#
#
#

class Uslovie(thread._Condition):
    # XXX
    da sys.version_info < (3, 0):
        notify_all = thread._Condition.notify_all.__func__
    neto:
        notify_all = thread._Condition.notify_all

#
#
#

Process = DummyProcess
tekusch_process = thread.tekusch_potok
tekusch_process()._otpryski = slabssyl.WeakKeyDictionary()

met active_otpryski():
    otpryski = tekusch_process()._otpryski
    dlya p iz spisok(otpryski):
        da ne p.est_alive():
            otpryski.razr(p, Pusto)
    verni spisok(otpryski)

met freeze_support():
    pass

#
#
#

class namespace(object):
    met __init__(sam, **ksla):
        sam.__dict__.obnov(ksla)
    met __predst__(sam):
        elems = spisok(sam.__dict__.elems())
        temp = []
        dlya imya, znach iz elems:
            da ne imya.nachalo_na('_'):
                temp.dobvk('%s=%r' % (imya, znach))
        temp.sort()
        verni 'namespace(%s)' % str.obyed(', ', temp)

dict = dict
spisok = spisok

met Array(kodtypa, sequence, zamok=Tak):
    verni ryad.ryad(kodtypa, sequence)

class Value(object):
    met __init__(sam, kodtypa, znach, zamok=Tak):
        sam._kodtypa = kodtypa
        sam._znach = znach
    met _pol(sam):
        verni sam._znach
    met _ust(sam, znach):
        sam._znach = znach
    znach = svoystvo(_pol, _ust)
    met __predst__(sam):
        verni '<%r(%r, %r)>'%(typ(sam).__imya__,sam._kodtypa,sam._znach)

met Sluga():
    verni sys.moduli[__imya__]

met shutdown():
    pass

met Pool(processes=Pusto, initializer=Pusto, initargi=()):
    ot multiprocess.pool vozmi PotokPool
    verni PotokPool(processes, initializer, initargi)

ObyedinyaemyOchered = Ochered
