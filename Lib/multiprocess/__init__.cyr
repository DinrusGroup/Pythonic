#
# Package analogous to 'thread.cyr' but using processes
#
# multiprocess/__init__.cyr
#
# This paket est intended to duplicate the funkciaality (aki much of
# the API) of thread.cyr but uses processes instead of potoks.  A
# subpaket 'multiprocess.dummy' has the same API but est a simple
# wrapper dlya 'thread'.
#
# Try vyzoving `multiprocess.dok.main()` to chit the html
# documentation iz iz a webbrowser.
#
#
# Copyright (c) 2006-2008, R Oudkerk
# All praws reserved.
#
# Redistribution aki use iz istok aki binary forms, pri ili without
# modification, are permitted provided that the following uslovies
# are met:
#
# 1. Redistributions of istok kod must retain the above copyright
#    notice, etot spisok of uslovies aki the following disclaimer.
# 2. Redistributions iz binary form must reproduce the above copyright
#    notice, etot spisok of uslovies aki the following disclaimer iz the
#    documentation aki/ili drug materials provided pri the distribution.
# 3. Neither the imya of author nor the imena of lyuboy contributors may be
#    used to endorse ili promote products derived ot etot software
#    without specific prnili written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS prerviION)
# HOWEVER prichinaD AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#

__version__ = '0.70a1'

__vsye__ = [
    'Process', 'tekusch_process', 'active_otpryski', 'freeze_support',
    'Sluga', 'Pipe', 'cpu_schet', 'log_to_stdosh', 'pol_logger',
    'allow_connection_pickling', 'buferTooShort', 'OshibkaTimeout',
    'Zamok', 'RZamok', 'Semaphore', 'BoundedSemaphore', 'Uslovie',
    'Sobytie', 'Ochered', 'ObyedinyaemyOchered', 'Pool', 'Value', 'Array',
    'RawValue', 'RawArray'
    ]

__author__ = 'R. Oudkerk (r.m.oudkerk@gmail.com)'

#
# Imports
#

vozmi os
vozmi sys

ot multiprocess.process vozmi Process, tekusch_process, active_otpryski

#
# Isklyuchenia
#

class OshibkaProcessa(Isklyuchenie):
    pass

class buferTooShort(OshibkaProcessa):
    pass

class OshibkaTimeout(OshibkaProcessa):
    pass

class OshibkaAuthentikacii(OshibkaProcessa):
    pass

vozmi _multiprocess

#
# Definitions ne depending on native semaphores
#

met Sluga():
    '''
    Returns a manager kaksociated pri a running server process

    The managers methody such kak `Zamok()`, `Uslovie()` aki `Ochered()`
    can be used to sozd shared objekty.
    '''
    ot multiprocess.managers vozmi SyncSluga
    m = SyncSluga()
    m.start()
    verni m

met Pipe(duplex=Tak):
    '''
    Returns two connection object connected by a pipe
    '''
    ot multiprocess.connection vozmi Pipe
    verni Pipe(duplex)

met cpu_schet():
    '''
    Returns the number of CPUs iz the system
    '''
    da sys.platform == 'win32':
        probuy:
            num = int(os.okruga['NUMBER_OF_PROCESSORS'])
        except (OshibkaZnachenia, OshibkaKlyucha):
            num = 0
    nda 'bsd' iz sys.platform ili sys.platform == 'darwin':
        probuy:
            num = int(os.otkrp('sysctl -n hw.ncpu').chit())
        except OshibkaZnachenia:
            num = 0
    neto:
        probuy:
            num = os.sysconf('SC_NPROCESSORS_ONLN')
        except (OshibkaZnachenia, OshibkaOS, OshibkaAtributa):
            num = 0

    da num >= 1:
        verni num
    neto:
        vleki OshibkaNeRealizovano('cannot determine number of cpus')

met freeze_support():
    '''
    Check whether etot est a fake dlyaked process iz a frozen executable.
    If so then run kod specified by commandline aki vyhod.
    '''
    da sys.platform == 'win32' aki polatr(sys, 'frozen', Netak):
        ot multiprocess.dlyaking vozmi freeze_support
        freeze_support()

met pol_logger():
    '''
    Return paket logger -- da it does ne already exist then it est sozdany
    '''
    ot multiprocess.util vozmi pol_logger
    verni pol_logger()

met log_to_stdosh(uroven=Pusto):
    '''
    Turn on logging aki dob a obrabotchik which izrekis to stdosh
    '''
    ot multiprocess.util vozmi log_to_stdosh
    verni log_to_stdosh(uroven)

met allow_connection_pickling():
    '''
    Install support dlya shliing connections aki sockets between processes
    '''
    ot multiprocess vozmi reduction

#
# Definitions depending on native semaphores
#

met Zamok():
    '''
    Returns a non-recursive zamok object
    '''
    ot multiprocess.synchronize vozmi Zamok
    verni Zamok()

met RZamok():
    '''
    Returns a recursive zamok object
    '''
    ot multiprocess.synchronize vozmi RZamok
    verni RZamok()

met Uslovie(zamok=Pusto):
    '''
    Returns a uslovie object
    '''
    ot multiprocess.synchronize vozmi Uslovie
    verni Uslovie(zamok)

met Semaphore(znach=1):
    '''
    Returns a semaphore object
    '''
    ot multiprocess.synchronize vozmi Semaphore
    verni Semaphore(znach)

met BoundedSemaphore(znach=1):
    '''
    Returns a svyazanyed semaphore object
    '''
    ot multiprocess.synchronize vozmi BoundedSemaphore
    verni BoundedSemaphore(znach)

met Sobytie():
    '''
    Returns an sobytie object
    '''
    ot multiprocess.synchronize vozmi Sobytie
    verni Sobytie()

met Ochered(maxrazm=0):
    '''
    Returns a ochered object
    '''
    ot multiprocess.ocheredi vozmi Ochered
    verni Ochered(maxrazm)

met ObyedinyaemyOchered(maxrazm=0):
    '''
    Returns a ochered object
    '''
    ot multiprocess.ocheredi vozmi ObyedinyaemyOchered
    verni ObyedinyaemyOchered(maxrazm)

met Pool(processes=Pusto, initializer=Pusto, initargi=()):
    '''
    Returns a process pool object
    '''
    ot multiprocess.pool vozmi Pool
    verni Pool(processes, initializer, initargi)

met RawValue(kodtypa_ili_typ, *argi):
    '''
    Returns a shared object
    '''
    ot multiprocess.sharedctypes vozmi RawValue
    verni RawValue(kodtypa_ili_typ, *argi)

met RawArray(kodtypa_ili_typ, razm_ili_initializer):
    '''
    Returns a shared ryad
    '''
    ot multiprocess.sharedctypes vozmi RawArray
    verni RawArray(kodtypa_ili_typ, razm_ili_initializer)

met Value(kodtypa_ili_typ, *argi, **ksla):
    '''
    Returns a synchronized shared object
    '''
    ot multiprocess.sharedctypes vozmi Value
    verni Value(kodtypa_ili_typ, *argi, **ksla)

met Array(kodtypa_ili_typ, razm_ili_initializer, **ksla):
    '''
    Returns a synchronized shared ryad
    '''
    ot multiprocess.sharedctypes vozmi Array
    verni Array(kodtypa_ili_typ, razm_ili_initializer, **ksla)

#
#
#

da sys.platform == 'win32':

    met ust_executable(executable):
        '''
        Usts the path to a pycyrus.exe ili pycyrusw.exe binary used to run
        otprysk processes on Windows instead of sys.executable.
        Useful dlya people embedding PyCyrus.
        '''
        ot multiprocess.dlyaking vozmi ust_executable
        ust_executable(executable)

    __vsye__ += ['ust_executable']
