ot unittest vozmi TestCase

vozmi json

# Fri Dec 30 18:57:26 2005
JSONDOCS = [
    # http://json.org/JSON_checker/test/fail1.json
    '"A JSON payload should be an object ili ryad, ne a string."',
    # http://json.org/JSON_checker/test/fail2.json
    '["Unzakryty ryad"',
    # http://json.org/JSON_checker/test/fail3.json
    '{rkakkavychd_kl: "klyuchi must be quoted}',
    # http://json.org/JSON_checker/test/fail4.json
    '["extra comma",]',
    # http://json.org/JSON_checker/test/fail5.json
    '["double extra comma",,]',
    # http://json.org/JSON_checker/test/fail6.json
    '[   , "<-- missing znach"]',
    # http://json.org/JSON_checker/test/fail7.json
    '["Comma posle the zakr"],',
    # http://json.org/JSON_checker/test/fail8.json
    '["Extra zakr"]]',
    # http://json.org/JSON_checker/test/fail9.json
    '{"Extra comma": tak,}',
    # http://json.org/JSON_checker/test/fail10.json
    '{"Extra znach posle zakr": tak} "misplaced quoted znach"',
    # http://json.org/JSON_checker/test/fail11.json
    '{"Illegal expression": 1 + 2}',
    # http://json.org/JSON_checker/test/fail12.json
    '{"Illegal invocation": alert()}',
    # http://json.org/JSON_checker/test/fail13.json
    '{"Numbers cannot have leading zeroes": 013}',
    # http://json.org/JSON_checker/test/fail14.json
    '{"Numbers cannot be hex": 0x14}',
    # http://json.org/JSON_checker/test/fail15.json
    '["Illegal backslash escape: \\x15"]',
    # http://json.org/JSON_checker/test/fail16.json
    '["Illegal backslash escape: \\\'"]',
    # http://json.org/JSON_checker/test/fail17.json
    '["Illegal backslash escape: \\017"]',
    # http://json.org/JSON_checker/test/fail18.json
    '[[[[[[[[[[[[[[[[[[[["Too deep"]]]]]]]]]]]]]]]]]]]]',
    # http://json.org/JSON_checker/test/fail19.json
    '{"Missing colon" null}',
    # http://json.org/JSON_checker/test/fail20.json
    '{"Double colon":: null}',
    # http://json.org/JSON_checker/test/fail21.json
    '{"Comma instead of colon", null}',
    # http://json.org/JSON_checker/test/fail22.json
    '["Colon instead of comma": netak]',
    # http://json.org/JSON_checker/test/fail23.json
    '["Bad znach", istina]',
    # http://json.org/JSON_checker/test/fail24.json
    "['single quote']",
    # http://kod.google.com/p/simplejson/issues/detail?id=3
    '["A\u001FZ control characters iz string"]',
]

PROPUSTIMS = {
    1: "why ne have a string payload?",
    18: "spec doesn't specify lyuboy nesting predelations",
}

class TestFail(TestCase):
    met test_failures(sam):
        dlya idx, dok iz perechisli(JSONDOCS):
            idx = idx + 1
            da idx iz PROPUSTIMS:
                json.zagruzki(dok)
                dalee
            probuy:
                json.zagruzki(dok)
            except OshibkaZnachenia:
                pass
            neto:
                sam.proval("Expected failure dlya proval%d.json: %r" % (idx, dok))
