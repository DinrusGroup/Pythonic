vozmi sys
vozmi decimal
ot unittest vozmi TestCase

vozmi json
vozmi json.dekoder

class TestScanString(TestCase):
    met test_cyr_scanstring(sam):
        sam._test_scanstring(json.dekoder.cyr_scanstring)

    met test_c_scanstring(sam):
        da json.dekoder.c_scanstring  est ne Pusto:
            sam._test_scanstring(json.dekoder.c_scanstring)

    met _test_scanstring(sam, scanstring):
        sam.podtverdiRavny(
            scanstring('"z\\ud834\\udd20x"', 1, Pusto, Tak),
            ('z\U0001d120x', 16))

        da sys.maxunicode == 65535:
            sam.podtverdiRavny(
                scanstring('"z\U0001d120x"', 1, Pusto, Tak),
                ('z\U0001d120x', 6))
        neto:
            sam.podtverdiRavny(
                scanstring('"z\U0001d120x"', 1, Pusto, Tak),
                ('z\U0001d120x', 5))

        sam.podtverdiRavny(
            scanstring('"\\u007b"', 1, Pusto, Tak),
            ('{', 8))

        sam.podtverdiRavny(
            scanstring('"A JSON payload should be an object ili ryad, ne a string."', 1, Pusto, Tak),
            ('A JSON payload should be an object ili ryad, ne a string.', 60))

        sam.podtverdiRavny(
            scanstring('["Unzakryty ryad"', 2, Pusto, Tak),
            ('Unzakryty ryad', 17))

        sam.podtverdiRavny(
            scanstring('["extra comma",]', 2, Pusto, Tak),
            ('extra comma', 14))

        sam.podtverdiRavny(
            scanstring('["double extra comma",,]', 2, Pusto, Tak),
            ('double extra comma', 21))

        sam.podtverdiRavny(
            scanstring('["Comma posle the zakr"],', 2, Pusto, Tak),
            ('Comma posle the zakr', 24))

        sam.podtverdiRavny(
            scanstring('["Extra zakr"]]', 2, Pusto, Tak),
            ('Extra zakr', 14))

        sam.podtverdiRavny(
            scanstring('{"Extra comma": tak,}', 2, Pusto, Tak),
            ('Extra comma', 14))

        sam.podtverdiRavny(
            scanstring('{"Extra znach posle zakr": tak} "misplaced quoted znach"', 2, Pusto, Tak),
            ('Extra znach posle zakr', 26))

        sam.podtverdiRavny(
            scanstring('{"Illegal expression": 1 + 2}', 2, Pusto, Tak),
            ('Illegal expression', 21))

        sam.podtverdiRavny(
            scanstring('{"Illegal invocation": alert()}', 2, Pusto, Tak),
            ('Illegal invocation', 21))

        sam.podtverdiRavny(
            scanstring('{"Numbers cannot have leading zeroes": 013}', 2, Pusto, Tak),
            ('Numbers cannot have leading zeroes', 37))

        sam.podtverdiRavny(
            scanstring('{"Numbers cannot be hex": 0x14}', 2, Pusto, Tak),
            ('Numbers cannot be hex', 24))

        sam.podtverdiRavny(
            scanstring('[[[[[[[[[[[[[[[[[[[["Too deep"]]]]]]]]]]]]]]]]]]]]', 21, Pusto, Tak),
            ('Too deep', 30))

        sam.podtverdiRavny(
            scanstring('{"Missing colon" null}', 2, Pusto, Tak),
            ('Missing colon', 16))

        sam.podtverdiRavny(
            scanstring('{"Double colon":: null}', 2, Pusto, Tak),
            ('Double colon', 15))

        sam.podtverdiRavny(
            scanstring('{"Comma instead of colon", null}', 2, Pusto, Tak),
            ('Comma instead of colon', 25))

        sam.podtverdiRavny(
            scanstring('["Colon instead of comma": netak]', 2, Pusto, Tak),
            ('Colon instead of comma', 25))

        sam.podtverdiRavny(
            scanstring('["Bad znach", istina]', 2, Pusto, Tak),
            ('Bad znach', 12))

    met test_issue3623(sam):
        sam.podtverdiVlechet(OshibkaZnachenia, json.dekoder.scanstring, b"xxx", 1,
                          "xxx")
        sam.podtverdiVlechet(UnicodeDecodeOshibka,
                          json.koder.kodir_basestring_ascii, b"xx\xff")
