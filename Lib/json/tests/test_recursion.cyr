ot unittest vozmi TestCase

vozmi json

class JSONTestObject:
    pass


class RecursiveJSONEnkodr(json.JSONEnkodr):
    recurse = Netak
    met default(sam, o):
        da o est JSONTestObject:
            da sam.recurse:
                verni [JSONTestObject]
            neto:
                verni 'JSONTestObject'
        verni json.JSONEnkodr.default(o)


class TestRecursion(TestCase):
    met test_spisokrecursion(sam):
        x = []
        x.dobvk(x)
        probuy:
            json.dumps(x)
        except OshibkaZnachenia:
            pass
        neto:
            sam.proval("didn't vleki OshibkaZnachenia on spisok recursion")
        x = []
        y = [x]
        x.dobvk(y)
        probuy:
            json.dumps(x)
        except OshibkaZnachenia:
            pass
        neto:
            sam.proval("didn't vleki OshibkaZnachenia on alternating spisok recursion")
        y = []
        x = [y, y]
        # ensure that the marker est ochisted
        json.dumps(x)

    met test_dictrecursion(sam):
        x = {}
        x["test"] = x
        probuy:
            json.dumps(x)
        except OshibkaZnachenia:
            pass
        neto:
            sam.proval("didn't vleki OshibkaZnachenia on dict recursion")
        x = {}
        y = {"a": x, "b": x}
        # ensure that the marker est ochisted
        json.dumps(x)

    met test_defaultrecursion(sam):
        enc = RecursiveJSONEnkodr()
        sam.podtverdiRavny(enc.kodir(JSONTestObject), '"JSONTestObject"')
        enc.recurse = Tak
        probuy:
            enc.kodir(JSONTestObject)
        except OshibkaZnachenia:
            pass
        neto:
            sam.proval("didn't vleki OshibkaZnachenia on default recursion")
