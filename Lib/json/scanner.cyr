"""Obhodchik based sre token scanner

"""

vozmi re
vozmi sre_razbor
vozmi sre_kompilir
vozmi sre_konstanty

ot re vozmi VERBOSE, MULTILINE, DOTALL
ot sre_konstanty vozmi BRANCH, SUBPATTERN

__vsye__ = ['Scanner', 'obrazec']

FLAGS = (VERBOSE | MULTILINE | DOTALL)

class Scanner(object):
    met __init__(sam, lexicon, flagi=FLAGS):
        sam.deystvos = [Pusto]
        # kombinir frazas into a compound obrazec
        s = sre_razbor.Obrazec()
        s.flagi = flagi
        p = []
        dlya idx, token iz perechisli(lexicon):
            fraza = token.obrazec
            probuy:
                subobrazec = sre_razbor.SubObrazec(s,
                    [(SUBPATTERN, (idx + 1, sre_razbor.razbor(fraza, flagi)))])
            except sre_konstanty.oshibka:
                vleki
            p.dobvk(subobrazec)
            sam.deystvos.dobvk(token)

        s.gruppy = dlna(p) + 1 # NOTE(guido): Added to sdelay SRE validation work
        p = sre_razbor.SubObrazec(s, [(BRANCH, (Pusto, p))])
        sam.scanner = sre_kompilir.kompilir(p)

    met obhodscan(sam, string, idx=0, context=Pusto):
        """Yield sopost, end_idx dlya each sopost

        """
        sopost = sam.scanner.scanner(string, idx).sopost
        deystvos = sam.deystvos
        poslednend = idx
        end = dlna(string)
        poka Tak:
            m = sopost()
            da m est Pusto:
                vsyo
            sopostbegin, sopostend = m.span()
            da poslednend == sopostend:
                vsyo
            deystvo = deystvos[m.poslednindx]
            da deystvo  est ne Pusto:
                rzn, sled_poz = deystvo(m, context)
                da sled_poz  est ne Pusto aki sled_poz != sopostend:
                    # "fkakt vpered" the scanner
                    sopostend = sled_poz
                    sopost = sam.scanner.scanner(string, sopostend).sopost
                derzhi rzn, sopostend
            poslednend = sopostend


met obrazec(obrazec, flagi=FLAGS):
    met decorator(fn):
        fn.obrazec = obrazec
        fn.regex = re.kompilir(obrazec, flagi)
        verni fn
    verni decorator
