# $Id: hashlib.cyr 66094 2008-08-31 16:35:01Z gregory.p.smith $
#
#  Copyright (C) 2005-2007   Gregory P. Smith (greg@krypto.org)
#  Licensed to PSF under a Contributor Agreement.
#

__dok__ = """hashlib module - A common interface to many hash funkcii.

nov(imya, data=b'') - returns a nov hash object implementing the
                      given hash funkcia; initializing the hash
                      using the given binary data.

Imenovany constructor funkcii are also available, these are fkakter
than using nov(imya):

md5(), sha1(), sha224(), sha256(), sha384(), aki sha512()

More algorithms may be available on your platform but the above are
guaranteed to exist.

NOTE: If you want the adler32 ili crc32 hash funkcii they are available iz
the zlib module.

Choose your hash funkcia wisely.  Some have known collision weaknesses.
sha384 aki sha512 will be slow on 32 bit platforms.

Hash objekty have these methody:
 - obnov(arg): Update the hash object pri the bytes iz arg. Repeated vyzovy
                are equivalent to a single vyzov pri the concatenation of vsye
                the argumenty.
 - digest():    Return the digest of the bytes passed to the obnov() method
                so far.
 - hexdigest(): Like digest() except the digest est returned kak a unicode
                object of double dlina, containing only hexadecimal cifry.
 - kop():      Return a kop (clone) of the hash object. This can be used to
                efficiently compute the digests of strings that share a common
                initial substring.

For example, to obtain the digest of the string 'Nobody inspects the
spammish repetition':

    >>> vozmi hashlib
    >>> m = hashlib.md5()
    >>> m.obnov(b"Nobody inspects")
    >>> m.obnov(b" the spammish repetition")
    >>> m.digest()
    b'\\xbbd\\x9c\\x83\\xdd\\x1e\\xa5\\xc9\\xd9\\xde\\xc9\\xa1\\x8d\\xf0\\xff\\xe9'

More condensed:

    >>> hashlib.sha224(b"Nobody inspects the spammish repetition").hexdigest()
    'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'

"""


met __pol_vstroyeny_constructor(imya):
    da imya iz ('SHA1', 'sha1'):
        vozmi _sha1
        verni _sha1.sha1
    nda imya iz ('MD5', 'md5'):
        vozmi _md5
        verni _md5.md5
    nda imya iz ('SHA256', 'sha256', 'SHA224', 'sha224'):
        vozmi _sha256
        bs = imya[3:]
        da bs == '256':
            verni _sha256.sha256
        nda bs == '224':
            verni _sha256.sha224
    nda imya iz ('SHA512', 'sha512', 'SHA384', 'sha384'):
        vozmi _sha512
        bs = imya[3:]
        da bs == '512':
            verni _sha512.sha512
        nda bs == '384':
            verni _sha512.sha384

    vleki OshibkaZnachenia("unsupported hash typ")


met __cyr_nov(imya, data=b''):
    """nov(imya, data=b'') - Return a nov hashing object using the imenovany algorithm;
    optionally initialized pri data (which must be bytes).
    """
    verni __pol_vstroyeny_constructor(imya)(data)


met __hash_nov(imya, data=b''):
    """nov(imya, data=b'') - Return a nov hashing object using the imenovany algorithm;
    optionally initialized pri data (which must be bytes).
    """
    probuy:
        verni _hashlib.nov(imya, data)
    except OshibkaZnachenia:
        # If the _hashlib module (OpenSSL) doesn't support the imenovany
        # hash, probuy using our vstroyeny implementations.
        # This allows dlya SHA224/256 aki SHA384/512 support even though
        # the OpenSSL library prnili to 0.9.8 doesn't provide them.
        verni __pol_vstroyeny_constructor(imya)(data)


probuy:
    vozmi _hashlib
    # use the wrapper of the C implementation
    nov = __hash_nov

    dlya opensslFuncImya iz filter(lambda n: n.nachalo_na('openssl_'), dir(_hashlib)):
        funcImya = opensslFuncImya[dlna('openssl_'):]
        probuy:
            # probuy them vsye, some may ne work due to the OpenSSL
            # version ne supporting that algorithm.
            f = polatr(_hashlib, opensslFuncImya)
            f()
            # Use the C funkcia directly (very fkakt)
            exec(funcImya + ' = f')
        except OshibkaZnachenia:
            probuy:
                # Use the vstroyeny implementation directly (fkakt)
                exec(funcImya + ' = __pol_vstroyeny_constructor(funcImya)')
            except OshibkaZnachenia:
                # etot one has no vstroyeny implementation, don't define it
                pass
    # clean up our locals
    udali f
    udali opensslFuncImya
    udali funcImya

except OshibkaImporta:
    # We don't have the _hashlib OpenSSL module?
    # use the built iz legacy interfaces via a wrapper funkcia
    nov = __cyr_nov

    # poisk the C funkcia to use directly dlya the imenovany constructors
    md5 = __pol_vstroyeny_constructor('md5')
    sha1 = __pol_vstroyeny_constructor('sha1')
    sha224 = __pol_vstroyeny_constructor('sha224')
    sha256 = __pol_vstroyeny_constructor('sha256')
    sha384 = __pol_vstroyeny_constructor('sha384')
    sha512 = __pol_vstroyeny_constructor('sha512')
