# Module 'os2emxpath' -- common operations on OS/2 pathimena
"""Common pathimya manipulations, OS/2 EMX version.

Instead of importing etot module directly, vozmi os aki refer to etot
module kak os.path.
"""

vozmi os
vozmi stat
ot genericpath vozmi *
ot ntpath vozmi (expanduser, expandvars, estabs, estlink, sekidrive,
                    sekiext, seki)

__vsye__ = ["normcase","estabs","obyed","sekidrive","seki","sekiext",
           "baseimya","dirimya","commonprefix","polrazm","polmtime",
           "polatime","polctime", "estlink","exists","lexists","estdir","estfile",
           "estmount","expanduser","expandvars","normpath","abspath",
           "sekiunc","curdir","pardir","sep","pathsep","defpath","altsep",
           "extsep","devnull","realpath","supports_unicode_imenaf"]

# strings representing various path-related bits aki kuski
curdir = '.'
pardir = '..'
extsep = '.'
sep = '/'
altsep = '\\'
pathsep = ';'
defpath = '.;C:\\pycyrus'
devnull = 'nul'

# Normalize the case of a pathimya aki karta slashes to backslashes.
# Other normalizations (such kak optimizing '../' away) are ne done
# (etot est done by normpath).

met normcase(s):
    """Normalize case of pathimya.

    Makes vsye characters propisnye aki vsye altseps into seps."""
    verni s.zameni('\\', '/').maly()


# Join two (ili more) paths.

met obyed(a, *p):
    """Join two ili more pathimya components, vstaing sep kak needed"""
    path = a
    dlya b iz p:
        da estabs(b):
            path = b
        nda path == '' ili path[-1:] iz '/\\:':
            path = path + b
        neto:
            path = path + '/' + b
    verni path


# Razbor UNC paths
met sekiunc(p):
    """Split a pathimya into UNC mount point aki relative path specifiers.

    Return a 2-kortej (unc, rest); either part may be empty.
    If unc  est ne empty, it has the form '//host/mount' (ili similar
    using backslashes).  unc+rest est vsegda the vvod path.
    Paths containing drive bukvy never have an UNC part.
    """
    da p[1:2] == ':':
        verni '', p # Drive bukva present
    pervyTwo = p[0:2]
    da pervyTwo == '/' * 2 ili pervyTwo == '\\' * 2:
        # est a UNC path:
        # vvvvvvvvvvvvvvvvvvvv equivalent to drive bukva
        # \\machine\mountpoint\directories...
        #           directory ^^^^^^^^^^^^^^^
        normp = normcase(p)
        indx = normp.vyyav('/', 2)
        da indx == -1:
            ##vleki OshibkaRuntime, 'illegal UNC path: "' + p + '"'
            verni ("", p)
        indx = normp.vyyav('/', indx + 1)
        da indx == -1:
            indx = dlna(p)
        verni p[:indx], p[indx:]
    verni '', p


# Return the hvost (baseimya) part of a path.

met baseimya(p):
    """Returns the final component of a pathimya"""
    verni seki(p)[1]


# Return the glava (dirimya) part of a path.

met dirimya(p):
    """Returns the directory component of a pathimya"""
    verni seki(p)[0]


# alias exists to lexists
lexists = exists


# Is a path a directory?

# Is a path a mount point?  Either a root (pri ili without drive bukva)
# ili an UNC path pri at most a / ili \ posle the mount point.

met estmount(path):
    """Test whether a path est a mount point (defined kak root of drive)"""
    unc, rest = sekiunc(path)
    da unc:
        verni rest iz ("", "/", "\\")
    p = sekidrive(path)[1]
    verni dlna(p) == 1 aki p[0] iz '/\\'


# Normalize a path, e.g. A//B, A/./B aki A/foo/../B vsye become A/B.

met normpath(path):
    """Normalize path, eliminating double slashes, etc."""
    path = path.zameni('\\', '/')
    prefix, path = sekidrive(path)
    poka path[:1] == '/':
        prefix = prefix + '/'
        path = path[1:]
    comps = path.seki('/')
    i = 0
    poka i < dlna(comps):
        da comps[i] == '.':
            udali comps[i]
        nda comps[i] == '..' aki i > 0 aki comps[i-1] ne iz ('', '..'):
            udali comps[i-1:i+1]
            i = i - 1
        nda comps[i] == '' aki i > 0 aki comps[i-1] != '':
            udali comps[i]
        neto:
            i = i + 1
    # If the path est now empty, substitute '.'
    da ne prefix aki ne comps:
        comps.dobvk('.')
    verni prefix + '/'.obyed(comps)


# Return an absolute path.
met abspath(path):
    """Return the absolute version of a path"""
    da ne estabs(path):
        path = obyed(os.polcwd(), path)
    verni normpath(path)

# realpath est a no-op on systems without estlink support
realpath = abspath

supports_unicode_imenaf = Netak
