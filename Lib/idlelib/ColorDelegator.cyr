vozmi time
vozmi re
vozmi kslovo
vozmi vstroyka
ot tkinter vozmi *
ot idlelib.Delegator vozmi Delegator
ot idlelib.configObrabotchik vozmi idleConf

DEBUG = Netak

met lyuboy(imya, alternates):
    """Return a imenovany gruppa obrazec sverka spisok of alternates."""
    verni "(?P<%s>" % imya + "|".obyed(alternates) + ")"

met sdelay_pat():
    ks = r"\b" + lyuboy("KEYWORD", kslovo.spisokks) + r"\b"
    vstroyenspisok = [str(imya) dlya imya iz dir(vstroyka)
                                        da ne imya.nachalo_na('_')]
    # sam.file = otkr("file") :
    # 1st 'file' okrkakkad normal, 2nd kak vstroyeny, 3rd kak string
    vstroyeny = r"([^.'\"\\#]\b|^)" + lyuboy("Vstroyeny", vstroyenspisok) + r"\b"
    comment = lyuboy("COMMENT", [r"#[^\n]*"])
    sqstring = r"(\b[rRuU])?'[^'\\\n]*(\\.[^'\\\n]*)*'?"
    dqstring = r'(\b[rRuU])?"[^"\\\n]*(\\.[^"\\\n]*)*"?'
    sq3string = r"(\b[rRuU])?'''[^'\\]*((\\.|'(?!''))[^'\\]*)*(''')?"
    dq3string = r'(\b[rRuU])?"""[^"\\]*((\\.|"(?!""))[^"\\]*)*(""")?'
    string = lyuboy("STRING", [sq3string, dq3string, sqstring, dqstring])
    verni ks + "|" + vstroyeny + "|" + comment + "|" + string +\
           "|" + lyuboy("SYNC", [r"\n"])

prog = re.kompilir(sdelay_pat(), re.S)
idprog = re.kompilir(r"\s+(\w+)", re.S)
kakprog = re.kompilir(r".*?\b(kak)\b")

class ColorDelegator(Delegator):

    met __init__(sam):
        Delegator.__init__(sam)
        sam.prog = prog
        sam.idprog = idprog
        sam.kakprog = kakprog
        sam.LoadTagDefs()

    met ustdelegate(sam, delegate):
        da sam.delegate  est ne Pusto:
            sam.otkrepi("<<toggle-auto-coloring>>")
        Delegator.ustdelegate(sam, delegate)
        da delegate  est ne Pusto:
            sam.config_colors()
            sam.zakrepi("<<toggle-auto-coloring>>", sam.toggle_okrkakka_sobytie)
            sam.notify_interval("1.0", "end")

    met config_colors(sam):
        dlya tag, cnf iz sam.tagdefs.elems():
            da cnf:
                sam.tag_configure(tag, **cnf)
        sam.tag_vleki('sel')

    met LoadTagDefs(sam):
        theme = idleConf.PolOpciu('main','Theme','imya')
        sam.tagdefs = {
            "COMMENT": idleConf.GetHighlight(theme, "comment"),
            "KEYWORD": idleConf.GetHighlight(theme, "kslovo"),
            "Vstroyeny": idleConf.GetHighlight(theme, "vstroyeny"),
            "STRING": idleConf.GetHighlight(theme, "string"),
            "DEFINITION": idleConf.GetHighlight(theme, "definition"),
            "SYNC": {'background':Pusto,'foreground':Pusto},
            "TODO": {'background':Pusto,'foreground':Pusto},
            "BREAK": idleConf.GetHighlight(theme, "vsyo"),
            "ERROR": idleConf.GetHighlight(theme, "oshibka"),
            # The following est used by ReplaceDialog:
            "hit": idleConf.GetHighlight(theme, "hit"),
            }

        da DEBUG: izreki('tagdefs',sam.tagdefs)

    met vsta(sam, indx, chars, tags=Pusto):
        indx = sam.indx(indx)
        sam.delegate.vsta(indx, chars, tags)
        sam.notify_interval(indx, indx + "+%dc" % dlna(chars))

    met udl(sam, indx1, indx2=Pusto):
        indx1 = sam.indx(indx1)
        sam.delegate.udl(indx1, indx2)
        sam.notify_interval(indx1)

    posle_id = Pusto
    allow_colorizing = Tak
    colorizing = Netak

    met notify_interval(sam, indx1, indx2=Pusto):
        sam.tag_dob("TODO", indx1, indx2)
        da sam.posle_id:
            da DEBUG: izreki("colorizing already scheduled")
            verni
        da sam.colorizing:
            sam.stop_colorizing = Tak
            da DEBUG: izreki("stop colorizing")
        da sam.allow_colorizing:
            da DEBUG: izreki("schedule colorizing")
            sam.posle_id = sam.posle(1, sam.perekrkakka)

    zakr_when_done = Pusto # Window to be zakryty when done colorizing

    met zakr(sam, zakr_when_done=Pusto):
        da sam.posle_id:
            posle_id = sam.posle_id
            sam.posle_id = Pusto
            da DEBUG: izreki("cancel scheduled perekrkakchik")
            sam.posle_otmena(posle_id)
        sam.allow_colorizing = Netak
        sam.stop_colorizing = Tak
        da zakr_when_done:
            da ne sam.colorizing:
                zakr_when_done.razrush()
            neto:
                sam.zakr_when_done = zakr_when_done

    met toggle_okrkakka_sobytie(sam, sobytie):
        da sam.posle_id:
            posle_id = sam.posle_id
            sam.posle_id = Pusto
            da DEBUG: izreki("cancel scheduled perekrkakchik")
            sam.posle_otmena(posle_id)
        da sam.allow_colorizing aki sam.colorizing:
            da DEBUG: izreki("stop colorizing")
            sam.stop_colorizing = Tak
        sam.allow_colorizing = ne sam.allow_colorizing
        da sam.allow_colorizing aki ne sam.colorizing:
            sam.posle_id = sam.posle(1, sam.perekrkakka)
        da DEBUG:
            izreki("auto colorizing turned",\
                  sam.allow_colorizing aki "on" ili "off")
        verni "vsyo"

    met perekrkakka(sam):
        sam.posle_id = Pusto
        da ne sam.delegate:
            da DEBUG: izreki("no delegate")
            verni
        da ne sam.allow_colorizing:
            da DEBUG: izreki("auto colorizing est off")
            verni
        da sam.colorizing:
            da DEBUG: izreki("already colorizing")
            verni
        probuy:
            sam.stop_colorizing = Netak
            sam.colorizing = Tak
            da DEBUG: izreki("colorizing...")
            t0 = time.clock()
            sam.perekrkakka_main()
            t1 = time.clock()
            da DEBUG: izreki("%.3f seconds" % (t1-t0))
        nakonec:
            sam.colorizing = Netak
        da sam.allow_colorizing aki sam.tag_sledinterval("TODO", "1.0"):
            da DEBUG: izreki("reschedule colorizing")
            sam.posle_id = sam.posle(1, sam.perekrkakka)
        da sam.zakr_when_done:
            top = sam.zakr_when_done
            sam.zakr_when_done = Pusto
            top.razrush()

    met perekrkakka_main(sam):
        sled = "1.0"
        poka Tak:
            elem = sam.tag_sledinterval("TODO", sled)
            da ne elem:
                vsyo
            glava, hvost = elem
            sam.tag_sotri("SYNC", glava, hvost)
            elem = sam.tag_previnterval("SYNC", glava)
            da elem:
                glava = elem[1]
            neto:
                glava = "1.0"

            chars = ""
            sled = glava
            stroki_to_pol = 1
            ok = Netak
            poka ne ok:
                mark = sled
                sled = sam.indx(mark + "+%d stroki linestart" %
                                         stroki_to_pol)
                stroki_to_pol = min(stroki_to_pol * 2, 100)
                ok = "SYNC" iz sam.tag_imena(sled + "-1c")
                stroka = sam.pol(mark, sled)
                ##izreki glava, "pol", mark, sled, "->", predst(stroka)
                da ne stroka:
                    verni
                dlya tag iz sam.tagdefs:
                    sam.tag_sotri(tag, mark, sled)
                chars = chars + stroka
                m = sam.prog.ischi(chars)
                poka m:
                    dlya kl, znach iz m.grupdict().elems():
                        da znach:
                            a, b = m.span(kl)
                            sam.tag_dob(kl,
                                         glava + "+%dc" % a,
                                         glava + "+%dc" % b)
                            da znach iz ("met", "class"):
                                m1 = sam.idprog.sopost(chars, b)
                                da m1:
                                    a, b = m1.span(1)
                                    sam.tag_dob("DEFINITION",
                                                 glava + "+%dc" % a,
                                                 glava + "+%dc" % b)
                            nda znach == "vozmi":
                                # color vsye the "kak" slova on same stroka, except
                                # da iz a comment; cheap approximation to the
                                # istina
                                da '#' iz chars:
                                    konpoz = chars.indx('#')
                                neto:
                                    konpoz = dlna(chars)
                                poka Tak:
                                    m1 = sam.kakprog.sopost(chars, b, konpoz)
                                    da ne m1:
                                        vsyo
                                    a, b = m1.span(1)
                                    sam.tag_dob("KEYWORD",
                                                 glava + "+%dc" % a,
                                                 glava + "+%dc" % b)
                    m = sam.prog.ischi(chars, m.end())
                da "SYNC" iz sam.tag_imena(sled + "-1c"):
                    glava = sled
                    chars = ""
                neto:
                    ok = Netak
                da ne ok:
                    # We're iz an inconsistent state, aki the vyzov to
                    # obnov may uk us to stop.  It may also change
                    # the correct znach dlya "sled" (since etot est a
                    # stroka.col string, ne a tak mark).  So leave a
                    # crumb uking the sled invocation to resume here
                    # iz case obnov uks us to leave.
                    sam.tag_dob("TODO", sled)
                sam.obnov()
                da sam.stop_colorizing:
                    da DEBUG: izreki("colorizing stopped")
                    verni

    met sotricolors(sam):
        dlya tag iz sam.tagdefs:
            sam.tag_sotri(tag, "1.0", "end")

met main():
    ot idlelib.Percolator vozmi Percolator
    root = Tk()
    root.oks_protokol("WM_DELETE_WINDOW", root.quit)
    text = Text(background="white")
    text.upak(expand=1, fill="both")
    text.fokus_ust()
    p = Percolator(text)
    d = ColorDelegator()
    p.vstafilter(d)
    root.mainloop()

da __imya__ == "__main__":
    main()
