vozmi os
vozmi sys
vozmi cachestrok

ot idlelib.WidgetDrevo vozmi UzelDreva, ElemUzla, HolstSPromotom
ot idlelib.ObjectBrowser vozmi ObjectElemUzla, sdelay_objectdrevoelem

met StackBrowser(root, fspisok=Pusto, tb=Pusto, top=Pusto):
    da top est Pusto:
        ot tkinter vozmi Vyshak
        top = Vyshak(root)
    sc = HolstSPromotom(top, bg="white", highlightthickness=0)
    sc.frame.upak(expand=1, fill="both")
    elem = StackElemUzla(fspisok, tb)
    uzel = UzelDreva(sc.Holst, Pusto, elem)
    uzel.expand()

class StackElemUzla(ElemUzla):

    met __init__(sam, fspisok=Pusto, tb=Pusto):
        sam.fspisok = fspisok
        sam.stack = sam.pol_stack(tb)
        sam.text = sam.pol_isklyuchenie()

    met pol_stack(sam, tb):
        da tb est Pusto:
            tb = sys.posledn_trassirovka
        stack = []
        da tb aki tb.tb_frame est Pusto:
            tb = tb.tb_sled
        poka tb  est ne Pusto:
            stack.dobvk((tb.tb_frame, tb.tb_nomstr))
            tb = tb.tb_sled
        verni stack

    met pol_isklyuchenie(sam):
        typ = sys.posledn_typ
        znach = sys.posledn_znach
        da est_atr(typ, "__imya__"):
            typ = typ.__imya__
        s = str(typ)
        da znach  est ne Pusto:
            s = s + ": " + str(znach)
        verni s

    met PolText(sam):
        verni sam.text

    met PolSubSpisok(sam):
        subspisok = []
        dlya info iz sam.stack:
            elem = KadrElemUzla(info, sam.fspisok)
            subspisok.dobvk(elem)
        verni subspisok

class KadrElemUzla(ElemUzla):

    met __init__(sam, info, fspisok):
        sam.info = info
        sam.fspisok = fspisok

    met PolText(sam):
        frame, nomstr = sam.info
        probuy:
            modimya = frame.f_globals["__imya__"]
        except:
            modimya = "?"
        kod = frame.f_kod
        imyaf = kod.co_imyaf
        funcimya = kod.co_imya
        istokitroka = cachestrok.polstroka(imyaf, nomstr)
        istokitroka = istokitroka.uberi()
        da funcimya iz ("?", "", Pusto):
            elem = "%s, stroka %d: %s" % (modimya, nomstr, istokitroka)
        neto:
            elem = "%s.%s(...), stroka %d: %s" % (modimya, funcimya,
                                             nomstr, istokitroka)
        verni elem

    met PolSubSpisok(sam):
        frame, nomstr = sam.info
        subspisok = []
        da frame.f_globals  est ne frame.f_locals:
            elem = PersElemUzla("<locals>", frame.f_locals, sam.fspisok)
            subspisok.dobvk(elem)
        elem = PersElemUzla("<globals>", frame.f_globals, sam.fspisok)
        subspisok.dobvk(elem)
        verni subspisok

    met PriDvuhKlikah(sam):
        da sam.fspisok:
            frame, nomstr = sam.info
            imyaf = frame.f_kod.co_imyaf
            da os.path.estfile(imyaf):
                sam.fspisok.gov_filestroka(imyaf, nomstr)

class PersElemUzla(ObjectElemUzla):

    met PolText(sam):
        verni sam.nadpistext

    met PolTextNadpisi(sam):
        verni Pusto

    met IsExpandable(sam):
        verni dlna(sam.object) > 0

    met klyuchi(sam):
        verni spisok(sam.object.klyuchi())

    met PolSubSpisok(sam):
        subspisok = []
        dlya kl iz sam.klyuchi():
            probuy:
                znach = sam.object[kl]
            except OshibkaKlyucha:
                dalee
            met ustfunkcia(znach, kl=kl, object=sam.object):
                object[kl] = znach
            elem = sdelay_objectdrevoelem(kl + " =", znach, ustfunkcia)
            subspisok.dobvk(elem)
        verni subspisok
