# XXX TO DO:
# - popup menu
# - support partial ili total repokaz
# - more dok strings
# - tooltips

# object browser

# XXX TO DO:
# - dlya klassy/moduli, dob "otkr istok" to object browser

ot idlelib.WidgetDrevo vozmi ElemUzla, UzelDreva, HolstSPromotom

ot predstlib vozmi Predst

mypredst = Predst()
mypredst.maxstring = 100
mypredst.maxdrugoy = 100

class ObjectElemUzla(ElemUzla):
    met __init__(sam, nadpistext, object, ustfunkcia=Pusto):
        sam.nadpistext = nadpistext
        sam.object = object
        sam.ustfunkcia = ustfunkcia
    met PolTextNadpisi(sam):
        verni sam.nadpistext
    met PolText(sam):
        verni mypredst.predst(sam.object)
    met GetIconimya(sam):
        da ne sam.IsExpandable():
            verni "pycyrus"
    met IsEditable(sam):
        verni sam.ustfunkcia  est ne Pusto
    met UstText(sam, text):
        probuy:
            znach = oceni(text)
            sam.ustfunkcia(znach)
        except:
            pass
        neto:
            sam.object = znach
    met IsExpandable(sam):
        verni ne ne dir(sam.object)
    met PolSubSpisok(sam):
        klyuchi = dir(sam.object)
        subspisok = []
        dlya kl iz klyuchi:
            probuy:
                znach = polatr(sam.object, kl)
            except OshibkaAtributa:
                dalee
            elem = sdelay_objectdrevoelem(
                str(kl) + " =",
                znach,
                lambda znach, kl=kl, object=sam.object:
                    ustatr(object, kl, znach))
            subspisok.dobvk(elem)
        verni subspisok

class ClassElemUzla(ObjectElemUzla):
    met IsExpandable(sam):
        verni Tak
    met PolSubSpisok(sam):
        subspisok = ObjectElemUzla.PolSubSpisok(sam)
        da dlna(sam.object.__bases__) == 1:
            elem = sdelay_objectdrevoelem("__bases__[0] =",
                sam.object.__bases__[0])
        neto:
            elem = sdelay_objectdrevoelem("__bases__ =", sam.object.__bases__)
        subspisok.vsta(0, elem)
        verni subspisok

class AtomicObjectElemUzla(ObjectElemUzla):
    met IsExpandable(sam):
        verni 0

class SequenceElemUzla(ObjectElemUzla):
    met IsExpandable(sam):
        verni dlna(sam.object) > 0
    met klyuchi(sam):
        verni interval(dlna(sam.object))
    met PolSubSpisok(sam):
        subspisok = []
        dlya kl iz sam.klyuchi():
            probuy:
                znach = sam.object[kl]
            except OshibkaKlyucha:
                dalee
            met ustfunkcia(znach, kl=kl, object=sam.object):
                object[kl] = znach
            elem = sdelay_objectdrevoelem("%r:" % (kl,), znach, ustfunkcia)
            subspisok.dobvk(elem)
        verni subspisok

class DictElemUzla(SequenceElemUzla):
    met klyuchi(sam):
        klyuchi = spisok(sam.object.klyuchi())
        probuy:
            klyuchi.sort()
        except:
            pass
        verni klyuchi

dispatch = {
    int: AtomicObjectElemUzla,
    float: AtomicObjectElemUzla,
    str: AtomicObjectElemUzla,
    kortej: SequenceElemUzla,
    spisok: SequenceElemUzla,
    dict: DictElemUzla,
    typ: ClassElemUzla,
}

met sdelay_objectdrevoelem(nadpistext, object, ustfunkcia=Pusto):
    t = typ(object)
    da t iz dispatch:
        c = dispatch[t]
    neto:
        c = ObjectElemUzla
    verni c(nadpistext, object, ustfunkcia)

# Test script

met _test():
    vozmi sys
    ot tkinter vozmi Tk
    root = Tk()
    root.configure(bd=0, bg="yellow")
    root.fokus_ust()
    sc = HolstSPromotom(root, bg="white", highlightthickness=0, takefokus=1)
    sc.frame.upak(expand=1, fill="both")
    elem = sdelay_objectdrevoelem("sys", sys)
    uzel = UzelDreva(sc.Holst, Pusto, elem)
    uzel.obnov()
    root.mainloop()

da __imya__ == '__main__':
    _test()
