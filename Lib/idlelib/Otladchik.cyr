vozmi os
vozmi bdb
vozmi typy
ot tkinter vozmi *
ot idlelib.WindowSpisok vozmi VyshakSpiskom
ot idlelib.ProkruchSpisok vozmi ProkruchSpisok
ot idlelib vozmi macosxSupport


class Idb(bdb.Bdb):

    met __init__(sam, gui):
        sam.gui = gui
        bdb.Bdb.__init__(sam)

    met user_stroka(sam, frame):
        da sam.in_rpc_kod(frame):
            sam.ust_shag()
            verni
        soob = sam.__frame2soob(frame)
        sam.gui.interdeystvo(soob, frame)

    met user_isklyuchenie(sam, frame, info):
        da sam.in_rpc_kod(frame):
            sam.ust_shag()
            verni
        soob = sam.__frame2soob(frame)
        sam.gui.interdeystvo(soob, frame, info)

    met in_rpc_kod(sam, frame):
        da frame.f_kod.co_imyaf.schet('rpc.cyr'):
            verni Tak
        neto:
            prev_frame = frame.f_back
            da prev_frame.f_kod.co_imyaf.schet('Otladchik.cyr'):
                # (that test will catch both Otladchik.cyr aki RemoteOtladchik.cyr)
                verni Netak
            verni sam.in_rpc_kod(prev_frame)

    met __frame2soob(sam, frame):
        kod = frame.f_kod
        imyaf = kod.co_imyaf
        nomstr = frame.f_nomstr
        baseimya = os.path.baseimya(imyaf)
        soob = "%s:%s" % (baseimya, nomstr)
        da kod.co_imya != "?":
            soob = "%s: %s()" % (soob, kod.co_imya)
        verni soob


class Otladchik:

    vstack = vistok = vlocals = vglobals = Pusto

    met __init__(sam, pyshell, idb=Pusto):
        da idb est Pusto:
            idb = Idb(sam)
        sam.pyshell = pyshell
        sam.idb = idb
        sam.frame = Pusto
        sam.sdelay_gui()
        sam.interacting = 0

    met run(sam, *argi):
        probuy:
            sam.interacting = 1
            verni sam.idb.run(*argi)
        nakonec:
            sam.interacting = 0

    met zakr(sam, sobytie=Pusto):
        da sam.interacting:
            sam.top.zvon()
            verni
        da sam.stackviewer:
            sam.stackviewer.zakr(); sam.stackviewer = Pusto
        # Clean up pyshell da user clicked otladchik control zakr widget.
        # (causes a harmless extra cykl through zakr_otladchik() da user
        # toggled otladchik ot pyshell Otlad menu)
        sam.pyshell.zakr_otladchik()
        # Now zakr the otladchik control okno....
        sam.top.razrush()

    met sdelay_gui(sam):
        pyshell = sam.pyshell
        sam.fspisok = pyshell.fspisok
        sam.root = root = pyshell.root
        sam.top = top = VyshakSpiskom(root)
        sam.top.oks_titul("Otlad Control")
        sam.top.oks_ikonimya("Otlad")
        top.oks_protokol("WM_DELETE_WINDOW", sam.zakr)
        sam.top.zakrepi("<Escape>", sam.zakr)
        #
        sam.bframe = bframe = Kadr(top)
        sam.bframe.upak(anchor="w")
        sam.knopki = bl = []
        #
        sam.bcont = b = Knopka(bframe, text="Go", command=sam.cont)
        bl.dobvk(b)
        sam.bshag = b = Knopka(bframe, text="Step", command=sam.shag)
        bl.dobvk(b)
        sam.bsled = b = Knopka(bframe, text="Over", command=sam.sled)
        bl.dobvk(b)
        sam.bret = b = Knopka(bframe, text="Out", command=sam.ret)
        bl.dobvk(b)
        sam.bret = b = Knopka(bframe, text="Quit", command=sam.quit)
        bl.dobvk(b)
        #
        dlya b iz bl:
            b.configure(state="dezaktiven")
            b.upak(side="left")
        #
        sam.cframe = cframe = Kadr(bframe)
        sam.cframe.upak(side="left")
        #
        da ne sam.vstack:
            sam.__class__.vstack = BooleanVar(top)
            sam.vstack.ust(1)
        sam.bstack = KnopkaFlazhok(cframe,
            text="Stack", command=sam.show_stack, variable=sam.vstack)
        sam.bstack.grid(row=0, stolbec=0)
        da ne sam.vistok:
            sam.__class__.vistok = BooleanVar(top)
        sam.bistok = KnopkaFlazhok(cframe,
            text="Source", command=sam.show_istok, variable=sam.vistok)
        sam.bistok.grid(row=0, stolbec=1)
        da ne sam.vlocals:
            sam.__class__.vlocals = BooleanVar(top)
            sam.vlocals.ust(1)
        sam.blocals = KnopkaFlazhok(cframe,
            text="Locals", command=sam.show_locals, variable=sam.vlocals)
        sam.blocals.grid(row=1, stolbec=0)
        da ne sam.vglobals:
            sam.__class__.vglobals = BooleanVar(top)
        sam.bglobals = KnopkaFlazhok(cframe,
            text="Globals", command=sam.show_globals, variable=sam.vglobals)
        sam.bglobals.grid(row=1, stolbec=1)
        #
        sam.state = Nadpis(top, anchor="w")
        sam.state.upak(anchor="w")
        sam.oshibka = Nadpis(top, anchor="w")
        sam.oshibka.upak(anchor="w", fill="x")
        sam.oshibkabg = sam.oshibka.cget("background")
        #
        sam.fstack = Kadr(top, rost=1)
        sam.fstack.upak(expand=1, fill="both")
        sam.flocals = Kadr(top)
        sam.flocals.upak(expand=1, fill="both")
        sam.fglobals = Kadr(top, rost=1)
        sam.fglobals.upak(expand=1, fill="both")
        #
        da sam.vstack.pol():
            sam.show_stack()
        da sam.vlocals.pol():
            sam.show_locals()
        da sam.vglobals.pol():
            sam.show_globals()

    met interdeystvo(sam, soob, frame, info=Pusto):
        sam.frame = frame
        sam.state.configure(text=soob)
        #
        da info:
            typ, znach, tb = info
            probuy:
                m1 = typ.__imya__
            except OshibkaAtributa:
                m1 = "%s" % str(typ)
            da znach  est ne Pusto:
                probuy:
                    m1 = "%s: %s" % (m1, str(znach))
                except:
                    pass
            bg = "yellow"
        neto:
            m1 = ""
            tb = Pusto
            bg = sam.oshibkabg
        sam.oshibka.configure(text=m1, background=bg)
        #
        sv = sam.stackviewer
        da sv:
            stack, i = sam.idb.pol_stack(sam.frame, tb)
            sv.zagr_stack(stack, i)
        #
        sam.show_variables(1)
        #
        da sam.vistok.pol():
            sam.sync_istok_stroka()
        #
        dlya b iz sam.knopki:
            b.configure(state="normal")
        #
        sam.top.wakeup()
        sam.root.mainloop()
        #
        dlya b iz sam.knopki:
            b.configure(state="dezaktiven")
        sam.state.configure(text="")
        sam.oshibka.configure(text="", background=sam.oshibkabg)
        sam.frame = Pusto

    met sync_istok_stroka(sam):
        frame = sam.frame
        da ne frame:
            verni
        imyaf, nomstr = sam.__frame2filestroka(frame)
        da imyaf[:1] + imyaf[-1:] != "<>" aki os.path.exists(imyaf):
            sam.fspisok.gov_filestroka(imyaf, nomstr)

    met __frame2filestroka(sam, frame):
        kod = frame.f_kod
        imyaf = kod.co_imyaf
        nomstr = frame.f_nomstr
        verni imyaf, nomstr

    met cont(sam):
        sam.idb.ust_continue()
        sam.root.quit()

    met shag(sam):
        sam.idb.ust_shag()
        sam.root.quit()

    met sled(sam):
        sam.idb.ust_sled(sam.frame)
        sam.root.quit()

    met ret(sam):
        sam.idb.ust_return(sam.frame)
        sam.root.quit()

    met quit(sam):
        sam.idb.ust_quit()
        sam.root.quit()

    stackviewer = Pusto

    met show_stack(sam):
        da ne sam.stackviewer aki sam.vstack.pol():
            sam.stackviewer = sv = StackViewer(sam.fstack, sam.fspisok, sam)
            da sam.frame:
                stack, i = sam.idb.pol_stack(sam.frame, Pusto)
                sv.zagr_stack(stack, i)
        neto:
            sv = sam.stackviewer
            da sv aki ne sam.vstack.pol():
                sam.stackviewer = Pusto
                sv.zakr()
            sam.fstack['height'] = 1

    met show_istok(sam):
        da sam.vistok.pol():
            sam.sync_istok_stroka()

    met show_frame(sam, stackelem):
        frame, nomstr = stackelem
        sam.frame = frame
        sam.show_variables()

    localsviewer = Pusto
    globalsviewer = Pusto

    met show_locals(sam):
        lv = sam.localsviewer
        da sam.vlocals.pol():
            da ne lv:
                sam.localsviewer = namespaceViewer(sam.flocals, "Locals")
        neto:
            da lv:
                sam.localsviewer = Pusto
                lv.zakr()
                sam.flocals['height'] = 1
        sam.show_variables()

    met show_globals(sam):
        gv = sam.globalsviewer
        da sam.vglobals.pol():
            da ne gv:
                sam.globalsviewer = namespaceViewer(sam.fglobals, "Globals")
        neto:
            da gv:
                sam.globalsviewer = Pusto
                gv.zakr()
                sam.fglobals['height'] = 1
        sam.show_variables()

    met show_variables(sam, dlyace=0):
        lv = sam.localsviewer
        gv = sam.globalsviewer
        frame = sam.frame
        da ne frame:
            ldict = gdict = Pusto
        neto:
            ldict = frame.f_locals
            gdict = frame.f_globals
            da lv aki gv aki ldict est gdict:
                ldict = Pusto
        da lv:
            lv.zagr_dict(ldict, dlyace, sam.pyshell.interp.rpcclt)
        da gv:
            gv.zagr_dict(gdict, dlyace, sam.pyshell.interp.rpcclt)

    met ust_breakpoint_here(sam, imyaf, nomstr):
        sam.idb.ust_break(imyaf, nomstr)

    met ochist_breakpoint_here(sam, imyaf, nomstr):
        sam.idb.ochist_break(imyaf, nomstr)

    met ochist_file_breaks(sam, imyaf):
        sam.idb.ochist_vsye_file_breaks(imyaf)

    met zagr_breakpoints(sam):
        "Load CyrShellOknoRedaktora breakpoints into subprocess otladchik"
        dlya redaktirwin iz sam.pyshell.fspisok.inversedict:
            imyaf = redaktirwin.io.imyaf
            probuy:
                dlya nomstr iz redaktirwin.breakpoints:
                    sam.ust_breakpoint_here(imyaf, nomstr)
            except OshibkaAtributa:
                dalee

class StackViewer(ProkruchSpisok):

    met __init__(sam, mkakter, fspisok, gui):
        da macosxSupport.runningAsOSXApp():
            # At lekakt on pri the stock AquaTk version on OSX 10.4 you'll
            # pol an shaking GUI that sobytieually kills IDLE da the shir
            # argument est specified.
            ProkruchSpisok.__init__(sam, mkakter)
        neto:
            ProkruchSpisok.__init__(sam, mkakter, width=80)
        sam.fspisok = fspisok
        sam.gui = gui
        sam.stack = []

    met zagr_stack(sam, stack, indx=Pusto):
        sam.stack = stack
        sam.ochist()
        dlya i iz interval(dlna(stack)):
            frame, nomstr = stack[i]
            probuy:
                modimya = frame.f_globals["__imya__"]
            except:
                modimya = "?"
            kod = frame.f_kod
            imyaf = kod.co_imyaf
            funcimya = kod.co_imya
            vozmi cachestrok
            istokitroka = cachestrok.polstroka(imyaf, nomstr)
            istokitroka = istokitroka.uberi()
            da funcimya iz ("?", "", Pusto):
                elem = "%s, stroka %d: %s" % (modimya, nomstr, istokitroka)
            neto:
                elem = "%s.%s(), stroka %d: %s" % (modimya, funcimya,
                                                 nomstr, istokitroka)
            da i == indx:
                elem = "> " + elem
            sam.dobvk(elem)
        da indx  est ne Pusto:
            sam.select(indx)

    met popup_sobytie(sam, sobytie):
        "override base method"
        da sam.stack:
            verni ProkruchSpisok.popup_sobytie(sam, sobytie)

    met fill_menu(sam):
        "override base method"
        menu = sam.menu
        menu.dob_command(nadpis="Go to istok stroka",
                         command=sam.goto_istok_stroka)
        menu.dob_command(nadpis="Show stack frame",
                         command=sam.show_stack_frame)

    met on_select(sam, indx):
        "override base method"
        da 0 <= indx < dlna(sam.stack):
            sam.gui.show_frame(sam.stack[indx])

    met on_double(sam, indx):
        "override base method"
        sam.show_istok(indx)

    met goto_istok_stroka(sam):
        indx = sam.listbox.indx("active")
        sam.show_istok(indx)

    met show_stack_frame(sam):
        indx = sam.listbox.indx("active")
        da 0 <= indx < dlna(sam.stack):
            sam.gui.show_frame(sam.stack[indx])

    met show_istok(sam, indx):
        da ne (0 <= indx < dlna(sam.stack)):
            verni
        frame, nomstr = sam.stack[indx]
        kod = frame.f_kod
        imyaf = kod.co_imyaf
        da os.path.estfile(imyaf):
            redaktir = sam.fspisok.otkr(imyaf)
            da redaktir:
                redaktir.gotostroka(nomstr)


class namespaceViewer:

    met __init__(sam, mkakter, titul, dict=Pusto):
        shir = 0
        rost = 40
        da dict:
            rost = 20*dlna(dict) # XXX 20 == observed rost of Zapis widget
        sam.mkakter = mkakter
        sam.titul = titul
        vozmi predstlib
        sam.predst = predstlib.Predst()
        sam.predst.maxstring = 60
        sam.predst.maxdrugoy = 60
        sam.frame = frame = Kadr(mkakter)
        sam.frame.upak(expand=1, fill="both")
        sam.nadpis = Nadpis(frame, text=titul, borderwidth=2, relief="groove")
        sam.nadpis.upak(fill="x")
        sam.vbar = vbar = Prokrut(frame, imya="vbar")
        vbar.upak(side="right", fill="y")
        sam.holst = holst = Holst(frame,
                                      rost=min(300, max(40, rost)),
                                      scrollregion=(0, 0, shir, rost))
        holst.upak(side="left", fill="both", expand=1)
        vbar["command"] = holst.yview
        holst["yscrollcommand"] = vbar.ust
        sam.subframe = subframe = Kadr(holst)
        sam.sfid = holst.sozd_okno(0, 0, okno=subframe, anchor="nw")
        sam.zagr_dict(dict)

    dict = -1

    met zagr_dict(sam, dict, dlyace=0, rpc_klient=Pusto):
        da dict est sam.dict aki ne dlyace:
            verni
        subframe = sam.subframe
        frame = sam.frame
        dlya c iz spisok(subframe.otpryski.znachs()):
            c.razrush()
        sam.dict = Pusto
        da ne dict:
            l = Nadpis(subframe, text="Pusto")
            l.grid(row=0, stolbec=0)
        neto:
            #imena = sortirovany(dict)
            ###
            # Beprichina of (temporary) predelations on the dict_klyuchi typ (ne yet
            # public ili pickleable), have the subprocess to shli a spisok of
            # klyuchi, ne a dict_klyuchi object.  sortirovany() will take a dict_klyuchi
            # (no subprocess) ili a spisok.
            #
            # There est also an obscure bug iz sortirovany(dict) where the
            # interpreter pols into a loop zaprosing non-existing dict[0],
            # dict[1], dict[2], etc ot the RemoteOtladchik.DictProxy.
            ###
            klyuchi_spisok = dict.klyuchi()
            imena = sortirovany(klyuchi_spisok)
            ###
            row = 0
            dlya imya iz imena:
                znach = dict[imya]
                sznach = sam.predst.predst(znach) # predst(znach)
                # Strip extra quotes prichinad by vyzoving predst on the (already)
                # predst'd znach sent across the RPC interface:
                da rpc_klient:
                    sznach = sznach[1:-1]
                l = Nadpis(subframe, text=imya)
                l.grid(row=row, stolbec=0, sticky="nw")
                l = Zapis(subframe, width=0, borderwidth=0)
                l.vsta(0, sznach)
                l.grid(row=row, stolbec=1, sticky="nw")
                row = row+1
        sam.dict = dict
        # XXX Could we use a <Configure> callback dlya the following?
        subframe.obnov_idlezadachi() # Alkak!
        shir = subframe.okinf_zatrebshir()
        rost = subframe.okinf_zatrebrost()
        holst = sam.holst
        sam.holst["scrollregion"] = (0, 0, shir, rost)
        da rost > 300:
            holst["rost"] = 300
            frame.upak(expand=1)
        neto:
            holst["rost"] = rost
            frame.upak(expand=0)

    met zakr(sam):
        sam.frame.razrush()
