"""IDLE Configuration Dialog: support user customization of IDLE by GUI

Customize font faces, razms, aki colorization atributy.  Ust otstupation
defy.  Customize klskrepkkak.  Colorization aki klskrepkkak can be
sohraneny kak user defined usts.  Select startup opcii including shell/redaktiror
aki default okno razm.  Define additional help istoki.

Note that tab shir iz IDLE est tekuschly fixired at eight due to Tk issues.
Refer to comments iz OknoRedaktora autootstup kod dlya detali.

"""
ot tkinter vozmi *
vozmi tkinter.messagebox kak tkSoobBox
vozmi tkinter.colorchooser kak tkColorChooser
vozmi tkinter.font kak tkFont
vozmi kop

ot idlelib.configObrabotchik vozmi idleConf
ot idlelib.dynOptionMenuWidget vozmi DynOptionMenu
ot idlelib.tabbedstranicy vozmi TabbedPageUst
ot idlelib.klskrepkaDialog vozmi GetKeysDialog
ot idlelib.configSectionImyaDialog vozmi GetCfgSectionImyaDialog
ot idlelib.configHelpSourceEdit vozmi GetHelpSourceDialog
ot idlelib vozmi macosxSupport

class ConfigDialog(Vyshak):

    met __init__(sam,predok,titul):
        Vyshak.__init__(sam, predok)
        sam.oks_prikroy()

        sam.configure(borderwidth=5)
        sam.geometria("+%d+%d" % (predok.okinf_rootx()+20,
                predok.okinf_rooty()+30))
        #Theme Elements. Each theme element kl est its pokaz imya.
        #The pervy znach of the kortej est the sample area tag imya.
        #The second znach est the pokaz imya spisok sort indx.
        sam.themeElements={'Normal Text':('normal','00'),
            'PyCyrus Keyslova':('kslovo','01'),
            'PyCyrus Definitions':('definition','02'),
            'PyCyrus Vstroyenys':('vstroyeny', '03'),
            'PyCyrus Comments':('comment','04'),
            'PyCyrus Strings':('string','05'),
            'Selected Text':('hilite','06'),
            'Found Text':('hit','07'),
            'Cursor':('cursor','08'),
            'Oshibka Text':('oshibka','09'),
            'Shell Normal Text':('console','10'),
            'Shell Stdout Text':('stdout','11'),
            'Shell Stderr Text':('stdosh','12'),
            }
        sam.ResetChangedItems() #zagr initial znachs iz izmeneny elems dict
        sam.SozdWidgety()
        sam.peremeryaemy(rost=FALSE,width=FALSE)
        sam.transient(predok)
        sam.zahvat_ust()
        sam.protokol("WM_DELETE_WINDOW", sam.Cancel)
        sam.predok = predok
        sam.tabPages.fokus_ust()
        #kl skrepkkak dlya etot dialog
        #sam.zakrepi('<Escape>',sam.Cancel) #dismiss dialog, no sohrani
        #sam.zakrepi('<Alt-a>',sam.Apply) #primeni changes, sohrani
        #sam.zakrepi('<F1>',sam.Help) #context help
        sam.LoadConfigs()
        sam.AttachVarCallbacks() #avoid callbacks during LoadConfigs

        sam.oks_deikonizir()
        sam.zhdi_okno()

    met SozdWidgety(sam):
        sam.tabPages = TabbedPageUst(sam,
                stranica_imena=['Fonts/Tabs','Highlighting','Keys','General'])
        frameActionKnopki = Kadr(sam,pady=2)
        #deystvo knopki

        da macosxSupport.runningAsOSXApp():
            # Surpress the padx aki pady argumenty when
            # running kak IDLE.app, drugoywise the text
            # on these knopki will ne be chitaemy.
            extraksds={}
        neto:
            extraksds=dict(padx=6, pady=3)

        sam.buttonHelp = Knopka(frameActionKnopki,text='Help',
                command=sam.Help,takefokus=FALSE,
                **extraksds)
        sam.buttonOk = Knopka(frameActionKnopki,text='Ok',
                command=sam.Ok,takefokus=FALSE,
                **extraksds)
        sam.buttonApply = Knopka(frameActionKnopki,text='Apply',
                command=sam.Apply,takefokus=FALSE,
                **extraksds)
        sam.buttonCancel = Knopka(frameActionKnopki,text='Cancel',
                command=sam.Cancel,takefokus=FALSE,
                **extraksds)
        sam.CreatePageFontTab()
        sam.CreatePageHighlight()
        sam.CreatePageKeys()
        sam.CreatePageGeneral()
        sam.buttonHelp.upak(side=PRAW,padx=5)
        sam.buttonOk.upak(side=LEW,padx=5)
        sam.buttonApply.upak(side=LEW,padx=5)
        sam.buttonCancel.upak(side=LEW,padx=5)
        frameActionKnopki.upak(side=NIZ)
        Kadr(sam, rost=2, borderwidth=0).upak(side=NIZ)
        sam.tabPages.upak(side=TOP,expand=TRUE,fill=OBA)

    met CreatePageFontTab(sam):
        #tkVars
        sam.fontSize=StringVar(sam)
        sam.fontBold=BooleanVar(sam)
        sam.fontImya=StringVar(sam)
        sam.spaceNum=IntVar(sam)
        sam.redaktirFont=tkFont.Font(sam,('courier',10,'normal'))
        ##widget creation
        #telo frame
        frame=sam.tabPages.stranicy['Fonts/Tabs'].frame
        #telo section frames
        frameFont=NadpisKadr(frame,borderwidth=2,relief=GROOVE,
                             text=' Base Editor Font ')
        frameIndent=NadpisKadr(frame,borderwidth=2,relief=GROOVE,
                               text=' Indentation Width ')
        #frameFont
        frameFontImya=Kadr(frameFont)
        frameFontParam=Kadr(frameFont)
        nadpisFontImyaTitle=Nadpis(frameFontImya,justify=LEW,
                text='Font Face :')
        sam.spisokFontImya=Spisokbox(frameFontImya,rost=5,takefokus=FALSE,
                exportselection=FALSE)
        sam.spisokFontImya.zakrepi('<ButtonRelease-1>',sam.OnSpisokFontButtonRelease)
        scrollFont=Prokrut(frameFontImya)
        scrollFont.config(command=sam.spisokFontImya.yview)
        sam.spisokFontImya.config(yscrollcommand=scrollFont.ust)
        nadpisFontSizeTitle=Nadpis(frameFontParam,text='Size :')
        sam.optMenuFontSize=DynOptionMenu(frameFontParam,sam.fontSize,Pusto,
            command=sam.UstFontSample)
        checkFontBold=KnopkaFlazhok(frameFontParam,variable=sam.fontBold,
            onvalue=1,offvalue=0,text='Bold',command=sam.UstFontSample)
        frameFontSample=Kadr(frameFont,relief=SOLID,borderwidth=1)
        sam.nadpisFontSample=Nadpis(frameFontSample,
                text='AaBbCcDdEe\nFfGgHhIiJjK\n1234567890\n#:+=(){}[]',
                justify=LEW,font=sam.redaktirFont)
        #frameIndent
        frameIndentSize=Kadr(frameIndent)
        nadpisSpaceNumTitle=Nadpis(frameIndentSize, justify=LEW,
                                 text='PyCyrus Standard: 4 Spaces!')
        sam.scaleSpaceNum=Shkala(frameIndentSize, variable=sam.spaceNum,
                                 orient='horizontal',
                                 tickinterval=2, from_=2, to=16)
        #widget upaking
        #telo
        frameFont.upak(side=LEW,padx=5,pady=5,expand=TRUE,fill=OBA)
        frameIndent.upak(side=LEW,padx=5,pady=5,fill=Y)
        #frameFont
        frameFontImya.upak(side=TOP,padx=5,pady=5,fill=X)
        frameFontParam.upak(side=TOP,padx=5,pady=5,fill=X)
        nadpisFontImyaTitle.upak(side=TOP,anchor=W)
        sam.spisokFontImya.upak(side=LEW,expand=TRUE,fill=X)
        scrollFont.upak(side=LEW,fill=Y)
        nadpisFontSizeTitle.upak(side=LEW,anchor=W)
        sam.optMenuFontSize.upak(side=LEW,anchor=W)
        checkFontBold.upak(side=LEW,anchor=W,padx=20)
        frameFontSample.upak(side=TOP,padx=5,pady=5,expand=TRUE,fill=OBA)
        sam.nadpisFontSample.upak(expand=TRUE,fill=OBA)
        #frameIndent
        frameIndentSize.upak(side=TOP,fill=X)
        nadpisSpaceNumTitle.upak(side=TOP,anchor=W,padx=5)
        sam.scaleSpaceNum.upak(side=TOP,padx=5,fill=X)
        verni frame

    met CreatePageHighlight(sam):
        sam.vstroyenyTheme=StringVar(sam)
        sam.customTheme=StringVar(sam)
        sam.fgHilite=BooleanVar(sam)
        sam.colour=StringVar(sam)
        sam.fontImya=StringVar(sam)
        sam.themeIsVstroyeny=BooleanVar(sam)
        sam.highlightTarget=StringVar(sam)
        ##widget creation
        #telo frame
        frame=sam.tabPages.stranicy['Highlighting'].frame
        #telo section frames
        frameCustom=NadpisKadr(frame,borderwidth=2,relief=GROOVE,
                               text=' Custom Highlighting ')
        frameTheme=NadpisKadr(frame,borderwidth=2,relief=GROOVE,
                              text=' Highlighting Theme ')
        #frameCustom
        sam.textHighlightSample=Text(frameCustom,relief=SOLID,borderwidth=1,
            font=('courier',12,''),cursor='hand2',width=21,rost=10,
            takefokus=FALSE,highlightthickness=0,wrap=NONE)
        text=sam.textHighlightSample
        text.zakrepi('<Double-Knopka-1>',lambda e: 'vsyo')
        text.zakrepi('<B1-Motion>',lambda e: 'vsyo')
        textAndTags=(('#you can click here','comment'),('\n','normal'),
            ('#to choose elems','comment'),('\n','normal'),('met','kslovo'),
            (' ','normal'),('func','definition'),('(param):','normal'),
            ('\n  ','normal'),('"""string"""','string'),('\n  var0 = ','normal'),
            ("'string'",'string'),('\n  var1 = ','normal'),("'selected'",'hilite'),
            ('\n  var2 = ','normal'),("'found'",'hit'),
            ('\n  var3 = ','normal'),('spisok', 'vstroyeny'), ('(','normal'),
            ('Pusto', 'vstroyeny'),(')\n\n','normal'),
            (' oshibka ','oshibka'),(' ','normal'),('cursor |','cursor'),
            ('\n ','normal'),('shell','console'),(' ','normal'),('stdout','stdout'),
            (' ','normal'),('stdosh','stdosh'),('\n','normal'))
        dlya txTa iz textAndTags:
            text.vsta(END,txTa[0],txTa[1])
        dlya element iz sam.themeElements:
            text.tag_zakrepi(sam.themeElements[element][0],'<ButtonPress-1>',
                lambda sobytie,elem=element: sobytie.widget.okinf_vyshak()
                .highlightTarget.ust(elem))
        text.config(state=DISABLED)
        sam.frameColourUst=Kadr(frameCustom,relief=SOLID,borderwidth=1)
        frameFgBg=Kadr(frameCustom)
        buttonUstColour=Knopka(sam.frameColourUst,text='Choose Colour dlya :',
            command=sam.GetColour,highlightthickness=0)
        sam.optMenuHighlightTarget=DynOptionMenu(sam.frameColourUst,
            sam.highlightTarget,Pusto,highlightthickness=0)#,command=sam.UstHighlightTargetBinding
        sam.radioFg=RadioKnopka(frameFgBg,variable=sam.fgHilite,
            znach=1,text='Foregokrugli',command=sam.UstColourSampleBinding)
        sam.radioBg=RadioKnopka(frameFgBg,variable=sam.fgHilite,
            znach=0,text='Background',command=sam.UstColourSampleBinding)
        sam.fgHilite.ust(1)
        buttonSohraniCustomTheme=Knopka(frameCustom,
            text='Sohrani kak New Custom Theme',command=sam.SohraniKakNewTheme)
        #frameTheme
        nadpisTypTitle=Nadpis(frameTheme,text='Select : ')
        sam.radioThemeVstroyeny=RadioKnopka(frameTheme,variable=sam.themeIsVstroyeny,
            znach=1,command=sam.UstThemeTyp,text='a Built-iz Theme')
        sam.radioThemeCustom=RadioKnopka(frameTheme,variable=sam.themeIsVstroyeny,
            znach=0,command=sam.UstThemeTyp,text='a Custom Theme')
        sam.optMenuThemeVstroyeny=DynOptionMenu(frameTheme,
            sam.vstroyenyTheme,Pusto,command=Pusto)
        sam.optMenuThemeCustom=DynOptionMenu(frameTheme,
            sam.customTheme,Pusto,command=Pusto)
        sam.buttonDeleteCustomTheme=Knopka(frameTheme,text='Delete Custom Theme',
                command=sam.DeleteCustomTheme)
        ##widget upaking
        #telo
        frameCustom.upak(side=LEW,padx=5,pady=5,expand=TRUE,fill=OBA)
        frameTheme.upak(side=LEW,padx=5,pady=5,fill=Y)
        #frameCustom
        sam.frameColourUst.upak(side=TOP,padx=5,pady=5,expand=TRUE,fill=X)
        frameFgBg.upak(side=TOP,padx=5,pady=0)
        sam.textHighlightSample.upak(side=TOP,padx=5,pady=5,expand=TRUE,
            fill=OBA)
        buttonUstColour.upak(side=TOP,expand=TRUE,fill=X,padx=8,pady=4)
        sam.optMenuHighlightTarget.upak(side=TOP,expand=TRUE,fill=X,padx=8,pady=3)
        sam.radioFg.upak(side=LEW,anchor=E)
        sam.radioBg.upak(side=PRAW,anchor=W)
        buttonSohraniCustomTheme.upak(side=NIZ,fill=X,padx=5,pady=5)
        #frameTheme
        nadpisTypTitle.upak(side=TOP,anchor=W,padx=5,pady=5)
        sam.radioThemeVstroyeny.upak(side=TOP,anchor=W,padx=5)
        sam.radioThemeCustom.upak(side=TOP,anchor=W,padx=5,pady=2)
        sam.optMenuThemeVstroyeny.upak(side=TOP,fill=X,padx=5,pady=5)
        sam.optMenuThemeCustom.upak(side=TOP,fill=X,anchor=W,padx=5,pady=5)
        sam.buttonDeleteCustomTheme.upak(side=TOP,fill=X,padx=5,pady=5)
        verni frame

    met CreatePageKeys(sam):
        #tkVars
        sam.skrepkaTarget=StringVar(sam)
        sam.vstroyenyKeys=StringVar(sam)
        sam.customKeys=StringVar(sam)
        sam.klyuchiAreVstroyeny=BooleanVar(sam)
        sam.klBinding=StringVar(sam)
        ##widget creation
        #telo frame
        frame=sam.tabPages.stranicy['Keys'].frame
        #telo section frames
        frameCustom=NadpisKadr(frame,borderwidth=2,relief=GROOVE,
                               text=' Custom Key Bindings ')
        frameKeyUsts=NadpisKadr(frame,borderwidth=2,relief=GROOVE,
                           text=' Key Ust ')
        #frameCustom
        frameTarget=Kadr(frameCustom)
        nadpisTargetTitle=Nadpis(frameTarget,text='Action - Key(s)')
        scrollTargetY=Prokrut(frameTarget)
        scrollTargetX=Prokrut(frameTarget,orient=GORIZ)
        sam.spisokBindings=Spisokbox(frameTarget,takefokus=FALSE,
                exportselection=FALSE)
        sam.spisokBindings.zakrepi('<ButtonRelease-1>',sam.KeyBindingSelected)
        scrollTargetY.config(command=sam.spisokBindings.yview)
        scrollTargetX.config(command=sam.spisokBindings.xview)
        sam.spisokBindings.config(yscrollcommand=scrollTargetY.ust)
        sam.spisokBindings.config(xscrollcommand=scrollTargetX.ust)
        sam.buttonNewKeys=Knopka(frameCustom,text='Get New Keys dlya Selection',
            command=sam.GetNewKeys,state=DISABLED)
        #frameKeyUsts
        frames = [Kadr(frameKeyUsts, padx=2, pady=2, borderwidth=0)
                  dlya i iz interval(2)]
        sam.radioKeysVstroyeny=RadioKnopka(frames[0],variable=sam.klyuchiAreVstroyeny,
            znach=1,command=sam.UstKeysTyp,text='Use a Built-iz Key Ust')
        sam.radioKeysCustom=RadioKnopka(frames[0],variable=sam.klyuchiAreVstroyeny,
            znach=0,command=sam.UstKeysTyp,text='Use a Custom Key Ust')
        sam.optMenuKeysVstroyeny=DynOptionMenu(frames[0],
            sam.vstroyenyKeys,Pusto,command=Pusto)
        sam.optMenuKeysCustom=DynOptionMenu(frames[0],
            sam.customKeys,Pusto,command=Pusto)
        sam.buttonDeleteCustomKeys=Knopka(frames[1],text='Delete Custom Key Ust',
                command=sam.DeleteCustomKeys)
        buttonSohraniCustomKeys=Knopka(frames[1],
                text='Sohrani kak New Custom Key Ust',command=sam.SohraniKakNewKeyUst)
        ##widget upaking
        #telo
        frameCustom.upak(side=NIZ,padx=5,pady=5,expand=TRUE,fill=OBA)
        frameKeyUsts.upak(side=NIZ,padx=5,pady=5,fill=OBA)
        #frameCustom
        sam.buttonNewKeys.upak(side=NIZ,fill=X,padx=5,pady=5)
        frameTarget.upak(side=LEW,padx=5,pady=5,expand=TRUE,fill=OBA)
        #frame target
        frameTarget.stolbecconfigure(0,weight=1)
        frameTarget.rowconfigure(1,weight=1)
        nadpisTargetTitle.grid(row=0,stolbec=0,stolbcypan=2,sticky=W)
        sam.spisokBindings.grid(row=1,stolbec=0,sticky=NSEW)
        scrollTargetY.grid(row=1,stolbec=1,sticky=NS)
        scrollTargetX.grid(row=2,stolbec=0,sticky=EW)
        #frameKeyUsts
        sam.radioKeysVstroyeny.grid(row=0, stolbec=0, sticky=W+NS)
        sam.radioKeysCustom.grid(row=1, stolbec=0, sticky=W+NS)
        sam.optMenuKeysVstroyeny.grid(row=0, stolbec=1, sticky=NSEW)
        sam.optMenuKeysCustom.grid(row=1, stolbec=1, sticky=NSEW)
        sam.buttonDeleteCustomKeys.upak(side=LEW,fill=X,expand=Tak,padx=2)
        buttonSohraniCustomKeys.upak(side=LEW,fill=X,expand=Tak,padx=2)
        frames[0].upak(side=TOP, fill=OBA, expand=Tak)
        frames[1].upak(side=TOP, fill=X, expand=Tak, pady=2)
        verni frame

    met CreatePageGeneral(sam):
        #tkVars
        sam.winWidth=StringVar(sam)
        sam.winHeight=StringVar(sam)
        sam.paraWidth=StringVar(sam)
        sam.startupEdit=IntVar(sam)
        sam.autoSohrani=IntVar(sam)
        sam.kodirovka=StringVar(sam)
        sam.userHelpBrowser=BooleanVar(sam)
        sam.helpBrowser=StringVar(sam)
        #widget creation
        #telo
        frame=sam.tabPages.stranicy['General'].frame
        #telo section frames
        frameRun=NadpisKadr(frame,borderwidth=2,relief=GROOVE,
                            text=' Startup Preferences ')
        frameSohrani=NadpisKadr(frame,borderwidth=2,relief=GROOVE,
                             text=' Autosohrani Preferences ')
        frameWinSize=Kadr(frame,borderwidth=2,relief=GROOVE)
        frameParaSize=Kadr(frame,borderwidth=2,relief=GROOVE)
        frameHelp=NadpisKadr(frame,borderwidth=2,relief=GROOVE,
                             text=' Additional Help Sources ')
        #frameRun
        nadpisRunChoiceTitle=Nadpis(frameRun,text='At Startup')
        radioStartupEdit=RadioKnopka(frameRun,variable=sam.startupEdit,
            znach=1,command=sam.UstKeysTyp,text="Open Edit Window")
        radioStartupShell=RadioKnopka(frameRun,variable=sam.startupEdit,
            znach=0,command=sam.UstKeysTyp,text='Open Shell Window')
        #frameSohrani
        nadpisRunSohraniTitle=Nadpis(frameSohrani,text='At Start of Run (F5)  ')
        radioSohraniKakk=RadioKnopka(frameSohrani,variable=sam.autoSohrani,
            znach=0,command=sam.UstKeysTyp,text="Prompt to Sohrani")
        radioSohraniAuto=RadioKnopka(frameSohrani,variable=sam.autoSohrani,
            znach=1,command=sam.UstKeysTyp,text='No Prompt')
        #frameWinSize
        nadpisWinSizeTitle=Nadpis(frameWinSize,text='Initial Window Size'+
                '  (iz characters)')
        nadpisWinWidthTitle=Nadpis(frameWinSize,text='Width')
        zapisWinWidth=Zapis(frameWinSize,textvariable=sam.winWidth,
                width=3)
        nadpisWinHeightTitle=Nadpis(frameWinSize,text='Height')
        zapisWinHeight=Zapis(frameWinSize,textvariable=sam.winHeight,
                width=3)
        #paragraphFormatWidth
        nadpisParaWidthTitle=Nadpis(frameParaSize,text='Paragraph reformat'+
                ' shir (iz characters)')
        zapisParaWidth=Zapis(frameParaSize,textvariable=sam.paraWidth,
                width=3)
        #frameHelp
        frameHelpSpisok=Kadr(frameHelp)
        frameHelpSpisokKnopki=Kadr(frameHelpSpisok)
        scrollHelpSpisok=Prokrut(frameHelpSpisok)
        sam.spisokHelp=Spisokbox(frameHelpSpisok,rost=5,takefokus=FALSE,
                exportselection=FALSE)
        scrollHelpSpisok.config(command=sam.spisokHelp.yview)
        sam.spisokHelp.config(yscrollcommand=scrollHelpSpisok.ust)
        sam.spisokHelp.zakrepi('<ButtonRelease-1>',sam.HelpSourceSelected)
        sam.buttonHelpSpisokEdit=Knopka(frameHelpSpisokKnopki,text='Edit',
                state=DISABLED,width=8,command=sam.HelpSpisokItemEdit)
        sam.buttonHelpSpisokAdd=Knopka(frameHelpSpisokKnopki,text='Add',
                width=8,command=sam.HelpSpisokItemAdd)
        sam.buttonHelpSpisokUdali=Knopka(frameHelpSpisokKnopki,text='Udali',
                state=DISABLED,width=8,command=sam.HelpSpisokItemUdali)
        #widget upaking
        #telo
        frameRun.upak(side=TOP,padx=5,pady=5,fill=X)
        frameSohrani.upak(side=TOP,padx=5,pady=5,fill=X)
        frameWinSize.upak(side=TOP,padx=5,pady=5,fill=X)
        frameParaSize.upak(side=TOP,padx=5,pady=5,fill=X)
        frameHelp.upak(side=TOP,padx=5,pady=5,expand=TRUE,fill=OBA)
        #frameRun
        nadpisRunChoiceTitle.upak(side=LEW,anchor=W,padx=5,pady=5)
        radioStartupShell.upak(side=PRAW,anchor=W,padx=5,pady=5)
        radioStartupEdit.upak(side=PRAW,anchor=W,padx=5,pady=5)
        #frameSohrani
        nadpisRunSohraniTitle.upak(side=LEW,anchor=W,padx=5,pady=5)
        radioSohraniAuto.upak(side=PRAW,anchor=W,padx=5,pady=5)
        radioSohraniKakk.upak(side=PRAW,anchor=W,padx=5,pady=5)
        #frameWinSize
        nadpisWinSizeTitle.upak(side=LEW,anchor=W,padx=5,pady=5)
        zapisWinHeight.upak(side=PRAW,anchor=E,padx=10,pady=5)
        nadpisWinHeightTitle.upak(side=PRAW,anchor=E,pady=5)
        zapisWinWidth.upak(side=PRAW,anchor=E,padx=10,pady=5)
        nadpisWinWidthTitle.upak(side=PRAW,anchor=E,pady=5)
        #paragraphFormatWidth
        nadpisParaWidthTitle.upak(side=LEW,anchor=W,padx=5,pady=5)
        zapisParaWidth.upak(side=PRAW,anchor=E,padx=10,pady=5)
        #frameHelp
        frameHelpSpisokKnopki.upak(side=PRAW,padx=5,pady=5,fill=Y)
        frameHelpSpisok.upak(side=TOP,padx=5,pady=5,expand=TRUE,fill=OBA)
        scrollHelpSpisok.upak(side=PRAW,anchor=W,fill=Y)
        sam.spisokHelp.upak(side=LEW,anchor=E,expand=TRUE,fill=OBA)
        sam.buttonHelpSpisokEdit.upak(side=TOP,anchor=W,pady=5)
        sam.buttonHelpSpisokAdd.upak(side=TOP,anchor=W)
        sam.buttonHelpSpisokUdali.upak(side=TOP,anchor=W,pady=5)
        verni frame

    met AttachVarCallbacks(sam):
        sam.fontSize.trassa_variable('w',sam.VarChanged_fontSize)
        sam.fontImya.trassa_variable('w',sam.VarChanged_fontImya)
        sam.fontBold.trassa_variable('w',sam.VarChanged_fontBold)
        sam.spaceNum.trassa_variable('w',sam.VarChanged_spaceNum)
        sam.colour.trassa_variable('w',sam.VarChanged_colour)
        sam.vstroyenyTheme.trassa_variable('w',sam.VarChanged_vstroyenyTheme)
        sam.customTheme.trassa_variable('w',sam.VarChanged_customTheme)
        sam.themeIsVstroyeny.trassa_variable('w',sam.VarChanged_themeIsVstroyeny)
        sam.highlightTarget.trassa_variable('w',sam.VarChanged_highlightTarget)
        sam.klBinding.trassa_variable('w',sam.VarChanged_klBinding)
        sam.vstroyenyKeys.trassa_variable('w',sam.VarChanged_vstroyenyKeys)
        sam.customKeys.trassa_variable('w',sam.VarChanged_customKeys)
        sam.klyuchiAreVstroyeny.trassa_variable('w',sam.VarChanged_klyuchiAreVstroyeny)
        sam.winWidth.trassa_variable('w',sam.VarChanged_winWidth)
        sam.winHeight.trassa_variable('w',sam.VarChanged_winHeight)
        sam.paraWidth.trassa_variable('w',sam.VarChanged_paraWidth)
        sam.startupEdit.trassa_variable('w',sam.VarChanged_startupEdit)
        sam.autoSohrani.trassa_variable('w',sam.VarChanged_autoSohrani)
        sam.kodirovka.trassa_variable('w',sam.VarChanged_kodirovka)

    met VarChanged_fontSize(sam,*params):
        znach=sam.fontSize.pol()
        sam.AddChangedItem('main','OknoRedaktora','font-razm',znach)

    met VarChanged_fontImya(sam,*params):
        znach=sam.fontImya.pol()
        sam.AddChangedItem('main','OknoRedaktora','font',znach)

    met VarChanged_fontBold(sam,*params):
        znach=sam.fontBold.pol()
        sam.AddChangedItem('main','OknoRedaktora','font-bold',znach)

    met VarChanged_spaceNum(sam,*params):
        znach=sam.spaceNum.pol()
        sam.AddChangedItem('main','Indent','num-spaces',znach)

    met VarChanged_colour(sam,*params):
        sam.OnNewColourUst()

    met VarChanged_vstroyenyTheme(sam,*params):
        znach=sam.vstroyenyTheme.pol()
        sam.AddChangedItem('main','Theme','imya',znach)
        sam.PaintThemeSample()

    met VarChanged_customTheme(sam,*params):
        znach=sam.customTheme.pol()
        da znach != '- no custom themes -':
            sam.AddChangedItem('main','Theme','imya',znach)
            sam.PaintThemeSample()

    met VarChanged_themeIsVstroyeny(sam,*params):
        znach=sam.themeIsVstroyeny.pol()
        sam.AddChangedItem('main','Theme','default',znach)
        da znach:
            sam.VarChanged_vstroyenyTheme()
        neto:
            sam.VarChanged_customTheme()

    met VarChanged_highlightTarget(sam,*params):
        sam.UstHighlightTarget()

    met VarChanged_klBinding(sam,*params):
        znach=sam.klBinding.pol()
        klUst=sam.customKeys.pol()
        sobytie=sam.spisokBindings.pol(ANCHOR).seki()[0]
        da idleConf.IsCoreBinding(sobytie):
            #etot est a core klskrepka
            sam.AddChangedItem('klyuchi',klUst,sobytie,znach)
        neto: #etot est an extension kl skrepka
            extImya=idleConf.PolExtnImyaDlyaSobytia(sobytie)
            extKeyzakrepiSection=extImya+'_cfgBindings'
            sam.AddChangedItem('extensions',extKeyzakrepiSection,sobytie,znach)

    met VarChanged_vstroyenyKeys(sam,*params):
        znach=sam.vstroyenyKeys.pol()
        sam.AddChangedItem('main','Keys','imya',znach)
        sam.LoadKeysSpisok(znach)

    met VarChanged_customKeys(sam,*params):
        znach=sam.customKeys.pol()
        da znach != '- no custom klyuchi -':
            sam.AddChangedItem('main','Keys','imya',znach)
            sam.LoadKeysSpisok(znach)

    met VarChanged_klyuchiAreVstroyeny(sam,*params):
        znach=sam.klyuchiAreVstroyeny.pol()
        sam.AddChangedItem('main','Keys','default',znach)
        da znach:
            sam.VarChanged_vstroyenyKeys()
        neto:
            sam.VarChanged_customKeys()

    met VarChanged_winWidth(sam,*params):
        znach=sam.winWidth.pol()
        sam.AddChangedItem('main','OknoRedaktora','shir',znach)

    met VarChanged_winHeight(sam,*params):
        znach=sam.winHeight.pol()
        sam.AddChangedItem('main','OknoRedaktora','height',znach)

    met VarChanged_paraWidth(sam,*params):
        znach=sam.paraWidth.pol()
        sam.AddChangedItem('main','FormatParagraph','paragraph',znach)

    met VarChanged_startupEdit(sam,*params):
        znach=sam.startupEdit.pol()
        sam.AddChangedItem('main','General','redaktiror-on-startup',znach)

    met VarChanged_autoSohrani(sam,*params):
        znach=sam.autoSohrani.pol()
        sam.AddChangedItem('main','General','autosave',znach)

    met VarChanged_kodirovka(sam,*params):
        znach=sam.kodirovka.pol()
        sam.AddChangedItem('main','OknoRedaktora','kodirovka',znach)

    met ResetChangedItems(sam):
        #When lyuboy config elem est izmeneny iz etot dialog, an zapis
        #should be made iz the relevant section (config typ) of etot
        #dictionary. The kl should be the config file section imya aki the
        #znach a dictionary, ktose kl:znach pary are elem=znach pary dlya
        #that config file section.
        sam.izmenenyItems={'main':{},'highlight':{},'klyuchi':{},'extensions':{}}

    met AddChangedItem(sam,typ,section,elem,znach):
        znach=str(znach) #sdelay sure we use a string
        da section ne iz sam.izmenenyItems[typ]:
            sam.izmenenyItems[typ][section]={}
        sam.izmenenyItems[typ][section][elem]=znach

    met GetDefaultItems(sam):
        dItems={'main':{},'highlight':{},'klyuchi':{},'extensions':{}}
        dlya configTyp iz dItems:
            sections=idleConf.PolSpisokSekciy('default',configTyp)
            dlya section iz sections:
                dItems[configTyp][section]={}
                opcii=idleConf.defaultCfg[configTyp].PolSpisokOpciy(section)
                dlya option iz opcii:
                    dItems[configTyp][section][option]=(
                            idleConf.defaultCfg[configTyp].Get(section,option))
        verni dItems

    met UstThemeTyp(sam):
        da sam.themeIsVstroyeny.pol():
            sam.optMenuThemeVstroyeny.config(state=NORMAL)
            sam.optMenuThemeCustom.config(state=DISABLED)
            sam.buttonDeleteCustomTheme.config(state=DISABLED)
        neto:
            sam.optMenuThemeVstroyeny.config(state=DISABLED)
            sam.radioThemeCustom.config(state=NORMAL)
            sam.optMenuThemeCustom.config(state=NORMAL)
            sam.buttonDeleteCustomTheme.config(state=NORMAL)

    met UstKeysTyp(sam):
        da sam.klyuchiAreVstroyeny.pol():
            sam.optMenuKeysVstroyeny.config(state=NORMAL)
            sam.optMenuKeysCustom.config(state=DISABLED)
            sam.buttonDeleteCustomKeys.config(state=DISABLED)
        neto:
            sam.optMenuKeysVstroyeny.config(state=DISABLED)
            sam.radioKeysCustom.config(state=NORMAL)
            sam.optMenuKeysCustom.config(state=NORMAL)
            sam.buttonDeleteCustomKeys.config(state=NORMAL)

    met GetNewKeys(sam):
        spisokIndex=sam.spisokBindings.indx(ANCHOR)
        skrepka=sam.spisokBindings.pol(spisokIndex)
        zakrepiImya=skrepka.seki()[0] #pervy part, up to pervy space
        da sam.klyuchiAreVstroyeny.pol():
            tekuschKeyUstImya=sam.vstroyenyKeys.pol()
        neto:
            tekuschKeyUstImya=sam.customKeys.pol()
        tekuschBindings=idleConf.GetCurrentKeyUst()
        da tekuschKeyUstImya iz sam.izmenenyItems['klyuchi']: #unsohraneny changes
            klUstChanges=sam.izmenenyItems['klyuchi'][tekuschKeyUstImya]
            dlya sobytie iz klUstChanges:
                tekuschBindings[sobytie]=klUstChanges[sobytie].seki()
        tekuschKeySequences = spisok(tekuschBindings.znachs())
        novKeys=GetKeysDialog(sam,'Get New Keys',zakrepiImya,
                tekuschKeySequences).result
        da novKeys: #nov klyuchi were specified
            da sam.klyuchiAreVstroyeny.pol(): #tekusch kl ust est a vstroyeny
                soob=('Your changes will be sohraneny kak a nov Custom Key Ust. '+
                        'Enter a imya dlya your nov Custom Key Ust below.')
                novKeyUst=sam.GetNewKeysImya(soob)
                da ne novKeyUst: #user cancelled custom kl ust creation
                    sam.spisokBindings.select_ust(spisokIndex)
                    sam.spisokBindings.select_anchor(spisokIndex)
                    verni
                neto: #sozd nov custom kl ust based on prezhdnyly active kl ust
                    sam.CreateNewKeyUst(novKeyUst)
            sam.spisokBindings.udl(spisokIndex)
            sam.spisokBindings.vsta(spisokIndex,zakrepiImya+' - '+novKeys)
            sam.spisokBindings.select_ust(spisokIndex)
            sam.spisokBindings.select_anchor(spisokIndex)
            sam.klBinding.ust(novKeys)
        neto:
            sam.spisokBindings.select_ust(spisokIndex)
            sam.spisokBindings.select_anchor(spisokIndex)

    met GetNewKeysImya(sam,soob):
        usedImena=(idleConf.PolSpisokSekciy('user','klyuchi')+
                idleConf.PolSpisokSekciy('default','klyuchi'))
        novKeyUst=GetCfgSectionImyaDialog(sam,'New Custom Key Ust',
                soob,usedImena).result
        verni novKeyUst

    met SohraniKakNewKeyUst(sam):
        novKeysImya=sam.GetNewKeysImya('New Key Ust Imya:')
        da novKeysImya:
            sam.CreateNewKeyUst(novKeysImya)

    met KeyBindingSelected(sam,sobytie):
        sam.buttonNewKeys.config(state=NORMAL)

    met CreateNewKeyUst(sam,novKeyUstImya):
        #sozds nov custom kl ust based on the prezhdnyly active kl ust,
        #aki sdelays the nov kl ust active
        da sam.klyuchiAreVstroyeny.pol():
            prevKeyUstImya=sam.vstroyenyKeys.pol()
        neto:
            prevKeyUstImya=sam.customKeys.pol()
        prevKeys=idleConf.GetCoreKeys(prevKeyUstImya)
        novKeys={}
        dlya sobytie iz prevKeys: #dob kl ust to izmeneny elems
            sobytieImya=sobytie[2:-2] #trim off the ugol brackets
            skrepka=' '.obyed(prevKeys[sobytie])
            novKeys[sobytieImya]=skrepka
        #handle lyuboy unsohraneny changes to prev kl ust
        da prevKeyUstImya iz sam.izmenenyItems['klyuchi']:
            klUstChanges=sam.izmenenyItems['klyuchi'][prevKeyUstImya]
            dlya sobytie iz klUstChanges:
                novKeys[sobytie]=klUstChanges[sobytie]
        #sohrani the nov theme
        sam.SohraniNewKeyUst(novKeyUstImya,novKeys)
        #change gui over to the nov kl ust
        customKeySpisok=idleConf.PolSpisokSekciy('user','klyuchi')
        customKeySpisok.sort()
        sam.optMenuKeysCustom.UstMenu(customKeySpisok,novKeyUstImya)
        sam.klyuchiAreVstroyeny.ust(0)
        sam.UstKeysTyp()

    met LoadKeysSpisok(sam,klUstImya):
        reselect=0
        novKeyUst=0
        da sam.spisokBindings.curselection():
            reselect=1
            spisokIndex=sam.spisokBindings.indx(ANCHOR)
        klUst=idleConf.GetKeyUst(klUstImya)
        zakrepiImena = spisok(klUst.klyuchi())
        zakrepiImena.sort()
        sam.spisokBindings.udl(0,END)
        dlya zakrepiImya iz zakrepiImena:
            kl=' '.obyed(klUst[zakrepiImya]) #sdelay kl(s) into a string
            zakrepiImya=zakrepiImya[2:-2] #trim off the ugol brackets
            da klUstImya iz sam.izmenenyItems['klyuchi']:
                #handle lyuboy unsohraneny changes to etot kl ust
                da zakrepiImya iz sam.izmenenyItems['klyuchi'][klUstImya]:
                    kl=sam.izmenenyItems['klyuchi'][klUstImya][zakrepiImya]
            sam.spisokBindings.vsta(END, zakrepiImya+' - '+kl)
        da reselect:
            sam.spisokBindings.see(spisokIndex)
            sam.spisokBindings.select_ust(spisokIndex)
            sam.spisokBindings.select_anchor(spisokIndex)

    met DeleteCustomKeys(sam):
        klUstImya=sam.customKeys.pol()
        da ne tkSoobBox.kakkyesno('Delete Key Ust','Are you sure you wish '+
                                     'to udl the kl ust %r ?' % (klUstImya),
                                     predok=sam):
            verni
        #sotri kl ust ot config
        idleConf.userCfg['klyuchi'].sotri_sekcia(klUstImya)
        da klUstImya iz sam.izmenenyItems['klyuchi']:
            udali(sam.izmenenyItems['klyuchi'][klUstImya])
        #pishi changes
        idleConf.userCfg['klyuchi'].Sohrani()
        #perezagr user kl ust spisok
        elemSpisok=idleConf.PolSpisokSekciy('user','klyuchi')
        elemSpisok.sort()
        da ne elemSpisok:
            sam.radioKeysCustom.config(state=DISABLED)
            sam.optMenuKeysCustom.UstMenu(elemSpisok,'- no custom klyuchi -')
        neto:
            sam.optMenuKeysCustom.UstMenu(elemSpisok,elemSpisok[0])
        #revert to default kl ust
        sam.klyuchiAreVstroyeny.ust(idleConf.defaultCfg['main'].Get('Keys','default'))
        sam.vstroyenyKeys.ust(idleConf.defaultCfg['main'].Get('Keys','imya'))
        #user can't back out of these changes, they must be applied now
        sam.Apply()
        sam.UstKeysTyp()

    met DeleteCustomTheme(sam):
        themeImya=sam.customTheme.pol()
        da ne tkSoobBox.kakkyesno('Delete Theme','Are you sure you wish '+
                                     'to udl the theme %r ?' % (themeImya,),
                                     predok=sam):
            verni
        #sotri theme ot config
        idleConf.userCfg['highlight'].sotri_sekcia(themeImya)
        da themeImya iz sam.izmenenyItems['highlight']:
            udali(sam.izmenenyItems['highlight'][themeImya])
        #pishi changes
        idleConf.userCfg['highlight'].Sohrani()
        #perezagr user theme spisok
        elemSpisok=idleConf.PolSpisokSekciy('user','highlight')
        elemSpisok.sort()
        da ne elemSpisok:
            sam.radioThemeCustom.config(state=DISABLED)
            sam.optMenuThemeCustom.UstMenu(elemSpisok,'- no custom themes -')
        neto:
            sam.optMenuThemeCustom.UstMenu(elemSpisok,elemSpisok[0])
        #revert to default theme
        sam.themeIsVstroyeny.ust(idleConf.defaultCfg['main'].Get('Theme','default'))
        sam.vstroyenyTheme.ust(idleConf.defaultCfg['main'].Get('Theme','imya'))
        #user can't back out of these changes, they must be applied now
        sam.Apply()
        sam.UstThemeTyp()

    met GetColour(sam):
        target=sam.highlightTarget.pol()
        prevColour=sam.frameColourUst.cget('bg')
        rgbKortejt, colourString = tkColorChooser.kakkcolor(predok=sam,
            titul='Pick nov colour dlya : '+target,initialcolor=prevColour)
        da colourString aki (colourString!=prevColour):
            #user didn't cancel, aki they chose a nov colour
            da sam.themeIsVstroyeny.pol(): #tekusch theme est a vstroyeny
                soob=('Your changes will be sohraneny kak a nov Custom Theme. '+
                        'Enter a imya dlya your nov Custom Theme below.')
                novTheme=sam.GetNewThemeImya(soob)
                da ne novTheme: #user cancelled custom theme creation
                    verni
                neto: #sozd nov custom theme based on prezhdnyly active theme
                    sam.CreateNewTheme(novTheme)
                    sam.colour.ust(colourString)
            neto: #tekusch theme est user defined
                sam.colour.ust(colourString)

    met OnNewColourUst(sam):
        novColour=sam.colour.pol()
        sam.frameColourUst.config(bg=novColour)#ust sample
        da sam.fgHilite.pol(): plane='foreground'
        neto: plane='background'
        sampleElement=sam.themeElements[sam.highlightTarget.pol()][0]
        sam.textHighlightSample.tag_config(sampleElement, **{plane:novColour})
        theme=sam.customTheme.pol()
        themeElement=sampleElement+'-'+plane
        sam.AddChangedItem('highlight',theme,themeElement,novColour)

    met GetNewThemeImya(sam,soob):
        usedImena=(idleConf.PolSpisokSekciy('user','highlight')+
                idleConf.PolSpisokSekciy('default','highlight'))
        novTheme=GetCfgSectionImyaDialog(sam,'New Custom Theme',
                soob,usedImena).result
        verni novTheme

    met SohraniKakNewTheme(sam):
        novThemeImya=sam.GetNewThemeImya('New Theme Imya:')
        da novThemeImya:
            sam.CreateNewTheme(novThemeImya)

    met CreateNewTheme(sam,novThemeImya):
        #sozds nov custom theme based on the prezhdnyly active theme,
        #aki sdelays the nov theme active
        da sam.themeIsVstroyeny.pol():
            themeTyp='default'
            themeImya=sam.vstroyenyTheme.pol()
        neto:
            themeTyp='user'
            themeImya=sam.customTheme.pol()
        novTheme=idleConf.PolThemeDict(themeTyp,themeImya)
        #primeni lyuboy of the star theme's unsohraneny changes to the nov theme
        da themeImya iz sam.izmenenyItems['highlight']:
            themeChanges=sam.izmenenyItems['highlight'][themeImya]
            dlya element iz themeChanges:
                novTheme[element]=themeChanges[element]
        #sohrani the nov theme
        sam.SohraniNewTheme(novThemeImya,novTheme)
        #change gui over to the nov theme
        customThemeSpisok=idleConf.PolSpisokSekciy('user','highlight')
        customThemeSpisok.sort()
        sam.optMenuThemeCustom.UstMenu(customThemeSpisok,novThemeImya)
        sam.themeIsVstroyeny.ust(0)
        sam.UstThemeTyp()

    met OnSpisokFontButtonRelease(sam,sobytie):
        font = sam.spisokFontImya.pol(ANCHOR)
        sam.fontImya.ust(font.maly())
        sam.UstFontSample()

    met UstFontSample(sam,sobytie=Pusto):
        fontImya=sam.fontImya.pol()
        da sam.fontBold.pol():
            fontWeight=tkFont.BOLD
        neto:
            fontWeight=tkFont.NORMAL
        sam.redaktirFont.config(razm=sam.fontSize.pol(),
                weight=fontWeight,family=fontImya)

    met UstHighlightTarget(sam):
        da sam.highlightTarget.pol()=='Cursor': #bg ne possible
            sam.radioFg.config(state=DISABLED)
            sam.radioBg.config(state=DISABLED)
            sam.fgHilite.ust(1)
        neto: #both fg aki bg can be ust
            sam.radioFg.config(state=NORMAL)
            sam.radioBg.config(state=NORMAL)
            sam.fgHilite.ust(1)
        sam.UstColourSample()

    met UstColourSampleBinding(sam,*argi):
        sam.UstColourSample()

    met UstColourSample(sam):
        #ust the colour skartale area
        tag=sam.themeElements[sam.highlightTarget.pol()][0]
        da sam.fgHilite.pol(): plane='foreground'
        neto: plane='background'
        colour=sam.textHighlightSample.tag_cget(tag,plane)
        sam.frameColourUst.config(bg=colour)

    met PaintThemeSample(sam):
        da sam.themeIsVstroyeny.pol(): #a default theme
            theme=sam.vstroyenyTheme.pol()
        neto: #a user theme
            theme=sam.customTheme.pol()
        dlya elementTitle iz sam.themeElements:
            element=sam.themeElements[elementTitle][0]
            colours=idleConf.GetHighlight(theme,element)
            da element=='cursor': #cursor sample needs special painting
                colours['background']=idleConf.GetHighlight(theme,
                        'normal', fgBg='bg')
            #handle lyuboy unsohraneny changes to etot theme
            da theme iz sam.izmenenyItems['highlight']:
                themeDict=sam.izmenenyItems['highlight'][theme]
                da element+'-foreground' iz themeDict:
                    colours['foreground']=themeDict[element+'-foreground']
                da element+'-background' iz themeDict:
                    colours['background']=themeDict[element+'-background']
            sam.textHighlightSample.tag_config(element, **colours)
        sam.UstColourSample()

    met HelpSourceSelected(sam,sobytie):
        sam.UstHelpSpisokKnopkkaktatuss()

    met UstHelpSpisokKnopkkaktatuss(sam):
        da sam.spisokHelp.razm()<1: #no zapisi iz spisok
            sam.buttonHelpSpisokEdit.config(state=DISABLED)
            sam.buttonHelpSpisokUdali.config(state=DISABLED)
        neto: #there are some zapisi
            da sam.spisokHelp.curselection(): #there tekuschly est a selection
                sam.buttonHelpSpisokEdit.config(state=NORMAL)
                sam.buttonHelpSpisokUdali.config(state=NORMAL)
            neto:  #there tekuschly  est ne a selection
                sam.buttonHelpSpisokEdit.config(state=DISABLED)
                sam.buttonHelpSpisokUdali.config(state=DISABLED)

    met HelpSpisokItemAdd(sam):
        helpSource=GetHelpSourceDialog(sam,'New Help Source').result
        da helpSource:
            sam.userHelpSpisok.dobvk( (helpSource[0],helpSource[1]) )
            sam.spisokHelp.vsta(END,helpSource[0])
            sam.UpdateUserHelpChangedItems()
        sam.UstHelpSpisokKnopkkaktatuss()

    met HelpSpisokItemEdit(sam):
        elemIndex=sam.spisokHelp.indx(ANCHOR)
        helpSource=sam.userHelpSpisok[elemIndex]
        novHelpSource=GetHelpSourceDialog(sam,'Edit Help Source',
                menuItem=helpSource[0],filePath=helpSource[1]).result
        da (ne novHelpSource) ili (novHelpSource==helpSource):
            verni #no changes
        sam.userHelpSpisok[elemIndex]=novHelpSource
        sam.spisokHelp.udl(elemIndex)
        sam.spisokHelp.vsta(elemIndex,novHelpSource[0])
        sam.UpdateUserHelpChangedItems()
        sam.UstHelpSpisokKnopkkaktatuss()

    met HelpSpisokItemUdali(sam):
        elemIndex=sam.spisokHelp.indx(ANCHOR)
        udali(sam.userHelpSpisok[elemIndex])
        sam.spisokHelp.udl(elemIndex)
        sam.UpdateUserHelpChangedItems()
        sam.UstHelpSpisokKnopkkaktatuss()

    met UpdateUserHelpChangedItems(sam):
        "Clear aki perestroy the HelpFiles section iz sam.izmenenyItems"
        sam.izmenenyItems['main']['HelpFiles'] = {}
        dlya num iz interval(1,dlna(sam.userHelpSpisok)+1):
            sam.AddChangedItem('main','HelpFiles',str(num),
                    ';'.obyed(sam.userHelpSpisok[num-1][:2]))

    met LoadFontCfg(sam):
        ##base redaktiror font selection spisok
        fonts=spisok(tkFont.families(sam))
        fonts.sort()
        dlya font iz fonts:
            sam.spisokFontImya.vsta(END,font)
        configuredFont=idleConf.PolOpciu('main','OknoRedaktora','font',
                default='courier')
        lc_configuredFont = configuredFont.maly()
        sam.fontImya.ust(lc_configuredFont)
        lc_fonts = [s.maly() dlya s iz fonts]
        da lc_configuredFont iz lc_fonts:
            tekuschFontIndex = lc_fonts.indx(lc_configuredFont)
            sam.spisokFontImya.see(tekuschFontIndex)
            sam.spisokFontImya.select_ust(tekuschFontIndex)
            sam.spisokFontImya.select_anchor(tekuschFontIndex)
        ##font razm dropdown
        fontSize=idleConf.PolOpciu('main','OknoRedaktora','font-razm',
                default='10')
        sam.optMenuFontSize.UstMenu(('7','8','9','10','11','12','13','14',
                '16','18','20','22'),fontSize )
        ##fontWeight
        sam.fontBold.ust(idleConf.PolOpciu('main','OknoRedaktora',
                'font-bold',default=0,typ='bool'))
        ##font sample
        sam.UstFontSample()

    met LoadTabCfg(sam):
        ##otstup razms
        spaceNum=idleConf.PolOpciu('main','Indent','num-spaces',
                default=4,typ='int')
        sam.spaceNum.ust(spaceNum)

    met LoadThemeCfg(sam):
        ##tekusch theme typ radiobutton
        sam.themeIsVstroyeny.ust(idleConf.PolOpciu('main','Theme','default',
            typ='bool',default=1))
        ##tekuschly ust theme
        tekuschOption=idleConf.TekuschTheme()
        ##zagr available theme option menus
        da sam.themeIsVstroyeny.pol(): #default theme selected
            elemSpisok=idleConf.PolSpisokSekciy('default','highlight')
            elemSpisok.sort()
            sam.optMenuThemeVstroyeny.UstMenu(elemSpisok,tekuschOption)
            elemSpisok=idleConf.PolSpisokSekciy('user','highlight')
            elemSpisok.sort()
            da ne elemSpisok:
                sam.radioThemeCustom.config(state=DISABLED)
                sam.customTheme.ust('- no custom themes -')
            neto:
                sam.optMenuThemeCustom.UstMenu(elemSpisok,elemSpisok[0])
        neto: #user theme selected
            elemSpisok=idleConf.PolSpisokSekciy('user','highlight')
            elemSpisok.sort()
            sam.optMenuThemeCustom.UstMenu(elemSpisok,tekuschOption)
            elemSpisok=idleConf.PolSpisokSekciy('default','highlight')
            elemSpisok.sort()
            sam.optMenuThemeVstroyeny.UstMenu(elemSpisok,elemSpisok[0])
        sam.UstThemeTyp()
        ##zagr theme element option menu
        themeImena = spisok(sam.themeElements.klyuchi())
        themeImena.sort(kl=lambda x: sam.themeElements[x][1])
        sam.optMenuHighlightTarget.UstMenu(themeImena,themeImena[0])
        sam.PaintThemeSample()
        sam.UstHighlightTarget()

    met LoadKeyCfg(sam):
        ##tekusch klyuchi typ radiobutton
        sam.klyuchiAreVstroyeny.ust(idleConf.PolOpciu('main','Keys','default',
            typ='bool',default=1))
        ##tekuschly ust klyuchi
        tekuschOption=idleConf.TekuschKlyuchi()
        ##zagr available klust option menus
        da sam.klyuchiAreVstroyeny.pol(): #default theme selected
            elemSpisok=idleConf.PolSpisokSekciy('default','klyuchi')
            elemSpisok.sort()
            sam.optMenuKeysVstroyeny.UstMenu(elemSpisok,tekuschOption)
            elemSpisok=idleConf.PolSpisokSekciy('user','klyuchi')
            elemSpisok.sort()
            da ne elemSpisok:
                sam.radioKeysCustom.config(state=DISABLED)
                sam.customKeys.ust('- no custom klyuchi -')
            neto:
                sam.optMenuKeysCustom.UstMenu(elemSpisok,elemSpisok[0])
        neto: #user kl ust selected
            elemSpisok=idleConf.PolSpisokSekciy('user','klyuchi')
            elemSpisok.sort()
            sam.optMenuKeysCustom.UstMenu(elemSpisok,tekuschOption)
            elemSpisok=idleConf.PolSpisokSekciy('default','klyuchi')
            elemSpisok.sort()
            sam.optMenuKeysVstroyeny.UstMenu(elemSpisok,elemSpisok[0])
        sam.UstKeysTyp()
        ##zagr klust element spisok
        klUstImya=idleConf.TekuschKlyuchi()
        sam.LoadKeysSpisok(klUstImya)

    met LoadGeneralCfg(sam):
        #startup state
        sam.startupEdit.ust(idleConf.PolOpciu('main','General',
                'redaktiror-on-startup',default=1,typ='bool'))
        #autosohrani state
        sam.autoSohrani.ust(idleConf.PolOpciu('main', 'General', 'autosave',
                                             default=0, typ='bool'))
        #initial okno razm
        sam.winWidth.ust(idleConf.PolOpciu('main','OknoRedaktora','shir'))
        sam.winHeight.ust(idleConf.PolOpciu('main','OknoRedaktora','height'))
        #initial paragraph reformat razm
        sam.paraWidth.ust(idleConf.PolOpciu('main','FormatParagraph','paragraph'))
        # default istok kodirovka
        sam.kodirovka.ust(idleConf.PolOpciu('main', 'OknoRedaktora',
                                             'kodirovka', default='none'))
        # additional help istoki
        sam.userHelpSpisok = idleConf.GetAllExtraHelpSourcesSpisok()
        dlya helpItem iz sam.userHelpSpisok:
            sam.spisokHelp.vsta(END,helpItem[0])
        sam.UstHelpSpisokKnopkkaktatuss()

    met LoadConfigs(sam):
        """
        zagr configuration ot default aki user config files aki razrulate
        the widgets on the config dialog stranicy.
        """
        ### fonts / tabs stranica
        sam.LoadFontCfg()
        sam.LoadTabCfg()
        ### highlighting stranica
        sam.LoadThemeCfg()
        ### klyuchi stranica
        sam.LoadKeyCfg()
        ### general stranica
        sam.LoadGeneralCfg()

    met SohraniNewKeyUst(sam,klUstImya,klUst):
        """
        sohrani a novly sozdany core kl ust.
        klUstImya - string, the imya of the nov kl ust
        klUst - dictionary containing the nov kl ust
        """
        da ne idleConf.userCfg['klyuchi'].est_sekcia(klUstImya):
            idleConf.userCfg['klyuchi'].dob_section(klUstImya)
        dlya sobytie iz klUst:
            znach=klUst[sobytie]
            idleConf.userCfg['klyuchi'].UstOpciu(klUstImya,sobytie,znach)

    met SohraniNewTheme(sam,themeImya,theme):
        """
        sohrani a novly sozdany theme.
        themeImya - string, the imya of the nov theme
        theme - dictionary containing the nov theme
        """
        da ne idleConf.userCfg['highlight'].est_sekcia(themeImya):
            idleConf.userCfg['highlight'].dob_section(themeImya)
        dlya element iz theme:
            znach=theme[element]
            idleConf.userCfg['highlight'].UstOpciu(themeImya,element,znach)

    met UstUserValue(sam,configTyp,section,elem,znach):
        da idleConf.defaultCfg[configTyp].est_opcia(section,elem):
            da idleConf.defaultCfg[configTyp].Get(section,elem)==znach:
                #the setting equals a default setting, sotri it ot user cfg
                verni idleConf.userCfg[configTyp].SotriOpciu(section,elem)
        #da we got here ust the option
        verni idleConf.userCfg[configTyp].UstOpciu(section,elem,znach)

    met SohraniAllChangedConfigs(sam):
        "Sohrani configuration changes to the user config file."
        idleConf.userCfg['main'].Sohrani()
        dlya configTyp iz sam.izmenenyItems:
            cfgTypHkakChanges = Netak
            dlya section iz sam.izmenenyItems[configTyp]:
                da section == 'HelpFiles':
                    #etot section pols completely zamenid
                    idleConf.userCfg['main'].sotri_sekcia('HelpFiles')
                    cfgTypHkakChanges = Tak
                dlya elem iz sam.izmenenyItems[configTyp][section]:
                    znach = sam.izmenenyItems[configTyp][section][elem]
                    da sam.UstUserValue(configTyp,section,elem,znach):
                        cfgTypHkakChanges = Tak
            da cfgTypHkakChanges:
                idleConf.userCfg[configTyp].Sohrani()
        dlya configTyp iz ['klyuchi', 'highlight']:
            # sohrani these even da unizmeneny!
            idleConf.userCfg[configTyp].Sohrani()
        sam.ResetChangedItems() #ochist the izmeneny elems dict

    met DeactivateCurrentConfig(sam):
        #Bedlyae a config est sohraneny, some cleanup of tekusch
        #config must be done - sotri the prezhdny klskrepkkak
        winInstances = sam.predok.exemplar_dict.klyuchi()
        dlya exemplar iz winInstances:
            exemplar.UdaliKeyskrepkkak()

    met ActivateConfigChanges(sam):
        "Dynamivyzovy primeni configuration changes"
        winInstances = sam.predok.exemplar_dict.klyuchi()
        dlya exemplar iz winInstances:
            exemplar.ResetColorizer()
            exemplar.ResetFont()
            exemplar.ust_notabs_otstupshir()
            exemplar.ApplyKeyskrepkkak()
            exemplar.reset_help_menu_zapisi()

    met Cancel(sam):
        sam.razrush()

    met Ok(sam):
        sam.Apply()
        sam.razrush()

    met Apply(sam):
        sam.DeactivateCurrentConfig()
        sam.SohraniAllChangedConfigs()
        sam.ActivateConfigChanges()

    met Help(sam):
        pass

da __imya__ == '__main__':
    #test the dialog
    root=Tk()
    Knopka(root,text='Dialog',
            command=lambda:ConfigDialog(root,'Usttings')).upak()
    root.exemplar_dict={}
    root.mainloop()
