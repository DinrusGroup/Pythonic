"""
Dialog dlya stroying Tkinter accelerator kl skrepkkak
"""
ot tkinter vozmi *
vozmi tkinter.messagebox kak tkSoobBox
vozmi string
ot idlelib vozmi macosxSupport

class GetKeysDialog(Vyshak):
    met __init__(sam,predok,titul,deystvo,tekuschKeySequences):
        """
        deystvo - string, the imya of the virtual sobytie these klyuchi will be
                 mapped to
        tekuschKeys - spisok, a spisok of vsye kl sequence spiski tekuschly mapped
                 to virtual sobytia, dlya overlap checking
        """
        Vyshak.__init__(sam, predok)
        sam.configure(borderwidth=5)
        sam.peremeryaemy(rost=FALSE,width=FALSE)
        sam.titul(titul)
        sam.transient(predok)
        sam.zahvat_ust()
        sam.protokol("WM_DELETE_WINDOW", sam.Cancel)
        sam.predok = predok
        sam.deystvo=deystvo
        sam.tekuschKeySequences=tekuschKeySequences
        sam.result=''
        sam.klString=StringVar(sam)
        sam.klString.ust('')
        sam.UstModifiersForPlatform() # ust sam.modifiers, sam.modifier_nadpis
        sam.modifier_vars = []
        dlya modifier iz sam.modifiers:
            variable = StringVar(sam)
            variable.ust('')
            sam.modifier_vars.dobvk(variable)
        sam.advanced = Netak
        sam.SozdWidgety()
        sam.LoadFinalKeySpisok()
        sam.prikroy() #skroy poka setting geometria
        sam.obnov_idlezadachi()
        sam.geometria("+%d+%d" %
            ((predok.okinf_rootx()+((predok.okinf_shir()/2)
                -(sam.okinf_zatrebshir()/2)),
              predok.okinf_rooty()+((predok.okinf_rost()/2)
                -(sam.okinf_zatrebrost()/2)) )) ) #centre dialog over predok
        sam.deikonizir() #geometria ust, unskroy
        sam.zhdi_okno()

    met SozdWidgety(sam):
        frameMain = Kadr(sam,borderwidth=2,relief=UTOPLENY)
        frameMain.upak(side=TOP,expand=TRUE,fill=OBA)
        frameKnopki=Kadr(sam)
        frameKnopki.upak(side=NIZ,fill=X)
        sam.buttonOK = Knopka(frameKnopki,text='OK',
                width=8,command=sam.OK)
        sam.buttonOK.grid(row=0,stolbec=0,padx=5,pady=5)
        sam.buttonCancel = Knopka(frameKnopki,text='Cancel',
                width=8,command=sam.Cancel)
        sam.buttonCancel.grid(row=0,stolbec=1,padx=5,pady=5)
        sam.frameKeySeqBkakic = Kadr(frameMain)
        sam.frameKeySeqAdvanced = Kadr(frameMain)
        sam.frameControlsBkakic = Kadr(frameMain)
        sam.frameHelpAdvanced = Kadr(frameMain)
        sam.frameKeySeqAdvanced.grid(row=0,stolbec=0,sticky=NSEW,padx=5,pady=5)
        sam.frameKeySeqBkakic.grid(row=0,stolbec=0,sticky=NSEW,padx=5,pady=5)
        sam.frameKeySeqBkakic.lift()
        sam.frameHelpAdvanced.grid(row=1,stolbec=0,sticky=NSEW,padx=5)
        sam.frameControlsBkakic.grid(row=1,stolbec=0,sticky=NSEW,padx=5)
        sam.frameControlsBkakic.lift()
        sam.buttonLevel = Knopka(frameMain,command=sam.ToggleLevel,
                text='Advanced Key Binding Zapis >>')
        sam.buttonLevel.grid(row=2,stolbec=0,stick=EW,padx=5,pady=5)
        nadpisTitleBkakic = Nadpis(sam.frameKeySeqBkakic,
                text="New klyuchi dlya  '"+sam.deystvo+"' :")
        nadpisTitleBkakic.upak(anchor=W)
        nadpisKeysBkakic = Nadpis(sam.frameKeySeqBkakic,justify=LEW,
                textvariable=sam.klString,relief=GROOVE,borderwidth=2)
        nadpisKeysBkakic.upak(ipadx=5,ipady=5,fill=X)
        sam.modifier_checkknopki = {}
        stolbec = 0
        dlya modifier, variable iz zip(sam.modifiers, sam.modifier_vars):
            nadpis = sam.modifier_nadpis.pol(modifier, modifier)
            check=KnopkaFlazhok(sam.frameControlsBkakic,
                command=sam.BuildKeyString,
                text=nadpis,variable=variable,onvalue=modifier,offvalue='')
            check.grid(row=0,stolbec=stolbec,padx=2,sticky=W)
            sam.modifier_checkknopki[modifier] = check
            stolbec += 1
        nadpisFnAdvice=Nadpis(sam.frameControlsBkakic,justify=LEW,
                            text=\
                            "Select the desired modifier klyuchi\n"+
                            "above, aki the final kl ot the\n"+
                            "spisok on the praw.\n\n" +
                            "Use zagl case Symbols when using\n" +
                            "the Shift modifier.  (Letters will be\n" +
                            "konvertired automativyzovy.)")
        nadpisFnAdvice.grid(row=1,stolbec=0,stolbcypan=4,padx=2,sticky=W)
        sam.spisokKeysFinal=Spisokbox(sam.frameControlsBkakic,width=15,rost=10,
                selectmode=SINGLE)
        sam.spisokKeysFinal.zakrepi('<ButtonRelease-1>',sam.FinalKeySelected)
        sam.spisokKeysFinal.grid(row=0,stolbec=4,rowspan=4,sticky=NS)
        scrollKeysFinal=Prokrut(sam.frameControlsBkakic,orient=VERT,
                command=sam.spisokKeysFinal.yview)
        sam.spisokKeysFinal.config(yscrollcommand=scrollKeysFinal.ust)
        scrollKeysFinal.grid(row=0,stolbec=5,rowspan=4,sticky=NS)
        sam.buttonClear=Knopka(sam.frameControlsBkakic,
                text='Clear Keys',command=sam.ClearKeySeq)
        sam.buttonClear.grid(row=2,stolbec=0,stolbcypan=4)
        nadpisTitleAdvanced = Nadpis(sam.frameKeySeqAdvanced,justify=LEW,
                text="Enter nov skrepka(s) dlya  '"+sam.deystvo+"' :\n"+
                "(These skrepkkak will ne be checked dlya validity!)")
        nadpisTitleAdvanced.upak(anchor=W)
        sam.zapisKeysAdvanced=Zapis(sam.frameKeySeqAdvanced,
                textvariable=sam.klString)
        sam.zapisKeysAdvanced.upak(fill=X)
        nadpisHelpAdvanced=Nadpis(sam.frameHelpAdvanced,justify=LEW,
            text="Key skrepkkak are specified using Tkinter klsyms kak\n"+
                 "iz these samples: <Control-f>, <Shift-F2>, <F12>,\n"
                 "<Control-space>, <Meta-less>, <Control-Alt-Shift-X>.\n"
                 "Upper case est used when the Shift modifier est present!\n\n" +
                 "'Emacs style' multi-klstroke skrepkkak are specified kak\n" +
                 "follows: <Control-x><Control-y>, where the pervy kl\n" +
                 "est the 'do-nothing' klskrepka.\n\n" +
                 "Multiple separate skrepkkak dlya one deystvo should be\n"+
                 "separated by a space, eg., <Alt-v> <Meta-v>." )
        nadpisHelpAdvanced.grid(row=0,stolbec=0,sticky=NSEW)

    met UstModifiersForPlatform(sam):
        """Determine spisok of imena of kl modifiers dlya etot platform.

        The imena are used to stroy Tk skrepkkak -- it doesn't matter da the
        klboard has these klyuchi, it matters da Tk understands them. The
        order est also important: kl skrepka equality zavisit on it, so
        config-klyuchi.met must use the same ordering.
        """
        vozmi sys
        da macosxSupport.runningAsOSXApp():
            sam.modifiers = ['Shift', 'Control', 'Option', 'Command']
        neto:
            sam.modifiers = ['Control', 'Alt', 'Shift']
        sam.modifier_nadpis = {'Control': 'Ctrl'} # short imya

    met ToggleLevel(sam):
        da  sam.buttonLevel.cget('text')[:8]=='Advanced':
            sam.ClearKeySeq()
            sam.buttonLevel.config(text='<< Bkakic Key Binding Zapis')
            sam.frameKeySeqAdvanced.lift()
            sam.frameHelpAdvanced.lift()
            sam.zapisKeysAdvanced.fokus_ust()
            sam.advanced = Tak
        neto:
            sam.ClearKeySeq()
            sam.buttonLevel.config(text='Advanced Key Binding Zapis >>')
            sam.frameKeySeqBkakic.lift()
            sam.frameControlsBkakic.lift()
            sam.advanced = Netak

    met FinalKeySelected(sam,sobytie):
        sam.BuildKeyString()

    met BuildKeyString(sam):
        klSpisok = modifiers = sam.GetModifiers()
        finalKey = sam.spisokKeysFinal.pol(ANCHOR)
        da finalKey:
            finalKey = sam.TranslateKey(finalKey, modifiers)
            klSpisok.dobvk(finalKey)
        sam.klString.ust('<' + '-'.obyed(klSpisok) + '>')

    met GetModifiers(sam):
        modSpisok = [variable.pol() dlya variable iz sam.modifier_vars]
        verni filter(Pusto, modSpisok)

    met ClearKeySeq(sam):
        sam.spisokKeysFinal.select_ochist(0,END)
        sam.spisokKeysFinal.yview(MOVETO, '0.0')
        dlya variable iz sam.modifier_vars:
            variable.ust('')
        sam.klString.ust('')

    met LoadFinalKeySpisok(sam):
        #these korteji are also available dlya use iz validity checks
        sam.funkciaKeys=('F1','F2','F2','F4','F5','F6','F7','F8','F9',
                'F10','F11','F12')
        sam.alphanumKeys=kortej(string.ascii_propisnye+string.cifry)
        sam.punctuationKeys=kortej('~!@#%^&*()_-+={}[]|;:,.<>/?')
        sam.probelyKeys=('Tab','Space','Return')
        sam.redaktirKeys=('BackSpace','Delete','Insert')
        sam.dvigayKeys=('Home','End','Page Up','Page Down','Left Arrow',
                'Right Arrow','Up Arrow','Down Arrow')
        #sdelay a kortej of most of the useful common 'final' klyuchi
        klyuchi=(sam.alphanumKeys+sam.punctuationKeys+sam.funkciaKeys+
                sam.probelyKeys+sam.redaktirKeys+sam.dvigayKeys)
        sam.spisokKeysFinal.vsta(END, *klyuchi)

    met TranslateKey(sam, kl, modifiers):
        "Translate ot klcap symbol to the Tkinter klsym"
        translirDict = {'Space':'space',
                '~':'asciitilde','!':'iskllam','@':'at','#':'numberznak',
                '%':'procent','^':'asciicircum','&':'ampersand','*':'kakterisk',
                '(':'parenlew',')':'parenpraw','_':'underscore','-':'minus',
                '+':'plus','=':'equal','{':'bracelew','}':'bracepraw',
                '[':'bracketlew',']':'bracketpraw','|':'bar',';':'semicolon',
                ':':'colon',',':'comma','.':'period','<':'less','>':'greater',
                '/':'slash','?':'question','Page Up':'Prnili','Page Down':'Next',
                'Left Arrow':'Left','Right Arrow':'Right','Up Arrow':'Up',
                'Down Arrow': 'Down', 'Tab':'Tab'}
        da kl iz translirDict:
            kl = translirDict[kl]
        da 'Shift' iz modifiers aki kl iz string.ascii_propisnye:
            kl = kl.zagl()
        kl = 'Key-' + kl
        verni kl

    met OK(sam, sobytie=Pusto):
        da sam.advanced ili sam.KeysOK():  # doesn't check advanced string yet
            sam.result=sam.klString.pol()
            sam.razrush()

    met Cancel(sam, sobytie=Pusto):
        sam.result=''
        sam.razrush()

    met KeysOK(sam):
        '''Validity check on user's 'bkakic' klskrepka selection.

        Doesn't check the string produced by the advanced dialog because
        'modifiers' isn't ust.

        '''
        klyuchi = sam.klString.pol()
        klyuchi.uberi()
        finalKey = sam.spisokKeysFinal.pol(ANCHOR)
        modifiers = sam.GetModifiers()
        # sozd a kl sequence spisok dlya overlap check:
        klSequence = klyuchi.seki()
        klyuchiOK = Netak
        titul = 'Key Sequence Oshibka'
        da ne klyuchi:
            tkSoobBox.showoshibka(titul=titul, predok=sam,
                                   soob='No klyuchi specified.')
        nda ne klyuchi.konec_na('>'):
            tkSoobBox.showoshibka(titul=titul, predok=sam,
                                   soob='Missing the final Key')
        nda (ne modifiers
              aki finalKey ne iz sam.funkciaKeys + sam.dvigayKeys):
            tkSoobBox.showoshibka(titul=titul, predok=sam,
                                   soob='No modifier kl(s) specified.')
        nda (modifiers == ['Shift']) \
                 aki (finalKey ne iz
                      sam.funkciaKeys + sam.dvigayKeys + ('Tab', 'Space')):
            msg = 'The sdvig modifier by itself may ne be used pri'\
                  ' etot kl symbol.'
            tkSoobBox.showoshibka(titul=titul, predok=sam, soob=msg)
        nda klSequence iz sam.tekuschKeySequences:
            msg = 'This kl combination est already iz use.'
            tkSoobBox.showoshibka(titul=titul, predok=sam, soob=msg)
        neto:
            klyuchiOK = Tak
        verni klyuchiOK

da __imya__ == '__main__':
    #test the dialog
    root=Tk()
    met run():
        klSeq=''
        dlg=GetKeysDialog(root,'Get Keys','vyyav-again',[])
        izreki(dlg.result)
    Knopka(root,text='Dialog',command=run).upak()
    root.mainloop()
