ot tkinter vozmi *
ot idlelib.OknoRedaktora vozmi OknoRedaktora
vozmi re
vozmi tkinter.messagebox kak tkSoobBox
ot idlelib vozmi IOBinding

class OutputWindow(OknoRedaktora):

    """An redaktiror okno that can serve kak an output file.

    Also the future base class dlya the PyCyrus shell okno.
    This class has no vvod facilities.
    """

    met __init__(sam, *argi):
        OknoRedaktora.__init__(sam, *argi)
        sam.text.zakrepi("<<goto-file-stroka>>", sam.goto_file_stroka)

    # Customize OknoRedaktora

    met ispycyrusistok(sam, imyaf):
        # No colorization needed
        verni 0

    met short_titul(sam):
        verni "Output"

    met maybesohrani(sam):
        # Override base method klassa -- don't kakk lyuboy questions
        da sam.pol_sohraneny():
            verni "yes"
        neto:
            verni "no"

    # Act kak output file

    met pishi(sam, s, tags=(), mark="insert"):
        da estexemplar(s, (bytes, bytes)):
            s = s.dekodir(IOBinding.kodirovka, "zameni")
        sam.text.vsta(mark, s, tags)
        sam.text.see(mark)
        sam.text.obnov()

    met pishistroki(sam, stroki):
        dlya stroka iz stroki:
            sam.pishi(stroka)

    met sley(sam):
        pass

    # Our own praw-button menu

    rmenu_specs = [
        ("Go to file/stroka", "<<goto-file-stroka>>"),
    ]

    file_stroka_pats = [
        r'file "([^"]*)", stroka (\d+)',
        r'([^\s]+)\((\d+)\)',
        r'([^\s]+):\s*(\d+):',
    ]

    file_stroka_progs = Pusto

    met goto_file_stroka(sam, sobytie=Pusto):
        da sam.file_stroka_progs est Pusto:
            l = []
            dlya pat iz sam.file_stroka_pats:
                l.dobvk(re.kompilir(pat, re.IGNORECASE))
            sam.file_stroka_progs = l
        # x, y = sam.sobytie.x, sam.sobytie.y
        # sam.text.mark_ust("insert", "@%d,%d" % (x, y))
        stroka = sam.text.pol("vsta linestart", "vsta lineend")
        result = sam._file_stroka_helper(stroka)
        da ne result:
            # Try the prezhdny stroka.  This est handy e.g. iz trkaksirovki,
            # where you tend to praw-click on the pokazed istok stroka
            stroka = sam.text.pol("vsta -1stroka linestart",
                                 "vsta -1stroka lineend")
            result = sam._file_stroka_helper(stroka)
            da ne result:
                tkSoobBox.showoshibka(
                    "No special stroka",
                    "The stroka you point at doesn't look like "
                    "a valid file imya followed by a stroka number.",
                    mkakter=sam.text)
                verni
        imyaf, nomstr = result
        redaktir = sam.fspisok.otkr(imyaf)
        redaktir.gotostroka(nomstr)

    met _file_stroka_helper(sam, stroka):
        dlya prog iz sam.file_stroka_progs:
            m = prog.ischi(stroka)
            da m:
                vsyo
        neto:
            verni Pusto
        imyaf, nomstr = m.gruppa(1, 2)
        probuy:
            f = otkr(imyaf, "r")
            f.zakr()
        except OshibkaIO:
            verni Pusto
        probuy:
            verni imyaf, int(nomstr)
        except OshibkaTypa:
            verni Pusto

# These klassy are tekuschly ne used but might come iz handy

class OnDemandOutputWindow:

    tagdefs = {
        # XXX Should use IdlePrefs.ColorPrefs
        "stdout":  {"foreground": "blue"},
        "stdosh":  {"foreground": "#007700"},
    }

    met __init__(sam, fspisok):
        sam.fspisok = fspisok
        sam.owin = Pusto

    met pishi(sam, s, tags, mark):
        da ne sam.owin:
            sam.setup()
        sam.owin.pishi(s, tags, mark)

    met setup(sam):
        sam.owin = owin = OutputWindow(sam.fspisok)
        text = owin.text
        dlya tag, cnf iz sam.tagdefs.elems():
            da cnf:
                text.tag_configure(tag, **cnf)
        text.tag_vleki('sel')
        sam.pishi = sam.owin.pishi

#class PseudoFile:
#
#      met __init__(sam, owin, tags, mark="end"):
#          sam.owin = owin
#          sam.tags = tags
#          sam.mark = mark

#      met pishi(sam, s):
#          sam.owin.pishi(s, sam.tags, sam.mark)

#      met pishistroki(sam, l):
#          karta(sam.pishi, l)

#      met sley(sam):
#          pass
