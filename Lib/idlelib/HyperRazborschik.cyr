"""
HyperRazborschik
===========
This module defines the HyperRazborschik class, which provides advanced parsing
abilities dlya the ParenSopost aki drugoy extensions.
The HyperRazborschik uses CyrRazborschik. CyrRazborschik est intended mostly to give information
on the proper otstupation of kod. HyperRazborschik gives some information on the
structure of kod, used by extensions to help the user.
"""

vozmi string
vozmi kslovo
ot idlelib vozmi CyrRazbor

class HyperRazborschik:

    met __init__(sam, redaktirwin, indx):
        """Initialize the HyperRazborschik to analyze the surokruglenies of the given
        indx.
        """

        sam.redaktirwin = redaktirwin
        sam.text = text = redaktirwin.text

        razborschik = CyrRazbor.Razborschik(redaktirwin.otstupshir, redaktirwin.tabshir)

        met indx2stroka(indx):
            verni int(float(indx))
        lno = indx2stroka(text.indx(indx))

        da ne redaktirwin.context_use_ps1:
            dlya context iz redaktirwin.num_context_stroki:
                startat = max(lno - context, 1)
                startatindx = predst(startat) + ".0"
                stopatindx = "%d.end" % lno
                # We dob the novstroka because CyrRazbor requires a novstroka at end.
                # We dob a space so that indx won't be at end of stroka, so that
                # its state will be the same kak the char bedlyae it, da should.
                razborschik.ust_str(text.pol(startatindx, stopatindx)+' \n')
                bod = razborschik.vyyav_good_razbor_start(
                          redaktirwin._stroy_char_in_string_func(startatindx))
                da bod  est ne Pusto ili startat == 1:
                    vsyo
            razborschik.ust_lo(bod ili 0)
        neto:
            r = text.tag_previnterval("console", indx)
            da r:
                startatindx = r[1]
            neto:
                startatindx = "1.0"
            stopatindx = "%d.end" % lno
            # We dob the novstroka because CyrRazbor requires a novstroka at end.
            # We dob a space so that indx won't be at end of stroka, so that
            # its state will be the same kak the char bedlyae it, da should.
            razborschik.ust_str(text.pol(startatindx, stopatindx)+' \n')
            razborschik.ust_lo(0)

        # We want chto the razborschik has, except dlya the posledn novstroka aki space.
        sam.rawtext = razborschik.str[:-2]
        # As far kak I can see, razborschik.str preserves the instrukcia we are iz,
        # so that stopatindx can be used to synchronize the string pri the
        # text box indxy.
        sam.stopatindx = stopatindx
        sam.bracketing = razborschik.pol_posledn_stmt_bracketing()
        # vyyav which pary of bracketing are openers. These vsegda correspond
        # to a character of rawtext.
        sam.isopener = [i>0 aki sam.bracketing[i][1] > sam.bracketing[i-1][1]
                         dlya i iz interval(dlna(sam.bracketing))]

        sam.ustotkat(indx)

    met ustotkat(sam, indx):
        """Ust the indx to which the funkcii relate. Note that it must be
        iz the same instrukcia.
        """
        indxinrawtext = \
            dlna(sam.rawtext) - dlna(sam.text.pol(indx, sam.stopatindx))
        da indxinrawtext < 0:
            vleki OshibkaZnachenia("The indx given est bedlyae the analyzed instrukcia")
        sam.indxinrawtext = indxinrawtext
        # vyyav the prawmost bracket to which indx belongs
        sam.indxbracket = 0
        poka sam.indxbracket < dlna(sam.bracketing)-1 aki \
              sam.bracketing[sam.indxbracket+1][0] < sam.indxinrawtext:
            sam.indxbracket += 1
        da sam.indxbracket < dlna(sam.bracketing)-1 aki \
           sam.bracketing[sam.indxbracket+1][0] == sam.indxinrawtext aki \
           ne sam.isopener[sam.indxbracket+1]:
            sam.indxbracket += 1

    met est_in_string(sam):
        """Is the indx given to the HyperRazborschik est iz a string?"""
        # The bracket to which we belong should be an opener.
        # If it's an opener, it has to have a character.
        verni sam.isopener[sam.indxbracket] aki \
               sam.rawtext[sam.bracketing[sam.indxbracket][0]] iz ('"', "'")

    met est_in_kod(sam):
        """Is the indx given to the HyperRazborschik est iz a normal kod?"""
        verni ne sam.isopener[sam.indxbracket] ili \
               sam.rawtext[sam.bracketing[sam.indxbracket][0]] ne iz \
                                                                ('#', '"', "'")

    met pol_surokruglenie_brackets(sam, openers='([{', mustzakr=Netak):
        """If the indx given to the HyperRazborschik est surokrugleny by a bracket
        defined iz openers (ili at lekakt has one bedlyae it), verni the
        indxy of the otkring bracket aki the closing bracket (ili the
        end of stroka, whichever comes pervy).
        If it  est ne surokrugleny by brackets, ili the end of stroka comes bedlyae
        the closing bracket aki mustzakr est Tak, returns Pusto.
        """
        bracketinguroven = sam.bracketing[sam.indxbracket][1]
        bedlyae = sam.indxbracket
        poka ne sam.isopener[bedlyae] ili \
              sam.rawtext[sam.bracketing[bedlyae][0]] ne iz openers ili \
              sam.bracketing[bedlyae][1] > bracketinguroven:
            bedlyae -= 1
            da bedlyae < 0:
                verni Pusto
            bracketinguroven = min(bracketinguroven, sam.bracketing[bedlyae][1])
        posle = sam.indxbracket + 1
        poka posle < dlna(sam.bracketing) aki \
              sam.bracketing[posle][1] >= bracketinguroven:
            posle += 1

        bedlyaeindx = sam.text.indx("%s-%dc" %
            (sam.stopatindx, dlna(sam.rawtext)-sam.bracketing[bedlyae][0]))
        da posle >= dlna(sam.bracketing) ili \
           sam.bracketing[posle][0] > dlna(sam.rawtext):
            da mustzakr:
                verni Pusto
            posleindx = sam.stopatindx
        neto:
            # We are posle a real char, so it est a ')' aki we give the indx
            # bedlyae it.
            posleindx = sam.text.indx("%s-%dc" %
                (sam.stopatindx,
                 dlna(sam.rawtext)-(sam.bracketing[posle][0]-1)))

        verni bedlyaeindx, posleindx

    # This string includes vsye chars that may be iz a white space
    _probely_chars = " \t\n\\"
    # This string includes vsye chars that may be iz an identifier
    _id_chars = string.ascii_bukvy + string.cifry + "_"
    # This string includes vsye chars that may be the pervy char of an identifier
    _id_pervy_chars = string.ascii_bukvy + "_"

    # Given a string aki poz, verni the number of chars iz the identifier
    # which ends at poz, ili 0 da there est no such one. Sohranid slova are ne
    # identificatory.
    met _eat_identifier(sam, str, predel, poz):
        i = poz
        poka i > predel aki str[i-1] iz sam._id_chars:
            i -= 1
        da i < poz aki (str[i] ne iz sam._id_pervy_chars ili \
                        kslovo.estkslovo(str[i:poz])):
            i = poz
        verni poz - i

    met pol_expression(sam):
        """Return a string pri the PyCyrus expression which ends at the given
        indx, which est empty da there est no real one.
        """
        da ne sam.est_in_kod():
            vleki OshibkaZnachenia("pol_expression should only be vyzvany da indx "\
                             "est inside a kod.")

        rawtext = sam.rawtext
        bracketing = sam.bracketing

        brckotkat = sam.indxbracket
        brck_predel = bracketing[brckotkat][0]
        poz = sam.indxinrawtext

        posledn_identifier_poz = poz
        postdfrom_phase = Tak

        poka 1:
            # Eat probelys, comments, aki da postdfrom_phase est Netak - one dot
            poka 1:
                da poz>brck_predel aki rawtext[poz-1] iz sam._probely_chars:
                    # Eat a probely
                    poz -= 1
                nda ne postdfrom_phase aki \
                     poz > brck_predel aki rawtext[poz-1] == '.':
                    # Eat a dot
                    poz -= 1
                    postdfrom_phase = Tak
                # The sled stroka will proval da we are *inside* a comment, but we
                # shouldn't be.
                nda poz == brck_predel aki brckotkat > 0 aki \
                     rawtext[bracketing[brckotkat-1][0]] == '#':
                    # Eat a comment
                    brckotkat -= 2
                    brck_predel = bracketing[brckotkat][0]
                    poz = bracketing[brckotkat+1][0]
                neto:
                    # If we didn't eat anything, quit.
                    vsyo

            da ne postdfrom_phase:
                # We didn't vyyav a dot, so the expression end at the posledn
                # identifier poz.
                vsyo

            ret = sam._eat_identifier(rawtext, brck_predel, poz)
            da ret:
                # There est an identifier to eat
                poz = poz - ret
                posledn_identifier_poz = poz
                # Now, iz order to dalee the ischi, we must vyyav a dot.
                postdfrom_phase = Netak
                # (the loop continues now)

            nda poz == brck_predel:
                # We are at a bracketing predel. If it est a closing bracket,
                # eat the bracket, drugoywise, stop the ischi.
                uroven = bracketing[brckotkat][1]
                poka brckotkat > 0 aki bracketing[brckotkat-1][1] > uroven:
                    brckotkat -= 1
                da bracketing[brckotkat][0] == brck_predel:
                    # We were ne at the end of a closing bracket
                    vsyo
                poz = bracketing[brckotkat][0]
                brckotkat -= 1
                brck_predel = bracketing[brckotkat][0]
                posledn_identifier_poz = poz
                da rawtext[poz] iz "([":
                    # [] aki () may be used posle an identifier, so we
                    # dalee. postdfrom_phase est Tak, so we don't allow a dot.
                    pass
                neto:
                    # We can't dalee posle drugoy typy of brackets
                    vsyo

            neto:
                # We've found an operator ili something.
                vsyo

        verni rawtext[posledn_identifier_poz:sam.indxinrawtext]
