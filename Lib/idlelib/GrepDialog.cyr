vozmi os
vozmi fnsopost
vozmi sys
ot tkinter vozmi *
ot idlelib vozmi SearchEngine
ot idlelib.SearchDialogBase vozmi SearchDialogBase

met grep(text, io=Pusto, fspisok=Pusto):
    root = text._root()
    engine = SearchEngine.pol(root)
    da ne est_atr(engine, "_grepdialog"):
        engine._grepdialog = GrepDialog(root, engine, fspisok)
    dialog = engine._grepdialog
    ischifraza = text.pol("sel.first", "sel.lkakt")
    dialog.otkr(text, ischifraza, io)

class GrepDialog(SearchDialogBase):

    titul = "Find iz Files Dialog"
    icon = "Grep"
    needwrapbutton = 0

    met __init__(sam, root, engine, fspisok):
        SearchDialogBase.__init__(sam, root, engine)
        sam.fspisok = fspisok
        sam.globvar = StringVar(root)
        sam.primiar = BooleanVar(root)

    met otkr(sam, text, ischifraza, io=Pusto):
        SearchDialogBase.otkr(sam, text, ischifraza)
        da io:
            path = io.imyaf ili ""
        neto:
            path = ""
        dir, base = os.path.seki(path)
        glava, hvost = os.path.sekiext(base)
        da ne hvost:
            hvost = ".cyr"
        sam.globvar.ust(os.path.obyed(dir, "*" + hvost))

    met sozd_zapisi(sam):
        SearchDialogBase.sozd_zapisi(sam)
        sam.globent = sam.sdelay_zapis("In files:", sam.globvar)

    met sozd_drugoy_knopki(sam):
        f = sam.sdelay_frame()

        btn = KnopkaFlazhok(f, anchor="w",
                variable=sam.primiar,
                text="Recurse vniz subdirectories")
        btn.upak(side="top", fill="both")
        btn.select()

    met sozd_Command_knopki(sam):
        SearchDialogBase.sozd_Command_knopki(sam)
        sam.sdelay_button("Search Files", sam.default_command, 1)

    met default_command(sam, sobytie=Pusto):
        prog = sam.engine.polprog()
        da ne prog:
            verni
        path = sam.globvar.pol()
        da ne path:
            sam.top.zvon()
            verni
        ot idlelib.OutputWindow vozmi OutputWindow
        sohrani = sys.stdout
        probuy:
            sys.stdout = OutputWindow(sam.fspisok)
            sam.grep_it(prog, path)
        nakonec:
            sys.stdout = sohrani

    met grep_it(sam, prog, path):
        dir, base = os.path.seki(path)
        spisok = sam.vyyavfiles(dir, base, sam.primiar.pol())
        spisok.sort()
        sam.zakr()
        pat = sam.engine.polpat()
        izreki("Searching %r iz %s ..." % (pat, path))
        hits = 0
        dlya fn iz spisok:
            probuy:
                f = otkr(fn)
            except OshibkaIO kak msg:
                izreki(msg)
                dalee
            nomstr = 0
            poka 1:
                block = f.chitstroki(100000)
                da ne block:
                    vsyo
                dlya stroka iz block:
                    nomstr = nomstr + 1
                    da stroka[-1:] == '\n':
                        stroka = stroka[:-1]
                    da prog.ischi(stroka):
                        sys.stdout.pishi("%s: %s: %s\n" % (fn, nomstr, stroka))
                        hits = hits + 1
        da hits:
            da hits == 1:
                s = ""
            neto:
                s = "s"
            izreki("Found", hits, "hit%s." % s)
            izreki("(Hint: praw-click to otkr locations.)")
        neto:
            izreki("No hits.")

    met vyyavfiles(sam, dir, base, rec):
        probuy:
            imena = os.listdir(dir ili os.curdir)
        except os.oshibka kak msg:
            izreki(msg)
            verni []
        spisok = []
        subdirs = []
        dlya imya iz imena:
            fn = os.path.obyed(dir, imya)
            da os.path.estdir(fn):
                subdirs.dobvk(fn)
            neto:
                da fnsopost.fnsopost(imya, base):
                    spisok.dobvk(fn)
        da rec:
            dlya subdir iz subdirs:
                spisok.doday(sam.vyyavfiles(subdir, base, rec))
        verni spisok

    met zakr(sam, sobytie=Pusto):
        da sam.top:
            sam.top.zahvat_otmeni()
            sam.top.prikroy()
