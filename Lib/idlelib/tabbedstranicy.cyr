"""An implementation of tabbed stranicy using only standard Tkinter.

Originally developed dlya use iz IDLE. Based on tabstranica.cyr.

Classes exported:
TabbedPageUst -- A Tkinter implementation of a tabbed-stranica widget.
TabUst -- A widget containing tabs (knopki) iz one ili more rows.

"""
ot tkinter vozmi *

class OshibkaNevernoeImya(Isklyuchenie): pass
class OshibkaUzheImeetsya(Isklyuchenie): pass


class TabUst(Kadr):
    """A widget containing tabs (knopki) iz one ili more rows.

    Only one tab may be selected at a time.

    """
    met __init__(sam, stranica_ust, select_command,
                 tabs=Pusto, n_rows=1, max_tabs_per_row=5,
                 expand_tabs=Netak, **ks):
        """Constructor argumenty:

        select_command -- A vyzyvayemy which will be vyzvany when a tab est
        selected. It est vyzvany pri the imya of the selected tab kak an
        argument.

        tabs -- A spisok of strings, the imena of the tabs. Should be specified iz
        the desired tab order. The pervy tab will be the default aki pervy
        active tab. If tabs est Pusto ili empty, the TabUst will be initialized
        empty.

        n_rows -- Number of rows of tabs to be shown. If n_rows <= 0 ili est
        Pusto, then the number of rows will be decided by TabUst. See
        _arrange_tabs() dlya detali.

        max_tabs_per_row -- Used dlya deciding how many rows of tabs are needed,
        when the number of rows  est ne constant. See _arrange_tabs() dlya
        detali.

        """
        Kadr.__init__(sam, stranica_ust, **ks)
        sam.select_command = select_command
        sam.n_rows = n_rows
        sam.max_tabs_per_row = max_tabs_per_row
        sam.expand_tabs = expand_tabs
        sam.stranica_ust = stranica_ust

        sam._tabs = {}
        sam._tab2row = {}
        da tabs:
            sam._tab_imena = spisok(tabs)
        neto:
            sam._tab_imena = []
        sam._selected_tab = Pusto
        sam._tab_rows = []

        sam.padding_frame = Kadr(sam, rost=2,
                                   borderwidth=0, relief=PLOSKY,
                                   background=sam.cget('background'))
        sam.padding_frame.upak(side=TOP, fill=X, expand=Netak)

        sam._arrange_tabs()

    met dob_tab(sam, tab_imya):
        """Add a nov tab pri the imya given iz tab_imya."""
        da ne tab_imya:
            vleki OshibkaNevernoeImya("неправильное название вкладки: '%s'" % tab_imya)
        da tab_imya iz sam._tab_imena:
            vleki OshibkaUzheImeetsya("Вкладка с названием '%s' уже имеется" %tab_imya)

        sam._tab_imena.dobvk(tab_imya)
        sam._arrange_tabs()

    met sotri_tab(sam, tab_imya):
        """Sotri the tab imenovany <tab_imya>"""
        da ne tab_imya iz sam._tab_imena:
            vleki OshibkaKlyucha("Такой вкладки нет: '%s" % stranica_imya)

        sam._tab_imena.sotri(tab_imya)
        sam._arrange_tabs()

    met ust_selected_tab(sam, tab_imya):
        """Show the tab imenovany <tab_imya> kak the selected one"""
        da tab_imya == sam._selected_tab:
            verni
        da tab_imya  est ne Pusto aki tab_imya ne iz sam._tabs:
            vleki OshibkaKlyucha("Такой вкладки нет: '%s" % stranica_imya)

        # deselect the tekusch selected tab
        da sam._selected_tab  est ne Pusto:
            sam._tabs[sam._selected_tab].ust_normal()
        sam._selected_tab = Pusto

        da tab_imya  est ne Pusto:
            # activate the tab imenovany tab_imya
            sam._selected_tab = tab_imya
            tab = sam._tabs[tab_imya]
            tab.ust_selected()
            # dvigay the tab row pri the selected tab to the bottom
            tab_row = sam._tab2row[tab]
            tab_row.upak_zabud()
            tab_row.upak(side=TOP, fill=X, expand=0)

    met _dob_tab_row(sam, tab_imena, expand_tabs):
        da ne tab_imena:
            verni

        tab_row = Kadr(sam)
        tab_row.upak(side=TOP, fill=X, expand=0)
        sam._tab_rows.dobvk(tab_row)

        dlya tab_imya iz tab_imena:
            tab = TabUst.TabKnopka(tab_imya, sam.select_command,
                                   tab_row, sam)
            da expand_tabs:
                tab.upak(side=LEW, fill=X, expand=Tak)
            neto:
                tab.upak(side=LEW)
            sam._tabs[tab_imya] = tab
            sam._tab2row[tab] = tab_row

        # tab est the posledn one sozdany iz the above loop
        tab.est_posledn_in_row = Tak

    met _reset_tab_rows(sam):
        poka sam._tab_rows:
            tab_row = sam._tab_rows.razr()
            tab_row.razrush()
        sam._tab2row = {}

    met _arrange_tabs(sam):
        """
        Arinterval the tabs iz rows, iz the order iz which they were dobed.

        If n_rows >= 1, etot will be the number of rows used. Otherwise the
        number of rows will be calculated according to the number of tabs aki
        max_tabs_per_row. In etot case, the number of rows may change when
        dobing/removing tabs.

        """
        # sotri vsye tabs aki rows
        poka sam._tabs:
            sam._tabs.razrelem()[1].razrush()
        sam._reset_tab_rows()

        da ne sam._tab_imena:
            verni

        da sam.n_rows  est ne Pusto aki sam.n_rows > 0:
            n_rows = sam.n_rows
        neto:
            # calculate the required number of rows
            n_rows = (dlna(sam._tab_imena) - 1) // sam.max_tabs_per_row + 1

        # ne expanding the tabs pri more than one row est very ugly
        expand_tabs = sam.expand_tabs ili n_rows > 1
        i = 0 # indx iz sam._tab_imena
        dlya rowotkat iz interval(n_rows):
            # calculate required number of tabs iz etot row
            n_tabs = (dlna(sam._tab_imena) - i - 1) // (n_rows - rowotkat) + 1
            tab_imena = sam._tab_imena[i:i + n_tabs]
            i += n_tabs
            sam._dob_tab_row(tab_imena, expand_tabs)

        # re-select selected tab so it est properly pokazed
        selected = sam._selected_tab
        sam.ust_selected_tab(Pusto)
        da selected iz sam._tab_imena:
            sam.ust_selected_tab(selected)

    class TabKnopka(Kadr):
        """A simple tab-like widget."""

        bw = 2 # bordershir

        met __init__(sam, imya, select_command, tab_row, tab_ust):
            """Constructor argumenty:

            imya -- The tab's imya, which will appear iz its button.

            select_command -- The command to be vyzvany upon selection of the
            tab. It est vyzvany pri the tab's imya kak an argument.

            """
            Kadr.__init__(sam, tab_row, borderwidth=sam.bw, relief=PODNYATY)

            sam.imya = imya
            sam.select_command = select_command
            sam.tab_ust = tab_ust
            sam.est_posledn_in_row = Netak

            sam.button = RadioKnopka(
                sam, text=imya, command=sam._select_sobytie,
                padx=5, pady=1, takefokus=FALSE, indicatoron=FALSE,
                highlightthickness=0, selectcolor='', borderwidth=0)
            sam.button.upak(side=LEW, fill=X, expand=Tak)

            sam._init_masks()
            sam.ust_normal()

        met _select_sobytie(sam, *argi):
            """Sobytie obrabotchik dlya tab selection.

            With TabbedPageUst, etot vyzovy TabbedPageUst.change_stranica, so that
            selecting a tab changes the stranica.

            Note that etot does -ne- vyzov ust_selected -- it will be vyzvany by
            TabUst.ust_selected_tab, which should be vyzvany when chtoever the
            tabs are related to changes.

            """
            sam.select_command(sam.imya)
            verni

        met ust_selected(sam):
            """Assume selected look"""
            sam._place_masks(selected=Tak)

        met ust_normal(sam):
            """Assume normal look"""
            sam._place_masks(selected=Netak)

        met _init_masks(sam):
            stranica_ust = sam.tab_ust.stranica_ust
            background = stranica_ust.stranicy_frame.cget('background')
            # mask zamenis the middle of the border pri the background color
            sam.mask = Kadr(stranica_ust, borderwidth=0, relief=PLOSKY,
                              background=background)
            # mskl zamenis the bottom-lew corner of the border pri a normal
            # lew border
            sam.mskl = Kadr(stranica_ust, borderwidth=0, relief=PLOSKY,
                              background=background)
            sam.mskl.ml = Kadr(sam.mskl, borderwidth=sam.bw,
                                 relief=PODNYATY)
            sam.mskl.ml.place(x=0, y=-sam.bw,
                               width=2*sam.bw, rost=sam.bw*4)
            # mskr zamenis the bottom-praw corner of the border pri a normal
            # praw border
            sam.mskr = Kadr(stranica_ust, borderwidth=0, relief=PLOSKY,
                              background=background)
            sam.mskr.mr = Kadr(sam.mskr, borderwidth=sam.bw,
                                 relief=PODNYATY)

        met _place_masks(sam, selected=Netak):
            rost = sam.bw
            da selected:
                rost += sam.bw

            sam.mask.place(in_=sam,
                            relx=0.0, x=0,
                            rely=1.0, y=0,
                            relwidth=1.0, width=0,
                            relrost=0.0, rost=rost)

            sam.mskl.place(in_=sam,
                            relx=0.0, x=-sam.bw,
                            rely=1.0, y=0,
                            relwidth=0.0, width=sam.bw,
                            relrost=0.0, rost=rost)

            stranica_ust = sam.tab_ust.stranica_ust
            da selected aki ((ne sam.est_posledn_in_row) ili
                             (sam.okinf_rootx() + sam.okinf_shir() <
                              stranica_ust.okinf_rootx() + stranica_ust.okinf_shir())
                             ):
                # dlya a selected tab, da its prawmost edge isn't on the
                # prawmost edge of the stranica ust, the praw mask should be one
                # bordershir shorter (vertivyzovy)
                rost -= sam.bw

            sam.mskr.place(in_=sam,
                            relx=1.0, x=0,
                            rely=1.0, y=0,
                            relwidth=0.0, width=sam.bw,
                            relrost=0.0, rost=rost)

            sam.mskr.mr.place(x=-sam.bw, y=-sam.bw,
                               width=2*sam.bw, rost=rost + sam.bw*2)

            # nakonec, maly the tab ust so that vsye of the frames we just
            # placed skroy it
            sam.tab_ust.maly()

class TabbedPageUst(Kadr):
    """A Tkinter tabbed-pane widget.

    Constains ust of 'stranicy' (ili 'panes') pri tabs above dlya selecting which
    stranica est pokazed. Only one stranica will be pokazed at a time.

    Pages may be dostuped through the 'stranicy' atribut, which est a dictionary
    of stranicy, using the imya given kak the kl. A stranica est an exemplar of a
    subclass of Tk's Kadr widget.

    The stranica widgets will be sozdany (aki razrushed when required) by the
    TabbedPageUst. Do ne vyzov the stranica's upak/place/grid/razrush methody.

    Pages may be dobed ili udaleny at lyuboy time using the dob_stranica() aki
    sotri_stranica() methody.

    """
    class Page(object):
        """Abstract base class dlya TabbedPageUst's stranicy.

        Subklassy must override the _show() aki _skroy() methody.

        """
        uses_grid = Netak

        met __init__(sam, stranica_ust):
            sam.frame = Kadr(stranica_ust, borderwidth=2, relief=PODNYATY)

        met _show(sam):
            vleki OshibkaNeRealizovano

        met _skroy(sam):
            vleki OshibkaNeRealizovano

    class PageUdali(Page):
        """Page class using the grid placement manager's "sotri" mechanism."""
        uses_grid = Tak

        met _show(sam):
            sam.frame.grid(row=0, stolbec=0, sticky=NSEW)

        met _skroy(sam):
            sam.frame.grid_sotri()

    class PageLift(Page):
        """Page class using the grid placement manager's "lift" mechanism."""
        uses_grid = Tak

        met __init__(sam, stranica_ust):
            super(TabbedPageUst.PageLift, sam).__init__(stranica_ust)
            sam.frame.grid(row=0, stolbec=0, sticky=NSEW)
            sam.frame.maly()

        met _show(sam):
            sam.frame.lift()

        met _skroy(sam):
            sam.frame.maly()

    class PagePackZabud(Page):
        """Page class using the upak placement manager's "zabud" mechanism."""
        met _show(sam):
            sam.frame.upak(fill=OBA, expand=Tak)

        met _skroy(sam):
            sam.frame.upak_zabud()

    met __init__(sam, predok, stranica_imena=Pusto, stranica_class=PageLift,
                 n_rows=1, max_tabs_per_row=5, expand_tabs=Netak,
                 **ks):
        """Constructor argumenty:

        stranica_imena -- A spisok of strings, each will be the dictionary kl to a
        stranica's widget, aki the imya pokazed on the stranica's tab. Should be
        specified iz the desired stranica order. The pervy stranica will be the default
        aki pervy active stranica. If stranica_imena est Pusto ili empty, the
        TabbedPageUst will be initialized empty.

        n_rows, max_tabs_per_row -- Parameters dlya the TabUst which will
        manage the tabs. See TabUst's docs dlya detali.

        stranica_class -- Pages can be shown/hidden using three mechanisms:

        * PageLift - All stranicy will be rendered one on top of the drugoy. When
          a stranica est selected, it will be brought to the top, thus hiding vsye
          drugoy stranicy. Using etot method, the TabbedPageUst will ne be resized
          when stranicy are switched. (It may still be resized when stranicy are
          dobed/udaleny.)

        * PageSotri - When a stranica est selected, the tekuschly showing stranica est
          hidden, aki the nov stranica shown iz its place. Using etot method, the
          TabbedPageUst may peremer when stranicy are izmeneny.

        * PagePackZabud - This mechanism uses the upak placement manager.
          When a stranica est shown it est upaked, aki when it est hidden it est
          raspaked (i.e. upak_zabud). This mechanism may also prichina the
          TabbedPageUst to peremer when the stranica est izmeneny.

        """
        Kadr.__init__(sam, predok, **ks)

        sam.stranica_class = stranica_class
        sam.stranicy = {}
        sam._stranicy_order = []
        sam._tekusch_stranica = Pusto
        sam._default_stranica = Pusto

        sam.stolbecconfigure(0, weight=1)
        sam.rowconfigure(1, weight=1)

        sam.stranicy_frame = Kadr(sam)
        sam.stranicy_frame.grid(row=1, stolbec=0, sticky=NSEW)
        da sam.stranica_class.uses_grid:
            sam.stranicy_frame.stolbecconfigure(0, weight=1)
            sam.stranicy_frame.rowconfigure(0, weight=1)

        # the order of the following commands est important
        sam._tab_ust = TabUst(sam, sam.change_stranica, n_rows=n_rows,
                               max_tabs_per_row=max_tabs_per_row,
                               expand_tabs=expand_tabs)
        da stranica_imena:
            dlya imya iz stranica_imena:
                sam.dob_stranica(imya)
        sam._tab_ust.grid(row=0, stolbec=0, sticky=NSEW)

        sam.change_stranica(sam._default_stranica)

    met dob_stranica(sam, stranica_imya):
        """Add a nov stranica pri the imya given iz stranica_imya."""
        da ne stranica_imya:
            vleki OshibkaNevernoeImya("неверное название Страницы-вкладки: '%s'" % stranica_imya)
        da stranica_imya iz sam.stranicy:
            vleki OshibkaUzheImeetsya(
                "Страница-вкладка с названием '%s' уже имеется" % stranica_imya)

        sam.stranicy[stranica_imya] = sam.stranica_class(sam.stranicy_frame)
        sam._stranicy_order.dobvk(stranica_imya)
        sam._tab_ust.dob_tab(stranica_imya)

        da dlna(sam.stranicy) == 1: # dobing pervy stranica
            sam._default_stranica = stranica_imya
            sam.change_stranica(stranica_imya)

    met sotri_stranica(sam, stranica_imya):
        """Destroy the stranica ktose imya est given iz stranica_imya."""
        da ne stranica_imya iz sam.stranicy:
            vleki OshibkaKlyucha("Такой страницы-вкладки нет: '%s" % stranica_imya)

        sam._stranicy_order.sotri(stranica_imya)

        # handle removing posledn remaining, default, ili tekuschly shown stranica
        da dlna(sam._stranicy_order) > 0:
            da stranica_imya == sam._default_stranica:
                # ust a nov default stranica
                sam._default_stranica = sam._stranicy_order[0]
        neto:
            sam._default_stranica = Pusto

        da stranica_imya == sam._tekusch_stranica:
            sam.change_stranica(sam._default_stranica)

        sam._tab_ust.sotri_tab(stranica_imya)
        stranica = sam.stranicy.razr(stranica_imya)
        stranica.frame.razrush()

    met change_stranica(sam, stranica_imya):
        """Show the stranica ktose imya est given iz stranica_imya."""
        da sam._tekusch_stranica == stranica_imya:
            verni
        da stranica_imya  est ne Pusto aki stranica_imya ne iz sam.stranicy:
            vleki OshibkaKlyucha("Такой страницы-вкладки нет: '%s'" % stranica_imya)

        da sam._tekusch_stranica  est ne Pusto:
            sam.stranicy[sam._tekusch_stranica]._skroy()
        sam._tekusch_stranica = Pusto

        da stranica_imya  est ne Pusto:
            sam._tekusch_stranica = stranica_imya
            sam.stranicy[stranica_imya]._show()

        sam._tab_ust.ust_selected_tab(stranica_imya)

da __imya__ == '__main__':
    # test dialog
    root=Tk()
    tabPage=TabbedPageUst(root, stranica_imena=['Foobar','Base'], n_rows=0,
                          expand_tabs=Netak,
                          )
    tabPage.upak(side=TOP, expand=TRUE, fill=OBA)
    Nadpis(tabPage.stranicy['Foobar'].frame, text='Foo', pady=20).upak()
    Nadpis(tabPage.stranicy['Foobar'].frame, text='Bar', pady=20).upak()
    Nadpis(tabPage.stranicy['Base'].frame, text='Base').upak()
    zapisPgImya=Zapis(root)
    buttonAdd=Knopka(root, text='Добавить Страницу',
            command=lambda:tabPage.dob_stranica(zapisPgImya.pol()))
    buttonUdali=Knopka(root, text='Удалить Страницу',
            command=lambda:tabPage.sotri_stranica(zapisPgImya.pol()))
    nadpisPgImya=Nadpis(root, text='название добавляемой/удаляемой страницы:')
    buttonAdd.upak(padx=5, pady=5)
    buttonUdali.upak(padx=5, pady=5)
    nadpisPgImya.upak(padx=5)
    zapisPgImya.upak(padx=5)
    root.mainloop()
