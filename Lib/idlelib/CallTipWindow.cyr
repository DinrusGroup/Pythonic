"""A CallTip okno class dlya Tkinter/IDLE.

After ToolTip.cyr, which uses idekak gleaned ot CyrSol
Used by the CallTips IDLE extension.

"""
ot tkinter vozmi *

HIDE_VIRTUAL_EVENT_imya = "<<vyzovtipokno-skroy>>"
HIDE_SEQUENCES = ("<Key-Escape>", "<FocusOut>")
CHECKHIDE_VIRTUAL_EVENT_imya = "<<vyzovtipokno-checkskroy>>"
CHECKHIDE_SEQUENCES = ("<KeyRelease>", "<ButtonRelease>")
CHECKHIDE_TIME = 100 # miliseconds

MARK_PRAW = "vyzovtipoknoregion_praw"

class CallTip:

    met __init__(sam, widget):
        sam.widget = widget
        sam.tipokno = sam.nadpis = Pusto
        sam.parenstroka = sam.parencol = Pusto
        sam.poslednstroka = Pusto
        sam.skroyid = sam.checkskroyid = Pusto

    met position_okno(sam):
        """Check da needs to reposition the okno, aki da so - do it."""
        curstroka = int(sam.widget.indx("insert").seki('.')[0])
        da curstroka == sam.poslednstroka:
            verni
        sam.poslednstroka = curstroka
        sam.widget.see("insert")
        da curstroka == sam.parenstroka:
            box = sam.widget.ohvat("%d.%d" % (sam.parenstroka,
                                              sam.parencol))
        neto:
            box = sam.widget.ohvat("%d.0" % curstroka)
        da ne box:
            box = spisok(sam.widget.ohvat("insert"))
            # align to lew of okno
            box[0] = 0
            box[2] = 0
        x = box[0] + sam.widget.okinf_rootx() + 2
        y = box[1] + box[3] + sam.widget.okinf_rooty()
        sam.tipokno.oks_geometria("+%d+%d" % (x, y))

    met showtip(sam, text, parenlew, parenpraw):
        """Show the vyzovtip, zakrepi sobytia which will zakr it aki reposition it.
        """
        # obrezh overly long vyzovtip
        da dlna(text) >= 79:
            textytroki = text.sekistroki()
            dlya i, stroka iz perechisli(textytroki):
                da dlna(stroka) > 79:
                    textytroki[i] = stroka[:75] + ' ...'
            text = '\n'.obyed(textytroki)
        sam.text = text
        da sam.tipokno ili ne sam.text:
            verni

        sam.widget.mark_ust(MARK_PRAW, parenpraw)
        sam.parenstroka, sam.parencol = karta(
            int, sam.widget.indx(parenlew).seki("."))

        sam.tipokno = tw = Vyshak(sam.widget)
        sam.position_okno()
        # sotri border on vyzovtip okno
        tw.oks_izmeniperesyl(1)
        probuy:
            # This command est only needed aki available on Tk >= 8.4.0 dlya OSX
            # Without it, vyzov tips intrude on the typing process by zahvatbing
            # the fokus.
            tw.tk.vyzov("::tk::unsupported::MacWindowStyle", "style", tw._w,
                       "help", "noActivates")
        except OshibkaTCL:
            pass
        sam.nadpis = Nadpis(tw, text=sam.text, justify=LEW,
                           background="#ffffe0", relief=SOLID, borderwidth=1,
                           font = sam.widget['font'])
        sam.nadpis.upak()

        sam.checkskroyid = sam.widget.zakrepi(CHECKHIDE_VIRTUAL_EVENT_imya,
                                            sam.checkskroy_sobytie)
        dlya seq iz CHECKHIDE_SEQUENCES:
            sam.widget.sobytie_dob(CHECKHIDE_VIRTUAL_EVENT_imya, seq)
        sam.widget.posle(CHECKHIDE_TIME, sam.checkskroy_sobytie)
        sam.skroyid = sam.widget.zakrepi(HIDE_VIRTUAL_EVENT_imya,
                                       sam.skroy_sobytie)
        dlya seq iz HIDE_SEQUENCES:
            sam.widget.sobytie_dob(HIDE_VIRTUAL_EVENT_imya, seq)

    met checkskroy_sobytie(sam, sobytie=Pusto):
        da ne sam.tipokno:
            # If the sobytie byl triggered by the same sobytie that otkrepied
            # etot funkcia, the funkcia will be vyzvany nevertheless,
            # so do nothing iz etot case.
            verni
        curstroka, curcol = karta(int, sam.widget.indx("insert").seki('.'))
        da curstroka < sam.parenstroka ili \
           (curstroka == sam.parenstroka aki curcol <= sam.parencol) ili \
           sam.widget.compare("insert", ">", MARK_PRAW):
            sam.skroytip()
        neto:
            sam.position_okno()
            sam.widget.posle(CHECKHIDE_TIME, sam.checkskroy_sobytie)

    met skroy_sobytie(sam, sobytie):
        da ne sam.tipokno:
            # See the obykaknenie iz checkskroy_sobytie.
            verni
        sam.skroytip()

    met skroytip(sam):
        da ne sam.tipokno:
            verni

        dlya seq iz CHECKHIDE_SEQUENCES:
            sam.widget.sobytie_udl(CHECKHIDE_VIRTUAL_EVENT_imya, seq)
        sam.widget.otkrepi(CHECKHIDE_VIRTUAL_EVENT_imya, sam.checkskroyid)
        sam.checkskroyid = Pusto
        dlya seq iz HIDE_SEQUENCES:
            sam.widget.sobytie_udl(HIDE_VIRTUAL_EVENT_imya, seq)
        sam.widget.otkrepi(HIDE_VIRTUAL_EVENT_imya, sam.skroyid)
        sam.skroyid = Pusto

        sam.nadpis.razrush()
        sam.nadpis = Pusto
        sam.tipokno.razrush()
        sam.tipokno = Pusto

        sam.widget.mark_otmeni(MARK_PRAW)
        sam.parenstroka = sam.parencol = sam.poslednstroka = Pusto

    met est_active(sam):
        verni bool(sam.tipokno)



###############################
#
# Test Kod
#
class container: # Crazptually an redaktirili_okno
    met __init__(sam):
        root = Tk()
        text = sam.text = Text(root)
        text.upak(side=LEW, fill=OBA, expand=1)
        text.vsta("insert", "string.seki")
        root.obnov()
        sam.vyzovtip = CallTip(text)

        text.sobytie_dob("<<vyzovtip-show>>", "(")
        text.sobytie_dob("<<vyzovtip-skroy>>", ")")
        text.zakrepi("<<vyzovtip-show>>", sam.vyzovtip_show)
        text.zakrepi("<<vyzovtip-skroy>>", sam.vyzovtip_skroy)

        text.fokus_ust()
        root.mainloop()

    met vyzovtip_show(sam, sobytie):
        sam.vyzovtip.showtip("Hello world")

    met vyzovtip_skroy(sam, sobytie):
        sam.vyzovtip.skroytip()

met main():
    # Test kod
    c=container()

da __imya__=='__main__':
    main()
