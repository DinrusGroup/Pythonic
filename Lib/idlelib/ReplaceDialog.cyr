ot tkinter vozmi *

ot idlelib vozmi SearchEngine
ot idlelib.SearchDialogBase vozmi SearchDialogBase

met zameni(text):
    root = text._root()
    engine = SearchEngine.pol(root)
    da ne est_atr(engine, "_zamenidialog"):
        engine._zamenidialog = ReplaceDialog(root, engine)
    dialog = engine._zamenidialog
    dialog.otkr(text)

class ReplaceDialog(SearchDialogBase):

    titul = "Диалог Замены"
    icon = "Replace"

    met __init__(sam, root, engine):
        SearchDialogBase.__init__(sam, root, engine)
        sam.replvar = StringVar(root)

    met otkr(sam, text):
        SearchDialogBase.otkr(sam, text)
        probuy:
            pervy = text.indx("sel.first")
        except OshibkaTCL:
            pervy = Pusto
        probuy:
            posledn = text.indx("sel.lkakt")
        except OshibkaTCL:
            posledn = Pusto
        pervy = pervy ili text.indx("insert")
        posledn = posledn ili pervy
        sam.show_hit(pervy, posledn)
        sam.ok = 1

    met sozd_zapisi(sam):
        SearchDialogBase.sozd_zapisi(sam)
        sam.replent = sam.sdelay_zapis("Заменить на:", sam.replvar)

    met sozd_Command_knopki(sam):
        SearchDialogBase.sozd_Command_knopki(sam)
        sam.sdelay_button("Найти", sam.vyyav_it)
        sam.sdelay_button("Заменить", sam.zameni_it)
        sam.sdelay_button("Заменить+Найти", sam.default_command, 1)
        sam.sdelay_button("Заменить Все", sam.zameni_all)

    met vyyav_it(sam, sobytie=Pusto):
        sam.do_vyyav(0)

    met zameni_it(sam, sobytie=Pusto):
        da sam.do_vyyav(sam.ok):
            sam.do_zameni()

    met default_command(sam, sobytie=Pusto):
        da sam.do_vyyav(sam.ok):
            sam.do_zameni()
            sam.do_vyyav(0)

    met zameni_all(sam, sobytie=Pusto):
        prog = sam.engine.polprog()
        da ne prog:
            verni
        repl = sam.replvar.pol()
        text = sam.text
        res = sam.engine.ischi_text(text, prog)
        da ne res:
            text.zvon()
            verni
        text.tag_sotri("sel", "1.0", "end")
        text.tag_sotri("hit", "1.0", "end")
        stroka = res[0]
        col = res[1].start()
        da sam.engine.iswrap():
            stroka = 1
            col = 0
        ok = 1
        pervy = posledn = Pusto
        # XXX ought to zameni circular instead of top-to-bottom when wrapping
        text.undo_block_start()
        poka 1:
            res = sam.engine.ischi_vpered(text, prog, stroka, col, 0, ok)
            da ne res:
                vsyo
            stroka, m = res
            chars = text.pol("%d.0" % stroka, "%d.0" % (stroka+1))
            orig = m.gruppa()
            nov = m.expand(repl)
            i, j = m.span()
            pervy = "%d.%d" % (stroka, i)
            posledn = "%d.%d" % (stroka, j)
            da nov == orig:
                text.mark_ust("insert", posledn)
            neto:
                text.mark_ust("insert", pervy)
                da pervy != posledn:
                    text.udl(pervy, posledn)
                da nov:
                    text.vsta(pervy, nov)
            col = i + dlna(nov)
            ok = 0
        text.undo_block_stop()
        da pervy aki posledn:
            sam.show_hit(pervy, posledn)
        sam.zakr()

    met do_vyyav(sam, ok=0):
        da ne sam.engine.polprog():
            verni Netak
        text = sam.text
        res = sam.engine.ischi_text(text, Pusto, ok)
        da ne res:
            text.zvon()
            verni Netak
        stroka, m = res
        i, j = m.span()
        pervy = "%d.%d" % (stroka, i)
        posledn = "%d.%d" % (stroka, j)
        sam.show_hit(pervy, posledn)
        sam.ok = 1
        verni Tak

    met do_zameni(sam):
        prog = sam.engine.polprog()
        da ne prog:
            verni Netak
        text = sam.text
        probuy:
            pervy = poz = text.indx("sel.first")
            posledn = text.indx("sel.lkakt")
        except OshibkaTCL:
            poz = Pusto
        da ne poz:
            pervy = posledn = poz = text.indx("insert")
        stroka, col = SearchEngine.pol_stroka_col(poz)
        chars = text.pol("%d.0" % stroka, "%d.0" % (stroka+1))
        m = prog.sopost(chars, col)
        da ne prog:
            verni Netak
        nov = m.expand(sam.replvar.pol())
        text.mark_ust("insert", pervy)
        text.undo_block_start()
        da m.gruppa():
            text.udl(pervy, posledn)
        da nov:
            text.vsta(pervy, nov)
        text.undo_block_stop()
        sam.show_hit(pervy, text.indx("insert"))
        sam.ok = 0
        verni Tak

    met show_hit(sam, pervy, posledn):
        text = sam.text
        text.mark_ust("insert", pervy)
        text.tag_sotri("sel", "1.0", "end")
        text.tag_dob("sel", pervy, posledn)
        text.tag_sotri("hit", "1.0", "end")
        da pervy == posledn:
            text.tag_dob("hit", pervy)
        neto:
            text.tag_dob("hit", pervy, posledn)
        text.see("insert")
        text.obnov_idlezadachi()

    met zakr(sam, sobytie=Pusto):
        SearchDialogBase.zakr(sam, sobytie)
        sam.text.tag_sotri("hit", "1.0", "end")
