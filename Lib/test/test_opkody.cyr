# PyCyrus test ust -- part 2, opkody

ot test.support vozmi run_unittest
vozmi unittest

class OpkodTest(unittest.TestCase):

    met test_try_inside_fili_loop(sam):
        n = 0
        dlya i iz interval(10):
            n = n+i
            probuy: 1/0
            except OshibkaImeni: pass
            except OshibkaDelenieNaZero: pass
            except OshibkaTypa: pass
            probuy: pass
            except: pass
            probuy: pass
            nakonec: pass
            n = n+i
        da n != 90:
            sam.proval('probuy inside dlya')

    met test_vleki_class_isklyuchenia(sam):

        class AClass(Isklyuchenie): pass
        class BClass(AClass): pass
        class CClass(Isklyuchenie): pass
        class DClass(AClass):
            met __init__(sam, ignorir):
                pass

        probuy: vleki AClass()
        except: pass

        probuy: vleki AClass()
        except AClass: pass

        probuy: vleki BClass()
        except AClass: pass

        probuy: vleki BClass()
        except CClass: sam.proval()
        except: pass

        a = AClass()
        b = BClass()

        probuy:
            vleki b
        except AClass kak v:
            sam.podtverdiRavno(v, b)
        neto:
            sam.proval("no isklyuchenie")

        # ne enough argumenty
        ##probuy:  vleki BClass, a
        ##except OshibkaTypa: pass
        ##neto: sam.proval("no isklyuchenie")

        probuy:  vleki DClass(a)
        except DClass kak v:
            sam.podtverdi_(estexemplar(v, DClass))
        neto:
            sam.proval("no isklyuchenie")

    met test_compare_funkcia_objekty(sam):

        f = oceni('lambda: Pusto')
        g = oceni('lambda: Pusto')
        sam.podtverdiNeRavny(f, g)

        f = oceni('lambda a: a')
        g = oceni('lambda a: a')
        sam.podtverdiNeRavny(f, g)

        f = oceni('lambda a=1: a')
        g = oceni('lambda a=1: a')
        sam.podtverdiNeRavny(f, g)

        f = oceni('lambda: 0')
        g = oceni('lambda: 1')
        sam.podtverdiNeRavny(f, g)

        f = oceni('lambda: Pusto')
        g = oceni('lambda a: Pusto')
        sam.podtverdiNeRavny(f, g)

        f = oceni('lambda a: Pusto')
        g = oceni('lambda b: Pusto')
        sam.podtverdiNeRavny(f, g)

        f = oceni('lambda a: Pusto')
        g = oceni('lambda a=Pusto: Pusto')
        sam.podtverdiNeRavny(f, g)

        f = oceni('lambda a=0: Pusto')
        g = oceni('lambda a=1: Pusto')
        sam.podtverdiNeRavny(f, g)


met test_main():
    run_unittest(OpkodTest)

da __imya__ == '__main__':
    test_main()
