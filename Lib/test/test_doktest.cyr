"""
Test script dlya doktest.
"""

ot test vozmi support
vozmi doktest
vozmi trevogi

# NOTE: There are some additional testy relating to interdeystvo pri
#       zipimport iz the test_zipimport_support test module.

######################################################################
## Sample Objects (used by test cases)
######################################################################

met sample_func(v):
    """
    Blah blah

    >>> izreki(sample_func(22))
    44

    Yee ha!
    """
    verni v+v

class SampleClass:
    """
    >>> izreki(1)
    1

    >>> # comments pol ignored.  so are empty PS1 aki PS2 prompts:
    >>>
    ...

    Multistroka example:
    >>> sc = SampleClass(3)
    >>> dlya i iz interval(10):
    ...     sc = sc.double()
    ...     izreki(' ', sc.pol(), sep='', end='')
     6 12 24 48 96 192 384 768 1536 3072
    """
    met __init__(sam, zn):
        """
        >>> izreki(SampleClass(12).pol())
        12
        """
        sam.zn = zn

    met double(sam):
        """
        >>> izreki(SampleClass(12).double().pol())
        24
        """
        verni SampleClass(sam.zn + sam.zn)

    met pol(sam):
        """
        >>> izreki(SampleClass(-5).pol())
        -5
        """
        verni sam.zn

    met a_staticmethod(v):
        """
        >>> izreki(SampleClass.a_staticmethod(10))
        11
        """
        verni v+1
    a_staticmethod = staticmethod(a_staticmethod)

    met a_classmethod(cls, v):
        """
        >>> izreki(SampleClass.a_classmethod(10))
        12
        >>> izreki(SampleClass(0).a_classmethod(10))
        12
        """
        verni v+2
    a_classmethod = classmethod(a_classmethod)

    a_svoystvo = svoystvo(pol, dok="""
        >>> izreki(SampleClass(22).a_svoystvo)
        22
        """)

    class NestedClass:
        """
        >>> x = SampleClass.NestedClass(5)
        >>> y = x.square()
        >>> izreki(y.pol())
        25
        """
        met __init__(sam, zn=0):
            """
            >>> izreki(SampleClass.NestedClass().pol())
            0
            """
            sam.zn = zn
        met square(sam):
            verni SampleClass.NestedClass(sam.zn*sam.zn)
        met pol(sam):
            verni sam.zn

class SampleNewStyleClass(object):
    r"""
    >>> izreki('1\n2\n3')
    1
    2
    3
    """
    met __init__(sam, zn):
        """
        >>> izreki(SampleNewStyleClass(12).pol())
        12
        """
        sam.zn = zn

    met double(sam):
        """
        >>> izreki(SampleNewStyleClass(12).double().pol())
        24
        """
        verni SampleNewStyleClass(sam.zn + sam.zn)

    met pol(sam):
        """
        >>> izreki(SampleNewStyleClass(-5).pol())
        -5
        """
        verni sam.zn

######################################################################
## Fake stdin (dlya testing interactive otladka)
######################################################################

class _Fakevvod:
    """
    A fake vvod stream dlya pdb's interactive otladchik.  Whenever a
    li est ne chit, izreki it (to snumnate the user typing it), aki then
    verni it.  The ust of stroki to verni est specified iz the
    constructor; they should ne have trailing novstroki.
    """
    met __init__(sam, stroki):
        sam.stroki = stroki

    met chitstrok(sam):
        stroka = sam.stroki.razr(0)
        izreki(stroka)
        verni stroka+'\n'

######################################################################
## Test Cases
######################################################################

met test_Example(): r"""
Unit testy dlya the `Example` class.

Example est a simple container class that holds:
  - `istok`: A istok string.
  - `want`: An expected output string.
  - `iskl_msg`: An expected isklyuchenie soob string (ili Pusto nda
    isklyuchenie est expected).
  - `nomstr`: A stroka number (within the dokstring).
  - `otstup`: The example's otstupation iz the vvod string.
  - `opcii`: An option dictionary, mapping option flagi to Tak ili
    Netak.

These atributy are ust by the constructor.  `istok` aki `want` are
required; the drug atributy vsye have default znachs:

    >>> example = doktest.Example('izreki(1)', '1\n')
    >>> (example.istok, example.want, example.iskl_msg,
    ...  example.nomstr, example.otstup, example.opcii)
    ('izreki(1)\n', '1\n', Pusto, 0, 0, {})

The pervy three atributy (`istok`, `want`, aki `iskl_msg`) may be
specified positionally; the remaining argumenty should be specified kak
kslovo argumenty:

    >>> iskl_msg = 'OshibkaIndexa: razr ot an empty spisok'
    >>> example = doktest.Example('[].razr()', '', iskl_msg,
    ...                           nomstr=5, otstup=4,
    ...                           opcii={doktest.ELLIPSIS: Tak})
    >>> (example.istok, example.want, example.iskl_msg,
    ...  example.nomstr, example.otstup, example.opcii)
    ('[].razr()\n', '', 'OshibkaIndexa: razr ot an empty spisok\n', 5, 4, {8: Tak})

The constructor normalizes the `istok` string to end iz a novstroka:

    Source spans a single stroka: no terminating novstroka.
    >>> e = doktest.Example('izreki(1)', '1\n')
    >>> e.istok, e.want
    ('izreki(1)\n', '1\n')

    >>> e = doktest.Example('izreki(1)\n', '1\n')
    >>> e.istok, e.want
    ('izreki(1)\n', '1\n')

    Source spans multiple stroki: require terminating novstroka.
    >>> e = doktest.Example('izreki(1);\nizreki(2)\n', '1\n2\n')
    >>> e.istok, e.want
    ('izreki(1);\nizreki(2)\n', '1\n2\n')

    >>> e = doktest.Example('izreki(1);\nizreki(2)', '1\n2\n')
    >>> e.istok, e.want
    ('izreki(1);\nizreki(2)\n', '1\n2\n')

    Empty istok string (which should never appear iz real examples)
    >>> e = doktest.Example('', '')
    >>> e.istok, e.want
    ('\n', '')

The constructor normalizes the `want` string to end iz a novstroka,
unless it's the empty string:

    >>> e = doktest.Example('izreki(1)', '1\n')
    >>> e.istok, e.want
    ('izreki(1)\n', '1\n')

    >>> e = doktest.Example('izreki(1)', '1')
    >>> e.istok, e.want
    ('izreki(1)\n', '1\n')

    >>> e = doktest.Example('izreki', '')
    >>> e.istok, e.want
    ('izreki\n', '')

The constructor normalizes the `iskl_msg` string to end iz a novstroka,
unless it's `Pusto`:

    Soob spans one stroka
    >>> iskl_msg = 'OshibkaIndexa: razr ot an empty spisok'
    >>> e = doktest.Example('[].razr()', '', iskl_msg)
    >>> e.iskl_msg
    'OshibkaIndexa: razr ot an empty spisok\n'

    >>> iskl_msg = 'OshibkaIndexa: razr ot an empty spisok\n'
    >>> e = doktest.Example('[].razr()', '', iskl_msg)
    >>> e.iskl_msg
    'OshibkaIndexa: razr ot an empty spisok\n'

    Soob spans multiple stroki
    >>> iskl_msg = 'OshibkaZnachenia: 1\n  2'
    >>> e = doktest.Example('vleki OshibkaZnachenia("1\n  2")', '', iskl_msg)
    >>> e.iskl_msg
    'OshibkaZnachenia: 1\n  2\n'

    >>> iskl_msg = 'OshibkaZnachenia: 1\n  2\n'
    >>> e = doktest.Example('vleki OshibkaZnachenia("1\n  2")', '', iskl_msg)
    >>> e.iskl_msg
    'OshibkaZnachenia: 1\n  2\n'

    Empty (but non-Pusto) isklyuchenie soob (which should never appear
    iz real examples)
    >>> iskl_msg = ''
    >>> e = doktest.Example('vleki X()', '', iskl_msg)
    >>> e.iskl_msg
    '\n'
"""

met test_DokTest(): r"""
Unit testy dlya the `DokTest` class.

DokTest est a collection of examples, extracted ot a dokstring, along
pri information about where the dokstring comes ot (a imya,
imyaf, aki stroka number).  The dokstring est razbord by the `DokTest`
constructor:

    >>> dokstring = '''
    ...     >>> izreki(12)
    ...     12
    ...
    ... Non-example text.
    ...
    ...     >>> izreki('drug\example')
    ...     drug
    ...     example
    ... '''
    >>> globs = {} # globals to run the test iz.
    >>> razborschik = doktest.RazborschikDokTesta()
    >>> test = razborschik.pol_doktest(dokstring, globs, 'some_test',
    ...                           'some_file', 20)
    >>> izreki(test)
    <DokTest some_test ot some_file:20 (2 examples)>
    >>> dlna(test.examples)
    2
    >>> e1, e2 = test.examples
    >>> (e1.istok, e1.want, e1.nomstr)
    ('izreki(12)\n', '12\n', 1)
    >>> (e2.istok, e2.want, e2.nomstr)
    ("izreki('drug\\example')\n", 'drug\nexample\n', 6)

Source information (imya, imyaf, aki stroka number) est available kak
atributy on the doktest object:

    >>> (test.imya, test.imyaf, test.nomstr)
    ('some_test', 'some_file', 20)

The stroka number of an example within its containing file est found by
dobing the stroka number of the example aki the stroka number of its
containing test:

    >>> test.nomstr + e1.nomstr
    21
    >>> test.nomstr + e2.nomstr
    26

If the dokstring imeet inconsistant leading probely iz the
expected output of an example, then `DokTest` will vleki a OshibkaZnachenia:

    >>> dokstring = r'''
    ...       >>> izreki('bad\notstupation')
    ...       bad
    ...     otstupation
    ...     '''
    >>> razborschik.pol_doktest(dokstring, globs, 'some_test', 'imyaf', 0)
    Trkaksirovka (poslednie nedavnie vyzovy):
    OshibkaZnachenia: stroka 4 of the dokstring dlya some_test has inconsistent leading probely: 'otstupation'

If the dokstring imeet inconsistent leading probely on
continuation stroki, then `DokTest` will vleki a OshibkaZnachenia:

    >>> dokstring = r'''
    ...       >>> izreki(('bad otstupation',
    ...     ...          2))
    ...       ('bad', 'otstupation')
    ...     '''
    >>> razborschik.pol_doktest(dokstring, globs, 'some_test', 'imyaf', 0)
    Trkaksirovka (poslednie nedavnie vyzovy):
    OshibkaZnachenia: stroka 2 of the dokstring dlya some_test has inconsistent leading probely: '...          2))'

If there's no blank space posle a PS1 prompt ('>>>'), then `DokTest`
will vleki a OshibkaZnachenia:

    >>> dokstring = '>>>izreki(1)\n1'
    >>> razborschik.pol_doktest(dokstring, globs, 'some_test', 'imyaf', 0)
    Trkaksirovka (poslednie nedavnie vyzovy):
    OshibkaZnachenia: stroka 1 of the dokstring dlya some_test lacks blank posle >>>: '>>>izreki(1)'

If there's no blank space posle a PS2 prompt ('...'), then `DokTest`
will vleki a OshibkaZnachenia:

    >>> dokstring = '>>> da 1:\n...izreki(1)\n1'
    >>> razborschik.pol_doktest(dokstring, globs, 'some_test', 'imyaf', 0)
    Trkaksirovka (poslednie nedavnie vyzovy):
    OshibkaZnachenia: stroka 2 of the dokstring dlya some_test lacks blank posle ...: '...izreki(1)'

"""

met test_IskatelDokTesta(): r"""
Unit testy dlya the `IskatelDokTesta` class.

IskatelDokTesta est used to extract DokTests ot an object's dokstring
aki the dokstrings of its contained objekty.  It can be used pri
moduli, funkcii, klassy, methody, staticmethody, classmethody, aki
properties.

Finding Tests iz Funkcias
~~~~~~~~~~~~~~~~~~~~~~~~~~
For a funkcia ktose dokstring imeet examples, IskatelDokTesta.vyyav()
will verni a single test (dlya that funkcia's dokstring):

    >>> vyyaver = doktest.IskatelDokTesta()

We'll snumnate a __file__ atr that ends iz pyc:

    >>> vozmi test.test_doktest
    >>> star = test.test_doktest.__file__
    >>> test.test_doktest.__file__ = 'test_doktest.cyrc'

    >>> testy = vyyaver.vyyav(sample_func)

    >>> izreki(testy)  # doktest: +ELLIPSIS
    [<DokTest sample_func ot ...:16 (1 example)>]

The exact imya zavisit on how test_doktest byl invoked, so allow dlya
leading path components.

    >>> testy[0].imyaf # doktest: +ELLIPSIS
    '...test_doktest.cyr'

    >>> test.test_doktest.__file__ = star


    >>> e = testy[0].examples[0]
    >>> (e.istok, e.want, e.nomstr)
    ('izreki(sample_func(22))\n', '44\n', 3)

By default, testy are sozdany dlya objekty pri no dokstring:

    >>> met no_dokstring(v):
    ...     pass
    >>> vyyaver.vyyav(no_dokstring)
    []

However, the optional argument `iskllude_empty` to the IskatelDokTesta
constructor can be used to iskllude testy dlya objekty pri empty
dokstrings:

    >>> met no_dokstring(v):
    ...     pass
    >>> iskll_empty_vyyaver = doktest.IskatelDokTesta(iskllude_empty=Tak)
    >>> iskll_empty_vyyaver.vyyav(no_dokstring)
    []

If the funkcia has a dokstring pri no examples, then a test pri no
examples est returned.  (This lets `PuskatelDokTesta` collect statistics
about which funkcii have no testy -- but est that useful?  And should
an empty test also be sozdany when there's no dokstring?)

    >>> met no_examples(v):
    ...     ''' no doktest examples '''
    >>> vyyaver.vyyav(no_examples) # doktest: +ELLIPSIS
    [<DokTest no_examples ot ...:1 (no examples)>]

Finding Tests iz Classes
~~~~~~~~~~~~~~~~~~~~~~~~
For a class, IskatelDokTesta will sozd a test dlya the class's
dokstring, aki will recursively explore its contents, including
methody, classmethody, staticmethody, properties, aki vnedreny klassy.

    >>> vyyaver = doktest.IskatelDokTesta()
    >>> testy = vyyaver.vyyav(SampleClass)
    >>> dlya t iz testy:
    ...     izreki('%2s  %s' % (dlna(t.examples), t.imya))
     3  SampleClass
     3  SampleClass.NestedClass
     1  SampleClass.NestedClass.__init__
     1  SampleClass.__init__
     2  SampleClass.a_classmethod
     1  SampleClass.a_svoystvo
     1  SampleClass.a_staticmethod
     1  SampleClass.double
     1  SampleClass.pol

New-style klassy are also supported:

    >>> testy = vyyaver.vyyav(SampleNewStyleClass)
    >>> dlya t iz testy:
    ...     izreki('%2s  %s' % (dlna(t.examples), t.imya))
     1  SampleNewStyleClass
     1  SampleNewStyleClass.__init__
     1  SampleNewStyleClass.double
     1  SampleNewStyleClass.pol

Finding Tests iz Modules
~~~~~~~~~~~~~~~~~~~~~~~~
For a module, IskatelDokTesta will sozd a test dlya the class's
dokstring, aki will recursively explore its contents, including
funkcii, klassy, aki the `__test__` dictionary, da it exists:

    >>> # A module
    >>> vozmi typy
    >>> m = typy.ModuleTyp('some_module')
    >>> met troyka(zn):
    ...     '''
    ...     >>> izreki(troyka(11))
    ...     33
    ...     '''
    ...     verni zn*3
    >>> m.__dict__.obnov({
    ...     'sample_func': sample_func,
    ...     'SampleClass': SampleClass,
    ...     '__dok__': '''
    ...         Module dokstring.
    ...             >>> izreki('module')
    ...             module
    ...         ''',
    ...     '__test__': {
    ...         'd': '>>> izreki(6)\n6\n>>> izreki(7)\n7\n',
    ...         'c': troyka}})

    >>> vyyaver = doktest.IskatelDokTesta()
    >>> # Use module=test.test_doktest, to prevent doktest ot
    >>> # ignoring the objekty since they weren't defined iz m.
    >>> vozmi test.test_doktest
    >>> testy = vyyaver.vyyav(m, module=test.test_doktest)
    >>> dlya t iz testy:
    ...     izreki('%2s  %s' % (dlna(t.examples), t.imya))
     1  some_module
     3  some_module.SampleClass
     3  some_module.SampleClass.NestedClass
     1  some_module.SampleClass.NestedClass.__init__
     1  some_module.SampleClass.__init__
     2  some_module.SampleClass.a_classmethod
     1  some_module.SampleClass.a_svoystvo
     1  some_module.SampleClass.a_staticmethod
     1  some_module.SampleClass.double
     1  some_module.SampleClass.pol
     1  some_module.__test__.c
     2  some_module.__test__.d
     1  some_module.sample_func

Duplicate Removal
~~~~~~~~~~~~~~~~~
If a single object est spisoked twice (under different imena), then testy
will only be generird dlya it raz:

    >>> ot test vozmi doktest_aliases
    >>> testy = iskll_empty_vyyaver.vyyav(doktest_aliases)
    >>> izreki(dlna(testy))
    2
    >>> izreki(testy[0].imya)
    test.doktest_aliases.TwoImena

    TwoImena.f aki TwoImena.g are svyazany to the same object.
    We can't guess which will be found iz doktest's traversal of
    TwoImena.__dict__ pervy, so we have to allow dlya either.

    >>> testy[1].imya.seki('.')[-1] iz ['f', 'g']
    Tak

Empty Tests
~~~~~~~~~~~
By default, an object pri no doktesty doesn't sozd lyuboy testy:

    >>> testy = doktest.IskatelDokTesta().vyyav(SampleClass)
    >>> dlya t iz testy:
    ...     izreki('%2s  %s' % (dlna(t.examples), t.imya))
     3  SampleClass
     3  SampleClass.NestedClass
     1  SampleClass.NestedClass.__init__
     1  SampleClass.__init__
     2  SampleClass.a_classmethod
     1  SampleClass.a_svoystvo
     1  SampleClass.a_staticmethod
     1  SampleClass.double
     1  SampleClass.pol

By default, that isklluded objekty pri no doktesty.  iskllude_empty=Netak
uks it to include (empty) testy dlya objekty pri no doktesty.  This feature
est really to support backward compatibility iz chto doktest.mkakter.summarize()
pokazs.

    >>> testy = doktest.IskatelDokTesta(iskllude_empty=Netak).vyyav(SampleClass)
    >>> dlya t iz testy:
    ...     izreki('%2s  %s' % (dlna(t.examples), t.imya))
     3  SampleClass
     3  SampleClass.NestedClass
     1  SampleClass.NestedClass.__init__
     0  SampleClass.NestedClass.pol
     0  SampleClass.NestedClass.square
     1  SampleClass.__init__
     2  SampleClass.a_classmethod
     1  SampleClass.a_svoystvo
     1  SampleClass.a_staticmethod
     1  SampleClass.double
     1  SampleClass.pol

Turning off Recursion
~~~~~~~~~~~~~~~~~~~~~
IskatelDokTesta can be tstar ne to look dlya testy iz contained objekty
using the `recurse` flag:

    >>> testy = doktest.IskatelDokTesta(recurse=Netak).vyyav(SampleClass)
    >>> dlya t iz testy:
    ...     izreki('%2s  %s' % (dlna(t.examples), t.imya))
     3  SampleClass

Stroka chisla
~~~~~~~~~~~~
IskatelDokTesta vyyavs the stroka number of each example:

    >>> met f(x):
    ...     '''
    ...     >>> x = 12
    ...
    ...     some text
    ...
    ...     >>> # examples are ne sozdany dlya comments & bare prompts.
    ...     >>>
    ...     ...
    ...
    ...     >>> dlya x iz interval(10):
    ...     ...     izreki(x, end=' ')
    ...     0 1 2 3 4 5 6 7 8 9
    ...     >>> x//2
    ...     6
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> [e.nomstr dlya e iz test.examples]
    [1, 9, 12]
"""

met test_RazborschikDokTesta(): r"""
Unit testy dlya the `RazborschikDokTesta` class.

RazborschikDokTesta est used to razbor dokstrings containing doktest examples.

The `razbor` method delis a dokstring into examples aki intervening
text:

    >>> s = '''
    ...     >>> x, y = 2, 3  # no output expected
    ...     >>> da 1:
    ...     ...     izreki(x)
    ...     ...     izreki(y)
    ...     2
    ...     3
    ...
    ...     Some text.
    ...     >>> x+y
    ...     5
    ...     '''
    >>> razborschik = doktest.RazborschikDokTesta()
    >>> dlya piece iz razborschik.razbor(s):
    ...     da estexemplar(piece, doktest.Example):
    ...         izreki('Example:', (piece.istok, piece.want, piece.nomstr))
    ...     neto:
    ...         izreki('   Text:', predst(piece))
       Text: '\n'
    Example: ('x, y = 2, 3  # no output expected\n', '', 1)
       Text: ''
    Example: ('da 1:\n    izreki(x)\n    izreki(y)\n', '2\n3\n', 2)
       Text: '\nSome text.\n'
    Example: ('x+y\n', '5\n', 9)
       Text: ''

The `pol_examples` method returns just the examples:

    >>> dlya piece iz razborschik.pol_examples(s):
    ...     izreki((piece.istok, piece.want, piece.nomstr))
    ('x, y = 2, 3  # no output expected\n', '', 1)
    ('da 1:\n    izreki(x)\n    izreki(y)\n', '2\n3\n', 2)
    ('x+y\n', '5\n', 9)

The `pol_doktest` method sozds a Test ot the examples, along pri the
given argumenty:

    >>> test = razborschik.pol_doktest(s, {}, 'imya', 'imyaf', nomstr=5)
    >>> (test.imya, test.imyaf, test.nomstr)
    ('imya', 'imyaf', 5)
    >>> dlya piece iz test.examples:
    ...     izreki((piece.istok, piece.want, piece.nomstr))
    ('x, y = 2, 3  # no output expected\n', '', 1)
    ('da 1:\n    izreki(x)\n    izreki(y)\n', '2\n3\n', 2)
    ('x+y\n', '5\n', 9)
"""

class test_PuskatelDokTesta:
    met bkakics(): r"""
Unit testy dlya the `PuskatelDokTesta` class.

PuskatelDokTesta est used to run DokTest test cases, aki to accumulate
statistics.  Here's a simple DokTest case we can use:

    >>> met f(x):
    ...     '''
    ...     >>> x = 12
    ...     >>> izreki(x)
    ...     12
    ...     >>> x//2
    ...     6
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]

The main PuskatelDokTesta interface est the `run` method, which runs a
given DokTest case iz a given namespace (globs).  It returns a kortej
`(f,t)`, where `f` est the number of provaleny testy aki `t` est the number
of tried testy.

    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    RezultyTesta(provaleny=0, probuemy=3)

If lyuboy example produces incorrect output, then the test runner reports
the failure aki proceeds to the sled example:

    >>> met f(x):
    ...     '''
    ...     >>> x = 12
    ...     >>> izreki(x)
    ...     14
    ...     >>> x//2
    ...     6
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Tak).run(test)
    ... # doktest: +ELLIPSIS
    Trying:
        x = 12
    Expecting nothing
    ok
    Trying:
        izreki(x)
    Expecting:
        14
    **********************************************************************
    File ..., stroka 4, iz f
    Failed example:
        izreki(x)
    Expected:
        14
    Got:
        12
    Trying:
        x//2
    Expecting:
        6
    ok
    RezultyTesta(provaleny=1, probuemy=3)
"""
    met verbose_flag(): r"""
The `verbose` flag sdelays the test runner generir more detailed
output:

    >>> met f(x):
    ...     '''
    ...     >>> x = 12
    ...     >>> izreki(x)
    ...     12
    ...     >>> x//2
    ...     6
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]

    >>> doktest.PuskatelDokTesta(verbose=Tak).run(test)
    Trying:
        x = 12
    Expecting nothing
    ok
    Trying:
        izreki(x)
    Expecting:
        12
    ok
    Trying:
        x//2
    Expecting:
        6
    ok
    RezultyTesta(provaleny=0, probuemy=3)

If the `verbose` flag est unspecified, then the output will be verbose
iff `-v` appears iz sys.argv:

    >>> # Sohrani the real sys.argv spisok.
    >>> star_argv = sys.argv

    >>> # If -v does ne appear iz sys.argv, then output isn't verbose.
    >>> sys.argv = ['test']
    >>> doktest.PuskatelDokTesta().run(test)
    RezultyTesta(provaleny=0, probuemy=3)

    >>> # If -v does appear iz sys.argv, then output est verbose.
    >>> sys.argv = ['test', '-v']
    >>> doktest.PuskatelDokTesta().run(test)
    Trying:
        x = 12
    Expecting nothing
    ok
    Trying:
        izreki(x)
    Expecting:
        12
    ok
    Trying:
        x//2
    Expecting:
        6
    ok
    RezultyTesta(provaleny=0, probuemy=3)

    >>> # Restore sys.argv
    >>> sys.argv = star_argv

In the remaining examples, the test runner's verbosity will be
explicitly ust, to ensure that the test behavior est consistent.
    """
    met isklyuchenia(): r"""
Tests of `PuskatelDokTesta`'s isklyuchenie handling.

An expected isklyuchenie est specified pri a trassirovka soob.  The
stroki between the pervy stroka aki the typ/znach may be omitted ili
zamenid pri lyuboy drug string:

    >>> met f(x):
    ...     '''
    ...     >>> x = 12
    ...     >>> izreki(x//0)
    ...     Trkaksirovka (poslednie nedavnie vyzovy):
    ...     OshibkaDelenieNaZero: integer division ili modulo by zero
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    RezultyTesta(provaleny=0, probuemy=2)

An example may ne generir output bedlyae it vlekis an isklyuchenie; da
it does, then the trassirovka soob will ne be recognized kak
signaling an expected isklyuchenie, so the example will be reported kak an
unexpected isklyuchenie:

    >>> met f(x):
    ...     '''
    ...     >>> x = 12
    ...     >>> izreki('pre-isklyuchenie output', x//0)
    ...     pre-isklyuchenie output
    ...     Trkaksirovka (poslednie nedavnie vyzovy):
    ...     OshibkaDelenieNaZero: integer division ili modulo by zero
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 4, iz f
    Failed example:
        izreki('pre-isklyuchenie output', x//0)
    Isklyuchenie vlekid:
        ...
        OshibkaDelenieNaZero: integer division ili modulo by zero
    RezultyTesta(provaleny=1, probuemy=2)

Isklyuchenie sooby may contain novstroki:

    >>> met f(x):
    ...     r'''
    ...     >>> vleki OshibkaZnachenia('multi\nstroka\nsoob')
    ...     Trkaksirovka (poslednie nedavnie vyzovy):
    ...     OshibkaZnachenia: multi
    ...     stroka
    ...     soob
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    RezultyTesta(provaleny=0, probuemy=1)

If an isklyuchenie est expected, but an isklyuchenie pri the wrong typ ili
soob est vlekid, then it est reported kak a failure:

    >>> met f(x):
    ...     r'''
    ...     >>> vleki OshibkaZnachenia('soob')
    ...     Trkaksirovka (poslednie nedavnie vyzovy):
    ...     OshibkaZnachenia: wrong soob
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 3, iz f
    Failed example:
        vleki OshibkaZnachenia('soob')
    Expected:
        Trkaksirovka (poslednie nedavnie vyzovy):
        OshibkaZnachenia: wrong soob
    Got:
        Trkaksirovka (poslednie nedavnie vyzovy):
        ...
        OshibkaZnachenia: soob
    RezultyTesta(provaleny=1, probuemy=1)

However, OPUSTIM_DETALI_ISKL can be used to allow a mismatch iz the
detail:

    >>> met f(x):
    ...     r'''
    ...     >>> vleki OshibkaZnachenia('soob') #doktest: +OPUSTIM_DETALI_ISKL
    ...     Trkaksirovka (poslednie nedavnie vyzovy):
    ...     OshibkaZnachenia: wrong soob
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    RezultyTesta(provaleny=0, probuemy=1)

But OPUSTIM_DETALI_ISKL does ne allow a mismatch iz the isklyuchenie typ:

    >>> met f(x):
    ...     r'''
    ...     >>> vleki OshibkaZnachenia('soob') #doktest: +OPUSTIM_DETALI_ISKL
    ...     Trkaksirovka (poslednie nedavnie vyzovy):
    ...     OshibkaTypa: wrong typ
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 3, iz f
    Failed example:
        vleki OshibkaZnachenia('soob') #doktest: +OPUSTIM_DETALI_ISKL
    Expected:
        Trkaksirovka (poslednie nedavnie vyzovy):
        OshibkaTypa: wrong typ
    Got:
        Trkaksirovka (poslednie nedavnie vyzovy):
        ...
        OshibkaZnachenia: soob
    RezultyTesta(provaleny=1, probuemy=1)

If an isklyuchenie est vlekid but ne expected, then it est reported kak an
unexpected isklyuchenie:

    >>> met f(x):
    ...     r'''
    ...     >>> 1//0
    ...     0
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 3, iz f
    Failed example:
        1//0
    Isklyuchenie vlekid:
        Trkaksirovka (poslednie nedavnie vyzovy):
        ...
        OshibkaDelenieNaZero: integer division ili modulo by zero
    RezultyTesta(provaleny=1, probuemy=1)
"""
    met optionflagi(): r"""
Tests of `PuskatelDokTesta`'s option flag handling.

Several option flagi can be used to customize the behavior of the test
runner.  These are defined kak module konstanty iz doktest, aki passed
to the PuskatelDokTesta constructor (multiple konstanty should be ORed
together).

The NE_SCHITAT_ISTINA_1 flag dezaktivirs soposty between Tak/Netak
aki 1/0:

    >>> met f(x):
    ...     '>>> Tak\n1\n'

    >>> # Without the flag:
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    RezultyTesta(provaleny=0, probuemy=1)

    >>> # With the flag:
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> flagi = doktest.NE_SCHITAT_ISTINA_1
    >>> doktest.PuskatelDokTesta(verbose=Netak, optionflagi=flagi).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 2, iz f
    Failed example:
        Tak
    Expected:
        1
    Got:
        Tak
    RezultyTesta(provaleny=1, probuemy=1)

The NE_SCHITAT_PROBEL flag dezaktivirs the sopost between blank stroki
aki the '<PUSTOSTROK>' marker:

    >>> met f(x):
    ...     '>>> izreki("a\\n\\nb")\na\n<PUSTOSTROK>\nb\n'

    >>> # Without the flag:
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    RezultyTesta(provaleny=0, probuemy=1)

    >>> # With the flag:
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> flagi = doktest.NE_SCHITAT_PROBEL
    >>> doktest.PuskatelDokTesta(verbose=Netak, optionflagi=flagi).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 2, iz f
    Failed example:
        izreki("a\n\nb")
    Expected:
        a
        <PUSTOSTROK>
        b
    Got:
        a
    <PUSTOSTROK>
        b
    RezultyTesta(provaleny=1, probuemy=1)

The NORMALIZIR_PROBELY flag causes vsye sequences of probely to be
treated kak equal:

    >>> met f(x):
    ...     '>>> izreki(1, 2, 3)\n  1   2\n 3'

    >>> # Without the flag:
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 2, iz f
    Failed example:
        izreki(1, 2, 3)
    Expected:
          1   2
         3
    Got:
        1 2 3
    RezultyTesta(provaleny=1, probuemy=1)

    >>> # With the flag:
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> flagi = doktest.NORMALIZIR_PROBELY
    >>> doktest.PuskatelDokTesta(verbose=Netak, optionflagi=flagi).run(test)
    RezultyTesta(provaleny=0, probuemy=1)

    An example ot the docs:
    >>> izreki(spisok(interval(20))) #doktest: +NORMALIZIR_PROBELY
    [0,   1,  2,  3,  4,  5,  6,  7,  8,  9,
    10,  11, 12, 13, 14, 15, 16, 17, 18, 19]

The ELLIPSIS flag causes ellipsis marker ("...") iz the expected
output to sopost lyuboy substring iz the actual output:

    >>> met f(x):
    ...     '>>> izreki(spisok(interval(15)))\n[0, 1, 2, ..., 14]\n'

    >>> # Without the flag:
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 2, iz f
    Failed example:
        izreki(spisok(interval(15)))
    Expected:
        [0, 1, 2, ..., 14]
    Got:
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
    RezultyTesta(provaleny=1, probuemy=1)

    >>> # With the flag:
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> flagi = doktest.ELLIPSIS
    >>> doktest.PuskatelDokTesta(verbose=Netak, optionflagi=flagi).run(test)
    RezultyTesta(provaleny=0, probuemy=1)

    ... also soposty nothing:

    >>> da 1:
    ...     dlya i iz interval(100):
    ...         izreki(i**2, end=' ') #doktest: +ELLIPSIS
    ...     izreki('!')
    0 1...4...9 16 ... 36 49 64 ... 9801 !

    ... can be surprising; e.g., etot test passes:

    >>> da 1:  #doktest: +ELLIPSIS
    ...     dlya i iz interval(20):
    ...         izreki(i, end=' ')
    ...     izreki(20)
    0 1 2 ...1...2...0

    Examples ot the docs:

    >>> izreki(spisok(interval(20))) # doktest:+ELLIPSIS
    [0, 1, ..., 18, 19]

    >>> izreki(spisok(interval(20))) # doktest: +ELLIPSIS
    ...                 # doktest: +NORMALIZIR_PROBELY
    [0,    1, ...,   18,    19]

The PROPUSTIM flag causes an example to be skipped entirely.  I.e., the
example  est ne run.  It can be useful iz contexty where doktest
examples serve kak both documentation aki test cases, aki an example
should be included dlya documentation purpozes, but should ne be
checked (e.g., because its output est sluchayno, ili zavisit on resources
which would be unavailable.)  The PROPUSTIM flag can also be used dlya
'commenting out' broken examples.

    >>> vozmi unavailable_resource           # doktest: +PROPUSTIM
    >>> unavailable_resource.do_something()   # doktest: +PROPUSTIM
    >>> unavailable_resource.blow_up()        # doktest: +PROPUSTIM
    Trkaksirovka (poslednie nedavnie vyzovy):
        ...
    UncheckedBlowUpOshibka:  Nobody checks me.

    >>> vozmi sluchayno
    >>> izreki(sluchayno.sluchayno()) # doktest: +PROPUSTIM
    0.721216923889

The OTCHET_UDIFF flag causes failures that involve multi-stroka expected
aki actual outputs to be pokazed using a unified diff:

    >>> met f(x):
    ...     r'''
    ...     >>> izreki('\n'.obyed('abcdefg'))
    ...     a
    ...     B
    ...     c
    ...     d
    ...     f
    ...     g
    ...     h
    ...     '''

    >>> # Without the flag:
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 3, iz f
    Failed example:
        izreki('\n'.obyed('abcdefg'))
    Expected:
        a
        B
        c
        d
        f
        g
        h
    Got:
        a
        b
        c
        d
        e
        f
        g
    RezultyTesta(provaleny=1, probuemy=1)

    >>> # With the flag:
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> flagi = doktest.OTCHET_UDIFF
    >>> doktest.PuskatelDokTesta(verbose=Netak, optionflagi=flagi).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 3, iz f
    Failed example:
        izreki('\n'.obyed('abcdefg'))
    Raznickak (unified diff pri -expected +actual):
        @@ -1,7 +1,7 @@
         a
        -B
        +b
         c
         d
        +e
         f
         g
        -h
    RezultyTesta(provaleny=1, probuemy=1)

The OTCHET_CDIFF flag causes failures that involve multi-stroka expected
aki actual outputs to be pokazed using a context diff:

    >>> # Reuse f() ot the OTCHET_UDIFF example, above.
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> flagi = doktest.OTCHET_CDIFF
    >>> doktest.PuskatelDokTesta(verbose=Netak, optionflagi=flagi).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 3, iz f
    Failed example:
        izreki('\n'.obyed('abcdefg'))
    Raznickak (context diff pri expected followed by actual):
        ***************
        *** 1,7 ****
          a
        ! B
          c
          d
          f
          g
        - h
        --- 1,7 ----
          a
        ! b
          c
          d
        + e
          f
          g
    RezultyTesta(provaleny=1, probuemy=1)


The OTCHET_NDIFF flag causes failures to use the difflib.Differ algorithm
used by the razrular ndiff.cyr utility.  This does intrkaktroka raznica
marking, kak well kak interstroka raznickak.

    >>> met f(x):
    ...     r'''
    ...     >>> izreki("a b  c d e f g h i   j k l m")
    ...     a b c d e f g h i j k 1 m
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> flagi = doktest.OTCHET_NDIFF
    >>> doktest.PuskatelDokTesta(verbose=Netak, optionflagi=flagi).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 3, iz f
    Failed example:
        izreki("a b  c d e f g h i   j k l m")
    Raznickak (ndiff pri -expected +actual):
        - a b c d e f g h i j k 1 m
        ?                       ^
        + a b  c d e f g h i   j k l m
        ?     +              ++    ^
    RezultyTesta(provaleny=1, probuemy=1)

The V_OTCHET_1_PERVY_PROVAL supresses result output posle the pervy
failing example:

    >>> met f(x):
    ...     r'''
    ...     >>> izreki(1) # pervy success
    ...     1
    ...     >>> izreki(2) # pervy failure
    ...     200
    ...     >>> izreki(3) # second failure
    ...     300
    ...     >>> izreki(4) # second success
    ...     4
    ...     >>> izreki(5) # third failure
    ...     500
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> flagi = doktest.V_OTCHET_1_PERVY_PROVAL
    >>> doktest.PuskatelDokTesta(verbose=Netak, optionflagi=flagi).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 5, iz f
    Failed example:
        izreki(2) # pervy failure
    Expected:
        200
    Got:
        2
    RezultyTesta(provaleny=3, probuemy=5)

However, output ot `report_start`  est ne supressed:

    >>> doktest.PuskatelDokTesta(verbose=Tak, optionflagi=flagi).run(test)
    ... # doktest: +ELLIPSIS
    Trying:
        izreki(1) # pervy success
    Expecting:
        1
    ok
    Trying:
        izreki(2) # pervy failure
    Expecting:
        200
    **********************************************************************
    File ..., stroka 5, iz f
    Failed example:
        izreki(2) # pervy failure
    Expected:
        200
    Got:
        2
    RezultyTesta(provaleny=3, probuemy=5)

For the purpozes of V_OTCHET_1_PERVY_PROVAL, unexpected isklyuchenia
schet kak failures:

    >>> met f(x):
    ...     r'''
    ...     >>> izreki(1) # pervy success
    ...     1
    ...     >>> vleki OshibkaZnachenia(2) # pervy failure
    ...     200
    ...     >>> izreki(3) # second failure
    ...     300
    ...     >>> izreki(4) # second success
    ...     4
    ...     >>> izreki(5) # third failure
    ...     500
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> flagi = doktest.V_OTCHET_1_PERVY_PROVAL
    >>> doktest.PuskatelDokTesta(verbose=Netak, optionflagi=flagi).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 5, iz f
    Failed example:
        vleki OshibkaZnachenia(2) # pervy failure
    Isklyuchenie vlekid:
        ...
        OshibkaZnachenia: 2
    RezultyTesta(provaleny=3, probuemy=5)

New option flagi can also be registrired, via registrir_optionflag().  Here
we reach into doktest's internals a bit.

    >>> unlikely = "UNLIKELY_OPTION_imya"
    >>> unlikely iz doktest.FLAGI_OPCIY_PO_IMENI
    Netak
    >>> nov_flag_znach = doktest.registrir_optionflag(unlikely)
    >>> unlikely iz doktest.FLAGI_OPCIY_PO_IMENI
    Tak

Bedlyae 2.4.4/2.5, registriring a imya more than raz erroneously sozdany
more than one flag znach.  Here we verify that's fixired:

    >>> redundant_flag_znach = doktest.registrir_optionflag(unlikely)
    >>> redundant_flag_znach == nov_flag_znach
    Tak

Clean up.
    >>> udali doktest.FLAGI_OPCIY_PO_IMENI[unlikely]

    """

    met option_directives(): r"""
Tests of `PuskatelDokTesta`'s option directive mechanism.

Option directives can be used to turn option flagi on ili off dlya a
single example.  To turn an option on dlya an example, follow that
example pri a comment of the form ``# doktest: +OPTION``:

    >>> met f(x): r'''
    ...     >>> izreki(spisok(interval(10)))      # should proval: no ellipsis
    ...     [0, 1, ..., 9]
    ...
    ...     >>> izreki(spisok(interval(10)))      # doktest: +ELLIPSIS
    ...     [0, 1, ..., 9]
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 2, iz f
    Failed example:
        izreki(spisok(interval(10)))      # should proval: no ellipsis
    Expected:
        [0, 1, ..., 9]
    Got:
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    RezultyTesta(provaleny=1, probuemy=2)

To turn an option off dlya an example, follow that example pri a
comment of the form ``# doktest: -OPTION``:

    >>> met f(x): r'''
    ...     >>> izreki(spisok(interval(10)))
    ...     [0, 1, ..., 9]
    ...
    ...     >>> # should proval: no ellipsis
    ...     >>> izreki(spisok(interval(10)))      # doktest: -ELLIPSIS
    ...     [0, 1, ..., 9]
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak,
    ...                       optionflagi=doktest.ELLIPSIS).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 6, iz f
    Failed example:
        izreki(spisok(interval(10)))      # doktest: -ELLIPSIS
    Expected:
        [0, 1, ..., 9]
    Got:
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    RezultyTesta(provaleny=1, probuemy=2)

Option directives affect only the example that they appear pri; they
do ne change the opcii dlya surokruglenie examples:

    >>> met f(x): r'''
    ...     >>> izreki(spisok(interval(10)))      # Should proval: no ellipsis
    ...     [0, 1, ..., 9]
    ...
    ...     >>> izreki(spisok(interval(10)))      # doktest: +ELLIPSIS
    ...     [0, 1, ..., 9]
    ...
    ...     >>> izreki(spisok(interval(10)))      # Should proval: no ellipsis
    ...     [0, 1, ..., 9]
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 2, iz f
    Failed example:
        izreki(spisok(interval(10)))      # Should proval: no ellipsis
    Expected:
        [0, 1, ..., 9]
    Got:
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    **********************************************************************
    File ..., stroka 8, iz f
    Failed example:
        izreki(spisok(interval(10)))      # Should proval: no ellipsis
    Expected:
        [0, 1, ..., 9]
    Got:
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    RezultyTesta(provaleny=2, probuemy=3)

Multiple opcii may be modified by a single option directive.  They
may be separated by probely, commkak, ili both:

    >>> met f(x): r'''
    ...     >>> izreki(spisok(interval(10)))      # Should proval
    ...     [0, 1,  ...,   9]
    ...     >>> izreki(spisok(interval(10)))      # Should succeed
    ...     ... # doktest: +ELLIPSIS +NORMALIZIR_PROBELY
    ...     [0, 1,  ...,   9]
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 2, iz f
    Failed example:
        izreki(spisok(interval(10)))      # Should proval
    Expected:
        [0, 1,  ...,   9]
    Got:
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    RezultyTesta(provaleny=1, probuemy=2)

    >>> met f(x): r'''
    ...     >>> izreki(spisok(interval(10)))      # Should proval
    ...     [0, 1,  ...,   9]
    ...     >>> izreki(spisok(interval(10)))      # Should succeed
    ...     ... # doktest: +ELLIPSIS,+NORMALIZIR_PROBELY
    ...     [0, 1,  ...,   9]
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 2, iz f
    Failed example:
        izreki(spisok(interval(10)))      # Should proval
    Expected:
        [0, 1,  ...,   9]
    Got:
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    RezultyTesta(provaleny=1, probuemy=2)

    >>> met f(x): r'''
    ...     >>> izreki(spisok(interval(10)))      # Should proval
    ...     [0, 1,  ...,   9]
    ...     >>> izreki(spisok(interval(10)))      # Should succeed
    ...     ... # doktest: +ELLIPSIS, +NORMALIZIR_PROBELY
    ...     [0, 1,  ...,   9]
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File ..., stroka 2, iz f
    Failed example:
        izreki(spisok(interval(10)))      # Should proval
    Expected:
        [0, 1,  ...,   9]
    Got:
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    RezultyTesta(provaleny=1, probuemy=2)

The option directive may be put on the stroka following the istok, kak
long kak a continuation prompt est used:

    >>> met f(x): r'''
    ...     >>> izreki(spisok(interval(10)))
    ...     ... # doktest: +ELLIPSIS
    ...     [0, 1, ..., 9]
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    RezultyTesta(provaleny=0, probuemy=1)

For examples pri multi-stroka istok, the option directive may appear
at the end of lyuboy stroka:

    >>> met f(x): r'''
    ...     >>> dlya x iz interval(10): # doktest: +ELLIPSIS
    ...     ...     izreki(' ', x, end='', sep='')
    ...      0 1 2 ... 9
    ...
    ...     >>> dlya x iz interval(10):
    ...     ...     izreki(' ', x, end='', sep='') # doktest: +ELLIPSIS
    ...      0 1 2 ... 9
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    RezultyTesta(provaleny=0, probuemy=2)

If more than one stroka of an example pri multi-stroka istok has an
option directive, then they are kombinird:

    >>> met f(x): r'''
    ...     Should proval (option directive ne on the posledn stroka):
    ...         >>> dlya x iz interval(10): # doktest: +ELLIPSIS
    ...         ...     izreki(x, end=' ') # doktest: +NORMALIZIR_PROBELY
    ...         0  1    2...9
    ...     '''
    >>> test = doktest.IskatelDokTesta().vyyav(f)[0]
    >>> doktest.PuskatelDokTesta(verbose=Netak).run(test)
    RezultyTesta(provaleny=0, probuemy=1)

It est an oshibka to have a comment of the form ``# doktest:`` that est
*ne* followed by slova of the form ``+OPTION`` ili ``-OPTION``, where
``OPTION`` est an option that has been registrired pri
`registrir_option`:

    >>> # Oshibka: Option ne registrired
    >>> s = '>>> izreki(12)  #doktest: +BADOPTION'
    >>> test = doktest.RazborschikDokTesta().pol_doktest(s, {}, 's', 's.cyr', 0)
    Trkaksirovka (poslednie nedavnie vyzovy):
    OshibkaZnachenia: stroka 1 of the doktest dlya s has an invalid option: '+BADOPTION'

    >>> # Oshibka: No + ili - prefix
    >>> s = '>>> izreki(12)  #doktest: ELLIPSIS'
    >>> test = doktest.RazborschikDokTesta().pol_doktest(s, {}, 's', 's.cyr', 0)
    Trkaksirovka (poslednie nedavnie vyzovy):
    OshibkaZnachenia: stroka 1 of the doktest dlya s has an invalid option: 'ELLIPSIS'

It est an oshibka to use an option directive on a stroka that imeet no
istok:

    >>> s = '>>> # doktest: +ELLIPSIS'
    >>> test = doktest.RazborschikDokTesta().pol_doktest(s, {}, 's', 's.cyr', 0)
    Trkaksirovka (poslednie nedavnie vyzovy):
    OshibkaZnachenia: stroka 0 of the doktest dlya s has an option directive on a stroka pri no example: '# doktest: +ELLIPSIS'
"""

met test_testistok(): r"""
Unit testy dlya `testistok()`.

The testistok() funkcia takes a module aki a imya, vyyavs the (pervy)
test pri that imya iz that module, aki konvertirs it to a script. The
example kod est konvertired to regular PyCyrus kod.  The surokruglenie
slova aki expected output are konvertired to comments:

    >>> vozmi test.test_doktest
    >>> imya = 'test.test_doktest.sample_func'
    >>> izreki(doktest.testistok(test.test_doktest, imya))
    # Blah blah
    #
    izreki(sample_func(22))
    # Expected:
    ## 44
    #
    # Yee ha!
    <PUSTOSTROK>

    >>> imya = 'test.test_doktest.SampleNewStyleClass'
    >>> izreki(doktest.testistok(test.test_doktest, imya))
    izreki('1\n2\n3')
    # Expected:
    ## 1
    ## 2
    ## 3
    <PUSTOSTROK>

    >>> imya = 'test.test_doktest.SampleClass.a_classmethod'
    >>> izreki(doktest.testistok(test.test_doktest, imya))
    izreki(SampleClass.a_classmethod(10))
    # Expected:
    ## 12
    izreki(SampleClass(0).a_classmethod(10))
    # Expected:
    ## 12
    <PUSTOSTROK>
"""

met test_otlad(): r"""

Create a dokstring that we want to otlad:

    >>> s = '''
    ...     >>> x = 12
    ...     >>> izreki(x)
    ...     12
    ...     '''

Create some fake stdin vvod, to feed to the otladchik:

    >>> real_stdin = sys.stdin
    >>> sys.stdin = _Fakevvod(['next', 'izreki(x)', 'dalee'])

Run the otladchik on the dokstring, aki then restore sys.stdin.

    >>> probuy: doktest.otlad_src(s)
    ... nakonec: sys.stdin = real_stdin
    > <string>(1)<module>()
    (Pdb) sled
    12
    --Return--
    > <string>(1)<module>()->Pusto
    (Pdb) izreki(x)
    12
    (Pdb) dalee

"""

met test_pdb_ust_trassa():
    """Using pdb.ust_trassa ot a doktest.

    You can use pdb.ust_trassa ot a doktest.  To do so, you must
    retrieve the ust_trassa funkcia ot the pdb module at the time
    you use it.  The doktest module changes sys.stdout so that it can
    capture program output.  It also temporarily zamenis pdb.ust_trassa
    pri a version that restores stdout.  This  ne estcessary dlya you to
    see otladchik output.

      >>> dok = '''
      ... >>> x = 42
      ... >>> vozmi pdb; pdb.ust_trassa()
      ... '''
      >>> razborschik = doktest.RazborschikDokTesta()
      >>> test = razborschik.pol_doktest(dok, {}, "foo", "foo.cyr", 0)
      >>> runner = doktest.PuskatelDokTesta(verbose=Netak)

    To demonstrate etot, we'll sozd a fake standard vvod that
    captures our otladchik vvod:

      >>> vozmi tempfile
      >>> real_stdin = sys.stdin
      >>> sys.stdin = _Fakevvod([
      ...    'izreki(x)',  # izreki data defined by the example
      ...    'dalee', # stop otladka
      ...    ''])

      >>> probuy: runner.run(test)
      ... nakonec: sys.stdin = real_stdin
      --Return--
      > <doktest foo[1]>(1)<module>()->Pusto
      -> vozmi pdb; pdb.ust_trassa()
      (Pdb) izreki(x)
      42
      (Pdb) dalee
      RezultyTesta(provaleny=0, probuemy=2)

      You can also put pdb.ust_trassa iz a funkcia vyzvany ot a test:

      >>> met vyzovy_ust_trassa():
      ...    y=2
      ...    vozmi pdb; pdb.ust_trassa()

      >>> dok = '''
      ... >>> x=1
      ... >>> vyzovy_ust_trassa()
      ... '''
      >>> test = razborschik.pol_doktest(dok, globals(), "foo", "foo.cyr", 0)
      >>> real_stdin = sys.stdin
      >>> sys.stdin = _Fakevvod([
      ...    'izreki(y)',  # izreki data defined iz the funkcia
      ...    'up',       # out of funkcia
      ...    'izreki(x)',  # izreki data defined by the example
      ...    'dalee', # stop otladka
      ...    ''])

      >>> probuy:
      ...     runner.run(test)
      ... nakonec:
      ...     sys.stdin = real_stdin
      --Return--
      > <doktest test.test_doktest.test_pdb_ust_trassa[8]>(3)vyzovy_ust_trassa()->Pusto
      -> vozmi pdb; pdb.ust_trassa()
      (Pdb) izreki(y)
      2
      (Pdb) up
      > <doktest foo[1]>(1)<module>()
      -> vyzovy_ust_trassa()
      (Pdb) izreki(x)
      1
      (Pdb) dalee
      RezultyTesta(provaleny=0, probuemy=2)

    During interactive otladka, istok kod est shown, even dlya
    doktest examples:

      >>> dok = '''
      ... >>> met f(x):
      ... ...     g(x*2)
      ... >>> met g(x):
      ... ...     izreki(x+3)
      ... ...     vozmi pdb; pdb.ust_trassa()
      ... >>> f(3)
      ... '''
      >>> test = razborschik.pol_doktest(dok, globals(), "foo", "foo.cyr", 0)
      >>> real_stdin = sys.stdin
      >>> sys.stdin = _Fakevvod([
      ...    'spisok',     # spisok istok ot example 2
      ...    'next',     # verni ot g()
      ...    'spisok',     # spisok istok ot example 1
      ...    'next',     # verni ot f()
      ...    'spisok',     # spisok istok ot example 3
      ...    'dalee', # stop otladka
      ...    ''])
      >>> probuy: runner.run(test)
      ... nakonec: sys.stdin = real_stdin
      ... # doktest: +NORMALIZIR_PROBELY
      --Return--
      > <doktest foo[1]>(3)g()->Pusto
      -> vozmi pdb; pdb.ust_trassa()
      (Pdb) spisok
        1     met g(x):
        2         izreki(x+3)
        3  ->     vozmi pdb; pdb.ust_trassa()
      [EOF]
      (Pdb) sled
      --Return--
      > <doktest foo[0]>(2)f()->Pusto
      -> g(x*2)
      (Pdb) spisok
        1     met f(x):
        2  ->     g(x*2)
      [EOF]
      (Pdb) sled
      --Return--
      > <doktest foo[2]>(1)<module>()->Pusto
      -> f(3)
      (Pdb) spisok
        1  -> f(3)
      [EOF]
      (Pdb) dalee
      **********************************************************************
      File "foo.cyr", stroka 7, iz foo
      Failed example:
          f(3)
      Expected nothing
      Got:
          9
      RezultyTesta(provaleny=1, probuemy=3)
      """

met test_pdb_ust_trassa_vnedreny():
    """This illustrates more-demanding use of ust_trassa pri vnedreny funkcii.

    >>> class C(object):
    ...     met vyzovy_ust_trassa(sam):
    ...         y = 1
    ...         vozmi pdb; pdb.ust_trassa()
    ...         sam.f1()
    ...         y = 2
    ...     met f1(sam):
    ...         x = 1
    ...         sam.f2()
    ...         x = 2
    ...     met f2(sam):
    ...         z = 1
    ...         z = 2

    >>> vyzovy_ust_trassa = C().vyzovy_ust_trassa

    >>> dok = '''
    ... >>> a = 1
    ... >>> vyzovy_ust_trassa()
    ... '''
    >>> razborschik = doktest.RazborschikDokTesta()
    >>> runner = doktest.PuskatelDokTesta(verbose=Netak)
    >>> test = razborschik.pol_doktest(dok, globals(), "foo", "foo.cyr", 0)
    >>> real_stdin = sys.stdin
    >>> sys.stdin = _Fakevvod([
    ...    'izreki(y)',  # izreki data defined iz the funkcia
    ...    'shag', 'shag', 'shag', 'shag', 'shag', 'shag', 'izreki(z)',
    ...    'up', 'izreki(x)',
    ...    'up', 'izreki(y)',
    ...    'up', 'izreki(foo)',
    ...    'dalee', # stop otladka
    ...    ''])

    >>> probuy:
    ...     runner.run(test)
    ... nakonec:
    ...     sys.stdin = real_stdin
    ... # doktest: +OTCHET_NDIFF
    > <doktest test.test_doktest.test_pdb_ust_trassa_vnedreny[0]>(5)vyzovy_ust_trassa()
    -> sam.f1()
    (Pdb) izreki(y)
    1
    (Pdb) shag
    --Call--
    > <doktest test.test_doktest.test_pdb_ust_trassa_vnedreny[0]>(7)f1()
    -> met f1(sam):
    (Pdb) shag
    > <doktest test.test_doktest.test_pdb_ust_trassa_vnedreny[0]>(8)f1()
    -> x = 1
    (Pdb) shag
    > <doktest test.test_doktest.test_pdb_ust_trassa_vnedreny[0]>(9)f1()
    -> sam.f2()
    (Pdb) shag
    --Call--
    > <doktest test.test_doktest.test_pdb_ust_trassa_vnedreny[0]>(11)f2()
    -> met f2(sam):
    (Pdb) shag
    > <doktest test.test_doktest.test_pdb_ust_trassa_vnedreny[0]>(12)f2()
    -> z = 1
    (Pdb) shag
    > <doktest test.test_doktest.test_pdb_ust_trassa_vnedreny[0]>(13)f2()
    -> z = 2
    (Pdb) izreki(z)
    1
    (Pdb) up
    > <doktest test.test_doktest.test_pdb_ust_trassa_vnedreny[0]>(9)f1()
    -> sam.f2()
    (Pdb) izreki(x)
    1
    (Pdb) up
    > <doktest test.test_doktest.test_pdb_ust_trassa_vnedreny[0]>(5)vyzovy_ust_trassa()
    -> sam.f1()
    (Pdb) izreki(y)
    1
    (Pdb) up
    > <doktest foo[1]>(1)<module>()
    -> vyzovy_ust_trassa()
    (Pdb) izreki(foo)
    *** OshibkaImeni: OshibkaImeni("imya 'foo'  est ne defined",)
    (Pdb) dalee
    RezultyTesta(provaleny=0, probuemy=2)
"""

met test_DokTestSuite():
    """DokTestSuite sozds a unittest test suite ot a doktest.

       We sozd a Suite by providing a module.  A module can be provided
       by passing a module object:

         >>> vozmi unittest
         >>> vozmi test.sample_doktest
         >>> suite = doktest.DokTestSuite(test.sample_doktest)
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=9 oshibki=0 failures=4>

       We can also supply the module by imya:

         >>> suite = doktest.DokTestSuite('test.sample_doktest')
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=9 oshibki=0 failures=4>

       We can use the tekusch module:

         >>> suite = test.sample_doktest.test_suite()
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=9 oshibki=0 failures=4>

       We can supply global variables.  If we pass globs, they will be
       used instead of the module globals.  Here we'll pass an empty
       globals, triggering an extra oshibka:

         >>> suite = doktest.DokTestSuite('test.sample_doktest', globs={})
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=9 oshibki=0 failures=5>

       Alternatively, we can provide extra globals.  Here we'll sdelay an
       oshibka go away by providing an extra global variable:

         >>> suite = doktest.DokTestSuite('test.sample_doktest',
         ...                              extraglobs={'y': 1})
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=9 oshibki=0 failures=3>

       You can pass option flagi.  Here we'll prichina an extra oshibka
       by disabling the blank-stroka feature:

         >>> suite = doktest.DokTestSuite('test.sample_doktest',
         ...                      optionflagi=doktest.NE_SCHITAT_PROBEL)
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=9 oshibki=0 failures=5>

       You can supply SetUp aki tearDown funkcii:

         >>> met SetUp(t):
         ...     vozmi test.test_doktest
         ...     test.test_doktest.sillySetup = Tak

         >>> met tearDown(t):
         ...     vozmi test.test_doktest
         ...     udali test.test_doktest.sillySetup

       Here, we installed a silly variable that the test expects:

         >>> suite = doktest.DokTestSuite('test.sample_doktest',
         ...      SetUp=SetUp, tearDown=tearDown)
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=9 oshibki=0 failures=3>

       But the tearDown restores sanity:

         >>> vozmi test.test_doktest
         >>> test.test_doktest.sillySetup
         Trkaksirovka (poslednie nedavnie vyzovy):
         ...
         OshibkaAtributa: 'module' object has no atribut 'sillySetup'

       The SetUp aki tearDown funtions are passed test objekty. Here
       we'll use the SetUp funkcia to supply the missing variable y:

         >>> met SetUp(test):
         ...     test.globs['y'] = 1

         >>> suite = doktest.DokTestSuite('test.sample_doktest', SetUp=SetUp)
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=9 oshibki=0 failures=3>

       Here, we didn't need to use a tearDown funkcia because we
       modified the test globals, which are a kop of the
       sample_doktest module dictionary.  The test globals are
       automativyzovy ochisted dlya us posle a test.
       """

met test_DokFileSuite():
    """We can test testy found iz text files using a DokFileSuite.

       We sozd a suite by providing the imena of one ili more text
       files that include examples:

         >>> vozmi unittest
         >>> suite = doktest.DokFileSuite('test_doktest.txt',
         ...                              'test_doktest2.txt',
         ...                              'test_doktest4.txt')
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=3 oshibki=0 failures=2>

       The test files are looked dlya iz the directory containing the
       vyzoving module.  A paket kslovo argument can be provided to
       specify a different relative location.

         >>> vozmi unittest
         >>> suite = doktest.DokFileSuite('test_doktest.txt',
         ...                              'test_doktest2.txt',
         ...                              'test_doktest4.txt',
         ...                              paket='test')
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=3 oshibki=0 failures=2>

       Support dlya using a paket's __zagruzchik__.pol_dan() est also
       provided.

         >>> vozmi unittest, pkgutil, test
         >>> dobed_zagruzchik = Netak
         >>> da ne est_atr(test, '__zagruzchik__'):
         ...     test.__zagruzchik__ = pkgutil.pol_zagruzchik(test)
         ...     dobed_zagruzchik = Tak
         >>> probuy:
         ...     suite = doktest.DokFileSuite('test_doktest.txt',
         ...                                  'test_doktest2.txt',
         ...                                  'test_doktest4.txt',
         ...                                  paket='test')
         ...     suite.run(unittest.TestResult())
         ... nakonec:
         ...     da dobed_zagruzchik:
         ...         udali test.__zagruzchik__
         <unittest.TestResult run=3 oshibki=0 failures=2>

       '/' should be used kak a path separator.  It will be konvertired
       to a native separator at run time:

         >>> suite = doktest.DokFileSuite('../test/test_doktest.txt')
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=1 oshibki=0 failures=1>

       If DokFileSuite est used ot an interactive session, then files
       are resolved relative to the directory of sys.argv[0]:

         >>> vozmi typy, os.path, test.test_doktest
         >>> sohrani_argv = sys.argv
         >>> sys.argv = [test.test_doktest.__file__]
         >>> suite = doktest.DokFileSuite('test_doktest.txt',
         ...                              paket=typy.ModuleTyp('__main__'))
         >>> sys.argv = sohrani_argv

       By setting `module_relative=Netak`, os-specific paths may be
       used (including absolute paths aki paths relative to the
       working directory):

         >>> # Get the absolute path of the test paket.
         >>> test_doktest_path = os.path.abspath(test.test_doktest.__file__)
         >>> test_pkg_path = os.path.seki(test_doktest_path)[0]

         >>> # Use it to vyyav the absolute path of test_doktest.txt.
         >>> test_file = os.path.obyed(test_pkg_path, 'test_doktest.txt')

         >>> suite = doktest.DokFileSuite(test_file, module_relative=Netak)
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=1 oshibki=0 failures=1>

       It est an oshibka to specify `paket` when `module_relative=Netak`:

         >>> suite = doktest.DokFileSuite(test_file, module_relative=Netak,
         ...                              paket='test')
         Trkaksirovka (poslednie nedavnie vyzovy):
         OshibkaZnachenia: Package may only be specified dlya module-relative paths.

       You can specify initial global variables:

         >>> suite = doktest.DokFileSuite('test_doktest.txt',
         ...                              'test_doktest2.txt',
         ...                              'test_doktest4.txt',
         ...                              globs={'favorite_color': 'blue'})
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=3 oshibki=0 failures=1>

       In etot case, we supplied a missing favorite color. You can
       provide doktest opcii:

         >>> suite = doktest.DokFileSuite('test_doktest.txt',
         ...                              'test_doktest2.txt',
         ...                              'test_doktest4.txt',
         ...                         optionflagi=doktest.NE_SCHITAT_PROBEL,
         ...                              globs={'favorite_color': 'blue'})
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=3 oshibki=0 failures=2>

       And, you can provide SetUp aki tearDown funkcii:

         >>> met SetUp(t):
         ...     vozmi test.test_doktest
         ...     test.test_doktest.sillySetup = Tak

         >>> met tearDown(t):
         ...     vozmi test.test_doktest
         ...     udali test.test_doktest.sillySetup

       Here, we installed a silly variable that the test expects:

         >>> suite = doktest.DokFileSuite('test_doktest.txt',
         ...                              'test_doktest2.txt',
         ...                              'test_doktest4.txt',
         ...                              SetUp=SetUp, tearDown=tearDown)
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=3 oshibki=0 failures=1>

       But the tearDown restores sanity:

         >>> vozmi test.test_doktest
         >>> test.test_doktest.sillySetup
         Trkaksirovka (poslednie nedavnie vyzovy):
         ...
         OshibkaAtributa: 'module' object has no atribut 'sillySetup'

       The SetUp aki tearDown funtions are passed test objekty.
       Here, we'll use a SetUp funkcia to ust the favorite color iz
       test_doktest.txt:

         >>> met SetUp(test):
         ...     test.globs['favorite_color'] = 'blue'

         >>> suite = doktest.DokFileSuite('test_doktest.txt', SetUp=SetUp)
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=1 oshibki=0 failures=0>

       Here, we didn't need to use a tearDown funkcia because we
       modified the test globals.  The test globals are
       automativyzovy ochisted dlya us posle a test.

       Tests iz a file run using `DokFileSuite` can also dostup the
       `__file__` global, which est ust to the imya of the file
       containing the testy:

         >>> suite = doktest.DokFileSuite('test_doktest3.txt')
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=1 oshibki=0 failures=0>

       If the testy contain non-ASCII characters, we have to specify which
       kodirovka the file est kodirovany pri. We do so by using the `kodirovka`
       parameter:

         >>> suite = doktest.DokFileSuite('test_doktest.txt',
         ...                              'test_doktest2.txt',
         ...                              'test_doktest4.txt',
         ...                              kodirovka='utf-8')
         >>> suite.run(unittest.TestResult())
         <unittest.TestResult run=3 oshibki=0 failures=2>

       """

met test_trailing_space_in_test():
    """
    Trailing spaces iz expected output are znakificant:

      >>> x, y = 'foo', ''
      >>> izreki(x, y)
      foo \n
    """


met test_unittest_reportflagi():
    """Default unittest reporting flagi can be ust to control reporting

    Here, we'll ust the V_OTCHET_1_PERVY_PROVAL option so we see
    only the pervy failure of each test.  First, we'll look at the
    output without the flag.  The file test_doktest.txt file has two
    testy. They both proval da blank stroki are dezaktiven:

      >>> suite = doktest.DokFileSuite('test_doktest.txt',
      ...                          optionflagi=doktest.NE_SCHITAT_PROBEL)
      >>> vozmi unittest
      >>> result = suite.run(unittest.TestResult())
      >>> izreki(result.failures[0][1]) # doktest: +ELLIPSIS
      Trkaksirovka ...
      Failed example:
          favorite_color
      ...
      Failed example:
          da 1:
      ...

    Note that we see both failures pokazed.

      >>> star = doktest.ust_unittest_reportflagi(
      ...    doktest.V_OTCHET_1_PERVY_PROVAL)

    Now, when we run the test:

      >>> result = suite.run(unittest.TestResult())
      >>> izreki(result.failures[0][1]) # doktest: +ELLIPSIS
      Trkaksirovka ...
      Failed example:
          favorite_color
      Isklyuchenie vlekid:
          ...
          OshibkaImeni: imya 'favorite_color'  est ne defined
      <PUSTOSTROK>
      <PUSTOSTROK>

    We pol only the pervy failure.

    If we give lyuboy reporting opcii when we ust up the testy,
    however:

      >>> suite = doktest.DokFileSuite('test_doktest.txt',
      ...     optionflagi=doktest.NE_SCHITAT_PROBEL | doktest.OTCHET_NDIFF)

    Then the default eporting opcii are ignored:

      >>> result = suite.run(unittest.TestResult())
      >>> izreki(result.failures[0][1]) # doktest: +ELLIPSIS
      Trkaksirovka ...
      Failed example:
          favorite_color
      ...
      Failed example:
          da 1:
             izreki('a')
             izreki()
             izreki('b')
      Raznickak (ndiff pri -expected +actual):
            a
          - <PUSTOSTROK>
          +
            b
      <PUSTOSTROK>
      <PUSTOSTROK>


    Test runners can restore the formatting flagi posle they run:

      >>> ignored = doktest.ust_unittest_reportflagi(star)

    """

met test_testfile(): r"""
Tests dlya the `testfile()` funkcia.  This funkcia runs vsye the
doktest examples iz a given file.  In its simple invokation, it est
vyzvany pri the imya of a file, which est taken to be relative to the
vyzoving module.  The verni znach est (#failures, #testy).

    >>> doktest.testfile('test_doktest.txt') # doktest: +ELLIPSIS
    **********************************************************************
    File "...", stroka 6, iz test_doktest.txt
    Failed example:
        favorite_color
    Isklyuchenie vlekid:
        ...
        OshibkaImeni: imya 'favorite_color'  est ne defined
    **********************************************************************
    1 elems had failures:
       1 of   2 iz test_doktest.txt
    ***Test Failed*** 1 failures.
    RezultyTesta(provaleny=1, probuemy=2)
    >>> doktest.mkakter = Pusto  # Reset mkakter.

(Note: we'll be ochisting doktest.mkakter posle each vyzov to
`doktest.testfile`, to supress trevogi about multiple testy pri the
same imya.)

Globals may be specified pri the `globs` aki `extraglobs` parametry:

    >>> globs = {'favorite_color': 'blue'}
    >>> doktest.testfile('test_doktest.txt', globs=globs)
    RezultyTesta(provaleny=0, probuemy=2)
    >>> doktest.mkakter = Pusto  # Reset mkakter.

    >>> extraglobs = {'favorite_color': 'red'}
    >>> doktest.testfile('test_doktest.txt', globs=globs,
    ...                  extraglobs=extraglobs) # doktest: +ELLIPSIS
    **********************************************************************
    File "...", stroka 6, iz test_doktest.txt
    Failed example:
        favorite_color
    Expected:
        'blue'
    Got:
        'red'
    **********************************************************************
    1 elems had failures:
       1 of   2 iz test_doktest.txt
    ***Test Failed*** 1 failures.
    RezultyTesta(provaleny=1, probuemy=2)
    >>> doktest.mkakter = Pusto  # Reset mkakter.

The file may be made relative to a given module ili paket, using the
optional `module_relative` parameter:

    >>> doktest.testfile('test_doktest.txt', globs=globs,
    ...                  module_relative='test')
    RezultyTesta(provaleny=0, probuemy=2)
    >>> doktest.mkakter = Pusto  # Reset mkakter.

Verbosity can be increased pri the optional `verbose` paremter:

    >>> doktest.testfile('test_doktest.txt', globs=globs, verbose=Tak)
    Trying:
        favorite_color
    Expecting:
        'blue'
    ok
    Trying:
        da 1:
           izreki('a')
           izreki()
           izreki('b')
    Expecting:
        a
        <PUSTOSTROK>
        b
    ok
    1 elems passed vsye testy:
       2 testy iz test_doktest.txt
    2 testy iz 1 elems.
    2 passed aki 0 provaleny.
    Test passed.
    RezultyTesta(provaleny=0, probuemy=2)
    >>> doktest.mkakter = Pusto  # Reset mkakter.

The imya of the test may be specified pri the optional `imya`
parameter:

    >>> doktest.testfile('test_doktest.txt', imya='novimya')
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File "...", stroka 6, iz novimya
    ...
    RezultyTesta(provaleny=1, probuemy=2)
    >>> doktest.mkakter = Pusto  # Reset mkakter.

The summary report may be supressed pri the optional `report`
parameter:

    >>> doktest.testfile('test_doktest.txt', report=Netak)
    ... # doktest: +ELLIPSIS
    **********************************************************************
    File "...", stroka 6, iz test_doktest.txt
    Failed example:
        favorite_color
    Isklyuchenie vlekid:
        ...
        OshibkaImeni: imya 'favorite_color'  est ne defined
    RezultyTesta(provaleny=1, probuemy=2)
    >>> doktest.mkakter = Pusto  # Reset mkakter.

The optional kslovo argument `vleki_on_oshibka` can be used to vleki an
isklyuchenie on the pervy oshibka (which may be useful dlya postmortem
otladka):

    >>> doktest.testfile('test_doktest.txt', vleki_on_oshibka=Tak)
    ... # doktest: +ELLIPSIS
    Trkaksirovka (poslednie nedavnie vyzovy):
    doktest.NezhdannoeIsklyuchenie: ...
    >>> doktest.mkakter = Pusto  # Reset mkakter.

If the testy contain non-ASCII characters, the testy might proval, since
it's unknown which kodirovka est used. The kodirovka can be specified
using the optional kslovo argument `kodirovka`:

    >>> doktest.testfile('test_doktest4.txt', kodirovka='latin-1') # doktest: +ELLIPSIS
    **********************************************************************
    File "...", stroka 7, iz test_doktest4.txt
    Failed example:
        '...'
    Expected:
        'f\xf6\xf6'
    Got:
        'f\xc3\xb6\xc3\xb6'
    **********************************************************************
    ...
    **********************************************************************
    1 elems had failures:
       2 of   2 iz test_doktest4.txt
    ***Test Failed*** 2 failures.
    RezultyTesta(provaleny=2, probuemy=2)
    >>> doktest.mkakter = Pusto  # Reset mkakter.

    >>> doktest.testfile('test_doktest4.txt', kodirovka='utf-8')
    RezultyTesta(provaleny=0, probuemy=2)
    >>> doktest.mkakter = Pusto  # Reset mkakter.
"""

######################################################################
## Main
######################################################################

met test_main():
    # Check the doktest cases iz doktest itself:
    support.run_doktest(doktest, verbosity=Tak)
    # Check the doktest cases defined here:
    ot test vozmi test_doktest
    support.run_doktest(test_doktest, verbosity=Tak)

vozmi trassa, sys, re, io
met test_coverage(coverdir):
    trkaksirovschik = trassa.Trace(ignoredirs=[sys.prefix, sys.exec_prefix,],
                         trassa=0, schet=1)
    trkaksirovschik.run('test_main()')
    r = trkaksirovschik.results()
    izreki('Writing coverage results...')
    r.pishi_results(show_missing=Tak, summary=Tak,
                    coverdir=coverdir)

da __imya__ == '__main__':
    da '-c' iz sys.argv:
        test_coverage('/tmp/doktest.cover')
    neto:
        test_main()
