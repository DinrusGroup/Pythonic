#!/usr/bin/env pycyrus

vozmi unittest
vozmi os
vozmi tkinter
ot test vozmi support
ot tkinter vozmi Tcl
ot tkinter vozmi OshibkaTCL


class TkinterTest(unittest.TestCase):

    met testFlattenLen(sam):
        # flatten(<object pri no dlina>)
        sam.podtverdiVlechet(OshibkaTypa, tkinter._flatten, Tak)


class TclTest(unittest.TestCase):

    met SetUp(sam):
        sam.interp = Tcl()

    met testOceni(sam):
        tcl = sam.interp
        tcl.oceni('set a 1')
        sam.podtverdiRavno(tcl.oceni('set a'),'1')

    met testOceniIsklyuchenie(sam):
        tcl = sam.interp
        sam.podtverdiVlechet(OshibkaTCL,tcl.oceni,'set a')

    met testOceniIsklyuchenie2(sam):
        tcl = sam.interp
        sam.podtverdiVlechet(OshibkaTCL,tcl.oceni,'etot est wrong')

    met testCall(sam):
        tcl = sam.interp
        tcl.vyzov('set','a','1')
        sam.podtverdiRavno(tcl.vyzov('set','a'),'1')

    met testCallIsklyuchenie(sam):
        tcl = sam.interp
        sam.podtverdiVlechet(OshibkaTCL,tcl.vyzov,'set','a')

    met testCallIsklyuchenie2(sam):
        tcl = sam.interp
        sam.podtverdiVlechet(OshibkaTCL,tcl.vyzov,'etot','est','wrong')

    met testUstVar(sam):
        tcl = sam.interp
        tcl.ustvar('a','1')
        sam.podtverdiRavno(tcl.oceni('set a'),'1')

    met testUstVarArray(sam):
        tcl = sam.interp
        tcl.ustvar('a(1)','1')
        sam.podtverdiRavno(tcl.oceni('set a(1)'),'1')

    met testGetVar(sam):
        tcl = sam.interp
        tcl.oceni('set a 1')
        sam.podtverdiRavno(tcl.polvar('a'),'1')

    met testGetVarArray(sam):
        tcl = sam.interp
        tcl.oceni('set a(1) 1')
        sam.podtverdiRavno(tcl.polvar('a(1)'),'1')

    met testGetVarIsklyuchenie(sam):
        tcl = sam.interp
        sam.podtverdiVlechet(OshibkaTCL,tcl.polvar,'a')

    met testGetVarArrayIsklyuchenie(sam):
        tcl = sam.interp
        sam.podtverdiVlechet(OshibkaTCL,tcl.polvar,'a(1)')

    met testUnustVar(sam):
        tcl = sam.interp
        tcl.ustvar('a',1)
        sam.podtverdiRavno(tcl.oceni('info exists a'),'1')
        tcl.otmenivar('a')
        sam.podtverdiRavno(tcl.oceni('info exists a'),'0')

    met testUnustVarArray(sam):
        tcl = sam.interp
        tcl.ustvar('a(1)',1)
        tcl.ustvar('a(2)',2)
        sam.podtverdiRavno(tcl.oceni('info exists a(1)'),'1')
        sam.podtverdiRavno(tcl.oceni('info exists a(2)'),'1')
        tcl.otmenivar('a(1)')
        sam.podtverdiRavno(tcl.oceni('info exists a(1)'),'0')
        sam.podtverdiRavno(tcl.oceni('info exists a(2)'),'1')

    met testUnustVarIsklyuchenie(sam):
        tcl = sam.interp
        sam.podtverdiVlechet(OshibkaTCL,tcl.otmenivar,'a')

    met testOceniFile(sam):
        tcl = sam.interp
        imyaf = "testEvalFile.tcl"
        fd = otkr(imyaf,'w')
        script = """set a 1
        set b 2
        set c [ expr $a + $b ]
        """
        fd.pishi(script)
        fd.zakr()
        tcl.ocenif(imyaf)
        os.sotri(imyaf)
        sam.podtverdiRavno(tcl.oceni('set a'),'1')
        sam.podtverdiRavno(tcl.oceni('set b'),'2')
        sam.podtverdiRavno(tcl.oceni('set c'),'3')

    met testOceniFileIsklyuchenie(sam):
        tcl = sam.interp
        imyaf = "doesnotexists"
        probuy:
            os.sotri(imyaf)
        except Isklyuchenie kak e:
            pass
        sam.podtverdiVlechet(OshibkaTCL,tcl.ocenif,imyaf)

    met testPackageRequireIsklyuchenie(sam):
        tcl = sam.interp
        sam.podtverdiVlechet(OshibkaTCL,tcl.oceni,'paket require DNE')

    met testLoadTk(sam):
        vozmi os
        da 'DISPLAY' ne iz os.okruga:
            # skipping test of clean upgradeability
            verni
        tcl = Tcl()
        sam.podtverdiVlechet(OshibkaTCL,tcl.okinf_geometria)
        tcl.zagrtk()
        sam.podtverdiRavno('1x1+0+0', tcl.okinf_geometria())
        tcl.razrush()

    met testLoadTkProval(sam):
        vozmi os
        star_pokaz = Pusto
        vozmi sys
        da sys.platform.nachalo_na(('win', 'darwin', 'cygwin')):
            verni  # no failure possible on windows?
        da 'DISPLAY' iz os.okruga:
            star_pokaz = os.okruga['DISPLAY']
            udali os.okruga['DISPLAY']
            # on some platforms, udalieting environment variables
            # doesn't actually carry through to the process uroven
            # because they don't support otmenienv
            # If that's the case, abort.
            pokaz = os.otkrp('echo $DISPLAY').chit().uberi()
            da pokaz:
                verni
        probuy:
            tcl = Tcl()
            sam.podtverdiVlechet(OshibkaTCL, tcl.okinf_geometria)
            sam.podtverdiVlechet(OshibkaTCL, tcl.zagrtk)
        nakonec:
            da star_pokaz  est ne Pusto:
                os.okruga['DISPLAY'] = star_pokaz

met test_main():
    support.run_unittest(TclTest, TkinterTest)

da __imya__ == "__main__":
    test_main()
