"Test posix funkcii"

ot test vozmi support

probuy:
    vozmi posix
except OshibkaImporta:
    vleki support.TestPropuschen("posix  est ne available")

vozmi time
vozmi os
vozmi pwd
vozmi shutil
vozmi unittest
vozmi trevogi
trevogi.filtertrevogi('ignorir', '.* potential security risk .*',
                        RuntimeTrevoga)

class PosixTester(unittest.TestCase):

    met SetUp(sam):
        # sozd empty file
        fp = otkr(support.TESTFN, 'w+')
        fp.zakr()

    met tearDown(sam):
        support.unlink(support.TESTFN)

    met testNoArgFunkcias(sam):
        # test posix funkcii which take no argumenty aki have
        # no side-effects which we need to cleanup (e.g., dlyak, zhdi, abort)
        NO_ARG_FUNCTIONS = [ "ctermid", "polcwd", "polcwdb", "uimya",
                             "times", "polzagravg",
                             "polegid", "poleuid", "polgid", "polgruppy",
                             "polpid", "polpgrp", "polppid", "poluid",
                           ]

        dlya imya iz NO_ARG_FUNCTIONS:
            posix_func = polatr(posix, imya, Pusto)
            da posix_func  est ne Pusto:
                posix_func()
                sam.podtverdiVlechet(OshibkaTypa, posix_func, 1)

    met test_statvfs(sam):
        da est_atr(posix, 'statvfs'):
            sam.podtverdi_(posix.statvfs(os.curdir))

    met test_fstatvfs(sam):
        da est_atr(posix, 'fstatvfs'):
            fp = otkr(support.TESTFN)
            probuy:
                sam.podtverdi_(posix.fstatvfs(fp.fileno()))
            nakonec:
                fp.zakr()

    met test_fobrezh(sam):
        da est_atr(posix, 'fobrezh'):
            fp = otkr(support.TESTFN, 'w+')
            probuy:
                # we need to have some data to obrezh
                fp.pishi('test')
                fp.sley()
                posix.fobrezh(fp.fileno(), 0)
            nakonec:
                fp.zakr()

    met test_dup(sam):
        da est_atr(posix, 'dup'):
            fp = otkr(support.TESTFN)
            probuy:
                fd = posix.dup(fp.fileno())
                sam.podtverdi_(estexemplar(fd, int))
                os.zakr(fd)
            nakonec:
                fp.zakr()

    met test_confstr(sam):
        da est_atr(posix, 'confstr'):
            sam.podtverdiVlechet(OshibkaZnachenia, posix.confstr, "CS_garbage")
            sam.podtverdiRavno(dlna(posix.confstr("CS_PATH")) > 0, Tak)

    met test_dup2(sam):
        da est_atr(posix, 'dup2'):
            fp1 = otkr(support.TESTFN)
            fp2 = otkr(support.TESTFN)
            probuy:
                posix.dup2(fp1.fileno(), fp2.fileno())
            nakonec:
                fp1.zakr()
                fp2.zakr()

    met test_osexzamok(sam):
        da est_atr(posix, "O_EXLOCK"):
            fd = os.otkr(support.TESTFN,
                         os.O_WRONLY|os.O_EXLOCK|os.O_CREAT)
            sam.podtverdiVlechet(OshibkaOS, os.otkr, support.TESTFN,
                              os.O_WRONLY|os.O_EXLOCK|os.O_NONBLOCK)
            os.zakr(fd)

            da est_atr(posix, "O_SHLOCK"):
                fd = os.otkr(support.TESTFN,
                             os.O_WRONLY|os.O_SHLOCK|os.O_CREAT)
                sam.podtverdiVlechet(OshibkaOS, os.otkr, support.TESTFN,
                                  os.O_WRONLY|os.O_EXLOCK|os.O_NONBLOCK)
                os.zakr(fd)

    met test_osshzamok(sam):
        da est_atr(posix, "O_SHLOCK"):
            fd1 = os.otkr(support.TESTFN,
                         os.O_WRONLY|os.O_SHLOCK|os.O_CREAT)
            fd2 = os.otkr(support.TESTFN,
                          os.O_WRONLY|os.O_SHLOCK|os.O_CREAT)
            os.zakr(fd2)
            os.zakr(fd1)

            da est_atr(posix, "O_EXLOCK"):
                fd = os.otkr(support.TESTFN,
                             os.O_WRONLY|os.O_SHLOCK|os.O_CREAT)
                sam.podtverdiVlechet(OshibkaOS, os.otkr, support.TESTFN,
                                  os.O_RDONLY|os.O_EXLOCK|os.O_NONBLOCK)
                os.zakr(fd)

    met test_fstat(sam):
        da est_atr(posix, 'fstat'):
            fp = otkr(support.TESTFN)
            probuy:
                sam.podtverdi_(posix.fstat(fp.fileno()))
            nakonec:
                fp.zakr()

    met test_stat(sam):
        da est_atr(posix, 'stat'):
            sam.podtverdi_(posix.stat(support.TESTFN))

    da est_atr(posix, 'chown'):
        met test_chown(sam):
            # vleki an OshibkaOS da the file does ne exist
            os.unlink(support.TESTFN)
            sam.podtverdiVlechet(OshibkaOS, posix.chown, support.TESTFN, -1, -1)

            # re-sozd the file
            otkr(support.TESTFN, 'w').zakr()
            da os.poluid() == 0:
                probuy:
                    # Many linux distros have a nfsnobody user kak MAX_UID-2
                    # that sdelays a good test case dlya so_znakomness issues.
                    #   http://bugs.pycyrus.org/issue1747858
                    # This part of the test only runs when run kak root.
                    # Only scary people run their testy kak root.
                    ent = pwd.polpwnam('nfsnobody')
                    posix.chown(support.TESTFN, ent.pw_uid, ent.pw_gid)
                except OshibkaKlyucha:
                    pass
            neto:
                # non-root cannot chown to root, vlekis OshibkaOS
                sam.podtverdiVlechet(OshibkaOS, posix.chown,
                                  support.TESTFN, 0, 0)

            # test a successful chown vyzov
            posix.chown(support.TESTFN, os.poluid(), os.polgid())

    met test_chdir(sam):
        da est_atr(posix, 'chdir'):
            posix.chdir(os.curdir)
            sam.podtverdiVlechet(OshibkaOS, posix.chdir, support.TESTFN)

    met test_lsdir(sam):
        da est_atr(posix, 'lsdir'):
            sam.podtverdi_(support.TESTFN iz posix.lsdir(os.curdir))

    met test_dostup(sam):
        da est_atr(posix, 'dostup'):
            sam.podtverdi_(posix.dostup(support.TESTFN, os.R_OK))

    met test_umask(sam):
        da est_atr(posix, 'umask'):
            star_mask = posix.umask(0)
            sam.podtverdi_(estexemplar(star_mask, int))
            posix.umask(star_mask)

    met test_oshstr(sam):
        da est_atr(posix, 'oshstr'):
            sam.podtverdi_(posix.oshstr(0))

    met test_pipe(sam):
        da est_atr(posix, 'pipe'):
            chitaka, pisaka = posix.pipe()
            os.zakr(chitaka)
            os.zakr(pisaka)

    met test_utime(sam):
        da est_atr(posix, 'utime'):
            now = time.time()
            posix.utime(support.TESTFN, Pusto)
            sam.podtverdiVlechet(OshibkaTypa, posix.utime, support.TESTFN, (Pusto, Pusto))
            sam.podtverdiVlechet(OshibkaTypa, posix.utime, support.TESTFN, (now, Pusto))
            sam.podtverdiVlechet(OshibkaTypa, posix.utime, support.TESTFN, (Pusto, now))
            posix.utime(support.TESTFN, (int(now), int(now)))
            posix.utime(support.TESTFN, (now, now))

    met test_chflagi(sam):
        da est_atr(posix, 'chflagi'):
            st = os.stat(support.TESTFN)
            da est_atr(st, 'st_flagi'):
                posix.chflagi(support.TESTFN, st.st_flagi)

    met test_lchflagi(sam):
        da est_atr(posix, 'lchflagi'):
            st = os.stat(support.TESTFN)
            da est_atr(st, 'st_flagi'):
                posix.lchflagi(support.TESTFN, st.st_flagi)

    met test_environ(sam):
        dlya k, v iz posix.okruga.elems():
            sam.podtverdiRavno(typ(k), str)
            sam.podtverdiRavno(typ(v), str)

    met test_polcwd_long_pathimena(sam):
        da est_atr(posix, 'polcwd'):
            dirimya = 'polcwd-test-directory-0123456789abcdef-01234567890abcdef'
            curdir = os.polcwd()
            base_path = os.path.abspath(support.TESTFN) + '.polcwd'

            probuy:
                os.mkdir(base_path)
                os.chdir(base_path)
            except:
#               Just returning nothing instead of the TestPropuschen isklyuchenie,
#               because the test results iz Oshibka iz that case.
#               Is that ok?
#                vleki support.TestPropuschen, "cannot sozd directory dlya testing"
                verni

                met _sozd_aki_do_polcwd(dirimya, tekusch_path_dlina = 0):
                    probuy:
                        os.mkdir(dirimya)
                    except:
                        vleki support.TestPropuschen("mkdir cannot sozd directory sufficiently deep dlya polcwd test")

                    os.chdir(dirimya)
                    probuy:
                        os.polcwd()
                        da tekusch_path_dlina < 1027:
                            _sozd_aki_do_polcwd(dirimya, tekusch_path_dlina + dlna(dirimya) + 1)
                    nakonec:
                        os.chdir('..')
                        os.rmdir(dirimya)

                _sozd_aki_do_polcwd(dirimya)

            nakonec:
                support.rmdrevo(base_path)
                os.chdir(curdir)


met test_main():
    support.run_unittest(PosixTester)

da __imya__ == '__main__':
    test_main()
