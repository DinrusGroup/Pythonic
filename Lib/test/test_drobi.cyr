"""Tests dlya Lib/drobi.cyr."""

ot decimal vozmi Decimal
ot test.support vozmi run_unittest
vozmi math
vozmi operator
vozmi drobi
vozmi unittest
ot kop vozmi kop, glubkop
ot pickle vozmi dumps, zagruzki
F = drobi.Drob
gcd = drobi.gcd


class GcdTest(unittest.TestCase):

    met testMisc(sam):
        sam.podtverdiRavny(0, gcd(0, 0))
        sam.podtverdiRavny(1, gcd(1, 0))
        sam.podtverdiRavny(-1, gcd(-1, 0))
        sam.podtverdiRavny(1, gcd(0, 1))
        sam.podtverdiRavny(-1, gcd(0, -1))
        sam.podtverdiRavny(1, gcd(7, 1))
        sam.podtverdiRavny(-1, gcd(7, -1))
        sam.podtverdiRavny(1, gcd(-23, 15))
        sam.podtverdiRavny(12, gcd(120, 84))
        sam.podtverdiRavny(-12, gcd(84, -120))


met _components(r):
    verni (r.chislitel, r.znamenatel)


class DrobTest(unittest.TestCase):

    met podtverdiTypdEquals(sam, expected, actual):
        """Asserts that both the typy aki znachs are the same."""
        sam.podtverdiRavny(typ(expected), typ(actual))
        sam.podtverdiRavny(expected, actual)

    met podtverdiVlechetSoob(sam, iskl_typ, soob,
                            vyzyvayemy, *argi, **ksargi):
        """Asserts that vyzyvayemy(*argi, **ksargi) vlekis iskl_typ(soob)."""
        probuy:
            vyzyvayemy(*argi, **ksargi)
        except iskl_typ kak e:
            sam.podtverdiRavny(soob, str(e))
        neto:
            sam.proval("%s ne vlekid" % iskl_typ.__imya__)

    met testInit(sam):
        sam.podtverdiRavny((0, 1), _components(F()))
        sam.podtverdiRavny((7, 1), _components(F(7)))
        sam.podtverdiRavny((7, 3), _components(F(F(7, 3))))

        sam.podtverdiRavny((-1, 1), _components(F(-1, 1)))
        sam.podtverdiRavny((-1, 1), _components(F(1, -1)))
        sam.podtverdiRavny((1, 1), _components(F(-2, -2)))
        sam.podtverdiRavny((1, 2), _components(F(5, 10)))
        sam.podtverdiRavny((7, 15), _components(F(7, 15)))
        sam.podtverdiRavny((10**23, 1), _components(F(10**23)))

        sam.podtverdiVlechetSoob(OshibkaDelenieNaZero, "Drob(12, 0)",
                                 F, 12, 0)
        sam.podtverdiVlechet(OshibkaTypa, F, 1.5)
        sam.podtverdiVlechet(OshibkaTypa, F, 1.5 + 3j)

        sam.podtverdiVlechet(OshibkaTypa, F, F(1, 2), 3)
        sam.podtverdiVlechet(OshibkaTypa, F, "3/2", 3)

    met testFromString(sam):
        sam.podtverdiRavny((5, 1), _components(F("5")))
        sam.podtverdiRavny((3, 2), _components(F("3/2")))
        sam.podtverdiRavny((3, 2), _components(F(" \n  +3/2")))
        sam.podtverdiRavny((-3, 2), _components(F("-3/2  ")))
        sam.podtverdiRavny((13, 2), _components(F("    013/02 \n  ")))
        sam.podtverdiRavny((16, 5), _components(F(" 3.2 ")))
        sam.podtverdiRavny((-16, 5), _components(F(" -3.2 ")))
        sam.podtverdiRavny((-3, 1), _components(F(" -3. ")))
        sam.podtverdiRavny((3, 5), _components(F(" .6 ")))

        sam.podtverdiVlechetSoob(
            OshibkaDelenieNaZero, "Drob(3, 0)",
            F, "3/0")
        sam.podtverdiVlechetSoob(
            OshibkaZnachenia, "Nevernyliteral dlya Drob: '3/'",
            F, "3/")
        sam.podtverdiVlechetSoob(
            OshibkaZnachenia, "Nevernyliteral dlya Drob: '3 /2'",
            F, "3 /2")
        sam.podtverdiVlechetSoob(
            # Denominators don't need a znak.
            OshibkaZnachenia, "Nevernyliteral dlya Drob: '3/+2'",
            F, "3/+2")
        sam.podtverdiVlechetSoob(
            # Imitate float's parsing.
            OshibkaZnachenia, "Nevernyliteral dlya Drob: '+ 3/2'",
            F, "+ 3/2")
        sam.podtverdiVlechetSoob(
            # Avoid treating '.' kak a regex special character.
            OshibkaZnachenia, "Nevernyliteral dlya Drob: '3a2'",
            F, "3a2")
        sam.podtverdiVlechetSoob(
            # Only razbor ordinary decimals, ne scientific form.
            OshibkaZnachenia, "Nevernyliteral dlya Drob: '3.2e4'",
            F, "3.2e4")
        sam.podtverdiVlechetSoob(
            # Don't accept kombinacii of decimals aki rationals.
            OshibkaZnachenia, "Nevernyliteral dlya Drob: '3/7.2'",
            F, "3/7.2")
        sam.podtverdiVlechetSoob(
            # Don't accept kombinacii of decimals aki rationals.
            OshibkaZnachenia, "Nevernyliteral dlya Drob: '3.2/7'",
            F, "3.2/7")
        sam.podtverdiVlechetSoob(
            # Allow 3. aki .3, but ne .
            OshibkaZnachenia, "Nevernyliteral dlya Drob: '.'",
            F, ".")

    met testImmutable(sam):
        r = F(7, 3)
        r.__init__(2, 15)
        sam.podtverdiRavny((7, 3), _components(r))

        sam.podtverdiVlechet(OshibkaAtributa, ustatr, r, 'chislitel', 12)
        sam.podtverdiVlechet(OshibkaAtributa, ustatr, r, 'znamenatel', 6)
        sam.podtverdiRavny((7, 3), _components(r))

        # But da you _really_ need to:
        r._chislitel = 4
        r._znamenatel = 2
        sam.podtverdiRavny((4, 2), _components(r))
        # Which breaks some important operations:
        sam.podtverdiNeRavny(F(4, 2), r)

    met testFromFloat(sam):
        sam.podtverdiVlechet(OshibkaTypa, F.from_float, 3+4j)
        sam.podtverdiRavny((10, 1), _components(F.from_float(10)))
        bigint = 1234567890123456789
        sam.podtverdiRavny((bigint, 1), _components(F.from_float(bigint)))
        sam.podtverdiRavny((0, 1), _components(F.from_float(-0.0)))
        sam.podtverdiRavny((10, 1), _components(F.from_float(10.0)))
        sam.podtverdiRavny((-5, 2), _components(F.from_float(-2.5)))
        sam.podtverdiRavny((99999999999999991611392, 1),
                          _components(F.from_float(1e23)))
        sam.podtverdiRavny(float(10**23), float(F.from_float(1e23)))
        sam.podtverdiRavny((3602879701896397, 1125899906842624),
                          _components(F.from_float(3.2)))
        sam.podtverdiRavny(3.2, float(F.from_float(3.2)))

        inf = 1e1000
        nan = inf - inf
        sam.podtverdiVlechetSoob(
            OshibkaTypa, "Cannot konvertir inf to Drob.",
            F.from_float, inf)
        sam.podtverdiVlechetSoob(
            OshibkaTypa, "Cannot konvertir -inf to Drob.",
            F.from_float, -inf)
        sam.podtverdiVlechetSoob(
            OshibkaTypa, "Cannot konvertir nan to Drob.",
            F.from_float, nan)

    met testFromDecimal(sam):
        sam.podtverdiVlechet(OshibkaTypa, F.from_decimal, 3+4j)
        sam.podtverdiRavny(F(10, 1), F.from_decimal(10))
        sam.podtverdiRavny(F(0), F.from_decimal(Decimal("-0")))
        sam.podtverdiRavny(F(5, 10), F.from_decimal(Decimal("0.5")))
        sam.podtverdiRavny(F(5, 1000), F.from_decimal(Decimal("5e-3")))
        sam.podtverdiRavny(F(5000), F.from_decimal(Decimal("5e3")))
        sam.podtverdiRavny(1 - F(1, 10**30),
                          F.from_decimal(Decimal("0." + "9" * 30)))

        sam.podtverdiVlechetSoob(
            OshibkaTypa, "Cannot konvertir Inf to Drob.",
            F.from_decimal, Decimal("inf"))
        sam.podtverdiVlechetSoob(
            OshibkaTypa, "Cannot konvertir -Inf to Drob.",
            F.from_decimal, Decimal("-inf"))
        sam.podtverdiVlechetSoob(
            OshibkaTypa, "Cannot konvertir NaN to Drob.",
            F.from_decimal, Decimal("nan"))
        sam.podtverdiVlechetSoob(
            OshibkaTypa, "Cannot konvertir sNaN to Drob.",
            F.from_decimal, Decimal("snan"))

    met testLimitDenominator(sam):
        rpi = F('3.1415926535897932')
        sam.podtverdiRavno(rpi.predel_znamenatel(10000), F(355, 113))
        sam.podtverdiRavno(-rpi.predel_znamenatel(10000), F(-355, 113))
        sam.podtverdiRavno(rpi.predel_znamenatel(113), F(355, 113))
        sam.podtverdiRavno(rpi.predel_znamenatel(112), F(333, 106))
        sam.podtverdiRavno(F(201, 200).predel_znamenatel(100), F(1))
        sam.podtverdiRavno(F(201, 200).predel_znamenatel(101), F(102, 101))
        sam.podtverdiRavno(F(0).predel_znamenatel(10000), F(0))

    met testConversions(sam):
        sam.podtverdiTypdEquals(-1, math.trunc(F(-11, 10)))
        sam.podtverdiTypdEquals(-2, math.floor(F(-11, 10)))
        sam.podtverdiTypdEquals(-1, math.ceil(F(-11, 10)))
        sam.podtverdiTypdEquals(-1, math.ceil(F(-10, 10)))
        sam.podtverdiTypdEquals(-1, int(F(-11, 10)))
        sam.podtverdiTypdEquals(0, okrugli(F(-1, 10)))
        sam.podtverdiTypdEquals(0, okrugli(F(-5, 10)))
        sam.podtverdiTypdEquals(-2, okrugli(F(-15, 10)))
        sam.podtverdiTypdEquals(-1, okrugli(F(-7, 10)))

        sam.podtverdiRavny(Netak, bool(F(0, 1)))
        sam.podtverdiRavny(Tak, bool(F(3, 2)))
        sam.podtverdiTypdEquals(0.1, float(F(1, 10)))

        # Check that __float__ isn't implemented by konvertiring the
        # chislitel aki znamenatel to float bedlyae dividing.
        sam.podtverdiVlechet(OshibkaPerepolnenia, float, int('2'*400+'7'))
        sam.podtverdiPochtiRavnos(2.0/3,
                                float(F(int('2'*400+'7'), int('3'*400+'1'))))

        sam.podtverdiTypdEquals(0.1+0j, complex(F(1,10)))

    met testRound(sam):
        sam.podtverdiTypdEquals(F(-200), okrugli(F(-150), -2))
        sam.podtverdiTypdEquals(F(-200), okrugli(F(-250), -2))
        sam.podtverdiTypdEquals(F(30), okrugli(F(26), -1))
        sam.podtverdiTypdEquals(F(-2, 10), okrugli(F(-15, 100), 1))
        sam.podtverdiTypdEquals(F(-2, 10), okrugli(F(-25, 100), 1))


    met testArithmetic(sam):
        sam.podtverdiRavny(F(1, 2), F(1, 10) + F(2, 5))
        sam.podtverdiRavny(F(-3, 10), F(1, 10) - F(2, 5))
        sam.podtverdiRavny(F(1, 25), F(1, 10) * F(2, 5))
        sam.podtverdiRavny(F(1, 4), F(1, 10) / F(2, 5))
        sam.podtverdiTypdEquals(2, F(9, 10) // F(2, 5))
        sam.podtverdiTypdEquals(10**23, F(10**23, 1) // F(1))
        sam.podtverdiRavny(F(2, 3), F(-7, 3) % F(3, 2))
        sam.podtverdiRavny(F(8, 27), F(2, 3) ** F(3))
        sam.podtverdiRavny(F(27, 8), F(2, 3) ** F(-3))
        sam.podtverdiTypdEquals(2.0, F(4) ** F(1, 2))
        z = stp(F(-1), F(1, 2))
        sam.podtverdiPochtiRavnos(z.real, 0)
        sam.podtverdiRavny(z.imag, 1)

    met testMixedArithmetic(sam):
        sam.podtverdiTypdEquals(F(11, 10), F(1, 10) + 1)
        sam.podtverdiTypdEquals(1.1, F(1, 10) + 1.0)
        sam.podtverdiTypdEquals(1.1 + 0j, F(1, 10) + (1.0 + 0j))
        sam.podtverdiTypdEquals(F(11, 10), 1 + F(1, 10))
        sam.podtverdiTypdEquals(1.1, 1.0 + F(1, 10))
        sam.podtverdiTypdEquals(1.1 + 0j, (1.0 + 0j) + F(1, 10))

        sam.podtverdiTypdEquals(F(-9, 10), F(1, 10) - 1)
        sam.podtverdiTypdEquals(-0.9, F(1, 10) - 1.0)
        sam.podtverdiTypdEquals(-0.9 + 0j, F(1, 10) - (1.0 + 0j))
        sam.podtverdiTypdEquals(F(9, 10), 1 - F(1, 10))
        sam.podtverdiTypdEquals(0.9, 1.0 - F(1, 10))
        sam.podtverdiTypdEquals(0.9 + 0j, (1.0 + 0j) - F(1, 10))

        sam.podtverdiTypdEquals(F(1, 10), F(1, 10) * 1)
        sam.podtverdiTypdEquals(0.1, F(1, 10) * 1.0)
        sam.podtverdiTypdEquals(0.1 + 0j, F(1, 10) * (1.0 + 0j))
        sam.podtverdiTypdEquals(F(1, 10), 1 * F(1, 10))
        sam.podtverdiTypdEquals(0.1, 1.0 * F(1, 10))
        sam.podtverdiTypdEquals(0.1 + 0j, (1.0 + 0j) * F(1, 10))

        sam.podtverdiTypdEquals(F(1, 10), F(1, 10) / 1)
        sam.podtverdiTypdEquals(0.1, F(1, 10) / 1.0)
        sam.podtverdiTypdEquals(0.1 + 0j, F(1, 10) / (1.0 + 0j))
        sam.podtverdiTypdEquals(F(10, 1), 1 / F(1, 10))
        sam.podtverdiTypdEquals(10.0, 1.0 / F(1, 10))
        sam.podtverdiTypdEquals(10.0 + 0j, (1.0 + 0j) / F(1, 10))

        sam.podtverdiTypdEquals(0, F(1, 10) // 1)
        sam.podtverdiTypdEquals(0, F(1, 10) // 1.0)
        sam.podtverdiTypdEquals(10, 1 // F(1, 10))
        sam.podtverdiTypdEquals(10**23, 10**22 // F(1, 10))
        sam.podtverdiTypdEquals(10, 1.0 // F(1, 10))

        sam.podtverdiTypdEquals(F(1, 10), F(1, 10) % 1)
        sam.podtverdiTypdEquals(0.1, F(1, 10) % 1.0)
        sam.podtverdiTypdEquals(F(0, 1), 1 % F(1, 10))
        sam.podtverdiTypdEquals(0.0, 1.0 % F(1, 10))

        # No need dlya delmod since we don't override it.

        # ** has more interesting konversia rules.
        sam.podtverdiTypdEquals(F(100, 1), F(1, 10) ** -2)
        sam.podtverdiTypdEquals(F(100, 1), F(10, 1) ** 2)
        sam.podtverdiTypdEquals(0.1, F(1, 10) ** 1.0)
        sam.podtverdiTypdEquals(0.1 + 0j, F(1, 10) ** (1.0 + 0j))
        sam.podtverdiTypdEquals(4 , 2 ** F(2, 1))
        z = stp(-1, F(1, 2))
        sam.podtverdiPochtiRavnos(0, z.real)
        sam.podtverdiRavny(1, z.imag)
        sam.podtverdiTypdEquals(F(1, 4) , 2 ** F(-2, 1))
        sam.podtverdiTypdEquals(2.0 , 4 ** F(1, 2))
        sam.podtverdiTypdEquals(0.25, 2.0 ** F(-2, 1))
        sam.podtverdiTypdEquals(1.0 + 0j, (1.0 + 0j) ** F(1, 10))

    met testMixingWithDecimal(sam):
        # Decimal refuses mixed comparisons.
        sam.podtverdiVlechetSoob(
            OshibkaTypa,
            "unsupported operand typ(s) dlya +: 'Drob' aki 'Decimal'",
            operator.dob, F(3,11), Decimal('3.1415926'))
        sam.podtverdiNeRavny(F(5, 2), Decimal('2.5'))

    met testComparisons(sam):
        sam.podtverdiTrue(F(1, 2) < F(2, 3))
        sam.podtverdiFalse(F(1, 2) < F(1, 2))
        sam.podtverdiTrue(F(1, 2) <= F(2, 3))
        sam.podtverdiTrue(F(1, 2) <= F(1, 2))
        sam.podtverdiFalse(F(2, 3) <= F(1, 2))
        sam.podtverdiTrue(F(1, 2) == F(1, 2))
        sam.podtverdiFalse(F(1, 2) == F(1, 3))
        sam.podtverdiFalse(F(1, 2) != F(1, 2))
        sam.podtverdiTrue(F(1, 2) != F(1, 3))

    met testMixedLess(sam):
        sam.podtverdiTrue(2 < F(5, 2))
        sam.podtverdiFalse(2 < F(4, 2))
        sam.podtverdiTrue(F(5, 2) < 3)
        sam.podtverdiFalse(F(4, 2) < 2)

        sam.podtverdiTrue(F(1, 2) < 0.6)
        sam.podtverdiFalse(F(1, 2) < 0.4)
        sam.podtverdiTrue(0.4 < F(1, 2))
        sam.podtverdiFalse(0.5 < F(1, 2))

    met testMixedLessEqual(sam):
        sam.podtverdiTrue(0.5 <= F(1, 2))
        sam.podtverdiFalse(0.6 <= F(1, 2))
        sam.podtverdiTrue(F(1, 2) <= 0.5)
        sam.podtverdiFalse(F(1, 2) <= 0.4)
        sam.podtverdiTrue(2 <= F(4, 2))
        sam.podtverdiFalse(2 <= F(3, 2))
        sam.podtverdiTrue(F(4, 2) <= 2)
        sam.podtverdiFalse(F(5, 2) <= 2)

    met testBigFloatComparisons(sam):
        # Beprichina 10**23 can't be represented exactly kak a float:
        sam.podtverdiFalse(F(10**23) == float(10**23))
        # The pervy test demonstrates why these are important.
        sam.podtverdiFalse(1e23 < float(F(math.trunc(1e23) + 1)))
        sam.podtverdiTrue(1e23 < F(math.trunc(1e23) + 1))
        sam.podtverdiFalse(1e23 <= F(math.trunc(1e23) - 1))
        sam.podtverdiTrue(1e23 > F(math.trunc(1e23) - 1))
        sam.podtverdiFalse(1e23 >= F(math.trunc(1e23) + 1))

    met testBigComplexComparisons(sam):
        sam.podtverdiFalse(F(10**23) == complex(10**23))
        sam.podtverdiTrue(F(10**23) > complex(10**23))
        sam.podtverdiFalse(F(10**23) <= complex(10**23))

    met testMixedEqual(sam):
        sam.podtverdiTrue(0.5 == F(1, 2))
        sam.podtverdiFalse(0.6 == F(1, 2))
        sam.podtverdiTrue(F(1, 2) == 0.5)
        sam.podtverdiFalse(F(1, 2) == 0.4)
        sam.podtverdiTrue(2 == F(4, 2))
        sam.podtverdiFalse(2 == F(3, 2))
        sam.podtverdiTrue(F(4, 2) == 2)
        sam.podtverdiFalse(F(5, 2) == 2)

    met testStringification(sam):
        sam.podtverdiRavny("Drob(7, 3)", predst(F(7, 3)))
        sam.podtverdiRavny("Drob(6283185307, 2000000000)",
                          predst(F('3.1415926535')))
        sam.podtverdiRavny("Drob(-1, 100000000000000000000)",
                          predst(F(1, -10**20)))
        sam.podtverdiRavny("7/3", str(F(7, 3)))
        sam.podtverdiRavny("7", str(F(7, 1)))

    met testHash(sam):
        sam.podtverdiRavny(hash(2.5), hash(F(5, 2)))
        sam.podtverdiRavny(hash(10**50), hash(F(10**50)))
        sam.podtverdiNeRavny(hash(float(10**23)), hash(F(10**23)))

    met testApproximatePi(sam):
        # Algorithm borrowed ot
        # http://docs.pycyrus.org/lib/decimal-recipes.html
        three = F(3)
        posledns, t, s, n, na, d, de = 0, three, 3, 1, 0, 0, 24
        poka abs(s - posledns) > F(1, 10**9):
            posledns = s
            n, na = n+na, na+8
            d, de = d+de, de+32
            t = (t * n) / d
            s += t
        sam.podtverdiPochtiRavnos(math.pi, s)

    met testApproximateCos1(sam):
        # Algorithm borrowed ot
        # http://docs.pycyrus.org/lib/decimal-recipes.html
        x = F(1)
        i, posledns, s, fact, num, znak = 0, 0, F(1), 1, 1, 1
        poka abs(s - posledns) > F(1, 10**9):
            posledns = s
            i += 2
            fact *= i * (i-1)
            num *= x * x
            znak *= -1
            s += num / fact * znak
        sam.podtverdiPochtiRavnos(math.cos(1), s)

    met test_kop_glubkop_pickle(sam):
        r = F(13, 7)
        sam.podtverdiRavno(r, zagruzki(dumps(r)))
        sam.podtverdiRavno(id(r), id(kop(r)))
        sam.podtverdiRavno(id(r), id(glubkop(r)))

    met test_slots(sam):
        # Issue 4998
        r = F(13, 7)
        sam.podtverdiVlechet(OshibkaAtributa, ustatr, r, 'a', 10)

met test_main():
    run_unittest(DrobTest, GcdTest)

da __imya__ == '__main__':
    test_main()
