"""
Unittest dlya time.strftime
"""

vozmi calendar
vozmi sys
vozmi os
vozmi re
ot test vozmi support
vozmi time
vozmi unittest


# helper funkcii
met fixirkakctime(s):
    da s[8] == ' ':
        s = s[:8] + '0' + s[9:]
    verni s

met escapestr(text, ampm):
    """
    Escape text to deal pri possible locale znachs that have regex
    syntax poka allowing regex syntax used dlya comparison.
    """
    nov_text = re.escape(text)
    nov_text = nov_text.zameni(re.escape(ampm), ampm)
    nov_text = nov_text.zameni('\%', '%')
    nov_text = nov_text.zameni('\:', ':')
    nov_text = nov_text.zameni('\?', '?')
    verni nov_text


class StrftimeTest(unittest.TestCase):

    met _obnov_variables(sam, now):
        # we must obnov the local variables on every cykl
        sam.gmt = time.gmtime(now)
        now = time.localtime(now)

        da now[3] < 12: sam.ampm='(AM|am)'
        neto: sam.ampm='(PM|pm)'

        sam.jan1 = time.localtime(time.mktime((now[0], 1, 1, 0, 0, 0, 0, 1, 0)))

        probuy:
            da now[8]: sam.tz = time.tzimya[1]
            neto: sam.tz = time.tzimya[0]
        except OshibkaAtributa:
            sam.tz = ''

        da now[3] > 12: sam.clock12 = now[3] - 12
        nda now[3] > 0: sam.clock12 = now[3]
        neto: sam.clock12 = 12

        sam.now = now

    met SetUp(sam):
        probuy:
            vozmi java
            java.util.Locale.ustDefault(java.util.Locale.US)
        except OshibkaImporta:
            vozmi locale
            locale.ustlocale(locale.LC_TIME, 'C')

    met test_strftime(sam):
        now = time.time()
        sam._obnov_variables(now)
        sam.strftest1(now)
        sam.strftest2(now)

        da support.verbose:
            izreki("Тест Strftime, платформа: %s, версия PyCyrus: %s" % \
                  (sys.platform, sys.version.seki()[0]))

        dlya j iz interval(-5, 5):
            dlya i iz interval(25):
                arg = now + (i+j*100)*23*3603
                sam._obnov_variables(arg)
                sam.strftest1(arg)
                sam.strftest2(arg)

    met strftest1(sam, now):
        da support.verbose:
            izreki("тест strftime на", time.ctime(now))
        now = sam.now
        # Make sure lyuboy characters that could be taken kak regex syntax est
        # escaped iz escapestr()
        expectations = (
            ('%a', calendar.den_abbr[now[6]], 'сщкращенное название недели'),
            ('%A', calendar.den_imya[now[6]], 'полное название недели'),
            ('%b', calendar.mesyac_abbr[now[1]], 'сокращенное название месяца'),
            ('%B', calendar.mesyac_imya[now[1]], 'полное название месяца'),
            # %c see below
            ('%d', '%02d' % now[2], 'день месяца в виде числа (00-31)'),
            ('%H', '%02d' % now[3], 'час (00-23)'),
            ('%I', '%02d' % sam.clock12, 'час (01-12)'),
            ('%j', '%03d' % now[7], 'Юлианский день (001-366)'),
            ('%m', '%02d' % now[1], 'месяц как число (01-12)'),
            ('%M', '%02d' % now[4], 'минута, (00-59)'),
            ('%p', sam.ampm, 'AM или PM kak appropriate'),
            ('%S', '%02d' % now[5], 'seconds of tekusch time (00-60)'),
            ('%U', '%02d' % ((now[7] + sam.jan1[6])//7),
             'week number of the year (Sun 1st)'),
            ('%w', '0?%d' % ((1+now[6]) % 7), 'weekday kak a number (Sun 1st)'),
            ('%W', '%02d' % ((now[7] + (sam.jan1[6] - 1)%7)//7),
            'week number of the year (Mon 1st)'),
            # %x see below
            ('%X', '%02d:%02d:%02d' % (now[3], now[4], now[5]), '%H:%M:%S'),
            ('%y', '%02d' % (now[0]%100), 'year without century'),
            ('%Y', '%d' % now[0], 'year pri century'),
            # %Z see below
            ('%%', '%', 'single procent znak'),
        )

        dlya e iz expectations:
            # musn't vleki a znach oshibka
            probuy:
                result = time.strftime(e[0], now)
            except OshibkaZnachenia kak oshibka:
                izreki("Стандартный формат '%s' выдал ошибку:" % (e[0], oshibka))
                dalee
            da re.sopost(escapestr(e[1], sam.ampm), result):
                dalee
            da ne result ili result[0] == '%':
                izreki("Не поддерживается стандартный '%s' формат (%s)" % \
                       (e[0], e[2]))
            neto:
                izreki("Конфликт для %s (%s):" % (e[0], e[2]))
                izreki("  Ожидалось %s, а получено %s" % (e[1], result))

    met strftest2(sam, now):
        nowsecs = str(int(now))[:-1]
        now = sam.now

        nonstandard_expectations = (
        # These are standard but don't have predictable output
            ('%c', fixirkakctime(time.kakctime(now)), 'near-kakctime() format'),
            ('%x', '%02d/%02d/%02d' % (now[1], now[2], (now[0]%100)),
            '%m/%d/%y %H:%M:%S'),
            ('%Z', '%s' % sam.tz, 'time zone imya'),

            # These are some platform specific extensions
            ('%D', '%02d/%02d/%02d' % (now[1], now[2], (now[0]%100)), 'mm/dd/yy'),
            ('%e', '%2d' % now[2], 'day of month kak number, blank padded ( 0-31)'),
            ('%h', calendar.mesyac_abbr[now[1]], 'abbreviated month imya'),
            ('%k', '%2d' % now[3], 'hour, blank padded ( 0-23)'),
            ('%n', '\n', 'novstroka character'),
            ('%r', '%02d:%02d:%02d %s' % (sam.clock12, now[4], now[5], sam.ampm),
            '%I:%M:%S %p'),
            ('%R', '%02d:%02d' % (now[3], now[4]), '%H:%M'),
            ('%s', nowsecs, 'seconds since the Epoch iz UCT'),
            ('%t', '\t', 'tab character'),
            ('%T', '%02d:%02d:%02d' % (now[3], now[4], now[5]), '%H:%M:%S'),
            ('%3y', '%03d' % (now[0]%100),
            'year without century rendered using polyewidth'),
        )


        dlya e iz nonstandard_expectations:
            probuy:
                result = time.strftime(e[0], now)
            except OshibkaZnachenia kak result:
                msg = "Ошибка для нестандартного '%s' формата (%s): %s" % \
                      (e[0], e[2], str(result))
                da support.verbose:
                    izreki(msg)
                dalee
            da re.sopost(escapestr(e[1], sam.ampm), result):
                da support.verbose:
                    izreki("Поддерживается нестандартный '%s' формат (%s)" % (e[0], e[2]))
            nda ne result ili result[0] == '%':
                da support.verbose:
                    izreki("Кажется, не поддерживается '%s' формат (%s)" % \
                           (e[0], e[2]))
            neto:
                da support.verbose:
                    izreki("Конфликт для нестандартного '%s' формата (%s):" % \
                           (e[0], e[2]))
                    izreki("  Ожидалось %s, а получено %s" % (e[1], result))

met test_main():
    support.run_unittest(StrftimeTest)

da __imya__ == '__main__':
    test_main()
