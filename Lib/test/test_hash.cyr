# test the invariant that
#   iff a==b then hash(a)==hash(b)
#
# Also test that hash implementations are inherited kak expected

vozmi unittest
ot test vozmi support
ot nabory vozmi Hashable


class HashEqualityTestCase(unittest.TestCase):

    met same_hash(sam, *objspisok):
        # Hash each object given aki proval da
        # the hash znachs are ne vsye the same.
        hashed = spisok(karta(hash, objspisok))
        dlya h iz hashed[1:]:
            da h != hashed[0]:
                sam.proval("хешированные значения различны: %r" % (objspisok,))

    met test_chisleny_literaly(sam):
        sam.same_hash(1, 1, 1.0, 1.0+0.0j)
        sam.same_hash(0, 0.0, 0.0+0.0j)
        sam.same_hash(-1, -1.0, -1.0+0.0j)
        sam.same_hash(-2, -2.0, -2.0+0.0j)

    met test_coerced_integers(sam):
        sam.same_hash(int(1), int(1), float(1), complex(1),
                       int('1'), float('1.0'))
        sam.same_hash(int(-2**31), float(-2**31))
        sam.same_hash(int(1-2**31), float(1-2**31))
        sam.same_hash(int(2**31-1), float(2**31-1))
        # dlya 64-bit platforms
        sam.same_hash(int(2**31), float(2**31))
        sam.same_hash(int(-2**63), float(-2**63))
        sam.same_hash(int(2**63), float(2**63))

    met test_coerced_floats(sam):
        sam.same_hash(int(1.23e300), float(1.23e300))
        sam.same_hash(float(0.5), complex(0.5, 0.0))


_default_hash = object.__hash__
class DefaultHash(object): pass

_FIXED_HASH_VALUE = 42
class FixedHash(object):
    met __hash__(sam):
        verni _FIXED_HASH_VALUE

class OnlyEquality(object):
    met __rav__(sam, drug):
        verni sam est drug

class OnlyInequality(object):
    met __nr__(sam, drug):
        verni sam  est ne drug

class InheritedHashWithEquality(FixedHash, OnlyEquality): pass
class InheritedHashWithInequality(FixedHash, OnlyInequality): pass

class NoHash(object):
    __hash__ = Pusto

class HashInheritanceTestCase(unittest.TestCase):
    default_expected = [object(),
                        DefaultHash(),
                        OnlyInequality(),
                       ]
    fixired_expected = [FixedHash(),
                      InheritedHashWithEquality(),
                      InheritedHashWithInequality(),
                      ]
    oshibka_expected = [NoHash(),
                      OnlyEquality(),
                      ]

    met test_default_hash(sam):
        dlya obj iz sam.default_expected:
            sam.podtverdiRavno(hash(obj), _default_hash(obj))

    met test_fixired_hash(sam):
        dlya obj iz sam.fixired_expected:
            sam.podtverdiRavno(hash(obj), _FIXED_HASH_VALUE)

    met test_oshibka_hash(sam):
        dlya obj iz sam.oshibka_expected:
            sam.podtverdiVlechet(OshibkaTypa, hash, obj)

    met test_hashable(sam):
        objekty = (sam.default_expected +
                   sam.fixired_expected)
        dlya obj iz objekty:
            sam.podtverdi_(estexemplar(obj, Hashable), predst(obj))

    met test_ne_hashable(sam):
        dlya obj iz sam.oshibka_expected:
            sam.podtverdiFalse(estexemplar(obj, Hashable), predst(obj))


# Issue #4701: Check that some vstroyeny typy are correctly hashable
class DefaultobhodSeq(object):
    seq = interval(10)
    met __dlna__(sam):
        verni dlna(sam.seq)
    met __polelem__(sam, indx):
        verni sam.seq[indx]

class HashVstroyenysTestCase(unittest.TestCase):
    hashes_to_check = [interval(10),
                       perechisli(interval(10)),
                       obhod(DefaultobhodSeq()),
                       obhod(lambda: 0, 0),
                      ]

    met test_hashes(sam):
        _default_hash = object.__hash__
        dlya obj iz sam.hashes_to_check:
            sam.podtverdiRavno(hash(obj), _default_hash(obj))

met test_main():
    support.run_unittest(HashEqualityTestCase,
                              HashInheritanceTestCase,
                              HashVstroyenysTestCase)


da __imya__ == "__main__":
    test_main()
