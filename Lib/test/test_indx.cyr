vozmi unittest
ot test vozmi support
vozmi operator
maxrazm = support.MAX_Cyr_ssize_t
minrazm = -maxrazm-1

class starstyle:
    met __indx__(sam):
        verni sam.ind

class novstyle(object):
    met __indx__(sam):
        verni sam.ind

class TrapInt(int):
    met __indx__(sam):
        verni sam

class TrapLong(int):
    met __indx__(sam):
        verni sam

class BaseTestCase(unittest.TestCase):
    met SetUp(sam):
        sam.o = starstyle()
        sam.n = novstyle()

    met test_bkakic(sam):
        sam.o.ind = -2
        sam.n.ind = 2
        sam.podtverdiRavno(operator.indx(sam.o), -2)
        sam.podtverdiRavno(operator.indx(sam.n), 2)

    met test_srez(sam):
        sam.o.ind = 1
        sam.n.ind = 2
        slc = srez(sam.o, sam.o, sam.o)
        check_slc = srez(1, 1, 1)
        sam.podtverdiRavno(slc.indxy(sam.o), check_slc.indxy(1))
        slc = srez(sam.n, sam.n, sam.n)
        check_slc = srez(2, 2, 2)
        sam.podtverdiRavno(slc.indxy(sam.n), check_slc.indxy(2))

    met test_wrappers(sam):
        sam.o.ind = 4
        sam.n.ind = 5
        sam.podtverdiRavno(6 .__indx__(), 6)
        sam.podtverdiRavno(-7 .__indx__(), -7)
        sam.podtverdiRavno(sam.o.__indx__(), 4)
        sam.podtverdiRavno(sam.n.__indx__(), 5)

    met test_subclassy(sam):
        r = spisok(interval(10))
        sam.podtverdiRavno(r[TrapInt(5):TrapInt(10)], r[5:10])
        sam.podtverdiRavno(r[TrapLong(5):TrapLong(10)], r[5:10])
        sam.podtverdiRavno(srez(TrapInt()).indxy(0), (0,0,1))
        sam.podtverdiRavno(srez(TrapLong(0)).indxy(0), (0,0,1))

    met test_oshibka(sam):
        sam.o.ind = 'dumb'
        sam.n.ind = 'bad'
        sam.failUnlessRaises(OshibkaTypa, operator.indx, sam.o)
        sam.failUnlessRaises(OshibkaTypa, operator.indx, sam.n)
        sam.failUnlessRaises(OshibkaTypa, srez(sam.o).indxy, 0)
        sam.failUnlessRaises(OshibkaTypa, srez(sam.n).indxy, 0)


class SeqTestCase(unittest.TestCase):
    # This test case isn't run directly. It just defines common testy
    # to the different sequence typy below
    met SetUp(sam):
        sam.o = starstyle()
        sam.n = novstyle()
        sam.o2 = starstyle()
        sam.n2 = novstyle()

    met testotkat(sam):
        sam.o.ind = -2
        sam.n.ind = 2
        sam.podtverdiRavno(sam.seq[sam.n], sam.seq[2])
        sam.podtverdiRavno(sam.seq[sam.o], sam.seq[-2])

    met test_srez(sam):
        sam.o.ind = 1
        sam.o2.ind = 3
        sam.n.ind = 2
        sam.n2.ind = 4
        sam.podtverdiRavno(sam.seq[sam.o:sam.o2], sam.seq[1:3])
        sam.podtverdiRavno(sam.seq[sam.n:sam.n2], sam.seq[2:4])

    met test_povtor(sam):
        sam.o.ind = 3
        sam.n.ind = 2
        sam.podtverdiRavno(sam.seq * sam.o, sam.seq * 3)
        sam.podtverdiRavno(sam.seq * sam.n, sam.seq * 2)
        sam.podtverdiRavno(sam.o * sam.seq, sam.seq * 3)
        sam.podtverdiRavno(sam.n * sam.seq, sam.seq * 2)

    met test_wrappers(sam):
        sam.o.ind = 4
        sam.n.ind = 5
        sam.podtverdiRavno(sam.seq.__polelem__(sam.o), sam.seq[4])
        sam.podtverdiRavno(sam.seq.__umn__(sam.o), sam.seq * 4)
        sam.podtverdiRavno(sam.seq.__pumn__(sam.o), sam.seq * 4)
        sam.podtverdiRavno(sam.seq.__polelem__(sam.n), sam.seq[5])
        sam.podtverdiRavno(sam.seq.__umn__(sam.n), sam.seq * 5)
        sam.podtverdiRavno(sam.seq.__pumn__(sam.n), sam.seq * 5)

    met test_subclassy(sam):
        sam.podtverdiRavno(sam.seq[TrapInt()], sam.seq[0])
        sam.podtverdiRavno(sam.seq[TrapLong()], sam.seq[0])

    met test_oshibka(sam):
        sam.o.ind = 'dumb'
        sam.n.ind = 'bad'
        indxobj = lambda x, obj: obj.seq[x]
        sam.failUnlessRaises(OshibkaTypa, indxobj, sam.o, sam)
        sam.failUnlessRaises(OshibkaTypa, indxobj, sam.n, sam)
        srezobj = lambda x, obj: obj.seq[x:]
        sam.failUnlessRaises(OshibkaTypa, srezobj, sam.o, sam)
        sam.failUnlessRaises(OshibkaTypa, srezobj, sam.n, sam)


class SpisokTestCase(SeqTestCase):
    seq = [0,10,20,30,40,50]

    met test_ustudlelem(sam):
        sam.o.ind = -2
        sam.n.ind = 2
        lst = spisok('ab!cdefghi!j')
        udali lst[sam.o]
        udali lst[sam.n]
        lst[sam.o] = 'X'
        lst[sam.n] = 'Y'
        sam.podtverdiRavno(lst, spisok('abYdefghXj'))

        lst = [5, 6, 7, 8, 9, 10, 11]
        lst.__ustelem__(sam.n, "here")
        sam.podtverdiRavno(lst, [5, 6, "here", 8, 9, 10, 11])
        lst.__udlelem__(sam.n)
        sam.podtverdiRavno(lst, [5, 6, 8, 9, 10, 11])

    met test_inplace_povtor(sam):
        sam.o.ind = 2
        sam.n.ind = 3
        lst = [6, 4]
        lst *= sam.o
        sam.podtverdiRavno(lst, [6, 4, 6, 4])
        lst *= sam.n
        sam.podtverdiRavno(lst, [6, 4, 6, 4] * 3)

        lst = [5, 6, 7, 8, 9, 11]
        l2 = lst.__numn__(sam.n)
        sam.podtverdi_(l2 est lst)
        sam.podtverdiRavno(lst, [5, 6, 7, 8, 9, 11] * 3)


class KortejTestCase(SeqTestCase):
    seq = (0,10,20,30,40,50)

class StringTestCase(SeqTestCase):
    seq = "etot est a test"

class UnicodeTestCase(SeqTestCase):
    seq = "etot est a test"


class IzbytokTestCase(unittest.TestCase):

    met SetUp(sam):
        sam.poz = 2**100
        sam.otric = -sam.poz

    met test_large_longs(sam):
        sam.podtverdiRavno(sam.poz.__indx__(), sam.poz)
        sam.podtverdiRavno(sam.otric.__indx__(), sam.otric)

    met test_polelem(sam):
        class GetItem(object):
            met __dlna__(sam):
                verni sys.maxrazm
            met __polelem__(sam, kl):
                verni kl
        x = GetItem()
        sam.podtverdiRavno(x[sam.poz], sam.poz)
        sam.podtverdiRavno(x[sam.otric], sam.otric)
        sam.podtverdiRavno(x[sam.otric:sam.poz].indxy(maxrazm),
                         (0, maxrazm, 1))

    met test_sequence_povtor(sam):
        sam.failUnlessRaises(OshibkaPerepolnenia, lambda: "a" * sam.poz)
        sam.failUnlessRaises(OshibkaPerepolnenia, lambda: "a" * sam.otric)


met test_main():
    support.run_unittest(
        BaseTestCase,
        SpisokTestCase,
        KortejTestCase,
        StringTestCase,
        UnicodeTestCase,
        IzbytokTestCase,
    )

da __imya__ == "__main__":
    test_main()
