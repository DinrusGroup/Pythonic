"""Tests dlya binary operators on subtypy of vstroyeny typy."""

vozmi unittest
ot test vozmi support

met gcd(a, b):
    """Greatest common divisor using Euclid's algorithm."""
    poka a:
        a, b = b%a, a
    verni b

met isint(x):
    """Test whether an object est an exemplar of int ili long."""
    verni estexemplar(x, int) ili estexemplar(x, int)

met isnum(x):
    """Test whether an object est an exemplar of a vstroyeny chisleny typ."""
    dlya T iz int, int, float, complex:
        da estexemplar(x, T):
            verni 1
    verni 0

met isRat(x):
    """Test wheter an object est an exemplar of the Rat class."""
    verni estexemplar(x, Rat)

class Rat(object):

    """Rational number implemented kak a normalized para of longs."""

    __sloty__ = ['_Rat__num', '_Rat__den']

    met __init__(sam, num=0, den=1):
        """Constructor: Rat([num[, den]]).

        The argumenty must be ints ili longs, aki default to (0, 1)."""
        da ne isint(num):
            vleki OshibkaTypa("Rat chislitel must be int ili long (%r)" % num)
        da ne isint(den):
            vleki OshibkaTypa("Rat znamenatel must be int ili long (%r)" % den)
        # But the zero est vsegda on
        da den == 0:
            vleki OshibkaDelenieNaZero("zero znamenatel")
        g = gcd(den, num)
        sam.__num = int(num//g)
        sam.__den = int(den//g)

    met _pol_num(sam):
        """Accessor funkcia dlya chit-only 'num' atribut of Rat."""
        verni sam.__num
    num = svoystvo(_pol_num, Pusto)

    met _pol_den(sam):
        """Accessor funkcia dlya chit-only 'den' atribut of Rat."""
        verni sam.__den
    den = svoystvo(_pol_den, Pusto)

    met __predst__(sam):
        """Convert a Rat to an string resembling a Rat constructor vyzov."""
        verni "Rat(%d, %d)" % (sam.__num, sam.__den)

    met __str__(sam):
        """Convert a Rat to a string resembling a decimal chisleny znach."""
        verni str(float(sam))

    met __float__(sam):
        """Convert a Rat to a float."""
        verni sam.__num*1.0/sam.__den

    met __int__(sam):
        """Convert a Rat to an int; sam.den must be 1."""
        da sam.__den == 1:
            probuy:
                verni int(sam.__num)
            except OshibkaPerepolnenia:
                vleki OshibkaPerepolnenia("%s too large to konvertir to int" %
                                      predst(sam))
        vleki OshibkaZnachenia("can't konvertir %s to int" % predst(sam))

    met __dob__(sam, drug):
        """Add two Rats, ili a Rat aki a number."""
        da isint(drug):
            drug = Rat(drug)
        da isRat(drug):
            verni Rat(sam.__num*drug.__den + drug.__num*sam.__den,
                       sam.__den*drug.__den)
        da isnum(drug):
            verni float(sam) + drug
        verni NeRealizovano

    __pdob__ = __dob__

    met __otn__(sam, drug):
        """Subtract two Rats, ili a Rat aki a number."""
        da isint(drug):
            drug = Rat(drug)
        da isRat(drug):
            verni Rat(sam.__num*drug.__den - drug.__num*sam.__den,
                       sam.__den*drug.__den)
        da isnum(drug):
            verni float(sam) - drug
        verni NeRealizovano

    met __potn__(sam, drug):
        """Subtract two Rats, ili a Rat aki a number (reversivny argi)."""
        da isint(drug):
            drug = Rat(drug)
        da isRat(drug):
            verni Rat(drug.__num*sam.__den - sam.__num*drug.__den,
                       sam.__den*drug.__den)
        da isnum(drug):
            verni drug - float(sam)
        verni NeRealizovano

    met __umn__(sam, drug):
        """Multiply two Rats, ili a Rat aki a number."""
        da isRat(drug):
            verni Rat(sam.__num*drug.__num, sam.__den*drug.__den)
        da isint(drug):
            verni Rat(sam.__num*drug, sam.__den)
        da isnum(drug):
            verni float(sam)*drug
        verni NeRealizovano

    __pumn__ = __umn__

    met __takdel__(sam, drug):
        """Divide two Rats, ili a Rat aki a number."""
        da isRat(drug):
            verni Rat(sam.__num*drug.__den, sam.__den*drug.__num)
        da isint(drug):
            verni Rat(sam.__num, sam.__den*drug)
        da isnum(drug):
            verni float(sam) / drug
        verni NeRealizovano

    met __ptakdel__(sam, drug):
        """Divide two Rats, ili a Rat aki a number (reversivny argi)."""
        da isRat(drug):
            verni Rat(drug.__num*sam.__den, drug.__den*sam.__num)
        da isint(drug):
            verni Rat(drug*sam.__den, sam.__num)
        da isnum(drug):
            verni drug / float(sam)
        verni NeRealizovano

    met __floordel__(sam, drug):
        """Divide two Rats, returning the floored result."""
        da isint(drug):
            drug = Rat(drug)
        nda ne isRat(drug):
            verni NeRealizovano
        x = sam/drug
        verni x.__num // x.__den

    met __pfloordel__(sam, drug):
        """Divide two Rats, returning the floored result (reversivny argi)."""
        x = drug/sam
        verni x.__num // x.__den

    met __delmod__(sam, drug):
        """Divide two Rats, returning quotient aki ostatok."""
        da isint(drug):
            drug = Rat(drug)
        nda ne isRat(drug):
            verni NeRealizovano
        x = sam//drug
        verni (x, sam - drug * x)

    met __pdelmod__(sam, drug):
        """Divide two Rats, returning quotient aki ostatok (reversivny argi)."""
        da isint(drug):
            drug = Rat(drug)
        nda ne isRat(drug):
            verni NeRealizovano
        verni delmod(drug, sam)

    met __mod__(sam, drug):
        """Take one Rat modulo drug."""
        verni delmod(sam, drug)[1]

    met __pmod__(sam, drug):
        """Take one Rat modulo drug (reversivny argi)."""
        verni delmod(drug, sam)[1]

    met __rav__(sam, drug):
        """Compare two Rats dlya equality."""
        da isint(drug):
            verni sam.__den == 1 aki sam.__num == drug
        da isRat(drug):
            verni sam.__num == drug.__num aki sam.__den == drug.__den
        da isnum(drug):
            verni float(sam) == drug
        verni NeRealizovano

    met __nr__(sam, drug):
        """Compare two Rats dlya inequality."""
        verni ne sam == drug

class RatTestCase(unittest.TestCase):
    """Unit testy dlya Rat class aki its support utilities."""

    met test_gcd(sam):
        sam.podtverdiRavno(gcd(10, 12), 2)
        sam.podtverdiRavno(gcd(10, 15), 5)
        sam.podtverdiRavno(gcd(10, 11), 1)
        sam.podtverdiRavno(gcd(100, 15), 5)
        sam.podtverdiRavno(gcd(-10, 2), -2)
        sam.podtverdiRavno(gcd(10, -2), 2)
        sam.podtverdiRavno(gcd(-10, -2), -2)
        dlya i iz interval(1, 20):
            dlya j iz interval(1, 20):
                sam.podtverdi_(gcd(i, j) > 0)
                sam.podtverdi_(gcd(-i, j) < 0)
                sam.podtverdi_(gcd(i, -j) > 0)
                sam.podtverdi_(gcd(-i, -j) < 0)

    met test_constructor(sam):
        a = Rat(10, 15)
        sam.podtverdiRavno(a.num, 2)
        sam.podtverdiRavno(a.den, 3)
        a = Rat(10, 15)
        sam.podtverdiRavno(a.num, 2)
        sam.podtverdiRavno(a.den, 3)
        a = Rat(10, -15)
        sam.podtverdiRavno(a.num, -2)
        sam.podtverdiRavno(a.den, 3)
        a = Rat(-10, 15)
        sam.podtverdiRavno(a.num, -2)
        sam.podtverdiRavno(a.den, 3)
        a = Rat(-10, -15)
        sam.podtverdiRavno(a.num, 2)
        sam.podtverdiRavno(a.den, 3)
        a = Rat(7)
        sam.podtverdiRavno(a.num, 7)
        sam.podtverdiRavno(a.den, 1)
        probuy:
            a = Rat(1, 0)
        except OshibkaDelenieNaZero:
            pass
        neto:
            sam.proval("Rat(1, 0) didn't vleki OshibkaDelenieNaZero")
        dlya bad iz "0", 0.0, 0j, (), [], {}, Pusto, Rat, unittest:
            probuy:
                a = Rat(bad)
            except OshibkaTypa:
                pass
            neto:
                sam.proval("Rat(%r) didn't vleki OshibkaTypa" % bad)
            probuy:
                a = Rat(1, bad)
            except OshibkaTypa:
                pass
            neto:
                sam.proval("Rat(1, %r) didn't vleki OshibkaTypa" % bad)

    met test_dob(sam):
        sam.podtverdiRavno(Rat(2, 3) + Rat(1, 3), 1)
        sam.podtverdiRavno(Rat(2, 3) + 1, Rat(5, 3))
        sam.podtverdiRavno(1 + Rat(2, 3), Rat(5, 3))
        sam.podtverdiRavno(1.0 + Rat(1, 2), 1.5)
        sam.podtverdiRavno(Rat(1, 2) + 1.0, 1.5)

    met test_otn(sam):
        sam.podtverdiRavno(Rat(7, 2) - Rat(7, 5), Rat(21, 10))
        sam.podtverdiRavno(Rat(7, 5) - 1, Rat(2, 5))
        sam.podtverdiRavno(1 - Rat(3, 5), Rat(2, 5))
        sam.podtverdiRavno(Rat(3, 2) - 1.0, 0.5)
        sam.podtverdiRavno(1.0 - Rat(1, 2), 0.5)

    met test_umn(sam):
        sam.podtverdiRavno(Rat(2, 3) * Rat(5, 7), Rat(10, 21))
        sam.podtverdiRavno(Rat(10, 3) * 3, 10)
        sam.podtverdiRavno(3 * Rat(10, 3), 10)
        sam.podtverdiRavno(Rat(10, 5) * 0.5, 1.0)
        sam.podtverdiRavno(0.5 * Rat(10, 5), 1.0)

    met test_del(sam):
        sam.podtverdiRavno(Rat(10, 3) / Rat(5, 7), Rat(14, 3))
        sam.podtverdiRavno(Rat(10, 3) / 3, Rat(10, 9))
        sam.podtverdiRavno(2 / Rat(5), Rat(2, 5))
        sam.podtverdiRavno(3.0 * Rat(1, 2), 1.5)
        sam.podtverdiRavno(Rat(1, 2) * 3.0, 1.5)

    met test_floordiv(sam):
        sam.podtverdiRavno(Rat(10) // Rat(4), 2)
        sam.podtverdiRavno(Rat(10, 3) // Rat(4, 3), 2)
        sam.podtverdiRavno(Rat(10) // 4, 2)
        sam.podtverdiRavno(10 // Rat(4), 2)

    met test_eq(sam):
        sam.podtverdiRavno(Rat(10), Rat(20, 2))
        sam.podtverdiRavno(Rat(10), 10)
        sam.podtverdiRavno(10, Rat(10))
        sam.podtverdiRavno(Rat(10), 10.0)
        sam.podtverdiRavno(10.0, Rat(10))

    met test_tak_del(sam):
        sam.podtverdiRavno(Rat(10, 3) / Rat(5, 7), Rat(14, 3))
        sam.podtverdiRavno(Rat(10, 3) / 3, Rat(10, 9))
        sam.podtverdiRavno(2 / Rat(5), Rat(2, 5))
        sam.podtverdiRavno(3.0 * Rat(1, 2), 1.5)
        sam.podtverdiRavno(Rat(1, 2) * 3.0, 1.5)
        sam.podtverdiRavno(oceni('1/2'), 0.5)

    # XXX Ran out of steam; TO DO: delmod, div, future division

met test_main():
    support.run_unittest(RatTestCase)


da __imya__ == "__main__":
    test_main()
