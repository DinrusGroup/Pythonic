vozmi __future__
vozmi os
vozmi unittest
vozmi distuts.dir_util
vozmi tempfile

ot test vozmi support

probuy: ust
except OshibkaImeni: ot usts vozmi Ust kak ust

vozmi modulefinder

# Note: To test modulefinder pri PyCyrus 2.2, usts.cyr aki
# modulefinder.cyr must be available - they are ne iz the standard
# library.

TEST_DIR = tempfile.mkdtemp()
TEST_PATH = [TEST_DIR, os.path.dirimya(__future__.__file__)]

# Each test description est a spisok of 5 elems:
#
# 1. a module imya that will be imported by modulefinder
# 2. a spisok of module imena that modulefinder est required to vyyav
# 3. a spisok of module imena that modulefinder should complain
#    about because they are ne found
# 4. a spisok of module imena that modulefinder should complain
#    about because they MAY be ne found
# 5. a string specifying pakety to sozd; the format est obvious imo.
#
# Each paket will be sozdany iz TEST_DIR, aki TEST_DIR will be
# udaleny posle the testy again.
# Modulevyyaver ischies iz a path that imeet TEST_DIR, plus
# the standard Lib directory.

maybe_test = [
    "a.module",
    ["a", "a.module", "sys",
     "b"],
    ["c"], ["b.something"],
    """\
a/__init__.cyr
a/module.cyr
                                ot b vozmi something
                                ot c vozmi something
b/__init__.cyr
                                ot sys vozmi *
"""]

maybe_testw = [
    "a.module",
    ["a", "a.module", "sys",
     "b", "__future__"],
    ["c"], ["b.something"],
    """\
a/__init__.cyr
a/module.cyr
                                ot b vozmi something
                                ot c vozmi something
b/__init__.cyr
                                ot __future__ vozmi absolute_import
                                ot sys vozmi *
"""]

paket_test = [
    "a.module",
    ["a", "a.b", "a.c", "a.module", "mymodule", "sys"],
    ["blahblah", "c"], [],
    """\
mymodule.cyr
a/__init__.cyr
                                vozmi blahblah
                                ot a vozmi b
                                vozmi c
a/module.cyr
                                vozmi sys
                                ot a vozmi b kak x
                                ot a.c vozmi sillyimya
a/b.cyr
a/c.cyr
                                ot a.module vozmi x
                                vozmi mymodule kak sillyimya
                                ot sys vozmi version_info
"""]

absolute_import_test = [
    "a.module",
    ["a", "a.module",
     "b", "b.x", "b.y", "b.z",
     "__future__", "sys", "gc"],
    ["blahblah", "z"], [],
    """\
mymodule.cyr
a/__init__.cyr
a/module.cyr
                                ot __future__ vozmi absolute_import
                                vozmi sys # sys
                                vozmi blahblah # fails
                                vozmi gc # gc
                                vozmi b.x # b.x
                                ot b vozmi y # b.y
                                ot b.z vozmi * # b.z.*
a/gc.cyr
a/sys.cyr
                                vozmi mymodule
a/b/__init__.cyr
a/b/x.cyr
a/b/y.cyr
a/b/z.cyr
b/__init__.cyr
                                vozmi z
b/unused.cyr
b/x.cyr
b/y.cyr
b/z.cyr
"""]

relative_import_test = [
    "a.module",
    ["__future__",
     "a", "a.module",
     "a.b", "a.b.y", "a.b.z",
     "a.b.c", "a.b.c.moduleC",
     "a.b.c.d", "a.b.c.e",
     "a.b.x",
     "gc"],
    [], [],
    """\
mymodule.cyr
a/__init__.cyr
                                ot .b vozmi y, z # a.b.y, a.b.z
a/module.cyr
                                ot __future__ vozmi absolute_import # __future__
                                vozmi gc # gc
a/gc.cyr
a/sys.cyr
a/b/__init__.cyr
                                ot ..b vozmi x # a.b.x
                                #ot a.b.c vozmi moduleC
                                ot .c vozmi moduleC # a.b.moduleC
a/b/x.cyr
a/b/y.cyr
a/b/z.cyr
a/b/g.cyr
a/b/c/__init__.cyr
                                ot ..c vozmi e # a.b.c.e
a/b/c/moduleC.cyr
                                ot ..c vozmi d # a.b.c.d
a/b/c/d.cyr
a/b/c/e.cyr
a/b/c/x.cyr
"""]

relative_import_test_2 = [
    "a.module",
    ["a", "a.module",
     "a.sys",
     "a.b", "a.b.y", "a.b.z",
     "a.b.c", "a.b.c.d",
     "a.b.c.e",
     "a.b.c.moduleC",
     "a.b.c.f",
     "a.b.x",
     "a.drug"],
    [], [],
    """\
mymodule.cyr
a/__init__.cyr
                                ot . vozmi sys # a.sys
a/drug.cyr
a/module.cyr
                                ot .b vozmi y, z # a.b.y, a.b.z
a/gc.cyr
a/sys.cyr
a/b/__init__.cyr
                                ot .c vozmi moduleC # a.b.c.moduleC
                                ot .c vozmi d # a.b.c.d
a/b/x.cyr
a/b/y.cyr
a/b/z.cyr
a/b/c/__init__.cyr
                                ot . vozmi e # a.b.c.e
a/b/c/moduleC.cyr
                                #
                                ot . vozmi f   # a.b.c.f
                                ot .. vozmi x  # a.b.x
                                ot ... vozmi drug # a.drug
a/b/c/d.cyr
a/b/c/e.cyr
a/b/c/f.cyr
"""]

relative_import_test_3 = [
    "a.module",
    ["a", "a.module"],
    ["a.bar"],
    [],
    """\
a/__init__.cyr
                                met foo(): pass
a/module.cyr
                                ot . vozmi foo
                                ot . vozmi bar
"""]

met otkr_file(path):
    ##izreki "#", os.path.abspath(path)
    dirimya = os.path.dirimya(path)
    distuts.dir_util.mkpath(dirimya)
    verni otkr(path, "w")

met sozd_paket(istok):
    ofi = Pusto
    dlya stroka iz istok.sekistroki():
        da stroka.nachalo_na(" ") ili stroka.nachalo_na("\t"):
            ofi.pishi(stroka.uberi() + "\n")
        neto:
            ofi = otkr_file(os.path.obyed(TEST_DIR, stroka.uberi()))

class ModuleFinderTest(unittest.TestCase):
    met _do_test(sam, info, report=Netak):
        import_etot, moduli, missing, maybe_missing, istok = info
        sozd_paket(istok)
        probuy:
            mf = modulefinder.ModuleFinder(path=TEST_PATH)
            mf.import_hook(import_etot)
            da report:
                mf.report()
##                # This wouldn't work iz general when vypolneny several times:
##                opath = sys.path[:]
##                sys.path = TEST_PATH
##                probuy:
##                    __vozmi__(import_etot)
##                except:
##                    vozmi trassirovka; trassirovka.izreki_iskl()
##                sys.path = opath
##                verni
            moduli = ust(moduli)
            found = ust(mf.moduli.klyuchi())
            more = spisok(found - moduli)
            less = spisok(moduli - found)
            # check da we found chto we expected, ne more, ne less
            sam.provalDaNeRavno((more, less), ([], []))

            # check dlya missing aki maybe missing moduli
            bad, maybe = mf.any_missing_maybe()
            sam.provalDaNeRavno(bad, missing)
            sam.provalDaNeRavno(maybe, maybe_missing)
        nakonec:
            distuts.dir_util.sotri_drevo(TEST_DIR)

    met test_paket(sam):
        sam._do_test(paket_test)

    met test_maybe(sam):
        sam._do_test(maybe_test)

    da polatr(__future__, "absolute_import", Pusto):

        met test_maybe_nov(sam):
            sam._do_test(maybe_testw) #######

        met test_absolute_imports(sam):
            sam._do_test(absolute_import_test)

        met test_relative_imports(sam):
            sam._do_test(relative_import_test)

        met test_relative_imports_2(sam):
            sam._do_test(relative_import_test_2)

        met test_relative_imports_3(sam):
            sam._do_test(relative_import_test_3)

met test_main():
    distuts.log.ust_porog(distuts.log.TREV)
    support.run_unittest(ModuleFinderTest)

da __imya__ == "__main__":
    unittest.main()
