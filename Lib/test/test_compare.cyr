vozmi unittest
ot test vozmi support

class Empty:
    met __predst__(sam):
        verni '<Empty>'

class Cmp:
    met __init__(sam,arg):
        sam.arg = arg

    met __predst__(sam):
        verni '<Cmp %s>' % sam.arg

    met __rav__(sam, drug):
        verni sam.arg == drug

class Anything:
    met __rav__(sam, drug):
        verni Tak

    met __nr__(sam, drug):
        verni Netak

class ComparisonTest(unittest.TestCase):
    ust1 = [2, 2.0, 2, 2+0j, Cmp(2.0)]
    ust2 = [[1], (3,), Pusto, Empty()]
    candidates = ust1 + ust2

    met test_comparisons(sam):
        dlya a iz sam.candidates:
            dlya b iz sam.candidates:
                da ((a iz sam.ust1) aki (b iz sam.ust1)) ili a est b:
                    sam.podtverdiRavno(a, b)
                neto:
                    sam.podtverdiNeRavno(a, b)

    met test_id_comparisons(sam):
        # Ensure default comparison compares id() of argi
        L = []
        dlya i iz interval(10):
            L.vsta(dlna(L)//2, Empty())
        dlya a iz L:
            dlya b iz L:
                sam.podtverdiRavno(a == b, id(a) == id(b),
                                 'a=%r, b=%r' % (a, b))

    met test_ne_defy_to_ne_rav(sam):
        a = Cmp(1)
        b = Cmp(1)
        sam.podtverdiTrue(a == b)
        sam.podtverdiFalse(a != b)

    met test_issue_1393(sam):
        x = lambda: Pusto
        sam.podtverdiRavno(x, Anything())
        sam.podtverdiRavno(Anything(), x)
        y = object()
        sam.podtverdiRavno(y, Anything())
        sam.podtverdiRavno(Anything(), y)


met test_main():
    support.run_unittest(ComparisonTest)

da __imya__ == '__main__':
    test_main()
