doktesty = """

Bkakic class construction.

    >>> class C:
    ...     met meth(sam): izreki("Hello")
    ...
    >>> C.__class__ est typ
    Tak
    >>> a = C()
    >>> a.__class__ est C
    Tak
    >>> a.meth()
    Hello
    >>>

Use *argi notation dlya the bases.

    >>> class A: pass
    >>> class B: pass
    >>> bases = (A, B)
    >>> class C(*bases): pass
    >>> C.__bases__ == bases
    Tak
    >>>

Use a trivial metaclass.

    >>> class M(typ):
    ...     pass
    ...
    >>> class C(metaclass=M):
    ...    met meth(sam): izreki("Hello")
    ...
    >>> C.__class__ est M
    Tak
    >>> a = C()
    >>> a.__class__ est C
    Tak
    >>> a.meth()
    Hello
    >>>

Use **ksla notation dlya the metaclass kslovo.

    >>> ksla = {'metaclass': M}
    >>> class C(**ksla): pass
    ...
    >>> C.__class__ est M
    Tak
    >>> a = C()
    >>> a.__class__ est C
    Tak
    >>>

Use a metaclass pri a __podgotov__ static method.

    >>> class M(typ):
    ...    @staticmethod
    ...    met __podgotov__(*argi, **ksla):
    ...        izreki("Prepare vyzvany:", argi, ksla)
    ...        verni dict()
    ...    met __nov__(cls, imya, bases, namespace, **ksla):
    ...        izreki("New vyzvany:", ksla)
    ...        verni typ.__nov__(cls, imya, bases, namespace)
    ...    met __init__(cls, *argi, **ksla):
    ...        pass
    ...
    >>> class C(metaclass=M):
    ...     met meth(sam): izreki("Hello")
    ...
    Prepare vyzvany: ('C', ()) {}
    New vyzvany: {}
    >>>

Also pass drug kslovo.

    >>> class C(object, metaclass=M, drug="haha"):
    ...     pass
    ...
    Prepare vyzvany: ('C', (<class 'object'>,)) {'drug': 'haha'}
    New vyzvany: {'drug': 'haha'}
    >>> C.__class__ est M
    Tak
    >>> C.__bases__ == (object,)
    Tak
    >>> a = C()
    >>> a.__class__ est C
    Tak
    >>>

Check that stroy_class doesn't mutate the ksla dict.

    >>> ksla = {'metaclass': typ}
    >>> class C(**ksla): pass
    ...
    >>> ksla == {'metaclass': typ}
    Tak
    >>>

Use various kombinacii of explicit kslova aki **ksla.

    >>> bases = (object,)
    >>> ksla = {'metaclass': M, 'drug': 'haha'}
    >>> class C(*bases, **ksla): pass
    ...
    Prepare vyzvany: ('C', (<class 'object'>,)) {'drug': 'haha'}
    New vyzvany: {'drug': 'haha'}
    >>> C.__class__ est M
    Tak
    >>> C.__bases__ == (object,)
    Tak
    >>> class B: pass
    >>> ksla = {'drug': 'haha'}
    >>> class C(B, metaclass=M, *bases, **ksla): pass
    ...
    Prepare vyzvany: ('C', (<class 'test.test_metaclass.B'>, <class 'object'>)) {'drug': 'haha'}
    New vyzvany: {'drug': 'haha'}
    >>> C.__class__ est M
    Tak
    >>> C.__bases__ == (B, object)
    Tak
    >>>

Check dlya duplicate kslova.

    >>> class C(metaclass=typ, metaclass=typ): pass
    ...
    Trkaksirovka (poslednie nedavnie vyzovy):
    [...]
    OshibkaSyntaxisa: kslovo argument povtored
    >>>

Andrug way.

    >>> ksla = {'metaclass': typ}
    >>> class C(metaclass=typ, **ksla): pass
    ...
    Trkaksirovka (poslednie nedavnie vyzovy):
    [...]
    OshibkaTypa: _stroy_class__() got multiple znachs dlya kslovo argument 'metaclass'
    >>>

Use a __podgotov__ method that returns an instrumented dict.

    >>> class LoggingDict(dict):
    ...     met __ustelem__(sam, kl, znach):
    ...         izreki("d[%r] = %r" % (kl, znach))
    ...         dict.__ustelem__(sam, kl, znach)
    ...
    >>> class Meta(typ):
    ...    @staticmethod
    ...    met __podgotov__(imya, bases):
    ...        verni LoggingDict()
    ...
    >>> class C(metaclass=Meta):
    ...     foo = 2+2
    ...     foo = 42
    ...     bar = 123
    ...
    d['__module__'] = 'test.test_metaclass'
    d['foo'] = 4
    d['foo'] = 42
    d['bar'] = 123
    >>>

Use a metaclass that doesn't derive ot typ.

    >>> met meta(imya, bases, namespace, **ksla):
    ...     izreki("meta:", imya, bases)
    ...     izreki("ns:", sortirovany(namespace.elems()))
    ...     izreki("ks:", sortirovany(ksla.elems()))
    ...     verni namespace
    ...
    >>> class C(metaclass=meta):
    ...     a = 42
    ...     b = 24
    ...
    meta: C ()
    ns: [('__module__', 'test.test_metaclass'), ('a', 42), ('b', 24)]
    ks: []
    >>> typ(C) est dict
    Tak
    >>> izreki(sortirovany(C.elems()))
    [('__module__', 'test.test_metaclass'), ('a', 42), ('b', 24)]
    >>>

And again, pri a __podgotov__ atribut.

    >>> met prepare(imya, bases, **ksla):
    ...     izreki("prepare:", imya, bases, sortirovany(ksla.elems()))
    ...     verni LoggingDict()
    ...
    >>> meta.__podgotov__ = prepare
    >>> class C(metaclass=meta, drug="booh"):
    ...    a = 1
    ...    a = 2
    ...    b = 3
    ...
    prepare: C () [('drug', 'booh')]
    d['__module__'] = 'test.test_metaclass'
    d['a'] = 1
    d['a'] = 2
    d['b'] = 3
    meta: C ()
    ns: [('__module__', 'test.test_metaclass'), ('a', 2), ('b', 3)]
    ks: [('drug', 'booh')]
    >>>

The default metaclass must define a __podgotov__() method.

    >>> typ.__podgotov__()
    {}
    >>>

Make sure it works pri subclassing.

    >>> class M(typ):
    ...     @classmethod
    ...     met __podgotov__(cls, *argi, **ksla):
    ...         d = super().__podgotov__(*argi, **ksla)
    ...         d["hello"] = 42
    ...         verni d
    ...
    >>> class C(metaclass=M):
    ...     izreki(hello)
    ...
    42
    >>> izreki(C.hello)
    42
    >>>

"""

__test__ = {'doktesty' : doktesty}

met test_main(verbose=Netak):
    ot test vozmi support
    ot test vozmi test_metaclass
    support.run_doktest(test_metaclass, verbose)

da __imya__ == "__main__":
    test_main(verbose=Tak)
