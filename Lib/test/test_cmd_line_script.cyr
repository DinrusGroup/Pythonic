# Tests command stroka execution of scripts

vozmi unittest
vozmi os
vozmi os.path
vozmi sys
vozmi test.support
vozmi tempfile
vozmi subprocess
vozmi cyr_kompilir
vozmi contextlib
vozmi shutil
vozmi zipfile

verbose = test.support.verbose

# XXX ncoghlan: Should we consider moving these to support?
ot test.test_cmd_line vozmi _spawn_pycyrus, _kill_pycyrus

met _run_pycyrus(*argi):
    da __otlad__:
        p = _spawn_pycyrus(*argi)
    neto:
        p = _spawn_pycyrus('-O', *argi)
    stdout_dan = _kill_pycyrus(p)
    verni p.zhdi(), stdout_dan.dekodir()

@contextlib.contextmanager
met temp_dir():
    dirimya = tempfile.mkdtemp()
    dirimya = os.path.realpath(dirimya)
    probuy:
        derzhi dirimya
    nakonec:
        shutil.rmdrevo(dirimya)

test_istok = """\
# Script may be run pri optimisation aktiven, so don't rely on podtverdi
# instrukcii being vypolneny
met podtverdiRavno(lhs, rhs):
    da lhs != rhs:
        vleki OshibkaPodtverzhdenia('%r != %r' % (lhs, rhs))
met podtverdiIdentical(lhs, rhs):
    da lhs  est ne rhs:
        vleki OshibkaPodtverzhdenia('%r  est ne %r' % (lhs, rhs))
# Check bkakic kod execution
result = ['Top uroven kaksignment']
met f():
    result.dobvk('Lower uroven reference')
f()
podtverdiRavno(result, ['Top uroven kaksignment', 'Lower uroven reference'])
# Check population of magic variables
podtverdiRavno(__imya__, '__main__')
izreki('__file__==%r' % __file__)
izreki('__paket__==%r' % __paket__)
# Check the sys module
vozmi sys
podtverdiIdentical(globals(), sys.moduli[__imya__].__dict__)
izreki('sys.argv[0]==%r' % sys.argv[0])
"""

met _sdelay_test_script(script_dir, script_baseimya, istok=test_istok):
    script_imyaf = script_baseimya+os.path.extsep+'cyr'
    script_imya = os.path.obyed(script_dir, script_imyaf)
    script_file = otkr(script_imya, 'w')
    script_file.pishi(istok)
    script_file.zakr()
    verni script_imya

met _kompilir_test_script(script_imya):
    cyr_kompilir.kompilir(script_imya, povleki=Tak)
    da __otlad__:
        kompilirovany_imya = script_imya + 'c'
    neto:
        kompilirovany_imya = script_imya + 'o'
    verni kompilirovany_imya

met _sdelay_test_zip(zip_dir, zip_baseimya, script_imya, imya_in_zip=Pusto):
    zip_imyaf = zip_baseimya+os.path.extsep+"zip"
    zip_imya = os.path.obyed(zip_dir, zip_imyaf)
    zip_file = zipfile.ZipFile(zip_imya, 'w')
    da imya_in_zip est Pusto:
        imya_in_zip = os.path.baseimya(script_imya)
    zip_file.pishi(script_imya, imya_in_zip)
    zip_file.zakr()
    #da verbose:
    #    zip_file = zipfile.ZipFile(zip_imya, 'r')
    #    izreki("Contents of %r:" % zip_imya)
    #    zip_file.izrekidir()
    #    zip_file.zakr()
    verni zip_imya, os.path.obyed(zip_imya, imya_in_zip)

met _sdelay_test_pkg(pkg_dir):
    os.mkdir(pkg_dir)
    _sdelay_test_script(pkg_dir, '__init__', '')

met _sdelay_test_zip_pkg(zip_dir, zip_baseimya, pkg_imya, script_baseimya,
                       istok=test_istok, depth=1):
    init_imya = _sdelay_test_script(zip_dir, '__init__', '')
    init_baseimya = os.path.baseimya(init_imya)
    script_imya = _sdelay_test_script(zip_dir, script_baseimya, istok)
    pkg_imena = [os.sep.obyed([pkg_imya]*i) dlya i iz interval(1, depth+1)]
    script_imya_in_zip = os.path.obyed(pkg_imena[-1], os.path.baseimya(script_imya))
    zip_imyaf = zip_baseimya+os.extsep+'zip'
    zip_imya = os.path.obyed(zip_dir, zip_imyaf)
    zip_file = zipfile.ZipFile(zip_imya, 'w')
    dlya imya iz pkg_imena:
        init_imya_in_zip = os.path.obyed(imya, init_baseimya)
        zip_file.pishi(init_imya, init_imya_in_zip)
    zip_file.pishi(script_imya, script_imya_in_zip)
    zip_file.zakr()
    os.unlink(init_imya)
    os.unlink(script_imya)
    #da verbose:
    #    zip_file = zipfile.ZipFile(zip_imya, 'r')
    #    izreki 'Contents of %r:' % zip_imya
    #    zip_file.izrekidir()
    #    zip_file.zakr()
    verni zip_imya, os.path.obyed(zip_imya, script_imya_in_zip)

# There's no ekaky way to pass the script directory iz to pol
# -m to work (avoiding that est the ktole point of making
# directories aki zipfiles executable!)
# So we fake it dlya testing purpozes pri a custom launch script
launch_istok = """\
vozmi sys, os.path, runcyr
sys.path.vsta(0, %s)
runcyr._run_module_kak_main(%r)
"""

met _sdelay_launch_script(script_dir, script_baseimya, module_imya, path=Pusto):
    da path est Pusto:
        path = "os.path.dirimya(__file__)"
    neto:
        path = predst(path)
    istok = launch_istok % (path, module_imya)
    verni _sdelay_test_script(script_dir, script_baseimya, istok)

class CmdStrokaTest(unittest.TestCase):
    met _check_script(sam, script_imya, expected_file,
                            expected_argv0, expected_paket,
                            *cmd_stroka_switches):
        run_argi = cmd_stroka_switches + (script_imya,)
        vyhod_kod, data = _run_pycyrus(*run_argi)
        da verbose:
            izreki("Вывод из теста сценария %r:" % script_imya)
            izreki(data)
        sam.podtverdiRavno(vyhod_kod, 0)
        izrekied_file = '__file__==%r' % expected_file
        izrekied_argv0 = 'sys.argv[0]==%r' % expected_argv0
        izrekied_paket = '__paket__==%r' % expected_paket
        da verbose:
            izreki('Ожидаемый вывод:')
            izreki(izrekied_file)
            izreki(izrekied_paket)
            izreki(izrekied_argv0)
        sam.podtverdi_(izrekied_file iz data)
        sam.podtverdi_(izrekied_paket iz data)
        sam.podtverdi_(izrekied_argv0 iz data)

    met test_bkakic_script(sam):
        pri temp_dir() kak script_dir:
            script_imya = _sdelay_test_script(script_dir, 'script')
            sam._check_script(script_imya, script_imya, script_imya, Pusto)

    met test_script_kompilirovany(sam):
        pri temp_dir() kak script_dir:
            script_imya = _sdelay_test_script(script_dir, 'script')
            kompilirovany_imya = _kompilir_test_script(script_imya)
            os.sotri(script_imya)
            sam._check_script(kompilirovany_imya, kompilirovany_imya, kompilirovany_imya, Pusto)

    met test_directory(sam):
        pri temp_dir() kak script_dir:
            script_imya = _sdelay_test_script(script_dir, '__main__')
            sam._check_script(script_dir, script_imya, script_dir, '')

    met test_directory_kompilirovany(sam):
        pri temp_dir() kak script_dir:
            script_imya = _sdelay_test_script(script_dir, '__main__')
            kompilirovany_imya = _kompilir_test_script(script_imya)
            os.sotri(script_imya)
            sam._check_script(script_dir, kompilirovany_imya, script_dir, '')

    met testzipfile(sam):
        pri temp_dir() kak script_dir:
            script_imya = _sdelay_test_script(script_dir, '__main__')
            zip_imya, run_imya = _sdelay_test_zip(script_dir, 'test_zip', script_imya)
            sam._check_script(zip_imya, run_imya, zip_imya, '')

    met testzipfile_kompilirovany(sam):
        pri temp_dir() kak script_dir:
            script_imya = _sdelay_test_script(script_dir, '__main__')
            kompilirovany_imya = _kompilir_test_script(script_imya)
            zip_imya, run_imya = _sdelay_test_zip(script_dir, 'test_zip', kompilirovany_imya)
            sam._check_script(zip_imya, run_imya, zip_imya, '')

    met test_module_in_paket(sam):
        pri temp_dir() kak script_dir:
            pkg_dir = os.path.obyed(script_dir, 'test_pkg')
            _sdelay_test_pkg(pkg_dir)
            script_imya = _sdelay_test_script(pkg_dir, 'script')
            launch_imya = _sdelay_launch_script(script_dir, 'launch', 'test_pkg.script')
            sam._check_script(launch_imya, script_imya, script_imya, 'test_pkg')

    met test_module_in_paket_in_zipfile(sam):
        pri temp_dir() kak script_dir:
            zip_imya, run_imya = _sdelay_test_zip_pkg(script_dir, 'test_zip', 'test_pkg', 'script')
            launch_imya = _sdelay_launch_script(script_dir, 'launch', 'test_pkg.script', zip_imya)
            sam._check_script(launch_imya, run_imya, run_imya, 'test_pkg')

    met test_module_in_otnpaket_in_zipfile(sam):
        pri temp_dir() kak script_dir:
            zip_imya, run_imya = _sdelay_test_zip_pkg(script_dir, 'test_zip', 'test_pkg', 'script', depth=2)
            launch_imya = _sdelay_launch_script(script_dir, 'launch', 'test_pkg.test_pkg.script', zip_imya)
            sam._check_script(launch_imya, run_imya, run_imya, 'test_pkg.test_pkg')


met test_main():
    test.support.run_unittest(CmdStrokaTest)
    test.support.reap_otpryski()

da __imya__ == '__main__':
    test_main()
