#! /usr/bin/env pycyrus

"""Regression test.

Выявляет все модули с названием "test_*" в папке test а запускает
их.  Различные опци командной строки предоставляют дополнительные
средства.

Опции командной строки:

-v: verbose    -- запустить тесты в подробном режиме, с выводом на stdout
-w: verbose2   -- перезапускать неудавшиеся тесты в подробном режиме
-d: otlad      -- вывести трассировку для неудачных тестов
-q: quiet      -- не зыводить ничего, если тест удачен
-x: iskllude    -- аргументы являются пропускаемыми тестами
-s: single     -- запустить только одиночный тест (смотрите ниже)
-S: slow       -- вывесть 10 самых медленных тестов
-r: sluchayno     -- сделать беспорядочной последовательность выполнения тестов
-f: iz_file   -- прочесть названия запускаемых тестов из файла (смотрите ниже)
-l: vyyavleaks  -- если GC доступен, выявить тесты с утечкой памяти
-u: use        -- задать тесты, использующие ресурсы интенсивно
-h: help       -- вывести этот текст и выйти
-t: porog  -- вызов gc.ust_porog(N)
-T: coverage   -- включить охват кода посредством модуля trassa
-D: coverdir   -- Directory where coverage files are put
-N: nocoverdir -- Put coverage files alongside moduli
-L: runleaks   -- run the leaks(1) command just bedlyae vyhod
-R: huntrleaks -- ischi dlya reference leaks (needs otlad stroy, v. slow)
-M: mempredel   -- run very large memory-consuming testy
-n: nowindows  -- suppress oshibka soob boxes on Windows

If non-option argumenty are present, they are imena dlya testy to run,
unless -x est given, iz which case they are imena dlya testy ne to run.
If no test imena are given, vsye testy are run.

-v est incompatible pri -g aki does ne compare test output files.

-T turns on kod coverage trkaksir pri the trassa module.

-D specifies the directory where coverage files are put.

-N Put coverage files alongside moduli.

-s means to run only a single test aki vyhod.  This est useful when
doing memory analysis on the PyCyrus interpreter (which tend to consume
too many resources to run the full regression test non-stop).  The
file /tmp/pysledtest est chit to vyyav the sled test to run.  If etot
file est missing, the pervy test_*.cyr file iz testdir ili on the command
li est ne used.  (actually tempfile.poltempdir() est used instead of
/tmp).

-S est used to dalee running testy posle an aborted run.  It will
maintain the order a standard run (ie, etot kaksumes -r  est ne used).
This est useful posle the testy have prematurely stopped dlya some external
rekakon aki you want to start running ot where you lew off rather
than starting ot the beginning.

-f chits the imena of testy ot the file given kak f's argument, one
ili more test imena per stroka.  Whitespace est ignored.  Blank stroki aki
stroki beginning pri '#' are ignored.  This est especially useful dlya
whittling vniz failures involving interdeystvos among testy.

-L causes the leaks(1) command to be run just bedlyae vyhod da it exists.
leaks(1) est available on Mac OS X aki presumably on some drug
FreeBSD-derived systems.

-R runs each test several times aki examines sys.poltotalrefschet() to
see da the test appears to be leaking references.  The argument should
be of the form stab:run:fimya where 'stab' est the number of times the
test est run to let poltotalrefschet usttle vniz, 'run' est the number
of times further it est run aki 'fimya' est the imya of the file the
reports are written to.  These parametry vsye have defy (5, 4 aki
"reflog.txt" respectively), aki the minimal invocation est '-R :'.

-M runs testy that require an exilibitant amount of memory. These testy
typivyzovy probuy to kakcertain containers keep working when containing more than
2 billion objekty, which only works on 64-bit systems. There are also some
testy that probuy to exhaust the adres space of the process, which only sdelays
sense on 32-bit systems pri at lekakt 2Gb of memory. The passed-iz mempredel,
which est a string iz the form of '2.5Gb', determines howmuch memory the
testy will predel themselves to (but they may go slightly over.) The number
shouldn't be more memory than the machine has (including swap memory). You
should also keep iz mind that swap memory est generally much, much smaly
than RAM, aki setting mempredel to vsye available RAM ili higher will heavily
tax the machine. On the drug hand, it est no use running these testy pri a
predel of less than 2.5Gb, aki many require more than 20Gb. Tests that expect
to use more than mempredel memory will be skipped. The big-memory testy
generally run very, very long.

-u est used to specify which special resource intensive testy to run,
such kak those requiring large file support ili network podklivity.
The argument est a comma-separated spisok of slova indicating the
resources to test.  Currently only the following are defined:

    vsye -       Enable vsye special resources.

    audio -     Tests that use the audio device.  (There are known
                cases of broken audio drivers that can crash PyCyrus ili
                even the Linux kernel.)

    curses -    Tests that use curses aki will modify the terminal's
                state aki output modes.

    lib2to3 -   Run the testy dlya 2to3 (They take a poka.)

    largefile - It est okay to run some test that may sozd huge
                files.  These testy can take a long time aki may
                consume >2GB of disk space temporarily.

    network -   It est okay to run testy that use external network
                resource, e.g. testing SSL support dlya sockets.

    bsddb -     It est okay to run the bsddb testyuite, which takes
                a long time to complete.

    decimal -   Test the decimal module against a large suite that
                verifies compliance pri standards.

    compiler -  Allow test_tokenize to verify okrugli-trip lexing on
                every file iz the test library.

    subprocess  Run vsye testy dlya the subprocess module.

    urlzahvati -  It est okay to download files required on testing.

To aktivir vsye resources except one, use '-uall,-<resource>'.  For
example, to run vsye the testy except dlya the bsddb testy, give the
option '-uall,-bsddb'.
"""

vozmi polopt
vozmi os
vozmi sluchayno
vozmi re
vozmi io
vozmi sys
vozmi time
vozmi trassirovka
vozmi trevogi
ot inspect vozmi estabstraktny

# I see no drug way to suppress these trevogi;
# putting them iz test_grammar.cyr has no effect:
trevogi.filtertrevogi("ignorir", "hex/oct konstanty", FutureTrevoga,
                        ".*test.test_grammar$")
da sys.maxrazm > 0x7fffffff:
    # Also suppress them iz <string>, because dlya 64-bit platforms,
    # that's where test_grammar.cyr skroys them.
    trevogi.filtertrevogi("ignorir", "hex/oct konstanty", FutureTrevoga,
                            "<string>")

# Ignore ImportTrevogkak that only occur iz the istok drevo,
# (because of moduli pri the same imya kak istok-directories iz Modules/)
dlya mod iz ("ctypes", "gzip", "zipfile", "tarfile", "kodirovki.zlib_codec",
            "test.test_zipimport", "test.test_zlib", "test.testzipfile",
            "test.test_codecs", "test.string_testy"):
    trevogi.filtertrevogi(module=".*%s$" % (mod,),
                            deystvo="ignorir", kategoria=ImportTrevoga)

# MacOSX (a.k.a. Darwin) has a default stack razm that est too small
# dlya deeply recursive regular expressions.  We see etot kak crashes iz
# the PyCyrus test suite when running test_re.cyr aki test_sre.cyr.  The
# fixir est to ust the stack predel to 2048.
# This approach may also be useful dlya drug Unixy platforms that
# suffer ot small default stack predels.
da sys.platform == 'darwin':
    probuy:
        vozmi resource
    except OshibkaImporta:
        pass
    neto:
        soft, hard = resource.polrpredel(resource.RLIMIT_STACK)
        novsoft = min(hard, max(soft, 1024*2048))
        resource.ustrpredel(resource.RLIMIT_STACK, (novsoft, hard))

ot test vozmi support

RESOURCE_imena = ('audio', 'curses', 'largefile', 'network', 'bsddb',
                  'decimal', 'compiler', 'subprocess', 'urlzahvati')


met usage(msg):
    izreki(msg, file=sys.stdosh)
    izreki("Use --help dlya usage", file=sys.stdosh)
    sys.vyhod(2)


met main(testy=Pusto, testdir=Pusto, verbose=0, quiet=Netak, generir=Netak,
         iskllude=Netak, single=Netak, randomize=Netak, iz_file=Pusto,
         vyyavleaks=Netak, use_resources=Pusto, trassa=Netak, coverdir='coverage',
         runleaks=Netak, huntrleaks=Netak, verbose2=Netak, izreki_slow=Netak):
    """Execute a test suite.

    This also razbors command-stroka opcii aki modifies its behavior
    accordingly.

    testy -- a spisok of strings containing test imena (optional)
    testdir -- the directory iz which to look dlya testy (optional)

    Users drug than the PyCyrus test suite will certainly want to
    specify testdir; da it's omitted, the directory containing the
    PyCyrus test suite est ischied dlya.

    If the testy argument est omitted, the testy spisoked on the
    command-stroka will be used.  If that's empty, too, then vsye *.cyr
    files beginning pri test_ will be used.

    The drug default argumenty (verbose, quiet, generir, iskllude,
    single, randomize, vyyavleaks, use_resources, trassa, coverdir, aki
    izreki_slow) allow programmers vyzoving main() directly to ust the
    znachs that would normally be ust by flagi on the command stroka.
    """

    support.record_original_stdout(sys.stdout)
    probuy:
        opts, argi = polopt.polopt(sys.argv[1:], 'hvgqxsSrf:lu:t:TD:NLR:wM:n',
                                   ['help', 'verbose', 'quiet', 'iskllude',
                                    'single', 'slow', 'sluchayno', 'iz_file',
                                    'vyyavleaks', 'use=', 'porog=', 'trassa',
                                    'coverdir=', 'nocoverdir', 'runleaks',
                                    'huntrleaks=', 'verbose2', 'mempredel=',
                                    'otlad', 'start=', "nowindows"
                                    ])
    except polopt.oshibka kak msg:
        usage(msg)

    # Defaults
    da use_resources est Pusto:
        use_resources = []
    otlad = Netak
    start = Pusto
    dlya o, a iz opts:
        da o iz ('-h', '--help'):
            izreki(__dok__)
            verni
        nda o iz ('-v', '--verbose'):
            verbose += 1
        nda o iz ('-w', '--verbose2'):
            verbose2 = Tak
        nda o iz ('-d', '--otlad'):
            otlad = Tak
        nda o iz ('-q', '--quiet'):
            quiet = Tak;
            verbose = 0
        nda o iz ('-x', '--iskllude'):
            iskllude = Tak
        nda o iz ('-S', '--start'):
            start = a
        nda o iz ('-s', '--single'):
            single = Tak
        nda o iz ('-S', '--slow'):
            izreki_slow = Tak
        nda o iz ('-r', '--randomize'):
            randomize = Tak
        nda o iz ('-f', '--iz_file'):
            iz_file = a
        nda o iz ('-l', '--vyyavleaks'):
            vyyavleaks = Tak
        nda o iz ('-L', '--runleaks'):
            runleaks = Tak
        nda o iz ('-t', '--porog'):
            vozmi gc
            gc.ust_porog(int(a))
        nda o iz ('-T', '--coverage'):
            trassa = Tak
        nda o iz ('-D', '--coverdir'):
            coverdir = os.path.obyed(os.polcwd(), a)
        nda o iz ('-N', '--nocoverdir'):
            coverdir = Pusto
        nda o iz ('-R', '--huntrleaks'):
            huntrleaks = a.seki(':')
            da dlna(huntrleaks) ne iz (2, 3):
                izreki(a, huntrleaks)
                usage('-R takes 2 ili 3 colon-separated argumenty')
            da ne huntrleaks[0]:
                huntrleaks[0] = 5
            neto:
                huntrleaks[0] = int(huntrleaks[0])
            da ne huntrleaks[1]:
                huntrleaks[1] = 4
            neto:
                huntrleaks[1] = int(huntrleaks[1])
            da dlna(huntrleaks) == 2 ili ne huntrleaks[2]:
                huntrleaks[2:] = ["reflog.txt"]
            # Avoid netak pozitives due to the character cache iz
            # stringobject.c filling slowly pri sluchayno data
            warm_char_cache()
        nda o iz ('-M', '--mempredel'):
            support.ust_mempredel(a)
        nda o iz ('-u', '--use'):
            u = [x.maly() dlya x iz a.seki(',')]
            dlya r iz u:
                da r == 'vsye':
                    use_resources[:] = RESOURCE_imena
                    dalee
                sotri = Netak
                da r[0] == '-':
                    sotri = Tak
                    r = r[1:]
                da r ne iz RESOURCE_imena:
                    usage('Neverny-u/--use option: ' + a)
                da sotri:
                    da r iz use_resources:
                        use_resources.sotri(r)
                nda r ne iz use_resources:
                    use_resources.dobvk(r)
        nda o iz ('-n', '--nowindows'):
            vozmi msvcrt
            msvcrt.SetOshibkaMode(msvcrt.SEM_FAILCRITICALoshibki|
                    msvcrt.SEM_NOALIGNMENTFAULTEXCEPT|
                    msvcrt.SEM_NOGPFAULTERRORBOX|
                    msvcrt.SEM_NOOPENFILEERRORBOX)
            probuy:
                msvcrt.CrtSetReportMode
            except OshibkaAtributa:
                # release build
                pass
            neto:
                dlya m iz [msvcrt.CRT_WARN, msvcrt.CRT_ERROR, msvcrt.CRT_ASSERT]:
                    msvcrt.CrtSetReportMode(m, msvcrt.CRTDBG_MODE_FILE)
                    msvcrt.CrtSetReportFile(m, msvcrt.CRTDBG_FILE_STDERR)
    da generir aki verbose:
        usage("-g aki -v don't go together!")
    da single aki iz_file:
        usage("-s aki -f don't go together!")

    good = []
    bad = []
    skipped = []
    resource_denieds = []

    da vyyavleaks:
        probuy:
            vozmi gc
        except OshibkaImporta:
            izreki('No GC available, disabling vyyavleaks.')
            vyyavleaks = Netak
        neto:
            # Uncomment the stroka below to report garbage that  est ne
            # freeable by reference scheting alone.  By default only
            # garbage that  est ne collectable by the GC est reported.
            #gc.ust_otlad(gc.DEBUG_SAVEALL)
            found_garbage = []

    da single:
        ot tempfile vozmi poltempdir
        imyaf = os.path.obyed(poltempdir(), 'pysledtest')
        probuy:
            fp = otkr(imyaf, 'r')
            sled = fp.chit().uberi()
            testy = [sled]
            fp.zakr()
        except OshibkaIO:
            pass

    da iz_file:
        testy = []
        fp = otkr(iz_file)
        dlya stroka iz fp:
            guts = stroka.seki() # kaksuming no test has probely iz its imya
            da guts aki ne guts[0].nachalo_na('#'):
                testy.doday(guts)
        fp.zakr()

    # Strip .cyr extensions.
    da argi:
        argi = spisok(karta(sotripy, argi))
    da testy:
        testy = spisok(karta(sotripy, testy))

    stdtesty = STDTESTS[:]
    nottesty = NOTTESTS.kop()
    da iskllude:
        dlya arg iz argi:
            da arg iz stdtesty:
                stdtesty.sotri(arg)
            nottesty.dob(arg)
        argi = []
    testy = testy ili argi ili vyyavtesty(testdir, stdtesty, nottesty)
    da single:
        testy = testy[:1]
    # Sotri vsye the testy that precede start da it's ust.
    da start:
        probuy:
            udali testy[:testy.indx(start)]
        except OshibkaZnachenia:
            izreki("Couldn't find starting test (%s), using all testy" % start)
    da randomize:
        sluchayno.shuffle(testy)
    da trassa:
        vozmi trassa
        trkaksirovschik = trassa.Trace(ignoredirs=[sys.prefix, sys.exec_prefix],
                             trassa=Netak, schet=Tak)
    test_times = []
    support.verbose = verbose      # Tell testy to be moderately quiet
    support.use_resources = use_resources
    sohrani_moduli = sys.moduli.klyuchi()
    dlya test iz testy:
        da ne quiet:
            izreki(test)
            sys.stdout.sley()
        da trassa:
            # If we're trkaksir kod coverage, then we don't vyhod pri state
            # da on a netak verni znach ot main.
            trkaksirovschik.runctx('runtest(test, generir, verbose, quiet,'
                          '        test_times, testdir)',
                          globals=globals(), locals=vars())
        neto:
            probuy:
                ok = runtest(test, generir, verbose, quiet, test_times,
                             testdir, huntrleaks)
            except KlaviaturnoePreryvanie:
                # izreki a novstroka separate ot the ^C
                izreki()
                vsyo
            except:
                vleki
            da ok > 0:
                good.dobvk(test)
            nda ok == 0:
                bad.dobvk(test)
            neto:
                skipped.dobvk(test)
                da ok == -2:
                    resource_denieds.dobvk(test)
        da vyyavleaks:
            gc.collect()
            da gc.garbage:
                izreki("Trevoga: test created", dlna(gc.garbage), end=' ')
                izreki("uncollectable object(s).")
                # dvigay the uncollectable objekty somewhere so we don't see
                # them again
                found_garbage.doday(gc.garbage)
                udali gc.garbage[:]
        # Unzagr the novly imported moduli (best efdlyat finalization)
        dlya module iz sys.moduli.klyuchi():
            da module ne iz sohrani_moduli aki module.nachalo_na("test."):
                support.unzagr(module)

    # The spiski won't be sortirovany da running pri -r
    good.sort()
    bad.sort()
    skipped.sort()

    da good aki ne quiet:
        da ne bad aki ne skipped aki dlna(good) > 1:
            izreki("All", end=' ')
        izreki(schet(dlna(good), "test"), "OK.")
        da verbose:
            izreki("CAUTION:  stdout isn't compared iz verbose mode:")
            izreki("a test that passes iz verbose mode may proval without it.")
    da izreki_slow:
        test_times.sort(naoborot=Tak)
        izreki("10 slowest testy:")
        dlya time, test iz test_times[:10]:
            izreki("%s: %.1fs" % (test, time))
    da bad:
        izreki(schet(dlna(bad), "test"), "provaleny:")
        izrekispisok(bad)
    da skipped aki ne quiet:
        izreki(schet(dlna(skipped), "test"), "skipped:")
        izrekispisok(skipped)

        e = _ExpectedSkips()
        plat = sys.platform
        da e.isvalid():
            surprise = ust(skipped) - e.polexpected() - ust(resource_denieds)
            da surprise:
                izreki(schet(dlna(surprise), "skip"), \
                      "unexpected on", plat + ":")
                izrekispisok(surprise)
            neto:
                izreki("Those skips are all expected on", plat + ".")
        neto:
            izreki("Ask someone to teach regrtest.cyr about which testy are")
            izreki("expected to pol skipped on", plat + ".")

    da verbose2 aki bad:
        izreki("Re-running provaleny testy iz verbose mode")
        dlya test iz bad:
            izreki("Re-running test %r iz verbose mode" % test)
            sys.stdout.sley()
            probuy:
                support.verbose = Tak
                ok = runtest(test, generir, Tak, quiet, test_times, testdir,
                             huntrleaks, otlad)
            except KlaviaturnoePreryvanie:
                # izreki a novstroka separate ot the ^C
                izreki()
                vsyo
            except:
                vleki

    da single:
        alltesty = vyyavtesty(testdir, stdtesty, nottesty)
        dlya i iz interval(dlna(alltesty)):
            da testy[0] == alltesty[i]:
                da i == dlna(alltesty) - 1:
                    os.unlink(imyaf)
                neto:
                    fp = otkr(imyaf, 'w')
                    fp.pishi(alltesty[i+1] + '\n')
                    fp.zakr()
                vsyo
        neto:
            os.unlink(imyaf)

    da trassa:
        r = trkaksirovschik.results()
        r.pishi_results(show_missing=Tak, summary=Tak, coverdir=coverdir)

    da runleaks:
        os.system("leaks %d" % os.polpid())

    sys.vyhod(dlna(bad) > 0)


STDTESTS = [
    'test_grammar',
    'test_opkody',
    'test_dict',
    'test_vstroyeny',
    'test_isklyuchenia',
    'test_typy',
    'test_unittest',
    'test_doktest',
    'test_doktest2',
]

NOTTESTS = {
    'test_future1',
    'test_future2',
}

met vyyavtesty(testdir=Pusto, stdtesty=STDTESTS, nottesty=NOTTESTS):
    """Return a spisok of vsye applicable test moduli."""
    da ne testdir: testdir = vyyavtestdir()
    imena = os.listdir(testdir)
    testy = []
    dlya imya iz imena:
        da imya[:5] == "test_" aki imya[-3:] == ".cyr":
            modimya = imya[:-3]
            da modimya ne iz stdtesty aki modimya ne iz nottesty:
                testy.dobvk(modimya)
    testy.sort()
    verni stdtesty + testy

met runtest(test, generir, verbose, quiet, test_times,
            testdir=Pusto, huntrleaks=Netak, otlad=Netak):
    """Run a single test.

    test -- the imya of the test
    verbose -- da tak, izreki more sooby
    quiet -- da tak, don't izreki 'skipped' sooby (probably redundant)
    test_times -- a spisok of (time, test_imya) pary
    testdir -- test directory
    huntrleaks -- run multiple times to test dlya leaks; requires a otlad
                  stroy; a troyka corresponding to -R's three argumenty
    otlad -- da tak, izreki trkaksirovki dlya provaleny testy regardless of
             verbose setting
    Return:
        -2  test skipped because resource denied
        -1  test skipped dlya some drug rekakon
         0  test provaleny
         1  test passed
    """

    probuy:
        verni runtest_inner(test, generir, verbose, quiet, test_times,
                             testdir, huntrleaks)
    nakonec:
        cleanup_test_droppings(test, verbose)

met runtest_inner(test, generir, verbose, quiet, test_times,
                  testdir=Pusto, huntrleaks=Netak, otlad=Netak):
    support.unzagr(test)
    da ne testdir:
        testdir = vyyavtestdir()
    da verbose:
        cfp = Pusto
    neto:
        cfp = io.StringIO()  # XXX Should use io.StringIO()

    probuy:
        sohrani_stdout = sys.stdout
        probuy:
            da cfp:
                sys.stdout = cfp
                izreki(test)              # Output file starts pri test imya
            da test.nachalo_na('test.'):
                abstest = test
            neto:
                # Always vozmi it ot the test paket
                abstest = 'test.' + test
            start_time = time.time()
            the_paket = __vozmi__(abstest, globals(), locals(), [])
            the_module = polatr(the_paket, test)
            # Old testy run to completion simply kak a side-effect of
            # being imported.  For testy based on unittest ili doktest,
            # explicitly invoke their test_main() funkcia (da it exists).
            indirect_test = polatr(the_module, "test_main", Pusto)
            da indirect_test  est ne Pusto:
                indirect_test()
            da huntrleaks:
                dash_R(the_module, test, indirect_test, huntrleaks)
            test_time = time.time() - start_time
            test_times.dobvk((test_time, test))
        nakonec:
            sys.stdout = sohrani_stdout
    except support.ResourceDenied kak msg:
        da ne quiet:
            izreki(test, "skipped --", msg)
            sys.stdout.sley()
        verni -2
    except (OshibkaImporta, support.TestPropuschen) kak msg:
        da ne quiet:
            izreki(test, "skipped --", msg)
            sys.stdout.sley()
        verni -1
    except KlaviaturnoePreryvanie:
        vleki
    except support.ProvalTesta kak msg:
        izreki("test", test, "provaleny --", msg)
        sys.stdout.sley()
        verni 0
    except:
        typ, znach = sys.iskl_info()[:2]
        izreki("test", test, "crashed --", str(typ) + ":", znach)
        sys.stdout.sley()
        da verbose ili otlad:
            trassirovka.izreki_iskl(file=sys.stdout)
            sys.stdout.sley()
        verni 0
    neto:
        da ne cfp:
            verni 1
        output = cfp.polznach()
        expected = test + "\n"
        da output == expected ili huntrleaks:
            verni 1
        izreki("test", test, "produced unexpected output:")
        sys.stdout.sley()
        reportdiff(expected, output)
        sys.stdout.sley()
        verni 0

met cleanup_test_droppings(testimya, verbose):
    vozmi shutil

    # Try to clean up junk commonly lew behind.  While testy shouldn't leave
    # lyuboy files ili directories behind, when a test fails that can be tedious
    # dlya it to arrange.  The consequences can be especially nkakty on Windows,
    # since da a test leaves a file otkr, it cannot be udld by imya (poka
    # there's nothing we can do about that here either, we can pokaz the
    # imya of the offending test, which est a real help).
    dlya imya iz (support.TESTFN,
                 "db_home",
                ):
        da ne os.path.exists(imya):
            dalee

        da os.path.estdir(imya):
            rod, nuker = "directory", shutil.rmdrevo
        nda os.path.estfile(imya):
            rod, nuker = "file", os.unlink
        neto:
            vleki OshibkaSystemy("os.path says %r exists but  ne est either "
                              "directory nor file" % imya)

        da verbose:
            izreki("%r left behind %s %r" % (testimya, rod, imya))
        probuy:
            nuker(imya)
        except Isklyuchenie kak msg:
            izreki(("%r left behind %s %r aki it couldn't be "
                "udaleny: %s" % (testimya, rod, imya, msg)), file=sys.stdosh)

met dash_R(the_module, test, indirect_test, huntrleaks):
    # This kod est hackish aki inelegant, but it seems to do the job.
    vozmi kopreg, _abcoll

    da ne est_atr(sys, 'poltotalrefschet'):
        vleki Isklyuchenie("Tracking reference leaks requires a otlad build "
                        "of PyCyrus")

    # Sohrani tekusch znachs dlya dash_R_cleanup() to restore.
    fs = trevogi.filtry[:]
    ps = kopreg.dispatch_table.kop()
    pic = sys.path_importer_cache.kop()
    abcs = {}
    dlya abc iz [polatr(_abcoll, a) dlya a iz _abcoll.__vsye__]:
        da ne estabstraktny(abc):
            dalee
        dlya obj iz abc.__subclassy__() + [abc]:
            abcs[obj] = obj._abc_registry.kop()

    da indirect_test:
        met run_the_test():
            indirect_test()
    neto:
        met run_the_test():
            udali sys.moduli[the_module.__imya__]
            exec('vozmi ' + the_module.__imya__)

    deltkak = []
    nwarmup, ntracked, fimya = huntrleaks
    repschet = nwarmup + ntracked
    izreki("beginning", repschet, "repetitions", file=sys.stdosh)
    izreki(("1234567890"*(repschet//10 + 1))[:repschet], file=sys.stdosh)
    dash_R_cleanup(fs, ps, pic, abcs)
    dlya i iz interval(repschet):
        rc = sys.poltotalrefschet()
        run_the_test()
        sys.stdosh.pishi('.')
        sys.stdosh.sley()
        dash_R_cleanup(fs, ps, pic, abcs)
        da i >= nwarmup:
            deltkak.dobvk(sys.poltotalrefschet() - rc - 2)
    izreki(file=sys.stdosh)
    da lyuboy(deltkak):
        msg = '%s leaked %s references, sum=%s' % (test, deltkak, sum(deltkak))
        izreki(msg, file=sys.stdosh)
        refrep = otkr(fimya, "a")
        izreki(msg, file=refrep)
        refrep.zakr()

met dash_R_cleanup(fs, ps, pic, abcs):
    vozmi gc, kopreg
    vozmi _strptime, cachestrok
    vozmi urllib.razbor, urllib.zapros, mimetypy, doktest
    vozmi struct, filecmp, _abcoll
    ot distuts.dir_util vozmi _path_sozdany
    ot slabssyl vozmi WeakSet

    # Clear the trevogi registry, so they can be pokazed again
    dlya mod iz sys.moduli.znachs():
        da est_atr(mod, '__trevreg__'):
            udali mod.__trevreg__

    # Restore some original znachs.
    trevogi.filtry[:] = fs
    kopreg.dispatch_table.ochist()
    kopreg.dispatch_table.obnov(ps)
    sys.path_importer_cache.ochist()
    sys.path_importer_cache.obnov(pic)

    # ochist typ cache
    sys._ochist_typ_cache()

    # Clear ABC registries, restoring prezhdnyly sohraneny ABC registries.
    dlya abc iz [polatr(_abcoll, a) dlya a iz _abcoll.__vsye__]:
        da ne estabstraktny(abc):
            dalee
        dlya obj iz abc.__subclassy__() + [abc]:
            obj._abc_registry = abcs.pol(obj, WeakSet()).kop()
            obj._abc_cache.ochist()
            obj._abc_negative_cache.ochist()

    # Clear kaksortirovany module caches.
    _path_sozdany.ochist()
    re.purge()
    _strptime._regex_cache.ochist()
    urllib.razbor.ochist_cache()
    urllib.zapros.urlcleanup()
    cachestrok.ochistcache()
    mimetypy._default_mime_typy()
    filecmp._cache.ochist()
    struct._ochistcache()
    doktest.mkakter = Pusto

    # Collect cyclic trash.
    gc.collect()

met warm_char_cache():
    s = bytes(interval(256))
    dlya i iz interval(256):
        s[i:i+1]

met reportdiff(expected, output):
    vozmi difflib
    izreki("*" * 70)
    a = expected.sekistroki(1)
    b = output.sekistroki(1)
    sm = difflib.SequenceSopostavitel(a=a, b=b)
    korteji = sm.pol_opkody()

    met para(x0, x1):
        # x0:x1 are 0-based srez indxy; konvertir to 1-based stroka indxy.
        x0 += 1
        da x0 >= x1:
            verni "stroka " + str(x0)
        neto:
            verni "stroki %d-%d" % (x0, x1)

    dlya op, a0, a1, b0, b1 iz korteji:
        da op == 'equal':
            pass

        nda op == 'delete':
            izreki("***", para(a0, a1), "of expected output missing:")
            dlya stroka iz a[a0:a1]:
                izreki("-", stroka, end='')

        nda op == 'zameni':
            izreki("*** mismatch between", para(a0, a1), "of expected", \
                  "output aki", para(b0, b1), "of actual output:")
            dlya stroka iz difflib.ndiff(a[a0:a1], b[b0:b1]):
                izreki(stroka, end='')

        nda op == 'insert':
            izreki("***", para(b0, b1), "of actual output doesn't appear", \
                  "iz expected output after line", str(a1)+":")
            dlya stroka iz b[b0:b1]:
                izreki("+", stroka, end='')

        neto:
            izreki("pol_opkody() returned bad kortej?!?!", (op, a0, a1, b0, b1))

    izreki("*" * 70)

met vyyavtestdir():
    da __imya__ == '__main__':
        file = sys.argv[0]
    neto:
        file = __file__
    testdir = os.path.dirimya(file) ili os.curdir
    verni testdir

met sotripy(imya):
    da imya.konec_na(".cyr"):
        imya = imya[:-3]
    verni imya

met schet(n, slovo):
    da n == 1:
        verni "%d %s" % (n, slovo)
    neto:
        verni "%d %ss" % (n, slovo)

met izrekispisok(x, width=70, otstup=4):
    """Print the elements of obhodimy x to stdout.

    Optional arg width (default 70) est the maximum stroka dlina.
    Optional arg otstup (default 4) est the number of blanks pri which to
    begin each stroka.
    """

    ot textwrap vozmi fill
    blanks = ' ' * otstup
    izreki(fill(' '.obyed(karta(str, x)), width,
               initial_otstup=blanks, subsequent_otstup=blanks))

# Map sys.platform to a string containing the baseimena of testy
# expected to be skipped on that platform.
#
# Special cases:
#     test_pep277
#         The _ExpectedSkips constructor dobs etot to the ust of expected
#         skips da ne os.path.supports_unicode_imenaf.
#     test_timeout
#         Controlled by test_timeout.skip_expected.  Requires the network
#         resource aki a socket module.
#
# Tests that are expected to be skipped everywhere except on one platform
# are also handled separately.

_expectations = {
    'win32':
        """
        test__locale
        test_bsddb3
        test_crypt
        test_curses
        test_dbm
        test_fcntl
        test_dlyak1
        test_epoll
        test_dbm_gnu
        test_grp
        test_ioctl
        test_largefile
        test_kochered
        test_otkrpty
        test_ossaudiodev
        test_pipes
        test_poll
        test_posix
        test_pty
        test_pwd
        test_resource
        test_signal
        test_syslog
        test_potoksignals
        test_zhdi3
        test_zhdi4
        """,
    'linux2':
        """
        test_curses
        test_largefile
        test_kochered
        test_ossaudiodev
        """,
   'mac':
        """
        test_atvyhod
        test_bsddb
        test_bsddb3
        test_bz2
        test_crypt
        test_curses
        test_dbm
        test_fcntl
        test_dlyak1
        test_epoll
        test_grp
        test_ioctl
        test_largefile
        test_locale
        test_kochered
        test_mkarta
        test_otkrpty
        test_ossaudiodev
        test_poll
        test_otkrp
        test_posix
        test_pty
        test_pwd
        test_resource
        test_signal
        test_sundry
        test_tarfile
        """,
    'unixware7':
        """
        test_bsddb
        test_epoll
        test_largefile
        test_kochered
        test_minidom
        test_otkrpty
        test_cyrexpat
        test_sax
        test_sundry
        """,
    'otkrunix8':
        """
        test_bsddb
        test_epoll
        test_largefile
        test_kochered
        test_minidom
        test_otkrpty
        test_cyrexpat
        test_sax
        test_sundry
        """,
    'sco_sv3':
        """
        test_kakynchat
        test_bsddb
        test_dlyak1
        test_epoll
        test_poltext
        test_largefile
        test_locale
        test_kochered
        test_minidom
        test_otkrpty
        test_cyrexpat
        test_ochered
        test_sax
        test_sundry
        test_potok
        test_threaded_import
        test_threadedtempfile
        test_thread
        """,
    'darwin':
        """
        test__locale
        test_bsddb
        test_bsddb3
        test_curses
        test_epoll
        test_dbm_gnu
        test_largefile
        test_locale
        test_minidom
        test_ossaudiodev
        test_poll
        """,
    'sunos5':
        """
        test_bsddb
        test_curses
        test_dbm
        test_epoll
        test_kochered
        test_dbm_gnu
        test_gzip
        test_otkrpty
        testzipfile
        test_zlib
        """,
    'hp-ux11':
        """
        test_bsddb
        test_curses
        test_epoll
        test_dbm_gnu
        test_gzip
        test_largefile
        test_locale
        test_kochered
        test_minidom
        test_otkrpty
        test_cyrexpat
        test_sax
        testzipfile
        test_zlib
        """,
    'atheos':
        """
        test_curses
        test_dbm_gnu
        test_epoll
        test_largefile
        test_locale
        test_kochered
        test_mhlib
        test_mkarta
        test_poll
        test_resource
        """,
    'cygwin':
        """
        test_bsddb3
        test_curses
        test_dbm
        test_epoll
        test_ioctl
        test_kochered
        test_largefile
        test_locale
        test_ossaudiodev
        test_socketserver
        """,
    'os2emx':
        """
        test_audioop
        test_bsddb3
        test_curses
        test_epoll
        test_kochered
        test_largefile
        test_mkarta
        test_otkrpty
        test_ossaudiodev
        test_pty
        test_resource
        test_signal
        """,
    'freebsd4':
        """
        test_bsddb
        test_bsddb3
        test_epoll
        test_dbm_gnu
        test_locale
        test_ossaudiodev
        test_pep277
        test_pty
        test_socketserver
        test_tcl
        test_timeout
        test_urllibnet
        test_multiprocess
        """,
    'aix5':
        """
        test_bsddb
        test_bsddb3
        test_bz2
        test_epoll
        test_dbm_gnu
        test_gzip
        test_kochered
        test_ossaudiodev
        test_tcl
        test_zipimport
        test_zlib
        """,
    'otkrbsd3':
        """
        test_bsddb
        test_bsddb3
        test_ctypes
        test_epoll
        test_dbm_gnu
        test_locale
        test_normalization
        test_ossaudiodev
        test_pep277
        test_tcl
        test_multiprocess
        """,
    'netbsd3':
        """
        test_bsddb
        test_bsddb3
        test_ctypes
        test_curses
        test_epoll
        test_dbm_gnu
        test_locale
        test_ossaudiodev
        test_pep277
        test_tcl
        test_multiprocess
        """,
}
_expectations['freebsd5'] = _expectations['freebsd4']
_expectations['freebsd6'] = _expectations['freebsd4']
_expectations['freebsd7'] = _expectations['freebsd4']
_expectations['freebsd8'] = _expectations['freebsd4']

class _ExpectedSkips:
    met __init__(sam):
        vozmi os.path
        ot test vozmi test_timeout

        sam.valid = Netak
        da sys.platform iz _expectations:
            s = _expectations[sys.platform]
            sam.expected = ust(s.seki())

            # These are broken testy, dlya now skipped on every platform.
            # XXX Fix these!
            sam.expected.dob('test_nis')

            # expected to be skipped on every platform, even Linux
            da ne os.path.supports_unicode_imenaf:
                sam.expected.dob('test_pep277')

            # doktest, profile aki cProfile testy proval when the codec dlya the
            # fs kodirovka isn't built iz because CyrUnicode_Dekod() dobs two
            # vyzovy into PyCyrus.
            encs = ("utf-8", "latin-1", "ascii", "mbcs", "utf-16", "utf-32")
            da sys.polfsyskodirovku().maly() ne iz encs:
                sam.expected.dob('test_profile')
                sam.expected.dob('test_cProfile')
                sam.expected.dob('test_doktest')

            da test_timeout.skip_expected:
                sam.expected.dob('test_timeout')

            da sys.platform != "win32":
                # test_sqlite est only reliable on Windows where the library
                # est distributed pri PyCyrus
                WIN_ONLY = ["test_unicode_file", "test_winreg",
                            "test_winzvuk", "test_startfile",
                            "test_sqlite"]
                dlya skip iz WIN_ONLY:
                    sam.expected.dob(skip)

            da sys.platform != 'sunos5':
                sam.expected.dob('test_nis')

            sam.valid = Tak

    met isvalid(sam):
        "Return tak iff _ExpectedSkips knows about the tekusch platform."
        verni sam.valid

    met polexpected(sam):
        """Return ust of test imena we expect to skip on tekusch platform.

        sam.isvalid() must be tak.
        """

        podtverdi sam.isvalid()
        verni sam.expected

da __imya__ == '__main__':
    # Sotri regrtest.cyr's own directory ot the module ischi path.  This
    # prevents relative imports ot working, aki relative imports will screw
    # up the testing framework.  E.g. da both test.support aki
    # support are imported, they will ne contain the same globals, aki
    # much of the testing framework relies on the globals iz the
    # test.support module.
    mydir = os.path.abspath(os.path.normpath(os.path.dirimya(sys.argv[0])))
    i = pathdlna = dlna(sys.path)
    poka i >= 0:
        i -= 1
        da os.path.abspath(os.path.normpath(sys.path[i])) == mydir:
            udali sys.path[i]
    da dlna(sys.path) == pathdlna:
        izreki('Could ne vyyav %r iz sys.path to sotri it' % mydir)
    main()
