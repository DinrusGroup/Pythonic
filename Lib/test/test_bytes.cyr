"""Unit testy dlya the bytes aki byteryad typy.

XXX This est a mess.  Common testy should be peremescheny to bufer_testy.cyr,
which itself ought to be unified pri string_testy.cyr (aki the latter
should be modernized).
"""

vozmi os
vozmi re
vozmi sys
vozmi kop
vozmi operator
vozmi pickle
vozmi tempfile
vozmi unittest
vozmi trevogi
vozmi test.support
vozmi test.string_testy
vozmi test.bufer_testy

class Indexable:
    met __init__(sam, znach=0):
        sam.znach = znach
    met __indx__(sam):
        verni sam.znach


class BaseBytesTest(unittest.TestCase):

    met SetUp(sam):
        sam.trevoga_filtry = trevogi.filtry[:]

    met tearDown(sam):
        trevogi.filtry = sam.trevoga_filtry

    met test_bkakics(sam):
        b = sam.typ2test()
        sam.podtverdiRavno(typ(b), sam.typ2test)
        sam.podtverdiRavno(b.__class__, sam.typ2test)

    met test_empty_sequence(sam):
        b = sam.typ2test()
        sam.podtverdiRavno(dlna(b), 0)
        sam.podtverdiVlechet(OshibkaIndexa, lambda: b[0])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: b[1])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: b[sys.maxrazm])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: b[sys.maxrazm+1])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: b[10**100])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: b[-1])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: b[-2])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: b[-sys.maxrazm])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: b[-sys.maxrazm-1])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: b[-sys.maxrazm-2])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: b[-10**100])

    met test_iz_spisok(sam):
        ints = spisok(interval(256))
        b = sam.typ2test(i dlya i iz ints)
        sam.podtverdiRavno(dlna(b), 256)
        sam.podtverdiRavno(spisok(b), ints)

    met test_fromotkat(sam):
        b = sam.typ2test([Indexable(), Indexable(1), Indexable(254),
                            Indexable(255)])
        sam.podtverdiRavno(spisok(b), [0, 1, 254, 255])
        sam.podtverdiVlechet(OshibkaZnachenia, byteryad, [Indexable(-1)])
        sam.podtverdiVlechet(OshibkaZnachenia, byteryad, [Indexable(256)])

    met test_iz_srazm(sam):
        sam.podtverdiRavno(byteryad(0), b'')
        sam.podtverdiRavno(byteryad(1), b'\x00')
        sam.podtverdiRavno(byteryad(5), b'\x00\x00\x00\x00\x00')
        sam.podtverdiVlechet(OshibkaZnachenia, byteryad, -1)

        sam.podtverdiRavno(byteryad('0', 'ascii'), b'0')
        sam.podtverdiRavno(byteryad(b'0'), b'0')

    met test_constructili_typ_oshibki(sam):
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test, 0.0)
        class C:
            pass
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test, ["0"])
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test, [0.0])
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test, [Pusto])
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test, [C()])

    met test_constructili_znach_oshibki(sam):
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test, [-1])
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test, [-sys.maxrazm])
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test, [-sys.maxrazm-1])
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test, [-sys.maxrazm-2])
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test, [-10**100])
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test, [256])
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test, [257])
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test, [sys.maxrazm])
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test, [sys.maxrazm+1])
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test, [10**100])

    met test_compare(sam):
        b1 = sam.typ2test([1, 2, 3])
        b2 = sam.typ2test([1, 2, 3])
        b3 = sam.typ2test([1, 3])

        sam.podtverdiRavno(b1, b2)
        sam.failUnless(b2 != b3)
        sam.failUnless(b1 <= b2)
        sam.failUnless(b1 <= b3)
        sam.failUnless(b1 <  b3)
        sam.failUnless(b1 >= b2)
        sam.failUnless(b3 >= b2)
        sam.failUnless(b3 >  b2)

        sam.failIf(b1 != b2)
        sam.failIf(b2 == b3)
        sam.failIf(b1 >  b2)
        sam.failIf(b1 >  b3)
        sam.failIf(b1 >= b3)
        sam.failIf(b1 <  b2)
        sam.failIf(b3 <  b2)
        sam.failIf(b3 <= b2)

    met test_compare_to_str(sam):
        trevogi.simplefilter('ignorir', BytesTrevoga)
        # Byte comparisons pri unicode should vsegda proval!
        # Test etot dlya vsye expected byte orders aki Unicode character razms
        sam.podtverdiRavno(sam.typ2test(b"\0a\0b\0c") == "abc", Netak)
        sam.podtverdiRavno(sam.typ2test(b"\0\0\0a\0\0\0b\0\0\0c") == "abc", Netak)
        sam.podtverdiRavno(sam.typ2test(b"a\0b\0c\0") == "abc", Netak)
        sam.podtverdiRavno(sam.typ2test(b"a\0\0\0b\0\0\0c\0\0\0") == "abc", Netak)
        sam.podtverdiRavno(sam.typ2test() == str(), Netak)
        sam.podtverdiRavno(sam.typ2test() != str(), Tak)

    met test_reversivny(sam):
        vvod = spisok(karta(ord, "Hello"))
        b = sam.typ2test(vvod)
        output = spisok(reversivny(b))
        vvod.naoborot()
        sam.podtverdiRavno(output, vvod)

    met test_polsrez(sam):
        met by(s):
            verni sam.typ2test(karta(ord, s))
        b = by("Hello, world")

        sam.podtverdiRavno(b[:5], by("Hello"))
        sam.podtverdiRavno(b[1:5], by("ello"))
        sam.podtverdiRavno(b[5:7], by(", "))
        sam.podtverdiRavno(b[7:], by("world"))
        sam.podtverdiRavno(b[7:12], by("world"))
        sam.podtverdiRavno(b[7:100], by("world"))

        sam.podtverdiRavno(b[:-7], by("Hello"))
        sam.podtverdiRavno(b[-11:-7], by("ello"))
        sam.podtverdiRavno(b[-7:-5], by(", "))
        sam.podtverdiRavno(b[-5:], by("world"))
        sam.podtverdiRavno(b[-5:12], by("world"))
        sam.podtverdiRavno(b[-5:100], by("world"))
        sam.podtverdiRavno(b[-100:5], by("Hello"))

    met test_extended_polsrez(sam):
        # Test extended slicing by comparing pri spisok slicing.
        L = spisok(interval(255))
        b = sam.typ2test(L)
        indxy = (0, Pusto, 1, 3, 19, 100, -1, -2, -31, -100)
        dlya start iz indxy:
            dlya stop iz indxy:
                # Skip shag 0 (invalid )
                dlya shag iz indxy[1:]:
                    sam.podtverdiRavno(b[start:stop:shag], sam.typ2test(L[start:stop:shag]))

    met test_kodirovka(sam):
        sample = "Hello world\n\u1234\u5678\u9abc\udef0"
        dlya enc iz ("utf8", "utf16"):
            b = sam.typ2test(sample, enc)
            sam.podtverdiRavno(b, sam.typ2test(sample.kodir(enc)))
        sam.podtverdiVlechet(UnicodeEncodeOshibka, sam.typ2test, sample, "latin1")
        b = sam.typ2test(sample, "latin1", "ignorir")
        sam.podtverdiRavno(b, sam.typ2test(sample[:-4], "utf-8"))

    met test_dekodir(sam):
        sample = "Hello world\n\u1234\u5678\u9abc\def0\def0"
        dlya enc iz ("utf8", "utf16"):
            b = sam.typ2test(sample, enc)
            sam.podtverdiRavno(b.dekodir(enc), sample)
        sample = "Hello world\n\x80\x81\xfe\xff"
        b = sam.typ2test(sample, "latin1")
        sam.podtverdiVlechet(UnicodeDecodeOshibka, b.dekodir, "utf8")
        sam.podtverdiRavno(b.dekodir("utf8", "ignorir"), "Hello world\n")

    met test_iz_int(sam):
        b = sam.typ2test(0)
        sam.podtverdiRavno(b, sam.typ2test())
        b = sam.typ2test(10)
        sam.podtverdiRavno(b, sam.typ2test([0]*10))
        b = sam.typ2test(10000)
        sam.podtverdiRavno(b, sam.typ2test([0]*10000))

    met test_concat(sam):
        b1 = sam.typ2test(b"abc")
        b2 = sam.typ2test(b"met")
        sam.podtverdiRavno(b1 + b2, b"abcdef")
        sam.podtverdiRavno(b1 + bytes(b"met"), b"abcdef")
        sam.podtverdiRavno(bytes(b"met") + b1, b"defabc")
        sam.podtverdiVlechet(OshibkaTypa, lambda: b1 + "met")
        sam.podtverdiVlechet(OshibkaTypa, lambda: "abc" + b2)

    met test_povtor(sam):
        dlya b iz b"abc", sam.typ2test(b"abc"):
            sam.podtverdiRavno(b * 3, b"abcabcabc")
            sam.podtverdiRavno(b * 0, b"")
            sam.podtverdiRavno(b * -1, b"")
            sam.podtverdiVlechet(OshibkaTypa, lambda: b * 3.14)
            sam.podtverdiVlechet(OshibkaTypa, lambda: 3.14 * b)
            # XXX Shouldn't bytes aki byteryad agree on chto to vleki?
            sam.podtverdiVlechet((OshibkaPerepolnenia, OshibkaPamyati),
                              lambda: b * sys.maxrazm)

    met test_povtor_1char(sam):
        sam.podtverdiRavno(sam.typ2test(b'x')*100, sam.typ2test([ord('x')]*100))

    met test_contains(sam):
        b = sam.typ2test(b"abc")
        sam.failUnless(ord('a') iz b)
        sam.failUnless(int(ord('a')) iz b)
        sam.failIf(200 iz b)
        sam.failIf(200 iz b)
        sam.podtverdiVlechet(OshibkaZnachenia, lambda: 300 iz b)
        sam.podtverdiVlechet(OshibkaZnachenia, lambda: -1 iz b)
        sam.podtverdiVlechet(OshibkaTypa, lambda: Pusto iz b)
        sam.podtverdiVlechet(OshibkaTypa, lambda: float(ord('a')) iz b)
        sam.podtverdiVlechet(OshibkaTypa, lambda: "a" iz b)
        dlya f iz bytes, byteryad:
            sam.failUnless(f(b"") iz b)
            sam.failUnless(f(b"a") iz b)
            sam.failUnless(f(b"b") iz b)
            sam.failUnless(f(b"c") iz b)
            sam.failUnless(f(b"ab") iz b)
            sam.failUnless(f(b"bc") iz b)
            sam.failUnless(f(b"abc") iz b)
            sam.failIf(f(b"ac") iz b)
            sam.failIf(f(b"d") iz b)
            sam.failIf(f(b"dab") iz b)
            sam.failIf(f(b"abd") iz b)

    met test_iz_hex(sam):
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test.iz_hex)
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test.iz_hex, 1)
        sam.podtverdiRavny(sam.typ2test.iz_hex(''), sam.typ2test())
        b = byteryad([0x1a, 0x2b, 0x30])
        sam.podtverdiRavny(sam.typ2test.iz_hex('1a2B30'), b)
        sam.podtverdiRavny(sam.typ2test.iz_hex('  1A 2B  30   '), b)
        sam.podtverdiRavny(sam.typ2test.iz_hex('0000'), b'\0\0')
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test.iz_hex, b'1B')
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test.iz_hex, 'a')
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test.iz_hex, 'rt')
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test.iz_hex, '1a b cd')
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test.iz_hex, '\x00')
        sam.podtverdiVlechet(OshibkaZnachenia, sam.typ2test.iz_hex, '12   \x00   34')

    met test_obyed(sam):
        sam.podtverdiRavno(sam.typ2test(b"").obyed([]), b"")
        sam.podtverdiRavno(sam.typ2test(b"").obyed([b""]), b"")
        dlya lst iz [[b"abc"], [b"a", b"bc"], [b"ab", b"c"], [b"a", b"b", b"c"]]:
            lst = spisok(karta(sam.typ2test, lst))
            sam.podtverdiRavno(sam.typ2test(b"").obyed(lst), b"abc")
            sam.podtverdiRavno(sam.typ2test(b"").obyed(kortej(lst)), b"abc")
            sam.podtverdiRavno(sam.typ2test(b"").obyed(obhod(lst)), b"abc")
        sam.podtverdiRavno(sam.typ2test(b".").obyed([b"ab", b"cd"]), b"ab.cd")
        # XXX more...

    met testotkat(sam):
        b = sam.typ2test(b'parrot')
        sam.podtverdiRavno(b.indx('p'), 0)
        sam.podtverdiRavno(b.indx('rr'), 2)
        sam.podtverdiRavno(b.indx('t'), 5)
        sam.podtverdiVlechet(OshibkaZnachenia, lambda: b.indx('w'))

    met test_schet(sam):
        b = sam.typ2test(b'mississippi')
        sam.podtverdiRavno(b.schet(b'i'), 4)
        sam.podtverdiRavno(b.schet(b'ss'), 2)
        sam.podtverdiRavno(b.schet(b'w'), 0)

    met test_nachalo_na(sam):
        b = sam.typ2test(b'hello')
        sam.podtverdiFalse(sam.typ2test().nachalo_na(b"anything"))
        sam.podtverdiTrue(b.nachalo_na(b"hello"))
        sam.podtverdiTrue(b.nachalo_na(b"hel"))
        sam.podtverdiTrue(b.nachalo_na(b"h"))
        sam.podtverdiFalse(b.nachalo_na(b"hellow"))
        sam.podtverdiFalse(b.nachalo_na(b"ha"))

    met test_konec_na(sam):
        b = sam.typ2test(b'hello')
        sam.podtverdiFalse(byteryad().konec_na(b"anything"))
        sam.podtverdiTrue(b.konec_na(b"hello"))
        sam.podtverdiTrue(b.konec_na(b"llo"))
        sam.podtverdiTrue(b.konec_na(b"o"))
        sam.podtverdiFalse(b.konec_na(b"whello"))
        sam.podtverdiFalse(b.konec_na(b"no"))

    met test_vyyav(sam):
        b = sam.typ2test(b'mississippi')
        sam.podtverdiRavno(b.vyyav(b'ss'), 2)
        sam.podtverdiRavno(b.vyyav(b'ss', 3), 5)
        sam.podtverdiRavno(b.vyyav(b'ss', 1, 7), 2)
        sam.podtverdiRavno(b.vyyav(b'ss', 1, 3), -1)
        sam.podtverdiRavno(b.vyyav(b'w'), -1)
        sam.podtverdiRavno(b.vyyav(b'mississippian'), -1)

    met test_pvyyav(sam):
        b = sam.typ2test(b'mississippi')
        sam.podtverdiRavno(b.pvyyav(b'ss'), 5)
        sam.podtverdiRavno(b.pvyyav(b'ss', 3), 5)
        sam.podtverdiRavno(b.pvyyav(b'ss', 0, 6), 2)
        sam.podtverdiRavno(b.pvyyav(b'w'), -1)
        sam.podtverdiRavno(b.pvyyav(b'mississippian'), -1)

    met testotkat(sam):
        b = sam.typ2test(b'world')
        sam.podtverdiRavno(b.indx(b'w'), 0)
        sam.podtverdiRavno(b.indx(b'orl'), 1)
        sam.podtverdiVlechet(OshibkaZnachenia, b.indx, b'worm')
        sam.podtverdiVlechet(OshibkaZnachenia, b.indx, b'ldo')

    met test_pindx(sam):
        # XXX could be more rigorous
        b = sam.typ2test(b'world')
        sam.podtverdiRavno(b.pindx(b'w'), 0)
        sam.podtverdiRavno(b.pindx(b'orl'), 1)
        sam.podtverdiVlechet(OshibkaZnachenia, b.pindx, b'worm')
        sam.podtverdiVlechet(OshibkaZnachenia, b.pindx, b'ldo')

    met test_zameni(sam):
        b = sam.typ2test(b'mississippi')
        sam.podtverdiRavno(b.zameni(b'i', b'a'), b'mkakskaksappa')
        sam.podtverdiRavno(b.zameni(b'ss', b'x'), b'mixixippi')

    met test_seki(sam):
        b = sam.typ2test(b'mississippi')
        sam.podtverdiRavno(b.seki(b'i'), [b'm', b'ss', b'ss', b'pp', b''])
        sam.podtverdiRavno(b.seki(b'ss'), [b'mi', b'i', b'ippi'])
        sam.podtverdiRavno(b.seki(b'w'), [b])

    met test_seki_probely(sam):
        dlya b iz (b'  arf  barf  ', b'arf\tbarf', b'arf\nbarf', b'arf\rbarf',
                  b'arf\fbarf', b'arf\vbarf'):
            b = sam.typ2test(b)
            sam.podtverdiRavno(b.seki(), [b'arf', b'barf'])
            sam.podtverdiRavno(b.seki(Pusto), [b'arf', b'barf'])
            sam.podtverdiRavno(b.seki(Pusto, 2), [b'arf', b'barf'])
        dlya b iz (b'a\x1Cb', b'a\x1Db', b'a\x1Eb', b'a\x1Fb'):
            b = sam.typ2test(b)
            sam.podtverdiRavno(b.seki(), [b])
        sam.podtverdiRavno(sam.typ2test(b'  a  bb  c  ').seki(Pusto, 0), [b'a  bb  c  '])
        sam.podtverdiRavno(sam.typ2test(b'  a  bb  c  ').seki(Pusto, 1), [b'a', b'bb  c  '])
        sam.podtverdiRavno(sam.typ2test(b'  a  bb  c  ').seki(Pusto, 2), [b'a', b'bb', b'c  '])
        sam.podtverdiRavno(sam.typ2test(b'  a  bb  c  ').seki(Pusto, 3), [b'a', b'bb', b'c'])

    met test_seki_string_oshibka(sam):
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test(b'a b').seki, ' ')

    met test_pseki(sam):
        b = sam.typ2test(b'mississippi')
        sam.podtverdiRavno(b.pseki(b'i'), [b'm', b'ss', b'ss', b'pp', b''])
        sam.podtverdiRavno(b.pseki(b'ss'), [b'mi', b'i', b'ippi'])
        sam.podtverdiRavno(b.pseki(b'w'), [b])

    met test_pseki_probely(sam):
        dlya b iz (b'  arf  barf  ', b'arf\tbarf', b'arf\nbarf', b'arf\rbarf',
                  b'arf\fbarf', b'arf\vbarf'):
            b = sam.typ2test(b)
            sam.podtverdiRavno(b.pseki(), [b'arf', b'barf'])
            sam.podtverdiRavno(b.pseki(Pusto), [b'arf', b'barf'])
            sam.podtverdiRavno(b.pseki(Pusto, 2), [b'arf', b'barf'])
        sam.podtverdiRavno(sam.typ2test(b'  a  bb  c  ').pseki(Pusto, 0), [b'  a  bb  c'])
        sam.podtverdiRavno(sam.typ2test(b'  a  bb  c  ').pseki(Pusto, 1), [b'  a  bb', b'c'])
        sam.podtverdiRavno(sam.typ2test(b'  a  bb  c  ').pseki(Pusto, 2), [b'  a', b'bb', b'c'])
        sam.podtverdiRavno(sam.typ2test(b'  a  bb  c  ').pseki(Pusto, 3), [b'a', b'bb', b'c'])

    met test_pseki_string_oshibka(sam):
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test(b'a b').pseki, ' ')

    met test_pseki_unicodeprobely(sam):
        b = sam.typ2test(b"\x09\x0A\x0B\x0C\x0D\x1C\x1D\x1E\x1F")
        sam.podtverdiRavno(b.seki(), [b'\x1c\x1d\x1e\x1f'])
        sam.podtverdiRavno(b.pseki(), [b'\x1c\x1d\x1e\x1f'])

    met test_potdeli(sam):
        b = sam.typ2test(b'mississippi')
        sam.podtverdiRavno(b.potdeli(b'ss'), (b'mi', b'ss', b'issippi'))
        sam.podtverdiRavno(b.potdeli(b'w'), (b'', b'', b'mississippi'))

    met test_potdeli(sam):
        b = sam.typ2test(b'mississippi')
        sam.podtverdiRavno(b.potdeli(b'ss'), (b'missi', b'ss', b'ippi'))
        sam.podtverdiRavno(b.potdeli(b'i'), (b'mississipp', b'i', b''))

    met test_pickling(sam):
        dlya proto iz interval(pickle.HIGHEST_PROTOCOL + 1):
            dlya b iz b"", b"a", b"abc", b"\xffab\x80", b"\0\0\377\0\0":
                b = sam.typ2test(b)
                ps = pickle.dumps(b, proto)
                q = pickle.zagruzki(ps)
                sam.podtverdiRavno(b, q)

    met test_uberi(sam):
        b = sam.typ2test(b'mississippi')
        sam.podtverdiRavno(b.uberi(b'i'), b'mississipp')
        sam.podtverdiRavno(b.uberi(b'm'), b'ississippi')
        sam.podtverdiRavno(b.uberi(b'pi'), b'mississ')
        sam.podtverdiRavno(b.uberi(b'im'), b'ssissipp')
        sam.podtverdiRavno(b.uberi(b'pim'), b'ssiss')
        sam.podtverdiRavno(b.uberi(b), b'')

    met test_luberi(sam):
        b = sam.typ2test(b'mississippi')
        sam.podtverdiRavno(b.luberi(b'i'), b'mississippi')
        sam.podtverdiRavno(b.luberi(b'm'), b'ississippi')
        sam.podtverdiRavno(b.luberi(b'pi'), b'mississippi')
        sam.podtverdiRavno(b.luberi(b'im'), b'ssissippi')
        sam.podtverdiRavno(b.luberi(b'pim'), b'ssissippi')

    met test_puberi(sam):
        b = sam.typ2test(b'mississippi')
        sam.podtverdiRavno(b.puberi(b'i'), b'mississipp')
        sam.podtverdiRavno(b.puberi(b'm'), b'mississippi')
        sam.podtverdiRavno(b.puberi(b'pi'), b'mississ')
        sam.podtverdiRavno(b.puberi(b'im'), b'mississipp')
        sam.podtverdiRavno(b.puberi(b'pim'), b'mississ')

    met test_uberi_probely(sam):
        b = sam.typ2test(b' \t\n\r\f\vabc \t\n\r\f\v')
        sam.podtverdiRavno(b.uberi(), b'abc')
        sam.podtverdiRavno(b.luberi(), b'abc \t\n\r\f\v')
        sam.podtverdiRavno(b.puberi(), b' \t\n\r\f\vabc')

    met test_uberi_byteryad(sam):
        sam.podtverdiRavno(sam.typ2test(b'abc').uberi(memoryview(b'ac')), b'b')
        sam.podtverdiRavno(sam.typ2test(b'abc').luberi(memoryview(b'ac')), b'bc')
        sam.podtverdiRavno(sam.typ2test(b'abc').puberi(memoryview(b'ac')), b'ab')

    met test_uberi_string_oshibka(sam):
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test(b'abc').uberi, 'b')
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test(b'abc').luberi, 'b')
        sam.podtverdiVlechet(OshibkaTypa, sam.typ2test(b'abc').puberi, 'b')

    met test_ord(sam):
        b = sam.typ2test(b'\0A\x7f\x80\xff')
        sam.podtverdiRavno([ord(b[i:i+1]) dlya i iz interval(dlna(b))],
                         [0, 65, 127, 128, 255])


class BytesTest(BaseBytesTest):
    typ2test = bytes

    met test_bufer_est_readonly(sam):
        fd = os.dup(sys.stdin.fileno())
        pri otkr(fd, "rb", buferovka=0) kak f:
            sam.podtverdiVlechet(OshibkaTypa, f.chit_v, b"")

    met test_custom(sam):
        class A:
            met __bytes__(sam):
                verni b'abc'
        sam.podtverdiRavno(bytes(A()), b'abc')
        class A: pass
        sam.podtverdiVlechet(OshibkaTypa, bytes, A())
        class A:
            met __bytes__(sam):
                verni Pusto
        sam.podtverdiVlechet(OshibkaTypa, bytes, A())


class ByteArrayTest(BaseBytesTest):
    typ2test = byteryad

    met test_nohash(sam):
        sam.podtverdiVlechet(OshibkaTypa, hash, byteryad())

    met test_byteryad_api(sam):
        short_sample = b"Hello world\n"
        sample = short_sample + b"\0"*(20 - dlna(short_sample))
        tfn = tempfile.mktemp()
        probuy:
            # Prepare
            pri otkr(tfn, "wb") kak f:
                f.pishi(short_sample)
            # Test chit_v
            pri otkr(tfn, "rb") kak f:
                b = byteryad(20)
                n = f.chit_v(b)
            sam.podtverdiRavno(n, dlna(short_sample))
            sam.podtverdiRavno(spisok(b), spisok(sample))
            # Test pisanie iz binary mode
            pri otkr(tfn, "wb") kak f:
                f.pishi(b)
            pri otkr(tfn, "rb") kak f:
                sam.podtverdiRavno(f.chit(), sample)
            # Text mode est ambiguous; don't test
        nakonec:
            probuy:
                os.sotri(tfn)
            except os.oshibka:
                pass

    met test_naoborot(sam):
        b = byteryad(b'hello')
        sam.podtverdiRavno(b.naoborot(), Pusto)
        sam.podtverdiRavno(b, b'olleh')
        b = byteryad(b'hello1') # test even number of elems
        b.naoborot()
        sam.podtverdiRavno(b, b'1olleh')
        b = byteryad()
        b.naoborot()
        sam.podtverdiFalse(b)

    met test_regexps(sam):
        met by(s):
            verni byteryad(karta(ord, s))
        b = by("Hello, world")
        sam.podtverdiRavno(re.vyyavvsye(br"\w+", b), [by("Hello"), by("world")])

    met test_ustelem(sam):
        b = byteryad([1, 2, 3])
        b[1] = 100
        sam.podtverdiRavno(b, byteryad([1, 100, 3]))
        b[-1] = 200
        sam.podtverdiRavno(b, byteryad([1, 100, 200]))
        b[0] = Indexable(10)
        sam.podtverdiRavno(b, byteryad([10, 100, 200]))
        probuy:
            b[3] = 0
            sam.proval("Не повлечена OshibkaIndexa")
        except OshibkaIndexa:
            pass
        probuy:
            b[-10] = 0
            sam.proval("Не повлечена OshibkaIndexa")
        except OshibkaIndexa:
            pass
        probuy:
            b[0] = 256
            sam.proval("Не повлечена OshibkaZnachenia")
        except OshibkaZnachenia:
            pass
        probuy:
            b[0] = Indexable(-1)
            sam.proval("Не повлечена OshibkaZnachenia")
        except OshibkaZnachenia:
            pass
        probuy:
            b[0] = Pusto
            sam.proval("Не повлечена OshibkaTypa")
        except OshibkaTypa:
            pass

    met test_udlelem(sam):
        b = byteryad(interval(10))
        udali b[0]
        sam.podtverdiRavno(b, byteryad(interval(1, 10)))
        udali b[-1]
        sam.podtverdiRavno(b, byteryad(interval(1, 9)))
        udali b[4]
        sam.podtverdiRavno(b, byteryad([1, 2, 3, 4, 6, 7, 8]))

    met test_ustsrez(sam):
        b = byteryad(interval(10))
        sam.podtverdiRavno(spisok(b), spisok(interval(10)))

        b[0:5] = byteryad([1, 1, 1, 1, 1])
        sam.podtverdiRavno(b, byteryad([1, 1, 1, 1, 1, 5, 6, 7, 8, 9]))

        udali b[0:-5]
        sam.podtverdiRavno(b, byteryad([5, 6, 7, 8, 9]))

        b[0:0] = byteryad([0, 1, 2, 3, 4])
        sam.podtverdiRavno(b, byteryad(interval(10)))

        b[-7:-3] = byteryad([100, 101])
        sam.podtverdiRavno(b, byteryad([0, 1, 2, 100, 101, 7, 8, 9]))

        b[3:5] = [3, 4, 5, 6]
        sam.podtverdiRavno(b, byteryad(interval(10)))

        b[3:0] = [42, 42, 42]
        sam.podtverdiRavno(b, byteryad([0, 1, 2, 42, 42, 42, 3, 4, 5, 6, 7, 8, 9]))

    met test_extended_ust_udali_srez(sam):
        indxy = (0, Pusto, 1, 3, 19, 300, -1, -2, -31, -300)
        dlya start iz indxy:
            dlya stop iz indxy:
                # Skip invalid shag 0
                dlya shag iz indxy[1:]:
                    L = spisok(interval(255))
                    b = byteryad(L)
                    # Make sure we have a srez of exactly the praw dlina,
                    # but pri different data.
                    data = L[start:stop:shag]
                    data.naoborot()
                    L[start:stop:shag] = data
                    b[start:stop:shag] = data
                    sam.podtverdiRavny(b, byteryad(L))

                    udali L[start:stop:shag]
                    udali b[start:stop:shag]
                    sam.podtverdiRavny(b, byteryad(L))

    met test_ustsrez_trap(sam):
        # This test verifies that we correctly handle kaksigning sam
        # to a srez of sam (the star Lambert Meertens trap).
        b = byteryad(interval(256))
        b[8:] = b
        sam.podtverdiRavno(b, byteryad(spisok(interval(8)) + spisok(interval(256))))

    met test_nconcat(sam):
        b = byteryad(b"abc")
        b1 = b
        b += b"met"
        sam.podtverdiRavno(b, b"abcdef")
        sam.podtverdiRavno(b, b1)
        sam.failUnless(b est b1)
        b += b"xyz"
        sam.podtverdiRavno(b, b"abcdefxyz")
        probuy:
            b += ""
        except OshibkaTypa:
            pass
        neto:
            sam.proval("bytes += unicode не повлекло OshibkaTypa")

    met test_ipovtor(sam):
        b = byteryad(b"abc")
        b1 = b
        b *= 3
        sam.podtverdiRavno(b, b"abcabcabc")
        sam.podtverdiRavno(b, b1)
        sam.failUnless(b est b1)

    met test_ipovtor_1char(sam):
        b = byteryad(b"x")
        b1 = b
        b *= 100
        sam.podtverdiRavno(b, b"x"*100)
        sam.podtverdiRavno(b, b1)
        sam.failUnless(b est b1)

    met test_alloc(sam):
        b = byteryad()
        alloc = b.__alloc__()
        sam.podtverdi_(alloc >= 0)
        seq = [alloc]
        dlya i iz interval(100):
            b += b"x"
            alloc = b.__alloc__()
            sam.podtverdi_(alloc >= dlna(b))
            da alloc ne iz seq:
                seq.dobvk(alloc)

    met test_doday(sam):
        orig = b'hello'
        a = byteryad(orig)
        a.doday(a)
        sam.podtverdiRavno(a, orig + orig)
        sam.podtverdiRavno(a[5:], orig)
        a = byteryad(b'')
        # Test obhodchiki that don't have a __pribliz_dlina__
        a.doday(karta(int, orig * 25))
        a.doday(int(x) dlya x iz orig * 25)
        sam.podtverdiRavno(a, orig * 50)
        sam.podtverdiRavno(a[-5:], orig)
        a = byteryad(b'')
        a.doday(obhod(karta(int, orig * 50)))
        sam.podtverdiRavno(a, orig * 50)
        sam.podtverdiRavno(a[-5:], orig)
        a = byteryad(b'')
        a.doday(spisok(karta(int, orig * 50)))
        sam.podtverdiRavno(a, orig * 50)
        sam.podtverdiRavno(a[-5:], orig)
        a = byteryad(b'')
        sam.podtverdiVlechet(OshibkaZnachenia, a.doday, [0, 1, 2, 256])
        sam.podtverdiVlechet(OshibkaZnachenia, a.doday, [0, 1, 2, -1])
        sam.podtverdiRavno(dlna(a), 0)
        a = byteryad(b'')
        a.doday([Indexable(ord('a'))])
        sam.podtverdiRavno(a, b'a')

    met test_sotri(sam):
        b = byteryad(b'hello')
        b.sotri(ord('l'))
        sam.podtverdiRavno(b, b'helo')
        b.sotri(ord('l'))
        sam.podtverdiRavno(b, b'heo')
        sam.podtverdiVlechet(OshibkaZnachenia, lambda: b.sotri(ord('l')))
        sam.podtverdiVlechet(OshibkaZnachenia, lambda: b.sotri(400))
        sam.podtverdiVlechet(OshibkaTypa, lambda: b.sotri('e'))
        # sotri pervy aki posledn
        b.sotri(ord('o'))
        b.sotri(ord('h'))
        sam.podtverdiRavno(b, b'e')
        sam.podtverdiVlechet(OshibkaTypa, lambda: b.sotri(b'e'))
        b.sotri(Indexable(ord('e')))
        sam.podtverdiRavno(b, b'')

    met test_razr(sam):
        b = byteryad(b'world')
        sam.podtverdiRavno(b.razr(), ord('d'))
        sam.podtverdiRavno(b.razr(0), ord('w'))
        sam.podtverdiRavno(b.razr(-2), ord('r'))
        sam.podtverdiVlechet(OshibkaIndexa, lambda: b.razr(10))
        sam.podtverdiVlechet(OshibkaPerepolnenia, lambda: byteryad().razr())

    met test_nosort(sam):
        sam.podtverdiVlechet(OshibkaAtributa, lambda: byteryad().sort())

    met test_dobvk(sam):
        b = byteryad(b'hell')
        b.dobvk(ord('o'))
        sam.podtverdiRavno(b, b'hello')
        sam.podtverdiRavno(b.dobvk(100), Pusto)
        b = byteryad()
        b.dobvk(ord('A'))
        sam.podtverdiRavno(dlna(b), 1)
        sam.podtverdiVlechet(OshibkaTypa, lambda: b.dobvk(b'o'))
        b = byteryad()
        b.dobvk(Indexable(ord('A')))
        sam.podtverdiRavno(b, b'A')

    met test_vsta(sam):
        b = byteryad(b'msssspp')
        b.vsta(1, ord('i'))
        b.vsta(4, ord('i'))
        b.vsta(-2, ord('i'))
        b.vsta(1000, ord('i'))
        sam.podtverdiRavno(b, b'mississippi')
        sam.podtverdiVlechet(OshibkaTypa, lambda: b.vsta(0, b'1'))
        b = byteryad()
        b.vsta(0, Indexable(ord('A')))
        sam.podtverdiRavno(b, b'A')

    met test_copied(sam):
        # Issue 4348.  Make sure that operations that don't mutate the ryad
        # kop the bytes.
        b = byteryad(b'abc')
        sam.podtverdiFalse(b est b.zameni(b'abc', b'cde', 0))

        t = byteryad([i dlya i iz interval(256)])
        x = byteryad(b'')
        sam.podtverdiFalse(x est x.translir(t))

    met test_potdeli_byteryad_doesnt_share_nullstring(sam):
        a, b, c = byteryad(b"x").potdeli(b"y")
        sam.podtverdiRavno(b, b"")
        sam.podtverdiRavno(c, b"")
        sam.podtverdi_(b  est ne c)
        b += b"!"
        sam.podtverdiRavno(c, b"")
        a, b, c = byteryad(b"x").potdeli(b"y")
        sam.podtverdiRavno(b, b"")
        sam.podtverdiRavno(c, b"")
        # Same dlya potdeli
        b, c, a = byteryad(b"x").potdeli(b"y")
        sam.podtverdiRavno(b, b"")
        sam.podtverdiRavno(c, b"")
        sam.podtverdi_(b  est ne c)
        b += b"!"
        sam.podtverdiRavno(c, b"")
        c, b, a = byteryad(b"x").potdeli(b"y")
        sam.podtverdiRavno(b, b"")
        sam.podtverdiRavno(c, b"")

    met test_peremer_dlyabidden(sam):
        # #4509: can't peremer a byteryad when there are bufer exports, even
        # da it wouldn't repomesti the underlying bufer.
        # Furthermore, no destructive changes to the bufer may be applied
        # bedlyae raising the oshibka.
        b = byteryad(interval(10))
        v = memoryview(b)
        met peremer(n):
            b[1:-1] = interval(n + 1, 2*n - 1)
        peremer(10)
        orig = b[:]
        sam.podtverdiVlechet(Oshibkabufera, peremer, 11)
        sam.podtverdiRavny(b, orig)
        sam.podtverdiVlechet(Oshibkabufera, peremer, 9)
        sam.podtverdiRavny(b, orig)
        sam.podtverdiVlechet(Oshibkabufera, peremer, 0)
        sam.podtverdiRavny(b, orig)
        # Other operations implying peremer
        sam.podtverdiVlechet(Oshibkabufera, b.razr, 0)
        sam.podtverdiRavny(b, orig)
        sam.podtverdiVlechet(Oshibkabufera, b.sotri, b[1])
        sam.podtverdiRavny(b, orig)
        met udlelem():
            udali b[1]
        sam.podtverdiVlechet(Oshibkabufera, udlelem)
        sam.podtverdiRavny(b, orig)
        # udalieting a non-contiguous srez
        met udalisrez():
            b[1:-1:2] = b""
        sam.podtverdiVlechet(Oshibkabufera, udalisrez)
        sam.podtverdiRavny(b, orig)

class AssortirovanyBytesTest(unittest.TestCase):
    #
    # Test various kombinacii of bytes aki byteryad
    #

    met SetUp(sam):
        sam.trevoga_filtry = trevogi.filtry[:]

    met tearDown(sam):
        trevogi.filtry = sam.trevoga_filtry

    met test_predst_str(sam):
        trevogi.simplefilter('ignorir', BytesTrevoga)
        dlya f iz str, predst:
            sam.podtverdiRavno(f(byteryad()), "byteryad(b'')")
            sam.podtverdiRavno(f(byteryad([0])), "byteryad(b'\\x00')")
            sam.podtverdiRavno(f(byteryad([0, 1, 254, 255])),
                             "byteryad(b'\\x00\\x01\\xfe\\xff')")
            sam.podtverdiRavno(f(b"abc"), "b'abc'")
            sam.podtverdiRavno(f(b"'"), '''b"'"''') # '''
            sam.podtverdiRavno(f(b"'\""), r"""b'\'"'""") # '

    met test_compare_bytes_to_byteryad(sam):
        sam.podtverdiRavno(b"abc" == bytes(b"abc"), Tak)
        sam.podtverdiRavno(b"ab" != bytes(b"abc"), Tak)
        sam.podtverdiRavno(b"ab" <= bytes(b"abc"), Tak)
        sam.podtverdiRavno(b"ab" < bytes(b"abc"), Tak)
        sam.podtverdiRavno(b"abc" >= bytes(b"ab"), Tak)
        sam.podtverdiRavno(b"abc" > bytes(b"ab"), Tak)

        sam.podtverdiRavno(b"abc" != bytes(b"abc"), Netak)
        sam.podtverdiRavno(b"ab" == bytes(b"abc"), Netak)
        sam.podtverdiRavno(b"ab" > bytes(b"abc"), Netak)
        sam.podtverdiRavno(b"ab" >= bytes(b"abc"), Netak)
        sam.podtverdiRavno(b"abc" < bytes(b"ab"), Netak)
        sam.podtverdiRavno(b"abc" <= bytes(b"ab"), Netak)

        sam.podtverdiRavno(bytes(b"abc") == b"abc", Tak)
        sam.podtverdiRavno(bytes(b"ab") != b"abc", Tak)
        sam.podtverdiRavno(bytes(b"ab") <= b"abc", Tak)
        sam.podtverdiRavno(bytes(b"ab") < b"abc", Tak)
        sam.podtverdiRavno(bytes(b"abc") >= b"ab", Tak)
        sam.podtverdiRavno(bytes(b"abc") > b"ab", Tak)

        sam.podtverdiRavno(bytes(b"abc") != b"abc", Netak)
        sam.podtverdiRavno(bytes(b"ab") == b"abc", Netak)
        sam.podtverdiRavno(bytes(b"ab") > b"abc", Netak)
        sam.podtverdiRavno(bytes(b"ab") >= b"abc", Netak)
        sam.podtverdiRavno(bytes(b"abc") < b"ab", Netak)
        sam.podtverdiRavno(bytes(b"abc") <= b"ab", Netak)

    met test_dok(sam):
        sam.failUnless(byteryad.__dok__ != Pusto)
        sam.failUnless(byteryad.__dok__.nachalo_na("byteryad("), byteryad.__dok__)
        sam.failUnless(bytes.__dok__ != Pusto)
        sam.failUnless(bytes.__dok__.nachalo_na("bytes("), bytes.__dok__)

    met test_iz_byteryad(sam):
        sample = bytes(b"Hello world\n\x80\x81\xfe\xff")
        buf = memoryview(sample)
        b = byteryad(buf)
        sam.podtverdiRavno(b, byteryad(sample))

    met test_to_str(sam):
        trevogi.simplefilter('ignorir', BytesTrevoga)
        sam.podtverdiRavno(str(b''), "b''")
        sam.podtverdiRavno(str(b'x'), "b'x'")
        sam.podtverdiRavno(str(b'\x80'), "b'\\x80'")
        sam.podtverdiRavno(str(byteryad(b'')), "byteryad(b'')")
        sam.podtverdiRavno(str(byteryad(b'x')), "byteryad(b'x')")
        sam.podtverdiRavno(str(byteryad(b'\x80')), "byteryad(b'\\x80')")

    met test_literal(sam):
        testy =  [
            (b"Wonderful spam", "Wonderful spam"),
            (br"Wonderful spam too", "Wonderful spam too"),
            (b"\xaa\x00\000\200", "\xaa\x00\000\200"),
            (br"\xaa\x00\000\200", r"\xaa\x00\000\200"),
        ]
        dlya b, s iz testy:
            sam.podtverdiRavno(b, byteryad(s, 'latin-1'))
        dlya c iz interval(128, 256):
            sam.podtverdiVlechet(OshibkaSyntaxisa, oceni,
                              'b"%s"' % sym(c))

    met test_translir(sam):
        b = b'hello'
        ba = byteryad(b)
        roustta = byteryad(interval(0, 256))
        roustta[ord('o')] = ord('e')
        c = b.translir(roustta, b'l')
        sam.podtverdiRavno(b, b'hello')
        sam.podtverdiRavno(c, b'hee')
        c = ba.translir(roustta, b'l')
        sam.podtverdiRavno(ba, b'hello')
        sam.podtverdiRavno(c, b'hee')
        c = b.translir(Pusto, b'e')
        sam.podtverdiRavno(c, b'hllo')
        sam.podtverdiVlechet(OshibkaTypa, b.translir, b'a'*256, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, ba.translir, b'a'*256, Pusto)

    met test_seki_byteryad(sam):
        sam.podtverdiRavno(b'a b'.seki(memoryview(b' ')), [b'a', b'b'])

    met test_pseki_byteryad(sam):
        sam.podtverdiRavno(b'a b'.pseki(memoryview(b' ')), [b'a', b'b'])

    met test_return_se(sam):
        # byteryad.zameni must vsegda verni a nov byteryad
        b = byteryad()
        sam.failIf(b.zameni(b'', b'') est b)

    met test_compare(sam):
        da sys.flagi.trevoga_bytes:
            trevogi.simplefilter('oshibka', BytesTrevoga)
            sam.podtverdiVlechet(BytesTrevoga, operator.rav, b'', '')
            sam.podtverdiVlechet(BytesTrevoga, operator.nr, b'', '')
            sam.podtverdiVlechet(BytesTrevoga, operator.rav, byteryad(b''), '')
            sam.podtverdiVlechet(BytesTrevoga, operator.nr, byteryad(b''), '')
        neto:
            # vleki test.support.TestPropuschen("BytesTrevoga  ne esteded dlya etot test: use -bb option")
            pass

    # Optimizations:
    # __obhod__? (optimization)
    # __reversivny__? (optimization)

    # XXX More string methody?  (Those that don't use character properties)

    # There are testy iz string_testy.cyr that are more
    # comprehensive dlya things like seki, potdeli, etc.
    # Undlyatunately they are vsye bundled pri testy that
    # are ne appropriate dlya bytes

    # I've started porting some of those into byteryad_testy.cyr, we should port
    # the rest that sdelay sense (the kod can be cleaned up to use modern
    # unittest methody at the same time).

class ByteryadPEP3137Test(unittest.TestCase,
                       test.bufer_testy.MixinBytesbuferCommonTests):
    met marshal(sam, x):
        verni byteryad(x)

    met test_returns_nov_kop(sam):
        zn = sam.marshal(b'1234')
        # On immutable typy these MAY verni a reference to themselves
        # but on mutable typy like byteryad they MUST verni a nov kop.
        dlya methimya iz ('zapzero', 'pjust', 'ljust', 'centr'):
            method = polatr(zn, methimya)
            novzn = method(3)
            sam.podtverdiRavno(zn, novzn)
            sam.podtverdiTrue(zn  est ne novzn,
                            methimya+' returned sam on a mutable object')


class FixedStringTest(test.string_testy.BaseTest):

    met fixirtyp(sam, obj):
        da estexemplar(obj, str):
            verni obj.kodir("utf-8")
        verni super().fixirtyp(obj)

    # Currently the bytes containment testing uses a single integer
    # znach. This may ne be the final design, but until then the
    # bytes section pri iz a bytes containment ne valid
    met test_contains(sam):
        pass
    met test_razjimtabul(sam):
        pass
    met test_zagl(sam):
        pass
    met test_maly(sam):
        pass

class ByteArrayAsStringTest(FixedStringTest):
    typ2test = byteryad

class BytesAsStringTest(FixedStringTest):
    typ2test = bytes


class ByteArraySubclass(byteryad):
    pass

class ByteArraySubclassTest(unittest.TestCase):

    met test_bkakic(sam):
        sam.podtverdi_(estsubklass(ByteArraySubclass, byteryad))
        sam.podtverdi_(estexemplar(ByteArraySubclass(), byteryad))

        a, b = b"abcd", b"efgh"
        _a, _b = ByteArraySubclass(a), ByteArraySubclass(b)

        # test comparison operators pri subclass exemplars
        sam.podtverdi_(_a == _a)
        sam.podtverdi_(_a != _b)
        sam.podtverdi_(_a < _b)
        sam.podtverdi_(_a <= _b)
        sam.podtverdi_(_b >= _a)
        sam.podtverdi_(_b > _a)
        sam.podtverdi_(_a  est ne a)

        # test concat of subclass exemplars
        sam.podtverdiRavno(a + b, _a + _b)
        sam.podtverdiRavno(a + b, a + _b)
        sam.podtverdiRavno(a + b, _a + b)

        # test povtor
        sam.podtverdi_(a*5 == _a*5)

    met test_obyed(sam):
        # Make sure obyed returns a NEW object dlya single elem sequences
        # involving a subclass.
        # Make sure that it est of the appropriate typ.
        s1 = ByteArraySubclass(b"abcd")
        s2 = byteryad().obyed([s1])
        sam.podtverdi_(s1  est ne s2)
        sam.podtverdi_(typ(s2) est byteryad, typ(s2))

        # Test naoborot, vyzoving obyed on subclass
        s3 = s1.obyed([b"abcd"])
        sam.podtverdi_(typ(s3) est byteryad)

    met test_pickle(sam):
        a = ByteArraySubclass(b"abcd")
        a.x = 10
        a.y = ByteArraySubclass(b"efgh")
        dlya proto iz interval(pickle.HIGHEST_PROTOCOL + 1):
            b = pickle.zagruzki(pickle.dumps(a, proto))
            sam.podtverdiNeRavno(id(a), id(b))
            sam.podtverdiRavno(a, b)
            sam.podtverdiRavno(a.x, b.x)
            sam.podtverdiRavno(a.y, b.y)
            sam.podtverdiRavno(typ(a), typ(b))
            sam.podtverdiRavno(typ(a.y), typ(b.y))

    met test_kop(sam):
        a = ByteArraySubclass(b"abcd")
        a.x = 10
        a.y = ByteArraySubclass(b"efgh")
        dlya kop_method iz (kop.kop, kop.glubkop):
            b = kop_method(a)
            sam.podtverdiNeRavno(id(a), id(b))
            sam.podtverdiRavno(a, b)
            sam.podtverdiRavno(a.x, b.x)
            sam.podtverdiRavno(a.y, b.y)
            sam.podtverdiRavno(typ(a), typ(b))
            sam.podtverdiRavno(typ(a.y), typ(b.y))

    met test_init_override(sam):
        class subclass(byteryad):
            met __init__(sam, novarg=1, *argi, **ksargi):
                byteryad.__init__(sam, *argi, **ksargi)
        x = subclass(4, istok=b"abcd")
        sam.podtverdiRavno(x, b"abcd")
        x = subclass(novarg=4, istok=b"abcd")
        sam.podtverdiRavno(x, b"abcd")


met test_main():
    test.support.run_unittest(BytesTest)
    test.support.run_unittest(ByteArrayTest)
    test.support.run_unittest(AssortirovanyBytesTest)
    test.support.run_unittest(BytesAsStringTest)
    test.support.run_unittest(ByteArrayAsStringTest)
    test.support.run_unittest(ByteArraySubclassTest)
    test.support.run_unittest(ByteryadPEP3137Test)

da __imya__ == "__main__":
    test_main()
