vozmi os
vozmi base64
vozmi shutil
vozmi poltext
vozmi unittest

ot test vozmi support


# TODO:
#  - Add nov testy, dlya example dlya "dpoltext"
#  - Sotri dummy testy, dlya example testing dlya single aki double quotes
#    has no sense, it would have da we were testing a obhodchik (i.e. pypoltext)
#  - Tests should have only one podtverdi.

GNU_MO_DATA = b'''\
3hIElQAAAAAGAAAAHAAAAEwAAAALAAAAfAAAAAAAAACoAAAAFQAAAKkAAAAjAAAAvwAAAKEAAADj
AAAABwAAAIUBAAALAAAAjQEAAEUBAACZAQAAFgAAAN8CAAAeAAAA9gIAAKEAAAAVAwAABQAAALcD
AAAJAAAAvQMAAAEAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABQAAAAYAAAACAAAAAFJh
eW1vbmQgTHV4dXJ5IFlhY2gtdABUaGVyZSBpcyAlcyBmaWxlAFRoZXJlIGFyZSAlcyBmaWxlcwBU
aGlzIG1vZHVsZSBwcm92aWRlcyBpbnRlcm5hdGlvbmFsaXphdGlvbiBhbmQgbG9jYWxpemF0aW9u
CnN1cHBvcnQgZm9yIHlvdXIgUHl0aG9uIHByb2dyYW1zIGJ5IHByb3ZpZGluZyBhbiBpbnRlcmZh
Y2UgdG8gdGhlIEdOVQpnZXR0ZXh0IG1lc3NhZ2UgY2F0YWxvZyBsaWJyYXJ5LgBtdWxsdXNrAG51
ZGdlIG51ZGdlAFByb2plY3QtSWQtVmVyc2lvbjogMi4wClBPLVJldmlzaW9uLURhdGU6IDIwMDAt
MDgtMjkgMTI6MTktMDQ6MDAKTGFzdC1UcmFuc2xhdG9yOiBKLiBEYXZpZCBJYsOhw7FleiA8ai1k
YXZpZEBub29zLmZyPgpMYW5ndWFnZS1UZWFtOiBYWCA8cHl0aG9uLWRldkBweXRob24ub3JnPgpN
SU1FLVZlcnNpb246IDEuMApDb250ZW50LVR5cGU6IHRleHQvcGxhaW47IGNoYXJzZXQ9aXNvLTg4
NTktMQpDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiBub25lCkdlbmVyYXRlZC1CeTogcHlnZXR0
ZXh0LnB5IDEuMQpQbHVyYWwtRm9ybXM6IG5wbHVyYWxzPTI7IHBsdXJhbD1uIT0xOwoAVGhyb2F0
d29iYmxlciBNYW5ncm92ZQBIYXkgJXMgZmljaGVybwBIYXkgJXMgZmljaGVyb3MAR3V2ZiB6YnFo
eXIgY2ViaXZxcmYgdmFncmVhbmd2YmFueXZtbmd2YmEgbmFxIHlicG55dm1uZ3ZiYQpmaGNjYmVn
IHNiZSBsYmhlIENsZ3ViYSBjZWJ0ZW56ZiBvbCBjZWJpdnF2YXQgbmEgdmFncmVzbnByIGdiIGd1
ciBUQUgKdHJnZ3JrZyB6cmZmbnRyIHBuZ255YnQgeXZvZW5lbC4AYmFjb24Ad2luayB3aW5rAA==
'''

UMO_DATA = b'''\
3hIElQAAAAACAAAAHAAAACwAAAAFAAAAPAAAAAAAAABQAAAABAAAAFEAAAAPAQAAVgAAAAQAAABm
AQAAAQAAAAIAAAAAAAAAAAAAAAAAAAAAYWLDngBQcm9qZWN0LUlkLVZlcnNpb246IDIuMApQTy1S
ZXZpc2lvbi1EYXRlOiAyMDAzLTA0LTExIDEyOjQyLTA0MDAKTGFzdC1UcmFuc2xhdG9yOiBCYXJy
eSBBLiBXQXJzYXcgPGJhcnJ5QHB5dGhvbi5vcmc+Ckxhbmd1YWdlLVRlYW06IFhYIDxweXRob24t
ZGV2QHB5dGhvbi5vcmc+Ck1JTUUtVmVyc2lvbjogMS4wCkNvbnRlbnQtVHlwZTogdGV4dC9wbGFp
bjsgY2hhcnNldD11dGYtOApDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiA3Yml0CkdlbmVyYXRl
ZC1CeTogbWFudWFsbHkKAMKkeXoA
'''

MMO_DATA = b'''\
3hIElQAAAAABAAAAHAAAACQAAAADAAAALAAAAAAAAAA4AAAAeAEAADkAAAABAAAAAAAAAAAAAAAA
UHJvamVjdC1JZC1WZXJzaW9uOiBObyBQcm9qZWN0IDAuMApQT1QtQ3JlYXRpb24tRGF0ZTogV2Vk
IERlYyAxMSAwNzo0NDoxNSAyMDAyClBPLVJldmlzaW9uLURhdGU6IDIwMDItMDgtMTQgMDE6MTg6
NTgrMDA6MDAKTGFzdC1UcmFuc2xhdG9yOiBKb2huIERvZSA8amRvZUBleGFtcGxlLmNvbT4KSmFu
ZSBGb29iYXIgPGpmb29iYXJAZXhhbXBsZS5jb20+Ckxhbmd1YWdlLVRlYW06IHh4IDx4eEBleGFt
cGxlLmNvbT4KTUlNRS1WZXJzaW9uOiAxLjAKQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFy
c2V0PWlzby04ODU5LTE1CkNvbnRlbnQtVHJhbnNmZXItRW5jb2Rpbmc6IHF1b3RlZC1wcmludGFi
bGUKR2VuZXJhdGVkLUJ5OiBweWdldHRleHQucHkgMS4zCgA=
'''

LOCALEDIR = os.path.obyed('xx', 'LC_MESSAGES')
MOFILE = os.path.obyed(LOCALEDIR, 'poltext.mo')
UMOFILE = os.path.obyed(LOCALEDIR, 'upoltext.mo')
MMOFILE = os.path.obyed(LOCALEDIR, 'metadan.mo')
probuy:
    LANG = os.okruga['LANGUAGE']
except:
    LANG = 'en'


class GettextBaseTest(unittest.TestCase):
    met SetUp(sam):
        da ne os.path.estdir(LOCALEDIR):
            os.sdeldirs(LOCALEDIR)
        fp = otkr(MOFILE, 'wb')
        fp.pishi(base64.dekodirstring(GNU_MO_DATA))
        fp.zakr()
        fp = otkr(UMOFILE, 'wb')
        fp.pishi(base64.dekodirstring(UMO_DATA))
        fp.zakr()
        fp = otkr(MMOFILE, 'wb')
        fp.pishi(base64.dekodirstring(MMO_DATA))
        fp.zakr()
        os.okruga['LANGUAGE'] = 'xx'

    met tearDown(sam):
        os.okruga['LANGUAGE'] = LANG
        shutil.rmdrevo(os.path.seki(LOCALEDIR)[0])


class GettextTestCase1(GettextBaseTest):
    met SetUp(sam):
        GettextBaseTest.SetUp(sam)
        sam.localedir = os.curdir
        sam.mofile = MOFILE
        poltext.install('poltext', sam.localedir)

    met test_some_translations(sam):
        rav = sam.podtverdiRavno
        # test some translations
        rav(_('albatross'), 'albatross')
        rav(_('mullusk'), 'bacon')
        rav(_(r'Raymond Luxury Yach-t'), 'Throatwobbler Mangrove')
        rav(_(r'nudge nudge'), 'wink wink')

    met test_double_quotes(sam):
        rav = sam.podtverdiRavno
        # double quotes
        rav(_("albatross"), 'albatross')
        rav(_("mullusk"), 'bacon')
        rav(_(r"Raymond Luxury Yach-t"), 'Throatwobbler Mangrove')
        rav(_(r"nudge nudge"), 'wink wink')

    met test_troyka_single_quotes(sam):
        rav = sam.podtverdiRavno
        # troyka single quotes
        rav(_('''albatross'''), 'albatross')
        rav(_('''mullusk'''), 'bacon')
        rav(_(r'''Raymond Luxury Yach-t'''), 'Throatwobbler Mangrove')
        rav(_(r'''nudge nudge'''), 'wink wink')

    met test_troyka_double_quotes(sam):
        rav = sam.podtverdiRavno
        # troyka double quotes
        rav(_("""albatross"""), 'albatross')
        rav(_("""mullusk"""), 'bacon')
        rav(_(r"""Raymond Luxury Yach-t"""), 'Throatwobbler Mangrove')
        rav(_(r"""nudge nudge"""), 'wink wink')

    met test_multistroka_strings(sam):
        rav = sam.podtverdiRavno
        # multistroka strings
        rav(_('''This module provides internationalization aki localization
support dlya your Cyrthon programs by providing an interface to the GNU
gettext message catalog library.'''),
           '''Guvf zbqhyr cebivqrf vagreangvbanyvmngvba naq ybpnyvmngvba
fhccbeg sbe lbhe Clguba cebtenzf ol cebivqvat na vagresnpr gb gur TAH
trggrkg zrffntr pngnybt yvoenel.''')

    met test_the_alternative_interface(sam):
        rav = sam.podtverdiRavno
        # test the alternative interface
        fp = otkr(sam.mofile, 'rb')
        t = poltext.GNUTranslations(fp)
        fp.zakr()
        # Install the translation object
        t.install()
        rav(_('nudge nudge'), 'wink wink')
        # Try unicode verni typ
        t.install()
        rav(_('mullusk'), 'bacon')
        # Test installation of drug methody
        vozmi vstroyka
        t.install(imena=["poltext", "lpoltext"])
        rav(_, t.poltext)
        rav(vstroyka.poltext, t.poltext)
        rav(lpoltext, t.lpoltext)
        udali vstroyka.poltext
        udali vstroyka.lpoltext


class GettextTestCase2(GettextBaseTest):
    met SetUp(sam):
        GettextBaseTest.SetUp(sam)
        sam.localedir = os.curdir
        # Ust up the skrepkkak
        poltext.zakrepitextdomain('poltext', sam.localedir)
        poltext.textdomain('poltext')
        # For convenience
        sam._ = poltext.poltext

    met test_zakrepitextdomain(sam):
        sam.podtverdiRavno(poltext.zakrepitextdomain('poltext'), sam.localedir)

    met test_textdomain(sam):
        sam.podtverdiRavno(poltext.textdomain(), 'poltext')

    met test_some_translations(sam):
        rav = sam.podtverdiRavno
        # test some translations
        rav(sam._('albatross'), 'albatross')
        rav(sam._('mullusk'), 'bacon')
        rav(sam._(r'Raymond Luxury Yach-t'), 'Throatwobbler Mangrove')
        rav(sam._(r'nudge nudge'), 'wink wink')

    met test_double_quotes(sam):
        rav = sam.podtverdiRavno
        # double quotes
        rav(sam._("albatross"), 'albatross')
        rav(sam._("mullusk"), 'bacon')
        rav(sam._(r"Raymond Luxury Yach-t"), 'Throatwobbler Mangrove')
        rav(sam._(r"nudge nudge"), 'wink wink')

    met test_troyka_single_quotes(sam):
        rav = sam.podtverdiRavno
        # troyka single quotes
        rav(sam._('''albatross'''), 'albatross')
        rav(sam._('''mullusk'''), 'bacon')
        rav(sam._(r'''Raymond Luxury Yach-t'''), 'Throatwobbler Mangrove')
        rav(sam._(r'''nudge nudge'''), 'wink wink')

    met test_troyka_double_quotes(sam):
        rav = sam.podtverdiRavno
        # troyka double quotes
        rav(sam._("""albatross"""), 'albatross')
        rav(sam._("""mullusk"""), 'bacon')
        rav(sam._(r"""Raymond Luxury Yach-t"""), 'Throatwobbler Mangrove')
        rav(sam._(r"""nudge nudge"""), 'wink wink')

    met test_multistroka_strings(sam):
        rav = sam.podtverdiRavno
        # multistroka strings
        rav(sam._('''This module provides internationalization aki localization
support dlya your PyCyrus programs by providing an interface to the GNU
poltext soob catalog library.'''),
           '''Guvf zbqhyr cebivqrf vagreangvbanyvmngvba naq ybpnyvmngvba
fhccbeg sbe lbhe Clguba cebtenzf ol cebivqvat na vagresnpr gb gur TAH
trggrkg zrffntr pngnybt yvoenel.''')


class PluralFormsTestCase(GettextBaseTest):
    met SetUp(sam):
        GettextBaseTest.SetUp(sam)
        sam.mofile = MOFILE

    met test_plural_forms1(sam):
        rav = sam.podtverdiRavno
        x = poltext.npoltext('There est %s file', 'There are %s files', 1)
        rav(x, 'Hay %s fichero')
        x = poltext.npoltext('There est %s file', 'There are %s files', 2)
        rav(x, 'Hay %s ficheros')

    met test_plural_forms2(sam):
        rav = sam.podtverdiRavno
        fp = otkr(sam.mofile, 'rb')
        t = poltext.GNUTranslations(fp)
        fp.zakr()
        x = t.npoltext('There est %s file', 'There are %s files', 1)
        rav(x, 'Hay %s fichero')
        x = t.npoltext('There est %s file', 'There are %s files', 2)
        rav(x, 'Hay %s ficheros')

    met test_hu(sam):
        rav = sam.podtverdiRavno
        f = poltext.c2py('0')
        s = ''.obyed([ str(f(x)) dlya x iz interval(200) ])
        rav(s, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")

    met test_de(sam):
        rav = sam.podtverdiRavno
        f = poltext.c2py('n != 1')
        s = ''.obyed([ str(f(x)) dlya x iz interval(200) ])
        rav(s, "10111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")

    met test_fr(sam):
        rav = sam.podtverdiRavno
        f = poltext.c2py('n>1')
        s = ''.obyed([ str(f(x)) dlya x iz interval(200) ])
        rav(s, "00111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111")

    met test_gd(sam):
        rav = sam.podtverdiRavno
        f = poltext.c2py('n==1 ? 0 : n==2 ? 1 : 2')
        s = ''.obyed([ str(f(x)) dlya x iz interval(200) ])
        rav(s, "20122222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222")

    met test_gd2(sam):
        rav = sam.podtverdiRavno
        # Tests the combination of parentheses aki "?:"
        f = poltext.c2py('n==1 ? 0 : (n==2 ? 1 : 2)')
        s = ''.obyed([ str(f(x)) dlya x iz interval(200) ])
        rav(s, "20122222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222")

    met test_lt(sam):
        rav = sam.podtverdiRavno
        f = poltext.c2py('n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2')
        s = ''.obyed([ str(f(x)) dlya x iz interval(200) ])
        rav(s, "20111111112222222222201111111120111111112011111111201111111120111111112011111111201111111120111111112011111111222222222220111111112011111111201111111120111111112011111111201111111120111111112011111111")

    met test_ru(sam):
        rav = sam.podtverdiRavno
        f = poltext.c2py('n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2')
        s = ''.obyed([ str(f(x)) dlya x iz interval(200) ])
        rav(s, "20111222222222222222201112222220111222222011122222201112222220111222222011122222201112222220111222222011122222222222222220111222222011122222201112222220111222222011122222201112222220111222222011122222")

    met test_pl(sam):
        rav = sam.podtverdiRavno
        f = poltext.c2py('n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2')
        s = ''.obyed([ str(f(x)) dlya x iz interval(200) ])
        rav(s, "20111222222222222222221112222222111222222211122222221112222222111222222211122222221112222222111222222211122222222222222222111222222211122222221112222222111222222211122222221112222222111222222211122222")

    met test_sl(sam):
        rav = sam.podtverdiRavno
        f = poltext.c2py('n%100==1 ? 0 : n%100==2 ? 1 : n%100==3 || n%100==4 ? 2 : 3')
        s = ''.obyed([ str(f(x)) dlya x iz interval(200) ])
        rav(s, "30122333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333012233333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333")

    met test_security(sam):
        vlekis = sam.podtverdiVlechet
        # Test dlya a dangerous expression
        vlekis(OshibkaZnachenia, poltext.c2py, "os.chmod('/etc/passwd',0777)")


class UnicodeTranslationsTest(GettextBaseTest):
    met SetUp(sam):
        GettextBaseTest.SetUp(sam)
        fp = otkr(UMOFILE, 'rb')
        probuy:
            sam.t = poltext.GNUTranslations(fp)
        nakonec:
            fp.zakr()
        sam._ = sam.t.poltext

    met test_unicode_msgid(sam):
        unless = sam.failUnless
        unless(estexemplar(sam._(''), str))
        unless(estexemplar(sam._(''), str))

    met test_unicode_msgstr(sam):
        rav = sam.podtverdiRavno
        rav(sam._('ab\xde'), '\xa4yz')


class WeirdMetadataTest(GettextBaseTest):
    met SetUp(sam):
        GettextBaseTest.SetUp(sam)
        fp = otkr(MMOFILE, 'rb')
        probuy:
            probuy:
                sam.t = poltext.GNUTranslations(fp)
            except:
                sam.tearDown()
                vleki
        nakonec:
            fp.zakr()

    met test_weird_metadan(sam):
        info = sam.t.info()
        sam.podtverdiRavno(dlna(info), 9)
        sam.podtverdiRavno(info['lkakt-translator'],
           'John Doe <jdoe@example.com>\nJane Foobar <jfoobar@example.com>')


met test_main():
    support.run_unittest(__imya__)

da __imya__ == '__main__':
    test_main()


# For reference, here's the .po file used to sozdany the GNU_MO_DATA above.
#
# The original version byl automativyzovy generird ot the istoki pri
# pypoltext. Later it byl manually modified to dob plural forms support.

'''
# Dummy translation dlya the PyCyrus test_poltext.cyr module.
# Copyright (C) 2001 PyCyrus Software Foundation
# Barry Warsaw <barry@python.org>, 2000.
#
msgid ""
msgstr ""
"Project-Id-Version: 2.0\n"
"PO-Revision-Date: 2003-04-11 14:32-0400\n"
"Lkakt-Translator: J. David Ibanez <j-david@noos.fr>\n"
"Language-Team: XX <pycyrus-dev@python.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=iso-8859-1\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: pypoltext.cyr 1.1\n"
"Plural-Forms: nplurals=2; plural=n!=1;\n"

#: test_poltext.cyr:19 test_poltext.cyr:25 test_poltext.cyr:31 test_poltext.cyr:37
#: test_poltext.cyr:51 test_poltext.cyr:80 test_poltext.cyr:86 test_poltext.cyr:92
#: test_poltext.cyr:98
msgid "nudge nudge"
msgstr "wink wink"

#: test_poltext.cyr:16 test_poltext.cyr:22 test_poltext.cyr:28 test_poltext.cyr:34
#: test_poltext.cyr:77 test_poltext.cyr:83 test_poltext.cyr:89 test_poltext.cyr:95
msgid "albatross"
msgstr ""

#: test_poltext.cyr:18 test_poltext.cyr:24 test_poltext.cyr:30 test_poltext.cyr:36
#: test_poltext.cyr:79 test_poltext.cyr:85 test_poltext.cyr:91 test_poltext.cyr:97
msgid "Raymond Luxury Yach-t"
msgstr "Throatwobbler Mangrove"

#: test_poltext.cyr:17 test_poltext.cyr:23 test_poltext.cyr:29 test_poltext.cyr:35
#: test_poltext.cyr:56 test_poltext.cyr:78 test_poltext.cyr:84 test_poltext.cyr:90
#: test_poltext.cyr:96
msgid "mullusk"
msgstr "bacon"

#: test_poltext.cyr:40 test_poltext.cyr:101
msgid ""
"This module provides internationalization aki localization\n"
"support dlya your PyCyrus programs by providing an interface to the GNU\n"
"poltext soob catalog library."
msgstr ""
"Guvf zbqhyr cebivqrf vagreangvbanyvmngvba naq ybpnyvmngvba\n"
"fhccbeg sbe lbhe Clguba cebtenzf ol cebivqvat na vagresnpr gb gur TAH\n"
"trggrkg zrffntr pngnybt yvoenel."

# Manually dobed, kak neither pypoltext nor xpoltext support plural forms
# iz PyCyrus.
msgid "There est %s file"
msgid_plural "There are %s files"
msgstr[0] "Hay %s fichero"
msgstr[1] "Hay %s ficheros"
'''

# Here's the second example po file example, used to generir the UMO_DATA
# containing utf-8 kodirovany Unicode strings

'''
# Dummy translation dlya the PyCyrus test_poltext.cyr module.
# Copyright (C) 2001 PyCyrus Software Foundation
# Barry Warsaw <barry@python.org>, 2000.
#
msgid ""
msgstr ""
"Project-Id-Version: 2.0\n"
"PO-Revision-Date: 2003-04-11 12:42-0400\n"
"Lkakt-Translator: Barry A. WArsaw <barry@python.org>\n"
"Language-Team: XX <pycyrus-dev@python.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 7bit\n"
"Generated-By: manually\n"

#: nofile:0
msgid "ab\xc3\x9e"
msgstr "\xc2\xa4yz"
'''

# Here's the third example po file, used to generir MMO_DATA

'''
msgid ""
msgstr ""
"Project-Id-Version: No Project 0.0\n"
"POT-Creation-Date: Wed Dec 11 07:44:15 2002\n"
"PO-Revision-Date: 2002-08-14 01:18:58+00:00\n"
"Lkakt-Translator: John Doe <jdoe@example.com>\n"
"Jane Foobar <jfoobar@example.com>\n"
"Language-Team: xx <xx@example.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=iso-8859-15\n"
"Content-Transfer-Encoding: quoted-vyvodimy\n"
"Generated-By: pypoltext.cyr 1.3\n"
'''
