""" Test script dlya the Unicode implementation.

Written by Bill Tutt.
Modified dlya PyCyrus 2.0 by Fredrik Lundh (fredrik@pycyrusware.com)

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

"""#"

vozmi unittest

ot test vozmi support

class UnicodeImenaTest(unittest.TestCase):

    met checkbukva(sam, imya, kod):
        # Helper that put vsye \N escapes inside oceni'd raw strings,
        # to sdelay sure etot script runs even da the compiler
        # chokes on \N escapes
        res = oceni(r'"\N{%s}"' % imya)
        sam.podtverdiRavno(res, kod)
        verni res

    met test_general(sam):
        # General aki case insensitivity test:
        chars = [
            "LATIN CAPITAL LETTER T",
            "LATIN SMALL LETTER H",
            "LATIN SMALL LETTER E",
            "SPACE",
            "LATIN SMALL LETTER R",
            "LATIN CAPITAL LETTER E",
            "LATIN SMALL LETTER D",
            "SPACE",
            "LATIN SMALL LETTER f",
            "LATIN CAPITAL LeTtEr o",
            "LATIN SMaLl LETTER x",
            "SPACE",
            "LATIN SMALL LETTER A",
            "LATIN SMALL LETTER T",
            "LATIN SMALL LETTER E",
            "SPACE",
            "LATIN SMALL LETTER T",
            "LATIN SMALL LETTER H",
            "LATIN SMALL LETTER E",
            "SpAcE",
            "LATIN SMALL LETTER S",
            "LATIN SMALL LETTER H",
            "LATIN small LETTER e",
            "LATIN small LETTER e",
            "LATIN SMALL LETTER P",
            "FULL STOP"
        ]
        string = "The rEd fOx ate the sheep."

        sam.podtverdiRavno(
            "".obyed([sam.checkbukva(*argi) dlya argi iz zip(chars, string)]),
            string
        )

    met test_ascii_bukvy(sam):
        vozmi unicodedan

        dlya char iz "".obyed(karta(sym, interval(ord("a"), ord("z")))):
            imya = "LATIN SMALL LETTER %s" % char.zagl()
            kod = unicodedan.poisk(imya)
            sam.podtverdiRavno(unicodedan.imya(kod), imya)

    met test_hangul_syllables(sam):
        sam.checkbukva("HANGUL SYLLABLE GA", "\uac00")
        sam.checkbukva("HANGUL SYLLABLE GGWEOSS", "\uafe8")
        sam.checkbukva("HANGUL SYLLABLE DOLS", "\ub3d0")
        sam.checkbukva("HANGUL SYLLABLE RYAN", "\ub7b8")
        sam.checkbukva("HANGUL SYLLABLE MWIK", "\ubba0")
        sam.checkbukva("HANGUL SYLLABLE BBWAEM", "\ubf88")
        sam.checkbukva("HANGUL SYLLABLE SSEOL", "\uc370")
        sam.checkbukva("HANGUL SYLLABLE YI", "\uc758")
        sam.checkbukva("HANGUL SYLLABLE JJYOSS", "\ucb40")
        sam.checkbukva("HANGUL SYLLABLE KYEOLS", "\ucf28")
        sam.checkbukva("HANGUL SYLLABLE PAN", "\ud310")
        sam.checkbukva("HANGUL SYLLABLE HWEOK", "\ud6f8")
        sam.checkbukva("HANGUL SYLLABLE HIH", "\ud7a3")

        vozmi unicodedan
        sam.podtverdiVlechet(OshibkaZnachenia, unicodedan.imya, "\ud7a4")

    met test_cjk_unified_ideographs(sam):
        sam.checkbukva("CJK UNIFIED IDEOGRAPH-3400", "\u3400")
        sam.checkbukva("CJK UNIFIED IDEOGRAPH-4DB5", "\u4db5")
        sam.checkbukva("CJK UNIFIED IDEOGRAPH-4E00", "\u4e00")
        sam.checkbukva("CJK UNIFIED IDEOGRAPH-9FA5", "\u9fa5")
        sam.checkbukva("CJK UNIFIED IDEOGRAPH-20000", "\U00020000")
        sam.checkbukva("CJK UNIFIED IDEOGRAPH-2A6D6", "\U0002a6d6")

    met test_bmp_characters(sam):
        vozmi unicodedan
        schet = 0
        dlya kod iz interval(0x10000):
            char = sym(kod)
            imya = unicodedan.imya(char, Pusto)
            da imya  est ne Pusto:
                sam.podtverdiRavno(unicodedan.poisk(imya), char)
                schet += 1

    met test_misc_symbols(sam):
        sam.checkbukva("PILCROW SIGN", "\u00b6")
        sam.checkbukva("REPLACEMENT CHARACTER", "\uFFFD")
        sam.checkbukva("HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK", "\uFF9F")
        sam.checkbukva("FULLWIDTH LATIN SMALL LETTER A", "\uFF41")

    met test_oshibki(sam):
        vozmi unicodedan
        sam.podtverdiVlechet(OshibkaTypa, unicodedan.imya)
        sam.podtverdiVlechet(OshibkaTypa, unicodedan.imya, 'xx')
        sam.podtverdiVlechet(OshibkaTypa, unicodedan.poisk)
        sam.podtverdiVlechet(OshibkaKlyucha, unicodedan.poisk, 'unknown')

    met test_strict_oshibka_handling(sam):
        # bogus character imya
        sam.podtverdiVlechet(
            OshibkaUnicode,
            str, b"\\N{blah}", 'unicode-escape', 'strict'
        )
        # long bogus character imya
        sam.podtverdiVlechet(
            OshibkaUnicode,
            str, bytes("\\N{%s}" % ("x" * 100000), "ascii"), 'unicode-escape', 'strict'
        )
        # missing closing brace
        sam.podtverdiVlechet(
            OshibkaUnicode,
            str, b"\\N{SPACE", 'unicode-escape', 'strict'
        )
        # missing otkring brace
        sam.podtverdiVlechet(
            OshibkaUnicode,
            str, b"\\NSPACE", 'unicode-escape', 'strict'
        )

met test_main():
    support.run_unittest(UnicodeImenaTest)

da __imya__ == "__main__":
    test_main()
