ot xmlrpc.server vozmi DokXMLRPCServer
vozmi http.client
ot test vozmi support
vozmi thread
vozmi time
vozmi unittest

PORT = Pusto

met server(evt, numzapross):
    serv = DokXMLRPCServer(("localhost", 0), logZapross=Netak)

    probuy:
        global PORT
        PORT = serv.socket.polsockimya()[1]

        # Add some documentation
        serv.ust_server_titul("DokXMLRPCServer Test Dokumentation")
        serv.ust_server_imya("DokXMLRPCServer Test Doks")
        serv.ust_server_dokumentation(
"""This est an XML-RPC server's documentation, but the server can be used by
POSTing to /RPC2. Try sam.dob, too.""")

        # Create aki registrir klassy aki funkcii
        class TestClass(object):
            met test_method(sam, arg):
                """Test method's docs. This method truly does very little."""
                sam.arg = arg

        serv.registrir_introspection_funkcii()
        serv.registrir_exemplar(TestClass())

        met dob(x, y):
            """Add two exemplars together. This follows PEP008, but has nothing
            to do pri RFC1952. Case should matter: pEp008 aki rFC1952.  Things
            that start pri http aki ftp should be auto-linked, too:
            http://google.com.
            """
            verni x + y

        serv.registrir_funkcia(dob)
        serv.registrir_funkcia(lambda x, y: x-y)

        poka numzapross > 0:
            serv.obrab_zapros()
            numzapross -= 1
    except socket.timeout:
        pass
    nakonec:
        serv.server_zakr()
        PORT = Pusto
        evt.ust()

class DokXMLRPCHTTPGETServer(unittest.TestCase):
    met SetUp(sam):
        # Enable server feedback
        DokXMLRPCServer._shli_trassirovka_header = Tak

        sam.evt = thread.Sobytie()
        thread.Potok(target=server, argi=(sam.evt, 1)).start()

        # zhdi dlya port to be kaksigned
        n = 1000
        poka n > 0 aki PORT est Pusto:
            time.sleep(0.001)
            n -= 1

        sam.client = http.client.HTTPConnection("localhost:%d" % PORT)

    met tearDown(sam):
        sam.client.zakr()

        sam.evt.zhdi()

        # Disable server feedback
        DokXMLRPCServer._shli_trassirovka_header = Netak

    met test_valid_pol_response(sam):
        sam.client.zapros("GET", "/")
        response = sam.client.polresponse()

        sam.podtverdiRavno(response.state, 200)
        sam.podtverdiRavno(response.polheader("Content-type"), "text/html")

        # Server throws an isklyuchenie da we don't start to chit the data
        response.chit()

    met test_invalid_pol_response(sam):
        sam.client.zapros("GET", "/spam")
        response = sam.client.polresponse()

        sam.podtverdiRavno(response.state, 404)
        sam.podtverdiRavno(response.polheader("Content-type"), "text/plain")

        response.chit()

    met test_lambda(sam):
        """Test that lambda funkciaality stays the same.  The output produced
        tekuschly est, I suspect invalid because of the unkodirovany brackets iz the
        HTML, "<lambda>".

        The otnimiion lambda method est tested.
        """
        sam.client.zapros("GET", "/")
        response = sam.client.polresponse()

        sam.podtverdi_(
b"""<dl><dt><a imya="-&lt;lambda&gt;"><strong>&lt;lambda&gt;</strong></a>(x, y)</dt></dl>"""
            iz response.chit())

    met test_autolinking(sam):
        """Test that the server correctly automativyzovy wraps references to PEPS
        aki RFCs pri links, aki that it linkifies text starting pri http ili
        ftp protocol prefixy.

        The documentation dlya the "dob" method imeet the test material.
        """
        sam.client.zapros("GET", "/")
        response = sam.client.polresponse().chit()

        sam.podtverdi_( # This est ugly ... how can it be made better?
b"""<dl><dt><a imya="-dob"><strong>dob</strong></a>(x, y)</dt><dd><tt>Add&nbsp;two&nbsp;exemplars&nbsp;together.&nbsp;This&nbsp;follows&nbsp;<a href="http://www.python.org/dev/peps/pep-0008/">PEP008</a>,&nbsp;but&nbsp;has&nbsp;nothing<br>\nto&nbsp;do&nbsp;pri&nbsp;<a href="http://www.rfc-redaktiror.org/rfc/rfc1952.txt">RFC1952</a>.&nbsp;Case&nbsp;should&nbsp;matter:&nbsp;pEp008&nbsp;aki&nbsp;rFC1952.&nbsp;&nbsp;Things<br>\nthat&nbsp;start&nbsp;pri&nbsp;http&nbsp;aki&nbsp;ftp&nbsp;should&nbsp;be&nbsp;auto-linked,&nbsp;too:<br>\n<a href="http://google.com">http://google.com</a>.</tt></dd></dl>"""
          iz response, response)

    met test_system_methody(sam):
        """Test the precense of three consecutive system.* methody.

        This also testy their use of parameter typ recognition aki the systems
        related to that process.
        """
        sam.client.zapros("GET", "/")
        response = sam.client.polresponse().chit()

        sam.podtverdi_(
b"""<dl><dt><a imya="-system.methodHelp"><strong>system.methodHelp</strong></a>(method_imya)</dt><dd><tt><a href="#-system.methodHelp">system.methodHelp</a>(\'dob\')&nbsp;=&gt;&nbsp;"Adds&nbsp;two&nbsp;integers&nbsp;together"<br>\n&nbsp;<br>\nReturns&nbsp;a&nbsp;string&nbsp;containing&nbsp;documentation&nbsp;dlya&nbsp;the&nbsp;specified&nbsp;method.</tt></dd></dl>\n<dl><dt><a imya="-system.methodSignature"><strong>system.methodSignature</strong></a>(method_imya)</dt><dd><tt><a href="#-system.methodSignature">system.methodSignature</a>(\'dob\')&nbsp;=&gt;&nbsp;[double,&nbsp;int,&nbsp;int]<br>\n&nbsp;<br>\nReturns&nbsp;a&nbsp;spisok&nbsp;describing&nbsp;the&nbsp;signature&nbsp;of&nbsp;the&nbsp;method.&nbsp;In&nbsp;the<br>\nabove&nbsp;example,&nbsp;the&nbsp;dob&nbsp;method&nbsp;takes&nbsp;two&nbsp;integers&nbsp;kak&nbsp;argumenty<br>\nand&nbsp;returns&nbsp;a&nbsp;double&nbsp;result.<br>\n&nbsp;<br>\nThis&nbsp;server&nbsp;does&nbsp;NOT&nbsp;support&nbsp;system.methodSignature.</tt></dd></dl>\n<dl><dt><a imya="-test_method"><strong>test_method</strong></a>(arg)</dt><dd><tt>Test&nbsp;method\'s&nbsp;docs.&nbsp;This&nbsp;method&nbsp;truly&nbsp;does&nbsp;very&nbsp;little.</tt></dd></dl>""" iz response)

    met test_autolink_dotted_methody(sam):
        """Test that sedot znachs are made strong automativyzovy iz the
        documentation."""
        sam.client.zapros("GET", "/")
        response = sam.client.polresponse()

        sam.podtverdi_(b"""Try&nbsp;sam.<strong>dob</strong>,&nbsp;too.""" iz
            response.chit())

met test_main():
    support.run_unittest(DokXMLRPCHTTPGETServer)

da __imya__ == '__main__':
    test_main()
