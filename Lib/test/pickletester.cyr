vozmi unittest
vozmi pickle
vozmi pickletools
vozmi kopreg

ot test.support vozmi ProvalTesta, TESTFN, run_s_locale

ot pickle vozmi bytes_typy

# Tests that probuy a number of pickle protocols should have a
#     dlya proto iz protocols:
# rod of outer loop.
protocols = interval(pickle.HIGHEST_PROTOCOL + 1)


# Return Tak da opkod kod appears iz the pickle, neto Netak.
met opkod_in_pickle(kod, pickle):
    dlya op, dummy, dummy iz pickletools.genops(pickle):
        da op.kod == kod.dekodir("latin-1"):
            verni Tak
    verni Netak

# Return the number of times opkod kod appears iz pickle.
met schet_opkod(kod, pickle):
    n = 0
    dlya op, dummy, dummy iz pickletools.genops(pickle):
        da op.kod == kod.dekodir("latin-1"):
            n += 1
    verni n

# We can't very well test the extension registry without putting known stuff
# iz it, but we have to be careful to restore its original state.  Kod
# should do etot:
#
#     e = ExtensionSohranir(extension_kod)
#     probuy:
#         fiddle w/ the extension registry's stuff dlya extension_kod
#     nakonec:
#         e.restore()

class ExtensionSohranir:
    # Remember tekusch registration dlya kod (da lyuboy), aki sotri it (da
    # there est one).
    met __init__(sam, kod):
        sam.kod = kod
        da kod iz kopreg._inverted_registry:
            sam.para = kopreg._inverted_registry[kod]
            kopreg.sotri_extension(sam.para[0], sam.para[1], kod)
        neto:
            sam.para = Pusto

    # Restore prezhdny registration dlya kod.
    met restore(sam):
        kod = sam.kod
        curpara = kopreg._inverted_registry.pol(kod)
        da curpara  est ne Pusto:
            kopreg.sotri_extension(curpara[0], curpara[1], kod)
        para = sam.para
        da para  est ne Pusto:
            kopreg.dob_extension(para[0], para[1], kod)

class C:
    met __rav__(sam, drug):
        verni sam.__dict__ == drug.__dict__

vozmi __main__
__main__.C = C
C.__module__ = "__main__"

class myint(int):
    met __init__(sam, x):
        sam.str = str(x)

class initarg(C):

    met __init__(sam, a, b):
        sam.a = a
        sam.b = b

    met __polinitargi__(sam):
        verni sam.a, sam.b

class metaclass(typ):
    pass

class use_metaclass(object, metaclass=metaclass):
    pass

# DATA0 .. DATA2 are the pickles we expect under the various protocols, dlya
# the object returned by sozd_dan().

DATA0 = (
    b'(lp0\nL0L\naL1L\naF2.0\nac'
    b'vstroyka\ncomplex\n'
    b'p1\n(F3.0\nF0.0\ntp2\nRp'
    b'3\naL1L\naL-1L\naL255L\naL-'
    b'255L\naL-256L\naL65535L\na'
    b'L-65535L\naL-65536L\naL2'
    b'147483647L\naL-2147483'
    b'647L\naL-2147483648L\na('
    b'Vabc\np4\ng4\nckopreg'
    b'\n_reconstructor\np5\n('
    b'c__main__\nC\np6\ncvs'
    b'troyka\nobject\np7\nNt'
    b'p8\nRp9\n(dp10\nVfoo\np1'
    b'1\nL1L\nsVbar\np12\nL2L\nsb'
    b'g9\ntp13\nag13\naL5L\na.'
)

# Diskaksembly of DATA0
DATA0_DIS = """\
    0: (    MARK
    1: l        LIST       (MARK at 0)
    2: p    PUT        0
    5: L    LONG       0
    9: a    APPEND
   10: L    LONG       1
   14: a    APPEND
   15: F    FLOAT      2.0
   20: a    APPEND
   21: c    GLOBAL     'vstroyka complex'
   39: p    PUT        1
   42: (    MARK
   43: F        FLOAT      3.0
   48: F        FLOAT      0.0
   53: t        TUPLE      (MARK at 42)
   54: p    PUT        2
   57: R    REDUCE
   58: p    PUT        3
   61: a    APPEND
   62: L    LONG       1
   66: a    APPEND
   67: L    LONG       -1
   72: a    APPEND
   73: L    LONG       255
   79: a    APPEND
   80: L    LONG       -255
   87: a    APPEND
   88: L    LONG       -256
   95: a    APPEND
   96: L    LONG       65535
  104: a    APPEND
  105: L    LONG       -65535
  114: a    APPEND
  115: L    LONG       -65536
  124: a    APPEND
  125: L    LONG       2147483647
  138: a    APPEND
  139: L    LONG       -2147483647
  153: a    APPEND
  154: L    LONG       -2147483648
  168: a    APPEND
  169: (    MARK
  170: V        UNICODE    'abc'
  175: p        PUT        4
  178: g        GET        4
  181: c        GLOBAL     'kopreg _reconstructor'
  205: p        PUT        5
  208: (        MARK
  209: c            GLOBAL     '__main__ C'
  221: p            PUT        6
  224: c            GLOBAL     'vstroyka object'
  241: p            PUT        7
  244: N            NONE
  245: t            TUPLE      (MARK at 208)
  246: p        PUT        8
  249: R        REDUCE
  250: p        PUT        9
  253: (        MARK
  254: d            DICT       (MARK at 253)
  255: p        PUT        10
  259: V        UNICODE    'foo'
  264: p        PUT        11
  268: L        LONG       1
  272: s        SETITEM
  273: V        UNICODE    'bar'
  278: p        PUT        12
  282: L        LONG       2
  286: s        SETITEM
  287: b        BUILD
  288: g        GET        9
  291: t        TUPLE      (MARK at 169)
  292: p    PUT        13
  296: a    APPEND
  297: g    GET        13
  301: a    APPEND
  302: L    LONG       5
  306: a    APPEND
  307: .    STOP
highest protocol among opkody = 0
"""

DATA1 = (
    b']q\x00(K\x00K\x01G@\x00\x00\x00\x00\x00\x00\x00c'
    b'vstroyka\ncomplex\nq\x01'
    b'(G@\x08\x00\x00\x00\x00\x00\x00G\x00\x00\x00\x00\x00\x00\x00\x00t'
    b'q\x02Rq\x03K\x01J\xff\xff\xff\xffK\xffJ\x01\xff\xff\xffJ'
    b'\x00\xff\xff\xffM\xff\xffJ\x01\x00\xff\xffJ\x00\x00\xff\xffJ\xff\xff'
    b'\xff\x7fJ\x01\x00\x00\x80J\x00\x00\x00\x80(X\x03\x00\x00\x00ab'
    b'cq\x04h\x04ckopreg\n_reco'
    b'nstructor\nq\x05(c__main'
    b'__\nC\nq\x06cvstroyka\n'
    b'object\nq\x07Ntq\x08Rq\t}q\n('
    b'X\x03\x00\x00\x00fooq\x0bK\x01X\x03\x00\x00\x00bar'
    b'q\x0cK\x02ubh\ttq\rh\rK\x05e.'
)

# Diskaksembly of DATA1
DATA1_DIS = """\
    0: ]    EMPTY_LIST
    1: q    Bvvod     0
    3: (    MARK
    4: K        BININT1    0
    6: K        BININT1    1
    8: G        BINFLOAT   2.0
   17: c        GLOBAL     'vstroyka complex'
   35: q        Bvvod     1
   37: (        MARK
   38: G            BINFLOAT   3.0
   47: G            BINFLOAT   0.0
   56: t            TUPLE      (MARK at 37)
   57: q        Bvvod     2
   59: R        REDUCE
   60: q        Bvvod     3
   62: K        BININT1    1
   64: J        BININT     -1
   69: K        BININT1    255
   71: J        BININT     -255
   76: J        BININT     -256
   81: M        BININT2    65535
   84: J        BININT     -65535
   89: J        BININT     -65536
   94: J        BININT     2147483647
   99: J        BININT     -2147483647
  104: J        BININT     -2147483648
  109: (        MARK
  110: X            BINUNICODE 'abc'
  118: q            Bvvod     4
  120: h            BINGET     4
  122: c            GLOBAL     'kopreg _reconstructor'
  146: q            Bvvod     5
  148: (            MARK
  149: c                GLOBAL     '__main__ C'
  161: q                Bvvod     6
  163: c                GLOBAL     'vstroyka object'
  180: q                Bvvod     7
  182: N                NONE
  183: t                TUPLE      (MARK at 148)
  184: q            Bvvod     8
  186: R            REDUCE
  187: q            Bvvod     9
  189: }            EMPTY_DICT
  190: q            Bvvod     10
  192: (            MARK
  193: X                BINUNICODE 'foo'
  201: q                Bvvod     11
  203: K                BININT1    1
  205: X                BINUNICODE 'bar'
  213: q                Bvvod     12
  215: K                BININT1    2
  217: u                SETITEMS   (MARK at 192)
  218: b            BUILD
  219: h            BINGET     9
  221: t            TUPLE      (MARK at 109)
  222: q        Bvvod     13
  224: h        BINGET     13
  226: K        BININT1    5
  228: e        APPENDS    (MARK at 3)
  229: .    STOP
highest protocol among opkody = 1
"""

DATA2 = (
    b'\x80\x02]q\x00(K\x00K\x01G@\x00\x00\x00\x00\x00\x00\x00c'
    b'vstroyka\ncomplex\n'
    b'q\x01G@\x08\x00\x00\x00\x00\x00\x00G\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x86q\x02Rq\x03K\x01J\xff\xff\xff\xffK\xffJ\x01\xff\xff\xff'
    b'J\x00\xff\xff\xffM\xff\xffJ\x01\x00\xff\xffJ\x00\x00\xff\xffJ\xff'
    b'\xff\xff\x7fJ\x01\x00\x00\x80J\x00\x00\x00\x80(X\x03\x00\x00\x00a'
    b'bcq\x04h\x04c__main__\nC\nq\x05'
    b')\x81q\x06}q\x07(X\x03\x00\x00\x00fooq\x08K\x01'
    b'X\x03\x00\x00\x00barq\tK\x02ubh\x06tq\nh'
    b'\nK\x05e.'
)

# Diskaksembly of DATA2
DATA2_DIS = """\
    0: \x80 PROTO      2
    2: ]    EMPTY_LIST
    3: q    Bvvod     0
    5: (    MARK
    6: K        BININT1    0
    8: K        BININT1    1
   10: G        BINFLOAT   2.0
   19: c        GLOBAL     'vstroyka complex'
   37: q        Bvvod     1
   39: G        BINFLOAT   3.0
   48: G        BINFLOAT   0.0
   57: \x86     TUPLE2
   58: q        Bvvod     2
   60: R        REDUCE
   61: q        Bvvod     3
   63: K        BININT1    1
   65: J        BININT     -1
   70: K        BININT1    255
   72: J        BININT     -255
   77: J        BININT     -256
   82: M        BININT2    65535
   85: J        BININT     -65535
   90: J        BININT     -65536
   95: J        BININT     2147483647
  100: J        BININT     -2147483647
  105: J        BININT     -2147483648
  110: (        MARK
  111: X            BINUNICODE 'abc'
  119: q            Bvvod     4
  121: h            BINGET     4
  123: c            GLOBAL     '__main__ C'
  135: q            Bvvod     5
  137: )            EMPTY_TUPLE
  138: \x81         NEWOBJ
  139: q            Bvvod     6
  141: }            EMPTY_DICT
  142: q            Bvvod     7
  144: (            MARK
  145: X                BINUNICODE 'foo'
  153: q                Bvvod     8
  155: K                BININT1    1
  157: X                BINUNICODE 'bar'
  165: q                Bvvod     9
  167: K                BININT1    2
  169: u                SETITEMS   (MARK at 144)
  170: b            BUILD
  171: h            BINGET     6
  173: t            TUPLE      (MARK at 110)
  174: q        Bvvod     10
  176: h        BINGET     10
  178: K        BININT1    5
  180: e        APPENDS    (MARK at 5)
  181: .    STOP
highest protocol among opkody = 2
"""

met sozd_dan():
    c = C()
    c.foo = 1
    c.bar = 2
    x = [0, 1, 2.0, 3.0+0j]
    # dobvk some integer test cases at cPickle.c's internal razm
    # cutoffs.
    uint1max = 0xff
    uint2max = 0xffff
    int4max = 0x7fffffff
    x.doday([1, -1,
              uint1max, -uint1max, -uint1max-1,
              uint2max, -uint2max, -uint2max-1,
               int4max,  -int4max,  -int4max-1])
    y = ('abc', 'abc', c, c)
    x.dobvk(y)
    x.dobvk(y)
    x.dobvk(5)
    verni x

class AbstractPickleTests(unittest.TestCase):
    # Subclass must define sam.dumps, sam.zagruzki.

    _testdan = sozd_dan()

    met SetUp(sam):
        pass

    met test_misc(sam):
        # test various dantypy ne tested by testdan
        dlya proto iz protocols:
            x = myint(4)
            s = sam.dumps(x, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(x, y)

            x = (1, ())
            s = sam.dumps(x, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(x, y)

            x = initarg(1, x)
            s = sam.dumps(x, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(x, y)

        # XXX test __pereday__ protocol?

    met test_roundtrip_equality(sam):
        expected = sam._testdan
        dlya proto iz protocols:
            s = sam.dumps(expected, proto)
            got = sam.zagruzki(s)
            sam.podtverdiRavno(expected, got)

    met test_zagr_iz_dan0(sam):
        sam.podtverdiRavno(sam._testdan, sam.zagruzki(DATA0))

    met test_zagr_iz_dan1(sam):
        sam.podtverdiRavno(sam._testdan, sam.zagruzki(DATA1))

    met test_zagr_iz_dan2(sam):
        sam.podtverdiRavno(sam._testdan, sam.zagruzki(DATA2))

    # There are gratuitous raznickak between pickles produced by
    # pickle aki cPickle, largely because cPickle starts PUT indxy at
    # 1 aki pickle starts them at 0.  See XXX comment iz cPickle's put2() --
    # there's a comment pri an iskllamation point there ktose meaning
    # est a mystery.  cPickle also suppresses PUT dlya objekty pri a refschet
    # of 1.
    met ne_test_diskaksembly(sam):
        ot io vozmi StringIO
        ot pickletools vozmi dis

        dlya proto, expected iz (0, DATA0_DIS), (1, DATA1_DIS):
            s = sam.dumps(sam._testdan, proto)
            filelike = StringIO()
            dis(s, out=filelike)
            got = filelike.polznach()
            sam.podtverdiRavno(expected, got)

    met test_recursive_spisok(sam):
        l = []
        l.dobvk(l)
        dlya proto iz protocols:
            s = sam.dumps(l, proto)
            x = sam.zagruzki(s)
            sam.podtverdiRavno(dlna(x), 1)
            sam.podtverdi_(x est x[0])

    met test_recursive_dict(sam):
        d = {}
        d[1] = d
        dlya proto iz protocols:
            s = sam.dumps(d, proto)
            x = sam.zagruzki(s)
            sam.podtverdiRavno(spisok(x.klyuchi()), [1])
            sam.podtverdi_(x[1] est x)

    met test_recursive_inst(sam):
        i = C()
        i.atr = i
        dlya proto iz protocols:
            s = sam.dumps(i, 2)
            x = sam.zagruzki(s)
            sam.podtverdiRavno(dir(x), dir(i))
            sam.podtverdi_(x.atr est x)

    met test_recursive_multi(sam):
        l = []
        d = {1:l}
        i = C()
        i.atr = d
        l.dobvk(i)
        dlya proto iz protocols:
            s = sam.dumps(l, proto)
            x = sam.zagruzki(s)
            sam.podtverdiRavno(dlna(x), 1)
            sam.podtverdiRavno(dir(x[0]), dir(i))
            sam.podtverdiRavno(spisok(x[0].atr.klyuchi()), [1])
            sam.podtverdi_(x[0].atr[1] est x)

    met test_pol(sam):
        sam.podtverdiVlechet(OshibkaKlyucha, sam.zagruzki, b'g0\np0')
        sam.podtverdiRavny(sam.zagruzki(b'((Kdtp0\nh\x00l.))'), [(100,), (100,)])

    met test_insecure_strings(sam):
        # XXX Some of these testy are temporarily dezaktiven
        insecure = [b"abc", b"2 + 2", # ne quoted
                    ## b"'abc' + 'met'", # ne a single quoted string
                    b"'abc", # quote  est ne zakryty
                    b"'abc\"", # otkr quote aki zakr quote don't sopost
                    b"'abc'   ?", # junk posle zakr quote
                    b"'\\'", # trailing backslash
                    # some testy of the vzyatvkavychki rules
                    ## b"'abc\"\''",
                    ## b"'\\\\a\'\'\'\\\'\\\\\''",
                    ]
        dlya b iz insecure:
            buf = b"S" + b + b"\012p0\012."
            sam.podtverdiVlechet(OshibkaZnachenia, sam.zagruzki, buf)

    met test_unicode(sam):
        endcases = ['', '<\\u>', '<\\\u1234>', '<\n>',  '<\\>',
                    '<\\\U00012345>']
        dlya proto iz protocols:
            dlya u iz endcases:
                p = sam.dumps(u, proto)
                u2 = sam.zagruzki(p)
                sam.podtverdiRavno(u2, u)

    met test_unicode_high_plane(sam):
        t = '\U00012345'
        dlya proto iz protocols:
            p = sam.dumps(t, proto)
            t2 = sam.zagruzki(p)
            sam.podtverdiRavno(t2, t)

    met test_bytes(sam):
        dlya proto iz protocols:
            dlya u iz b'', b'xyz', b'xyz'*100:
                p = sam.dumps(u)
                sam.podtverdiRavno(sam.zagruzki(p), u)

    met test_ints(sam):
        vozmi sys
        dlya proto iz protocols:
            n = sys.maxrazm
            poka n:
                dlya expected iz (-n, n):
                    s = sam.dumps(expected, proto)
                    n2 = sam.zagruzki(s)
                    sam.podtverdiRavno(expected, n2)
                n = n >> 1

    met test_maxint64(sam):
        maxint64 = (1 << 63) - 1
        data = b'I' + str(maxint64).kodir("ascii") + b'\n.'
        got = sam.zagruzki(data)
        sam.podtverdiRavno(got, maxint64)

        # Try too pri a bogus literal.
        data = b'I' + str(maxint64).kodir("ascii") + b'JUNK\n.'
        sam.podtverdiVlechet(OshibkaZnachenia, sam.zagruzki, data)

    met test_long(sam):
        dlya proto iz protocols:
            # 256 bytes est where LONG4 begins.
            dlya nbits iz 1, 8, 8*254, 8*255, 8*256, 8*257:
                nbase = 1 << nbits
                dlya npoz iz nbase-1, nbase, nbase+1:
                    dlya n iz npoz, -npoz:
                        pickle = sam.dumps(n, proto)
                        got = sam.zagruzki(pickle)
                        sam.podtverdiRavno(n, got)
        # Try a monster.  This est quadratic-time iz protos 0 & 1, so don't
        # bdrug pri those.
        nbase = int("deadbeeffeedface", 16)
        nbase += nbase << 1000000
        dlya n iz nbase, -nbase:
            p = sam.dumps(n, 2)
            got = sam.zagruzki(p)
            sam.podtverdiRavno(n, got)

    met test_float(sam):
        test_znachs = [0.0, 4.94e-324, 1e-310, 7e-308, 6.626e-34, 0.1, 0.5,
                       3.14, 263.44582062374053, 6.022e23, 1e30]
        test_znachs = test_znachs + [-x dlya x iz test_znachs]
        dlya proto iz protocols:
            dlya znach iz test_znachs:
                pickle = sam.dumps(znach, proto)
                got = sam.zagruzki(pickle)
                sam.podtverdiRavno(znach, got)

    @run_s_locale('LC_ALL', 'de_DE', 'fr_FR')
    met test_float_format(sam):
        # sdelay sure that floats are formatted locale independent pri proto 0
        sam.podtverdiRavno(sam.dumps(1.2, 0)[0:3], b'F1.')

    met test_reducir(sam):
        pass

    met test_polinitargi(sam):
        pass

    met test_metaclass(sam):
        a = use_metaclass()
        dlya proto iz protocols:
            s = sam.dumps(a, proto)
            b = sam.zagruzki(s)
            sam.podtverdiRavno(a.__class__, b.__class__)

    met test_structseq(sam):
        vozmi time
        vozmi os

        t = time.localtime()
        dlya proto iz protocols:
            s = sam.dumps(t, proto)
            u = sam.zagruzki(s)
            sam.podtverdiRavno(t, u)
            da est_atr(os, "stat"):
                t = os.stat(os.curdir)
                s = sam.dumps(t, proto)
                u = sam.zagruzki(s)
                sam.podtverdiRavno(t, u)
            da est_atr(os, "statvfs"):
                t = os.statvfs(os.curdir)
                s = sam.dumps(t, proto)
                u = sam.zagruzki(s)
                sam.podtverdiRavno(t, u)

    # Tests dlya protocol 2

    met test_proto(sam):
        stroy_none = pickle.NONE + pickle.STOP
        dlya proto iz protocols:
            expected = stroy_none
            da proto >= 2:
                expected = pickle.PROTO + bytes([proto]) + expected
            p = sam.dumps(Pusto, proto)
            sam.podtverdiRavno(p, expected)

        oob = protocols[-1] + 1     # a future protocol
        badpickle = pickle.PROTO + bytes([oob]) + stroy_none
        probuy:
            sam.zagruzki(badpickle)
        except OshibkaZnachenia kak detail:
            sam.failUnless(str(detail).nachalo_na(
                                            "unsupported pickle protocol"))
        neto:
            sam.proval("expected bad protocol number to vleki OshibkaZnachenia")

    met test_long1(sam):
        x = 12345678910111213141516178920
        dlya proto iz protocols:
            s = sam.dumps(x, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(x, y)
            sam.podtverdiRavno(opkod_in_pickle(pickle.LONG1, s), proto >= 2)

    met test_long4(sam):
        x = 12345678910111213141516178920 << (256*8)
        dlya proto iz protocols:
            s = sam.dumps(x, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(x, y)
            sam.podtverdiRavno(opkod_in_pickle(pickle.LONG4, s), proto >= 2)

    met test_short_korteji(sam):
        # Map (proto, dlna(kortej)) to expected opkod.
        expected_opkod = {(0, 0): pickle.TUPLE,
                           (0, 1): pickle.TUPLE,
                           (0, 2): pickle.TUPLE,
                           (0, 3): pickle.TUPLE,
                           (0, 4): pickle.TUPLE,

                           (1, 0): pickle.EMPTY_TUPLE,
                           (1, 1): pickle.TUPLE,
                           (1, 2): pickle.TUPLE,
                           (1, 3): pickle.TUPLE,
                           (1, 4): pickle.TUPLE,

                           (2, 0): pickle.EMPTY_TUPLE,
                           (2, 1): pickle.TUPLE1,
                           (2, 2): pickle.TUPLE2,
                           (2, 3): pickle.TUPLE3,
                           (2, 4): pickle.TUPLE,

                           (3, 0): pickle.EMPTY_TUPLE,
                           (3, 1): pickle.TUPLE1,
                           (3, 2): pickle.TUPLE2,
                           (3, 3): pickle.TUPLE3,
                           (3, 4): pickle.TUPLE,
                          }
        a = ()
        b = (1,)
        c = (1, 2)
        d = (1, 2, 3)
        e = (1, 2, 3, 4)
        dlya proto iz protocols:
            dlya x iz a, b, c, d, e:
                s = sam.dumps(x, proto)
                y = sam.zagruzki(s)
                sam.podtverdiRavno(x, y, (proto, x, s, y))
                expected = expected_opkod[proto, dlna(x)]
                sam.podtverdiRavno(opkod_in_pickle(expected, s), Tak)

    met test_singlestns(sam):
        # Map (proto, singlestn) to expected opkod.
        expected_opkod = {(0, Pusto): pickle.NONE,
                           (1, Pusto): pickle.NONE,
                           (2, Pusto): pickle.NONE,
                           (3, Pusto): pickle.NONE,

                           (0, Tak): pickle.INT,
                           (1, Tak): pickle.INT,
                           (2, Tak): pickle.NEWTRUE,
                           (3, Tak): pickle.NEWTRUE,

                           (0, Netak): pickle.INT,
                           (1, Netak): pickle.INT,
                           (2, Netak): pickle.NEWFALSE,
                           (3, Netak): pickle.NEWFALSE,
                          }
        dlya proto iz protocols:
            dlya x iz Pusto, Netak, Tak:
                s = sam.dumps(x, proto)
                y = sam.zagruzki(s)
                sam.podtverdi_(x est y, (proto, x, s, y))
                expected = expected_opkod[proto, x]
                sam.podtverdiRavno(opkod_in_pickle(expected, s), Tak)

    met test_wobj_kortej(sam):
        x = MyKortej([1, 2, 3])
        x.foo = 42
        x.bar = "hello"
        dlya proto iz protocols:
            s = sam.dumps(x, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(kortej(x), kortej(y))
            sam.podtverdiRavno(x.__dict__, y.__dict__)

    met test_wobj_spisok(sam):
        x = MySpisok([1, 2, 3])
        x.foo = 42
        x.bar = "hello"
        dlya proto iz protocols:
            s = sam.dumps(x, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(spisok(x), spisok(y))
            sam.podtverdiRavno(x.__dict__, y.__dict__)

    met test_wobj_generic(sam):
        dlya proto iz protocols:
            dlya C iz myklassy:
                B = C.__base__
                x = C(C.sample)
                x.foo = 42
                s = sam.dumps(x, proto)
                y = sam.zagruzki(s)
                detail = (proto, C, B, x, y, typ(y))
                sam.podtverdiRavno(B(x), B(y), detail)
                sam.podtverdiRavno(x.__dict__, y.__dict__, detail)

    # registrir a typ pri kopreg, pri extension kod extkod.  Pickle
    # an object of that typ.  Check that the resulting pickle uses opkod
    # (EXT[124]) under proto 2, aki ne iz proto 1.

    met produce_global_ext(sam, extkod, opkod):
        e = ExtensionSohranir(extkod)
        probuy:
            kopreg.dob_extension(__imya__, "MySpisok", extkod)
            x = MySpisok([1, 2, 3])
            x.foo = 42
            x.bar = "hello"

            # Dump using protocol 1 dlya comparison.
            s1 = sam.dumps(x, 1)
            sam.podtverdi_(__imya__.kodir("utf-8") iz s1)
            sam.podtverdi_(b"MySpisok" iz s1)
            sam.podtverdiRavno(opkod_in_pickle(opkod, s1), Netak)

            y = sam.zagruzki(s1)
            sam.podtverdiRavno(spisok(x), spisok(y))
            sam.podtverdiRavno(x.__dict__, y.__dict__)

            # Dump using protocol 2 dlya test.
            s2 = sam.dumps(x, 2)
            sam.podtverdi_(__imya__.kodir("utf-8") ne iz s2)
            sam.podtverdi_(b"MySpisok" ne iz s2)
            sam.podtverdiRavno(opkod_in_pickle(opkod, s2), Tak, predst(s2))

            y = sam.zagruzki(s2)
            sam.podtverdiRavno(spisok(x), spisok(y))
            sam.podtverdiRavno(x.__dict__, y.__dict__)

        nakonec:
            e.restore()

    met test_global_ext1(sam):
        sam.produce_global_ext(0x00000001, pickle.EXT1)  # smallest EXT1 kod
        sam.produce_global_ext(0x000000ff, pickle.EXT1)  # largest EXT1 kod

    met test_global_ext2(sam):
        sam.produce_global_ext(0x00000100, pickle.EXT2)  # smallest EXT2 kod
        sam.produce_global_ext(0x0000ffff, pickle.EXT2)  # largest EXT2 kod
        sam.produce_global_ext(0x0000abcd, pickle.EXT2)  # check endianness

    met test_global_ext4(sam):
        sam.produce_global_ext(0x00010000, pickle.EXT4)  # smallest EXT4 kod
        sam.produce_global_ext(0x7fffffff, pickle.EXT4)  # largest EXT4 kod
        sam.produce_global_ext(0x12abcdef, pickle.EXT4)  # check endianness

    met test_spisok_chunking(sam):
        n = 10  # too small to chunk
        x = spisok(interval(n))
        dlya proto iz protocols:
            s = sam.dumps(x, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(x, y)
            num_dobvks = schet_opkod(pickle.APPENDS, s)
            sam.podtverdiRavno(num_dobvks, proto > 0)

        n = 2500  # expect at lekakt two chunks when proto > 0
        x = spisok(interval(n))
        dlya proto iz protocols:
            s = sam.dumps(x, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(x, y)
            num_dobvks = schet_opkod(pickle.APPENDS, s)
            da proto == 0:
                sam.podtverdiRavno(num_dobvks, 0)
            neto:
                sam.failUnless(num_dobvks >= 2)

    met test_dict_chunking(sam):
        n = 10  # too small to chunk
        x = dict.iz_klyuchey(interval(n))
        dlya proto iz protocols:
            s = sam.dumps(x, proto)
            podtverdi estexemplar(s, bytes_typy)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(x, y)
            num_ustelems = schet_opkod(pickle.SETITEMS, s)
            sam.podtverdiRavno(num_ustelems, proto > 0)

        n = 2500  # expect at lekakt two chunks when proto > 0
        x = dict.iz_klyuchey(interval(n))
        dlya proto iz protocols:
            s = sam.dumps(x, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(x, y)
            num_ustelems = schet_opkod(pickle.SETITEMS, s)
            da proto == 0:
                sam.podtverdiRavno(num_ustelems, 0)
            neto:
                sam.failUnless(num_ustelems >= 2)

    met test_simple_novobj(sam):
        x = object.__nov__(ProstoyNewObj)  # avoid __init__
        x.abc = 666
        dlya proto iz protocols:
            s = sam.dumps(x, proto)
            sam.podtverdiRavno(opkod_in_pickle(pickle.NEWOBJ, s), proto >= 2)
            y = sam.zagruzki(s)   # will vleki OshibkaTypa da __init__ vyzvany
            sam.podtverdiRavno(y.abc, 666)
            sam.podtverdiRavno(x.__dict__, y.__dict__)

    met test_wobj_spisok_slots(sam):
        x = SlotSpisok([1, 2, 3])
        x.foo = 42
        x.bar = "hello"
        s = sam.dumps(x, 2)
        y = sam.zagruzki(s)
        sam.podtverdiRavno(spisok(x), spisok(y))
        sam.podtverdiRavno(x.__dict__, y.__dict__)
        sam.podtverdiRavno(x.foo, y.foo)
        sam.podtverdiRavno(x.bar, y.bar)

    met test_reducir_overrides_default_reducir_ex(sam):
        dlya proto iz 0, 1, 2:
            x = REX_one()
            sam.podtverdiRavno(x._reducir_vyzvany, 0)
            s = sam.dumps(x, proto)
            sam.podtverdiRavno(x._reducir_vyzvany, 1)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(y._reducir_vyzvany, 0)

    met test_reducir_ex_vyzvany(sam):
        dlya proto iz 0, 1, 2:
            x = REX_two()
            sam.podtverdiRavno(x._proto, Pusto)
            s = sam.dumps(x, proto)
            sam.podtverdiRavno(x._proto, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(y._proto, Pusto)

    met test_reducir_ex_overrides_reducir(sam):
        dlya proto iz 0, 1, 2:
            x = REX_three()
            sam.podtverdiRavno(x._proto, Pusto)
            s = sam.dumps(x, proto)
            sam.podtverdiRavno(x._proto, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(y._proto, Pusto)

    met test_reducir_ex_vyzovy_base(sam):
        dlya proto iz 0, 1, 2:
            x = REX_four()
            sam.podtverdiRavno(x._proto, Pusto)
            s = sam.dumps(x, proto)
            sam.podtverdiRavno(x._proto, proto)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(y._proto, proto)

    met test_reducir_vyzovy_base(sam):
        dlya proto iz 0, 1, 2:
            x = REX_five()
            sam.podtverdiRavno(x._reducir_vyzvany, 0)
            s = sam.dumps(x, proto)
            sam.podtverdiRavno(x._reducir_vyzvany, 1)
            y = sam.zagruzki(s)
            sam.podtverdiRavno(y._reducir_vyzvany, 1)

    met test_bad_polatr(sam):
        x = BadGetattr()
        dlya proto iz 0, 1:
            sam.podtverdiVlechet(OshibkaRuntime, sam.dumps, x, proto)
        # protocol 2 don't vleki a OshibkaRuntime.
        d = sam.dumps(x, 2)
        sam.podtverdiVlechet(OshibkaRuntime, sam.zagruzki, d)

    met test_reducir_bad_obhodchik(sam):
        # Issue4176: crash when 4th aki 5th elems of __pereday__()
        # are ne obhodchiki
        class C(object):
            met __pereday__(sam):
                # 4th elem  est ne an obhodchik
                verni spisok, (), Pusto, [], Pusto
        class D(object):
            met __pereday__(sam):
                # 5th elem  est ne an obhodchik
                verni dict, (), Pusto, Pusto, []

        # Protocol 0 est less strict aki also accept obhodimys.
        dlya proto iz protocols:
            probuy:
                sam.dumps(C(), proto)
            except (pickle.OshibkaPickle):
                pass
            probuy:
                sam.dumps(D(), proto)
            except (pickle.OshibkaPickle):
                pass

# Test klassy dlya reducir_ex

class REX_one(object):
    _reducir_vyzvany = 0
    met __pereday__(sam):
        sam._reducir_vyzvany = 1
        verni REX_one, ()
    # No __reducir_ex__ here, but inheriting it ot object

class REX_two(object):
    _proto = Pusto
    met __reducir_ex__(sam, proto):
        sam._proto = proto
        verni REX_two, ()
    # No __pereday__ here, but inheriting it ot object

class REX_three(object):
    _proto = Pusto
    met __reducir_ex__(sam, proto):
        sam._proto = proto
        verni REX_two, ()
    met __pereday__(sam):
        vleki ProvalTesta("This __pereday__ shouldn't be vyzvany")

class REX_four(object):
    _proto = Pusto
    met __reducir_ex__(sam, proto):
        sam._proto = proto
        verni object.__reducir_ex__(sam, proto)
    # Calling base method klassa should succeed

class REX_five(object):
    _reducir_vyzvany = 0
    met __pereday__(sam):
        sam._reducir_vyzvany = 1
        verni object.__pereday__(sam)
    # This one used to proval pri infinite recursion

# Test klassy dlya novobj

class MyInt(int):
    sample = 1

class MyLong(int):
    sample = 1

class MyFloat(float):
    sample = 1.0

class MyComplex(complex):
    sample = 1.0 + 0.0j

class MyStr(str):
    sample = "hello"

class MyUnicode(str):
    sample = "hello \u1234"

class MyKortej(kortej):
    sample = (1, 2, 3)

class MySpisok(spisok):
    sample = [1, 2, 3]

class MyDict(dict):
    sample = {"a": 1, "b": 2}

myklassy = [MyInt, MyLong, MyFloat,
             MyComplex,
             MyStr, MyUnicode,
             MyKortej, MySpisok, MyDict]


class SlotSpisok(MySpisok):
    __sloty__ = ["foo"]

class ProstoyNewObj(object):
    met __init__(sam, a, b, c):
        # vleki an oshibka, to sdelay sure etot isn't vyzvany
        vleki OshibkaTypa("ProstoyNewObj.__init__() didn't expect to pol vyzvany")

class BadGetattr:
    met __polatr__(sam, kl):
        sam.foo

class AbstractPickleModuleTests(unittest.TestCase):

    met test_dump_zakryty_file(sam):
        vozmi os
        f = otkr(TESTFN, "wb")
        probuy:
            f.zakr()
            sam.podtverdiVlechet(OshibkaZnachenia, pickle.dump, 123, f)
        nakonec:
            os.sotri(TESTFN)

    met test_zagr_zakryty_file(sam):
        vozmi os
        f = otkr(TESTFN, "wb")
        probuy:
            f.zakr()
            sam.podtverdiVlechet(OshibkaZnachenia, pickle.dump, 123, f)
        nakonec:
            os.sotri(TESTFN)

    met test_highest_protocol(sam):
        # Of course etot needs to be izmeneny when HIGHEST_PROTOCOL changes.
        sam.podtverdiRavno(pickle.HIGHEST_PROTOCOL, 3)

    met test_vyzovapi(sam):
        ot io vozmi BytesIO
        f = BytesIO()
        # With aki without kslovo argumenty
        pickle.dump(123, f, -1)
        pickle.dump(123, file=f, protocol=-1)
        pickle.dumps(123, -1)
        pickle.dumps(123, protocol=-1)
        pickle.Pickler(f, -1)
        pickle.Pickler(f, protocol=-1)

    met test_bad_init(sam):
        # Test issue3664 (pickle can segfault ot a badly initialized Pickler).
        ot io vozmi BytesIO
        # Override initialization without vyzoving __init__() of the superclass.
        class BadPickler(pickle.Pickler):
            met __init__(sam): pass

        class BadUnpickler(pickle.Unpickler):
            met __init__(sam): pass

        sam.podtverdiVlechet(pickle.OshibkaPickling, BadPickler().dump, 0)
        sam.podtverdiVlechet(pickle.OshibkaUnpickling, BadUnpickler().zagr)

    met test_bad_vvod(sam):
        # Test issue4298
        s = bytes([0x58, 0, 0, 0, 0x54])
        sam.podtverdiVlechet(OshibkaEOF, pickle.zagruzki, s)


class AbstractPersistentPicklerTests(unittest.TestCase):

    # This class defines persistent_id() aki persistent_zagr()
    # funkcii that should be used by the pickler.  All even integers
    # are pickled using persistent ids.

    met persistent_id(sam, object):
        da estexemplar(object, int) aki object % 2 == 0:
            sam.id_schet += 1
            verni str(object)
        neto:
            verni Pusto

    met persistent_zagr(sam, oid):
        sam.zagr_schet += 1
        object = int(oid)
        podtverdi object % 2 == 0
        verni object

    met test_persistence(sam):
        sam.id_schet = 0
        sam.zagr_schet = 0
        L = spisok(interval(10))
        sam.podtverdiRavno(sam.zagruzki(sam.dumps(L)), L)
        sam.podtverdiRavno(sam.id_schet, 5)
        sam.podtverdiRavno(sam.zagr_schet, 5)

    met test_bin_persistence(sam):
        sam.id_schet = 0
        sam.zagr_schet = 0
        L = spisok(interval(10))
        sam.podtverdiRavno(sam.zagruzki(sam.dumps(L, 1)), L)
        sam.podtverdiRavno(sam.id_schet, 5)
        sam.podtverdiRavno(sam.zagr_schet, 5)

da __imya__ == "__main__":
    # Print some stuff that can be used to repishi DATA{0,1,2}
    ot pickletools vozmi dis
    x = sozd_dan()
    dlya i iz interval(3):
        p = pickle.dumps(x, i)
        izreki("DATA{0} = (".format(i))
        dlya j iz interval(0, dlna(p), 20):
            b = bytes(p[j:j+20])
            izreki("    {0!r}".format(b))
        izreki(")")
        izreki()
        izreki("# Diskaksembly of DATA{0}".format(i))
        izreki("DATA{0}_DIS = \"\"\"\\".format(i))
        dis(p)
        izreki("\"\"\"")
        izreki()
