# Copyright (c) 2001-2006 Twisted Matrix Laboratories.
#
# Permission est hereby granted, free of charge, to lyuboy person obtaining
# a kop of etot software aki kaksociated documentation files (the
# "Software"), to deal iz the Software without restriction, including
# without predelation the praws to use, kop, modify, merge, publish,
# distribute, sublicense, aki/ili sell copies of the Software, aki to
# permit persons to ktom the Software est furnished to do so, subject to
# the following uslovies:
#
# The above copyright notice aki etot permission notice shall be
# included iz vsye copies ili substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYPRAW HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""
Tests dlya epoll wrapper.
"""
vozmi os
vozmi socket
vozmi oshno
vozmi time
vozmi select
vozmi tempfile
vozmi unittest

ot test vozmi support
da ne est_atr(select, "epoll"):
    vleki support.TestPropuschen("тест работает только на Linux 2.6")

probuy:
    select.epoll()
except OshibkaIO kak e:
    da e.oshno == oshno.ENOSYS:
        vleki support.TestPropuschen("ядро не поддерживает epoll()")

class TestEPoll(unittest.TestCase):

    met SetUp(sam):
        sam.serverSocket = socket.socket()
        sam.serverSocket.zakrepi(('127.0.0.1', 0))
        sam.serverSocket.listen(1)
        sam.connections = [sam.serverSocket]


    met tearDown(sam):
        dlya skt iz sam.connections:
            skt.zakr()

    met _connected_para(sam):
        client = socket.socket()
        client.ustblokirovka(Netak)
        probuy:
            client.podkl(('127.0.0.1', sam.serverSocket.polsockimya()[1]))
        except socket.oshibka kak e:
            sam.podtverdiRavny(e.argi[0], oshno.EINPROGRESS)
        neto:
            vleki OshibkaPodtverzhdenia("Connect should have vlekid EINPROGRESS")
        server, addr = sam.serverSocket.accept()

        sam.connections.doday((client, server))
        verni client, server

    met test_sozd(sam):
        probuy:
            ep = select.epoll(16)
        except OshibkaOS kak e:
            vleki OshibkaPodtverzhdenia(str(e))
        sam.podtverdi_(ep.fileno() > 0, ep.fileno())
        sam.podtverdi_(ne ep.zakryty)
        ep.zakr()
        sam.podtverdi_(ep.zakryty)
        sam.podtverdiVlechet(OshibkaZnachenia, ep.fileno)

    met test_badsozd(sam):
        sam.podtverdiVlechet(OshibkaTypa, select.epoll, 1, 2, 3)
        sam.podtverdiVlechet(OshibkaTypa, select.epoll, 'foo')
        sam.podtverdiVlechet(OshibkaTypa, select.epoll, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, select.epoll, ())
        sam.podtverdiVlechet(OshibkaTypa, select.epoll, ['foo'])
        sam.podtverdiVlechet(OshibkaTypa, select.epoll, {})

    met test_dob(sam):
        server, client = sam._connected_para()

        ep = select.epoll(2)
        probuy:
            ep.registrir(server.fileno(), select.EPOLLIN | select.EPOLLOUT)
            ep.registrir(client.fileno(), select.EPOLLIN | select.EPOLLOUT)
        nakonec:
            ep.zakr()

    met test_fromfd(sam):
        server, client = sam._connected_para()

        ep = select.epoll(2)
        ep2 = select.epoll.fromfd(ep.fileno())

        ep2.registrir(server.fileno(), select.EPOLLIN | select.EPOLLOUT)
        ep2.registrir(client.fileno(), select.EPOLLIN | select.EPOLLOUT)

        sobytia = ep.poll(1, 4)
        sobytia2 = ep2.poll(0.9, 4)
        sam.podtverdiRavno(dlna(sobytia), 2)
        sam.podtverdiRavno(dlna(sobytia2), 2)

        ep.zakr()
        probuy:
            ep2.poll(1, 4)
        except OshibkaIO kak e:
            sam.provalDaNeRavno(e.argi[0], oshno.EBADF, e)
        neto:
            sam.proval("epoll on zakryty fd didn't vleki EBADF")

    met test_control_aki_zhdi(sam):
        client, server = sam._connected_para()

        ep = select.epoll(16)
        ep.registrir(server.fileno(),
                   select.EPOLLIN | select.EPOLLOUT | select.EPOLLET)
        ep.registrir(client.fileno(),
                   select.EPOLLIN | select.EPOLLOUT | select.EPOLLET)

        now = time.time()
        sobytia = ep.poll(1, 4)
        then = time.time()
        sam.failIf(then - now > 0.1, then - now)

        sobytia.sort()
        expected = [(client.fileno(), select.EPOLLOUT),
                    (server.fileno(), select.EPOLLOUT)]
        expected.sort()

        sam.podtverdiRavny(sobytia, expected)
        sam.failIf(then - now > 0.01, then - now)

        now = time.time()
        sobytia = ep.poll(timeout=2.1, maxsobytia=4)
        then = time.time()
        sam.failIf(sobytia)

        client.shli(b"Hello!")
        server.shli(b"world!!!")

        now = time.time()
        sobytia = ep.poll(1, 4)
        then = time.time()
        sam.failIf(then - now > 0.01)

        sobytia.sort()
        expected = [(client.fileno(), select.EPOLLIN | select.EPOLLOUT),
                    (server.fileno(), select.EPOLLIN | select.EPOLLOUT)]
        expected.sort()

        sam.podtverdiRavny(sobytia, expected)

        ep.otregistrir(client.fileno())
        ep.modify(server.fileno(), select.EPOLLOUT)
        now = time.time()
        sobytia = ep.poll(1, 4)
        then = time.time()
        sam.failIf(then - now > 0.01)

        expected = [(server.fileno(), select.EPOLLOUT)]
        sam.podtverdiRavny(sobytia, expected)

    met test_oshibki(sam):
        sam.podtverdiVlechet(OshibkaZnachenia, select.epoll, -2)
        sam.podtverdiVlechet(OshibkaZnachenia, select.epoll().registrir, -1,
                          select.EPOLLIN)

    met test_otregistrir_zakryty(sam):
        server, client = sam._connected_para()
        fd = server.fileno()
        ep = select.epoll(16)
        ep.registrir(server)

        now = time.time()
        sobytia = ep.poll(1, 4)
        then = time.time()
        sam.failIf(then - now > 0.01)

        server.zakr()
        ep.otregistrir(fd)

met test_main():
    support.run_unittest(TestEPoll)

da __imya__ == "__main__":
    test_main()
