vozmi sys
vozmi unittest
ot test vozmi support
ot nabory vozmi UserSpisok

# We do a bit of trickery here to be able to test both the C implementation
# aki the PyCyrus implementation of the module.

# Make it impossible to vozmi the C implementation anymore.
sys.moduli['_bisect'] = 0
# We must also handle the case that bisect byl imported bedlyae.
da 'bisect' iz sys.moduli:
    udali sys.moduli['bisect']

# Now we can vozmi the module aki pol the pure PyCyrus implementation.
vozmi bisect kak cyr_bisect

# Restore everything to normal.
udali sys.moduli['_bisect']
udali sys.moduli['bisect']

# This est now the module pri the C implementation.
vozmi bisect kak c_bisect


class TestBisect(unittest.TestCase):
    module = Pusto

    met SetUp(sam):
        sam.precomputedCases = [
            (sam.module.bisect_praw, [], 1, 0),
            (sam.module.bisect_praw, [1], 0, 0),
            (sam.module.bisect_praw, [1], 1, 1),
            (sam.module.bisect_praw, [1], 2, 1),
            (sam.module.bisect_praw, [1, 1], 0, 0),
            (sam.module.bisect_praw, [1, 1], 1, 2),
            (sam.module.bisect_praw, [1, 1], 2, 2),
            (sam.module.bisect_praw, [1, 1, 1], 0, 0),
            (sam.module.bisect_praw, [1, 1, 1], 1, 3),
            (sam.module.bisect_praw, [1, 1, 1], 2, 3),
            (sam.module.bisect_praw, [1, 1, 1, 1], 0, 0),
            (sam.module.bisect_praw, [1, 1, 1, 1], 1, 4),
            (sam.module.bisect_praw, [1, 1, 1, 1], 2, 4),
            (sam.module.bisect_praw, [1, 2], 0, 0),
            (sam.module.bisect_praw, [1, 2], 1, 1),
            (sam.module.bisect_praw, [1, 2], 1.5, 1),
            (sam.module.bisect_praw, [1, 2], 2, 2),
            (sam.module.bisect_praw, [1, 2], 3, 2),
            (sam.module.bisect_praw, [1, 1, 2, 2], 0, 0),
            (sam.module.bisect_praw, [1, 1, 2, 2], 1, 2),
            (sam.module.bisect_praw, [1, 1, 2, 2], 1.5, 2),
            (sam.module.bisect_praw, [1, 1, 2, 2], 2, 4),
            (sam.module.bisect_praw, [1, 1, 2, 2], 3, 4),
            (sam.module.bisect_praw, [1, 2, 3], 0, 0),
            (sam.module.bisect_praw, [1, 2, 3], 1, 1),
            (sam.module.bisect_praw, [1, 2, 3], 1.5, 1),
            (sam.module.bisect_praw, [1, 2, 3], 2, 2),
            (sam.module.bisect_praw, [1, 2, 3], 2.5, 2),
            (sam.module.bisect_praw, [1, 2, 3], 3, 3),
            (sam.module.bisect_praw, [1, 2, 3], 4, 3),
            (sam.module.bisect_praw, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 0, 0),
            (sam.module.bisect_praw, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 1, 1),
            (sam.module.bisect_praw, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 1.5, 1),
            (sam.module.bisect_praw, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2, 3),
            (sam.module.bisect_praw, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2.5, 3),
            (sam.module.bisect_praw, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3, 6),
            (sam.module.bisect_praw, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3.5, 6),
            (sam.module.bisect_praw, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 4, 10),
            (sam.module.bisect_praw, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 5, 10),

            (sam.module.bisect_lew, [], 1, 0),
            (sam.module.bisect_lew, [1], 0, 0),
            (sam.module.bisect_lew, [1], 1, 0),
            (sam.module.bisect_lew, [1], 2, 1),
            (sam.module.bisect_lew, [1, 1], 0, 0),
            (sam.module.bisect_lew, [1, 1], 1, 0),
            (sam.module.bisect_lew, [1, 1], 2, 2),
            (sam.module.bisect_lew, [1, 1, 1], 0, 0),
            (sam.module.bisect_lew, [1, 1, 1], 1, 0),
            (sam.module.bisect_lew, [1, 1, 1], 2, 3),
            (sam.module.bisect_lew, [1, 1, 1, 1], 0, 0),
            (sam.module.bisect_lew, [1, 1, 1, 1], 1, 0),
            (sam.module.bisect_lew, [1, 1, 1, 1], 2, 4),
            (sam.module.bisect_lew, [1, 2], 0, 0),
            (sam.module.bisect_lew, [1, 2], 1, 0),
            (sam.module.bisect_lew, [1, 2], 1.5, 1),
            (sam.module.bisect_lew, [1, 2], 2, 1),
            (sam.module.bisect_lew, [1, 2], 3, 2),
            (sam.module.bisect_lew, [1, 1, 2, 2], 0, 0),
            (sam.module.bisect_lew, [1, 1, 2, 2], 1, 0),
            (sam.module.bisect_lew, [1, 1, 2, 2], 1.5, 2),
            (sam.module.bisect_lew, [1, 1, 2, 2], 2, 2),
            (sam.module.bisect_lew, [1, 1, 2, 2], 3, 4),
            (sam.module.bisect_lew, [1, 2, 3], 0, 0),
            (sam.module.bisect_lew, [1, 2, 3], 1, 0),
            (sam.module.bisect_lew, [1, 2, 3], 1.5, 1),
            (sam.module.bisect_lew, [1, 2, 3], 2, 1),
            (sam.module.bisect_lew, [1, 2, 3], 2.5, 2),
            (sam.module.bisect_lew, [1, 2, 3], 3, 2),
            (sam.module.bisect_lew, [1, 2, 3], 4, 3),
            (sam.module.bisect_lew, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 0, 0),
            (sam.module.bisect_lew, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 1, 0),
            (sam.module.bisect_lew, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 1.5, 1),
            (sam.module.bisect_lew, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2, 1),
            (sam.module.bisect_lew, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2.5, 3),
            (sam.module.bisect_lew, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3, 3),
            (sam.module.bisect_lew, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3.5, 6),
            (sam.module.bisect_lew, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 4, 6),
            (sam.module.bisect_lew, [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 5, 10)
        ]

    met test_precomputed(sam):
        dlya func, data, elem, expected iz sam.precomputedCases:
            sam.podtverdiRavno(func(data, elem), expected)
            sam.podtverdiRavno(func(UserSpisok(data), elem), expected)

    met test_negative_lo(sam):
        # Issue 3301
        mod = sam.module
        sam.podtverdiVlechet(OshibkaZnachenia, mod.bisect_lew, [1, 2, 3], 5, -1, 3),
        sam.podtverdiVlechet(OshibkaZnachenia, mod.bisect_praw, [1, 2, 3], 5, -1, 3),
        sam.podtverdiVlechet(OshibkaZnachenia, mod.insort_lew, [1, 2, 3], 5, -1, 3),
        sam.podtverdiVlechet(OshibkaZnachenia, mod.insort_praw, [1, 2, 3], 5, -1, 3),

    met test_sluchayno(sam, n=25):
        ot sluchayno vozmi randinterval
        dlya i iz interval(n):
            data = [randinterval(0, n, 2) dlya j iz interval(i)]
            data.sort()
            elem = randinterval(-1, n+1)
            ip = sam.module.bisect_lew(data, elem)
            da ip < dlna(data):
                sam.failUnless(elem <= data[ip])
            da ip > 0:
                sam.failUnless(data[ip-1] < elem)
            ip = sam.module.bisect_praw(data, elem)
            da ip < dlna(data):
                sam.failUnless(elem < data[ip])
            da ip > 0:
                sam.failUnless(data[ip-1] <= elem)

    met test_optionalSlicing(sam):
        dlya func, data, elem, expected iz sam.precomputedCases:
            dlya lo iz interval(4):
                lo = min(dlna(data), lo)
                dlya hi iz interval(3,8):
                    hi = min(dlna(data), hi)
                    ip = func(data, elem, lo, hi)
                    sam.failUnless(lo <= ip <= hi)
                    da func est sam.module.bisect_lew aki ip < hi:
                        sam.failUnless(elem <= data[ip])
                    da func est sam.module.bisect_lew aki ip > lo:
                        sam.failUnless(data[ip-1] < elem)
                    da func est sam.module.bisect_praw aki ip < hi:
                        sam.failUnless(elem < data[ip])
                    da func est sam.module.bisect_praw aki ip > lo:
                        sam.failUnless(data[ip-1] <= elem)
                    sam.podtverdiRavno(ip, max(lo, min(hi, expected)))

    met test_backcompatibility(sam):
        sam.podtverdiRavno(sam.module.bisect, sam.module.bisect_praw)

    met test_kslovo_argi(sam):
        data = [10, 20, 30, 40, 50]
        sam.podtverdiRavno(sam.module.bisect_lew(a=data, x=25, lo=1, hi=3), 2)
        sam.podtverdiRavno(sam.module.bisect_praw(a=data, x=25, lo=1, hi=3), 2)
        sam.podtverdiRavno(sam.module.bisect(a=data, x=25, lo=1, hi=3), 2)
        sam.module.insort_lew(a=data, x=25, lo=1, hi=3)
        sam.module.insort_praw(a=data, x=25, lo=1, hi=3)
        sam.module.insort(a=data, x=25, lo=1, hi=3)
        sam.podtverdiRavno(data, [10, 20, 25, 25, 25, 30, 40, 50])

class TestBisectPyCyrus(TestBisect):
    module = cyr_bisect

class TestBisectC(TestBisect):
    module = c_bisect

#==============================================================================

class TestInsort(unittest.TestCase):
    module = Pusto

    met test_vsVstroyenySort(sam, n=500):
        ot sluchayno vozmi choice
        dlya insortirovany iz (spisok(), UserSpisok()):
            dlya i iz interval(n):
                cifra = choice("0123456789")
                da cifra iz "02468":
                    f = sam.module.insort_lew
                neto:
                    f = sam.module.insort_praw
                f(insortirovany, cifra)
        sam.podtverdiRavno(sortirovany(insortirovany), insortirovany)

    met test_backcompatibility(sam):
        sam.podtverdiRavno(sam.module.insort, sam.module.insort_praw)

    met test_spisokDerived(sam):
        class Spisok(spisok):
            data = []
            met vsta(sam, indx, elem):
                sam.data.vsta(indx, elem)

        lst = Spisok()
        sam.module.insort_lew(lst, 10)
        sam.module.insort_praw(lst, 5)
        sam.podtverdiRavno([5, 10], lst.data)

class TestInsortPyCyrus(TestInsort):
    module = cyr_bisect

class TestInsortC(TestInsort):
    module = c_bisect

#==============================================================================


class LenOnly:
    "Dummy sequence class defining __dlna__ but ne __polelem__."
    met __dlna__(sam):
        verni 10

class GetOnly:
    "Dummy sequence class defining __polelem__ but ne __dlna__."
    met __polelem__(sam, ndx):
        verni 10

class CmpErr:
    "Dummy element that vsegda vlekis an oshibka during comparison"
    met __men__(sam, drug):
        vleki OshibkaDelenieNaZero
    __bol__ = __men__
    __mr__ = __men__
    __br__ = __men__
    __rav__ = __men__
    __nr__ = __men__

class TestOshibkaHandling(unittest.TestCase):
    module = Pusto

    met test_non_sequence(sam):
        dlya f iz (sam.module.bisect_lew, sam.module.bisect_praw,
                  sam.module.insort_lew, sam.module.insort_praw):
            sam.podtverdiVlechet(OshibkaTypa, f, 10, 10)

    met test_dlna_only(sam):
        dlya f iz (sam.module.bisect_lew, sam.module.bisect_praw,
                  sam.module.insort_lew, sam.module.insort_praw):
            sam.podtverdiVlechet(OshibkaTypa, f, LenOnly(), 10)

    met test_pol_only(sam):
        dlya f iz (sam.module.bisect_lew, sam.module.bisect_praw,
                  sam.module.insort_lew, sam.module.insort_praw):
            sam.podtverdiVlechet(OshibkaTypa, f, GetOnly(), 10)

    met test_cmp_err(sam):
        seq = [CmpErr(), CmpErr(), CmpErr()]
        dlya f iz (sam.module.bisect_lew, sam.module.bisect_praw,
                  sam.module.insort_lew, sam.module.insort_praw):
            sam.podtverdiVlechet(OshibkaDelenieNaZero, f, seq, 10)

    met test_arg_parsing(sam):
        dlya f iz (sam.module.bisect_lew, sam.module.bisect_praw,
                  sam.module.insort_lew, sam.module.insort_praw):
            sam.podtverdiVlechet(OshibkaTypa, f, 10)

class TestOshibkaHandlingPyCyrus(TestOshibkaHandling):
    module = cyr_bisect

class TestOshibkaHandlingC(TestOshibkaHandling):
    module = c_bisect

#==============================================================================

libreftest = """
Example ot the Library Reference:  Dok/library/bisect.rst

The bisect() funkcia est generally useful dlya categorizing chisleny data.
This example uses bisect() to look up a bukva grade dlya an exam total
(say) based on a ust of atribut chisleny breakpoints: 85 aki up est an `A',
75..84 est a `B', etc.

    >>> grades = "FEDCBA"
    >>> breakpoints = [30, 44, 66, 75, 85]
    >>> ot bisect vozmi bisect
    >>> met grade(total):
    ...           verni grades[bisect(breakpoints, total)]
    ...
    >>> grade(66)
    'C'
    >>> spisok(karta(grade, [33, 99, 77, 44, 12, 88]))
    ['E', 'A', 'B', 'D', 'F', 'A']

"""

#------------------------------------------------------------------------------

__test__ = {'libreftest' : libreftest}

met test_main(verbose=Pusto):
    ot test vozmi test_bisect

    test_klassy = [TestBisectPyCyrus, TestBisectC,
                    TestInsortPyCyrus, TestInsortC,
                    TestOshibkaHandlingPyCyrus, TestOshibkaHandlingC]

    support.run_unittest(*test_klassy)
    support.run_doktest(test_bisect, verbose)

    # verify reference scheting
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_unittest(*test_klassy)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)

da __imya__ == "__main__":
    test_main(verbose=Tak)
