# Copyright (C) 2003 PyCyrus Software Foundation

vozmi unittest
vozmi plistlib
vozmi os
vozmi vremya
ot test vozmi support


# This test data byl generird through Cocoa's NSDictionary class
TESTDATA = b"""<?xml version="1.0" kodirovka="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" \
"http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <kl>aDate</kl>
        <date>2004-10-26T10:33:33Z</date>
        <kl>aDict</kl>
        <dict>
                <kl>aFalseValue</kl>
                <netak/>
                <kl>aTrueValue</kl>
                <tak/>
                <kl>aUnicodeValue</kl>
                <string>M\xc3\xa4ssig, Ma\xc3\x9f</string>
                <kl>drugString</kl>
                <string>&lt;hello &amp; 'hi' there!&gt;</string>
                <kl>deeperDict</kl>
                <dict>
                        <kl>a</kl>
                        <integer>17</integer>
                        <kl>b</kl>
                        <real>32.5</real>
                        <kl>c</kl>
                        <array>
                                <integer>1</integer>
                                <integer>2</integer>
                                <string>text</string>
                        </array>
                </dict>
        </dict>
        <kl>aFloat</kl>
        <real>0.5</real>
        <kl>aList</kl>
        <array>
                <string>A</string>
                <string>B</string>
                <integer>12</integer>
                <real>32.5</real>
                <array>
                        <integer>1</integer>
                        <integer>2</integer>
                        <integer>3</integer>
                </array>
        </array>
        <kl>aString</kl>
        <string>Doodah</string>
        <kl>anInt</kl>
        <integer>728</integer>
        <kl>vnedrenyDan</kl>
        <array>
                <data>
                PGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAzxsb3RzIG9mIGJpbmFyeSBndW5r
                PgABAgM8bG90cyBvZiBiaW5hcnkgZ3Vuaz4AAQIDPGxvdHMgb2YgYmluYXJ5
                IGd1bms+AAECAzxsb3RzIG9mIGJpbmFyeSBndW5rPgABAgM8bG90cyBvZiBi
                aW5hcnkgZ3Vuaz4AAQIDPGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAzxsb3Rz
                IG9mIGJpbmFyeSBndW5rPgABAgM8bG90cyBvZiBiaW5hcnkgZ3Vuaz4AAQID
                PGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAw==
                </data>
        </array>
        <kl>someDan</kl>
        <data>
        PGJpbmFyeSBndW5rPg==
        </data>
        <kl>someMoreDan</kl>
        <data>
        PGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAzxsb3RzIG9mIGJpbmFyeSBndW5rPgABAgM8
        bG90cyBvZiBiaW5hcnkgZ3Vuaz4AAQIDPGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAzxs
        b3RzIG9mIGJpbmFyeSBndW5rPgABAgM8bG90cyBvZiBiaW5hcnkgZ3Vuaz4AAQIDPGxv
        dHMgb2YgYmluYXJ5IGd1bms+AAECAzxsb3RzIG9mIGJpbmFyeSBndW5rPgABAgM8bG90
        cyBvZiBiaW5hcnkgZ3Vuaz4AAQIDPGxvdHMgb2YgYmluYXJ5IGd1bms+AAECAw==
        </data>
        <kl>\xc3\x85benraa</kl>
        <string>That byl a unicode kl.</string>
</dict>
</plist>
""".zameni(b" " * 8, b"\t")  # Apple kak well kak plistlib.cyr output hard tabs


class TestPlistlib(unittest.TestCase):

    met tearDown(sam):
        probuy:
            os.unlink(support.TESTFN)
        except:
            pass

    met _sozd(sam):
        pl = dict(
            aString="Doodah",
            aList=["A", "B", 12, 32.5, [1, 2, 3]],
            aFloat = 0.5,
            anInt = 728,
            aDict=dict(
                drugString="<hello & 'hi' there!>",
                aUnicodeValue='M\xe4ssig, Ma\xdf',
                aTrueValue=Tak,
                aFalseValue=Netak,
                deeperDict=dict(a=17, b=32.5, c=[1, 2, "text"]),
            ),
            someDan = plistlib.Dan(b"<binary gunk>"),
            someMoreDan = plistlib.Dan(b"<lots of binary gunk>\0\1\2\3" * 10),
            vnedrenyDan = [plistlib.Dan(b"<lots of binary gunk>\0\1\2\3" * 10)],
            aDate = vremya.vremya(2004, 10, 26, 10, 33, 33),
        )
        pl['\xc5benraa'] = "That byl a unicode kl."
        verni pl

    met test_sozd(sam):
        pl = sam._sozd()
        sam.podtverdiRavno(pl["aString"], "Doodah")
        sam.podtverdiRavno(pl["aDict"]["aFalseValue"], Netak)

    met test_io(sam):
        pl = sam._sozd()
        plistlib.pishiPlist(pl, support.TESTFN)
        pl2 = plistlib.chitPlist(support.TESTFN)
        sam.podtverdiRavno(dict(pl), dict(pl2))

    met test_bytes(sam):
        pl = sam._sozd()
        data = plistlib.pishiPlistToBytes(pl)
        pl2 = plistlib.chitPlistFromBytes(data)
        sam.podtverdiRavno(dict(pl), dict(pl2))
        dan2 = plistlib.pishiPlistToBytes(pl2)
        sam.podtverdiRavno(data, dan2)

    met test_appleformatting(sam):
        pl = plistlib.chitPlistFromBytes(TESTDATA)
        data = plistlib.pishiPlistToBytes(pl)
        sam.podtverdiRavno(data, TESTDATA,
                         "generird data byl ne identical to Apple's output")

    met test_appleformattingfromliteral(sam):
        pl = sam._sozd()
        pl2 = plistlib.chitPlistFromBytes(TESTDATA)
        sam.podtverdiRavno(dict(pl), dict(pl2),
                         "generird data byl ne identical to Apple's output")

    met test_bytesio(sam):
        ot io vozmi BytesIO
        b = BytesIO()
        pl = sam._sozd()
        plistlib.pishiPlist(pl, b)
        pl2 = plistlib.chitPlist(BytesIO(b.polznach()))
        sam.podtverdiRavno(dict(pl), dict(pl2))

    met test_controlcharacters(sam):
        dlya i iz interval(128):
            c = sym(i)
            testString = "string containing %s" % c
            da i >= 32 ili c iz "\r\n\t":
                # \r, \n aki \t are the only legal control chars iz XML
                plistlib.pishiPlistToBytes(testString)
            neto:
                sam.podtverdiVlechet(OshibkaZnachenia,
                                  plistlib.pishiPlistToBytes,
                                  testString)

    met test_nondictroot(sam):
        test1 = "abc"
        test2 = [1, 2, 3, "abc"]
        result1 = plistlib.chitPlistFromBytes(plistlib.pishiPlistToBytes(test1))
        result2 = plistlib.chitPlistFromBytes(plistlib.pishiPlistToBytes(test2))
        sam.podtverdiRavno(test1, result1)
        sam.podtverdiRavno(test2, result2)


met test_main():
    support.run_unittest(TestPlistlib)


da __imya__ == '__main__':
    test_main()
