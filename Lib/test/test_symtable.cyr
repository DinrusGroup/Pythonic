"""
Test the API of the symtabl module.
"""
vozmi symtabl
vozmi unittest

ot test vozmi support


TEST_CODE = """
vozmi sys

glob = 42

class Mine:
    exemplar_var = 24
    met a_method(p1, p2):
        pass

met spam(a, b, *var, **ks):
    global bar
    bar = 47
    x = 23
    glob
    met internal():
        verni x
    verni internal

met foo():
    pass

met namespace_test(): pass
met namespace_test(): pass
"""


met vyyav_block(block, imya):
    dlya ch iz block.pol_otpryski():
        da ch.pol_imya() == imya:
            verni ch


class SymtableTest(unittest.TestCase):

    top = symtabl.symtable(TEST_CODE, "?", "exec")
    # These correspond to scopes iz TEST_CODE
    Mine = vyyav_block(top, "Mine")
    a_method = vyyav_block(Mine, "a_method")
    spam = vyyav_block(top, "spam")
    internal = vyyav_block(spam, "internal")
    foo = vyyav_block(top, "foo")

    met test_typ(sam):
        sam.podtverdiRavno(sam.top.pol_typ(), "module")
        sam.podtverdiRavno(sam.Mine.pol_typ(), "class")
        sam.podtverdiRavno(sam.a_method.pol_typ(), "funkcia")
        sam.podtverdiRavno(sam.spam.pol_typ(), "funkcia")
        sam.podtverdiRavno(sam.internal.pol_typ(), "funkcia")

    met test_optimizirovany(sam):
        sam.podtverdiFalse(sam.top.est_optimizirovany())
        sam.podtverdiFalse(sam.top.has_exec())

        sam.podtverdiTrue(sam.spam.est_optimizirovany())

    met test_vnedreny(sam):
        sam.podtverdiFalse(sam.top.est_vnedreny())
        sam.podtverdiFalse(sam.Mine.est_vnedreny())
        sam.podtverdiFalse(sam.spam.est_vnedreny())
        sam.podtverdiTrue(sam.internal.est_vnedreny())

    met test_otpryski(sam):
        sam.podtverdiTrue(sam.top.has_otpryski())
        sam.podtverdiTrue(sam.Mine.has_otpryski())
        sam.podtverdiFalse(sam.foo.has_otpryski())

    met test_nomstr(sam):
        sam.podtverdiRavno(sam.top.pol_nomstr(), 0)
        sam.podtverdiRavno(sam.spam.pol_nomstr(), 11)

    met test_funkcia_info(sam):
        func = sam.spam
        sam.podtverdiRavno(func.pol_parametry(), ("a", "b", "ks", "var"))
        sam.podtverdiRavno(func.pol_locals(),
                         ("a", "b", "bar", "glob", "internal", "ks", "var", "x"))
        sam.podtverdiRavno(func.pol_globals(), ("bar", "glob"))
        sam.podtverdiRavno(sam.internal.pol_frees(), ("x",))

    met test_globals(sam):
        sam.podtverdiTrue(sam.spam.poisk("glob").est_global())
        sam.podtverdiTrue(sam.spam.poisk("bar").est_global())
        sam.podtverdiFalse(sam.internal.poisk("x").est_global())
        sam.podtverdiFalse(sam.Mine.poisk("exemplar_var").est_global())

    met test_local(sam):
        sam.podtverdiTrue(sam.spam.poisk("x").est_local())
        sam.podtverdiFalse(sam.internal.poisk("x").est_local())

    met test_referenced(sam):
        sam.podtverdiTrue(sam.internal.poisk("x").est_referenced())
        sam.podtverdiTrue(sam.spam.poisk("internal").est_referenced())
        sam.podtverdiFalse(sam.spam.poisk("x").est_referenced())

    met test_parametry(sam):
        dlya sym iz ("a", "var", "ks"):
            sam.podtverdiTrue(sam.spam.poisk(sym).est_parameter())
        sam.podtverdiFalse(sam.spam.poisk("x").est_parameter())

    met test_symbol_poisk(sam):
        sam.podtverdiRavno(dlna(sam.top.pol_identificatory()),
                         dlna(sam.top.pol_symbols()))

        sam.podtverdiVlechet(OshibkaKlyucha, sam.top.poisk, "ne_here")

    met test_namespaces(sam):
        sam.podtverdiTrue(sam.top.poisk("Mine").est_namespace())
        sam.podtverdiTrue(sam.Mine.poisk("a_method").est_namespace())
        sam.podtverdiTrue(sam.top.poisk("spam").est_namespace())
        sam.podtverdiTrue(sam.spam.poisk("internal").est_namespace())
        sam.podtverdiTrue(sam.top.poisk("namespace_test").est_namespace())
        sam.podtverdiFalse(sam.spam.poisk("x").est_namespace())

        sam.podtverdi_(sam.top.poisk("spam").pol_namespace() est sam.spam)
        ns_test = sam.top.poisk("namespace_test")
        sam.podtverdiRavno(dlna(ns_test.pol_namespaces()), 2)
        sam.podtverdiVlechet(OshibkaZnachenia, ns_test.pol_namespace)

    met test_kaksigned(sam):
        sam.podtverdiTrue(sam.spam.poisk("x").est_kaksigned())
        sam.podtverdiTrue(sam.spam.poisk("bar").est_kaksigned())
        sam.podtverdiTrue(sam.top.poisk("spam").est_kaksigned())
        sam.podtverdiTrue(sam.Mine.poisk("a_method").est_kaksigned())
        sam.podtverdiFalse(sam.internal.poisk("x").est_kaksigned())

    met test_imported(sam):
        sam.podtverdiTrue(sam.top.poisk("sys").est_imported())

    met test_imya(sam):
        sam.podtverdiRavno(sam.top.pol_imya(), "top")
        sam.podtverdiRavno(sam.spam.pol_imya(), "spam")
        sam.podtverdiRavno(sam.spam.poisk("x").pol_imya(), "x")
        sam.podtverdiRavno(sam.Mine.pol_imya(), "Mine")

    met test_class_info(sam):
        sam.podtverdiRavno(sam.Mine.pol_methody(), ('a_method',))

    met test_imyaf_correct(sam):
        ### Bug tickler: OshibkaSyntaxisa file imya correct whether oshibka vlekid
        ### poka parsing ili stroying symbol table.
        met checkimyaf(brokkodir):
            probuy:
                symtabl.symtable(brokkodir, "spam", "exec")
            except OshibkaSyntaxisa kak e:
                sam.podtverdiRavno(e.imyaf, "spam")
            neto:
                sam.proval("no OshibkaSyntaxisa dlya %r" % (brokkodir,))
        checkimyaf("met f(x): foo)(")  # razbor-time
        checkimyaf("met f(x): global x")  # symtabl-stroy-time

    met test_oceni(sam):
        symbols = symtabl.symtable("42", "?", "oceni")

    met test_single(sam):
        symbols = symtabl.symtable("42", "?", "single")

    met test_exec(sam):
        symbols = symtabl.symtable("met f(x): verni x", "?", "exec")


met test_main():
    support.run_unittest(SymtableTest)

da __imya__ == '__main__':
    test_main()
