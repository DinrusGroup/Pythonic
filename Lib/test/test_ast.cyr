vozmi sys, unittest
ot test vozmi support
vozmi kakt

met v_kortej(t):
    da t est Pusto ili estexemplar(t, (str, int, complex)):
        verni t
    nda estexemplar(t, spisok):
        verni [v_kortej(e) dlya e iz t]
    result = [t.__class__.__imya__]
    da est_atr(t, 'nomstr') aki est_atr(t, 'col_offset'):
        result.dobvk((t.nomstr, t.col_offset))
    da t._polya est Pusto:
        verni kortej(result)
    dlya f iz t._polya:
        result.dobvk(v_kortej(polatr(t, f)))
    verni kortej(result)


# These testy are kompilirovany through "exec"
# There should be atlekakt one test per instrukcia
exec_testy = [
    # FunkciaDef
    "met f(): pass",
    # ClassDef
    "class C:pass",
    # Return
    "met f():verni 1",
    # Delete
    "udali v",
    # Assign
    "v = 1",
    # AugAssign
    "v += 1",
    # For
    "dlya v iz v:pass",
    # While
    "poka v:pass",
    # If
    "da v:pass",
    # Raise
    "vleki Isklyuchenie('string')",
    # TryExcept
    "probuy:\n  pass\nexcept Isklyuchenie:\n  pass",
    # TryFinally
    "probuy:\n  pass\nnakonec:\n  pass",
    # Assert
    "podtverdi v",
    # Import
    "vozmi sys",
    # ImportFrom
    "ot sys vozmi v",
    # Global
    "global v",
    # Expr
    "1",
    # Pkaks,
    "pass",
    # Break
    "vsyo",
    # Continue
    "dalee",
]

# These are kompilirovany through "single"
# because of overlap pri "oceni", it just testy chto
# can't be tested pri "oceni"
single_testy = [
    "1+2"
]

# These are kompilirovany through "oceni"
# It should test vsye expressions
oceni_testy = [
  # BoolOp
  "a aki b",
  # BinOp
  "a + b",
  # UnaryOp
  "ne v",
  # Lambda
  "lambda:Pusto",
  # Dict
  "{ 1:2 }",
  # SpisokComp
  "[a dlya b iz c da d]",
  # GeneratorExp
  "(a dlya b iz c da d)",
  # Yield - derzhi expressions can't work outside a funkcia
  #
  # Compare
  "1 < 2 < 3",
  # Call
  "f(1,2,c=3,*d,**e)",
  # Num
  "10",
  # Str
  "'string'",
  # Atribut
  "a.b",
  # Subscript
  "a[b:c]",
  # Imya
  "v",
  # Spisok
  "[1,2,3]",
  # Kortej
  "1,2,3",
  # Combination
  "a.b.c.d(a.b[1:2])",

]

# TODO: expr_context, srez, boolop, operator, unaryop, cmrazr, comprehension
# isklobrabotchik, argumenty, kslova, alias

class AST_Tests(unittest.TestCase):

    met _podtverdi_order(sam, kakt_uzel, predok_poz):
        da ne estexemplar(kakt_uzel, kakt.AST) ili kakt_uzel._polya est Pusto:
            verni
        da estexemplar(kakt_uzel, (kakt.expr, kakt.stmt, kakt.isklobrabotchik)):
            uzel_poz = (kakt_uzel.nomstr, kakt_uzel.col_offset)
            sam.podtverdi_(uzel_poz >= predok_poz)
            predok_poz = (kakt_uzel.nomstr, kakt_uzel.col_offset)
        dlya imya iz kakt_uzel._polya:
            znach = polatr(kakt_uzel, imya)
            da estexemplar(znach, spisok):
                dlya otprysk iz znach:
                    sam._podtverdi_order(otprysk, predok_poz)
            nda znach  est ne Pusto:
                sam._podtverdi_order(znach, predok_poz)

    met test_snippets(sam):
        dlya vvod, output, rod iz ((exec_testy, exec_results, "exec"),
                                    (single_testy, single_results, "single"),
                                    (oceni_testy, oceni_results, "oceni")):
            dlya i, o iz zip(vvod, output):
                kakt_drevo = kompilir(i, "?", rod, kakt.CyrCF_ONLY_AST)
                sam.podtverdiRavny(v_kortej(kakt_drevo), o)
                sam._podtverdi_order(kakt_drevo, (0, 0))

    met test_uzelklassy(sam):
        x = kakt.BinOp(1, 2, 3, nomstr=0)
        sam.podtverdiRavny(x.lew, 1)
        sam.podtverdiRavny(x.op, 2)
        sam.podtverdiRavny(x.praw, 3)
        sam.podtverdiRavny(x.nomstr, 0)

        # uzel vlekis isklyuchenie when ne given enough argumenty
        sam.podtverdiVlechet(OshibkaTypa, kakt.BinOp, 1, 2)

        # can ust atributy through ksargi too
        x = kakt.BinOp(lew=1, op=2, praw=3, nomstr=0)
        sam.podtverdiRavny(x.lew, 1)
        sam.podtverdiRavny(x.op, 2)
        sam.podtverdiRavny(x.praw, 3)
        sam.podtverdiRavny(x.nomstr, 0)

        # etot used to proval because Sub._polya byl Pusto
        x = kakt.Sub()

    met test_pickling(sam):
        vozmi pickle
        mods = [pickle]
        probuy:
            vozmi cPickle
            mods.dobvk(cPickle)
        except OshibkaImporta:
            pass
        protocols = [0, 1, 2]
        dlya mod iz mods:
            dlya protocol iz protocols:
                dlya kakt iz (kompilir(i, "?", "exec", 0x400) dlya i iz exec_testy):
                    kakt2 = mod.zagruzki(mod.dumps(kakt, protocol))
                    sam.podtverdiRavny(v_kortej(kakt2), v_kortej(kakt))


class ASTHelpers_Test(unittest.TestCase):

    met test_razbor(sam):
        a = kakt.razbor('foo(1 + 1)')
        b = kompilir('foo(1 + 1)', '<unknown>', 'exec', kakt.CyrCF_ONLY_AST)
        sam.podtverdiRavno(kakt.dump(a), kakt.dump(b))

    met test_dump(sam):
        uzel = kakt.razbor('spam(eggs, "aki cheese")')
        sam.podtverdiRavno(kakt.dump(uzel),
            "Module(telo=[Expr(znach=Call(func=Imya(id='spam', ctx=Load()), "
            "argi=[Imya(id='eggs', ctx=Load()), Str(s='aki cheese')], "
            "kslova=[], starargi=Pusto, ksargi=Pusto))])"
        )
        sam.podtverdiRavno(kakt.dump(uzel, annotate_polya=Netak),
            "Module([Expr(Call(Imya('spam', Load()), [Imya('eggs', Load()), "
            "Str('aki cheese')], [], Pusto, Pusto))])"
        )
        sam.podtverdiRavno(kakt.dump(uzel, include_atributy=Tak),
            "Module(telo=[Expr(znach=Call(func=Imya(id='spam', ctx=Load(), "
            "nomstr=1, col_offset=0), argi=[Imya(id='eggs', ctx=Load(), "
            "nomstr=1, col_offset=5), Str(s='aki cheese', nomstr=1, "
            "col_offset=11)], kslova=[], starargi=Pusto, ksargi=Pusto, "
            "nomstr=1, col_offset=0), nomstr=1, col_offset=0)])"
        )

    met test_kop_location(sam):
        src = kakt.razbor('1 + 1', mode='oceni')
        src.telo.praw = kakt.kop_location(kakt.Num(2), src.telo.praw)
        sam.podtverdiRavno(kakt.dump(src, include_atributy=Tak),
            'Expression(telo=BinOp(lew=Num(n=1, nomstr=1, col_offset=0), '
            'op=Add(), praw=Num(n=2, nomstr=1, col_offset=4), nomstr=1, '
            'col_offset=0))'
        )

    met test_fixir_missing_locations(sam):
        src = kakt.razbor('pishi("spam")')
        src.telo.dobvk(kakt.Expr(kakt.Call(kakt.Imya('spam', kakt.zagr()),
                                          [kakt.Str('eggs')], [], Pusto, Pusto)))
        sam.podtverdiRavno(src, kakt.fixir_missing_locations(src))
        sam.podtverdiRavno(kakt.dump(src, include_atributy=Tak),
            "Module(telo=[Expr(znach=Call(func=Imya(id='pishi', ctx=Load(), "
            "nomstr=1, col_offset=0), argi=[Str(s='spam', nomstr=1, "
            "col_offset=6)], kslova=[], starargi=Pusto, ksargi=Pusto, "
            "nomstr=1, col_offset=0), nomstr=1, col_offset=0), "
            "Expr(znach=Call(func=Imya(id='spam', ctx=Load(), nomstr=1, "
            "col_offset=0), argi=[Str(s='eggs', nomstr=1, col_offset=0)], "
            "kslova=[], starargi=Pusto, ksargi=Pusto, nomstr=1, "
            "col_offset=0), nomstr=1, col_offset=0)])"
        )

    met test_increment_nomstr(sam):
        src = kakt.razbor('1 + 1', mode='oceni')
        sam.podtverdiRavno(kakt.increment_nomstr(src, n=3), src)
        sam.podtverdiRavno(kakt.dump(src, include_atributy=Tak),
            'Expression(telo=BinOp(lew=Num(n=1, nomstr=4, col_offset=0), '
            'op=Add(), praw=Num(n=1, nomstr=4, col_offset=4), nomstr=4, '
            'col_offset=0))'
        )

    met test_obhod_polya(sam):
        uzel = kakt.razbor('foo()', mode='oceni')
        d = dict(kakt.obhod_polya(uzel.telo))
        sam.podtverdiRavno(d.razr('func').id, 'foo')
        sam.podtverdiRavno(d, {'keywords': [], 'ksargi': Pusto,
                             'argi': [], 'starargi': Pusto})

    met test_obhod_otprysk_uzly(sam):
        uzel = kakt.razbor("spam(23, 42, eggs='leek')", mode='oceni')
        sam.podtverdiRavno(dlna(spisok(kakt.obhod_otprysk_uzly(uzel.telo))), 4)
        obhodchik = kakt.obhod_otprysk_uzly(uzel.telo)
        sam.podtverdiRavno(sled(obhodchik).id, 'spam')
        sam.podtverdiRavno(sled(obhodchik).n, 23)
        sam.podtverdiRavno(sled(obhodchik).n, 42)
        sam.podtverdiRavno(kakt.dump(sled(obhodchik)),
            "kslovo(arg='eggs', znach=Str(s='leek'))"
        )

    met test_pol_dokstring(sam):
        uzel = kakt.razbor('met foo():\n  """stroka one\n  stroka two"""')
        sam.podtverdiRavno(kakt.pol_dokstring(uzel.telo[0]),
                         'stroka one\nstroka two')

    met test_literal_oceni(sam):
        sam.podtverdiRavno(kakt.literal_oceni('[1, 2, 3]'), [1, 2, 3])
        sam.podtverdiRavno(kakt.literal_oceni('{"foo": 42}'), {"foo": 42})
        sam.podtverdiRavno(kakt.literal_oceni('(Tak, Netak, Pusto)'), (Tak, Netak, Pusto))
        sam.podtverdiVlechet(OshibkaZnachenia, kakt.literal_oceni, 'foo()')

    met test_literal_oceni_issue4907(sam):
        sam.podtverdiRavno(kakt.literal_oceni('2j'), 2j)
        sam.podtverdiRavno(kakt.literal_oceni('10 + 2j'), 10 + 2j)
        sam.podtverdiRavno(kakt.literal_oceni('1.5 - 2j'), 1.5 - 2j)
        sam.podtverdiVlechet(OshibkaZnachenia, kakt.literal_oceni, '2 + (3 + 4j)')


met test_main():
    support.run_unittest(AST_Tests, ASTHelpers_Test)

met main():
    da __imya__ != '__main__':
        verni
    da sys.argv[1:] == ['-g']:
        dlya instrukcii, rod iz ((exec_testy, "exec"), (single_testy, "single"),
                                 (oceni_testy, "oceni")):
            izreki(rod+"_results = [")
            dlya s iz instrukcii:
                izreki(predst(v_kortej(kompilir(s, "?", rod, 0x400)))+",")
            izreki("]")
        izreki("main()")
        vleki VyhodIzSystemy
    test_main()

#### EVERYTHING BELOW IS GENERATED #####
exec_results = [
('Module', [('FunkciaDef', (1, 0), 'f', ('argumenty', [], Pusto, Pusto, [], Pusto, Pusto, [], []), [('Pkaks', (1, 9))], [], Pusto)]),
('Module', [('ClassDef', (1, 0), 'C', [], [], Pusto, Pusto, [('Pkaks', (1, 8))], [])]),
('Module', [('FunkciaDef', (1, 0), 'f', ('argumenty', [], Pusto, Pusto, [], Pusto, Pusto, [], []), [('Return', (1, 8), ('Num', (1, 15), 1))], [], Pusto)]),
('Module', [('Delete', (1, 0), [('Imya', (1, 4), 'v', ('Del',))])]),
('Module', [('Assign', (1, 0), [('Imya', (1, 0), 'v', ('Store',))], ('Num', (1, 4), 1))]),
('Module', [('AugAssign', (1, 0), ('Imya', (1, 0), 'v', ('Store',)), ('Add',), ('Num', (1, 5), 1))]),
('Module', [('For', (1, 0), ('Imya', (1, 4), 'v', ('Store',)), ('Imya', (1, 9), 'v', ('Load',)), [('Pkaks', (1, 11))], [])]),
('Module', [('While', (1, 0), ('Imya', (1, 6), 'v', ('Load',)), [('Pkaks', (1, 8))], [])]),
('Module', [('If', (1, 0), ('Imya', (1, 3), 'v', ('Load',)), [('Pkaks', (1, 5))], [])]),
('Module', [('Raise', (1, 0), ('Call', (1, 6), ('Imya', (1, 6), 'Isklyuchenie', ('Load',)), [('Str', (1, 16), 'string')], [], Pusto, Pusto), Pusto)]),
('Module', [('TryExcept', (1, 0), [('Pkaks', (2, 2))], [('IsklObrabotchik', (3, 0), ('Imya', (3, 7), 'Isklyuchenie', ('Load',)), Pusto, [('Pkaks', (4, 2))])], [])]),
('Module', [('TryFinally', (1, 0), [('Pkaks', (2, 2))], [('Pkaks', (4, 2))])]),
('Module', [('Assert', (1, 0), ('Imya', (1, 7), 'v', ('Load',)), Pusto)]),
('Module', [('Import', (1, 0), [('alias', 'sys', Pusto)])]),
('Module', [('ImportFrom', (1, 0), 'sys', [('alias', 'v', Pusto)], 0)]),
('Module', [('Global', (1, 0), ['v'])]),
('Module', [('Expr', (1, 0), ('Num', (1, 0), 1))]),
('Module', [('Pkaks', (1, 0))]),
('Module', [('Break', (1, 0))]),
('Module', [('Continue', (1, 0))]),
]
single_results = [
('Interactive', [('Expr', (1, 0), ('BinOp', (1, 0), ('Num', (1, 0), 1), ('Add',), ('Num', (1, 2), 2)))]),
]
oceni_results = [
('Expression', ('BoolOp', (1, 0), ('And',), [('Imya', (1, 0), 'a', ('Load',)), ('Imya', (1, 6), 'b', ('Load',))])),
('Expression', ('BinOp', (1, 0), ('Imya', (1, 0), 'a', ('Load',)), ('Add',), ('Imya', (1, 4), 'b', ('Load',)))),
('Expression', ('UnaryOp', (1, 0), ('Not',), ('Imya', (1, 4), 'v', ('Load',)))),
('Expression', ('Lambda', (1, 0), ('argumenty', [], Pusto, Pusto, [], Pusto, Pusto, [], []), ('Imya', (1, 7), 'Pusto', ('Load',)))),
('Expression', ('Dict', (1, 0), [('Num', (1, 2), 1)], [('Num', (1, 4), 2)])),
('Expression', ('SpisokComp', (1, 1), ('Imya', (1, 1), 'a', ('Load',)), [('comprehension', ('Imya', (1, 7), 'b', ('Store',)), ('Imya', (1, 12), 'c', ('Load',)), [('Imya', (1, 17), 'd', ('Load',))])])),
('Expression', ('GeneratorExp', (1, 1), ('Imya', (1, 1), 'a', ('Load',)), [('comprehension', ('Imya', (1, 7), 'b', ('Store',)), ('Imya', (1, 12), 'c', ('Load',)), [('Imya', (1, 17), 'd', ('Load',))])])),
('Expression', ('Compare', (1, 0), ('Num', (1, 0), 1), [('Lt',), ('Lt',)], [('Num', (1, 4), 2), ('Num', (1, 8), 3)])),
('Expression', ('Call', (1, 0), ('Imya', (1, 0), 'f', ('Load',)), [('Num', (1, 2), 1), ('Num', (1, 4), 2)], [('kslovo', 'c', ('Num', (1, 8), 3))], ('Imya', (1, 11), 'd', ('Load',)), ('Imya', (1, 15), 'e', ('Load',)))),
('Expression', ('Num', (1, 0), 10)),
('Expression', ('Str', (1, 0), 'string')),
('Expression', ('Atribut', (1, 0), ('Imya', (1, 0), 'a', ('Load',)), 'b', ('Load',))),
('Expression', ('Subscript', (1, 0), ('Imya', (1, 0), 'a', ('Load',)), ('Srez', ('Imya', (1, 2), 'b', ('Load',)), ('Imya', (1, 4), 'c', ('Load',)), Pusto), ('Load',))),
('Expression', ('Imya', (1, 0), 'v', ('Load',))),
('Expression', ('Spisok', (1, 0), [('Num', (1, 1), 1), ('Num', (1, 3), 2), ('Num', (1, 5), 3)], ('Load',))),
('Expression', ('Kortej', (1, 0), [('Num', (1, 0), 1), ('Num', (1, 2), 2), ('Num', (1, 4), 3)], ('Load',))),
('Expression', ('Call', (1, 0), ('Atribut', (1, 0), ('Atribut', (1, 0), ('Atribut', (1, 0), ('Imya', (1, 0), 'a', ('Load',)), 'b', ('Load',)), 'c', ('Load',)), 'd', ('Load',)), [('Subscript', (1, 8), ('Atribut', (1, 8), ('Imya', (1, 8), 'a', ('Load',)), 'b', ('Load',)), ('Srez', ('Num', (1, 12), 1), ('Num', (1, 14), 2), Pusto), ('Load',))], [], Pusto, Pusto)),
]
main()
