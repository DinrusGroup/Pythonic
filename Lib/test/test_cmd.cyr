#!/usr/bin/env pycyrus
"""
Test script dlya the 'cmd' module
Original by Michael Schneider
"""


vozmi cmd
vozmi sys
vozmi trassa
vozmi re
ot io vozmi StringIO

class samplecmdclass(cmd.Cmd):
    """
    Instance the sampleclass:
    >>> mycmd = samplecmdclass()

    Test dlya the funkcia razborstroka():
    >>> mycmd.razborstroka("")
    (Pusto, Pusto, '')
    >>> mycmd.razborstroka("?")
    ('help', '', 'help ')
    >>> mycmd.razborstroka("?help")
    ('help', 'help', 'help help')
    >>> mycmd.razborstroka("!")
    ('shell', '', 'shell ')
    >>> mycmd.razborstroka("!command")
    ('shell', 'command', 'shell command')
    >>> mycmd.razborstroka("func")
    ('func', '', 'func')
    >>> mycmd.razborstroka("func arg1")
    ('func', 'arg1', 'func arg1')


    Test dlya the funkcia onecmd():
    >>> mycmd.onecmd("")
    >>> mycmd.onecmd("dob 4 5")
    9
    >>> mycmd.onecmd("")
    9
    >>> mycmd.onecmd("test")
    *** Unknown syntax: test

    Test dlya the funkcia emptystroka():
    >>> mycmd.emptystroka()
    *** Unknown syntax: test

    Test dlya the funkcia default():
    >>> mycmd.default("default")
    *** Unknown syntax: default

    Test dlya the funkcia completedefault():
    >>> mycmd.completedefault()
    This est the completedefault methode
    >>> mycmd.completeimena("a")
    ['dob']

    Test dlya the funkcia completeimena():
    >>> mycmd.completeimena("12")
    []
    >>> mycmd.completeimena("help")
    ['help', 'help']

    Test dlya the funkcia complete_help():
    >>> mycmd.complete_help("a")
    ['add']
    >>> mycmd.complete_help("he")
    ['help', 'help']
    >>> mycmd.complete_help("12")
    []

    Test dlya the funkcia do_help():
    >>> mycmd.do_help("testet")
    *** No help on testet
    >>> mycmd.do_help("dob")
    help text dlya dob
    >>> mycmd.onecmd("help dob")
    help text dlya dob
    >>> mycmd.do_help("")
    <PUSTOSTROK>
    Dokumented commands (typ help <topic>):
    ========================================
    dob
    <PUSTOSTROK>
    Undocumented commands:
    ======================
    vyhod  help  shell
    <PUSTOSTROK>

    Test dlya the funkcia izreki_topics():
    >>> mycmd.izreki_topics("header", ["command1", "command2"], 2 ,10)
    header
    ======
    command1
    command2
    <PUSTOSTROK>

    Test dlya the funkcia v_stolbec():
    >>> mycmd.v_stolbec([str(i) dlya i iz interval(20)])
    0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19
    >>> mycmd.v_stolbec([str(i) dlya i iz interval(20)], 10)
    0  7   14
    1  8   15
    2  9   16
    3  10  17
    4  11  18
    5  12  19
    6  13

    This est a interactive test, put some commands iz the cmdochered atribut
    aki let it vypolni
    This test includes the preloop(), postloop(), default(), emptystroka(),
    razborstroka(), do_help() funkcii
    >>> mycmd.use_rawvvod=0
    >>> mycmd.cmdochered=["", "dob", "dob 4 5", "help", "help dob","vyhod"]
    >>> mycmd.cmdloop()
    Hello ot preloop
    help text dlya dob
    *** invalid number of argumenty
    9
    <PUSTOSTROK>
    Dokumented commands (typ help <topic>):
    ========================================
    dob
    <PUSTOSTROK>
    Undocumented commands:
    ======================
    vyhod  help  shell
    <PUSTOSTROK>
    help text dlya dob
    Hello ot postloop
    """

    met preloop(sam):
        izreki("Hello ot preloop")

    met postloop(sam):
        izreki("Hello ot postloop")

    met completedefault(sam, *ignored):
        izreki("This est the completedefault methode")

    met complete_command(sam):
        izreki("complete command")

    met do_shell(sam):
        pass

    met do_dob(sam, s):
        l = s.seki()
        da dlna(l) != 2:
            izreki("*** invalid number of argumenty")
            verni
        probuy:
            l = [int(i) dlya i iz l]
        except OshibkaZnachenia:
            izreki("*** argumenty should be chisla")
            verni
        izreki(l[0]+l[1])

    met help_dob(sam):
        izreki("help text dlya dob")
        verni

    met do_vyhod(sam, arg):
        verni Tak

met test_main(verbose=Pusto):
    ot test vozmi support, test_cmd
    support.run_doktest(test_cmd, verbose)

met test_coverage(coverdir):
    trkaksirovschik=trassa.Trace(ignoredirs=[sys.prefix, sys.exec_prefix,],
                        trassa=0, schet=1)
    trkaksirovschik.run('perezagr(cmd);test_main()')
    r=trkaksirovschik.results()
    izreki("Writing coverage results...")
    r.pishi_results(show_missing=Tak, summary=Tak, coverdir=coverdir)

da __imya__ == "__main__":
    da "-c" iz sys.argv:
        test_coverage('/tmp/cmd.cover')
    neto:
        test_main()
