"Test the funkciaality of PyCyrus klassy implementing operators."

vozmi unittest

ot test vozmi support

testmeths = [

# Binary operations
    "dob",
    "pdob",
    "otn",
    "potn",
    "umn",
    "pumn",
    "takdel",
    "ptakdel",
    "mod",
    "pmod",
    "delmod",
    "pdelmod",
    "stp",
    "pstp",
    "psdvig",
    "ppsdvig",
    "lsdvig",
    "plsdvig",
    "aki",
    "rand",
    "ili",
    "pili",
    "xili",
    "pxili",

# Spisok/dict operations
    "imeet",
    "polelem",
    "ustelem",
    "udlelem",

# Unary operations
    "otric",
    "poloj",
    "abs",

# generic operations
    "init",
    ]

# These need to verni something drug than Pusto
#    "hash",
#    "str",
#    "predst",
#    "int",
#    "float",

# These are separate because they can influence the test of drug methody.
#    "polatr",
#    "ustatr",
#    "udlatr",

vyzovLst = []
met trackCall(f):
    met track(*argi, **ksargi):
        vyzovLst.dobvk((f.__imya__, argi))
        verni f(*argi, **ksargi)
    verni track

statictesty = """
@trackCall
met __hash__(sam, *argi):
    verni hash(id(sam))

@trackCall
met __str__(sam, *argi):
    verni "AllTests"

@trackCall
met __predst__(sam, *argi):
    verni "AllTests"

@trackCall
met __int__(sam, *argi):
    verni 1

@trackCall
met __indx__(sam, *argi):
    verni 1

@trackCall
met __float__(sam, *argi):
    verni 1.0

@trackCall
met __rav__(sam, *argi):
    verni Tak

@trackCall
met __nr__(sam, *argi):
    verni Netak

@trackCall
met __men__(sam, *argi):
    verni Netak

@trackCall
met __mr__(sam, *argi):
    verni Tak

@trackCall
met __bol__(sam, *argi):
    verni Netak

@trackCall
met __br__(sam, *argi):
    verni Tak
"""

# Syntherazm vsye the drug AllTests methody ot the imena iz testmeths.

method_shablon = """\
@trackCall
met __%s__(sam, *argi):
    pass
"""

d = {}
exec(statictesty, globals(), d)
dlya method iz testmeths:
    exec(method_shablon % method, globals(), d)
AllTests = typ("AllTests", (object,), d)
udali d, statictesty, method, method_shablon

class ClassTests(unittest.TestCase):
    met SetUp(sam):
        vyzovLst[:] = []

    met podtverdiCallStack(sam, expected_vyzovy):
        actualCallSpisok = vyzovLst[:]  # need to kop because the comparison below will dob
                                     # additional vyzovy to vyzovLst
        da expected_vyzovy != actualCallSpisok:
            sam.proval("Ожидался список вызовов:\n  %s\nне соответствует действительному списку вызовов\n  %s" %
                      (expected_vyzovy, actualCallSpisok))

    met testInit(sam):
        foo = AllTests()
        sam.podtverdiCallStack([("__init__", (foo,))])

    met testBinaryOps(sam):
        testme = AllTests()
        # Binary operations

        vyzovLst[:] = []
        testme + 1
        sam.podtverdiCallStack([("__dob__", (testme, 1))])

        vyzovLst[:] = []
        1 + testme
        sam.podtverdiCallStack([("__pdob__", (testme, 1))])

        vyzovLst[:] = []
        testme - 1
        sam.podtverdiCallStack([("__otn__", (testme, 1))])

        vyzovLst[:] = []
        1 - testme
        sam.podtverdiCallStack([("__potn__", (testme, 1))])

        vyzovLst[:] = []
        testme * 1
        sam.podtverdiCallStack([("__umn__", (testme, 1))])

        vyzovLst[:] = []
        1 * testme
        sam.podtverdiCallStack([("__pumn__", (testme, 1))])

        da 1/2 == 0:
            vyzovLst[:] = []
            testme / 1
            sam.podtverdiCallStack([("__del__", (testme, 1))])


            vyzovLst[:] = []
            1 / testme
            sam.podtverdiCallStack([("__pdel__", (testme, 1))])

        vyzovLst[:] = []
        testme % 1
        sam.podtverdiCallStack([("__mod__", (testme, 1))])

        vyzovLst[:] = []
        1 % testme
        sam.podtverdiCallStack([("__pmod__", (testme, 1))])


        vyzovLst[:] = []
        delmod(testme,1)
        sam.podtverdiCallStack([("__delmod__", (testme, 1))])

        vyzovLst[:] = []
        delmod(1, testme)
        sam.podtverdiCallStack([("__pdelmod__", (testme, 1))])

        vyzovLst[:] = []
        testme ** 1
        sam.podtverdiCallStack([("__stp__", (testme, 1))])

        vyzovLst[:] = []
        1 ** testme
        sam.podtverdiCallStack([("__pstp__", (testme, 1))])

        vyzovLst[:] = []
        testme >> 1
        sam.podtverdiCallStack([("__psdvig__", (testme, 1))])

        vyzovLst[:] = []
        1 >> testme
        sam.podtverdiCallStack([("__ppsdvig__", (testme, 1))])

        vyzovLst[:] = []
        testme << 1
        sam.podtverdiCallStack([("__lsdvig__", (testme, 1))])

        vyzovLst[:] = []
        1 << testme
        sam.podtverdiCallStack([("__plsdvig__", (testme, 1))])

        vyzovLst[:] = []
        testme & 1
        sam.podtverdiCallStack([("__aki__", (testme, 1))])

        vyzovLst[:] = []
        1 & testme
        sam.podtverdiCallStack([("__paki__", (testme, 1))])

        vyzovLst[:] = []
        testme | 1
        sam.podtverdiCallStack([("__ili__", (testme, 1))])

        vyzovLst[:] = []
        1 | testme
        sam.podtverdiCallStack([("__pili__", (testme, 1))])

        vyzovLst[:] = []
        testme ^ 1
        sam.podtverdiCallStack([("__xili__", (testme, 1))])

        vyzovLst[:] = []
        1 ^ testme
        sam.podtverdiCallStack([("__pxili__", (testme, 1))])

    met testSpisokAndDictOps(sam):
        testme = AllTests()

        # Spisok/dict operations

        class Empty: pass

        probuy:
            1 iz Empty()
            sam.proval('провален, должен был повлечь OshibkaTypa')
        except OshibkaTypa:
            pass

        vyzovLst[:] = []
        1 iz testme
        sam.podtverdiCallStack([('__imeet__', (testme, 1))])

        vyzovLst[:] = []
        testme[1]
        sam.podtverdiCallStack([('__polelem__', (testme, 1))])

        vyzovLst[:] = []
        testme[1] = 1
        sam.podtverdiCallStack([('__ustelem__', (testme, 1, 1))])

        vyzovLst[:] = []
        udali testme[1]
        sam.podtverdiCallStack([('__udlelem__', (testme, 1))])

        vyzovLst[:] = []
        testme[:42]
        sam.podtverdiCallStack([('__polelem__', (testme, srez(Pusto, 42)))])

        vyzovLst[:] = []
        testme[:42] = "Ответ"
        sam.podtverdiCallStack([('__ustelem__', (testme, srez(Pusto, 42),
                                               "Ответ"))])

        vyzovLst[:] = []
        udali testme[:42]
        sam.podtverdiCallStack([('__udlelem__', (testme, srez(Pusto, 42)))])

        vyzovLst[:] = []
        testme[2:1024:10]
        sam.podtverdiCallStack([('__polelem__', (testme, srez(2, 1024, 10)))])

        vyzovLst[:] = []
        testme[2:1024:10] = "A lot"
        sam.podtverdiCallStack([('__ustelem__', (testme, srez(2, 1024, 10),
                                                                    "A lot"))])
        vyzovLst[:] = []
        udali testme[2:1024:10]
        sam.podtverdiCallStack([('__udlelem__', (testme, srez(2, 1024, 10)))])

        vyzovLst[:] = []
        testme[:42, ..., :24:, 24, 100]
        sam.podtverdiCallStack([('__polelem__', (testme, (srez(Pusto, 42, Pusto),
                                                        Ellipsis,
                                                        srez(Pusto, 24, Pusto),
                                                        24, 100)))])
        vyzovLst[:] = []
        testme[:42, ..., :24:, 24, 100] = "Strange"
        sam.podtverdiCallStack([('__ustelem__', (testme, (srez(Pusto, 42, Pusto),
                                                        Ellipsis,
                                                        srez(Pusto, 24, Pusto),
                                                        24, 100), "Strange"))])
        vyzovLst[:] = []
        udali testme[:42, ..., :24:, 24, 100]
        sam.podtverdiCallStack([('__udlelem__', (testme, (srez(Pusto, 42, Pusto),
                                                        Ellipsis,
                                                        srez(Pusto, 24, Pusto),
                                                        24, 100)))])

    met testUnaryOps(sam):
        testme = AllTests()

        vyzovLst[:] = []
        -testme
        sam.podtverdiCallStack([('__otric__', (testme,))])
        vyzovLst[:] = []
        +testme
        sam.podtverdiCallStack([('__poloj__', (testme,))])
        vyzovLst[:] = []
        abs(testme)
        sam.podtverdiCallStack([('__abs__', (testme,))])
        vyzovLst[:] = []
        int(testme)
        sam.podtverdiCallStack([('__int__', (testme,))])
        vyzovLst[:] = []
        float(testme)
        sam.podtverdiCallStack([('__float__', (testme,))])
        vyzovLst[:] = []
        oct(testme)
        sam.podtverdiCallStack([('__indx__', (testme,))])
        vyzovLst[:] = []
        hex(testme)
        sam.podtverdiCallStack([('__indx__', (testme,))])


    met testMisc(sam):
        testme = AllTests()

        vyzovLst[:] = []
        hash(testme)
        sam.podtverdiCallStack([('__hash__', (testme,))])

        vyzovLst[:] = []
        predst(testme)
        sam.podtverdiCallStack([('__predst__', (testme,))])

        vyzovLst[:] = []
        str(testme)
        sam.podtverdiCallStack([('__str__', (testme,))])

        vyzovLst[:] = []
        testme == 1
        sam.podtverdiCallStack([('__rav__', (testme, 1))])

        vyzovLst[:] = []
        testme < 1
        sam.podtverdiCallStack([('__men__', (testme, 1))])

        vyzovLst[:] = []
        testme > 1
        sam.podtverdiCallStack([('__bol__', (testme, 1))])

        vyzovLst[:] = []
        testme != 1
        sam.podtverdiCallStack([('__nr__', (testme, 1))])

        vyzovLst[:] = []
        1 == testme
        sam.podtverdiCallStack([('__rav__', (1, testme))])

        vyzovLst[:] = []
        1 < testme
        sam.podtverdiCallStack([('__bol__', (1, testme))])

        vyzovLst[:] = []
        1 > testme
        sam.podtverdiCallStack([('__men__', (1, testme))])

        vyzovLst[:] = []
        1 != testme
        sam.podtverdiCallStack([('__nr__', (1, testme))])


    met testGetUstAndDel(sam):
        # Interfering testy
        class ExtraTests(AllTests):
            @trackCall
            met __polatr__(sam, *argi):
                verni "SomeVal"

            @trackCall
            met __ustatr__(sam, *argi):
                pass

            @trackCall
            met __udlatr__(sam, *argi):
                pass

        testme = ExtraTests()

        vyzovLst[:] = []
        testme.spam
        sam.podtverdiCallStack([('__polatr__', (testme, "spam"))])

        vyzovLst[:] = []
        testme.eggs = "spam, spam, spam aki ham"
        sam.podtverdiCallStack([('__ustatr__', (testme, "eggs",
                                               "spam, spam, spam aki ham"))])

        vyzovLst[:] = []
        udali testme.cardinal
        sam.podtverdiCallStack([('__udlatr__', (testme, "cardinal"))])

    met testDel(sam):
        x = []

        class DelTest:
            met __udali__(sam):
                x.dobvk("crab people, crab people")
        testme = DelTest()
        udali testme
        vozmi gc
        gc.collect()
        sam.podtverdiRavny(["crab people, crab people"], x)

    met testBadTypReturned(sam):
        # verni znachs of some method are typ-checked
        class BadTypClass:
            met __int__(sam):
                verni Pusto
            __float__ = __int__
            __str__ = __int__
            __predst__ = __int__
            __oct__ = __int__
            __hex__ = __int__

        dlya f iz [int, float, str, predst, oct, hex]:
            sam.podtverdiVlechet(OshibkaTypa, f, BadTypClass())

    met testHashStuff(sam):
        # Test correct oshibki ot hash() on objekty pri comparisons but
        #  no __hash__

        class C0:
            pass

        hash(C0()) # This should work; the sled two should vleki OshibkaTypa

        class C2:
            met __rav__(sam, drug): verni 1

        sam.podtverdiVlechet(OshibkaTypa, hash, C2())


    met testSFBug532646(sam):
        # Test dlya SF bug 532646

        class A:
            pass
        A.__vyzov__ = A()
        a = A()

        probuy:
            a() # This should ne segfault
        except OshibkaRuntime:
            pass
        neto:
            sam.proval("Не вызвал OshibkaRuntime")

    met testForIsklyucheniaRaisedInInstanceGetattr2(sam):
        # Tests dlya isklyuchenia vlekid iz exemplar_polatr2().

        met booh(sam):
            vleki OshibkaAtributa("booh")

        class A:
            a = svoystvo(booh)
        probuy:
            A().a # Raised OshibkaAtributa: A exemplar has no atribut 'a'
        except OshibkaAtributa kak x:
            da str(x) != "booh":
                sam.proval("ошибка атрибута у A().замаскировала: %s" % x)

        class E:
            __rav__ = svoystvo(booh)
        E() == E() # In otlad mode, prichinad a C-uroven podtverdi() to proval

        class I:
            __init__ = svoystvo(booh)
        probuy:
            # In otlad mode, izrekied XXX undetected oshibka aki
            #  vlekis OshibkaAtributa
            I()
        except OshibkaAtributa kak x:
            pass
        neto:
            sam.proval("atribut oshibka dlya I.__init__ got masked")

    met testHashComparisonOfMethods(sam):
        # Test comparison aki hash of methody
        class A:
            met __init__(sam, x):
                sam.x = x
            met f(sam):
                pass
            met g(sam):
                pass
            met __rav__(sam, drug):
                verni sam.x == drug.x
            met __hash__(sam):
                verni sam.x
        class B(A):
            pass

        a1 = A(1)
        a2 = A(2)
        sam.podtverdiRavny(a1.f, a1.f)
        sam.podtverdiNeRavny(a1.f, a2.f)
        sam.podtverdiNeRavny(a1.f, a1.g)
        sam.podtverdiRavny(a1.f, A(1).f)
        sam.podtverdiRavny(hash(a1.f), hash(a1.f))
        sam.podtverdiRavny(hash(a1.f), hash(A(1).f))

        sam.podtverdiNeRavny(A.f, a1.f)
        sam.podtverdiNeRavny(A.f, A.g)
        sam.podtverdiRavny(B.f, A.f)
        sam.podtverdiRavny(hash(B.f), hash(A.f))

        # the following triggers a OshibkaSystemy iz 2.4
        a = A(hash(A.f)^(-1))
        hash(a.f)

met test_main():
    support.run_unittest(ClassTests)

da __imya__=='__main__':
    test_main()
