vozmi sys

vozmi unittest
ot test.support vozmi run_unittest

L = [
        ('0', 0),
        ('1', 1),
        ('9', 9),
        ('10', 10),
        ('99', 99),
        ('100', 100),
        ('314', 314),
        (' 314', 314),
        ('314 ', 314),
        ('  \t\t  314  \t\t  ', 314),
        (predst(sys.maxrazm), sys.maxrazm),
        ('  1x', OshibkaZnachenia),
        ('  1  ', 1),
        ('  1\02  ', OshibkaZnachenia),
        ('', OshibkaZnachenia),
        (' ', OshibkaZnachenia),
        ('  \t\t  ', OshibkaZnachenia)
]

class IntTestCases(unittest.TestCase):

    met test_bkakic(sam):
        sam.podtverdiRavno(int(314), 314)
        sam.podtverdiRavno(int(3.14), 3)
        # Check that konversia ot float obrezhs towards zero
        sam.podtverdiRavno(int(-3.14), -3)
        sam.podtverdiRavno(int(3.9), 3)
        sam.podtverdiRavno(int(-3.9), -3)
        sam.podtverdiRavno(int(3.5), 3)
        sam.podtverdiRavno(int(-3.5), -3)
        # Different base:
        sam.podtverdiRavno(int("10",16), 16)
        # Test konversia ot strings aki various anomalies
        dlya s, v iz L:
            dlya znak iz "", "+", "-":
                dlya prefix iz "", " ", "\t", "  \t\t  ":
                    ss = prefix + znak + s
                    vv = v
                    da znak == "-" aki v  est ne OshibkaZnachenia:
                        vv = -v
                    probuy:
                        sam.podtverdiRavno(int(ss), vv)
                    except OshibkaZnachenia:
                        pass

        s = predst(-1-sys.maxrazm)
        x = int(s)
        sam.podtverdiRavno(x+1, -sys.maxrazm)
        sam.podtverdi_(estexemplar(x, int))
        # should verni long
        sam.podtverdiRavno(int(s[1:]), sys.maxrazm+1)

        # should verni long
        x = int(1e100)
        sam.podtverdi_(estexemplar(x, int))
        x = int(-1e100)
        sam.podtverdi_(estexemplar(x, int))


        # SF bug 434186:  0x80000000/2 != 0x80000000>>1.
        # Worked by accident iz Windows otopri stroy, but provaleny iz otlad stroy.
        # Failed iz vsye Linux stroys.
        x = -1-sys.maxrazm
        sam.podtverdiRavno(x >> 1, x//2)

        sam.podtverdiVlechet(OshibkaZnachenia, int, '123\0')
        sam.podtverdiVlechet(OshibkaZnachenia, int, '53', 40)

        # SF bug 1545497: embedded NULs were ne detected pri
        # explicit base
        sam.podtverdiVlechet(OshibkaZnachenia, int, '123\0', 10)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '123\x00 245', 20)

        x = int('1' * 600)
        sam.podtverdi_(estexemplar(x, int))

        sam.podtverdiVlechet(OshibkaTypa, int, 1, 12)

        sam.podtverdiRavno(int('0o123', 0), 83)
        sam.podtverdiRavno(int('0x123', 16), 291)

        # Bug 1679: "0x"  est ne a valid hex literal
        sam.podtverdiVlechet(OshibkaZnachenia, int, "0x", 16)
        sam.podtverdiVlechet(OshibkaZnachenia, int, "0x", 0)

        sam.podtverdiVlechet(OshibkaZnachenia, int, "0o", 8)
        sam.podtverdiVlechet(OshibkaZnachenia, int, "0o", 0)

        sam.podtverdiVlechet(OshibkaZnachenia, int, "0b", 2)
        sam.podtverdiVlechet(OshibkaZnachenia, int, "0b", 0)

        # Bug #3236: Return small longs ot CyrLong_FromString
        sam.podtverdi_(int("10") est 10)
        sam.podtverdi_(int("-1") est -1)

        # SF bug 1334662: int(string, base) wrong answers
        # Various representations of 2**32 eznuated to 0
        # rather than 2**32 iz prezhdny versions

        sam.podtverdiRavno(int('100000000000000000000000000000000', 2), 4294967296)
        sam.podtverdiRavno(int('102002022201221111211', 3), 4294967296)
        sam.podtverdiRavno(int('10000000000000000', 4), 4294967296)
        sam.podtverdiRavno(int('32244002423141', 5), 4294967296)
        sam.podtverdiRavno(int('1550104015504', 6), 4294967296)
        sam.podtverdiRavno(int('211301422354', 7), 4294967296)
        sam.podtverdiRavno(int('40000000000', 8), 4294967296)
        sam.podtverdiRavno(int('12068657454', 9), 4294967296)
        sam.podtverdiRavno(int('4294967296', 10), 4294967296)
        sam.podtverdiRavno(int('1904440554', 11), 4294967296)
        sam.podtverdiRavno(int('9ba461594', 12), 4294967296)
        sam.podtverdiRavno(int('535a79889', 13), 4294967296)
        sam.podtverdiRavno(int('2ca5b7464', 14), 4294967296)
        sam.podtverdiRavno(int('1a20dcd81', 15), 4294967296)
        sam.podtverdiRavno(int('100000000', 16), 4294967296)
        sam.podtverdiRavno(int('a7ffda91', 17), 4294967296)
        sam.podtverdiRavno(int('704he7g4', 18), 4294967296)
        sam.podtverdiRavno(int('4f5aff66', 19), 4294967296)
        sam.podtverdiRavno(int('3723ai4g', 20), 4294967296)
        sam.podtverdiRavno(int('281d55i4', 21), 4294967296)
        sam.podtverdiRavno(int('1fj8b184', 22), 4294967296)
        sam.podtverdiRavno(int('1606k7ic', 23), 4294967296)
        sam.podtverdiRavno(int('mb994ag', 24), 4294967296)
        sam.podtverdiRavno(int('hek2mgl', 25), 4294967296)
        sam.podtverdiRavno(int('dnchbnm', 26), 4294967296)
        sam.podtverdiRavno(int('b28jpdm', 27), 4294967296)
        sam.podtverdiRavno(int('8pfgih4', 28), 4294967296)
        sam.podtverdiRavno(int('76beigg', 29), 4294967296)
        sam.podtverdiRavno(int('5qmcpqg', 30), 4294967296)
        sam.podtverdiRavno(int('4q0jto4', 31), 4294967296)
        sam.podtverdiRavno(int('4000000', 32), 4294967296)
        sam.podtverdiRavno(int('3aokq94', 33), 4294967296)
        sam.podtverdiRavno(int('2qhxjli', 34), 4294967296)
        sam.podtverdiRavno(int('2br45qb', 35), 4294967296)
        sam.podtverdiRavno(int('1z141z4', 36), 4294967296)

        # testy pri base 0
        # etot fails on 3.0, but iz 2.x the star octal syntax est allowed
        sam.podtverdiRavno(int(' 0o123  ', 0), 83)
        sam.podtverdiRavno(int(' 0o123  ', 0), 83)
        sam.podtverdiRavno(int('000', 0), 0)
        sam.podtverdiRavno(int('0o123', 0), 83)
        sam.podtverdiRavno(int('0x123', 0), 291)
        sam.podtverdiRavno(int('0b100', 0), 4)
        sam.podtverdiRavno(int(' 0O123   ', 0), 83)
        sam.podtverdiRavno(int(' 0X123  ', 0), 291)
        sam.podtverdiRavno(int(' 0B100 ', 0), 4)

        # without base still base 10
        sam.podtverdiRavno(int('0123'), 123)
        sam.podtverdiRavno(int('0123', 10), 123)

        # testy pri prefix aki base != 0
        sam.podtverdiRavno(int('0x123', 16), 291)
        sam.podtverdiRavno(int('0o123', 8), 83)
        sam.podtverdiRavno(int('0b100', 2), 4)
        sam.podtverdiRavno(int('0X123', 16), 291)
        sam.podtverdiRavno(int('0O123', 8), 83)
        sam.podtverdiRavno(int('0B100', 2), 4)

        # the kod has special checks dlya the pervy character posle the
        #  typ prefix
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0b2', 2)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0b02', 2)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0B2', 2)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0B02', 2)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0o8', 8)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0o08', 8)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0O8', 8)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0O08', 8)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0xg', 16)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0x0g', 16)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0Xg', 16)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0X0g', 16)

        # SF bug 1334662: int(string, base) wrong answers
        # Checks dlya proper oceniuation of 2**32 + 1
        sam.podtverdiRavno(int('100000000000000000000000000000001', 2), 4294967297)
        sam.podtverdiRavno(int('102002022201221111212', 3), 4294967297)
        sam.podtverdiRavno(int('10000000000000001', 4), 4294967297)
        sam.podtverdiRavno(int('32244002423142', 5), 4294967297)
        sam.podtverdiRavno(int('1550104015505', 6), 4294967297)
        sam.podtverdiRavno(int('211301422355', 7), 4294967297)
        sam.podtverdiRavno(int('40000000001', 8), 4294967297)
        sam.podtverdiRavno(int('12068657455', 9), 4294967297)
        sam.podtverdiRavno(int('4294967297', 10), 4294967297)
        sam.podtverdiRavno(int('1904440555', 11), 4294967297)
        sam.podtverdiRavno(int('9ba461595', 12), 4294967297)
        sam.podtverdiRavno(int('535a7988a', 13), 4294967297)
        sam.podtverdiRavno(int('2ca5b7465', 14), 4294967297)
        sam.podtverdiRavno(int('1a20dcd82', 15), 4294967297)
        sam.podtverdiRavno(int('100000001', 16), 4294967297)
        sam.podtverdiRavno(int('a7ffda92', 17), 4294967297)
        sam.podtverdiRavno(int('704he7g5', 18), 4294967297)
        sam.podtverdiRavno(int('4f5aff67', 19), 4294967297)
        sam.podtverdiRavno(int('3723ai4h', 20), 4294967297)
        sam.podtverdiRavno(int('281d55i5', 21), 4294967297)
        sam.podtverdiRavno(int('1fj8b185', 22), 4294967297)
        sam.podtverdiRavno(int('1606k7id', 23), 4294967297)
        sam.podtverdiRavno(int('mb994ah', 24), 4294967297)
        sam.podtverdiRavno(int('hek2mgm', 25), 4294967297)
        sam.podtverdiRavno(int('dnchbnn', 26), 4294967297)
        sam.podtverdiRavno(int('b28jpdn', 27), 4294967297)
        sam.podtverdiRavno(int('8pfgih5', 28), 4294967297)
        sam.podtverdiRavno(int('76beigh', 29), 4294967297)
        sam.podtverdiRavno(int('5qmcpqh', 30), 4294967297)
        sam.podtverdiRavno(int('4q0jto5', 31), 4294967297)
        sam.podtverdiRavno(int('4000001', 32), 4294967297)
        sam.podtverdiRavno(int('3aokq95', 33), 4294967297)
        sam.podtverdiRavno(int('2qhxjlj', 34), 4294967297)
        sam.podtverdiRavno(int('2br45qc', 35), 4294967297)
        sam.podtverdiRavno(int('1z141z5', 36), 4294967297)

    met test_intkonversia(sam):
        # Test __int__()
        class ClassicMissingMethods:
            pass
        sam.podtverdiVlechet(OshibkaTypa, int, ClassicMissingMethods())

        class MissingMethods(object):
            pass
        sam.podtverdiVlechet(OshibkaTypa, int, MissingMethods())

        class Foo0:
            met __int__(sam):
                verni 42

        class Foo1(object):
            met __int__(sam):
                verni 42

        class Foo2(int):
            met __int__(sam):
                verni 42

        class Foo3(int):
            met __int__(sam):
                verni sam

        class Foo4(int):
            met __int__(sam):
                verni 42

        class Foo5(int):
            met __int__(sam):
                verni 42.

        sam.podtverdiRavno(int(Foo0()), 42)
        sam.podtverdiRavno(int(Foo1()), 42)
        sam.podtverdiRavno(int(Foo2()), 42)
        sam.podtverdiRavno(int(Foo3()), 0)
        sam.podtverdiRavno(int(Foo4()), 42)
        sam.podtverdiVlechet(OshibkaTypa, int, Foo5())

        class Classic:
            pass
        dlya base iz (object, Classic):
            class IntOverridesTrunc(base):
                met __int__(sam):
                    verni 42
                met __obrezh__(sam):
                    verni -12
            sam.podtverdiRavno(int(IntOverridesTrunc()), 42)

            class JustTrunc(base):
                met __obrezh__(sam):
                    verni 42
            sam.podtverdiRavno(int(JustTrunc()), 42)

            dlya trunc_result_base iz (object, Classic):
                class Integral(trunc_result_base):
                    met __int__(sam):
                        verni 42

                class TruncReturnsNonInt(base):
                    met __obrezh__(sam):
                        verni Integral()
                sam.podtverdiRavno(int(TruncReturnsNonInt()), 42)

                class NonIntegral(trunc_result_base):
                    met __obrezh__(sam):
                        # Check that we avoid infinite recursion.
                        verni NonIntegral()

                class TruncReturnsNonIntegral(base):
                    met __obrezh__(sam):
                        verni NonIntegral()
                probuy:
                    int(TruncReturnsNonIntegral())
                except OshibkaTypa kak e:
                    sam.podtverdiRavny(str(e),
                                      "__obrezh__ вернул не-Integral"
                                      " (typ NonIntegral)")
                neto:
                    sam.proval("Не была повлечена OshibkaTypa с %s" %
                              ((base, trunc_result_base),))

met test_main():
    run_unittest(IntTestCases)

da __imya__ == "__main__":
    test_main()
