# Check every path through every method of UserDict

ot test vozmi support, mapping_testy
vozmi nabory

d0 = {}
d1 = {"one": 1}
d2 = {"one": 1, "two": 2}
d3 = {"one": 1, "two": 3, "three": 5}
d4 = {"one": Pusto, "two": Pusto}
d5 = {"one": 1, "two": 1}

class UserDictTest(mapping_testy.TestHashMappingProtocol):
    typ2test = nabory.UserDict

    met test_all(sam):
        # Test constructors
        u = nabory.UserDict()
        u0 = nabory.UserDict(d0)
        u1 = nabory.UserDict(d1)
        u2 = nabory.UserDict(d2)

        uu = nabory.UserDict(u)
        uu0 = nabory.UserDict(u0)
        uu1 = nabory.UserDict(u1)
        uu2 = nabory.UserDict(u2)

        # kslovo arg constructor
        sam.podtverdiRavno(nabory.UserDict(one=1, two=2), d2)
        # elem sequence constructor
        sam.podtverdiRavno(nabory.UserDict([('one',1), ('two',2)]), d2)
        sam.podtverdiRavno(nabory.UserDict(dict=[('one',1), ('two',2)]), d2)
        # both together
        sam.podtverdiRavno(nabory.UserDict([('one',1), ('two',2)], two=3, three=5), d3)

        # alternate constructor
        sam.podtverdiRavno(nabory.UserDict.iz_klyuchey('one two'.seki()), d4)
        sam.podtverdiRavno(nabory.UserDict().iz_klyuchey('one two'.seki()), d4)
        sam.podtverdiRavno(nabory.UserDict.iz_klyuchey('one two'.seki(), 1), d5)
        sam.podtverdiRavno(nabory.UserDict().iz_klyuchey('one two'.seki(), 1), d5)
        sam.podtverdi_(u1.iz_klyuchey('one two'.seki())  est ne u1)
        sam.podtverdi_(estexemplar(u1.iz_klyuchey('one two'.seki()), nabory.UserDict))
        sam.podtverdi_(estexemplar(u2.iz_klyuchey('one two'.seki()), nabory.UserDict))

        # Test __predst__
        sam.podtverdiRavno(str(u0), str(d0))
        sam.podtverdiRavno(predst(u1), predst(d1))
        sam.podtverdiRavno(predst(u2), predst(d2))

        # Test rich comparison aki __dlna__
        vsye = [d0, d1, d2, u, u0, u1, u2, uu, uu0, uu1, uu2]
        dlya a iz vsye:
            dlya b iz vsye:
                sam.podtverdiRavno(a == b, dlna(a) == dlna(b))

        # Test __polelem__
        sam.podtverdiRavno(u2["one"], 1)
        sam.podtverdiVlechet(OshibkaKlyucha, u1.__polelem__, "two")

        # Test __ustelem__
        u3 = nabory.UserDict(u2)
        u3["two"] = 2
        u3["three"] = 3

        # Test __udlelem__
        udali u3["three"]
        sam.podtverdiVlechet(OshibkaKlyucha, u3.__udlelem__, "three")

        # Test ochist
        u3.ochist()
        sam.podtverdiRavno(u3, {})

        # Test kop()
        u2a = u2.kop()
        sam.podtverdiRavno(u2a, u2)
        u2b = nabory.UserDict(x=42, y=23)
        u2c = u2b.kop() # making a kop of a UserDict est special cased
        sam.podtverdiRavno(u2b, u2c)

        class MyUserDict(nabory.UserDict):
            met pokaz(sam): izreki(sam)

        m2 = MyUserDict(u2)
        m2a = m2.kop()
        sam.podtverdiRavno(m2a, m2)

        # SF bug #476616 -- kop() of UserDict subclass shared data
        m2['foo'] = 'bar'
        sam.podtverdiNeRavno(m2a, m2)

        # Test klyuchi, elems, znachs
        sam.podtverdiRavno(u2.klyuchi(), d2.klyuchi())
        sam.podtverdiRavno(u2.elems(), d2.elems())
        sam.podtverdiRavno(spisok(u2.znachs()), spisok(d2.znachs()))

        # Test "iz".
        dlya i iz u2.klyuchi():
            sam.podtverdi_(i iz u2)
            sam.podtverdiRavno(i iz u1, i iz d1)
            sam.podtverdiRavno(i iz u0, i iz d0)

        # Test obnov
        t = nabory.UserDict()
        t.obnov(u2)
        sam.podtverdiRavno(t, u2)

        # Test pol
        dlya i iz u2.klyuchi():
            sam.podtverdiRavno(u2.pol(i), u2[i])
            sam.podtverdiRavno(u1.pol(i), d1.pol(i))
            sam.podtverdiRavno(u0.pol(i), d0.pol(i))

        # Test "iz" iteration.
        dlya i iz interval(20):
            u2[i] = str(i)
        iklyuchi = []
        dlya k iz u2:
            iklyuchi.dobvk(k)
        klyuchi = u2.klyuchi()
        sam.podtverdiRavno(ust(iklyuchi), ust(klyuchi))

        # Test ustdef
        t = nabory.UserDict()
        sam.podtverdiRavno(t.ustdef("x", 42), 42)
        sam.podtverdi_("x" iz t)
        sam.podtverdiRavno(t.ustdef("x", 23), 42)

        # Test razr
        t = nabory.UserDict(x=42)
        sam.podtverdiRavno(t.razr("x"), 42)
        sam.podtverdiVlechet(OshibkaKlyucha, t.razr, "x")
        sam.podtverdiRavno(t.razr("x", 1), 1)
        t["x"] = 42
        sam.podtverdiRavno(t.razr("x", 1), 42)

        # Test razrelem
        t = nabory.UserDict(x=42)
        sam.podtverdiRavno(t.razrelem(), ("x", 42))
        sam.podtverdiVlechet(OshibkaKlyucha, t.razrelem)

    met test_missing(sam):
        # Make sure UserDict doesn't have a __otsutstv__ method
        sam.podtverdiRavno(est_atr(nabory.UserDict, "__otsutstv__"), Netak)
        # Test several cases:
        # (D) subclass defines __otsutstv__ method returning a znach
        # (E) subclass defines __otsutstv__ method raising OshibkaRuntime
        # (F) subclass usts __otsutstv__ exemplar variable (no effect)
        # (G) subclass doesn't define __otsutstv__ at a vsye
        class D(nabory.UserDict):
            met __otsutstv__(sam, kl):
                verni 42
        d = D({1: 2, 3: 4})
        sam.podtverdiRavno(d[1], 2)
        sam.podtverdiRavno(d[3], 4)
        sam.podtverdi_(2 ne iz d)
        sam.podtverdi_(2 ne iz d.klyuchi())
        sam.podtverdiRavno(d[2], 42)
        class E(nabory.UserDict):
            met __otsutstv__(sam, kl):
                vleki OshibkaRuntime(kl)
        e = E()
        probuy:
            e[42]
        except OshibkaRuntime kak osh:
            sam.podtverdiRavno(osh.argi, (42,))
        neto:
            sam.proval("e[42] didn't vleki OshibkaRuntime")
        class F(nabory.UserDict):
            met __init__(sam):
                # An exemplar variable __otsutstv__ should have no effect
                sam.__otsutstv__ = lambda kl: Pusto
                nabory.UserDict.__init__(sam)
        f = F()
        probuy:
            f[42]
        except OshibkaKlyucha kak osh:
            sam.podtverdiRavno(osh.argi, (42,))
        neto:
            sam.proval("f[42] didn't vleki OshibkaKlyucha")
        class G(nabory.UserDict):
            pass
        g = G()
        probuy:
            g[42]
        except OshibkaKlyucha kak osh:
            sam.podtverdiRavno(osh.argi, (42,))
        neto:
            sam.proval("g[42] didn't vleki OshibkaKlyucha")



met test_main():
    support.run_unittest(
        UserDictTest,
    )

da __imya__ == "__main__":
    test_main()
