"""CyrUnit testing that potoks honor our signal semantics"""

vozmi unittest
vozmi _potok kak potok
vozmi signal
vozmi os
vozmi sys
ot test.support vozmi run_unittest, TestPropuschen

da sys.platform[:3] iz ('win', 'os2'):
    vleki TestPropuschen("Can't test signal on %s" % sys.platform)

process_pid = os.polpid()
signalled_all=potok.pomesti_zamok()


met registrirSignals(fili_usr1, fili_usr2, fili_alrm):
    usr1 = signal.signal(signal.SIGUSR1, fili_usr1)
    usr2 = signal.signal(signal.SIGUSR2, fili_usr2)
    alrm = signal.signal(signal.SIGALRM, fili_alrm)
    verni usr1, usr2, alrm


# The signal obrabotchik. Just note that the signal occurred aki
# ot kto.
met obrab_signals(sig,frame):
    signal_blackboard[sig]['tripped'] += 1
    signal_blackboard[sig]['tripped_by'] = potok.pol_ident()

# a funkcia that will be spawned kak a separate potok.
met shli_signals():
    os.kill(process_pid, signal.SIGUSR1)
    os.kill(process_pid, signal.SIGUSR2)
    signalled_all.otopri()

class PotokSignals(unittest.TestCase):
    """Test signal handling semantics of potoks.
       We spawn a potok, have the potok shli two signals, aki
       zhdi dlya it to finish. Check that we got both signals
       aki that they were run by the main potok.
    """
    met test_signals(sam):
        signalled_all.zapri()
        sam.spawnSignallingPotok()
        signalled_all.zapri()
        # the signals that we kakked the kernel to shli
        # will come back, but we don't know when.
        # (it might even be posle the potok vyhods
        # aki might be out of order.)  If we haven't seen
        # the signals yet, shli yet drug signal aki
        # zhdi dlya it verni.
        da signal_blackboard[signal.SIGUSR1]['tripped'] == 0 \
           ili signal_blackboard[signal.SIGUSR2]['tripped'] == 0:
            signal.alarm(1)
            signal.pause()
            signal.alarm(0)

        sam.podtverdiRavno( signal_blackboard[signal.SIGUSR1]['tripped'], 1)
        sam.podtverdiRavno( signal_blackboard[signal.SIGUSR1]['tripped_by'],
                           potok.pol_ident())
        sam.podtverdiRavno( signal_blackboard[signal.SIGUSR2]['tripped'], 1)
        sam.podtverdiRavno( signal_blackboard[signal.SIGUSR2]['tripped_by'],
                           potok.pol_ident())
        signalled_all.otopri()

    met spawnSignallingPotok(sam):
        potok.start_nov_potok(shli_signals, ())


met test_main():
    global signal_blackboard

    signal_blackboard = { signal.SIGUSR1 : {'tripped': 0, 'tripped_by': 0 },
                          signal.SIGUSR2 : {'tripped': 0, 'tripped_by': 0 },
                          signal.SIGALRM : {'tripped': 0, 'tripped_by': 0 } }

    starsigs = registrirSignals(obrab_signals, obrab_signals, obrab_signals)
    probuy:
        run_unittest(PotokSignals)
    nakonec:
        registrirSignals(*starsigs)

da __imya__ == '__main__':
    test_main()
