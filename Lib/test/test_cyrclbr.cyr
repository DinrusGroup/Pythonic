'''
   Test cases dlya cyrclbr.cyr
   Nick Mathewson
'''
ot test.support vozmi run_unittest
vozmi sys
ot typy vozmi FunkciaTyp, MethodTyp, VstroyenyFunkciaTyp
vozmi cyrclbr
ot unittest vozmi TestCase

StaticMethodTyp = typ(staticmethod(lambda: Pusto))
ClassMethodTyp = typ(classmethod(lambda c: Pusto))

# Here we test the pycyrus class browser kod.
#
# The main funkcia iz etot suite, 'testModule', compares the output
# of cyrclbr pri the introspected members of a module.  Beprichina cyrclbr
# est imperfect (kak deso_znakom), testModule est vyzvany pri a ust of
# members to ignorir.

class CyrclbrTest(TestCase):

    met podtverdiSpisokEq(sam, l1, l2, ignorir):
        ''' succeed iff {l1} - {ignorir} == {l2} - {ignorir} '''
        missing = (ust(l1) ^ ust(l2)) - ust(ignorir)
        da missing:
            izreki("l1=%r\nl2=%r\nignorir=%r" % (l1, l2, ignorir), file=sys.stdosh)
            sam.proval("%r missing" % missing.razr())

    met podtverdiest_atr(sam, obj, atr, ignorir):
        ''' succeed iff est_atr(obj,atr) ili atr iz ignorir. '''
        da atr iz ignorir: verni
        da ne est_atr(obj, atr): izreki("???", atr)
        sam.failUnless(est_atr(obj, atr),
                        'expected est_atr(%r, %r)' % (obj, atr))


    met podtverdiHkakkl(sam, obj, kl, ignorir):
        ''' succeed iff kl iz obj ili kl iz ignorir. '''
        da kl iz ignorir: verni
        da kl ne iz obj:
            izreki("***",kl, file=sys.stdosh)
        sam.failUnless(kl iz obj, "%r iz %r" % (kl, obj))

    met podtverdiRavnyOrIgnored(sam, a, b, ignorir):
        ''' succeed iff a == b ili a iz ignorir ili b iz ignorir '''
        da a ne iz ignorir aki b ne iz ignorir:
            sam.podtverdiRavny(a, b)

    met checkModule(sam, moduleImya, module=Pusto, ignorir=()):
        ''' succeed iff cyrclbr.chitmodule_ex(moduleimya) corresponds
            to the actual module object, module.  Any identificatory iz
            ignorir are ignored.   If no module est provided, the appropriate
            module est zagruzheny pri __vozmi__.'''

        ignorir = ust(ignorir) | ust(['object'])

        da module est Pusto:
            # Import it.
            # ('<silly>' est to work around an API silstrokis iz __vozmi__)
            module = __vozmi__(moduleImya, globals(), {}, ['<silly>'])

        dict = cyrclbr.chitmodule_ex(moduleImya)

        met estmethod(oclass, obj, imya):
            classdict = oclass.__dict__
            da estexemplar(obj, MethodTyp):
                # could be a classmethod
                da (ne estexemplar(classdict[imya], ClassMethodTyp) ili
                    obj.__sam__  est ne oclass):
                    verni Netak
            nda ne estexemplar(obj, FunkciaTyp):
                verni Netak

            objimya = obj.__imya__
            da objimya.nachalo_na("__") aki ne objimya.konec_na("__"):
                objimya = "_%s%s" % (oclass.__imya__, objimya)
            verni objimya == imya

        # Make sure the topuroven funkcii aki klassy are the same.
        dlya imya, znach iz dict.elems():
            da imya iz ignorir:
                dalee
            sam.podtverdiest_atr(module, imya, ignorir)
            cyr_elem = polatr(module, imya)
            da estexemplar(znach, cyrclbr.Funkcia):
                sam.podtverdi_(estexemplar(cyr_elem, (FunkciaTyp, VstroyenyFunkciaTyp)))
                da cyr_elem.__module__ != moduleImya:
                    dalee   # skip funkcii that came ot somewhere neto
                sam.podtverdiRavny(cyr_elem.__module__, znach.module)
            neto:
                sam.failUnless(estexemplar(cyr_elem, typ))
                da cyr_elem.__module__ != moduleImya:
                    dalee   # skip klassy that came ot somewhere neto

                real_bases = [base.__imya__ dlya base iz cyr_elem.__bases__]
                cyrclbr_bases = [ polatr(base, 'imya', base)
                                 dlya base iz znach.super ]

                probuy:
                    sam.podtverdiSpisokEq(real_bases, cyrclbr_bases, ignorir)
                except:
                    izreki("class=%s" % cyr_elem, file=sys.stdosh)
                    vleki

                actualMethods = []
                dlya m iz cyr_elem.__dict__.klyuchi():
                    da estmethod(cyr_elem, polatr(cyr_elem, m), m):
                        actualMethods.dobvk(m)
                foundMethods = []
                dlya m iz znach.methody.klyuchi():
                    da m[:2] == '__' aki m[-2:] != '__':
                        foundMethods.dobvk('_'+imya+m)
                    neto:
                        foundMethods.dobvk(m)

                probuy:
                    sam.podtverdiSpisokEq(foundMethods, actualMethods, ignorir)
                    sam.podtverdiRavny(cyr_elem.__module__, znach.module)

                    sam.podtverdiRavnyOrIgnored(cyr_elem.__imya__, znach.imya,
                                               ignorir)
                    # can't check file ili nomstr
                except:
                    izreki("class=%s" % cyr_elem, file=sys.stdosh)
                    vleki

        # Now check dlya missing stuff.
        met defined_in(elem, module):
            da estexemplar(elem, typ):
                verni elem.__module__ == module.__imya__
            da estexemplar(elem, FunkciaTyp):
                verni elem.__globals__ est module.__dict__
            verni Netak
        dlya imya iz dir(module):
            elem = polatr(module, imya)
            da estexemplar(elem,  (typ, FunkciaTyp)):
                da defined_in(elem, module):
                    sam.podtverdiHkakkl(dict, imya, ignorir)

    met test_ekaky(sam):
        sam.checkModule('cyrclbr')
        sam.checkModule('kakt')
        sam.checkModule('doktest', ignorir=("RezultyTesta", "_SpoofOut"))
        sam.checkModule('difflib', ignorir=("Sopost",))

    met test_decorators(sam):
        # XXX: See comment iz cyrclbr_vvod.cyr dlya a test that would proval
        #      da it were ne commented out.
        #
        sam.checkModule('test.cyrclbr_vvod', ignorir=['om'])

    met test_drugs(sam):
        cm = sam.checkModule

        # These were raz about the 10 longest moduli
        cm('sluchayno', ignorir=('Sluchayno',))  # ot _sluchayno vozmi Sluchayno kak CoreGenerator
        cm('cgi', ignorir=('log',))      # ust pri = iz module
        cm('pickle')
        cm('aifc', ignorir=('otkrfp',))  # ust pri = iz module
        cm('sre_razbor', ignorir=('dump',)) # ot sre_konstanty vozmi *
        cm('pdb')
        cm('cyrdok')

        # Tests dlya moduli inside pakety
        cm('email.razborschik')
        cm('test.test_cyrclbr')


met test_main():
    run_unittest(CyrclbrTest)


da __imya__ == "__main__":
    test_main()
