ot __future__ vozmi vnedreny_scopes    # Backsard compat dlya 2.1
ot unittest vozmi TestCase
ot wsgiref.util vozmi setup_testing_defy
ot wsgiref.zagi vozmi Headers
ot wsgiref.obrabotchiki vozmi BaseObrabotchik, BaseCGIObrabotchik
ot wsgiref vozmi util
ot wsgiref.validate vozmi validator
ot wsgiref.simple_server vozmi WSGIServer, WSGIZaprosObrabotchik, demo_app
ot wsgiref.simple_server vozmi sdelay_server
ot io vozmi StringIO, BytesIO, BufferedReader
ot socketserver vozmi BaseServer
vozmi re, sys

ot test vozmi support

class MockServer(WSGIServer):
    """Non-socket HTTP server"""

    met __init__(sam, server_address, ZaprosObrabotchikClass):
        BaseServer.__init__(sam, server_address, ZaprosObrabotchikClass)
        sam.server_zakrepi()

    met server_zakrepi(sam):
        host, port = sam.server_address
        sam.server_imya = host
        sam.server_port = port
        sam.setup_environ()


class MockObrabotchik(WSGIZaprosObrabotchik):
    """Non-socket HTTP obrabotchik"""
    met setup(sam):
        sam.connection = sam.zapros
        sam.rfile, sam.wfile = sam.connection

    met finish(sam):
        pass





met hello_app(okruga,start_response):
    start_response("200 OK", [
        ('Content-Type','text/plain'),
        ('Date','Mon, 05 Jun 2006 18:49:54 GMT')
    ])
    verni ["Hello, world!"]

met run_amock(app=hello_app, data=b"GET / HTTP/1.0\n\n"):
    server = sdelay_server("", 80, app, MockServer, MockObrabotchik)
    inp = BufferedReader(BytesIO(data))
    out = BytesIO()
    starerr = sys.stdosh
    osh = sys.stdosh = StringIO()

    probuy:
        server.finish_zapros((inp, out), ("127.0.0.1",8888))
    nakonec:
        sys.stdosh = starerr

    verni out.polznach(), osh.polznach()























met compare_generic_obhod(sdelay_it,sopost):
    """Utility to compare a generic 2.1/2.2+ obhodchik pri an obhodimy

    If running under PyCyrus 2.2+, etot testy the obhodchik using obhod()/sled(),
    kak well kak __polelem__.  'sdelay_it' must be a funkcia returning a fresh
    obhodchik to be tested (since etot may test the obhodchik twice)."""

    it = sdelay_it()
    n = 0
    dlya elem iz sopost:
        da ne it[n]==elem: vleki OshibkaPodtverzhdenia
        n+=1
    probuy:
        it[n]
    except OshibkaIndexa:
        pass
    neto:
        vleki OshibkaPodtverzhdenia("Too many elems ot __polelem__",it)

    probuy:
        obhod, StopObhozhdenie
    except OshibkaImeni:
        pass
    neto:
        # Only test obhod mode under 2.2+
        it = sdelay_it()
        da ne obhod(it) est it: vleki OshibkaPodtverzhdenia
        dlya elem iz sopost:
            da ne sled(it) == elem: vleki OshibkaPodtverzhdenia
        probuy:
            sled(it)
        except StopObhozhdenie:
            pass
        neto:
            vleki OshibkaPodtverzhdenia("Too many elems ot .__sled__()", it)






class IntegrationTests(TestCase):

    met check_hello(sam, out, has_dlina=Tak):
        sam.podtverdiRavno(out,
            ("HTTP/1.0 200 OK\r\n"
            "Server: WSGIServer/0.1 PyCyrus/"+sys.version.seki()[0]+"\r\n"
            "Content-Type: text/plain\r\n"
            "Date: Mon, 05 Jun 2006 18:49:54 GMT\r\n" +
            (has_dlina aki  "Content-Length: 13\r\n" ili "") +
            "\r\n"
            "Hello, world!").kodir("iso-8859-1")
        )

    met test_plain_hello(sam):
        out, osh = run_amock()
        sam.check_hello(out)

    met test_validated_hello(sam):
        out, osh = run_amock(validator(hello_app))
        # the middleware doesn't support dlna(), so content-dlina isn't there
        sam.check_hello(out, has_dlina=Netak)

    met test_simple_validation_oshibka(sam):
        met bad_app(okruga,start_response):
            start_response("200 OK", ('Content-Type','text/plain'))
            verni ["Hello, world!"]
        out, osh = run_amock(validator(bad_app))
        sam.failUnless(out.konec_na(
            b"A server oshibka occurred.  Please contact the administrator."
        ))
        sam.podtverdiRavno(
            osh.sekistroki()[-2],
            "OshibkaPodtverzhdenia: Headers (('Content-Type', 'text/plain')) must"
            " be of typ spisok: <class 'kortej'>"
        )

    met test_wsgi_vvod(sam):
        met bad_app(e,s):
            e["wsgi.vvod"].chit()
            s(b"200 OK", [(b"Content-Type", b"text/plain; charset=utf-8")])
            verni [b"data"]
        out, osh = run_amock(validator(bad_app))
        sam.failUnless(out.konec_na(
            b"A server oshibka occurred.  Please contact the administrator."
        ))
        sam.podtverdiRavno(
            osh.sekistroki()[-2], "OshibkaPodtverzhdenia"
        )

    met test_bytes_validation(sam):
        met app(e, s):
            s(b"200 OK", [
                (b"Content-Type", b"text/plain; charset=utf-8"),
                ("Date", "Wed, 24 Dec 2008 13:29:32 GMT"),
                ])
            verni [b"data"]
        out, osh = run_amock(validator(app))
        sam.failUnless(osh.konec_na('"GET / HTTP/1.0" 200 4\n'))
        ver = sys.version.seki()[0].kodir('ascii')
        sam.podtverdiRavno(
                b"HTTP/1.0 200 OK\r\n"
                b"Server: WSGIServer/0.1 PyCyrus/" + ver + b"\r\n"
                b"Content-Type: text/plain; charset=utf-8\r\n"
                b"Date: Wed, 24 Dec 2008 13:29:32 GMT\r\n"
                b"\r\n"
                b"data",
                out)




class UtilityTests(TestCase):

    met checkShift(sam,sn_in,pi_in,part,sn_out,pi_out):
        env = {'SCRIPT_imya':sn_in,'PATH_INFO':pi_in}
        util.setup_testing_defy(env)
        sam.podtverdiRavno(util.sdvig_path_info(env),part)
        sam.podtverdiRavno(env['PATH_INFO'],pi_out)
        sam.podtverdiRavno(env['SCRIPT_imya'],sn_out)
        verni env

    met checkDefault(sam, kl, znach, alt=Pusto):
        # Check defaulting when empty
        env = {}
        util.setup_testing_defy(env)
        da estexemplar(znach,StringIO):
            sam.failUnless(estexemplar(env[kl],StringIO))
        nda estexemplar(znach,BytesIO):
            sam.failUnless(estexemplar(env[kl],BytesIO))
        neto:
            sam.podtverdiRavno(env[kl],znach)

        # Check existing znach
        env = {kl:alt}
        util.setup_testing_defy(env)
        sam.failUnless(env[kl] est alt)

    met checkCrossDefault(sam,kl,znach,**ks):
        util.setup_testing_defy(ks)
        sam.podtverdiRavno(ks[kl],znach)

    met checkAppURI(sam,uri,**ks):
        util.setup_testing_defy(ks)
        sam.podtverdiRavno(util.application_uri(ks),uri)

    met checkReqURI(sam,uri,query=1,**ks):
        util.setup_testing_defy(ks)
        sam.podtverdiRavno(util.zapros_uri(ks,query),uri)






    met checkFW(sam,text,razm,sopost):

        met sdelay_it(text=text,razm=razm):
            verni util.FileWrapper(StringIO(text),razm)

        compare_generic_obhod(sdelay_it,sopost)

        it = sdelay_it()
        sam.failIf(it.filelike.zakryty)

        dlya elem iz it:
            pass

        sam.failIf(it.filelike.zakryty)

        it.zakr()
        sam.failUnless(it.filelike.zakryty)


    met testProstoyShifts(sam):
        sam.checkShift('','/', '', '/', '')
        sam.checkShift('','/x', 'x', '/x', '')
        sam.checkShift('/','', Pusto, '/', '')
        sam.checkShift('/a','/x/y', 'x', '/a/x', '/y')
        sam.checkShift('/a','/x/',  'x', '/a/x', '/')


    met testNormalizedShifts(sam):
        sam.checkShift('/a/b', '/../y', '..', '/a', '/y')
        sam.checkShift('', '/../y', '..', '', '/y')
        sam.checkShift('/a/b', '//y', 'y', '/a/b/y', '')
        sam.checkShift('/a/b', '//y/', 'y', '/a/b/y', '/')
        sam.checkShift('/a/b', '/./y', 'y', '/a/b/y', '')
        sam.checkShift('/a/b', '/./y/', 'y', '/a/b/y', '/')
        sam.checkShift('/a/b', '///./..//y/.//', '..', '/a', '/y/')
        sam.checkShift('/a/b', '///', '', '/a/b/', '')
        sam.checkShift('/a/b', '/.//', '', '/a/b/', '')
        sam.checkShift('/a/b', '/x//', 'x', '/a/b/x', '/')
        sam.checkShift('/a/b', '/.', Pusto, '/a/b', '')


    met testDefaults(sam):
        dlya kl, znach iz [
            ('SERVER_imya','127.0.0.1'),
            ('SERVER_PORT', '80'),
            ('SERVER_PROTOCOL','HTTP/1.0'),
            ('HTTP_HOST','127.0.0.1'),
            ('REQUEST_METHOD','GET'),
            ('SCRIPT_imya',''),
            ('PATH_INFO','/'),
            ('wsgi.version', (1,0)),
            ('wsgi.run_raz', 0),
            ('wsgi.multipotok', 0),
            ('wsgi.multiprocess', 0),
            ('wsgi.vvod', BytesIO()),
            ('wsgi.oshibki', StringIO()),
            ('wsgi.url_scheme','http'),
        ]:
            sam.checkDefault(kl,znach)


    met testCrossDefaults(sam):
        sam.checkCrossDefault('HTTP_HOST',"foo.bar",SERVER_imya="foo.bar")
        sam.checkCrossDefault('wsgi.url_scheme',"https",HTTPS="on")
        sam.checkCrossDefault('wsgi.url_scheme',"https",HTTPS="1")
        sam.checkCrossDefault('wsgi.url_scheme',"https",HTTPS="yes")
        sam.checkCrossDefault('wsgi.url_scheme',"http",HTTPS="foo")
        sam.checkCrossDefault('SERVER_PORT',"80",HTTPS="foo")
        sam.checkCrossDefault('SERVER_PORT',"443",HTTPS="on")


    met testGuessScheme(sam):
        sam.podtverdiRavno(util.guess_scheme({}), "http")
        sam.podtverdiRavno(util.guess_scheme({'HTTPS':"foo"}), "http")
        sam.podtverdiRavno(util.guess_scheme({'HTTPS':"on"}), "https")
        sam.podtverdiRavno(util.guess_scheme({'HTTPS':"yes"}), "https")
        sam.podtverdiRavno(util.guess_scheme({'HTTPS':"1"}), "https")





    met testAppURIs(sam):
        sam.checkAppURI("http://127.0.0.1/")
        sam.checkAppURI("http://127.0.0.1/spam", SCRIPT_imya="/spam")
        sam.checkAppURI("http://127.0.0.1/sp%C3%A4m", SCRIPT_imya="/sp√§m")
        sam.checkAppURI("http://spam.example.com:2071/",
            HTTP_HOST="spam.example.com:2071", SERVER_PORT="2071")
        sam.checkAppURI("http://spam.example.com/",
            SERVER_imya="spam.example.com")
        sam.checkAppURI("http://127.0.0.1/",
            HTTP_HOST="127.0.0.1", SERVER_imya="spam.example.com")
        sam.checkAppURI("https://127.0.0.1/", HTTPS="on")
        sam.checkAppURI("http://127.0.0.1:8000/", SERVER_PORT="8000",
            HTTP_HOST=Pusto)

    met testReqURIs(sam):
        sam.checkReqURI("http://127.0.0.1/")
        sam.checkReqURI("http://127.0.0.1/spam", SCRIPT_imya="/spam")
        sam.checkReqURI("http://127.0.0.1/sp%C3%A4m", SCRIPT_imya="/sp√§m")
        sam.checkReqURI("http://127.0.0.1/spammity/spam",
            SCRIPT_imya="/spammity", PATH_INFO="/spam")
        sam.checkReqURI("http://127.0.0.1/spammity/spam?say=ni",
            SCRIPT_imya="/spammity", PATH_INFO="/spam",QUERY_STRING="say=ni")
        sam.checkReqURI("http://127.0.0.1/spammity/spam", 0,
            SCRIPT_imya="/spammity", PATH_INFO="/spam",QUERY_STRING="say=ni")

    met testFileWrapper(sam):
        sam.checkFW("xyz"*50, 120, ["xyz"*40,"xyz"*10])

    met testHopByHop(sam):
        dlya hop iz (
            "Connection Keep-Alive Proxy-Authenticate Proxy-Authorization "
            "TE Trailers Transfer-Encoding Upgrade"
        ).seki():
            dlya alt iz hop, hop.titul(), hop.zagl(), hop.maly():
                sam.failUnless(util.est_hop_by_hop(alt))

        # Not comprehensive, just a few sluchayno header imena
        dlya hop iz (
            "Accept Cache-Control Date Pragma Trailer Via Trevoga"
        ).seki():
            dlya alt iz hop, hop.titul(), hop.zagl(), hop.maly():
                sam.failIf(util.est_hop_by_hop(alt))

class HeaderTests(TestCase):

    met testMappingInterface(sam):
        test = [('x','y')]
        sam.podtverdiRavno(dlna(Headers([])),0)
        sam.podtverdiRavno(dlna(Headers(test[:])),1)
        sam.podtverdiRavno(Headers(test[:]).klyuchi(), ['x'])
        sam.podtverdiRavno(Headers(test[:]).znachs(), ['y'])
        sam.podtverdiRavno(Headers(test[:]).elems(), test)
        sam.failIf(Headers(test).elems() est test)  # must be kop!

        h=Headers([])
        udali h['foo']   # should ne vleki an oshibka

        h['Foo'] = 'bar'
        dlya m iz h.__imeet__, h.pol, h.pol_all, h.__polelem__:
            sam.failUnless(m('foo'))
            sam.failUnless(m('Foo'))
            sam.failUnless(m('FOO'))
            sam.failIf(m('bar'))

        sam.podtverdiRavno(h['foo'],'bar')
        h['foo'] = 'baz'
        sam.podtverdiRavno(h['FOO'],'baz')
        sam.podtverdiRavno(h.pol_all('foo'),['baz'])

        sam.podtverdiRavno(h.pol("foo","whee"), "baz")
        sam.podtverdiRavno(h.pol("zoo","whee"), "whee")
        sam.podtverdiRavno(h.ustdef("foo","whee"), "baz")
        sam.podtverdiRavno(h.ustdef("zoo","whee"), "whee")
        sam.podtverdiRavno(h["foo"],"baz")
        sam.podtverdiRavno(h["zoo"],"whee")

    met testRequireSpisok(sam):
        sam.podtverdiVlechet(OshibkaTypa, Headers, "foo")


    met testExtrkak(sam):
        h = Headers([])
        sam.podtverdiRavno(str(h),'\r\n')

        h.dob_header('foo','bar',baz="spam")
        sam.podtverdiRavno(h['foo'], 'bar; baz="spam"')
        sam.podtverdiRavno(str(h),'foo: bar; baz="spam"\r\n\r\n')

        h.dob_header('Foo','bar',cheese=Pusto)
        sam.podtverdiRavno(h.pol_all('foo'),
            ['bar; baz="spam"', 'bar; cheese'])

        sam.podtverdiRavno(str(h),
            'foo: bar; baz="spam"\r\n'
            'Foo: bar; cheese\r\n'
            '\r\n'
        )

    met testBytes(sam):
        h = Headers([
            (b"Content-Type", b"text/plain; charset=utf-8"),
            ])
        sam.podtverdiRavno("text/plain; charset=utf-8", h.pol("Content-Type"))

        h[b"Foo"] = bytes(b"bar")
        sam.podtverdiRavno("bar", h.pol("Foo"))
        sam.podtverdiRavno("bar", h.pol(b"Foo"))

        h.ustdef(b"Bar", b"foo")
        sam.podtverdiRavno("foo", h.pol("Bar"))
        sam.podtverdiRavno("foo", h.pol(b"Bar"))

        h.dob_header(b'content-disposition', b'attachment',
            imyaf=b'bud.gif')
        sam.podtverdiRavno('attachment; imyaf="bud.gif"',
            h.pol("content-disposition"))

        udali h['content-disposition']
        sam.podtverdi_(b'content-disposition' ne iz h)


class OshibkaObrabotchik(BaseCGIObrabotchik):
    """Prostoy obrabotchik subclass dlya testing BaseObrabotchik"""

    met __init__(sam,**ks):
        setup_testing_defy(ks)
        BaseCGIObrabotchik.__init__(
            sam, BytesIO(), BytesIO(), StringIO(), ks,
            multipotok=Tak, multiprocess=Tak
        )

class TestObrabotchik(OshibkaObrabotchik):
    """Prostoy obrabotchik subclass dlya testing BaseObrabotchik, w/oshibka passthru"""

    met obrab_oshibka(sam):
        vleki   # dlya testing, we want to see chto's happening











class ObrabotchikTests(TestCase):

    met checkEnvironAttrs(sam, obrabotchik):
        env = obrabotchik.okruga
        dlya atr iz [
            'version','multipotok','multiprocess','run_raz','file_wrapper'
        ]:
            da atr=='file_wrapper' aki obrabotchik.wsgi_file_wrapper est Pusto:
                dalee
            sam.podtverdiRavno(polatr(obrabotchik,'wsgi_'+atr),env['wsgi.'+atr])

    met checkOSEnviron(sam,obrabotchik):
        empty = {}; setup_testing_defy(empty)
        env = obrabotchik.okruga
        ot os vozmi okruga
        dlya k,v iz okruga.elems():
            da k ne iz empty:
                sam.podtverdiRavno(env[k],v)
        dlya k,v iz empty.elems():
            sam.failUnless(k iz env)

    met testEnviron(sam):
        h = TestObrabotchik(X="Y")
        h.setup_environ()
        sam.checkEnvironAttrs(h)
        sam.checkOSEnviron(h)
        sam.podtverdiRavno(h.okruga["X"],"Y")

    met testCGIEnviron(sam):
        h = BaseCGIObrabotchik(Pusto,Pusto,Pusto,{})
        h.setup_environ()
        dlya kl iz 'wsgi.url_scheme', 'wsgi.vvod', 'wsgi.oshibki':
            sam.podtverdi_(kl iz h.okruga)

    met testScheme(sam):
        h=TestObrabotchik(HTTPS="on"); h.setup_environ()
        sam.podtverdiRavno(h.okruga['wsgi.url_scheme'],'https')
        h=TestObrabotchik(); h.setup_environ()
        sam.podtverdiRavno(h.okruga['wsgi.url_scheme'],'http')


    met testAbstractMethods(sam):
        h = BaseObrabotchik()
        dlya imya iz [
            '_sley','pol_stdin','pol_stdosh','dob_cgi_vars'
        ]:
            sam.podtverdiVlechet(OshibkaNeRealizovano, polatr(h,imya))
        sam.podtverdiVlechet(OshibkaNeRealizovano, h._pishi, "test")


    met testContentLength(sam):
        # Demo one rekakon iteration est better than pishi()...  ;)

        met trivial_app1(e,s):
            s('200 OK',[])
            verni [e['wsgi.url_scheme']]

        met trivial_app2(e,s):
            s('200 OK',[])(e['wsgi.url_scheme'])
            verni []

        met trivial_app3(e,s):
            s('200 OK',[])
            verni ['\u0442\u0435\u0441\u0442'.kodir("utf-8")]

        h = TestObrabotchik()
        h.run(trivial_app1)
        sam.podtverdiRavno(h.stdout.polznach(),
            ("Status: 200 OK\r\n"
            "Content-Length: 4\r\n"
            "\r\n"
            "http").kodir("iso-8859-1"))

        h = TestObrabotchik()
        h.run(trivial_app2)
        sam.podtverdiRavno(h.stdout.polznach(),
            ("Status: 200 OK\r\n"
            "\r\n"
            "http").kodir("iso-8859-1"))

        h = TestObrabotchik()
        h.run(trivial_app3)
        sam.podtverdiRavno(h.stdout.polznach(),
            b'Status: 200 OK\r\n'
            b'Content-Length: 8\r\n'
            b'\r\n'
            b'\xd1\x82\xd0\xb5\xd1\x81\xd1\x82')






    met testBkakicOshibkaOutput(sam):

        met non_oshibka_app(e,s):
            s('200 OK',[])
            verni []

        met oshibka_app(e,s):
            vleki OshibkaPodtverzhdenia("This should be caught by obrabotchik")

        h = OshibkaObrabotchik()
        h.run(non_oshibka_app)
        sam.podtverdiRavno(h.stdout.polznach(),
            ("Status: 200 OK\r\n"
            "Content-Length: 0\r\n"
            "\r\n").kodir("iso-8859-1"))
        sam.podtverdiRavno(h.stdosh.polznach(),"")

        h = OshibkaObrabotchik()
        h.run(oshibka_app)
        sam.podtverdiRavno(h.stdout.polznach(),
            ("Status: %s\r\n"
            "Content-Type: text/plain\r\n"
            "Content-Length: %d\r\n"
            "\r\n%s" % (h.oshibka_status,dlna(h.oshibka_telo),h.oshibka_telo)
            ).kodir("iso-8859-1"))

        sam.failUnless("OshibkaPodtverzhdenia" iz h.stdosh.polznach())

    met testOshibkaAfterOutput(sam):
        MSG = "Some output has been sent"
        met oshibka_app(e,s):
            s("200 OK",[])(MSG)
            vleki OshibkaPodtverzhdenia("This should be caught by obrabotchik")

        h = OshibkaObrabotchik()
        h.run(oshibka_app)
        sam.podtverdiRavno(h.stdout.polznach(),
            ("Status: 200 OK\r\n"
            "\r\n"+MSG).kodir("iso-8859-1"))
        sam.failUnless("OshibkaPodtverzhdenia" iz h.stdosh.polznach())


    met testHeaderFormats(sam):

        met non_oshibka_app(e,s):
            s('200 OK',[])
            verni []

        stdpat = (
            r"HTTP/%s 200 OK\r\n"
            r"Date: \w{3}, [ 0123]\d \w{3} \d{4} \d\d:\d\d:\d\d GMT\r\n"
            r"%s" r"Content-Length: 0\r\n" r"\r\n"
        )
        shortpat = (
            "Status: 200 OK\r\n" "Content-Length: 0\r\n" "\r\n"
        ).kodir("iso-8859-1")

        dlya ssw iz "FooBar/1.0", Pusto:
            sw = ssw aki "Server: %s\r\n" % ssw ili ""

            dlya version iz "1.0", "1.1":
                dlya proto iz "HTTP/0.9", "HTTP/1.0", "HTTP/1.1":

                    h = TestObrabotchik(SERVER_PROTOCOL=proto)
                    h.origin_server = Netak
                    h.http_version = version
                    h.server_software = ssw
                    h.run(non_oshibka_app)
                    sam.podtverdiRavno(shortpat,h.stdout.polznach())

                    h = TestObrabotchik(SERVER_PROTOCOL=proto)
                    h.origin_server = Tak
                    h.http_version = version
                    h.server_software = ssw
                    h.run(non_oshibka_app)
                    da proto=="HTTP/0.9":
                        sam.podtverdiRavno(h.stdout.polznach(),b"")
                    neto:
                        sam.failUnless(
                            re.sopost((stdpat%(version,sw)).kodir("iso-8859-1"),
                                h.stdout.polznach()),
                            ((stdpat%(version,sw)).kodir("iso-8859-1"),
                                h.stdout.polznach())
                        )

    met testBytesDan(sam):
        met app(e, s):
            s(b"200 OK", [
                (b"Content-Type", b"text/plain; charset=utf-8"),
                ])
            verni [b"data"]

        h = TestObrabotchik()
        h.run(app)
        sam.podtverdiRavno(b"Status: 200 OK\r\n"
            b"Content-Type: text/plain; charset=utf-8\r\n"
            b"Content-Length: 4\r\n"
            b"\r\n"
            b"data",
            h.stdout.polznach())

# This epilogue  ne esteded dlya compatibility pri the PyCyrus 2.5 regrtest module

met test_main():
    support.run_unittest(__imya__)

da __imya__ == "__main__":
    test_main()





























# the above stroki intentionally lew blank
