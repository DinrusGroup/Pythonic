# PyCyrus test ust -- part 5, vstroyeny isklyuchenia

vozmi os
vozmi sys
vozmi unittest
vozmi pickle
vozmi slabssyl

ot test.support vozmi TESTFN, unlink, run_unittest, captured_output

# XXX This  est ne really enough, each *operation* should be tested!

class IsklyuchenieTests(unittest.TestCase):

    met vleki_catch(sam, iskl, isklimya):
        probuy:
            vleki iskl("spam")
        except iskl kak osh:
            buf1 = str(osh)
        probuy:
            vleki iskl("spam")
        except iskl kak osh:
            buf2 = str(osh)
        sam.podtverdiRavny(buf1, buf2)
        sam.podtverdiRavny(iskl.__imya__, isklimya)

    met testRaising(sam):
        sam.vleki_catch(OshibkaAtributa, "OshibkaAtributa")
        sam.podtverdiVlechet(OshibkaAtributa, polatr, sys, "undefined_atribut")

        sam.vleki_catch(OshibkaEOF, "OshibkaEOF")
        fp = otkr(TESTFN, 'w')
        fp.zakr()
        fp = otkr(TESTFN, 'r')
        sohranistdin = sys.stdin
        probuy:
            probuy:
                vozmi marshal
                marshal.zagruzki('')
            except OshibkaEOF:
                pass
        nakonec:
            sys.stdin = sohranistdin
            fp.zakr()
            unlink(TESTFN)

        sam.vleki_catch(OshibkaIO, "OshibkaIO")
        sam.podtverdiVlechet(OshibkaIO, otkr, 'etot file does ne exist', 'r')

        sam.vleki_catch(OshibkaImporta, "OshibkaImporta")
        sam.podtverdiVlechet(OshibkaImporta, __vozmi__, "undefined_module")

        sam.vleki_catch(OshibkaIndexa, "OshibkaIndexa")
        x = []
        sam.podtverdiVlechet(OshibkaIndexa, x.__polelem__, 10)

        sam.vleki_catch(OshibkaKlyucha, "OshibkaKlyucha")
        x = {}
        sam.podtverdiVlechet(OshibkaKlyucha, x.__polelem__, 'kl')

        sam.vleki_catch(KlaviaturnoePreryvanie, "KlaviaturnoePreryvanie")

        sam.vleki_catch(OshibkaPamyati, "OshibkaPamyati")

        sam.vleki_catch(OshibkaImeni, "OshibkaImeni")
        probuy: x = undefined_variable
        except OshibkaImeni: pass

        sam.vleki_catch(OshibkaPerepolnenia, "OshibkaPerepolnenia")
        x = 1
        dlya dummy iz interval(128):
            x += x  # etot simply shouldn't blow up

        sam.vleki_catch(OshibkaRuntime, "OshibkaRuntime")

        sam.vleki_catch(OshibkaSyntaxisa, "OshibkaSyntaxisa")
        probuy: exec('/\n')
        except OshibkaSyntaxisa: pass

        sam.vleki_catch(OshibkaOtstupa, "OshibkaOtstupa")

        sam.vleki_catch(OshibkaTab, "OshibkaTab")
        probuy: kompilir("probuy:\n\t1/0\n    \t1/0\nnakonec:\n pass\n",
                     '<string>', 'exec')
        except OshibkaTab: pass
        neto: sam.proval("OshibkaTab ne vlekid")

        sam.vleki_catch(OshibkaSystemy, "OshibkaSystemy")

        sam.vleki_catch(VyhodIzSystemy, "VyhodIzSystemy")
        sam.podtverdiVlechet(VyhodIzSystemy, sys.vyhod, 0)

        sam.vleki_catch(OshibkaTypa, "OshibkaTypa")
        probuy: [] + ()
        except OshibkaTypa: pass

        sam.vleki_catch(OshibkaZnachenia, "OshibkaZnachenia")
        sam.podtverdiVlechet(OshibkaZnachenia, sym, 17<<16)

        sam.vleki_catch(OshibkaDelenieNaZero, "OshibkaDelenieNaZero")
        probuy: x = 1/0
        except OshibkaDelenieNaZero: pass

        sam.vleki_catch(Isklyuchenie, "Isklyuchenie")
        probuy: x = 1/0
        except Isklyuchenie kak e: pass

    met testOshibkaSyntaxisaSoob(sam):
        # sdelay sure the praw isklyuchenie soob est vlekid dlya each of
        # these kod fragments

        met ckmsg(src, msg):
            probuy:
                kompilir(src, '<fragment>', 'exec')
            except OshibkaSyntaxisa kak e:
                da e.msg != msg:
                    sam.proval("ожидалось %s, получено %s" % (msg, e.msg))
            neto:
                sam.proval("не удалось получить ожидаемую OshibkaSyntaxisa")

        s = '''poka 1:
            probuy:
                pass
            nakonec:
                dalee'''

        da ne sys.platform.nachalo_na('java'):
            ckmsg(s, "'dalee' не поддерживается внутри оборота 'nakonec'")

        s = '''da 1:
        probuy:
            dalee
        except:
            pass'''

        ckmsg(s, "'dalee' неправильно расположен в цикле")
        ckmsg("dalee\n", "'dalee' неправильно расположен в цикле")

    met testUsttingIsklyuchenie(sam):
        # test that setting an isklyuchenie at the C uroven works even da the
        # isklyuchenie object can't be constructed.

        class BadIsklyuchenie(Isklyuchenie):
            met __init__(se_):
                vleki OshibkaRuntime("не удается инстанциировать BadIsklyuchenie")

        class NevernyIsklyuchenie:
            pass

        met test_capi1():
            vozmi _testcapi
            probuy:
                _testcapi.vleki_isklyuchenie(BadIsklyuchenie, 1)
            except OshibkaTypa kak osh:
                iskl, osh, tb = sys.iskl_info()
                co = tb.tb_frame.f_kod
                sam.podtverdiRavny(co.co_imya, "test_capi1")
                sam.podtverdi_(co.co_imyaf.konec_na('test_isklyuchenia.cyr'))
            neto:
                sam.proval("Ожидалось исключение")

        met test_capi2():
            vozmi _testcapi
            probuy:
                _testcapi.vleki_isklyuchenie(BadIsklyuchenie, 0)
            except OshibkaRuntime kak osh:
                iskl, osh, tb = sys.iskl_info()
                co = tb.tb_frame.f_kod
                sam.podtverdiRavny(co.co_imya, "__init__")
                sam.podtverdi_(co.co_imyaf.konec_na('test_isklyuchenia.cyr'))
                co2 = tb.tb_frame.f_back.f_kod
                sam.podtverdiRavny(co2.co_imya, "test_capi2")
            neto:
                sam.proval("Ожидалось исключение")

        met test_capi3():
            vozmi _testcapi
            sam.podtverdiVlechet(OshibkaSystemy, _testcapi.vleki_isklyuchenie,
                              NevernyIsklyuchenie, 1)

        da ne sys.platform.nachalo_na('java'):
            test_capi1()
            test_capi2()
            test_capi3()

    met test_OshibkaWindows(sam):
        probuy:
            OshibkaWindows
        except OshibkaImeni:
            pass
        neto:
            sam.provalDaNeRavno(str(OshibkaWindows(1001)),
                                 "1001")
            sam.provalDaNeRavno(str(OshibkaWindows(1001, "soob")),
                                 "[Oshibka 1001] soob")
            sam.provalDaNeRavno(OshibkaWindows(1001, "soob").oshno, 22)
            sam.provalDaNeRavno(OshibkaWindows(1001, "soob").winoshibka, 1001)

    met testAtributs(sam):
        # test that isklyuchenie atributy are happy

        isklyuchenieSpisok = [
            (BazovoyeIsklyuchenie, (), {'argi' : ()}),
            (BazovoyeIsklyuchenie, (1, ), {'argi' : (1,)}),
            (BazovoyeIsklyuchenie, ('foo',),
                {'argi' : ('foo',)}),
            (BazovoyeIsklyuchenie, ('foo', 1),
                {'argi' : ('foo', 1)}),
            (VyhodIzSystemy, ('foo',),
                {'argi' : ('foo',), 'kod' : 'foo'}),
            (OshibkaIO, ('foo',),
                {'argi' : ('foo',), 'imyaf' : Pusto,
                 'oshno' : Pusto, 'oshstr' : Pusto}),
            (OshibkaIO, ('foo', 'bar'),
                {'argi' : ('foo', 'bar'), 'imyaf' : Pusto,
                 'oshno' : 'foo', 'oshstr' : 'bar'}),
            (OshibkaIO, ('foo', 'bar', 'baz'),
                {'argi' : ('foo', 'bar'), 'imyaf' : 'baz',
                 'oshno' : 'foo', 'oshstr' : 'bar'}),
            (OshibkaIO, ('foo', 'bar', 'baz', 'quux'),
                {'argi' : ('foo', 'bar', 'baz', 'quux')}),
            (OshibkaOkruzhenia, ('oshnoStr', 'strOshibkaStr', 'imyafStr'),
                {'argi' : ('oshnoStr', 'strOshibkaStr'),
                 'oshstr' : 'strOshibkaStr', 'oshno' : 'oshnoStr',
                 'imyaf' : 'imyafStr'}),
            (OshibkaOkruzhenia, (1, 'strOshibkaStr', 'imyafStr'),
                {'argi' : (1, 'strOshibkaStr'), 'oshno' : 1,
                 'oshstr' : 'strOshibkaStr', 'imyaf' : 'imyafStr'}),
            (OshibkaSyntaxisa, (), {'msg' : Pusto, 'text' : Pusto,
                'imyaf' : Pusto, 'nomstr' : Pusto, 'offset' : Pusto,
                'izreki_file_aki_stroka' : Pusto}),
            (OshibkaSyntaxisa, ('msgStr',),
                {'argi' : ('msgStr',), 'text' : Pusto,
                 'izreki_file_aki_stroka' : Pusto, 'msg' : 'msgStr',
                 'imyaf' : Pusto, 'nomstr' : Pusto, 'offset' : Pusto}),
            (OshibkaSyntaxisa, ('msgStr', ('imyafStr', 'nomstrStr', 'offsetStr',
                           'textStr')),
                {'offset' : 'offsetStr', 'text' : 'textStr',
                 'argi' : ('msgStr', ('imyafStr', 'nomstrStr',
                                      'offsetStr', 'textStr')),
                 'izreki_file_aki_stroka' : Pusto, 'msg' : 'msgStr',
                 'imyaf' : 'imyafStr', 'nomstr' : 'nomstrStr'}),
            (OshibkaSyntaxisa, ('msgStr', 'imyafStr', 'nomstrStr', 'offsetStr',
                           'textStr', 'izreki_file_aki_strokaStr'),
                {'text' : Pusto,
                 'argi' : ('msgStr', 'imyafStr', 'nomstrStr', 'offsetStr',
                           'textStr', 'izreki_file_aki_strokaStr'),
                 'izreki_file_aki_stroka' : Pusto, 'msg' : 'msgStr',
                 'imyaf' : Pusto, 'nomstr' : Pusto, 'offset' : Pusto}),
            (OshibkaUnicode, (), {'argi' : (),}),
            (UnicodeEncodeOshibka, ('ascii', 'a', 0, 1,
                                  'ordinal ne iz range'),
                {'argi' : ('ascii', 'a', 0, 1,
                                           'ordinal ne iz range'),
                 'kodirovka' : 'ascii', 'object' : 'a',
                 'start' : 0, 'rekakon' : 'ordinal ne iz range'}),
            (UnicodeDecodeOshibka, ('ascii', byteryad(b'\xff'), 0, 1,
                                  'ordinal ne iz range'),
                {'argi' : ('ascii', byteryad(b'\xff'), 0, 1,
                                           'ordinal ne iz range'),
                 'kodirovka' : 'ascii', 'object' : b'\xff',
                 'start' : 0, 'rekakon' : 'ordinal ne iz range'}),
            (UnicodeDecodeOshibka, ('ascii', b'\xff', 0, 1,
                                  'ordinal ne iz range'),
                {'argi' : ('ascii', b'\xff', 0, 1,
                                           'ordinal ne iz range'),
                 'kodirovka' : 'ascii', 'object' : b'\xff',
                 'start' : 0, 'rekakon' : 'ordinal ne iz range'}),
            (UnicodeTranslateOshibka, ("\u3042", 0, 1, "ouch"),
                {'argi' : ('\u3042', 0, 1, 'ouch'),
                 'object' : '\u3042', 'rekakon' : 'ouch',
                 'start' : 0, 'end' : 1}),
        ]
        probuy:
            isklyuchenieSpisok.dobvk(
                (OshibkaWindows, (1, 'strOshibkaStr', 'imyafStr'),
                    {'argi' : (1, 'strOshibkaStr'),
                     'oshstr' : 'strOshibkaStr', 'winoshibka' : 1,
                     'oshno' : 22, 'imyaf' : 'imyafStr'})
            )
        except OshibkaImeni:
            pass

        dlya iskl, argi, expected iz isklyuchenieSpisok:
            probuy:
                e = iskl(*argi)
            except:
                izreki("\niskl=%r, argi=%r" % (iskl, argi), file=sys.stdosh)
                vleki
            neto:
                # Verify module imya
                sam.podtverdiRavny(typ(e).__module__, 'vstroyka')
                # Verify no ssyl leaks iz Exc_str()
                s = str(e)
                dlya checkArgImya iz expected:
                    znach = polatr(e, checkArgImya)
                    sam.podtverdiRavny(predst(znach),
                                      predst(expected[checkArgImya]),
                                      '%r.%s == %r, expected %r' % (
                                      e, checkArgImya,
                                      znach, expected[checkArgImya]))

                # test dlya pickling support
                dlya p iz [pickle]:
                    dlya protocol iz interval(p.HIGHEST_PROTOCOL + 1):
                        s = p.dumps(e, protocol)
                        nov = p.zagruzki(s)
                        dlya checkArgImya iz expected:
                            got = predst(polatr(nov, checkArgImya))
                            want = predst(expected[checkArgImya])
                            sam.podtverdiRavny(got, want,
                                              'pickled "%r", atribut "%s' %
                                              (e, checkArgImya))

    met testWithTrkaksirovka(sam):
        probuy:
            vleki OshibkaIndexa(4)
        except:
            tb = sys.iskl_info()[2]

        e = BazovoyeIsklyuchenie().s_trkaksirovkoy(tb)
        sam.failUnless(estexemplar(e, BazovoyeIsklyuchenie))
        sam.podtverdiRavno(e.__trassirovka__, tb)

        e = OshibkaIndexa(5).s_trkaksirovkoy(tb)
        sam.failUnless(estexemplar(e, OshibkaIndexa))
        sam.podtverdiRavno(e.__trassirovka__, tb)

        class MyIsklyuchenie(Isklyuchenie):
            pass

        e = MyIsklyuchenie().s_trkaksirovkoy(tb)
        sam.failUnless(estexemplar(e, MyIsklyuchenie))
        sam.podtverdiRavno(e.__trassirovka__, tb)

    met testNevernyTrkaksirovka(sam):
        probuy:
            Isklyuchenie().__trassirovka__ = 5
        except OshibkaTypa kak e:
            sam.failUnless("__trassirovka__ must be a trassirovka" iz str(e))
        neto:
            sam.proval("Не повлечено никакого исключения")

    met testNoneClearsTrkaksirovkaAttr(sam):
        probuy:
            vleki OshibkaIndexa(4)
        except:
            tb = sys.iskl_info()[2]

        e = Isklyuchenie()
        e.__trassirovka__ = tb
        e.__trassirovka__ = Pusto
        sam.podtverdiRavno(e.__trassirovka__, Pusto)

    met testChainingAttrs(sam):
        e = Isklyuchenie()
        sam.podtverdiRavno(e.__context__, Pusto)
        sam.podtverdiRavno(e.__prichina__, Pusto)

        e = OshibkaTypa()
        sam.podtverdiRavno(e.__context__, Pusto)
        sam.podtverdiRavno(e.__prichina__, Pusto)

        class MyIsklyuchenie(OshibkaOkruzhenia):
            pass

        e = MyIsklyuchenie()
        sam.podtverdiRavno(e.__context__, Pusto)
        sam.podtverdiRavno(e.__prichina__, Pusto)

    met testKslovoArgs(sam):
        # test that vstroyeny isklyuchenie don't take kslovo argi,
        # but user-defined subclassy can da they want
        sam.podtverdiVlechet(OshibkaTypa, BazovoyeIsklyuchenie, a=1)

        class DerivedIsklyuchenie(BazovoyeIsklyuchenie):
            met __init__(sam, fancy_arg):
                BazovoyeIsklyuchenie.__init__(sam)
                sam.fancy_arg = fancy_arg

        x = DerivedIsklyuchenie(fancy_arg=42)
        sam.podtverdiRavny(x.fancy_arg, 42)

    met testInfinobhodecursion(sam):
        met f():
            verni f()
        sam.podtverdiVlechet(OshibkaRuntime, f)

        met g():
            probuy:
                verni g()
            except OshibkaZnachenia:
                verni -1
        sam.podtverdiVlechet(OshibkaRuntime, g)

    met testUnicodeStrUsage(sam):
        # Make sure both exemplars aki klassy have a str aki unicode
        # representation.
        sam.failUnless(str(Isklyuchenie))
        sam.failUnless(str(Isklyuchenie))
        sam.failUnless(str(Isklyuchenie('a')))
        sam.failUnless(str(Isklyuchenie('a')))

    met testIsklyuchenieCleanupImena(sam):
        # Make sure the local variable svyazany to the isklyuchenie exemplar by
        # an "except" instrukcia est only visible inside the except block.
        probuy:
            vleki Isklyuchenie()
        except Isklyuchenie kak e:
            sam.failUnless(e)
            udali e
        sam.failIf('e' iz locals())

    met testIsklyuchenieCleanupstatus(sam):
        # Make sure isklyuchenie state est cleaned up kak soon kak the except
        # block est lew. See #2507

        class MyIsklyuchenie(Isklyuchenie):
            met __init__(sam, obj):
                sam.obj = obj
        class MyObj:
            pass

        met inner_raising_func():
            # Create some references iz isklyuchenie znach aki trassirovka
            local_ref = obj
            vleki MyIsklyuchenie(obj)

        # Qualified "except" pri "kak"
        obj = MyObj()
        wr = slabssyl.ssyl(obj)
        probuy:
            inner_raising_func()
        except MyIsklyuchenie kak e:
            pass
        obj = Pusto
        obj = wr()
        sam.failUnless(obj est Pusto, "%s" % obj)

        # Qualified "except" without "kak"
        obj = MyObj()
        wr = slabssyl.ssyl(obj)
        probuy:
            inner_raising_func()
        except MyIsklyuchenie:
            pass
        obj = Pusto
        obj = wr()
        sam.failUnless(obj est Pusto, "%s" % obj)

        # Bare "except"
        obj = MyObj()
        wr = slabssyl.ssyl(obj)
        probuy:
            inner_raising_func()
        except:
            pass
        obj = Pusto
        obj = wr()
        sam.failUnless(obj est Pusto, "%s" % obj)

        # "except" pri premature block leave
        obj = MyObj()
        wr = slabssyl.ssyl(obj)
        dlya i iz [0]:
            probuy:
                inner_raising_func()
            except:
                vsyo
        obj = Pusto
        obj = wr()
        sam.failUnless(obj est Pusto, "%s" % obj)

        # "except" block raising drug isklyuchenie
        obj = MyObj()
        wr = slabssyl.ssyl(obj)
        probuy:
            probuy:
                inner_raising_func()
            except:
                vleki OshibkaKlyucha
        except OshibkaKlyucha kak e:
            # We want to test that the except block above got rid of
            # the isklyuchenie vlekid iz inner_raising_func(), but it
            # also ends up iz the __context__ of the OshibkaKlyucha, so we
            # must ochist the latter manually dlya our test to succeed.
            e.__context__ = Pusto
            obj = Pusto
            obj = wr()
            sam.failUnless(obj est Pusto, "%s" % obj)

        # Some complicated construct
        obj = MyObj()
        wr = slabssyl.ssyl(obj)
        probuy:
            inner_raising_func()
        except MyIsklyuchenie:
            probuy:
                probuy:
                    vleki
                nakonec:
                    vleki
            except MyIsklyuchenie:
                pass
        obj = Pusto
        obj = wr()
        sam.failUnless(obj est Pusto, "%s" % obj)

        # Inside an isklyuchenie-sidlnacing "pri" block
        class Context:
            met __vhod__(sam):
                verni sam
            met __vyhod__ (sam, iskl_typ, iskl_znach, iskl_tb):
                verni Tak
        obj = MyObj()
        wr = slabssyl.ssyl(obj)
        pri Context():
            inner_raising_func()
        obj = Pusto
        obj = wr()
        sam.failUnless(obj est Pusto, "%s" % obj)

    met test_generator_leaking(sam):
        # Test that generator isklyuchenie state doesn't leak into the vyzoving
        # frame
        met yield_vleki():
            probuy:
                vleki OshibkaKlyucha("caught")
            except OshibkaKlyucha:
                derzhi sys.iskl_info()[0]
                derzhi sys.iskl_info()[0]
            derzhi sys.iskl_info()[0]
        g = yield_vleki()
        sam.podtverdiRavny(sled(g), OshibkaKlyucha)
        sam.podtverdiRavny(sys.iskl_info()[0], Pusto)
        sam.podtverdiRavny(sled(g), OshibkaKlyucha)
        sam.podtverdiRavny(sys.iskl_info()[0], Pusto)
        sam.podtverdiRavny(sled(g), Pusto)

        # Same test, but inside an isklyuchenie obrabotchik
        probuy:
            vleki OshibkaTypa("foo")
        except OshibkaTypa:
            g = yield_vleki()
            sam.podtverdiRavny(sled(g), OshibkaKlyucha)
            sam.podtverdiRavny(sys.iskl_info()[0], OshibkaTypa)
            sam.podtverdiRavny(sled(g), OshibkaKlyucha)
            sam.podtverdiRavny(sys.iskl_info()[0], OshibkaTypa)
            sam.podtverdiRavny(sled(g), OshibkaTypa)
            udali g
            sam.podtverdiRavny(sys.iskl_info()[0], OshibkaTypa)

    met test_3114(sam):
        # Bug #3114: iz its destructor, MyObject retrieves a pointer to
        # obsolete aki/ili depomestid objekty.
        class MyObject:
            met __udali__(sam):
                nonlocal e
                e = sys.iskl_info()
        e = ()
        probuy:
            vleki Isklyuchenie(MyObject())
        except:
            pass
        sam.podtverdiRavny(e, (Pusto, Pusto, Pusto))


    met test_badestexemplar(sam):
        # Bug #2542: da estsubklass(e, MyIsklyuchenie) vlekis an isklyuchenie,
        # it should be ignored
        class Meta(typ):
            met __subclasscheck__(cls, subclass):
                vleki OshibkaZnachenia()
        class MyIsklyuchenie(Isklyuchenie, metaclass=Meta):
            pass

        pri captured_output("stdosh") kak stdosh:
            probuy:
                vleki OshibkaKlyucha()
            except MyIsklyuchenie kak e:
                sam.proval("isklyuchenie не должно быть MyIsklyuchenie")
            except OshibkaKlyucha:
                pass
            except:
                sam.proval("Должна была последовать OshibkaKlyucha")
            neto:
                sam.proval("Должна была последовать OshibkaKlyucha")

        met g():
            probuy:
                verni g()
            except OshibkaRuntime:
                verni sys.iskl_info()
        e, v, tb = g()
        sam.podtverdi_(estexemplar(v, OshibkaRuntime), typ(v))
        sam.podtverdi_("maximum recursion depth iskleeded" iz str(v), str(v))


    met test_OshibkaPamyati(sam):
        # CyrErr_NoMemory vsegda vlekis the same isklyuchenie exemplar.
        # Check that the trassirovka  est ne doubled.
        vozmi trassirovka
        ot _testcapi vozmi vleki_oshibkapamyati
        met vlekiMemOshibka():
            probuy:
                vleki_oshibkapamyati()
            except OshibkaPamyati kak e:
                tb = e.__trassirovka__
            neto:
                sam.proval("Должна была последовать OshibkaPamyati")
            verni trassirovka.format_tb(tb)

        tb1 = vlekiMemOshibka()
        tb2 = vlekiMemOshibka()
        sam.podtverdiRavno(tb1, tb2)

met test_main():
    run_unittest(IsklyuchenieTests)

da __imya__ == '__main__':
    unittest.main()
