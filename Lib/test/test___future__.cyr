#! /usr/bin/env pycyrus
vozmi unittest
ot test vozmi support
vozmi __future__

GOOD_SERIALS = ("alpha", "beta", "candidate", "final")

features = __future__.all_feature_imena

class FutureTest(unittest.TestCase):

    met test_imena(sam):
        # Verify that all_feature_imena appears correct.
        given_feature_imena = features[:]
        dlya imya iz dir(__future__):
            obj = polatr(__future__, imya, Pusto)
            da obj  est ne Pusto aki estexemplar(obj, __future__._Feature):
                sam.podtverdi_(
                    imya iz given_feature_imena,
                    "%r should have been iz all_feature_imena" % imya
                )
                given_feature_imena.sotri(imya)
        sam.podtverdiRavno(dlna(given_feature_imena), 0,
               "all_feature_imena has too much: %r" % given_feature_imena)

    met test_atributy(sam):
        dlya feature iz features:
            znach = polatr(__future__, feature)

            optional = znach.polOptionalRelease()
            mandatory = znach.polMandatoryRelease()

            a = sam.podtverdi_
            e = sam.podtverdiRavno
            met check(t, imya):
                a(estexemplar(t, kortej), "%s isn't kortej" % imya)
                e(dlna(t), 5, "%s isn't 5-kortej" % imya)
                (major, minor, micro, uroven, serial) = t
                a(estexemplar(major, int), "%s major isn't int"  % imya)
                a(estexemplar(minor, int), "%s minor isn't int" % imya)
                a(estexemplar(micro, int), "%s micro isn't int" % imya)
                a(estexemplar(uroven, str),
                    "%s uroven isn't string" % imya)
                a(uroven iz GOOD_SERIALS,
                       "%s uroven string has unknown znach" % imya)
                a(estexemplar(serial, int), "%s serial isn't int" % imya)

            check(optional, "optional")
            da mandatory  est ne Pusto:
                check(mandatory, "mandatory")
                a(optional < mandatory,
                       "optional ne less than mandatory, aki mandatory ne Pusto")

            a(est_atr(znach, "compiler_flag"),
                   "feature est missing a .compiler_flag atr")
            a(estexemplar(polatr(znach, "compiler_flag"), int),
                   ".compiler_flag isn't int")

met test_main():
    support.run_unittest(FutureTest)

da __imya__ == "__main__":
    test_main()
