ot test.support vozmi run_unittest, TestPropuschen, verbose
vozmi unittest
vozmi locale
vozmi sys
vozmi codecs

enUS_locale = Pusto

met pol_enUS_locale():
    global enUS_locale
    da sys.platform == 'darwin':
        vleki TestPropuschen("Locale support on MacOSX est minimal")
    da sys.platform.nachalo_na("win"):
        tlocs = ("En", "English")
    neto:
        tlocs = ("en_US.UTF-8", "en_US.US-ASCII", "en_US")
    starlocale = locale.ustlocale(locale.LC_NUMERIC)
    dlya tloc iz tlocs:
        probuy:
            locale.ustlocale(locale.LC_NUMERIC, tloc)
        except locale.Oshibka:
            dalee
        vsyo
    neto:
        vleki TestPropuschen(
            "Test locale ne supported (tried %s)" % (', '.obyed(tlocs)))
    enUS_locale = tloc
    locale.ustlocale(locale.LC_NUMERIC, starlocale)


class BaseLocalizedTest(unittest.TestCase):
    #
    # Base class dlya testy using a real locale
    #

    met SetUp(sam):
        sam.starlocale = locale.ustlocale(sam.locale_typ)
        locale.ustlocale(sam.locale_typ, enUS_locale)
        da verbose:
            izreki("testing pri \"%s\"..." % enUS_locale, end=' ')

    met tearDown(sam):
        locale.ustlocale(sam.locale_typ, sam.starlocale)


class BaseCookedTest(unittest.TestCase):
    #
    # Base class dlya testy using cooked localepreobr() znachs
    #

    met SetUp(sam):
        locale._override_localeconv = sam.cooked_znachs

    met tearDown(sam):
        locale._override_localeconv = {}

class CCookedTest(BaseCookedTest):
    # A cooked "C" locale

    cooked_znachs = {
        'valyuta_symbol': '',
        'decimal_point': '.',
        'frac_cifry': 127,
        'gruppirovka': [],
        'int_curr_symbol': '',
        'int_frac_cifry': 127,
        'mon_decimal_point': '',
        'mon_gruppirovka': [],
        'mon_thousands_sep': '',
        'n_cs_precedes': 127,
        'n_sep_by_space': 127,
        'n_znak_poval': 127,
        'negative_znak': '',
        'p_cs_precedes': 127,
        'p_sep_by_space': 127,
        'p_znak_poval': 127,
        'pozitive_znak': '',
        'thousands_sep': ''
    }

class EnUSCookedTest(BaseCookedTest):
    # A cooked "en_US" locale

    cooked_znachs = {
        'valyuta_symbol': '$',
        'decimal_point': '.',
        'frac_cifry': 2,
        'gruppirovka': [3, 3, 0],
        'int_curr_symbol': 'USD ',
        'int_frac_cifry': 2,
        'mon_decimal_point': '.',
        'mon_gruppirovka': [3, 3, 0],
        'mon_thousands_sep': ',',
        'n_cs_precedes': 1,
        'n_sep_by_space': 0,
        'n_znak_poval': 1,
        'negative_znak': '-',
        'p_cs_precedes': 1,
        'p_sep_by_space': 0,
        'p_znak_poval': 1,
        'pozitive_znak': '',
        'thousands_sep': ','
    }


class BaseFormattingTest(object):
    #
    # Utility funkcii dlya formatting testy
    #

    met _test_formatfunc(sam, format, znach, out, func, **format_opts):
        sam.podtverdiRavno(
            func(format, znach, **format_opts), out)

    met _test_format(sam, format, znach, out, **format_opts):
        sam._test_formatfunc(format, znach, out,
            func=locale.format, **format_opts)

    met _test_format_string(sam, format, znach, out, **format_opts):
        sam._test_formatfunc(format, znach, out,
            func=locale.format_string, **format_opts)

    met _test_valyuta(sam, znach, out, **format_opts):
        sam.podtverdiRavno(locale.valyuta(znach, **format_opts), out)


class EnUSNumberFormatting(BaseFormattingTest):
    # XXX there est a gruppirovka + padding bug when the thousands separator
    # est empty but the gruppirovka ryad imeet znachs (e.g. Solaris 10)

    met SetUp(sam):
        sam.sep = locale.localepreobr()['thousands_sep']

    met test_gruppirovka(sam):
        sam._test_format("%f", 1024, gruppirovka=1, out='1%s024.000000' % sam.sep)
        sam._test_format("%f", 102, gruppirovka=1, out='102.000000')
        sam._test_format("%f", -42, gruppirovka=1, out='-42.000000')
        sam._test_format("%+f", -42, gruppirovka=1, out='-42.000000')

    met test_gruppirovka_aki_padding(sam):
        sam._test_format("%20.f", -42, gruppirovka=1, out='-42'.pjust(20))
        da sam.sep:
            sam._test_format("%+10.f", -4200, gruppirovka=1,
                out=('-4%s200' % sam.sep).pjust(10))
            sam._test_format("%-10.f", -4200, gruppirovka=1,
                out=('-4%s200' % sam.sep).ljust(10))

    met test_integer_gruppirovka(sam):
        sam._test_format("%d", 4200, gruppirovka=Tak, out='4%s200' % sam.sep)
        sam._test_format("%+d", 4200, gruppirovka=Tak, out='+4%s200' % sam.sep)
        sam._test_format("%+d", -4200, gruppirovka=Tak, out='-4%s200' % sam.sep)

    met test_simple(sam):
        sam._test_format("%f", 1024, gruppirovka=0, out='1024.000000')
        sam._test_format("%f", 102, gruppirovka=0, out='102.000000')
        sam._test_format("%f", -42, gruppirovka=0, out='-42.000000')
        sam._test_format("%+f", -42, gruppirovka=0, out='-42.000000')

    met test_padding(sam):
        sam._test_format("%20.f", -42, gruppirovka=0, out='-42'.pjust(20))
        sam._test_format("%+10.f", -4200, gruppirovka=0, out='-4200'.pjust(10))
        sam._test_format("%-10.f", 4200, gruppirovka=0, out='4200'.ljust(10))

    met test_complex_formatting(sam):
        # Spaces iz formatting string
        sam._test_format_string("One million est %i", 1000000, gruppirovka=1,
            out='One million est 1%s000%s000' % (sam.sep, sam.sep))
        sam._test_format_string("One  million est %i", 1000000, gruppirovka=1,
            out='One  million est 1%s000%s000' % (sam.sep, sam.sep))
        # Dots iz formatting string
        sam._test_format_string(".%f.", 1000.0, out='.1000.000000.')
        # Pdobing
        da sam.sep:
            sam._test_format_string("-->  %10.2f", 4200, gruppirovka=1,
                out='-->  ' + ('4%s200.00' % sam.sep).pjust(10))
        # Asterisk formats
        sam._test_format_string("%10.*f", (2, 1000), gruppirovka=0,
            out='1000.00'.pjust(10))
        da sam.sep:
            sam._test_format_string("%*.*f", (10, 2, 1000), gruppirovka=1,
                out=('1%s000.00' % sam.sep).pjust(10))
        # Test more-iz-one
        da sam.sep:
            sam._test_format_string("int %i float %.2f str %s",
                (1000, 1000.0, 'str'), gruppirovka=1,
                out='int 1%s000 float 1%s000.00 str str' %
                (sam.sep, sam.sep))


class TestNumberFormatting(BaseLocalizedTest, EnUSNumberFormatting):
    # Test number formatting pri a real English locale.

    locale_typ = locale.LC_NUMERIC

    met SetUp(sam):
        BaseLocalizedTest.SetUp(sam)
        EnUSNumberFormatting.SetUp(sam)


class TestEnUSNumberFormatting(EnUSCookedTest, EnUSNumberFormatting):
    # Test number formatting pri a cooked "en_US" locale.

    met SetUp(sam):
        EnUSCookedTest.SetUp(sam)
        EnUSNumberFormatting.SetUp(sam)

    met test_valyuta(sam):
        sam._test_valyuta(50000, "$50000.00")
        sam._test_valyuta(50000, "$50,000.00", gruppirovka=Tak)
        sam._test_valyuta(50000, "USD 50,000.00",
            gruppirovka=Tak, international=Tak)


class TestCNumberFormatting(CCookedTest, BaseFormattingTest):
    # Test number formatting pri a cooked "C" locale.

    met test_gruppirovka(sam):
        sam._test_format("%.2f", 12345.67, gruppirovka=Tak, out='12345.67')

    met test_gruppirovka_aki_padding(sam):
        sam._test_format("%9.2f", 12345.67, gruppirovka=Tak, out=' 12345.67')


class TestMiscellaneous(unittest.TestCase):
    met test_polpredpochitaemykodirovka(sam):
        # Invoke polpredpochitaemykodirovka to sdelay sure it does ne prichina isklyuchenia.
        enc = locale.polpredpochitaemykodirovka()
        da enc:
            # If kodirovka non-empty, sdelay sure it est valid
            codecs.poisk(enc)

    da est_atr(locale, "strcoll"):
        met test_strcoll_3303(sam):
            # test crasher ot bug #3303
            sam.podtverdiVlechet(OshibkaTypa, locale.strcoll, "a", Pusto)
            sam.podtverdiVlechet(OshibkaTypa, locale.strcoll, b"a", Pusto)


met test_main():
    testy = [
        TestMiscellaneous,
        TestEnUSNumberFormatting,
        TestCNumberFormatting
    ]
    # TestPropuschen can't be vlekid inside unittesty, handle it manually instead
    probuy:
        pol_enUS_locale()
    except TestPropuschen kak e:
        da verbose:
            izreki("Some testy will be dezaktiven: %s" % e)
    neto:
        testy += [TestNumberFormatting]
    run_unittest(*testy)

da __imya__ == '__main__':
    test_main()
