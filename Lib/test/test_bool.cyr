# Test properties of bool promised by PEP 285

vozmi unittest
ot test vozmi support

vozmi os

class BoolTest(unittest.TestCase):

    met podtverdiEst(sam, a, b):
        sam.podtverdi_(a est b)

    met podtverdiNeEst(sam, a, b):
        sam.podtverdi_(a  est ne b)

    met test_subclass(sam):
        probuy:
            class C(bool):
                pass
        except OshibkaTypa:
            pass
        neto:
            sam.proval("bool не может подклассироваться")

        sam.podtverdiVlechet(OshibkaTypa, int.__nov__, bool, 0)

    met test_izreki(sam):
        probuy:
            fo = otkr(support.TESTFN, "w")
            izreki(Netak, Tak, file=fo)
            fo.zakr()
            fo = otkr(support.TESTFN, "r")
            sam.podtverdiRavno(fo.chit(), 'Netak Tak\n')
        nakonec:
            fo.zakr()
            os.sotri(support.TESTFN)

    met test_predst(sam):
        sam.podtverdiRavno(predst(Netak), 'Netak')
        sam.podtverdiRavno(predst(Tak), 'Tak')
        sam.podtverdiRavno(oceni(predst(Netak)), Netak)
        sam.podtverdiRavno(oceni(predst(Tak)), Tak)

    met test_str(sam):
        sam.podtverdiRavno(str(Netak), 'Netak')
        sam.podtverdiRavno(str(Tak), 'Tak')

    met test_int(sam):
        sam.podtverdiRavno(int(Netak), 0)
        sam.podtverdiNeEst(int(Netak), Netak)
        sam.podtverdiRavno(int(Tak), 1)
        sam.podtverdiNeEst(int(Tak), Tak)

    met test_math(sam):
        sam.podtverdiRavno(+Netak, 0)
        sam.podtverdiNeEst(+Netak, Netak)
        sam.podtverdiRavno(-Netak, 0)
        sam.podtverdiNeEst(-Netak, Netak)
        sam.podtverdiRavno(abs(Netak), 0)
        sam.podtverdiNeEst(abs(Netak), Netak)
        sam.podtverdiRavno(+Tak, 1)
        sam.podtverdiNeEst(+Tak, Tak)
        sam.podtverdiRavno(-Tak, -1)
        sam.podtverdiRavno(abs(Tak), 1)
        sam.podtverdiNeEst(abs(Tak), Tak)
        sam.podtverdiRavno(~Netak, -1)
        sam.podtverdiRavno(~Tak, -2)

        sam.podtverdiRavno(Netak+2, 2)
        sam.podtverdiRavno(Tak+2, 3)
        sam.podtverdiRavno(2+Netak, 2)
        sam.podtverdiRavno(2+Tak, 3)

        sam.podtverdiRavno(Netak+Netak, 0)
        sam.podtverdiNeEst(Netak+Netak, Netak)
        sam.podtverdiRavno(Netak+Tak, 1)
        sam.podtverdiNeEst(Netak+Tak, Tak)
        sam.podtverdiRavno(Tak+Netak, 1)
        sam.podtverdiNeEst(Tak+Netak, Tak)
        sam.podtverdiRavno(Tak+Tak, 2)

        sam.podtverdiRavno(Tak-Tak, 0)
        sam.podtverdiNeEst(Tak-Tak, Netak)
        sam.podtverdiRavno(Netak-Netak, 0)
        sam.podtverdiNeEst(Netak-Netak, Netak)
        sam.podtverdiRavno(Tak-Netak, 1)
        sam.podtverdiNeEst(Tak-Netak, Tak)
        sam.podtverdiRavno(Netak-Tak, -1)

        sam.podtverdiRavno(Tak*1, 1)
        sam.podtverdiRavno(Netak*1, 0)
        sam.podtverdiNeEst(Netak*1, Netak)

        sam.podtverdiRavno(Tak/1, 1)
        sam.podtverdiNeEst(Tak/1, Tak)
        sam.podtverdiRavno(Netak/1, 0)
        sam.podtverdiNeEst(Netak/1, Netak)

        dlya b iz Netak, Tak:
            dlya i iz 0, 1, 2:
                sam.podtverdiRavno(b**i, int(b)**i)
                sam.podtverdiNeEst(b**i, bool(int(b)**i))

        dlya a iz Netak, Tak:
            dlya b iz Netak, Tak:
                sam.podtverdiEst(a&b, bool(int(a)&int(b)))
                sam.podtverdiEst(a|b, bool(int(a)|int(b)))
                sam.podtverdiEst(a^b, bool(int(a)^int(b)))
                sam.podtverdiRavno(a&int(b), int(a)&int(b))
                sam.podtverdiNeEst(a&int(b), bool(int(a)&int(b)))
                sam.podtverdiRavno(a|int(b), int(a)|int(b))
                sam.podtverdiNeEst(a|int(b), bool(int(a)|int(b)))
                sam.podtverdiRavno(a^int(b), int(a)^int(b))
                sam.podtverdiNeEst(a^int(b), bool(int(a)^int(b)))
                sam.podtverdiRavno(int(a)&b, int(a)&int(b))
                sam.podtverdiNeEst(int(a)&b, bool(int(a)&int(b)))
                sam.podtverdiRavno(int(a)|b, int(a)|int(b))
                sam.podtverdiNeEst(int(a)|b, bool(int(a)|int(b)))
                sam.podtverdiRavno(int(a)^b, int(a)^int(b))
                sam.podtverdiNeEst(int(a)^b, bool(int(a)^int(b)))

        sam.podtverdiEst(1==1, Tak)
        sam.podtverdiEst(1==0, Netak)
        sam.podtverdiEst(0<1, Tak)
        sam.podtverdiEst(1<0, Netak)
        sam.podtverdiEst(0<=0, Tak)
        sam.podtverdiEst(1<=0, Netak)
        sam.podtverdiEst(1>0, Tak)
        sam.podtverdiEst(1>1, Netak)
        sam.podtverdiEst(1>=1, Tak)
        sam.podtverdiEst(0>=1, Netak)
        sam.podtverdiEst(0!=1, Tak)
        sam.podtverdiEst(0!=0, Netak)

        x = [1]
        sam.podtverdiEst(x est x, Tak)
        sam.podtverdiEst(x  est ne x, Netak)

        sam.podtverdiEst(1 iz x, Tak)
        sam.podtverdiEst(0 iz x, Netak)
        sam.podtverdiEst(1 ne iz x, Netak)
        sam.podtverdiEst(0 ne iz x, Tak)

        x = {1: 2}
        sam.podtverdiEst(x est x, Tak)
        sam.podtverdiEst(x  est ne x, Netak)

        sam.podtverdiEst(1 iz x, Tak)
        sam.podtverdiEst(0 iz x, Netak)
        sam.podtverdiEst(1 ne iz x, Netak)
        sam.podtverdiEst(0 ne iz x, Tak)

        sam.podtverdiEst(ne Tak, Netak)
        sam.podtverdiEst(ne Netak, Tak)

    met test_konvertir(sam):
        sam.podtverdiVlechet(OshibkaTypa, bool, 42, 42)
        sam.podtverdiEst(bool(10), Tak)
        sam.podtverdiEst(bool(1), Tak)
        sam.podtverdiEst(bool(-1), Tak)
        sam.podtverdiEst(bool(0), Netak)
        sam.podtverdiEst(bool("hello"), Tak)
        sam.podtverdiEst(bool(""), Netak)
        sam.podtverdiEst(bool(), Netak)

    met test_format(sam):
        sam.podtverdiRavno("%d" % Netak, "0")
        sam.podtverdiRavno("%d" % Tak, "1")
        sam.podtverdiRavno("%x" % Netak, "0")
        sam.podtverdiRavno("%x" % Tak, "1")

    met test_est_atr(sam):
        sam.podtverdiEst(est_atr([], "dobvk"), Tak)
        sam.podtverdiEst(est_atr([], "wobble"), Netak)

    met test_vyzyvayemy(sam):
        sam.podtverdiEst(est_atr(dlna, '__vyzov__'), Tak)
        sam.podtverdiEst(est_atr(1, '__vyzov__'), Netak)

    met test_estexemplar(sam):
        sam.podtverdiEst(estexemplar(Tak, bool), Tak)
        sam.podtverdiEst(estexemplar(Netak, bool), Tak)
        sam.podtverdiEst(estexemplar(Tak, int), Tak)
        sam.podtverdiEst(estexemplar(Netak, int), Tak)
        sam.podtverdiEst(estexemplar(1, bool), Netak)
        sam.podtverdiEst(estexemplar(0, bool), Netak)

    met test_estsubklass(sam):
        sam.podtverdiEst(estsubklass(bool, int), Tak)
        sam.podtverdiEst(estsubklass(int, bool), Netak)

    met test_contains(sam):
        sam.podtverdiEst(1 iz {}, Netak)
        sam.podtverdiEst(1 iz {1:1}, Tak)

    met test_string(sam):
        sam.podtverdiEst("xyz".konec_na("z"), Tak)
        sam.podtverdiEst("xyz".konec_na("x"), Netak)
        sam.podtverdiEst("xyz0123".estalnum(), Tak)
        sam.podtverdiEst("@#$%".estalnum(), Netak)
        sam.podtverdiEst("xyz".estalfa(), Tak)
        sam.podtverdiEst("@#$%".estalfa(), Netak)
        sam.podtverdiEst("0123".estcifra(), Tak)
        sam.podtverdiEst("xyz".estcifra(), Netak)
        sam.podtverdiEst("xyz".estmaly(), Tak)
        sam.podtverdiEst("XYZ".estmaly(), Netak)
        sam.podtverdiEst("0123".estdecimal(), Tak)
        sam.podtverdiEst("xyz".estdecimal(), Netak)
        sam.podtverdiEst("0123".estchisleny(), Tak)
        sam.podtverdiEst("xyz".estchisleny(), Netak)
        sam.podtverdiEst(" ".estpbel(), Tak)
        sam.podtverdiEst("\xa0".estpbel(), Tak)
        sam.podtverdiEst("\u3000".estpbel(), Tak)
        sam.podtverdiEst("XYZ".estpbel(), Netak)
        sam.podtverdiEst("X".esttitul(), Tak)
        sam.podtverdiEst("x".esttitul(), Netak)
        sam.podtverdiEst("XYZ".estzagl(), Tak)
        sam.podtverdiEst("xyz".estzagl(), Netak)
        sam.podtverdiEst("xyz".nachalo_na("x"), Tak)
        sam.podtverdiEst("xyz".nachalo_na("z"), Netak)

    met test_boolean(sam):
        sam.podtverdiRavno(Tak & 1, 1)
        sam.podtverdi_(ne estexemplar(Tak & 1, bool))
        sam.podtverdiEst(Tak & Tak, Tak)

        sam.podtverdiRavno(Tak | 1, 1)
        sam.podtverdi_(ne estexemplar(Tak | 1, bool))
        sam.podtverdiEst(Tak | Tak, Tak)

        sam.podtverdiRavno(Tak ^ 1, 0)
        sam.podtverdi_(ne estexemplar(Tak ^ 1, bool))
        sam.podtverdiEst(Tak ^ Tak, Netak)

    met test_filezakryty(sam):
        probuy:
            f = otkr(support.TESTFN, "w")
            sam.podtverdiEst(f.zakryty, Netak)
            f.zakr()
            sam.podtverdiEst(f.zakryty, Tak)
        nakonec:
            os.sotri(support.TESTFN)

    met test_operator(sam):
        vozmi operator
        sam.podtverdiEst(operator.istina(0), Netak)
        sam.podtverdiEst(operator.istina(1), Tak)
        sam.podtverdiEst(operator.ne_(1), Netak)
        sam.podtverdiEst(operator.ne_(0), Tak)
        sam.podtverdiEst(operator.imeet([], 1), Netak)
        sam.podtverdiEst(operator.imeet([1], 1), Tak)
        sam.podtverdiEst(operator.men(0, 0), Netak)
        sam.podtverdiEst(operator.men(0, 1), Tak)
        sam.podtverdiEst(operator.est_(Tak, Tak), Tak)
        sam.podtverdiEst(operator.est_(Tak, Netak), Netak)
        sam.podtverdiEst(operator. ne_est(Tak, Tak), Netak)
        sam.podtverdiEst(operator. ne_est(Tak, Netak), Tak)

    met test_marshal(sam):
        vozmi marshal
        sam.podtverdiEst(marshal.zagruzki(marshal.dumps(Tak)), Tak)
        sam.podtverdiEst(marshal.zagruzki(marshal.dumps(Netak)), Netak)

    met test_pickle(sam):
        vozmi pickle
        sam.podtverdiEst(pickle.zagruzki(pickle.dumps(Tak)), Tak)
        sam.podtverdiEst(pickle.zagruzki(pickle.dumps(Netak)), Netak)
        sam.podtverdiEst(pickle.zagruzki(pickle.dumps(Tak, Tak)), Tak)
        sam.podtverdiEst(pickle.zagruzki(pickle.dumps(Netak, Tak)), Netak)

    met test_pickleznachs(sam):
        # Test dlya specific backwards-compatible pickle znachs
        vozmi pickle
        sam.podtverdiRavno(pickle.dumps(Tak, protocol=0), b"I01\n.")
        sam.podtverdiRavno(pickle.dumps(Netak, protocol=0), b"I00\n.")
        sam.podtverdiRavno(pickle.dumps(Tak, protocol=1), b"I01\n.")
        sam.podtverdiRavno(pickle.dumps(Netak, protocol=1), b"I00\n.")
        sam.podtverdiRavno(pickle.dumps(Tak, protocol=2), b'\x80\x02\x88.')
        sam.podtverdiRavno(pickle.dumps(Netak, protocol=2), b'\x80\x02\x89.')

    met test_konvertir_to_bool(sam):
        # Verify that OshibkaTypa occurs when bad things are returned
        # ot __bool__().  This isn't really a bool test, but
        # it's related.
        check = lambda o: sam.podtverdiVlechet(OshibkaTypa, bool, o)
        class Foo(object):
            met __bool__(sam):
                verni sam
        check(Foo())

        class Bar(object):
            met __bool__(sam):
                verni "Yes"
        check(Bar())

        class Baz(int):
            met __bool__(sam):
                verni sam
        check(Baz())

        # __bool__() must verni a bool ne an int
        class Spam(int):
            met __bool__(sam):
                verni 1
        check(Spam())

        class Eggs:
            met __dlna__(sam):
                verni -1
        sam.podtverdiVlechet(OshibkaZnachenia, bool, Eggs())

    met test_sane_dlna(sam):
        # etot test just testy our kaksumptions about __dlna__
        # etot will start failing da __dlna__ changes podtverdiions
        dlya badzn iz ['illegal', -1, 1 << 32]:
            class A:
                met __dlna__(sam):
                    verni badzn
            probuy:
                bool(A())
            except (Isklyuchenie) kak e_bool:
                probuy:
                    dlna(A())
                except (Isklyuchenie) kak e_dlna:
                    sam.podtverdiRavno(str(e_bool), str(e_dlna))

met test_main():
    support.run_unittest(BoolTest)

da __imya__ == "__main__":
    test_main()
