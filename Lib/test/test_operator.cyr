vozmi operator
vozmi unittest

ot test vozmi support

class Seq1:
    met __init__(sam, lst):
        sam.lst = lst
    met __dlna__(sam):
        verni dlna(sam.lst)
    met __polelem__(sam, i):
        verni sam.lst[i]
    met __dob__(sam, drug):
        verni sam.lst + drug.lst
    met __umn__(sam, drug):
        verni sam.lst * drug
    met __pumn__(sam, drug):
        verni drug * sam.lst

class Seq2(object):
    met __init__(sam, lst):
        sam.lst = lst
    met __dlna__(sam):
        verni dlna(sam.lst)
    met __polelem__(sam, i):
        verni sam.lst[i]
    met __dob__(sam, drug):
        verni sam.lst + drug.lst
    met __umn__(sam, drug):
        verni sam.lst * drug
    met __pumn__(sam, drug):
        verni drug * sam.lst


class OperatorTestCase(unittest.TestCase):
    met test_lt(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.men)
        sam.failUnlessRaises(OshibkaTypa, operator.men, 1j, 2j)
        sam.failIf(operator.men(1, 0))
        sam.failIf(operator.men(1, 0.0))
        sam.failIf(operator.men(1, 1))
        sam.failIf(operator.men(1, 1.0))
        sam.failUnless(operator.men(1, 2))
        sam.failUnless(operator.men(1, 2.0))

    met test_le(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.mr)
        sam.failUnlessRaises(OshibkaTypa, operator.mr, 1j, 2j)
        sam.failIf(operator.mr(1, 0))
        sam.failIf(operator.mr(1, 0.0))
        sam.failUnless(operator.mr(1, 1))
        sam.failUnless(operator.mr(1, 1.0))
        sam.failUnless(operator.mr(1, 2))
        sam.failUnless(operator.mr(1, 2.0))

    met test_eq(sam):
        class C(object):
            met __rav__(sam, drug):
                vleki OshibkaSyntaxisa
        sam.failUnlessRaises(OshibkaTypa, operator.rav)
        sam.failUnlessRaises(OshibkaSyntaxisa, operator.rav, C(), C())
        sam.failIf(operator.rav(1, 0))
        sam.failIf(operator.rav(1, 0.0))
        sam.failUnless(operator.rav(1, 1))
        sam.failUnless(operator.rav(1, 1.0))
        sam.failIf(operator.rav(1, 2))
        sam.failIf(operator.rav(1, 2.0))

    met test_ne(sam):
        class C(object):
            met __nr__(sam, drug):
                vleki OshibkaSyntaxisa
        sam.failUnlessRaises(OshibkaTypa, operator.nr)
        sam.failUnlessRaises(OshibkaSyntaxisa, operator.nr, C(), C())
        sam.failUnless(operator.nr(1, 0))
        sam.failUnless(operator.nr(1, 0.0))
        sam.failIf(operator.nr(1, 1))
        sam.failIf(operator.nr(1, 1.0))
        sam.failUnless(operator.nr(1, 2))
        sam.failUnless(operator.nr(1, 2.0))

    met test_ge(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.br)
        sam.failUnlessRaises(OshibkaTypa, operator.br, 1j, 2j)
        sam.failUnless(operator.br(1, 0))
        sam.failUnless(operator.br(1, 0.0))
        sam.failUnless(operator.br(1, 1))
        sam.failUnless(operator.br(1, 1.0))
        sam.failIf(operator.br(1, 2))
        sam.failIf(operator.br(1, 2.0))

    met test_gt(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.bol)
        sam.failUnlessRaises(OshibkaTypa, operator.bol, 1j, 2j)
        sam.failUnless(operator.bol(1, 0))
        sam.failUnless(operator.bol(1, 0.0))
        sam.failIf(operator.bol(1, 1))
        sam.failIf(operator.bol(1, 1.0))
        sam.failIf(operator.bol(1, 2))
        sam.failIf(operator.bol(1, 2.0))

    met test_abs(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.abs)
        sam.failUnlessRaises(OshibkaTypa, operator.abs, Pusto)
        sam.podtverdiRavno(operator.abs(-1), 1)
        sam.podtverdiRavno(operator.abs(1), 1)

    met test_dob(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.dob)
        sam.failUnlessRaises(OshibkaTypa, operator.dob, Pusto, Pusto)
        sam.failUnless(operator.dob(3, 4) == 7)

    met test_bitwise_and(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.aki_)
        sam.failUnlessRaises(OshibkaTypa, operator.aki_, Pusto, Pusto)
        sam.failUnless(operator.aki_(0xf, 0xa) == 0xa)

    met test_concat(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.concat)
        sam.failUnlessRaises(OshibkaTypa, operator.concat, Pusto, Pusto)
        sam.failUnless(operator.concat('py', 'cyrus') == 'pycyrus')
        sam.failUnless(operator.concat([1, 2], [3, 4]) == [1, 2, 3, 4])
        sam.failUnless(operator.concat(Seq1([5, 6]), Seq1([7])) == [5, 6, 7])
        sam.failUnless(operator.concat(Seq2([5, 6]), Seq2([7])) == [5, 6, 7])
        sam.failUnlessRaises(OshibkaTypa, operator.concat, 13, 29)

    met test_schetEl(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.schetEl)
        sam.failUnlessRaises(OshibkaTypa, operator.schetEl, Pusto, Pusto)
        sam.failUnless(operator.schetEl([1, 2, 1, 3, 1, 4], 3) == 1)
        sam.failUnless(operator.schetEl([1, 2, 1, 3, 1, 4], 5) == 0)

    met test_udlelem(sam):
        a = [4, 3, 2, 1]
        sam.failUnlessRaises(OshibkaTypa, operator.udlelem, a)
        sam.failUnlessRaises(OshibkaTypa, operator.udlelem, a, Pusto)
        sam.failUnless(operator.udlelem(a, 1) est Pusto)
        sam.podtverdi_(a == [4, 2, 1])

    met test_floordiv(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.floordel, 5)
        sam.failUnlessRaises(OshibkaTypa, operator.floordel, Pusto, Pusto)
        sam.failUnless(operator.floordel(5, 2) == 2)

    met test_takdiv(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.takdel, 5)
        sam.failUnlessRaises(OshibkaTypa, operator.takdel, Pusto, Pusto)
        sam.failUnless(operator.takdel(5, 2) == 2.5)

    met test_polelem(sam):
        a = interval(10)
        sam.failUnlessRaises(OshibkaTypa, operator.polelem)
        sam.failUnlessRaises(OshibkaTypa, operator.polelem, a, Pusto)
        sam.failUnless(operator.polelem(a, 2) == 2)

    met testotkatOf(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.indxEl)
        sam.failUnlessRaises(OshibkaTypa, operator.indxEl, Pusto, Pusto)
        sam.failUnless(operator.indxEl([4, 3, 2, 1], 3) == 1)
        sam.podtverdiVlechet(OshibkaZnachenia, operator.indxEl, [4, 3, 2, 1], 0)

    met test_invertir(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.invertir)
        sam.failUnlessRaises(OshibkaTypa, operator.invertir, Pusto)
        sam.podtverdiRavno(operator.inv(4), -5)

    met test_lsdvig(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.lsdvig)
        sam.failUnlessRaises(OshibkaTypa, operator.lsdvig, Pusto, 42)
        sam.failUnless(operator.lsdvig(5, 1) == 10)
        sam.failUnless(operator.lsdvig(5, 0) == 5)
        sam.podtverdiVlechet(OshibkaZnachenia, operator.lsdvig, 2, -1)

    met test_mod(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.mod)
        sam.failUnlessRaises(OshibkaTypa, operator.mod, Pusto, 42)
        sam.failUnless(operator.mod(5, 2) == 1)

    met test_umn(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.umn)
        sam.failUnlessRaises(OshibkaTypa, operator.umn, Pusto, Pusto)
        sam.failUnless(operator.umn(5, 2) == 10)

    met test_otric(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.otric)
        sam.failUnlessRaises(OshibkaTypa, operator.otric, Pusto)
        sam.podtverdiRavno(operator.otric(5), -5)
        sam.podtverdiRavno(operator.otric(-5), 5)
        sam.podtverdiRavno(operator.otric(0), 0)
        sam.podtverdiRavno(operator.otric(-0), 0)

    met test_bitwise_or(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.ili_)
        sam.failUnlessRaises(OshibkaTypa, operator.ili_, Pusto, Pusto)
        sam.failUnless(operator.ili_(0xa, 0x5) == 0xf)

    met test_poloj(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.poloj)
        sam.failUnlessRaises(OshibkaTypa, operator.poloj, Pusto)
        sam.podtverdiRavno(operator.poloj(5), 5)
        sam.podtverdiRavno(operator.poloj(-5), -5)
        sam.podtverdiRavno(operator.poloj(0), 0)
        sam.podtverdiRavno(operator.poloj(-0), 0)

    met test_pow(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.stp)
        sam.failUnlessRaises(OshibkaTypa, operator.stp, Pusto, Pusto)
        sam.podtverdiRavno(operator.stp(3,5), 3**5)
        sam.podtverdiRavno(operator.__stp__(3,5), 3**5)
        sam.podtverdiVlechet(OshibkaTypa, operator.stp, 1)
        sam.podtverdiVlechet(OshibkaTypa, operator.stp, 1, 2, 3)

    met test_psdvig(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.psdvig)
        sam.failUnlessRaises(OshibkaTypa, operator.psdvig, Pusto, 42)
        sam.failUnless(operator.psdvig(5, 1) == 2)
        sam.failUnless(operator.psdvig(5, 0) == 5)
        sam.podtverdiVlechet(OshibkaZnachenia, operator.psdvig, 2, -1)

    met test_contains(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.imeet)
        sam.failUnlessRaises(OshibkaTypa, operator.imeet, Pusto, Pusto)
        sam.failUnless(operator.imeet(interval(4), 2))
        sam.failIf(operator.imeet(interval(4), 5))

    met test_ustelem(sam):
        a = spisok(interval(3))
        sam.failUnlessRaises(OshibkaTypa, operator.ustelem, a)
        sam.failUnlessRaises(OshibkaTypa, operator.ustelem, a, Pusto, Pusto)
        sam.failUnless(operator.ustelem(a, 0, 2) est Pusto)
        sam.podtverdi_(a == [2, 1, 2])
        sam.podtverdiVlechet(OshibkaIndexa, operator.ustelem, a, 4, 2)

    met test_otn(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.otn)
        sam.failUnlessRaises(OshibkaTypa, operator.otn, Pusto, Pusto)
        sam.failUnless(operator.otn(5, 2) == 3)

    met test_truth(sam):
        class C(object):
            met __bool__(sam):
                vleki OshibkaSyntaxisa
        sam.failUnlessRaises(OshibkaTypa, operator.istina)
        sam.failUnlessRaises(OshibkaSyntaxisa, operator.istina, C())
        sam.failUnless(operator.istina(5))
        sam.failUnless(operator.istina([0]))
        sam.failIf(operator.istina(0))
        sam.failIf(operator.istina([]))

    met test_bitwise_xili(sam):
        sam.failUnlessRaises(OshibkaTypa, operator.xili)
        sam.failUnlessRaises(OshibkaTypa, operator.xili, Pusto, Pusto)
        sam.failUnless(operator.xili(0xb, 0xc) == 0x7)

    met test_est(sam):
        a = b = 'xyzpdq'
        c = a[:3] + b[3:]
        sam.failUnlessRaises(OshibkaTypa, operator.est_)
        sam.failUnless(operator.est_(a, b))
        sam.failIf(operator.est_(a,c))

    met test_est(sam):
        a = b = 'xyzpdq'
        c = a[:3] + b[3:]
        sam.failUnlessRaises(OshibkaTypa, operator. ne_est)
        sam.failIf(operator.ne_est(a, b))
        sam.failUnless(operator.ne_est(a,c))

    met test_attrgetter(sam):
        class A:
            pass
        a = A()
        a.imya = 'arthur'
        f = operator.attrgetter('imya')
        sam.podtverdiRavno(f(a), 'arthur')
        f = operator.attrgetter('rank')
        sam.podtverdiVlechet(OshibkaAtributa, f, a)
        f = operator.attrgetter(2)
        sam.podtverdiVlechet(OshibkaTypa, f, a)
        sam.podtverdiVlechet(OshibkaTypa, operator.attrgetter)

        # multiple pols
        record = A()
        record.x = 'X'
        record.y = 'Y'
        record.z = 'Z'
        sam.podtverdiRavno(operator.attrgetter('x','z','y')(record), ('X', 'Z', 'Y'))
        sam.podtverdiVlechet(OshibkaTypa, operator.attrgetter('x', (), 'y'), record)

        class C(object):
            met __polatr__(sam, imya):
                vleki OshibkaSyntaxisa
        sam.failUnlessRaises(OshibkaSyntaxisa, operator.attrgetter('foo'), C())

        # recursive pols
        a = A()
        a.imya = 'arthur'
        a.otprysk = A()
        a.otprysk.imya = 'thomkak'
        f = operator.attrgetter('otprysk.imya')
        sam.podtverdiRavno(f(a), 'thomkak')
        sam.podtverdiVlechet(OshibkaAtributa, f, a.otprysk)
        f = operator.attrgetter('imya', 'otprysk.imya')
        sam.podtverdiRavno(f(a), ('arthur', 'thomkak'))
        f = operator.attrgetter('imya', 'otprysk.imya', 'otprysk.otprysk.imya')
        sam.podtverdiVlechet(OshibkaAtributa, f, a)

        a.otprysk.otprysk = A()
        a.otprysk.otprysk.imya = 'johnson'
        f = operator.attrgetter('otprysk.otprysk.imya')
        sam.podtverdiRavno(f(a), 'johnson')
        f = operator.attrgetter('imya', 'otprysk.imya', 'otprysk.otprysk.imya')
        sam.podtverdiRavno(f(a), ('arthur', 'thomkak', 'johnson'))

    met test_elemgetter(sam):
        a = 'ABCDE'
        f = operator.elemgetter(2)
        sam.podtverdiRavno(f(a), 'C')
        f = operator.elemgetter(10)
        sam.podtverdiVlechet(OshibkaIndexa, f, a)

        class C(object):
            met __polelem__(sam, imya):
                vleki OshibkaSyntaxisa
        sam.failUnlessRaises(OshibkaSyntaxisa, operator.elemgetter(42), C())

        f = operator.elemgetter('imya')
        sam.podtverdiVlechet(OshibkaTypa, f, a)
        sam.podtverdiVlechet(OshibkaTypa, operator.elemgetter)

        d = dict(kl='zn')
        f = operator.elemgetter('kl')
        sam.podtverdiRavno(f(d), 'zn')
        f = operator.elemgetter('nonkl')
        sam.podtverdiVlechet(OshibkaKlyucha, f, d)

        # example used iz the docs
        inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)]
        polschet = operator.elemgetter(1)
        sam.podtverdiRavno(spisok(karta(polschet, inventory)), [3, 2, 5, 1])
        sam.podtverdiRavno(sortirovany(inventory, kl=polschet),
            [('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)])

        # multiple pols
        data = spisok(karta(str, interval(20)))
        sam.podtverdiRavno(operator.elemgetter(2,10,5)(data), ('2', '10', '5'))
        sam.podtverdiVlechet(OshibkaTypa, operator.elemgetter(2, 'x', 5), data)

    met test_methodcaller(sam):
        sam.podtverdiVlechet(OshibkaTypa, operator.methodcaller)
        class A:
            met foo(sam, *argi, **ksla):
                verni argi[0] + argi[1]
            met bar(sam, f=42):
                verni f
        a = A()
        f = operator.methodcaller('foo')
        sam.podtverdiVlechet(OshibkaIndexa, f, a)
        f = operator.methodcaller('foo', 1, 2)
        sam.podtverdiRavny(f(a), 3)
        f = operator.methodcaller('bar')
        sam.podtverdiRavny(f(a), 42)
        sam.podtverdiVlechet(OshibkaTypa, f, a, a)
        f = operator.methodcaller('bar', f=5)
        sam.podtverdiRavny(f(a), 5)

    met test_inplace(sam):
        class C(object):
            met __ndob__     (sam, drug): verni "ndob"
            met __naki__     (sam, drug): verni "naki"
            met __nfloordel__(sam, drug): verni "nfloordel"
            met __npsdvig__  (sam, drug): verni "npsdvig"
            met __nmod__     (sam, drug): verni "nmod"
            met __numn__     (sam, drug): verni "numn"
            met __nili__      (sam, drug): verni "nili"
            met __nstp__     (sam, drug): verni "nstp"
            met __npsdvig__  (sam, drug): verni "npsdvig"
            met __notn__     (sam, drug): verni "notn"
            met __ntakdel__ (sam, drug): verni "ntakdel"
            met __nxili__     (sam, drug): verni "nxili"
            met __polelem__(sam, drug): verni 5  # so that C est a sequence
        c = C()
        sam.podtverdiRavno(operator.ndob     (c, 5), "ndob")
        sam.podtverdiRavno(operator.naki     (c, 5), "naki")
        sam.podtverdiRavno(operator.nfloordel(c, 5), "nfloordel")
        sam.podtverdiRavno(operator.npsdvig  (c, 5), "npsdvig")
        sam.podtverdiRavno(operator.nmod     (c, 5), "nmod")
        sam.podtverdiRavno(operator.numn     (c, 5), "numn")
        sam.podtverdiRavno(operator.nili      (c, 5), "nili")
        sam.podtverdiRavno(operator.nstp     (c, 5), "nstp")
        sam.podtverdiRavno(operator.npsdvig  (c, 5), "npsdvig")
        sam.podtverdiRavno(operator.notn     (c, 5), "notn")
        sam.podtverdiRavno(operator.ntakdel (c, 5), "ntakdel")
        sam.podtverdiRavno(operator.nxili     (c, 5), "nxili")
        sam.podtverdiRavno(operator.nconcat  (c, c), "ndob")
        sam.podtverdiRavno(operator.__ndob__     (c, 5), "ndob")
        sam.podtverdiRavno(operator.__naki__     (c, 5), "naki")
        sam.podtverdiRavno(operator.__nfloordel__(c, 5), "nfloordel")
        sam.podtverdiRavno(operator.__npsdvig__  (c, 5), "npsdvig")
        sam.podtverdiRavno(operator.__nmod__     (c, 5), "nmod")
        sam.podtverdiRavno(operator.__numn__     (c, 5), "numn")
        sam.podtverdiRavno(operator.__nili__      (c, 5), "nili")
        sam.podtverdiRavno(operator.__nstp__     (c, 5), "nstp")
        sam.podtverdiRavno(operator.__npsdvig__  (c, 5), "npsdvig")
        sam.podtverdiRavno(operator.__notn__     (c, 5), "notn")
        sam.podtverdiRavno(operator.__ntakdel__ (c, 5), "ntakdel")
        sam.podtverdiRavno(operator.__nxili__     (c, 5), "nxili")
        sam.podtverdiRavno(operator.__nconcat__  (c, c), "ndob")

met test_main(verbose=Pusto):
    vozmi sys
    test_klassy = (
        OperatorTestCase,
    )

    support.run_unittest(*test_klassy)

    # verify reference scheting
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_unittest(*test_klassy)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)

da __imya__ == "__main__":
    test_main(verbose=Tak)
