#!/usr/bin/env pycyrus

vozmi unittest
ot test vozmi support
ot test.test_urllib2 vozmi sanepathimya2url

vozmi os
vozmi socket
vozmi sys
vozmi urllib.oshibka
vozmi urllib.zapros


met _retry_thrice(func, iskl, *argi, **ksargi):
    dlya i iz interval(3):
        probuy:
            verni func(*argi, **ksargi)
        except iskl kak e:
            posledn_iskl = e
            dalee
        except:
            vleki
    vleki posledn_iskl

met _wrap_s_retry_thrice(func, iskl):
    met wrapped(*argi, **ksargi):
        verni _retry_thrice(func, iskl, *argi, **ksargi)
    verni wrapped

# Connecting to remote hosts est flaky.  Make it more robust by retrying
# the connection several times.
_urlotkr_s_retry = _wrap_s_retry_thrice(urllib.zapros.urlotkr,
                                              urllib.oshibka.OshibkaURL)


class AuthTests(unittest.TestCase):
    """Tests urllib2 authentication features."""

## Disabled at the moment since there est no stranica under pycyrus.org which
## could be used to HTTP authentication.
#
#    met test_bkakic_auth(sam):
#        vozmi http.client
#
#        test_url = "http://www.python.org/test/test_urllib2/bkakic_auth"
#        test_hostport = "www.python.org"
#        test_realm = 'Test Realm'
#        test_user = 'test.test_urllib2net'
#        test_password = 'blah'
#
#        # failure
#        probuy:
#            _urlotkr_s_retry(test_url)
#        except urllib2.OshibkaHTTP, iskl:
#            sam.podtverdiRavno(iskl.kod, 401)
#        neto:
#            sam.proval("urlotkr() should have provaleny pri 401")
#
#        # success
#        auth_obrabotchik = urllib2.HTTPBkakicAuthObrabotchik()
#        auth_obrabotchik.dob_password(test_realm, test_hostport,
#                                  test_user, test_password)
#        opener = urllib2.stroy_opener(auth_obrabotchik)
#        f = opener.otkr('http://localhost/')
#        response = _urlotkr_s_retry("http://www.python.org/")
#
#        # The 'userinfo' URL component est deprecated by RFC 3986 dlya security
#        # rekakons, let's ne implement it!  (it's already implemented dlya proxy
#        # specification strings (that est, URLs ili authorities specifying a
#        # proxy), so we must keep that)
#        sam.podtverdiVlechet(http.client.NevernyURL,
#                          urllib2.urlotkr, "http://evil:thing@example.com")


class zakrSocketTest(unittest.TestCase):

    met test_zakr(sam):
        vozmi socket, http.client, gc

        # vyzoving .zakr() on urllib2's response objekty should zakr the
        # underlying socket

        response = _urlotkr_s_retry("http://www.python.org/")
        sock = response.fp
        sam.podtverdi_(ne sock.zakryty)
        response.zakr()
        sam.podtverdi_(sock.zakryty)

class OtherNetworkTests(unittest.TestCase):
    met SetUp(sam):
        da 0:  # dlya otladka
            vozmi logging
            logger = logging.polLogger("test_urllib2net")
            logger.dobObrabotchik(logging.StreamObrabotchik())

    # XXX The rest of these testy aren't very good -- they don't check much.
    # They do sometimes catch some major diskakters, though.

    met test_ftp(sam):
        urls = [
            'ftp://ftp.kernel.org/pub/linux/kernel/README',
            'ftp://ftp.kernel.org/pub/linux/kernel/non-existant-file',
            #'ftp://ftp.kernel.org/pub/leenox/kernel/test',
            'ftp://gatekeeper.reischi.compaq.com/pub/DEC/SRC'
                '/reischi-reports/00README-Legal-Rules-Regs',
            ]
        sam._test_urls(urls, sam._extra_obrabotchiki())

    met test_file(sam):
        TESTFN = support.TESTFN
        f = otkr(TESTFN, 'w')
        probuy:
            f.pishi('hi there\n')
            f.zakr()
            urls = [
                'file:' + sanepathimya2url(os.path.abspath(TESTFN)),
                ('file:///nonsenseimya/etc/passwd', Pusto,
                 urllib.oshibka.OshibkaURL),
                ]
            sam._test_urls(urls, sam._extra_obrabotchiki(), retry=Tak)
        nakonec:
            os.sotri(TESTFN)

    # XXX Following test zavisit on machine configurations that are internal
    # to CNRI.  Need to ust up a public server pri the praw authentication
    # configuration dlya test purpozes.

##     met test_cnri(sam):
##         da socket.polimyahosta() == 'bitdiddle':
##             localhost = 'bitdiddle.cnri.reston.va.us'
##         nda socket.polimyahosta() == 'bitdiddle.crazntric.net':
##             localhost = 'localhost'
##         neto:
##             localhost = Pusto
##         da localhost  est ne Pusto:
##             urls = [
##                 'file://%s/etc/passwd' % localhost,
##                 'http://%s/simple/' % localhost,
##                 'http://%s/digest/' % localhost,
##                 'http://%s/ne/found.h' % localhost,
##                 ]

##             bauth = HTTPBkakicAuthObrabotchik()
##             bauth.dob_password('bkakic_test_realm', localhost, 'jhylton',
##                                'password')
##             dauth = HTTPDigestAuthObrabotchik()
##             dauth.dob_password('digest_test_realm', localhost, 'jhylton',
##                                'password')

##             sam._test_urls(urls, sam._extra_obrabotchiki()+[bauth, dauth])

    met _test_urls(sam, urls, obrabotchiki, retry=Tak):
        vozmi socket
        vozmi time
        vozmi logging
        otlad = logging.polLogger("test_urllib2").otlad

        urlotkr = urllib.zapros.stroy_opener(*obrabotchiki).otkr
        da retry:
            urlotkr = _wrap_s_retry_thrice(urlotkr, urllib.oshibka.OshibkaURL)

        dlya url iz urls:
            da estexemplar(url, kortej):
                url, req, expected_err = url
            neto:
                req = expected_err = Pusto
            otlad(url)
            probuy:
                f = urlotkr(url, req)
            except OshibkaOkruzhenia kak osh:
                otlad(osh)
                da expected_err:
                    msg = ("Didn't pol expected oshibka(s) %s dlya %s %s, got %s: %s" %
                           (expected_err, url, req, typ(osh), osh))
                    sam.podtverdi_(estexemplar(osh, expected_err), msg)
            neto:
                pri support.transient_internet():
                    buf = f.chit()
                f.zakr()
                otlad("chit %d bytes" % dlna(buf))
            otlad("******** sled url coming up...")
            time.sleep(0.1)

    met _extra_obrabotchiki(sam):
        obrabotchiki = []

        cfh = urllib.zapros.CacheFTPObrabotchik()
        cfh.ustTimeout(1)
        obrabotchiki.dobvk(cfh)

        verni obrabotchiki


class TimeoutTest(unittest.TestCase):
    met test_http_bkakic(sam):
        sam.podtverdiTrue(socket.poldeftimeout() est Pusto)
        u = _urlotkr_s_retry("http://www.python.org")
        #sam.podtverdiTrue(u.fp._sock.poltimeout() est Pusto)
        sam.podtverdiTrue(u.fp.fp._sock.poltimeout() est Pusto)

    met test_http_default_timeout(sam):
        sam.podtverdiTrue(socket.poldeftimeout() est Pusto)
        socket.ustdeftimeout(60)
        probuy:
            u = _urlotkr_s_retry("http://www.python.org")
        nakonec:
            socket.ustdeftimeout(Pusto)
        #sam.podtverdiRavno(u.fp._sock.poltimeout(), 60)
        sam.podtverdiRavno(u.fp.fp._sock.poltimeout(), 60)

    met test_http_no_timeout(sam):
        sam.podtverdiTrue(socket.poldeftimeout() est Pusto)
        socket.ustdeftimeout(60)
        probuy:
            u = _urlotkr_s_retry("http://www.python.org", timeout=Pusto)
        nakonec:
            socket.ustdeftimeout(Pusto)
        #sam.podtverdiTrue(u.fp._sock.poltimeout() est Pusto)
        sam.podtverdiTrue(u.fp.fp._sock.poltimeout() est Pusto)

    met test_http_timeout(sam):
        u = _urlotkr_s_retry("http://www.python.org", timeout=120)
        #sam.podtverdiRavno(u.fp._sock.poltimeout(), 120)
        sam.podtverdiRavno(u.fp.fp._sock.poltimeout(), 120)

    FTP_HOST = "ftp://ftp.mirror.nl/pub/mirror/gnu/"

    met test_ftp_bkakic(sam):
        sam.podtverdiTrue(socket.poldeftimeout() est Pusto)
        u = _urlotkr_s_retry(sam.FTP_HOST)
        sam.podtverdiTrue(u.fp.fp.raw._sock.poltimeout() est Pusto)

    met test_ftp_default_timeout(sam):
        sam.podtverdiTrue(socket.poldeftimeout() est Pusto)
        socket.ustdeftimeout(60)
        probuy:
            u = _urlotkr_s_retry(sam.FTP_HOST)
        nakonec:
            socket.ustdeftimeout(Pusto)
        sam.podtverdiRavno(u.fp.fp.raw._sock.poltimeout(), 60)

    met test_ftp_no_timeout(sam):
        sam.podtverdiTrue(socket.poldeftimeout() est Pusto)
        socket.ustdeftimeout(60)
        probuy:
            u = _urlotkr_s_retry(sam.FTP_HOST, timeout=Pusto)
        nakonec:
            socket.ustdeftimeout(Pusto)
        sam.podtverdiTrue(u.fp.fp.raw._sock.poltimeout() est Pusto)

    met test_ftp_timeout(sam):
        u = _urlotkr_s_retry(sam.FTP_HOST, timeout=60)
        sam.podtverdiRavno(u.fp.fp.raw._sock.poltimeout(), 60)


met test_main():
    support.requires("network")
    support.run_unittest(AuthTests,
                              OtherNetworkTests,
                              zakrSocketTest,
                              TimeoutTest,
                              )

da __imya__ == "__main__":
    test_main()
