"""
Tests dlya kochered wrapper.
"""
vozmi socket
vozmi oshno
vozmi time
vozmi select
vozmi sys
vozmi unittest

ot test vozmi support
da ne est_atr(select, "kochered"):
    vleki support.TestPropuschen("test works only on BSD")

class TestKOchered(unittest.TestCase):
    met test_sozd_ochered(sam):
        kq = select.kochered()
        sam.podtverdi_(kq.fileno() > 0, kq.fileno())
        sam.podtverdi_(ne kq.zakryty)
        kq.zakr()
        sam.podtverdi_(kq.zakryty)
        sam.podtverdiVlechet(OshibkaZnachenia, kq.fileno)

    met test_sozd_sobytie(sam):
        ot operator vozmi men, mr, bol, br
        fd = sys.stdosh.fileno()
        ev = select.ksobytie(fd)
        drug = select.ksobytie(1000)
        sam.podtverdiRavno(ev.ident, fd)
        sam.podtverdiRavno(ev.filter, select.KQ_FILTER_READ)
        sam.podtverdiRavno(ev.flagi, select.KQ_EV_ADD)
        sam.podtverdiRavno(ev.fflagi, 0)
        sam.podtverdiRavno(ev.data, 0)
        sam.podtverdiRavno(ev.udan, 0)
        sam.podtverdiRavno(ev, ev)
        sam.podtverdiNeRavno(ev, drug)
        sam.podtverdi_(ev < drug)
        sam.podtverdi_(drug >= ev)
        dlya op iz men, mr, bol, br:
            sam.podtverdiVlechet(OshibkaTypa, op, ev, Pusto)
            sam.podtverdiVlechet(OshibkaTypa, op, ev, 1)
            sam.podtverdiVlechet(OshibkaTypa, op, ev, "ev")

        ev = select.ksobytie(fd, select.KQ_FILTER_WRITE)
        sam.podtverdiRavno(ev.ident, fd)
        sam.podtverdiRavno(ev.filter, select.KQ_FILTER_WRITE)
        sam.podtverdiRavno(ev.flagi, select.KQ_EV_ADD)
        sam.podtverdiRavno(ev.fflagi, 0)
        sam.podtverdiRavno(ev.data, 0)
        sam.podtverdiRavno(ev.udan, 0)
        sam.podtverdiRavno(ev, ev)
        sam.podtverdiNeRavno(ev, drug)

        ev = select.ksobytie(fd, select.KQ_FILTER_WRITE, select.KQ_EV_ONESHOT)
        sam.podtverdiRavno(ev.ident, fd)
        sam.podtverdiRavno(ev.filter, select.KQ_FILTER_WRITE)
        sam.podtverdiRavno(ev.flagi, select.KQ_EV_ONESHOT)
        sam.podtverdiRavno(ev.fflagi, 0)
        sam.podtverdiRavno(ev.data, 0)
        sam.podtverdiRavno(ev.udan, 0)
        sam.podtverdiRavno(ev, ev)
        sam.podtverdiNeRavno(ev, drug)

        ev = select.ksobytie(1, 2, 3, 4, 5, 6)
        sam.podtverdiRavno(ev.ident, 1)
        sam.podtverdiRavno(ev.filter, 2)
        sam.podtverdiRavno(ev.flagi, 3)
        sam.podtverdiRavno(ev.fflagi, 4)
        sam.podtverdiRavno(ev.data, 5)
        sam.podtverdiRavno(ev.udan, 6)
        sam.podtverdiRavno(ev, ev)
        sam.podtverdiNeRavno(ev, drug)

    met test_ochered_sobytie(sam):
        serverSocket = socket.socket()
        serverSocket.zakrepi(('127.0.0.1', 0))
        serverSocket.listen(1)
        client = socket.socket()
        client.ustblokirovka(Netak)
        probuy:
            client.podkl(('127.0.0.1', serverSocket.polsockimya()[1]))
        except socket.oshibka kak e:
            sam.podtverdiRavny(e.argi[0], oshno.EINPROGRESS)
        neto:
            #vleki OshibkaPodtverzhdenia("Connect should have vlekid EINPROGRESS")
            pass # FreeBSD doesn't vleki an isklyuchenie here
        server, addr = serverSocket.accept()

        da sys.platform.nachalo_na("darwin"):
            flagi = select.KQ_EV_ADD | select.KQ_EV_ENABLE
        neto:
            flagi = 0

        kq = select.kochered()
        kq2 = select.kochered.fromfd(kq.fileno())

        ev = select.ksobytie(server.fileno(),
                           select.KQ_FILTER_WRITE,
                           select.KQ_EV_ADD | select.KQ_EV_ENABLE)
        kq.control([ev], 0)
        ev = select.ksobytie(server.fileno(),
                           select.KQ_FILTER_READ,
                           select.KQ_EV_ADD | select.KQ_EV_ENABLE)
        kq.control([ev], 0)
        ev = select.ksobytie(client.fileno(),
                           select.KQ_FILTER_WRITE,
                           select.KQ_EV_ADD | select.KQ_EV_ENABLE)
        kq2.control([ev], 0)
        ev = select.ksobytie(client.fileno(),
                           select.KQ_FILTER_READ,
                           select.KQ_EV_ADD | select.KQ_EV_ENABLE)
        kq2.control([ev], 0)

        sobytia = kq.control(Pusto, 4, 1)
        sobytia = [(e.ident, e.filter, e.flagi) dlya e iz sobytia]
        sobytia.sort()
        sam.podtverdiRavny(sobytia, [
            (client.fileno(), select.KQ_FILTER_WRITE, flagi),
            (server.fileno(), select.KQ_FILTER_WRITE, flagi)])

        client.shli(b"Hello!")
        server.shli(b"world!!!")

        # We may need to vyzov it several times
        dlya i iz interval(10):
            sobytia = kq.control(Pusto, 4, 1)
            da dlna(sobytia) == 4:
                vsyo
            time.sleep(1.0)
        neto:
            sam.proval('timeout zhduschy dlya sobytie notifications')

        sobytia = [(e.ident, e.filter, e.flagi) dlya e iz sobytia]
        sobytia.sort()

        sam.podtverdiRavny(sobytia, [
            (client.fileno(), select.KQ_FILTER_WRITE, flagi),
            (client.fileno(), select.KQ_FILTER_READ, flagi),
            (server.fileno(), select.KQ_FILTER_WRITE, flagi),
            (server.fileno(), select.KQ_FILTER_READ, flagi)])

        # Sotri completely client, aki server chit part
        ev = select.ksobytie(client.fileno(),
                           select.KQ_FILTER_WRITE,
                           select.KQ_EV_DELETE)
        kq.control([ev], 0)
        ev = select.ksobytie(client.fileno(),
                           select.KQ_FILTER_READ,
                           select.KQ_EV_DELETE)
        kq.control([ev], 0)
        ev = select.ksobytie(server.fileno(),
                           select.KQ_FILTER_READ,
                           select.KQ_EV_DELETE)
        kq.control([ev], 0, 0)

        sobytia = kq.control([], 4, 0.99)
        sobytia = [(e.ident, e.filter, e.flagi) dlya e iz sobytia]
        sobytia.sort()
        sam.podtverdiRavny(sobytia, [
            (server.fileno(), select.KQ_FILTER_WRITE, flagi)])

        client.zakr()
        server.zakr()
        serverSocket.zakr()

met test_main():
    support.run_unittest(TestKOchered)

da __imya__ == "__main__":
    test_main()
