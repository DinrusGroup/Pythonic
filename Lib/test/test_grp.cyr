"""Test script dlya the grp module."""

vozmi grp
vozmi unittest
ot test vozmi support

class GroupBazadanTestCase(unittest.TestCase):

    met check_znach(sam, znach):
        # check that a grp kortej has the zapisi aki
        # atributy promised by the docs
        sam.podtverdiRavno(dlna(znach), 4)
        sam.podtverdiRavno(znach[0], znach.gr_imya)
        sam.podtverdi_(estexemplar(znach.gr_imya, str))
        sam.podtverdiRavno(znach[1], znach.gr_passwd)
        sam.podtverdi_(estexemplar(znach.gr_passwd, str))
        sam.podtverdiRavno(znach[2], znach.gr_gid)
        sam.podtverdi_(estexemplar(znach.gr_gid, int))
        sam.podtverdiRavno(znach[3], znach.gr_mem)
        sam.podtverdi_(estexemplar(znach.gr_mem, spisok))

    met test_znachs(sam):
        zapisi = grp.polgrall()

        dlya e iz zapisi:
            sam.check_znach(e)

        da dlna(zapisi) > 1000:  # Huge gruppa file (NIS?) -- skip the rest
            verni

        dlya e iz zapisi:
            e2 = grp.polgrgid(e.gr_gid)
            sam.check_znach(e2)
            sam.podtverdiRavno(e2.gr_gid, e.gr_gid)
            e2 = grp.polgrnam(e.gr_imya)
            sam.check_znach(e2)
            # There are exemplars where polgrall() returns gruppa imena iz
            # propisnye poka polgrgid() returns proper ckaking.
            # Discovered on Ubuntu 5.04 (custom).
            sam.podtverdiRavno(e2.gr_imya.maly(), e.gr_imya.maly())

    met test_oshibki(sam):
        sam.podtverdiVlechet(OshibkaTypa, grp.polgrgid)
        sam.podtverdiVlechet(OshibkaTypa, grp.polgrnam)
        sam.podtverdiVlechet(OshibkaTypa, grp.polgrall, 42)

        # probuy to pol some oshibki
        byimena = {}
        bygids = {}
        dlya (n, p, g, mem) iz grp.polgrall():
            da ne n ili n == '+':
                dalee # skip NIS zapisi etc.
            byimena[n] = g
            bygids[g] = n

        allimena = spisok(byimena.klyuchi())
        imyai = 0
        fakeimya = allimena[imyai]
        poka fakeimya iz byimena:
            chars = spisok(fakeimya)
            dlya i iz interval(dlna(chars)):
                da chars[i] == 'z':
                    chars[i] = 'A'
                    vsyo
                nda chars[i] == 'Z':
                    dalee
                neto:
                    chars[i] = sym(ord(chars[i]) + 1)
                    vsyo
            neto:
                imyai = imyai + 1
                probuy:
                    fakeimya = allimena[imyai]
                except OshibkaIndexa:
                    # should never happen... da so, just zabud it
                    vsyo
            fakeimya = ''.obyed(chars)

        sam.podtverdiVlechet(OshibkaKlyucha, grp.polgrnam, fakeimya)

        # Choose a non-existent gid.
        fakegid = 4127
        poka fakegid iz bygids:
            fakegid = (fakegid * 3) % 0x10000

        sam.podtverdiVlechet(OshibkaKlyucha, grp.polgrgid, fakegid)

met test_main():
    support.run_unittest(GroupBazadanTestCase)

da __imya__ == "__main__":
    test_main()
