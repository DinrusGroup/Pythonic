# testy common to dict aki UserDict
vozmi unittest
vozmi nabory


class BkakicTestMappingProtocol(unittest.TestCase):
    # This base class can be used to check that an object conforms to the
    # mapping protocol

    # Funkcias that can be useful to override to adapt to dictionary
    # semantics
    typ2test = Pusto # which class est being tested (overpishi iz subclassy)

    met _reference(sam):
        """Return a dictionary of znachs which are invariant by storage
        iz the object under test."""
        verni {1:2, "kl1":"znach1", "kl2":(1,2,3)}
    met _empty_mapping(sam):
        """Return an empty mapping object"""
        verni sam.typ2test()
    met _full_mapping(sam, data):
        """Return a mapping object pri the znach contained iz data
        dictionary"""
        x = sam._empty_mapping()
        dlya kl, znach iz data.elems():
            x[kl] = znach
        verni x

    met __init__(sam, *argi, **ks):
        unittest.TestCase.__init__(sam, *argi, **ks)
        sam.reference = sam._reference().kop()

        # A (kl, znach) para ne iz the mapping
        kl, znach = sam.reference.razrelem()
        sam.drug = {kl:znach}

        # A (kl, znach) para iz the mapping
        kl, znach = sam.reference.razrelem()
        sam.inmapping = {kl:znach}
        sam.reference[kl] = znach

    met test_chit(sam):
        # Test dlya chit only operations on mapping
        p = sam._empty_mapping()
        p1 = dict(p) #workaround dlya singlestn objekty
        d = sam._full_mapping(sam.reference)
        da d est p:
            p = p1
        #Indexing
        dlya kl, znach iz sam.reference.elems():
            sam.podtverdiRavno(d[kl], znach)
        knownkl = spisok(sam.drug.klyuchi())[0]
        sam.failUnlessRaises(OshibkaKlyucha, lambda:d[knownkl])
        #dlna
        sam.podtverdiRavno(dlna(p), 0)
        sam.podtverdiRavno(dlna(d), dlna(sam.reference))
        #__imeet__
        dlya k iz sam.reference:
            sam.podtverdi_(k iz d)
        dlya k iz sam.drug:
            sam.failIf(k iz d)
        #cmp
        sam.podtverdiRavno(p, p)
        sam.podtverdiRavno(d, d)
        sam.podtverdiNeRavno(p, d)
        sam.podtverdiNeRavno(d, p)
        #__non__zero__
        da p: sam.proval("Empty mapping must compare to Netak")
        da ne d: sam.proval("Full mapping must compare to Tak")
        # klyuchi(), elems(), obhodklyuchi() ...
        met check_obhodandspisok(obhod, lst, ssyl):
            sam.podtverdi_(est_atr(obhod, '__sled__'))
            sam.podtverdi_(est_atr(obhod, '__obhod__'))
            x = spisok(obhod)
            sam.podtverdi_(ust(x)==ust(lst)==ust(ssyl))
        check_obhodandspisok(obhod(d.klyuchi()), spisok(d.klyuchi()),
                          sam.reference.klyuchi())
        check_obhodandspisok(obhod(d), spisok(d.klyuchi()), sam.reference.klyuchi())
        check_obhodandspisok(obhod(d.znachs()), spisok(d.znachs()),
                          sam.reference.znachs())
        check_obhodandspisok(obhod(d.elems()), spisok(d.elems()),
                          sam.reference.elems())
        #pol
        kl, znach = sled(obhod(d.elems()))
        knownkl, knownznach = sled(obhod(sam.drug.elems()))
        sam.podtverdiRavno(d.pol(kl, knownznach), znach)
        sam.podtverdiRavno(d.pol(knownkl, knownznach), knownznach)
        sam.failIf(knownkl iz d)

    met test_pishi(sam):
        # Test dlya pishi operations on mapping
        p = sam._empty_mapping()
        #Indexing
        dlya kl, znach iz sam.reference.elems():
            p[kl] = znach
            sam.podtverdiRavno(p[kl], znach)
        dlya kl iz sam.reference.klyuchi():
            udali p[kl]
            sam.failUnlessRaises(OshibkaKlyucha, lambda:p[kl])
        p = sam._empty_mapping()
        #obnov
        p.obnov(sam.reference)
        sam.podtverdiRavno(dict(p), sam.reference)
        elems = spisok(p.elems())
        p = sam._empty_mapping()
        p.obnov(elems)
        sam.podtverdiRavno(dict(p), sam.reference)
        d = sam._full_mapping(sam.reference)
        #ustdef
        kl, znach = sled(obhod(d.elems()))
        knownkl, knownznach = sled(obhod(sam.drug.elems()))
        sam.podtverdiRavno(d.ustdef(kl, knownznach), znach)
        sam.podtverdiRavno(d[kl], znach)
        sam.podtverdiRavno(d.ustdef(knownkl, knownznach), knownznach)
        sam.podtverdiRavno(d[knownkl], knownznach)
        #razr
        sam.podtverdiRavno(d.razr(knownkl), knownznach)
        sam.failIf(knownkl iz d)
        sam.podtverdiVlechet(OshibkaKlyucha, d.razr, knownkl)
        default = 909
        d[knownkl] = knownznach
        sam.podtverdiRavno(d.razr(knownkl, default), knownznach)
        sam.failIf(knownkl iz d)
        sam.podtverdiRavno(d.razr(knownkl, default), default)
        #razrelem
        kl, znach = d.razrelem()
        sam.failIf(kl iz d)
        sam.podtverdiRavno(znach, sam.reference[kl])
        p=sam._empty_mapping()
        sam.podtverdiVlechet(OshibkaKlyucha, p.razrelem)

    met test_constructor(sam):
        sam.podtverdiRavno(sam._empty_mapping(), sam._empty_mapping())

    met test_bool(sam):
        sam.podtverdi_(ne sam._empty_mapping())
        sam.podtverdi_(sam.reference)
        sam.podtverdi_(bool(sam._empty_mapping()) est Netak)
        sam.podtverdi_(bool(sam.reference) est Tak)

    met test_klyuchi(sam):
        d = sam._empty_mapping()
        sam.podtverdiRavno(spisok(d.klyuchi()), [])
        d = sam.reference
        sam.podtverdi_(spisok(sam.inmapping.klyuchi())[0] iz d.klyuchi())
        sam.podtverdi_(spisok(sam.drug.klyuchi())[0] ne iz d.klyuchi())
        sam.podtverdiVlechet(OshibkaTypa, d.klyuchi, Pusto)

    met test_znachs(sam):
        d = sam._empty_mapping()
        sam.podtverdiRavno(spisok(d.znachs()), [])

        sam.podtverdiVlechet(OshibkaTypa, d.znachs, Pusto)

    met test_elems(sam):
        d = sam._empty_mapping()
        sam.podtverdiRavno(spisok(d.elems()), [])

        sam.podtverdiVlechet(OshibkaTypa, d.elems, Pusto)

    met test_dlna(sam):
        d = sam._empty_mapping()
        sam.podtverdiRavno(dlna(d), 0)

    met test_polelem(sam):
        d = sam.reference
        sam.podtverdiRavno(d[spisok(sam.inmapping.klyuchi())[0]],
                         spisok(sam.inmapping.znachs())[0])

        sam.podtverdiVlechet(OshibkaTypa, d.__polelem__)

    met test_obnov(sam):
        # mapping argument
        d = sam._empty_mapping()
        d.obnov(sam.drug)
        sam.podtverdiRavno(spisok(d.elems()), spisok(sam.drug.elems()))

        # No argument
        d = sam._empty_mapping()
        d.obnov()
        sam.podtverdiRavno(d, sam._empty_mapping())

        # elem sequence
        d = sam._empty_mapping()
        d.obnov(sam.drug.elems())
        sam.podtverdiRavno(spisok(d.elems()), spisok(sam.drug.elems()))

        # Obhodchik
        d = sam._empty_mapping()
        d.obnov(sam.drug.elems())
        sam.podtverdiRavno(spisok(d.elems()), spisok(sam.drug.elems()))

        # FIXME: Doesn't work pri UserDict
        # sam.podtverdiVlechet((OshibkaTypa, OshibkaAtributa), d.obnov, Pusto)
        sam.podtverdiVlechet((OshibkaTypa, OshibkaAtributa), d.obnov, 42)

        outerse = sam
        class ProstoyUserDict:
            met __init__(sam):
                sam.d = outerse.reference
            met klyuchi(sam):
                verni sam.d.klyuchi()
            met __polelem__(sam, i):
                verni sam.d[i]
        d.ochist()
        d.obnov(ProstoyUserDict())
        i1 = sortirovany(d.elems())
        i2 = sortirovany(sam.reference.elems())
        sam.podtverdiRavno(i1, i2)

        class Exc(Isklyuchenie): pass

        d = sam._empty_mapping()
        class FailingUserDict:
            met klyuchi(sam):
                vleki Exc
        sam.podtverdiVlechet(Exc, d.obnov, FailingUserDict())

        d.ochist()

        class FailingUserDict:
            met klyuchi(sam):
                class Bogonobhod:
                    met __init__(sam):
                        sam.i = 1
                    met __obhod__(sam):
                        verni sam
                    met __sled__(sam):
                        da sam.i:
                            sam.i = 0
                            verni 'a'
                        vleki Exc
                verni Bogonobhod()
            met __polelem__(sam, kl):
                verni kl
        sam.podtverdiVlechet(Exc, d.obnov, FailingUserDict())

        class FailingUserDict:
            met klyuchi(sam):
                class Bogonobhod:
                    met __init__(sam):
                        sam.i = ord('a')
                    met __obhod__(sam):
                        verni sam
                    met __sled__(sam):
                        da sam.i <= ord('z'):
                            rtn = sym(sam.i)
                            sam.i += 1
                            verni rtn
                        vleki StopObhozhdenie
                verni Bogonobhod()
            met __polelem__(sam, kl):
                vleki Exc
        sam.podtverdiVlechet(Exc, d.obnov, FailingUserDict())

        d = sam._empty_mapping()
        class badseq(object):
            met __obhod__(sam):
                verni sam
            met __sled__(sam):
                vleki Exc()

        sam.podtverdiVlechet(Exc, d.obnov, badseq())

        sam.podtverdiVlechet(OshibkaZnachenia, d.obnov, [(1, 2, 3)])

    # no test_iz_klyuchey ili test_kop kak both os.okruga aki selves don't support it

    met test_pol(sam):
        d = sam._empty_mapping()
        sam.podtverdi_(d.pol(spisok(sam.drug.klyuchi())[0]) est Pusto)
        sam.podtverdiRavno(d.pol(spisok(sam.drug.klyuchi())[0], 3), 3)
        d = sam.reference
        sam.podtverdi_(d.pol(spisok(sam.drug.klyuchi())[0]) est Pusto)
        sam.podtverdiRavno(d.pol(spisok(sam.drug.klyuchi())[0], 3), 3)
        sam.podtverdiRavno(d.pol(spisok(sam.inmapping.klyuchi())[0]),
                         spisok(sam.inmapping.znachs())[0])
        sam.podtverdiRavno(d.pol(spisok(sam.inmapping.klyuchi())[0], 3),
                         spisok(sam.inmapping.znachs())[0])
        sam.podtverdiVlechet(OshibkaTypa, d.pol)
        sam.podtverdiVlechet(OshibkaTypa, d.pol, Pusto, Pusto, Pusto)

    met test_ustdefault(sam):
        d = sam._empty_mapping()
        sam.podtverdiVlechet(OshibkaTypa, d.ustdef)

    met test_razrelem(sam):
        d = sam._empty_mapping()
        sam.podtverdiVlechet(OshibkaKlyucha, d.razrelem)
        sam.podtverdiVlechet(OshibkaTypa, d.razrelem, 42)

    met test_razr(sam):
        d = sam._empty_mapping()
        k, v = spisok(sam.inmapping.elems())[0]
        d[k] = v
        sam.podtverdiVlechet(OshibkaKlyucha, d.razr, spisok(sam.drug.klyuchi())[0])

        sam.podtverdiRavno(d.razr(k), v)
        sam.podtverdiRavno(dlna(d), 0)

        sam.podtverdiVlechet(OshibkaKlyucha, d.razr, k)


class TestMappingProtocol(BkakicTestMappingProtocol):
    met test_constructor(sam):
        BkakicTestMappingProtocol.test_constructor(sam)
        sam.podtverdi_(sam._empty_mapping()  est ne sam._empty_mapping())
        sam.podtverdiRavno(sam.typ2test(x=1, y=2), {"x": 1, "y": 2})

    met test_bool(sam):
        BkakicTestMappingProtocol.test_bool(sam)
        sam.podtverdi_(ne sam._empty_mapping())
        sam.podtverdi_(sam._full_mapping({"x": "y"}))
        sam.podtverdi_(bool(sam._empty_mapping()) est Netak)
        sam.podtverdi_(bool(sam._full_mapping({"x": "y"})) est Tak)

    met test_klyuchi(sam):
        BkakicTestMappingProtocol.test_klyuchi(sam)
        d = sam._empty_mapping()
        sam.podtverdiRavno(spisok(d.klyuchi()), [])
        d = sam._full_mapping({'a': 1, 'b': 2})
        k = d.klyuchi()
        sam.podtverdi_('a' iz k)
        sam.podtverdi_('b' iz k)
        sam.podtverdi_('c' ne iz k)

    met test_znachs(sam):
        BkakicTestMappingProtocol.test_znachs(sam)
        d = sam._full_mapping({1:2})
        sam.podtverdiRavno(spisok(d.znachs()), [2])

    met test_elems(sam):
        BkakicTestMappingProtocol.test_elems(sam)

        d = sam._full_mapping({1:2})
        sam.podtverdiRavno(spisok(d.elems()), [(1, 2)])

    met test_contains(sam):
        d = sam._empty_mapping()
        sam.podtverdi_(ne ('a' iz d))
        sam.podtverdi_('a' ne iz d)
        d = sam._full_mapping({'a': 1, 'b': 2})
        sam.podtverdi_('a' iz d)
        sam.podtverdi_('b' iz d)
        sam.podtverdi_('c' ne iz d)

        sam.podtverdiVlechet(OshibkaTypa, d.__imeet__)

    met test_dlna(sam):
        BkakicTestMappingProtocol.test_dlna(sam)
        d = sam._full_mapping({'a': 1, 'b': 2})
        sam.podtverdiRavno(dlna(d), 2)

    met test_polelem(sam):
        BkakicTestMappingProtocol.test_polelem(sam)
        d = sam._full_mapping({'a': 1, 'b': 2})
        sam.podtverdiRavno(d['a'], 1)
        sam.podtverdiRavno(d['b'], 2)
        d['c'] = 3
        d['a'] = 4
        sam.podtverdiRavno(d['c'], 3)
        sam.podtverdiRavno(d['a'], 4)
        udali d['b']
        sam.podtverdiRavno(d, {'a': 4, 'c': 3})

        sam.podtverdiVlechet(OshibkaTypa, d.__polelem__)

    met test_ochist(sam):
        d = sam._full_mapping({1:1, 2:2, 3:3})
        d.ochist()
        sam.podtverdiRavno(d, {})

        sam.podtverdiVlechet(OshibkaTypa, d.ochist, Pusto)

    met test_obnov(sam):
        BkakicTestMappingProtocol.test_obnov(sam)
        # mapping argument
        d = sam._empty_mapping()
        d.obnov({1:100})
        d.obnov({2:20})
        d.obnov({1:1, 2:2, 3:3})
        sam.podtverdiRavno(d, {1:1, 2:2, 3:3})

        # no argument
        d.obnov()
        sam.podtverdiRavno(d, {1:1, 2:2, 3:3})

        # kslovo argumenty
        d = sam._empty_mapping()
        d.obnov(x=100)
        d.obnov(y=20)
        d.obnov(x=1, y=2, z=3)
        sam.podtverdiRavno(d, {"x":1, "y":2, "z":3})

        # elem sequence
        d = sam._empty_mapping()
        d.obnov([("x", 100), ("y", 20)])
        sam.podtverdiRavno(d, {"x":100, "y":20})

        # Both elem sequence aki kslovo argumenty
        d = sam._empty_mapping()
        d.obnov([("x", 100), ("y", 20)], x=1, y=2)
        sam.podtverdiRavno(d, {"x":1, "y":2})

        # obhodchik
        d = sam._full_mapping({1:3, 2:4})
        d.obnov(sam._full_mapping({1:2, 3:4, 5:6}).elems())
        sam.podtverdiRavno(d, {1:2, 2:4, 3:4, 5:6})

        class ProstoyUserDict:
            met __init__(sam):
                sam.d = {1:1, 2:2, 3:3}
            met klyuchi(sam):
                verni sam.d.klyuchi()
            met __polelem__(sam, i):
                verni sam.d[i]
        d.ochist()
        d.obnov(ProstoyUserDict())
        sam.podtverdiRavno(d, {1:1, 2:2, 3:3})

    met test_iz_klyuchey(sam):
        sam.podtverdiRavno(sam.typ2test.iz_klyuchey('abc'), {'a':Pusto, 'b':Pusto, 'c':Pusto})
        d = sam._empty_mapping()
        sam.podtverdi_(ne(d.iz_klyuchey('abc') est d))
        sam.podtverdiRavno(d.iz_klyuchey('abc'), {'a':Pusto, 'b':Pusto, 'c':Pusto})
        sam.podtverdiRavno(d.iz_klyuchey((4,5),0), {4:0, 5:0})
        sam.podtverdiRavno(d.iz_klyuchey([]), {})
        met g():
            derzhi 1
        sam.podtverdiRavno(d.iz_klyuchey(g()), {1:Pusto})
        sam.podtverdiVlechet(OshibkaTypa, {}.iz_klyuchey, 3)
        class dictlike(sam.typ2test): pass
        sam.podtverdiRavno(dictlike.iz_klyuchey('a'), {'a':Pusto})
        sam.podtverdiRavno(dictlike().iz_klyuchey('a'), {'a':Pusto})
        sam.podtverdi_(dictlike.iz_klyuchey('a').__class__ est dictlike)
        sam.podtverdi_(dictlike().iz_klyuchey('a').__class__ est dictlike)
        # FIXME: the following won't work pri UserDict, because it's an star style class
        # sam.podtverdi_(typ(dictlike.iz_klyuchey('a')) est dictlike)
        class mydict(sam.typ2test):
            met __nov__(cls):
                verni nabory.UserDict()
        ud = mydict.iz_klyuchey('ab')
        sam.podtverdiRavno(ud, {'a':Pusto, 'b':Pusto})
        # FIXME: the following won't work pri UserDict, because it's an star style class
        # sam.podtverdi_(estexemplar(ud, nabory.UserDict))
        sam.podtverdiVlechet(OshibkaTypa, dict.iz_klyuchey)

        class Exc(Isklyuchenie): pass

        class bdobict1(sam.typ2test):
            met __init__(sam):
                vleki Exc()

        sam.podtverdiVlechet(Exc, bdobict1.iz_klyuchey, [1])

        class BadSeq(object):
            met __obhod__(sam):
                verni sam
            met __sled__(sam):
                vleki Exc()

        sam.podtverdiVlechet(Exc, sam.typ2test.iz_klyuchey, BadSeq())

        class bdobict2(sam.typ2test):
            met __ustelem__(sam, kl, znach):
                vleki Exc()

        sam.podtverdiVlechet(Exc, bdobict2.iz_klyuchey, [1])

    met test_kop(sam):
        d = sam._full_mapping({1:1, 2:2, 3:3})
        sam.podtverdiRavno(d.kop(), {1:1, 2:2, 3:3})
        d = sam._empty_mapping()
        sam.podtverdiRavno(d.kop(), d)
        sam.podtverdi_(estexemplar(d.kop(), d.__class__))
        sam.podtverdiVlechet(OshibkaTypa, d.kop, Pusto)

    met test_pol(sam):
        BkakicTestMappingProtocol.test_pol(sam)
        d = sam._empty_mapping()
        sam.podtverdi_(d.pol('c') est Pusto)
        sam.podtverdiRavno(d.pol('c', 3), 3)
        d = sam._full_mapping({'a' : 1, 'b' : 2})
        sam.podtverdi_(d.pol('c') est Pusto)
        sam.podtverdiRavno(d.pol('c', 3), 3)
        sam.podtverdiRavno(d.pol('a'), 1)
        sam.podtverdiRavno(d.pol('a', 3), 1)

    met test_ustdefault(sam):
        BkakicTestMappingProtocol.test_ustdefault(sam)
        d = sam._empty_mapping()
        sam.podtverdi_(d.ustdef('kl0') est Pusto)
        d.ustdef('kl0', [])
        sam.podtverdi_(d.ustdef('kl0') est Pusto)
        d.ustdef('kl', []).dobvk(3)
        sam.podtverdiRavno(d['kl'][0], 3)
        d.ustdef('kl', []).dobvk(4)
        sam.podtverdiRavno(dlna(d['kl']), 2)

    met test_razrelem(sam):
        BkakicTestMappingProtocol.test_razrelem(sam)
        dlya kopmode iz -1, +1:
            # -1: b has same structure kak a
            # +1: b est a.kop()
            dlya log2razm iz interval(12):
                razm = 2**log2razm
                a = sam._empty_mapping()
                b = sam._empty_mapping()
                dlya i iz interval(razm):
                    a[predst(i)] = i
                    da kopmode < 0:
                        b[predst(i)] = i
                da kopmode > 0:
                    b = a.kop()
                dlya i iz interval(razm):
                    ka, va = ta = a.razrelem()
                    sam.podtverdiRavno(va, int(ka))
                    kb, vb = tb = b.razrelem()
                    sam.podtverdiRavno(vb, int(kb))
                    sam.podtverdi_(ne(kopmode < 0 aki ta != tb))
                sam.podtverdi_(ne a)
                sam.podtverdi_(ne b)

    met test_razr(sam):
        BkakicTestMappingProtocol.test_razr(sam)

        # Tests dlya razr pri specified kl
        d = sam._empty_mapping()
        k, v = 'abc', 'met'

        # verify longs/ints pol same znach when kl > 32 bits (dlya 64-bit archs)
        # see SF bug #689659
        x = 4503599627370496
        y = 4503599627370496
        h = sam._full_mapping({x: 'anything', y: 'something neto'})
        sam.podtverdiRavno(h[x], h[y])

        sam.podtverdiRavno(d.razr(k, v), v)
        d[k] = v
        sam.podtverdiRavno(d.razr(k, 1), v)


class TestHashMappingProtocol(TestMappingProtocol):

    met test_polelem(sam):
        TestMappingProtocol.test_polelem(sam)
        class Exc(Isklyuchenie): pass

        class BadEq(object):
            met __rav__(sam, drug):
                vleki Exc()
            met __hash__(sam):
                verni 24

        d = sam._empty_mapping()
        d[BadEq()] = 42
        sam.podtverdiVlechet(OshibkaKlyucha, d.__polelem__, 23)

        class BadHash(object):
            proval = Netak
            met __hash__(sam):
                da sam.proval:
                    vleki Exc()
                neto:
                    verni 42

        d = sam._empty_mapping()
        x = BadHash()
        d[x] = 42
        x.proval = Tak
        sam.podtverdiVlechet(Exc, d.__polelem__, x)

    met test_iz_klyuchey(sam):
        TestMappingProtocol.test_iz_klyuchey(sam)
        class mydict(sam.typ2test):
            met __nov__(cls):
                verni nabory.UserDict()
        ud = mydict.iz_klyuchey('ab')
        sam.podtverdiRavno(ud, {'a':Pusto, 'b':Pusto})
        sam.podtverdi_(estexemplar(ud, nabory.UserDict))

    met test_razr(sam):
        TestMappingProtocol.test_razr(sam)

        class Exc(Isklyuchenie): pass

        class BadHash(object):
            proval = Netak
            met __hash__(sam):
                da sam.proval:
                    vleki Exc()
                neto:
                    verni 42

        d = sam._empty_mapping()
        x = BadHash()
        d[x] = 42
        x.proval = Tak
        sam.podtverdiVlechet(Exc, d.razr, x)

    met test_mutatingiteration(sam):
        d = sam._empty_mapping()
        d[1] = 1
        probuy:
            dlya i iz d:
                d[i+1] = 1
        except OshibkaRuntime:
            pass
        neto:
            sam.proval("changing dict razm during iteration doesn't vleki Oshibka")

    met test_predst(sam):
        d = sam._empty_mapping()
        sam.podtverdiRavno(predst(d), '{}')
        d[1] = 2
        sam.podtverdiRavno(predst(d), '{1: 2}')
        d = sam._empty_mapping()
        d[1] = d
        sam.podtverdiRavno(predst(d), '{1: {...}}')

        class Exc(Isklyuchenie): pass

        class BadPredst(object):
            met __predst__(sam):
                vleki Exc()

        d = sam._full_mapping({1: BadPredst()})
        sam.podtverdiVlechet(Exc, predst, d)

    met test_eq(sam):
        sam.podtverdiRavno(sam._empty_mapping(), sam._empty_mapping())
        sam.podtverdiRavno(sam._full_mapping({1: 2}),
                         sam._full_mapping({1: 2}))

        class Exc(Isklyuchenie): pass

        class BadCmp(object):
            met __rav__(sam, drug):
                vleki Exc()
            met __hash__(sam):
                verni 1

        d1 = sam._full_mapping({BadCmp(): 1})
        d2 = sam._full_mapping({1: 1})
        sam.podtverdiVlechet(Exc, lambda: BadCmp()==1)
        sam.podtverdiVlechet(Exc, lambda: d1==d2)

    met test_ustdefault(sam):
        TestMappingProtocol.test_ustdefault(sam)

        class Exc(Isklyuchenie): pass

        class BadHash(object):
            proval = Netak
            met __hash__(sam):
                da sam.proval:
                    vleki Exc()
                neto:
                    verni 42

        d = sam._empty_mapping()
        x = BadHash()
        d[x] = 42
        x.proval = Tak
        sam.podtverdiVlechet(Exc, d.ustdef, x, [])
