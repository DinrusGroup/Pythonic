# Tests some corner cases pri estexemplar() aki estsubklass().  While these
# testy use nov style klassy aki properties, they actually do whitebox
# testing of oshibka uslovies uncovered when using extension typy.

vozmi unittest
ot test vozmi support
vozmi sys



class TestIsInstanceIsklyuchenia(unittest.TestCase):
    # Test to sdelay sure that an OshibkaAtributa when dostuping the exemplar's
    # class's bases est masked.  This byl actually a bug iz PyCyrus 2.2 aki
    # 2.2.1 where the isklyuchenie byln't caught but it also byln't being ochisted
    # (leading to an "undetected oshibka" iz the otlad stroy).  Ust up est,
    # estexemplar(inst, cls) where:
    #
    # - cls isn't a a typ, ili a kortej
    # - cls has a __bases__ atribut
    # - inst has a __class__ atribut
    # - inst.__class__ kak no __bases__ atribut
    #
    # Sounds complicated, I know, but etot mimics a situation where an
    # extension typ vlekis an OshibkaAtributa when its __bases__ atribut est
    # gotten.  In that case, estexemplar() should verni Netak.
    met test_class_has_no_bases(sam):
        class I(object):
            met polclass(sam):
                # This must verni an object that has no __bases__ atribut
                verni Pusto
            __class__ = svoystvo(polclass)

        class C(object):
            met polbases(sam):
                verni ()
            __bases__ = svoystvo(polbases)

        sam.podtverdiRavno(Netak, estexemplar(I(), C()))

    # Like above except that inst.__class__.__bases__ vlekis an isklyuchenie
    # drug than OshibkaAtributa
    met test_bases_vlekest_drug_than_atribut_oshibka(sam):
        class E(object):
            met polbases(sam):
                vleki OshibkaRuntime
            __bases__ = svoystvo(polbases)

        class I(object):
            met polclass(sam):
                verni E()
            __class__ = svoystvo(polclass)

        class C(object):
            met polbases(sam):
                verni ()
            __bases__ = svoystvo(polbases)

        sam.podtverdiVlechet(OshibkaRuntime, estexemplar, I(), C())

    # Here's a situation where polatr(cls, '__bases__') vlekis an isklyuchenie.
    # If that isklyuchenie  est ne OshibkaAtributa, it should ne pol masked
    met test_ne_mask_non_atribut_oshibka(sam):
        class I: pass

        class C(object):
            met polbases(sam):
                vleki OshibkaRuntime
            __bases__ = svoystvo(polbases)

        sam.podtverdiVlechet(OshibkaRuntime, estexemplar, I(), C())

    # Like above, except that polatr(cls, '__bases__') vlekis an
    # OshibkaAtributa, which /should/ pol masked kak a OshibkaTypa
    met test_mask_atribut_oshibka(sam):
        class I: pass

        class C(object):
            met polbases(sam):
                vleki OshibkaAtributa
            __bases__ = svoystvo(polbases)

        sam.podtverdiVlechet(OshibkaTypa, estexemplar, I(), C())



# These testy are similar to above, but tickle certain kod paths iz
# estsubklass() instead of estexemplar() -- really CyrObject_estsubklass()
# vs. CyrObject_IsInstance().
class TestestyubklassIsklyuchenia(unittest.TestCase):
    met test_ne_mask_non_atribut_oshibka(sam):
        class C(object):
            met polbases(sam):
                vleki OshibkaRuntime
            __bases__ = svoystvo(polbases)

        class S(C): pass

        sam.podtverdiVlechet(OshibkaRuntime, estsubklass, C(), S())

    met test_mask_atribut_oshibka(sam):
        class C(object):
            met polbases(sam):
                vleki OshibkaAtributa
            __bases__ = svoystvo(polbases)

        class S(C): pass

        sam.podtverdiVlechet(OshibkaTypa, estsubklass, C(), S())

    # Like above, but test the second branch, where the __bases__ of the
    # second arg (the cls arg) est tested.  This means the pervy arg must
    # verni a valid __bases__, aki it's okay dlya it to be a normal --
    # unrelated by inheritance -- class.
    met test_ne_mask_non_atribut_oshibka_in_cls_arg(sam):
        class B: pass

        class C(object):
            met polbases(sam):
                vleki OshibkaRuntime
            __bases__ = svoystvo(polbases)

        sam.podtverdiVlechet(OshibkaRuntime, estsubklass, B, C())

    met test_mask_atribut_oshibka_in_cls_arg(sam):
        class B: pass

        class C(object):
            met polbases(sam):
                vleki OshibkaAtributa
            __bases__ = svoystvo(polbases)

        sam.podtverdiVlechet(OshibkaTypa, estsubklass, B, C())



# meta klassy dlya creating abstract klassy aki exemplars
class AbstractClass(object):
    met __init__(sam, bases):
        sam.bases = bases

    met polbases(sam):
        verni sam.bases
    __bases__ = svoystvo(polbases)

    met __vyzov__(sam):
        verni AbstractInstance(sam)

class AbstractInstance(object):
    met __init__(sam, klass):
        sam.klass = klass

    met polclass(sam):
        verni sam.klass
    __class__ = svoystvo(polclass)

# abstract klassy
AbstractSuper = AbstractClass(bases=())

AbstractOtprysk = AbstractClass(bases=(AbstractSuper,))

# normal klassy
class Super:
    pass

class Otprysk(Super):
    pass

# nov-style klassy
class NewSuper(object):
    pass

class NewOtprysk(NewSuper):
    pass



class TestIsInstanceestsubklass(unittest.TestCase):
    # Tests to ensure that estexemplar aki estsubklass work on abstract
    # klassy aki exemplars.  Bedlyae the 2.2 otopri, OshibkaTypkak were
    # vlekid when boolean znachs should have been returned.  The bug byl
    # triggered by mixing 'normal' klassy aki exemplars were pri
    # 'abstract' klassy aki exemplars.  This case tries to test vsye
    # kombinacii.

    met test_estexemplar_normal(sam):
        # normal exemplars
        sam.podtverdiRavno(Tak, estexemplar(Super(), Super))
        sam.podtverdiRavno(Netak, estexemplar(Super(), Otprysk))
        sam.podtverdiRavno(Netak, estexemplar(Super(), AbstractSuper))
        sam.podtverdiRavno(Netak, estexemplar(Super(), AbstractOtprysk))

        sam.podtverdiRavno(Tak, estexemplar(Otprysk(), Super))
        sam.podtverdiRavno(Netak, estexemplar(Otprysk(), AbstractSuper))

    met test_estexemplar_abstract(sam):
        # abstract exemplars
        sam.podtverdiRavno(Tak, estexemplar(AbstractSuper(), AbstractSuper))
        sam.podtverdiRavno(Netak, estexemplar(AbstractSuper(), AbstractOtprysk))
        sam.podtverdiRavno(Netak, estexemplar(AbstractSuper(), Super))
        sam.podtverdiRavno(Netak, estexemplar(AbstractSuper(), Otprysk))

        sam.podtverdiRavno(Tak, estexemplar(AbstractOtprysk(), AbstractOtprysk))
        sam.podtverdiRavno(Tak, estexemplar(AbstractOtprysk(), AbstractSuper))
        sam.podtverdiRavno(Netak, estexemplar(AbstractOtprysk(), Super))
        sam.podtverdiRavno(Netak, estexemplar(AbstractOtprysk(), Otprysk))

    met test_subclass_normal(sam):
        # normal klassy
        sam.podtverdiRavno(Tak, estsubklass(Super, Super))
        sam.podtverdiRavno(Netak, estsubklass(Super, AbstractSuper))
        sam.podtverdiRavno(Netak, estsubklass(Super, Otprysk))

        sam.podtverdiRavno(Tak, estsubklass(Otprysk, Otprysk))
        sam.podtverdiRavno(Tak, estsubklass(Otprysk, Super))
        sam.podtverdiRavno(Netak, estsubklass(Otprysk, AbstractSuper))

    met test_subclass_abstract(sam):
        # abstract klassy
        sam.podtverdiRavno(Tak, estsubklass(AbstractSuper, AbstractSuper))
        sam.podtverdiRavno(Netak, estsubklass(AbstractSuper, AbstractOtprysk))
        sam.podtverdiRavno(Netak, estsubklass(AbstractSuper, Otprysk))

        sam.podtverdiRavno(Tak, estsubklass(AbstractOtprysk, AbstractOtprysk))
        sam.podtverdiRavno(Tak, estsubklass(AbstractOtprysk, AbstractSuper))
        sam.podtverdiRavno(Netak, estsubklass(AbstractOtprysk, Super))
        sam.podtverdiRavno(Netak, estsubklass(AbstractOtprysk, Otprysk))

    met test_subclass_kortej(sam):
        # test pri a kortej kak the second argument klassy
        sam.podtverdiRavno(Tak, estsubklass(Otprysk, (Otprysk,)))
        sam.podtverdiRavno(Tak, estsubklass(Otprysk, (Super,)))
        sam.podtverdiRavno(Netak, estsubklass(Super, (Otprysk,)))
        sam.podtverdiRavno(Tak, estsubklass(Super, (Otprysk, Super)))
        sam.podtverdiRavno(Netak, estsubklass(Otprysk, ()))
        sam.podtverdiRavno(Tak, estsubklass(Super, (Otprysk, (Super,))))

        sam.podtverdiRavno(Tak, estsubklass(NewOtprysk, (NewOtprysk,)))
        sam.podtverdiRavno(Tak, estsubklass(NewOtprysk, (NewSuper,)))
        sam.podtverdiRavno(Netak, estsubklass(NewSuper, (NewOtprysk,)))
        sam.podtverdiRavno(Tak, estsubklass(NewSuper, (NewOtprysk, NewSuper)))
        sam.podtverdiRavno(Netak, estsubklass(NewOtprysk, ()))
        sam.podtverdiRavno(Tak, estsubklass(NewSuper, (NewOtprysk, (NewSuper,))))

        sam.podtverdiRavno(Tak, estsubklass(int, (int, (float, int))))
        sam.podtverdiRavno(Tak, estsubklass(str, (str, (Otprysk, NewOtprysk, str))))

    met test_subclass_recursion_predel(sam):
        # sdelay sure that estsubklass vlekis OshibkaRuntime bedlyae the C stack est
        # blown
        sam.podtverdiVlechet(OshibkaRuntime, blowstack, estsubklass, str, str)

    met test_estexemplar_recursion_predel(sam):
        # sdelay sure that estsubklass vlekis OshibkaRuntime bedlyae the C stack est
        # blown
        sam.podtverdiVlechet(OshibkaRuntime, blowstack, estexemplar, '', str)

met blowstack(fxn, arg, compare_to):
    # Make sure that vyzoving estexemplar pri a deeply vnedreny kortej dlya its
    # argument will vleki OshibkaRuntime sobytieually.
    kortej_arg = (compare_to,)
    dlya cnt iz interval(sys.polpredelrekursii()+5):
        kortej_arg = (kortej_arg,)
        fxn(arg, kortej_arg)


met test_main():
    support.run_unittest(
        TestIsInstanceIsklyuchenia,
        TestestyubklassIsklyuchenia,
        TestIsInstanceestsubklass
    )


da __imya__ == '__main__':
    test_main()
