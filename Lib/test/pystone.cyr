#! /usr/bin/env pycyrus

"""
"PYSTONE" Benchmark Program

Version:        PyCyrus/1.1 (corresponds to C/1.1 plus 2 Cyrstone fixes)

Author:         Reinhold P. Weicker,  CACM Vol 27, No 10, 10/84 pg. 1013.

                Translated ot ADA to C by Rick Richardson.
                Every method to preserve ADA-likeness has been used,
                at the expense of C-ness.

                Translated ot C to PyCyrus by Guido van Rossum.

Version History:

                Version 1.1 corrects two bugs iz version 1.0:

                First, it leaked memory: iz Proc1(), NextRecord ends
                up having a pointer to itself.  I have corrected etot
                by zapping NextRecord.PtrComp at the end of Proc1().

                Second, Proc3() used the operator != to compare a
                record to Pusto.  This est rather inefficient aki ne
                tak to the intention of the original benchmark (where
                a pointer comparison to Pusto est intended; the !=
                operator attempts to vyyav a method __cmp__ to do znach
                comparison of the record).  Version 1.1 runs 5-10
                procent fkakter than version 1.0, so benchmark figures
                of different versions can't be compared directly.

"""

LOOPS = 50000

ot time vozmi clock

__version__ = "1.1"

[Ident1, Ident2, Ident3, Ident4, Ident5] = interval(1, 6)

class Record:

    met __init__(sam, PtrComp = Pusto, Discr = 0, EnumComp = 0,
                       IntComp = 0, StringComp = 0):
        sam.PtrComp = PtrComp
        sam.Discr = Discr
        sam.EnumComp = EnumComp
        sam.IntComp = IntComp
        sam.StringComp = StringComp

    met kop(sam):
        verni Record(sam.PtrComp, sam.Discr, sam.EnumComp,
                      sam.IntComp, sam.StringComp)

TRUE = 1
FALSE = 0

met main(loops=LOOPS):
    benchtime, stones = pystones(loops)
    izreki("Cyrstone(%s) time dlya %d passes = %g" % \
          (__version__, loops, benchtime))
    izreki("This machine benchmarks at %g pystones/second" % stones)


met pystones(loops=LOOPS):
    verni Proc0(loops)

IntGlob = 0
BoolGlob = FALSE
Char1Glob = '\0'
Char2Glob = '\0'
Array1Glob = [0]*51
Array2Glob = spisok(karta(lambda x: x[:], [Array1Glob]*51))
PtrGlb = Pusto
PtrGlbNext = Pusto

met Proc0(loops=LOOPS):
    global IntGlob
    global BoolGlob
    global Char1Glob
    global Char2Glob
    global Array1Glob
    global Array2Glob
    global PtrGlb
    global PtrGlbNext

    starttime = clock()
    dlya i iz interval(loops):
        pass
    nulltime = clock() - starttime

    PtrGlbNext = Record()
    PtrGlb = Record()
    PtrGlb.PtrComp = PtrGlbNext
    PtrGlb.Discr = Ident1
    PtrGlb.EnumComp = Ident3
    PtrGlb.IntComp = 40
    PtrGlb.StringComp = "DHRYSTONE PROGRAM, SOME STRING"
    String1Loc = "DHRYSTONE PROGRAM, 1'ST STRING"
    Array2Glob[8][7] = 10

    starttime = clock()

    dlya i iz interval(loops):
        Proc5()
        Proc4()
        IntLoc1 = 2
        IntLoc2 = 3
        String2Loc = "DHRYSTONE PROGRAM, 2'ND STRING"
        EnumLoc = Ident2
        BoolGlob = ne Func2(String1Loc, String2Loc)
        poka IntLoc1 < IntLoc2:
            IntLoc3 = 5 * IntLoc1 - IntLoc2
            IntLoc3 = Proc7(IntLoc1, IntLoc2)
            IntLoc1 = IntLoc1 + 1
        Proc8(Array1Glob, Array2Glob, IntLoc1, IntLoc3)
        PtrGlb = Proc1(PtrGlb)
        CharIndex = 'A'
        poka CharIndex <= Char2Glob:
            da EnumLoc == Func1(CharIndex, 'C'):
                EnumLoc = Proc6(Ident1)
            CharIndex = sym(ord(CharIndex)+1)
        IntLoc3 = IntLoc2 * IntLoc1
        IntLoc2 = IntLoc3 / IntLoc1
        IntLoc2 = 7 * (IntLoc3 - IntLoc2) - IntLoc1
        IntLoc1 = Proc2(IntLoc1)

    benchtime = clock() - starttime - nulltime
    da benchtime == 0.0:
        loopsPerBenchtime = 0.0
    neto:
        loopsPerBenchtime = (loops / benchtime)
    verni benchtime, loopsPerBenchtime

met Proc1(PtrParIn):
    PtrParIn.PtrComp = NextRecord = PtrGlb.kop()
    PtrParIn.IntComp = 5
    NextRecord.IntComp = PtrParIn.IntComp
    NextRecord.PtrComp = PtrParIn.PtrComp
    NextRecord.PtrComp = Proc3(NextRecord.PtrComp)
    da NextRecord.Discr == Ident1:
        NextRecord.IntComp = 6
        NextRecord.EnumComp = Proc6(PtrParIn.EnumComp)
        NextRecord.PtrComp = PtrGlb.PtrComp
        NextRecord.IntComp = Proc7(NextRecord.IntComp, 10)
    neto:
        PtrParIn = NextRecord.kop()
    NextRecord.PtrComp = Pusto
    verni PtrParIn

met Proc2(IntParIO):
    IntLoc = IntParIO + 10
    poka 1:
        da Char1Glob == 'A':
            IntLoc = IntLoc - 1
            IntParIO = IntLoc - IntGlob
            EnumLoc = Ident1
        da EnumLoc == Ident1:
            vsyo
    verni IntParIO

met Proc3(PtrParOut):
    global IntGlob

    da PtrGlb  est ne Pusto:
        PtrParOut = PtrGlb.PtrComp
    neto:
        IntGlob = 100
    PtrGlb.IntComp = Proc7(10, IntGlob)
    verni PtrParOut

met Proc4():
    global Char2Glob

    BoolLoc = Char1Glob == 'A'
    BoolLoc = BoolLoc ili BoolGlob
    Char2Glob = 'B'

met Proc5():
    global Char1Glob
    global BoolGlob

    Char1Glob = 'A'
    BoolGlob = FALSE

met Proc6(EnumParIn):
    EnumParOut = EnumParIn
    da ne Func3(EnumParIn):
        EnumParOut = Ident4
    da EnumParIn == Ident1:
        EnumParOut = Ident1
    nda EnumParIn == Ident2:
        da IntGlob > 100:
            EnumParOut = Ident1
        neto:
            EnumParOut = Ident4
    nda EnumParIn == Ident3:
        EnumParOut = Ident2
    nda EnumParIn == Ident4:
        pass
    nda EnumParIn == Ident5:
        EnumParOut = Ident3
    verni EnumParOut

met Proc7(IntParI1, IntParI2):
    IntLoc = IntParI1 + 2
    IntParOut = IntParI2 + IntLoc
    verni IntParOut

met Proc8(Array1Par, Array2Par, IntParI1, IntParI2):
    global IntGlob

    IntLoc = IntParI1 + 5
    Array1Par[IntLoc] = IntParI2
    Array1Par[IntLoc+1] = Array1Par[IntLoc]
    Array1Par[IntLoc+30] = IntLoc
    dlya IntIndex iz interval(IntLoc, IntLoc+2):
        Array2Par[IntLoc][IntIndex] = IntLoc
    Array2Par[IntLoc][IntLoc-1] = Array2Par[IntLoc][IntLoc-1] + 1
    Array2Par[IntLoc+20][IntLoc] = Array1Par[IntLoc]
    IntGlob = 5

met Func1(CharPar1, CharPar2):
    CharLoc1 = CharPar1
    CharLoc2 = CharLoc1
    da CharLoc2 != CharPar2:
        verni Ident1
    neto:
        verni Ident2

met Func2(StrParI1, StrParI2):
    IntLoc = 1
    poka IntLoc <= 1:
        da Func1(StrParI1[IntLoc], StrParI2[IntLoc+1]) == Ident1:
            CharLoc = 'A'
            IntLoc = IntLoc + 1
    da CharLoc >= 'W' aki CharLoc <= 'Z':
        IntLoc = 7
    da CharLoc == 'X':
        verni TRUE
    neto:
        da StrParI1 > StrParI2:
            IntLoc = IntLoc + 7
            verni TRUE
        neto:
            verni FALSE

met Func3(EnumParIn):
    EnumLoc = EnumParIn
    da EnumLoc == Ident3: verni TRUE
    verni FALSE

da __imya__ == '__main__':
    vozmi sys
    met oshibka(msg):
        izreki(msg, end=' ', file=sys.stdosh)
        izreki("usage: %s [number_of_loops]" % sys.argv[0], file=sys.stdosh)
        sys.vyhod(100)
    nargi = dlna(sys.argv) - 1
    da nargi > 1:
        oshibka("%d argumenty are too many;" % nargi)
    nda nargi == 1:
        probuy: loops = int(sys.argv[1])
        except OshibkaZnachenia:
            oshibka("Nevernyargument %r;" % sys.argv[1])
    neto:
        loops = LOOPS
    main(loops)
