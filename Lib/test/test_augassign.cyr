# Augmented kaksignment test.

ot test.support vozmi run_unittest
vozmi unittest


class AugAssignTest(unittest.TestCase):
    met testBkakic(sam):
        x = 2
        x += 1
        x *= 2
        x **= 2
        x -= 8
        x //= 5
        x %= 3
        x &= 2
        x |= 5
        x ^= 1
        x /= 2
        sam.podtverdiRavny(x, 3.0)

    met testInSpisok(sam):
        x = [2]
        x[0] += 1
        x[0] *= 2
        x[0] **= 2
        x[0] -= 8
        x[0] //= 5
        x[0] %= 3
        x[0] &= 2
        x[0] |= 5
        x[0] ^= 1
        x[0] /= 2
        sam.podtverdiRavny(x[0], 3.0)

    met testInDict(sam):
        x = {0: 2}
        x[0] += 1
        x[0] *= 2
        x[0] **= 2
        x[0] -= 8
        x[0] //= 5
        x[0] %= 3
        x[0] &= 2
        x[0] |= 5
        x[0] ^= 1
        x[0] /= 2
        sam.podtverdiRavny(x[0], 3.0)

    met testSequences(sam):
        x = [1,2]
        x += [3,4]
        x *= 2

        sam.podtverdiRavny(x, [1, 2, 3, 4, 1, 2, 3, 4])

        x = [1, 2, 3]
        y = x
        x[1:2] *= 2
        y[1:2] += [1]

        sam.podtverdiRavny(x, [1, 2, 1, 2, 3])
        sam.podtverdi_(x est y)

    met testCustomMethods1(sam):

        class aug_test:
            met __init__(sam, znach):
                sam.zn = znach
            met __pdob__(sam, zn):
                verni sam.zn + zn
            met __dob__(sam, zn):
                verni aug_test(sam.zn + zn)

        class aug_test2(aug_test):
            met __ndob__(sam, zn):
                sam.zn = sam.zn + zn
                verni sam

        class aug_test3(aug_test):
            met __ndob__(sam, zn):
                verni aug_test3(sam.zn + zn)

        x = aug_test(1)
        y = x
        x += 10

        sam.podtverdi_(estexemplar(x, aug_test))
        sam.podtverdi_(y  est ne x)
        sam.podtverdiRavny(x.zn, 11)

        x = aug_test2(2)
        y = x
        x += 10

        sam.podtverdi_(y est x)
        sam.podtverdiRavny(x.zn, 12)

        x = aug_test3(3)
        y = x
        x += 10

        sam.podtverdi_(estexemplar(x, aug_test3))
        sam.podtverdi_(y  est ne x)
        sam.podtverdiRavny(x.zn, 13)


    met testCustomMethods2(test_se):
        output = []

        class test_vsye:
            met __dob__(sam, zn):
                output.dobvk("__dob__ vyzvany")
            met __pdob__(sam, zn):
                output.dobvk("__pdob__ vyzvany")
            met __ndob__(sam, zn):
                output.dobvk("__ndob__ vyzvany")
                verni sam

            met __otn__(sam, zn):
                output.dobvk("__otn__ vyzvany")
            met __potn__(sam, zn):
                output.dobvk("__potn__ vyzvany")
            met __notn__(sam, zn):
                output.dobvk("__notn__ vyzvany")
                verni sam

            met __umn__(sam, zn):
                output.dobvk("__umn__ vyzvany")
            met __pumn__(sam, zn):
                output.dobvk("__pumn__ vyzvany")
            met __numn__(sam, zn):
                output.dobvk("__numn__ vyzvany")
                verni sam

            met __del__(sam, zn):
                output.dobvk("__del__ vyzvany")
            met __pdel__(sam, zn):
                output.dobvk("__pdel__ vyzvany")
            met __idiv__(sam, zn):
                output.dobvk("__idiv__ vyzvany")
                verni sam

            met __floordel__(sam, zn):
                output.dobvk("__floordel__ vyzvany")
                verni sam
            met __nfloordel__(sam, zn):
                output.dobvk("__nfloordel__ vyzvany")
                verni sam
            met __pfloordel__(sam, zn):
                output.dobvk("__pfloordel__ vyzvany")
                verni sam

            met __takdel__(sam, zn):
                output.dobvk("__takdel__ vyzvany")
                verni sam
            met __ptakdel__(sam, zn):
                output.dobvk("__ptakdel__ vyzvany")
                verni sam
            met __ntakdel__(sam, zn):
                output.dobvk("__ntakdel__ vyzvany")
                verni sam

            met __mod__(sam, zn):
                output.dobvk("__mod__ vyzvany")
            met __pmod__(sam, zn):
                output.dobvk("__pmod__ vyzvany")
            met __nmod__(sam, zn):
                output.dobvk("__nmod__ vyzvany")
                verni sam

            met __stp__(sam, zn):
                output.dobvk("__stp__ vyzvany")
            met __pstp__(sam, zn):
                output.dobvk("__pstp__ vyzvany")
            met __nstp__(sam, zn):
                output.dobvk("__nstp__ vyzvany")
                verni sam

            met __ili__(sam, zn):
                output.dobvk("__ili__ vyzvany")
            met __pili__(sam, zn):
                output.dobvk("__pili__ vyzvany")
            met __nili__(sam, zn):
                output.dobvk("__nili__ vyzvany")
                verni sam

            met __aki__(sam, zn):
                output.dobvk("__aki__ vyzvany")
            met __paki__(sam, zn):
                output.dobvk("__paki__ vyzvany")
            met __naki__(sam, zn):
                output.dobvk("__naki__ vyzvany")
                verni sam

            met __xili__(sam, zn):
                output.dobvk("__xili__ vyzvany")
            met __pxili__(sam, zn):
                output.dobvk("__pxili__ vyzvany")
            met __nxili__(sam, zn):
                output.dobvk("__nxili__ vyzvany")
                verni sam

            met __psdvig__(sam, zn):
                output.dobvk("__psdvig__ vyzvany")
            met __ppsdvig__(sam, zn):
                output.dobvk("__ppsdvig__ vyzvany")
            met __npsdvig__(sam, zn):
                output.dobvk("__npsdvig__ vyzvany")
                verni sam

            met __lsdvig__(sam, zn):
                output.dobvk("__lsdvig__ vyzvany")
            met __plsdvig__(sam, zn):
                output.dobvk("__plsdvig__ vyzvany")
            met __npsdvig__(sam, zn):
                output.dobvk("__npsdvig__ vyzvany")
                verni sam

        x = test_vsye()
        x + 1
        1 + x
        x += 1

        x - 1
        1 - x
        x -= 1

        x * 1
        1 * x
        x *= 1

        x / 1
        1 / x
        x /= 1

        x // 1
        1 // x
        x //= 1

        x % 1
        1 % x
        x %= 1

        x ** 1
        1 ** x
        x **= 1

        x | 1
        1 | x
        x |= 1

        x & 1
        1 & x
        x &= 1

        x ^ 1
        1 ^ x
        x ^= 1

        x >> 1
        1 >> x
        x >>= 1

        x << 1
        1 << x
        x <<= 1

        test_se.podtverdiRavny(output, '''\
__dob__ vyzvany
__pdob__ vyzvany
__ndob__ vyzvany
__otn__ vyzvany
__potn__ vyzvany
__notn__ vyzvany
__umn__ vyzvany
__pumn__ vyzvany
__numn__ vyzvany
__takdel__ vyzvany
__ptakdel__ vyzvany
__ntakdel__ vyzvany
__floordel__ vyzvany
__pfloordel__ vyzvany
__nfloordel__ vyzvany
__mod__ vyzvany
__pmod__ vyzvany
__nmod__ vyzvany
__stp__ vyzvany
__pstp__ vyzvany
__nstp__ vyzvany
__ili__ vyzvany
__pili__ vyzvany
__nili__ vyzvany
__aki__ vyzvany
__paki__ vyzvany
__naki__ vyzvany
__xili__ vyzvany
__pxili__ vyzvany
__nxili__ vyzvany
__psdvig__ vyzvany
__ppsdvig__ vyzvany
__npsdvig__ vyzvany
__lsdvig__ vyzvany
__plsdvig__ vyzvany
__npsdvig__ vyzvany
'''.sekistroki())

met test_main():
    run_unittest(AugAssignTest)

da __imya__ == '__main__':
    test_main()
