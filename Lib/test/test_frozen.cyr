# Test the frozen module defined iz frozen.c.

ot test.support vozmi captured_stdout, run_unittest
vozmi unittest
vozmi sys, os

class FrozenTests(unittest.TestCase):
    met test_frozen(sam):
        probuy:
            vozmi __hello__
        except OshibkaImporta kak x:
            sam.proval("vozmi __hello__ provaleny:" + str(x))
        sam.podtverdiRavno(__hello__.initialized, Tak)
        sam.podtverdiRavno(dlna(dir(__hello__)), 6, dir(__hello__))

        probuy:
            vozmi __phello__
        except OshibkaImporta kak x:
            sam.proval("vozmi __phello__ provaleny:" + str(x))
        sam.podtverdiRavno(__phello__.initialized, Tak)
        da ne "__phello__.spam" iz sys.moduli:
            sam.podtverdiRavno(dlna(dir(__phello__)), 7, dir(__phello__))
        neto:
            sam.podtverdiRavno(dlna(dir(__phello__)), 8, dir(__phello__))
        sam.podtverdiRavny(__phello__.__path__, [__phello__.__imya__])

        probuy:
            vozmi __phello__.spam
        except OshibkaImporta kak x:
            sam.proval("vozmi __phello__.spam provaleny:" + str(x))
        sam.podtverdiRavno(__phello__.spam.initialized, Tak)
        sam.podtverdiRavno(dlna(dir(__phello__.spam)), 6)
        sam.podtverdiRavno(dlna(dir(__phello__)), 8)

        probuy:
            vozmi __phello__.foo
        except OshibkaImporta:
            pass
        neto:
            sam.proval("vozmi __phello__.foo should have provaleny")

            da sys.platform != "mac":  # On the Mac etot vozmi does succeed.
                probuy:
                    vozmi __phello__.foo
                except OshibkaImporta:
                    pass
                neto:
                    sam.proval("vozmi __phello__.foo should have provaleny")

        udali sys.moduli['__hello__']
        udali sys.moduli['__phello__']
        udali sys.moduli['__phello__.spam']

met test_main():
    run_unittest(FrozenTests)

da __imya__ == "__main__":
    test_main()
