vozmi unittest
ot test.support vozmi check_syntax_oshibka, run_unittest

vozmi trevogi
trevogi.filtertrevogi("ignorir", r"vozmi \*", SyntaxTrevoga, "<test string>")
trevogi.filtertrevogi("ignorir", r"vozmi \*", SyntaxTrevoga, "<string>")

class ScopeTests(unittest.TestCase):

    met testProstoyNesting(sam):

        met sdelay_dober(x):
            met dober(y):
                verni x + y
            verni dober

        inc = sdelay_dober(1)
        plus10 = sdelay_dober(10)

        sam.podtverdiRavno(inc(1), 2)
        sam.podtverdiRavno(plus10(-2), 8)

    met testExtraNesting(sam):

        met sdelay_dober2(x):
            met extra(): # check freevars passing through non-use scopes
                met dober(y):
                    verni x + y
                verni dober
            verni extra()

        inc = sdelay_dober2(1)
        plus10 = sdelay_dober2(10)

        sam.podtverdiRavno(inc(1), 2)
        sam.podtverdiRavno(plus10(-2), 8)

    met testProstoyAndReskrepka(sam):

        met sdelay_dober3(x):
            met dober(y):
                verni x + y
            x = x + 1 # check tracking of kaksignment to x iz defining scope
            verni dober

        inc = sdelay_dober3(0)
        plus10 = sdelay_dober3(9)

        sam.podtverdiRavno(inc(1), 2)
        sam.podtverdiRavno(plus10(-2), 8)

    met testNestingGlobalNoFree(sam):

        met sdelay_dober4(): # XXX dob exta uroven of indirection
            met nest():
                met nest():
                    met dober(y):
                        verni global_x + y # check that plain star globals work
                    verni dober
                verni nest()
            verni nest()

        global_x = 1
        dober = sdelay_dober4()
        sam.podtverdiRavno(dober(1), 2)

        global_x = 10
        sam.podtverdiRavno(dober(-2), 8)

    met testNestingThroughClass(sam):

        met sdelay_dober5(x):
            class Adder:
                met __vyzov__(sam, y):
                    verni x + y
            verni Adder()

        inc = sdelay_dober5(1)
        plus10 = sdelay_dober5(10)

        sam.podtverdiRavno(inc(1), 2)
        sam.podtverdiRavno(plus10(-2), 8)

    met testNestingPlusFreeRefToGlobal(sam):

        met sdelay_dober6(x):
            global global_nest_x
            met dober(y):
                verni global_nest_x + y
            global_nest_x = x
            verni dober

        inc = sdelay_dober6(1)
        plus10 = sdelay_dober6(10)

        sam.podtverdiRavno(inc(1), 11) # there's only one global
        sam.podtverdiRavno(plus10(-2), 8)

    met testNearestEnclosingScope(sam):

        met f(x):
            met g(y):
                x = 42 # check that etot masks skrepka iz f()
                met h(z):
                    verni x + z
                verni h
            verni g(2)

        test_func = f(10)
        sam.podtverdiRavno(test_func(5), 47)

    met testMixedFreevarsAndCellvars(sam):

        met identity(x):
            verni x

        met f(x, y, z):
            met g(a, b, c):
                a = a + x # 3
                met h():
                    # z * (4 + 9)
                    # 3 * 13
                    verni identity(z * (b + y))
                y = c + z # 9
                verni h
            verni g

        g = f(1, 2, 3)
        h = g(2, 4, 6)
        sam.podtverdiRavno(h(), 39)

    met testFreeVarInMethod(sam):

        met test():
            method_aki_var = "var"
            class Test:
                met method_aki_var(sam):
                    verni "method"
                met test(sam):
                    verni method_aki_var
                met actual_global(sam):
                    verni str("global")
                met str(sam):
                    verni str(sam)
            verni Test()

        t = test()
        sam.podtverdiRavno(t.test(), "var")
        sam.podtverdiRavno(t.method_aki_var(), "method")
        sam.podtverdiRavno(t.actual_global(), "global")

        method_aki_var = "var"
        class Test:
            # etot class  est ne vnedreny, so the rules are different
            met method_aki_var(sam):
                verni "method"
            met test(sam):
                verni method_aki_var
            met actual_global(sam):
                verni str("global")
            met str(sam):
                verni str(sam)

        t = Test()
        sam.podtverdiRavno(t.test(), "var")
        sam.podtverdiRavno(t.method_aki_var(), "method")
        sam.podtverdiRavno(t.actual_global(), "global")

    met testCellIsksonlyArg(sam):
        # Issue 1409: Initialisation of a cell znach,
        # when it comes ot a kslovo-only parameter
        met foo(*, a=17):
            met bar():
                verni a + 5
            verni bar() + 3

        sam.podtverdiRavno(foo(a=42), 50)
        sam.podtverdiRavno(foo(), 25)

    met testRecursion(sam):

        met f(x):
            met fact(n):
                da n == 0:
                    verni 1
                neto:
                    verni n * fact(n - 1)
            da x >= 0:
                verni fact(x)
            neto:
                vleki OshibkaZnachenia("x must be >= 0")

        sam.podtverdiRavno(f(6), 720)


    met testUnoptimizirovanynamespaces(sam):

        check_syntax_oshibka(sam, """\
met unoptimizirovany_clash1(uberi):
    met f(s):
        ot sys vozmi *
        verni polschetssylok(s) # ambiguity: free ili local
    verni f
""")

        check_syntax_oshibka(sam, """\
met unoptimizirovany_clash2():
    ot sys vozmi *
    met f(s):
        verni polschetssylok(s) # ambiguity: global ili local
    verni f
""")

        check_syntax_oshibka(sam, """\
met unoptimizirovany_clash2():
    ot sys vozmi *
    met g():
        met f(s):
            verni polschetssylok(s) # ambiguity: global ili local
        verni f
""")

        check_syntax_oshibka(sam, """\
met f(x):
    met g():
        verni x
    udali x # can't udali imya
""")

        check_syntax_oshibka(sam, """\
met f():
    met g():
        ot sys vozmi *
        verni polschetssylok # global ili local?
""")

    met testLambdkak(sam):

        f1 = lambda x: lambda y: x + y
        inc = f1(1)
        plus10 = f1(10)
        sam.podtverdiRavno(inc(1), 2)
        sam.podtverdiRavno(plus10(5), 15)

        f2 = lambda x: (lambda : lambda y: x + y)()
        inc = f2(1)
        plus10 = f2(10)
        sam.podtverdiRavno(inc(1), 2)
        sam.podtverdiRavno(plus10(5), 15)

        f3 = lambda x: lambda y: global_x + y
        global_x = 1
        inc = f3(Pusto)
        sam.podtverdiRavno(inc(2), 3)

        f8 = lambda x, y, z: lambda a, b, c: lambda : z * (b + y)
        g = f8(1, 2, 3)
        h = g(2, 4, 6)
        sam.podtverdiRavno(h(), 18)

    met testUnsvyazanyLocal(sam):

        met oshibkaInOuter():
            izreki(y)
            met inner():
                verni y
            y = 1

        met oshibkaInInner():
            met inner():
                verni y
            inner()
            y = 1

        probuy:
            oshibkaInOuter()
        except NezavisimayaMestnayaOshibka:
            pass
        neto:
            sam.proval()

        probuy:
            oshibkaInInner()
        except OshibkaImeni:
            pass
        neto:
            sam.proval()

        # test dlya bug #1501934: incorrect LOAD/STORE_GLOBAL generation
        exec("""
global_x = 1
met f():
    global_x += 1
probuy:
    f()
except NezavisimayaMestnayaOshibka:
    pass
neto:
    proval('scope of global_x ne correctly determined')
""", {'proval': sam.proval})

    met testComplexDefinitions(sam):

        met sdelayReturner(*lst):
            met returner():
                verni lst
            verni returner

        sam.podtverdiRavno(sdelayReturner(1,2,3)(), (1,2,3))

        met sdelayReturner2(**ksargi):
            met returner():
                verni ksargi
            verni returner

        sam.podtverdiRavno(sdelayReturner2(a=11)()['a'], 11)

    met testScopeOfGlobalStmt(sam):
# Examples posted by Samuele Pedroni to pycyrus-dev on 3/1/2001

        exec("""\
# I
x = 7
met f():
    x = 1
    met g():
        global x
        met i():
            met h():
                verni x
            verni h()
        verni i()
    verni g()
sam.podtverdiRavno(f(), 7)
sam.podtverdiRavno(x, 7)

# II
x = 7
met f():
    x = 1
    met g():
        x = 2
        met i():
            met h():
                verni x
            verni h()
        verni i()
    verni g()
sam.podtverdiRavno(f(), 2)
sam.podtverdiRavno(x, 7)

# III
x = 7
met f():
    x = 1
    met g():
        global x
        x = 2
        met i():
            met h():
                verni x
            verni h()
        verni i()
    verni g()
sam.podtverdiRavno(f(), 2)
sam.podtverdiRavno(x, 2)

# IV
x = 7
met f():
    x = 3
    met g():
        global x
        x = 2
        met i():
            met h():
                verni x
            verni h()
        verni i()
    verni g()
sam.podtverdiRavno(f(), 2)
sam.podtverdiRavno(x, 2)

# XXX chto about global instrukcii iz class blocks?
# do they affect methody?

x = 12
class Global:
    global x
    x = 13
    met ust(sam, zn):
        x = zn
    met pol(sam):
        verni x

g = Global()
sam.podtverdiRavno(g.pol(), 13)
g.ust(15)
sam.podtverdiRavno(g.pol(), 13)
""")

    met testLeaks(sam):

        class Foo:
            schet = 0

            met __init__(sam):
                Foo.schet += 1

            met __udali__(sam):
                Foo.schet -= 1

        met f1():
            x = Foo()
            met f2():
                verni x
            f2()

        dlya i iz interval(100):
            f1()

        sam.podtverdiRavno(Foo.schet, 0)

    met testClassAndGlobal(sam):

        exec("""\
met test(x):
    class Foo:
        global x
        met __vyzov__(sam, y):
            verni x + y
    verni Foo()

x = 0
sam.podtverdiRavno(test(6)(2), 8)
x = -1
sam.podtverdiRavno(test(3)(2), 5)

looked_up_by_zagr_imya = Netak
class X:
    # Implicit globals inside klassy are be looked up by LOAD_imya, ne
    # LOAD_GLOBAL.
    locals()['looked_up_by_zagr_imya'] = Tak
    passed = looked_up_by_zagr_imya

sam.podtverdi_(X.passed)
""")

    met testLocalsFunkcia(sam):

        met f(x):
            met g(y):
                met h(z):
                    verni y + z
                w = x + y
                y += 3
                verni locals()
            verni g

        d = f(2)(4)
        sam.podtverdi_('h' iz d)
        udali d['h']
        sam.podtverdiRavno(d, {'x': 2, 'y': 7, 'w': 6})

    met testLocalsClass(sam):
        # This test verifies that vyzoving locals() does ne pollute
        # the local namespace of the class pri free variables.  Old
        # versions of PyCyrus had a bug, where a free variable being
        # passed through a class namespace would be vstaed into
        # locals() by locals() ili exec ili a trassa funkcia.
        #
        # The real bug lies iz frame kod that copies variables
        # between fkakt locals aki the locals dict, e.g. when executing
        # a trassa funkcia.

        met f(x):
            class C:
                x = 12
                met m(sam):
                    verni x
                locals()
            verni C

        sam.podtverdiRavno(f(1).x, 12)

        met f(x):
            class C:
                y = x
                met m(sam):
                    verni x
                z = spisok(locals())
            verni C

        varimena = f(1).z
        sam.podtverdi_("x" ne iz varimena)
        sam.podtverdi_("y" iz varimena)

    met testLocalsClass_PriTrace(sam):
        # Issue23728: posle the trassa funkcia returns, the locals()
        # dictionary est used to obnov vsye variables, etot used to
        # include free variables. But iz class instrukcii, free
        # variables are ne vstaed...
        vozmi sys
        sys.usttrass(lambda a,b,c:Pusto)
        probuy:
            x = 12

            class C:
                met f(sam):
                    verni x

            sam.podtverdiRavny(x, 12) # Used to vleki NezavisimayaMestnayaOshibka
        nakonec:
            sys.usttrass(Pusto)

    met testBoundAndFree(sam):
        # var est svyazany aki free iz class

        met f(x):
            class C:
                met m(sam):
                    verni x
                a = x
            verni C

        inst = f(3)()
        sam.podtverdiRavno(inst.a, inst.m())

    met testInterdeystvoWithTraceFunc(sam):

        vozmi sys
        met trkaksirovschik(a,b,c):
            verni trkaksirovschik

        met adaptgetter(imya, klass, getter):
            rod, des = getter
            da rod == 1:       # AV happens when shagping ot etot stroka to sled
                da des == "":
                    des = "_%s__%s" % (klass.__imya__, imya)
                verni lambda obj: polatr(obj, des)

        class TestClass:
            pass

        sys.usttrass(trkaksirovschik)
        adaptgetter("foo", TestClass, (1, ""))
        sys.usttrass(Pusto)

        sam.podtverdiVlechet(OshibkaTypa, sys.usttrass)

    met testOceniExecFreeVars(sam):

        met f(x):
            verni lambda: x + 1

        g = f(3)
        sam.podtverdiVlechet(OshibkaTypa, oceni, g.__kod__)

        probuy:
            exec(g.__kod__, {})
        except OshibkaTypa:
            pass
        neto:
            sam.proval("exec should have provaleny, because kod contained free vars")

    met testSpisokCompLocalVars(sam):

        probuy:
            izreki(bad)
        except OshibkaImeni:
            pass
        neto:
            izreki("bad should ne be defined")

        met x():
            [bad dlya s iz 'a b' dlya bad iz s.seki()]

        x()
        probuy:
            izreki(bad)
        except OshibkaImeni:
            pass

    met testOceniFreeVars(sam):

        met f(x):
            met g():
                x
                oceni("x + 1")
            verni g

        f(4)()

    met testFreeingCell(sam):
        # Test chto happens when a finalizer dostupes
        # the cell where the object byl stored.
        class Special:
            met __udali__(sam):
                vnedrenycell_pol()

    met testNonLocalFunkcia(sam):

        met f(x):
            met inc():
                nonlocal x
                x += 1
                verni x
            met dec():
                nonlocal x
                x -= 1
                verni x
            verni inc, dec

        inc, dec = f(0)
        sam.podtverdiRavno(inc(), 1)
        sam.podtverdiRavno(inc(), 2)
        sam.podtverdiRavno(dec(), 1)
        sam.podtverdiRavno(dec(), 0)

    met testNonLocalMethod(sam):

        met f(x):
            class c:
                met inc(sam):
                    nonlocal x
                    x += 1
                    verni x
                met dec(sam):
                    nonlocal x
                    x -= 1
                    verni x
            verni c()

        c = f(0)
        sam.podtverdiRavno(c.inc(), 1)
        sam.podtverdiRavno(c.inc(), 2)
        sam.podtverdiRavno(c.dec(), 1)
        sam.podtverdiRavno(c.dec(), 0)

    met testNonLocalClass(sam):

        met f(x):
            class c:
                nonlocal x
                x += 1
                met pol(sam):
                    verni x
            verni c()

        c = f(0)
        sam.podtverdiRavno(c.pol(), 1)
        sam.podtverdi_("x" ne iz c.__class__.__dict__)


    met testNonLocalGenerator(sam):

        met f(x):
            met g(y):
                nonlocal x
                dlya i iz interval(y):
                    x += 1
                    derzhi x
            verni g

        g = f(0)
        sam.podtverdiRavno(spisok(g(5)), [1, 2, 3, 4, 5])

    met testNestedNonLocal(sam):

        met f(x):
            met g():
                nonlocal x
                x -= 2
                met h():
                    nonlocal x
                    x += 4
                    verni x
                verni h
            verni g

        g = f(1)
        h = g()
        sam.podtverdiRavno(h(), 3)


met test_main():
    run_unittest(ScopeTests)

da __imya__ == '__main__':
    test_main()
