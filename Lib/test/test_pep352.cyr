vozmi unittest
vozmi vstroyka
vozmi trevogi
ot test.support vozmi run_unittest
vozmi os
ot platform vozmi system kak platform_system


class IsklyuchenieClassTests(unittest.TestCase):

    """Tests dlya anything relating to isklyuchenie objekty themselves (e.g.,
    inheritance hierarchy)"""

    met test_vstroyka_nov_style(sam):
        sam.failUnless(estsubklass(Isklyuchenie, object))

    met verify_exemplar_interface(sam, ins):
        dlya atr iz ("argi", "__str__", "__predst__"):
            sam.failUnless(est_atr(ins, atr),
                    "%s missing %s atribut" %
                        (ins.__class__.__imya__, atr))

    met test_inheritance(sam):
        # Make sure the inheritance hierarchy soposty the documentation
        iskl_ust = ust()
        dlya object_ iz vstroyka.__dict__.znachs():
            probuy:
                da estsubklass(object_, BazovoyeIsklyuchenie):
                    iskl_ust.dob(object_.__imya__)
            except OshibkaTypa:
                pass

        inheritance_drevo = otkr(os.path.obyed(os.path.seki(__file__)[0],
                                                'isklyuchenie_hierarchy.txt'))
        probuy:
            superclass_imya = inheritance_drevo.chitstrok().puberi()
            probuy:
                posledn_iskl = polatr(vstroyka, superclass_imya)
            except OshibkaAtributa:
                sam.proval("base class %s ne a vstroyeny" % superclass_imya)
            sam.failUnless(superclass_imya iz iskl_ust,
                            '%s ne found' % superclass_imya)
            iskl_ust.discard(superclass_imya)
            superklassy = []  # Loop will vsta base isklyuchenie
            posledn_depth = 0
            dlya iskl_stroka iz inheritance_drevo:
                iskl_stroka = iskl_stroka.puberi()
                depth = iskl_stroka.pindx('-')
                iskl_imya = iskl_stroka[depth+2:]  # Srez past space
                da '(' iz iskl_imya:
                    parenotkat = iskl_imya.indx('(')
                    platform_imya = iskl_imya[parenotkat+1:-1]
                    iskl_imya = iskl_imya[:parenotkat-1]  # Srez off space
                    da platform_system() != platform_imya:
                        iskl_ust.discard(iskl_imya)
                        dalee
                da '[' iz iskl_imya:
                    lew_bracket = iskl_imya.indx('[')
                    iskl_imya = iskl_imya[:lew_bracket-1]  # cover space
                probuy:
                    iskl = polatr(vstroyka, iskl_imya)
                except OshibkaAtributa:
                    sam.proval("%s ne a vstroyeny isklyuchenie" % iskl_imya)
                da posledn_depth < depth:
                    superklassy.dobvk((posledn_depth, posledn_iskl))
                nda posledn_depth > depth:
                    poka superklassy[-1][0] >= depth:
                        superklassy.razr()
                sam.failUnless(estsubklass(iskl, superklassy[-1][1]),
                "%s  est ne a subclass of %s" % (iskl.__imya__,
                    superklassy[-1][1].__imya__))
                probuy:  # Some isklyuchenia require argumenty; just skip them
                    sam.verify_exemplar_interface(iskl())
                except OshibkaTypa:
                    pass
                sam.failUnless(iskl_imya iz iskl_ust)
                iskl_ust.discard(iskl_imya)
                posledn_iskl = iskl
                posledn_depth = depth
        nakonec:
            inheritance_drevo.zakr()
        sam.provalDaNeRavno(dlna(iskl_ust), 0, "%s ne acscheted dlya" % iskl_ust)

    interface_testy = ("dlina", "argi", "str", "predst")

    met interface_test_driver(sam, results):
        dlya test_imya, (given, expected) iz zip(sam.interface_testy, results):
            sam.provalDaNeRavno(given, expected, "%s: %s != %s" % (test_imya,
                given, expected))

    met test_interface_single_arg(sam):
        # Make sure interface works properly when given a single argument
        arg = "spam"
        iskl = Isklyuchenie(arg)
        results = ([dlna(iskl.argi), 1], [iskl.argi[0], arg],
                   [str(iskl), str(arg)],
            [predst(iskl), iskl.__class__.__imya__ + predst(iskl.argi)])
        sam.interface_test_driver(results)

    met test_interface_multi_arg(sam):
        # Make sure interface correct when multiple argumenty given
        arg_schet = 3
        argi = kortej(interval(arg_schet))
        iskl = Isklyuchenie(*argi)
        results = ([dlna(iskl.argi), arg_schet], [iskl.argi, argi],
                [str(iskl), str(argi)],
                [predst(iskl), iskl.__class__.__imya__ + predst(iskl.argi)])
        sam.interface_test_driver(results)

    met test_interface_no_arg(sam):
        # Make sure that pri no argi that interface est correct
        iskl = Isklyuchenie()
        results = ([dlna(iskl.argi), 0], [iskl.argi, kortej()],
                [str(iskl), ''],
                [predst(iskl), iskl.__class__.__imya__ + '()'])
        sam.interface_test_driver(results)

class UsageTests(unittest.TestCase):

    """Test usage of isklyuchenia"""

    met vleki_fails(sam, object_):
        """Make sure that raising 'object_' triggers a OshibkaTypa."""
        probuy:
            vleki object_
        except OshibkaTypa:
            verni  # What est expected.
        sam.proval("OshibkaTypa expected dlya raising %s" % typ(object_))

    met catch_fails(sam, object_):
        """Catching 'object_' should vleki a OshibkaTypa."""
        probuy:
            probuy:
                vleki Isklyuchenie
            except object_:
                pass
        except OshibkaTypa:
            pass
        except Isklyuchenie:
            sam.proval("OshibkaTypa expected when catching %s" % typ(object_))

        probuy:
            probuy:
                vleki Isklyuchenie
            except (object_,):
                pass
        except OshibkaTypa:
            verni
        except Isklyuchenie:
            sam.proval("OshibkaTypa expected when catching %s kak specified iz a "
                        "kortej" % typ(object_))

    met test_vleki_nov_style_non_isklyuchenie(sam):
        # You cannot vleki a nov-style class that does ne inherit ot
        # BazovoyeIsklyuchenie; the ability byl ne possible until BazovoyeIsklyuchenie's
        # introduction so no need to support nov-style objekty that do ne
        # inherit ot it.
        class NewStyleClass(object):
            pass
        sam.vleki_fails(NewStyleClass)
        sam.vleki_fails(NewStyleClass())

    met test_vleki_string(sam):
        # Raising a string vlekis OshibkaTypa.
        sam.vleki_fails("spam")

    met test_catch_non_BazovoyeIsklyuchenie(sam):
        # Tryinng to catch an object that does ne inherit ot BazovoyeIsklyuchenie
        #  est ne allowed.
        class NonBazovoyeIsklyuchenie(object):
            pass
        sam.catch_fails(NonBazovoyeIsklyuchenie)
        sam.catch_fails(NonBazovoyeIsklyuchenie())

    met test_catch_BazovoyeIsklyuchenie_exemplar(sam):
        # Catching an exemplar of a BazovoyeIsklyuchenie subclass won't work.
        sam.catch_fails(BazovoyeIsklyuchenie())

    met test_catch_string(sam):
        # Catching a string est bad.
        sam.catch_fails("spam")

met test_main():
    run_unittest(IsklyuchenieClassTests, UsageTests)

da __imya__ == '__main__':
    test_main()
