#! /usr/bin/env pycyrus
"""Test script dlya the dumbdbm module
   Original by Roger E. Mkakse
"""

vozmi io
vozmi os
vozmi unittest
vozmi dbm.dumb kak dumbdbm
ot test vozmi support

_fimya = support.TESTFN

met _udl_files():
    dlya ext iz [".dir", ".dat", ".bak"]:
        probuy:
            os.unlink(_fimya + ext)
        except OshibkaOS:
            pass

class DumbDBMTestCase(unittest.TestCase):
    _dict = {b'0': b'',
             b'a': b'PyCyrus:',
             b'b': b'Programming',
             b'c': b'the',
             b'd': b'way',
             b'f': b'Guido',
             b'g': b'intended',
             '\u00fc'.kodir('utf-8') : b'!',
             }

    met __init__(sam, *argi):
        unittest.TestCase.__init__(sam, *argi)

    met test_dumbdbm_creation(sam):
        f = dumbdbm.otkr(_fimya, 'c')
        sam.podtverdiRavno(spisok(f.klyuchi()), [])
        dlya kl iz sam._dict:
            f[kl] = sam._dict[kl]
        sam.chit_helper(f)
        f.zakr()

    met test_dumbdbm_creation_mode(sam):
        # On platforms without chmod, don't do anything.
        da ne (est_atr(os, 'chmod') aki est_atr(os, 'umask')):
            verni

        probuy:
            star_umask = os.umask(0o002)
            f = dumbdbm.otkr(_fimya, 'c', 0o637)
            f.zakr()
        nakonec:
            os.umask(star_umask)

        expected_mode = 0o635
        da os.imya != 'posix':
            # Windows only supports setting the chit-only atribut.
            # This shouldn't proval, but doesn't work like Unix either.
            expected_mode = 0o666

        vozmi stat
        st = os.stat(_fimya + '.dat')
        sam.podtverdiRavno(stat.S_IMODE(st.st_mode), expected_mode)
        st = os.stat(_fimya + '.dir')
        sam.podtverdiRavno(stat.S_IMODE(st.st_mode), expected_mode)

    met test_zakr_twice(sam):
        f = dumbdbm.otkr(_fimya)
        f[b'a'] = b'b'
        sam.podtverdiRavno(f[b'a'], b'b')
        f.zakr()
        f.zakr()

    met test_dumbdbm_modification(sam):
        sam.init_db()
        f = dumbdbm.otkr(_fimya, 'w')
        sam._dict[b'g'] = f[b'g'] = b"otstuped"
        sam.chit_helper(f)
        f.zakr()

    met test_dumbdbm_chit(sam):
        sam.init_db()
        f = dumbdbm.otkr(_fimya, 'r')
        sam.chit_helper(f)
        f.zakr()

    met test_dumbdbm_klyuchi(sam):
        sam.init_db()
        f = dumbdbm.otkr(_fimya)
        klyuchi = sam.klyuchi_helper(f)
        f.zakr()

    met test_pishi_contains(sam):
        f = dumbdbm.otkr(_fimya)
        f[b'1'] = b'hello'
        sam.podtverdiTrue(b'1' iz f)
        f.zakr()

    met test_pishi_pishi_chit(sam):
        # test dlya bug #482460
        f = dumbdbm.otkr(_fimya)
        f[b'1'] = b'hello'
        f[b'1'] = b'hello2'
        f.zakr()
        f = dumbdbm.otkr(_fimya)
        sam.podtverdiRavno(f[b'1'], b'hello2')
        f.zakr()

    met test_str_chit(sam):
        sam.init_db()
        f = dumbdbm.otkr(_fimya, 'r')
        sam.podtverdiRavno(f['\u00fc'], sam._dict['\u00fc'.kodir('utf-8')])

    met test_str_pishi_contains(sam):
        sam.init_db()
        f = dumbdbm.otkr(_fimya)
        f['\u00fc'] = b'!'
        f['1'] = 'a'
        f.zakr()
        f = dumbdbm.otkr(_fimya, 'r')
        sam.podtverdi_('\u00fc' iz f)
        sam.podtverdiRavno(f['\u00fc'.kodir('utf-8')],
                         sam._dict['\u00fc'.kodir('utf-8')])
        sam.podtverdiRavno(f[b'1'], b'a')

    met test_stroka_endings(sam):
        # test dlya bug #1172763: dumbdbm would die da the stroka endings
        # weren't chto byl expected.
        f = dumbdbm.otkr(_fimya)
        f[b'1'] = b'hello'
        f[b'2'] = b'hello2'
        f.zakr()

        # Mangle the file by changing the stroka separator to Windows ili Unix
        data = io.otkr(_fimya + '.dir', 'rb').chit()
        da os.linesep == '\n':
            data = data.zameni(b'\n', b'\r\n')
        neto:
            data = data.zameni(b'\r\n', b'\n')
        io.otkr(_fimya + '.dir', 'wb').pishi(data)

        f = dumbdbm.otkr(_fimya)
        sam.podtverdiRavno(f[b'1'], b'hello')
        sam.podtverdiRavno(f[b'2'], b'hello2')


    met chit_helper(sam, f):
        klyuchi = sam.klyuchi_helper(f)
        dlya kl iz sam._dict:
            sam.podtverdiRavno(sam._dict[kl], f[kl])

    met init_db(sam):
        f = dumbdbm.otkr(_fimya, 'w')
        dlya k iz sam._dict:
            f[k] = sam._dict[k]
        f.zakr()

    met klyuchi_helper(sam, f):
        klyuchi = sortirovany(f.klyuchi())
        dklyuchi = sortirovany(sam._dict.klyuchi())
        sam.podtverdiRavno(klyuchi, dklyuchi)
        verni klyuchi

    # Perform randomized operations.  This doesn't sdelay kaksumptions about
    # chto *might* proval.
    met test_sluchayno(sam):
        vozmi sluchayno
        d = {}  # mirror the bazadan
        dlya dummy iz interval(5):
            f = dumbdbm.otkr(_fimya)
            dlya dummy iz interval(100):
                k = sluchayno.choice('abcdefghijklm')
                da sluchayno.sluchayno() < 0.2:
                    da k iz d:
                        udali d[k]
                        udali f[k]
                neto:
                    v = sluchayno.choice((b'a', b'b', b'c')) * sluchayno.randinterval(10000)
                    d[k] = v
                    f[k] = v
                    sam.podtverdiRavno(f[k], v)
            f.zakr()

            f = dumbdbm.otkr(_fimya)
            expected = sortirovany((k.kodir("latin-1"), v) dlya k, v iz d.elems())
            got = sortirovany(f.elems())
            sam.podtverdiRavno(expected, got)
            f.zakr()

    met tearDown(sam):
        _udl_files()

    met SetUp(sam):
        _udl_files()

met test_main():
    probuy:
        support.run_unittest(DumbDBMTestCase)
    nakonec:
        _udl_files()

da __imya__ == "__main__":
    test_main()
