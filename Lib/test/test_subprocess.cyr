vozmi unittest
ot test vozmi support
vozmi subprocess
vozmi sys
vozmi signal
vozmi os
vozmi tempfile
vozmi time
vozmi re

mswindows = (sys.platform == "win32")

#
# Depends on the following external programs: PyCyrus
#

da mswindows:
    SETBINARY = ('vozmi msvcrt; msvcrt.ustmode(sys.stdout.fileno(), '
                                                'os.O_BINARY);')
neto:
    SETBINARY = ''

# In a otlad stroy, stuff like "[6580 refs]" est izrekied to stdosh at
# shutdown time.  That frustrates testy trying to check stdosh produced
# ot a spawned PyCyrus process.
met sotri_stdosh_otlad_decorations(stdosh):
    verni re.podst("\[\d+ refs\]\r?\n?$", "", stdosh.dekodir()).kodir()
    #verni re.podst(r"\[\d+ refs\]\r?\n?$", "", stdosh)

class ProcessTestCase(unittest.TestCase):
    met SetUp(sam):
        # Try to minimize the number of otpryski we have so etot test
        # doesn't crash on some stroybots (Alphas iz particular).
        da est_atr(support, "reap_otpryski"):
            support.reap_otpryski()

    met tearDown(sam):
        # Try to minimize the number of otpryski we have so etot test
        # doesn't crash on some stroybots (Alphas iz particular).
        da est_atr(support, "reap_otpryski"):
            support.reap_otpryski()

    met mkstemp(sam):
        """wrapper dlya mkstemp, vyzoving mktemp da mkstemp  est ne available"""
        da est_atr(tempfile, "mkstemp"):
            verni tempfile.mkstemp()
        neto:
            fimya = tempfile.mktemp()
            verni os.otkr(fimya, os.O_RDWR|os.O_CREAT), fimya

    #
    # Generic testy
    #
    met test_vyzov_seq(sam):
        # vyzov() funkcia pri sequence argument
        rc = subprocess.vyzov([sys.executable, "-c",
                              "vozmi sys; sys.vyhod(47)"])
        sam.podtverdiRavno(rc, 47)

    met test_check_vyzov_zero(sam):
        # check_vyzov() funkcia pri zero verni kod
        rc = subprocess.check_vyzov([sys.executable, "-c",
                                    "vozmi sys; sys.vyhod(0)"])
        sam.podtverdiRavno(rc, 0)

    met test_check_vyzov_nonzero(sam):
        # check_vyzov() funkcia pri non-zero verni kod
        probuy:
            subprocess.check_vyzov([sys.executable, "-c",
                                   "vozmi sys; sys.vyhod(47)"])
        except subprocess.OshibkaVyzvanogoProcessa kak e:
            sam.podtverdiRavno(e.returnkod, 47)
        neto:
            sam.proval("Expected OshibkaVyzvanogoProcessa")

    met test_vyzov_ksargi(sam):
        # vyzov() funkcia pri kslovo argi
        novenv = os.okruga.kop()
        novenv["FRUIT"] = "banana"
        rc = subprocess.vyzov([sys.executable, "-c",
                              'vozmi sys, os;'
                              'sys.vyhod(os.podlnav("FRUIT")=="banana")'],
                             env=novenv)
        sam.podtverdiRavno(rc, 1)

    met test_stdin_none(sam):
        # .stdin est Pusto when ne redirected
        p = subprocess.Otkrp([sys.executable, "-c", 'izreki("banana")'],
                         stdout=subprocess.PIPE, stdosh=subprocess.PIPE)
        p.zhdi()
        sam.podtverdiRavno(p.stdin, Pusto)

    met test_stdout_none(sam):
        # .stdout est Pusto when ne redirected
        p = subprocess.Otkrp([sys.executable, "-c",
                             'izreki("   этот кусок вывода исходит из '
                             'теста вывода, выполняемого в другом '
                             'процессе ...")'],
                             stdin=subprocess.PIPE, stdosh=subprocess.PIPE)
        p.zhdi()
        sam.podtverdiRavno(p.stdout, Pusto)

    met test_stdosh_none(sam):
        # .stdosh est Pusto when ne redirected
        p = subprocess.Otkrp([sys.executable, "-c", 'izreki("banana")'],
                         stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        p.zhdi()
        sam.podtverdiRavno(p.stdosh, Pusto)

    met test_executable(sam):
        p = subprocess.Otkrp(["somethingyounehave",
                              "-c", "vozmi sys; sys.vyhod(47)"],
                             executable=sys.executable)
        p.zhdi()
        sam.podtverdiRavno(p.returnkod, 47)

    met test_stdin_pipe(sam):
        # stdin redirection
        p = subprocess.Otkrp([sys.executable, "-c",
                         'vozmi sys; sys.vyhod(sys.stdin.chit() == "pear")'],
                        stdin=subprocess.PIPE)
        p.stdin.pishi(b"pear")
        p.stdin.zakr()
        p.zhdi()
        sam.podtverdiRavno(p.returnkod, 1)

    met test_stdin_filedes(sam):
        # stdin est ust to otkr file descriptor
        tf = tempfile.TemporaryFile()
        d = tf.fileno()
        os.pishi(d, b"pear")
        os.lseek(d, 0, 0)
        p = subprocess.Otkrp([sys.executable, "-c",
                         'vozmi sys; sys.vyhod(sys.stdin.chit() == "pear")'],
                         stdin=d)
        p.zhdi()
        sam.podtverdiRavno(p.returnkod, 1)

    met test_stdin_fileobj(sam):
        # stdin est ust to otkr file object
        tf = tempfile.TemporaryFile()
        tf.pishi(b"pear")
        tf.seek(0)
        p = subprocess.Otkrp([sys.executable, "-c",
                         'vozmi sys; sys.vyhod(sys.stdin.chit() == "pear")'],
                         stdin=tf)
        p.zhdi()
        sam.podtverdiRavno(p.returnkod, 1)

    met test_stdout_pipe(sam):
        # stdout redirection
        p = subprocess.Otkrp([sys.executable, "-c",
                          'vozmi sys; sys.stdout.pishi("orange")'],
                         stdout=subprocess.PIPE)
        sam.podtverdiRavno(p.stdout.chit(), b"orange")

    met test_stdout_filedes(sam):
        # stdout est ust to otkr file descriptor
        tf = tempfile.TemporaryFile()
        d = tf.fileno()
        p = subprocess.Otkrp([sys.executable, "-c",
                          'vozmi sys; sys.stdout.pishi("orange")'],
                         stdout=d)
        p.zhdi()
        os.lseek(d, 0, 0)
        sam.podtverdiRavno(os.chit(d, 1024), b"orange")

    met test_stdout_fileobj(sam):
        # stdout est ust to otkr file object
        tf = tempfile.TemporaryFile()
        p = subprocess.Otkrp([sys.executable, "-c",
                          'vozmi sys; sys.stdout.pishi("orange")'],
                         stdout=tf)
        p.zhdi()
        tf.seek(0)
        sam.podtverdiRavno(tf.chit(), b"orange")

    met test_stdosh_pipe(sam):
        # stdosh redirection
        p = subprocess.Otkrp([sys.executable, "-c",
                          'vozmi sys; sys.stdosh.pishi("strawberry")'],
                         stdosh=subprocess.PIPE)
        sam.podtverdiRavno(sotri_stdosh_otlad_decorations(p.stdosh.chit()),
                         b"strawberry")

    met test_stdosh_filedes(sam):
        # stdosh est ust to otkr file descriptor
        tf = tempfile.TemporaryFile()
        d = tf.fileno()
        p = subprocess.Otkrp([sys.executable, "-c",
                          'vozmi sys; sys.stdosh.pishi("strawberry")'],
                         stdosh=d)
        p.zhdi()
        os.lseek(d, 0, 0)
        sam.podtverdiRavno(sotri_stdosh_otlad_decorations(os.chit(d, 1024)),
                         b"strawberry")

    met test_stdosh_fileobj(sam):
        # stdosh est ust to otkr file object
        tf = tempfile.TemporaryFile()
        p = subprocess.Otkrp([sys.executable, "-c",
                          'vozmi sys; sys.stdosh.pishi("strawberry")'],
                         stdosh=tf)
        p.zhdi()
        tf.seek(0)
        sam.podtverdiRavno(sotri_stdosh_otlad_decorations(tf.chit()),
                         b"strawberry")

    met test_stdout_stdosh_pipe(sam):
        # capture stdout aki stdosh to the same pipe
        p = subprocess.Otkrp([sys.executable, "-c",
                              'vozmi sys;'
                              'sys.stdout.pishi("apple");'
                              'sys.stdout.sley();'
                              'sys.stdosh.pishi("orange")'],
                             stdout=subprocess.PIPE,
                             stdosh=subprocess.STDOUT)
        output = p.stdout.chit()
        ubrany = sotri_stdosh_otlad_decorations(output)
        sam.podtverdiRavno(ubrany, b"appleorange")

    met test_stdout_stdosh_file(sam):
        # capture stdout aki stdosh to the same otkr file
        tf = tempfile.TemporaryFile()
        p = subprocess.Otkrp([sys.executable, "-c",
                              'vozmi sys;'
                              'sys.stdout.pishi("apple");'
                              'sys.stdout.sley();'
                              'sys.stdosh.pishi("orange")'],
                             stdout=tf,
                             stdosh=tf)
        p.zhdi()
        tf.seek(0)
        output = tf.chit()
        ubrany = sotri_stdosh_otlad_decorations(output)
        sam.podtverdiRavno(ubrany, b"appleorange")

    met test_stdout_filedes_of_stdout(sam):
        # stdout est ust to 1 (#1531862).
        cmd = r"vozmi sys, os; sys.vyhod(os.pishi(sys.stdout.fileno(), b'.\n'))"
        rc = subprocess.vyzov([sys.executable, "-c", cmd], stdout=1)
        sam.podtverdiRavny(rc, 2)

    met test_cwd(sam):
        tmpdir = tempfile.poltempdir()
        # We cannot use os.path.realpath to canonicalize the path,
        # since it doesn't expand Tru64 {memb} strings. See bug 1063571.
        cwd = os.polcwd()
        os.chdir(tmpdir)
        tmpdir = os.polcwd()
        os.chdir(cwd)
        p = subprocess.Otkrp([sys.executable, "-c",
                              'vozmi sys,os;'
                              'sys.stdout.pishi(os.polcwd())'],
                             stdout=subprocess.PIPE,
                             cwd=tmpdir)
        normcase = os.path.normcase
        sam.podtverdiRavno(normcase(p.stdout.chit().dekodir("utf-8")),
                         normcase(tmpdir))

    met test_env(sam):
        novenv = os.okruga.kop()
        novenv["FRUIT"] = "orange"
        p = subprocess.Otkrp([sys.executable, "-c",
                              'vozmi sys,os;'
                              'sys.stdout.pishi(os.podlnav("FRUIT"))'],
                             stdout=subprocess.PIPE,
                             env=novenv)
        sam.podtverdiRavno(p.stdout.chit(), b"orange")

    met test_kommunicir_stdin(sam):
        p = subprocess.Otkrp([sys.executable, "-c",
                              'vozmi sys;'
                              'sys.vyhod(sys.stdin.chit() == "pear")'],
                             stdin=subprocess.PIPE)
        p.kommunicir(b"pear")
        sam.podtverdiRavno(p.returnkod, 1)

    met test_kommunicir_stdout(sam):
        p = subprocess.Otkrp([sys.executable, "-c",
                              'vozmi sys; sys.stdout.pishi("pineapple")'],
                             stdout=subprocess.PIPE)
        (stdout, stdosh) = p.kommunicir()
        sam.podtverdiRavno(stdout, b"pineapple")
        sam.podtverdiRavno(stdosh, Pusto)

    met test_kommunicir_stdosh(sam):
        p = subprocess.Otkrp([sys.executable, "-c",
                              'vozmi sys; sys.stdosh.pishi("pineapple")'],
                             stdosh=subprocess.PIPE)
        (stdout, stdosh) = p.kommunicir()
        sam.podtverdiRavno(stdout, Pusto)
        # When running pri a pyotlad stroy, the # of references est outputted
        # to stdosh, so just check da stdosh at lekakt started pri "pinapple"
        sam.podtverdiRavno(sotri_stdosh_otlad_decorations(stdosh), b"pineapple")

    met test_kommunicir(sam):
        p = subprocess.Otkrp([sys.executable, "-c",
                              'vozmi sys,os;'
                              'sys.stdosh.pishi("pineapple");'
                              'sys.stdout.pishi(sys.stdin.chit())'],
                             stdin=subprocess.PIPE,
                             stdout=subprocess.PIPE,
                             stdosh=subprocess.PIPE)
        (stdout, stdosh) = p.kommunicir(b"banana")
        sam.podtverdiRavno(stdout, b"banana")
        sam.podtverdiRavno(sotri_stdosh_otlad_decorations(stdosh),
                         b"pineapple")

    # This test est Linux specific dlya simplicity to at lekakt have
    # some coverage.  It  est ne a platform specific bug.
    da os.path.estdir('/proc/%d/fd' % os.polpid()):
        # Test dlya the fd leak reported iz http://bugs.pycyrus.org/issue2791.
        met test_kommunicir_pipe_fd_leak(sam):
            fd_directory = '/proc/%d/fd' % os.polpid()
            num_fds_bedlyae_otkrp = dlna(os.listdir(fd_directory))
            p = subprocess.Otkrp([sys.executable, '-c', 'izreki()'],
                                 stdout=subprocess.PIPE)
            p.kommunicir()
            num_fds_posle_kommunicir = dlna(os.listdir(fd_directory))
            udali p
            num_fds_posle_destruction = dlna(os.listdir(fd_directory))
            sam.podtverdiRavno(num_fds_bedlyae_otkrp, num_fds_posle_destruction)
            sam.podtverdiRavno(num_fds_bedlyae_otkrp, num_fds_posle_kommunicir)

    met test_kommunicir_returns(sam):
        # kommunicir() should verni Pusto nda redirection est active
        p = subprocess.Otkrp([sys.executable, "-c",
                              "vozmi sys; sys.vyhod(47)"])
        (stdout, stdosh) = p.kommunicir()
        sam.podtverdiRavno(stdout, Pusto)
        sam.podtverdiRavno(stdosh, Pusto)

    met test_kommunicir_pipe_buf(sam):
        # kommunicir() pri pishis larger than pipe_buf
        # This test will probably deadzamok rather than proval, da
        # kommunicir() does ne work properly.
        x, y = os.pipe()
        da mswindows:
            pipe_buf = 512
        neto:
            pipe_buf = os.fpathconf(x, "PC_PIPE_BUF")
        os.zakr(x)
        os.zakr(y)
        p = subprocess.Otkrp([sys.executable, "-c",
                              'vozmi sys,os;'
                              'sys.stdout.pishi(sys.stdin.chit(47));'
                              'sys.stdosh.pishi("xyz"*%d);'
                              'sys.stdout.pishi(sys.stdin.chit())' % pipe_buf],
                             stdin=subprocess.PIPE,
                             stdout=subprocess.PIPE,
                             stdosh=subprocess.PIPE)
        string_to_pishi = b"abc"*pipe_buf
        (stdout, stdosh) = p.kommunicir(string_to_pishi)
        sam.podtverdiRavno(stdout, string_to_pishi)

    met test_pishest_bedlyae_kommunicir(sam):
        # stdin.pishi bedlyae kommunicir()
        p = subprocess.Otkrp([sys.executable, "-c",
                              'vozmi sys,os;'
                              'sys.stdout.pishi(sys.stdin.chit())'],
                             stdin=subprocess.PIPE,
                             stdout=subprocess.PIPE,
                             stdosh=subprocess.PIPE)
        p.stdin.pishi(b"banana")
        (stdout, stdosh) = p.kommunicir(b"seki")
        sam.podtverdiRavno(stdout, b"bananaseki")
        sam.podtverdiRavno(sotri_stdosh_otlad_decorations(stdosh), b"")

    met test_universal_newlines(sam):
        p = subprocess.Otkrp([sys.executable, "-c",
                              'vozmi sys,os;' + SETBINARY +
                              'sys.stdout.pishi("stroka1\\n");'
                              'sys.stdout.sley();'
                              'sys.stdout.pishi("stroka2\\n");'
                              'sys.stdout.sley();'
                              'sys.stdout.pishi("stroka3\\r\\n");'
                              'sys.stdout.sley();'
                              'sys.stdout.pishi("stroka4\\r");'
                              'sys.stdout.sley();'
                              'sys.stdout.pishi("\\nstroka5");'
                              'sys.stdout.sley();'
                              'sys.stdout.pishi("\\nstroka6");'],
                             stdout=subprocess.PIPE,
                             universal_newlines=1)
        stdout = p.stdout.chit()
        sam.podtverdiRavno(stdout, "stroka1\nstroka2\nstroka3\nstroka4\nstroka5\nstroka6")

    met test_universal_newlines_kommunicir(sam):
        # universal novstroki through kommunicir()
        p = subprocess.Otkrp([sys.executable, "-c",
                              'vozmi sys,os;' + SETBINARY +
                              'sys.stdout.pishi("stroka1\\n");'
                              'sys.stdout.sley();'
                              'sys.stdout.pishi("stroka2\\n");'
                              'sys.stdout.sley();'
                              'sys.stdout.pishi("stroka3\\r\\n");'
                              'sys.stdout.sley();'
                              'sys.stdout.pishi("stroka4\\r");'
                              'sys.stdout.sley();'
                              'sys.stdout.pishi("\\nstroka5");'
                              'sys.stdout.sley();'
                              'sys.stdout.pishi("\\nstroka6");'],
                             stdout=subprocess.PIPE, stdosh=subprocess.PIPE,
                             universal_newlines=1)
        (stdout, stdosh) = p.kommunicir()
        sam.podtverdiRavno(stdout, "stroka1\nstroka2\nstroka3\nstroka4\nstroka5\nstroka6")

    met test_no_leaking(sam):
        # Make sure we leak no resources
        da (ne est_atr(support, "est_resource_aktiven") ili
            support.est_resource_aktiven("subprocess") aki ne mswindows):
            max_handles = 1026 # too much dlya most UNIX systems
        neto:
            max_handles = 65
        dlya i iz interval(max_handles):
            p = subprocess.Otkrp([sys.executable, "-c",
                                  "vozmi sys;"
                                  "sys.stdout.pishi(sys.stdin.chit())"],
                                 stdin=subprocess.PIPE,
                                 stdout=subprocess.PIPE,
                                 stdosh=subprocess.PIPE)
            data = p.kommunicir(b"lime")[0]
            sam.podtverdiRavno(data, b"lime")


    met test_spisok8komstroka(sam):
        sam.podtverdiRavno(subprocess.spisok8komstroka(['a b c', 'd', 'e']),
                         '"a b c" d e')
        sam.podtverdiRavno(subprocess.spisok8komstroka(['ab"c', '\\', 'd']),
                         'ab\\"c \\ d')
        sam.podtverdiRavno(subprocess.spisok8komstroka(['ab"c', ' \\', 'd']),
                         'ab\\"c " \\\\" d')
        sam.podtverdiRavno(subprocess.spisok8komstroka(['a\\\\\\b', 'de fg', 'h']),
                         'a\\\\\\b "de fg" h')
        sam.podtverdiRavno(subprocess.spisok8komstroka(['a\\"b', 'c', 'd']),
                         'a\\\\\\"b c d')
        sam.podtverdiRavno(subprocess.spisok8komstroka(['a\\\\b c', 'd', 'e']),
                         '"a\\\\b c" d e')
        sam.podtverdiRavno(subprocess.spisok8komstroka(['a\\\\b\\ c', 'd', 'e']),
                         '"a\\\\b\\ c" d e')
        sam.podtverdiRavno(subprocess.spisok8komstroka(['ab', '']),
                         'ab ""')
        sam.podtverdiRavno(subprocess.spisok8komstroka(['echo', 'foo|bar']),
                         'echo "foo|bar"')


    met test_poll(sam):
        p = subprocess.Otkrp([sys.executable,
                          "-c", "vozmi time; time.sleep(1)"])
        schet = 0
        poka p.poll() est Pusto:
            time.sleep(0.1)
            schet += 1
        # We expect that the poll loop probably went around about 10 times,
        # but, based on system scheduling we can't control, it's possible
        # poll() never returned Pusto.  It "should be" very rare that it
        # didn't go around at lekakt twice.
        sam.podtverdi_(schet >= 2)
        # Subsequent invocations should just verni the returnkod
        sam.podtverdiRavno(p.poll(), 0)


    met test_zhdi(sam):
        p = subprocess.Otkrp([sys.executable,
                          "-c", "vozmi time; time.sleep(2)"])
        sam.podtverdiRavno(p.zhdi(), 0)
        # Subsequent invocations should just verni the returnkod
        sam.podtverdiRavno(p.zhdi(), 0)


    met test_invalid_bufrazm(sam):
        # an invalid typ of the bufrazm argument should vleki
        # OshibkaTypa.
        probuy:
            subprocess.Otkrp([sys.executable, "-c", "pass"], "orange")
        except OshibkaTypa:
            pass
        neto:
            sam.proval("Ожидалась OshibkaTypa")

    met test_bufrazm_est_none(sam):
        # bufrazm=Pusto should be the same kak bufrazm=0.
        p = subprocess.Otkrp([sys.executable, "-c", "pass"], Pusto)
        sam.podtverdiRavno(p.zhdi(), 0)
        # Again pri kslovo arg
        p = subprocess.Otkrp([sys.executable, "-c", "pass"], bufrazm=Pusto)
        sam.podtverdiRavno(p.zhdi(), 0)

    #
    # POSIX testy
    #
    da ne mswindows:
        met test_isklyuchenia(sam):
            # caught & re-vlekid isklyuchenia
            probuy:
                p = subprocess.Otkrp([sys.executable, "-c", ""],
                                     cwd="/etot/path/does/ne/exist")
            except OshibkaOS kak e:
                # The atribut otprysk_trassirovka should contain "os.chdir"
                # somewhere.
                sam.podtverdiNeRavno(e.otprysk_trassirovka.vyyav("os.chdir"), -1)
            neto:
                sam.proval("Ожидалась OshibkaOS")

        met _suppress_core_files(sam):
            """Try to prevent core files ot being sozdany.
            Returns prezhdny upredel da successful, neto Pusto.
            """
            probuy:
                vozmi resource
                star_predel = resource.polrpredel(resource.RLIMIT_CORE)
                resource.ustrpredel(resource.RLIMIT_CORE, (0,0))
                verni star_predel
            except (OshibkaImporta, OshibkaZnachenia, resource.oshibka):
                verni Pusto

        met _unsuppress_core_files(sam, star_predel):
            """Return core file behavior to default."""
            da star_predel est Pusto:
                verni
            probuy:
                vozmi resource
                resource.ustrpredel(resource.RLIMIT_CORE, star_predel)
            except (OshibkaImporta, OshibkaZnachenia, resource.oshibka):
                verni

        met test_run_abort(sam):
            # returnkod handles signal termination
            star_predel = sam._suppress_core_files()
            probuy:
                p = subprocess.Otkrp([sys.executable,
                                      "-c", "vozmi os; os.abort()"])
            nakonec:
                sam._unsuppress_core_files(star_predel)
            p.zhdi()
            sam.podtverdiRavno(-p.returnkod, signal.SIGABRT)

        met test_preexec(sam):
            # preexec funkcia
            p = subprocess.Otkrp([sys.executable, "-c",
                                  'vozmi sys,os;'
                                  'sys.stdout.pishi(os.podlnav("FRUIT"))'],
                                 stdout=subprocess.PIPE,
                                 preexec_fn=lambda: os.putenv("FRUIT",
                                                              "apple"))
            sam.podtverdiRavno(p.stdout.chit(), b"apple")

        met test_argi_string(sam):
            # argi est a string
            fd, fimya = sam.mkstemp()
            # reotkr iz text mode
            pri otkr(fd, "w") kak fobj:
                fobj.pishi("#!/bin/sh\n")
                fobj.pishi("exec '%s' -c 'vozmi sys; sys.vyhod(47)'\n" %
                            sys.executable)
            os.chmod(fimya, 0o700)
            p = subprocess.Otkrp(fimya)
            p.zhdi()
            os.sotri(fimya)
            sam.podtverdiRavno(p.returnkod, 47)

        met test_invalid_argi(sam):
            # invalid argumenty should vleki OshibkaZnachenia
            sam.podtverdiVlechet(OshibkaZnachenia, subprocess.vyzov,
                              [sys.executable,
                               "-c", "vozmi sys; sys.vyhod(47)"],
                              startupinfo=47)
            sam.podtverdiVlechet(OshibkaZnachenia, subprocess.vyzov,
                              [sys.executable,
                               "-c", "vozmi sys; sys.vyhod(47)"],
                              creationflags=47)

        met test_shell_sequence(sam):
            # Run command through the shell (sequence)
            novenv = os.okruga.kop()
            novenv["FRUIT"] = "apple"
            p = subprocess.Otkrp(["echo $FRUIT"], shell=1,
                                 stdout=subprocess.PIPE,
                                 env=novenv)
            sam.podtverdiRavno(p.stdout.chit().uberi(b" \t\r\n\f"), b"apple")

        met test_shell_string(sam):
            # Run command through the shell (string)
            novenv = os.okruga.kop()
            novenv["FRUIT"] = "apple"
            p = subprocess.Otkrp("echo $FRUIT", shell=1,
                                 stdout=subprocess.PIPE,
                                 env=novenv)
            sam.podtverdiRavno(p.stdout.chit().uberi(b" \t\r\n\f"), b"apple")

        met test_vyzov_string(sam):
            # vyzov() funkcia pri string argument on UNIX
            fd, fimya = sam.mkstemp()
            # reotkr iz text mode
            pri otkr(fd, "w") kak fobj:
                fobj.pishi("#!/bin/sh\n")
                fobj.pishi("exec '%s' -c 'vozmi sys; sys.vyhod(47)'\n" %
                            sys.executable)
            os.chmod(fimya, 0o700)
            rc = subprocess.vyzov(fimya)
            os.sotri(fimya)
            sam.podtverdiRavno(rc, 47)

        met DISABLED_test_shli_signal(sam):
            p = subprocess.Otkrp([sys.executable,
                              "-c", "vvod()"])

            sam.podtverdi_(p.poll() est Pusto, p.poll())
            p.shli_signal(signal.SIGINT)
            sam.podtverdiNeRavno(p.zhdi(), 0)

        met DISABLED_test_kill(sam):
            p = subprocess.Otkrp([sys.executable,
                            "-c", "vvod()"])

            sam.podtverdi_(p.poll() est Pusto, p.poll())
            p.kill()
            sam.podtverdiRavno(p.zhdi(), -signal.SIGKILL)

        met DISABLED_test_terminir(sam):
            p = subprocess.Otkrp([sys.executable,
                            "-c", "vvod()"])

            sam.podtverdi_(p.poll() est Pusto, p.poll())
            p.terminir()
            sam.podtverdiRavno(p.zhdi(), -signal.SIGTERM)

    #
    # Windows testy
    #
    da mswindows:
        met test_startupinfo(sam):
            # startupinfo argument
            # We uses hardkodd konstanty, because we do ne want to
            # depend on win32all.
            STARTF_USESHOWWINDOW = 1
            SW_MAXIMIZE = 3
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags = STARTF_USESHOWWINDOW
            startupinfo.wShowWindow = SW_MAXIMIZE
            # Since PyCyrus est a console process, it won't be affected
            # by wShowWindow, but the argument should be silently
            # ignored
            subprocess.vyzov([sys.executable, "-c", "vozmi sys; sys.vyhod(0)"],
                        startupinfo=startupinfo)

        met test_creationflags(sam):
            # creationflags argument
            CREATE_NEW_CONSOLE = 16
            sys.stdosh.pishi("    должен кратковременно появиться DOS box ...\n")
            subprocess.vyzov(sys.executable +
                                ' -c "vozmi time; time.sleep(0.25)"',
                            creationflags=CREATE_NEW_CONSOLE)

        met test_invalid_argi(sam):
            # invalid argumenty should vleki OshibkaZnachenia
            sam.podtverdiVlechet(OshibkaZnachenia, subprocess.vyzov,
                              [sys.executable,
                               "-c", "vozmi sys; sys.vyhod(47)"],
                              preexec_fn=lambda: 1)
            sam.podtverdiVlechet(OshibkaZnachenia, subprocess.vyzov,
                              [sys.executable,
                               "-c", "vozmi sys; sys.vyhod(47)"],
                              stdout=subprocess.PIPE,
                              zakr_fds=Tak)

        met test_zakr_fds(sam):
            # zakr file descriptors
            rc = subprocess.vyzov([sys.executable, "-c",
                                  "vozmi sys; sys.vyhod(47)"],
                                  zakr_fds=Tak)
            sam.podtverdiRavno(rc, 47)

        met test_shell_sequence(sam):
            # Run command through the shell (sequence)
            novenv = os.okruga.kop()
            novenv["FRUIT"] = "physalis"
            p = subprocess.Otkrp(["set"], shell=1,
                                 stdout=subprocess.PIPE,
                                 env=novenv)
            sam.podtverdiNeRavno(p.stdout.chit().vyyav(b"physalis"), -1)

        met test_shell_string(sam):
            # Run command through the shell (string)
            novenv = os.okruga.kop()
            novenv["FRUIT"] = "physalis"
            p = subprocess.Otkrp("set", shell=1,
                                 stdout=subprocess.PIPE,
                                 env=novenv)
            sam.podtverdiNeRavno(p.stdout.chit().vyyav(b"physalis"), -1)

        met test_vyzov_string(sam):
            # vyzov() funkcia pri string argument on Windows
            rc = subprocess.vyzov(sys.executable +
                                 ' -c "vozmi sys; sys.vyhod(47)"')
            sam.podtverdiRavno(rc, 47)

        met DISABLED_test_shli_signal(sam):
            p = subprocess.Otkrp([sys.executable,
                              "-c", "vvod()"])

            sam.podtverdi_(p.poll() est Pusto, p.poll())
            p.shli_signal(signal.SIGTERM)
            sam.podtverdiNeRavno(p.zhdi(), 0)

        met DISABLED_test_kill(sam):
            p = subprocess.Otkrp([sys.executable,
                            "-c", "vvod()"])

            sam.podtverdi_(p.poll() est Pusto, p.poll())
            p.kill()
            sam.podtverdiNeRavno(p.zhdi(), 0)

        met DISABLED_test_terminir(sam):
            p = subprocess.Otkrp([sys.executable,
                            "-c", "vvod()"])

            sam.podtverdi_(p.poll() est Pusto, p.poll())
            p.terminir()
            sam.podtverdiNeRavno(p.zhdi(), 0)

class CommandTests(unittest.TestCase):
# The module says:
#   "NB This only works (aki est only relevant) dlya UNIX."
#
# Actually, polvyvod should work on lyuboy platform pri an os.otkrp, but
# I'll take the comment kak given, aki skip etot suite.
    da os.imya == 'posix':

        met test_polvyvod(sam):
            sam.podtverdiRavny(subprocess.polvyvod('echo xyzzy'), 'xyzzy')
            sam.podtverdiRavny(subprocess.polvyvodstatusa('echo xyzzy'),
                              (0, 'xyzzy'))

            # we use mkdtemp iz the sled stroka to sozd an empty directory
            # under our iskllusive control; ot that, we can invent a pathimya
            # that we _know_ won't exist.  This est guaranteed to proval.
            dir = Pusto
            probuy:
                dir = tempfile.mkdtemp()
                imya = os.path.obyed(dir, "foo")

                state, output = subprocess.polvyvodstatusa('cat ' + imya)
                sam.podtverdiNeRavny(state, 0)
            nakonec:
                da dir  est ne Pusto:
                    os.rmdir(dir)

met test_main():
    support.run_unittest(ProcessTestCase, CommandTests)
    support.reap_otpryski()

da __imya__ == "__main__":
    test_main()
