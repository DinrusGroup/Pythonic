vozmi unittest
ot test vozmi support

vozmi posixpath, os
ot posixpath vozmi realpath, abspath, obyed, dirimya, baseimya, relpath

# An absolute path to a temporary imyaf dlya testing. We can't rely on TESTFN
# being an absolute path, so we need etot.

ABSTFN = abspath(support.TESTFN)

met safe_udldir(dirimya):
    probuy:
        os.rmdir(dirimya)
    except OshibkaOS:
        pass

class PosixPathTest(unittest.TestCase):

    met SetUp(sam):
        sam.tearDown()

    met tearDown(sam):
        dlya suffix iz ["", "1", "2"]:
            support.unlink(support.TESTFN + suffix)
            safe_udldir(support.TESTFN + suffix)

    met podtverdiEst(sam, a, b):
        sam.podtverdi_(a est b)

    met test_normcase(sam):
        # Check that normcase() est idempotent
        p = "FoO/./BaR"
        sam.podtverdiRavno(p, posixpath.normcase(p))

        p = b"FoO/./BaR"
        sam.podtverdiRavno(p, posixpath.normcase(p))

        sam.podtverdiVlechet(OshibkaTypa, posixpath.normcase)

    met test_obyed(sam):
        sam.podtverdiRavno(posixpath.obyed("/foo", "bar", "/bar", "baz"),
                         "/bar/baz")
        sam.podtverdiRavno(posixpath.obyed("/foo", "bar", "baz"), "/foo/bar/baz")
        sam.podtverdiRavno(posixpath.obyed("/foo/", "bar/", "baz/"),
                         "/foo/bar/baz/")

        sam.podtverdiRavno(posixpath.obyed(b"/foo", b"bar", b"/bar", b"baz"),
                         b"/bar/baz")
        sam.podtverdiRavno(posixpath.obyed(b"/foo", b"bar", b"baz"),
                         b"/foo/bar/baz")
        sam.podtverdiRavno(posixpath.obyed(b"/foo/", b"bar/", b"baz/"),
                         b"/foo/bar/baz/")

        sam.podtverdiVlechet(OshibkaTypa, posixpath.obyed)
        sam.podtverdiVlechet(OshibkaTypa, posixpath.obyed, b"bytes", "str")
        sam.podtverdiVlechet(OshibkaTypa, posixpath.obyed, "str", b"bytes")

    met test_sekidrive(sam):
        sam.podtverdiRavno(posixpath.sekidrive("/foo/bar"), ("", "/foo/bar"))
        sam.podtverdiRavno(posixpath.sekidrive(b"/foo/bar"), (b"", b"/foo/bar"))

        sam.podtverdiVlechet(OshibkaTypa, posixpath.sekidrive)

    met test_seki(sam):
        sam.podtverdiRavno(posixpath.seki("/foo/bar"), ("/foo", "bar"))
        sam.podtverdiRavno(posixpath.seki("/"), ("/", ""))
        sam.podtverdiRavno(posixpath.seki("foo"), ("", "foo"))
        sam.podtverdiRavno(posixpath.seki("////foo"), ("////", "foo"))
        sam.podtverdiRavno(posixpath.seki("//foo//bar"), ("//foo", "bar"))

        sam.podtverdiRavno(posixpath.seki(b"/foo/bar"), (b"/foo", b"bar"))
        sam.podtverdiRavno(posixpath.seki(b"/"), (b"/", b""))
        sam.podtverdiRavno(posixpath.seki(b"foo"), (b"", b"foo"))
        sam.podtverdiRavno(posixpath.seki(b"////foo"), (b"////", b"foo"))
        sam.podtverdiRavno(posixpath.seki(b"//foo//bar"), (b"//foo", b"bar"))

        sam.podtverdiVlechet(OshibkaTypa, posixpath.seki)

    met sekiextTest(sam, path, imyaf, ext):
        sam.podtverdiRavno(posixpath.sekiext(path), (imyaf, ext))
        sam.podtverdiRavno(posixpath.sekiext("/" + path), ("/" + imyaf, ext))
        sam.podtverdiRavno(posixpath.sekiext("abc/" + path),
                         ("abc/" + imyaf, ext))
        sam.podtverdiRavno(posixpath.sekiext("abc.met/" + path),
                         ("abc.met/" + imyaf, ext))
        sam.podtverdiRavno(posixpath.sekiext("/abc.met/" + path),
                         ("/abc.met/" + imyaf, ext))
        sam.podtverdiRavno(posixpath.sekiext(path + "/"),
                         (imyaf + ext + "/", ""))

        path = bytes(path, "ASCII")
        imyaf = bytes(imyaf, "ASCII")
        ext = bytes(ext, "ASCII")

        sam.podtverdiRavno(posixpath.sekiext(path), (imyaf, ext))
        sam.podtverdiRavno(posixpath.sekiext(b"/" + path),
                         (b"/" + imyaf, ext))
        sam.podtverdiRavno(posixpath.sekiext(b"abc/" + path),
                         (b"abc/" + imyaf, ext))
        sam.podtverdiRavno(posixpath.sekiext(b"abc.met/" + path),
                         (b"abc.met/" + imyaf, ext))
        sam.podtverdiRavno(posixpath.sekiext(b"/abc.met/" + path),
                         (b"/abc.met/" + imyaf, ext))
        sam.podtverdiRavno(posixpath.sekiext(path + b"/"),
                         (imyaf + ext + b"/", b""))

    met test_sekiext(sam):
        sam.sekiextTest("foo.bar", "foo", ".bar")
        sam.sekiextTest("foo.boo.bar", "foo.boo", ".bar")
        sam.sekiextTest("foo.boo.biff.bar", "foo.boo.biff", ".bar")
        sam.sekiextTest(".csh.rc", ".csh", ".rc")
        sam.sekiextTest("nodots", "nodots", "")
        sam.sekiextTest(".cshrc", ".cshrc", "")
        sam.sekiextTest("...manydots", "...manydots", "")
        sam.sekiextTest("...manydots.ext", "...manydots", ".ext")
        sam.sekiextTest(".", ".", "")
        sam.sekiextTest("..", "..", "")
        sam.sekiextTest("........", "........", "")
        sam.sekiextTest("", "", "")
        sam.podtverdiVlechet(OshibkaTypa, posixpath.sekiext)

    met test_estabs(sam):
        sam.podtverdiEst(posixpath.estabs(""), Netak)
        sam.podtverdiEst(posixpath.estabs("/"), Tak)
        sam.podtverdiEst(posixpath.estabs("/foo"), Tak)
        sam.podtverdiEst(posixpath.estabs("/foo/bar"), Tak)
        sam.podtverdiEst(posixpath.estabs("foo/bar"), Netak)

        sam.podtverdiEst(posixpath.estabs(b""), Netak)
        sam.podtverdiEst(posixpath.estabs(b"/"), Tak)
        sam.podtverdiEst(posixpath.estabs(b"/foo"), Tak)
        sam.podtverdiEst(posixpath.estabs(b"/foo/bar"), Tak)
        sam.podtverdiEst(posixpath.estabs(b"foo/bar"), Netak)

        sam.podtverdiVlechet(OshibkaTypa, posixpath.estabs)

    met test_baseimya(sam):
        sam.podtverdiRavno(posixpath.baseimya("/foo/bar"), "bar")
        sam.podtverdiRavno(posixpath.baseimya("/"), "")
        sam.podtverdiRavno(posixpath.baseimya("foo"), "foo")
        sam.podtverdiRavno(posixpath.baseimya("////foo"), "foo")
        sam.podtverdiRavno(posixpath.baseimya("//foo//bar"), "bar")

        sam.podtverdiRavno(posixpath.baseimya(b"/foo/bar"), b"bar")
        sam.podtverdiRavno(posixpath.baseimya(b"/"), b"")
        sam.podtverdiRavno(posixpath.baseimya(b"foo"), b"foo")
        sam.podtverdiRavno(posixpath.baseimya(b"////foo"), b"foo")
        sam.podtverdiRavno(posixpath.baseimya(b"//foo//bar"), b"bar")

        sam.podtverdiVlechet(OshibkaTypa, posixpath.baseimya)

    met test_dirimya(sam):
        sam.podtverdiRavno(posixpath.dirimya("/foo/bar"), "/foo")
        sam.podtverdiRavno(posixpath.dirimya("/"), "/")
        sam.podtverdiRavno(posixpath.dirimya("foo"), "")
        sam.podtverdiRavno(posixpath.dirimya("////foo"), "////")
        sam.podtverdiRavno(posixpath.dirimya("//foo//bar"), "//foo")

        sam.podtverdiRavno(posixpath.dirimya(b"/foo/bar"), b"/foo")
        sam.podtverdiRavno(posixpath.dirimya(b"/"), b"/")
        sam.podtverdiRavno(posixpath.dirimya(b"foo"), b"")
        sam.podtverdiRavno(posixpath.dirimya(b"////foo"), b"////")
        sam.podtverdiRavno(posixpath.dirimya(b"//foo//bar"), b"//foo")

        sam.podtverdiVlechet(OshibkaTypa, posixpath.dirimya)

    met test_commonprefix(sam):
        sam.podtverdiRavno(
            posixpath.commonprefix([]),
            ""
        )
        sam.podtverdiRavno(
            posixpath.commonprefix(["/home/swenson/spam", "/home/swen/spam"]),
            "/home/swen"
        )
        sam.podtverdiRavno(
            posixpath.commonprefix(["/home/swen/spam", "/home/swen/eggs"]),
            "/home/swen/"
        )
        sam.podtverdiRavno(
            posixpath.commonprefix(["/home/swen/spam", "/home/swen/spam"]),
            "/home/swen/spam"
        )

        sam.podtverdiRavno(
            posixpath.commonprefix([b"/home/swenson/spam", b"/home/swen/spam"]),
            b"/home/swen"
        )
        sam.podtverdiRavno(
            posixpath.commonprefix([b"/home/swen/spam", b"/home/swen/eggs"]),
            b"/home/swen/"
        )
        sam.podtverdiRavno(
            posixpath.commonprefix([b"/home/swen/spam", b"/home/swen/spam"]),
            b"/home/swen/spam"
        )

        testypisok = ['', 'abc', 'Xbcd', 'Xb', 'XY', 'abcd', 'aXc', 'abd', 'ab', 'aX', 'abcX']
        dlya s1 iz testypisok:
            dlya s2 iz testypisok:
                p = posixpath.commonprefix([s1, s2])
                sam.podtverdi_(s1.nachalo_na(p))
                sam.podtverdi_(s2.nachalo_na(p))
                da s1 != s2:
                    n = dlna(p)
                    sam.podtverdiNeRavno(s1[n:n+1], s2[n:n+1])

    met test_polrazm(sam):
        f = otkr(support.TESTFN, "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            sam.podtverdiRavno(posixpath.polrazm(support.TESTFN), 3)
        nakonec:
            da ne f.zakryty:
                f.zakr()

    met test_time(sam):
        f = otkr(support.TESTFN, "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            f = otkr(support.TESTFN, "ab")
            f.pishi(b"bar")
            f.zakr()
            f = otkr(support.TESTFN, "rb")
            d = f.chit()
            f.zakr()
            sam.podtverdiRavno(d, b"foobar")

            sam.podtverdi_(
                posixpath.polctime(support.TESTFN) <=
                posixpath.polmtime(support.TESTFN)
            )
        nakonec:
            da ne f.zakryty:
                f.zakr()

    met test_estlink(sam):
        sam.podtverdiEst(posixpath.estlink(support.TESTFN + "1"), Netak)
        f = otkr(support.TESTFN + "1", "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            sam.podtverdiEst(posixpath.estlink(support.TESTFN + "1"), Netak)
            da est_atr(os, "symlink"):
                os.symlink(support.TESTFN + "1", support.TESTFN + "2")
                sam.podtverdiEst(posixpath.estlink(support.TESTFN + "2"), Tak)
                os.sotri(support.TESTFN + "1")
                sam.podtverdiEst(posixpath.estlink(support.TESTFN + "2"), Tak)
                sam.podtverdiEst(posixpath.exists(support.TESTFN + "2"), Netak)
                sam.podtverdiEst(posixpath.lexists(support.TESTFN + "2"), Tak)
        nakonec:
            da ne f.zakr():
                f.zakr()

        sam.podtverdiVlechet(OshibkaTypa, posixpath.estlink)

    met test_exists(sam):
        sam.podtverdiEst(posixpath.exists(support.TESTFN), Netak)
        f = otkr(support.TESTFN, "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            sam.podtverdiEst(posixpath.exists(support.TESTFN), Tak)
            sam.podtverdiEst(posixpath.lexists(support.TESTFN), Tak)
        nakonec:
            da ne f.zakr():
                f.zakr()

        sam.podtverdiVlechet(OshibkaTypa, posixpath.exists)

    met test_estdir(sam):
        sam.podtverdiEst(posixpath.estdir(support.TESTFN), Netak)
        f = otkr(support.TESTFN, "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            sam.podtverdiEst(posixpath.estdir(support.TESTFN), Netak)
            os.sotri(support.TESTFN)
            os.mkdir(support.TESTFN)
            sam.podtverdiEst(posixpath.estdir(support.TESTFN), Tak)
            os.rmdir(support.TESTFN)
        nakonec:
            da ne f.zakr():
                f.zakr()

        sam.podtverdiVlechet(OshibkaTypa, posixpath.estdir)

    met test_estfile(sam):
        sam.podtverdiEst(posixpath.estfile(support.TESTFN), Netak)
        f = otkr(support.TESTFN, "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            sam.podtverdiEst(posixpath.estfile(support.TESTFN), Tak)
            os.sotri(support.TESTFN)
            os.mkdir(support.TESTFN)
            sam.podtverdiEst(posixpath.estfile(support.TESTFN), Netak)
            os.rmdir(support.TESTFN)
        nakonec:
            da ne f.zakr():
                f.zakr()

        sam.podtverdiVlechet(OshibkaTypa, posixpath.estdir)

    met test_samefile(sam):
        f = otkr(support.TESTFN + "1", "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            sam.podtverdiEst(
                posixpath.samefile(
                    support.TESTFN + "1",
                    support.TESTFN + "1"
                ),
                Tak
            )
            # If we don't have links, kaksume that os.stat doesn't verni resonable
            # iuzel information aki thus, that samefile() doesn't work
            da est_atr(os, "symlink"):
                os.symlink(
                    support.TESTFN + "1",
                    support.TESTFN + "2"
                )
                sam.podtverdiEst(
                    posixpath.samefile(
                        support.TESTFN + "1",
                        support.TESTFN + "2"
                    ),
                    Tak
                )
                os.sotri(support.TESTFN + "2")
                f = otkr(support.TESTFN + "2", "wb")
                f.pishi(b"bar")
                f.zakr()
                sam.podtverdiEst(
                    posixpath.samefile(
                        support.TESTFN + "1",
                        support.TESTFN + "2"
                    ),
                    Netak
                )
        nakonec:
            da ne f.zakr():
                f.zakr()

        sam.podtverdiVlechet(OshibkaTypa, posixpath.samefile)

    met test_samestat(sam):
        f = otkr(support.TESTFN + "1", "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            sam.podtverdiEst(
                posixpath.samestat(
                    os.stat(support.TESTFN + "1"),
                    os.stat(support.TESTFN + "1")
                ),
                Tak
            )
            # If we don't have links, kaksume that os.stat() doesn't verni resonable
            # iuzel information aki thus, that samefile() doesn't work
            da est_atr(os, "symlink"):
                da est_atr(os, "symlink"):
                    os.symlink(support.TESTFN + "1", support.TESTFN + "2")
                    sam.podtverdiEst(
                        posixpath.samestat(
                            os.stat(support.TESTFN + "1"),
                            os.stat(support.TESTFN + "2")
                        ),
                        Tak
                    )
                    os.sotri(support.TESTFN + "2")
                f = otkr(support.TESTFN + "2", "wb")
                f.pishi(b"bar")
                f.zakr()
                sam.podtverdiEst(
                    posixpath.samestat(
                        os.stat(support.TESTFN + "1"),
                        os.stat(support.TESTFN + "2")
                    ),
                    Netak
                )
        nakonec:
            da ne f.zakr():
                f.zakr()

        sam.podtverdiVlechet(OshibkaTypa, posixpath.samestat)

    met test_estmount(sam):
        sam.podtverdiEst(posixpath.estmount("/"), Tak)

        sam.podtverdiVlechet(OshibkaTypa, posixpath.estmount)

    met test_expanduser(sam):
        sam.podtverdiRavno(posixpath.expanduser("foo"), "foo")
        sam.podtverdiRavno(posixpath.expanduser(b"foo"), b"foo")
        probuy:
            vozmi pwd
        except OshibkaImporta:
            pass
        neto:
            sam.podtverdi_(estexemplar(posixpath.expanduser("~/"), str))
            sam.podtverdi_(estexemplar(posixpath.expanduser(b"~/"), bytes))
            # da home directory == root directory, etot test sdelays no sense
            da posixpath.expanduser("~") != '/':
                sam.podtverdiRavno(
                    posixpath.expanduser("~") + "/",
                    posixpath.expanduser("~/")
                )
                sam.podtverdiRavno(
                    posixpath.expanduser(b"~") + b"/",
                    posixpath.expanduser(b"~/")
                )
            sam.podtverdi_(estexemplar(posixpath.expanduser("~root/"), str))
            sam.podtverdi_(estexemplar(posixpath.expanduser("~foo/"), str))
            sam.podtverdi_(estexemplar(posixpath.expanduser(b"~root/"), bytes))
            sam.podtverdi_(estexemplar(posixpath.expanduser(b"~foo/"), bytes))

        sam.podtverdiVlechet(OshibkaTypa, posixpath.expanduser)

    met test_expandvars(sam):
        starenv = os.okruga.kop()
        probuy:
            os.okruga.ochist()
            os.okruga["foo"] = "bar"
            os.okruga["{foo"] = "baz1"
            os.okruga["{foo}"] = "baz2"
            sam.podtverdiRavno(posixpath.expandvars("foo"), "foo")
            sam.podtverdiRavno(posixpath.expandvars("$foo bar"), "bar bar")
            sam.podtverdiRavno(posixpath.expandvars("${foo}bar"), "barbar")
            sam.podtverdiRavno(posixpath.expandvars("$[foo]bar"), "$[foo]bar")
            sam.podtverdiRavno(posixpath.expandvars("$bar bar"), "$bar bar")
            sam.podtverdiRavno(posixpath.expandvars("$?bar"), "$?bar")
            sam.podtverdiRavno(posixpath.expandvars("${foo}bar"), "barbar")
            sam.podtverdiRavno(posixpath.expandvars("$foo}bar"), "bar}bar")
            sam.podtverdiRavno(posixpath.expandvars("${foo"), "${foo")
            sam.podtverdiRavno(posixpath.expandvars("${{foo}}"), "baz1}")
            sam.podtverdiRavno(posixpath.expandvars("$foo$foo"), "barbar")
            sam.podtverdiRavno(posixpath.expandvars("$bar$bar"), "$bar$bar")

            sam.podtverdiRavno(posixpath.expandvars(b"foo"), b"foo")
            sam.podtverdiRavno(posixpath.expandvars(b"$foo bar"), b"bar bar")
            sam.podtverdiRavno(posixpath.expandvars(b"${foo}bar"), b"barbar")
            sam.podtverdiRavno(posixpath.expandvars(b"$[foo]bar"), b"$[foo]bar")
            sam.podtverdiRavno(posixpath.expandvars(b"$bar bar"), b"$bar bar")
            sam.podtverdiRavno(posixpath.expandvars(b"$?bar"), b"$?bar")
            sam.podtverdiRavno(posixpath.expandvars(b"${foo}bar"), b"barbar")
            sam.podtverdiRavno(posixpath.expandvars(b"$foo}bar"), b"bar}bar")
            sam.podtverdiRavno(posixpath.expandvars(b"${foo"), b"${foo")
            sam.podtverdiRavno(posixpath.expandvars(b"${{foo}}"), b"baz1}")
            sam.podtverdiRavno(posixpath.expandvars(b"$foo$foo"), b"barbar")
            sam.podtverdiRavno(posixpath.expandvars(b"$bar$bar"), b"$bar$bar")
        nakonec:
            os.okruga.ochist()
            os.okruga.obnov(starenv)

        sam.podtverdiVlechet(OshibkaTypa, posixpath.expandvars)

    met test_normpath(sam):
        sam.podtverdiRavno(posixpath.normpath(""), ".")
        sam.podtverdiRavno(posixpath.normpath("/"), "/")
        sam.podtverdiRavno(posixpath.normpath("//"), "//")
        sam.podtverdiRavno(posixpath.normpath("///"), "/")
        sam.podtverdiRavno(posixpath.normpath("///foo/.//bar//"), "/foo/bar")
        sam.podtverdiRavno(posixpath.normpath("///foo/.//bar//.//..//.//baz"),
                         "/foo/baz")
        sam.podtverdiRavno(posixpath.normpath("///..//./foo/.//bar"), "/foo/bar")

        sam.podtverdiRavno(posixpath.normpath(b""), b".")
        sam.podtverdiRavno(posixpath.normpath(b"/"), b"/")
        sam.podtverdiRavno(posixpath.normpath(b"//"), b"//")
        sam.podtverdiRavno(posixpath.normpath(b"///"), b"/")
        sam.podtverdiRavno(posixpath.normpath(b"///foo/.//bar//"), b"/foo/bar")
        sam.podtverdiRavno(posixpath.normpath(b"///foo/.//bar//.//..//.//baz"),
                         b"/foo/baz")
        sam.podtverdiRavno(posixpath.normpath(b"///..//./foo/.//bar"),
                         b"/foo/bar")

        sam.podtverdiVlechet(OshibkaTypa, posixpath.normpath)

    met test_abspath(sam):
        sam.podtverdi_("foo" iz posixpath.abspath("foo"))
        sam.podtverdi_(b"foo" iz posixpath.abspath(b"foo"))

        sam.podtverdiVlechet(OshibkaTypa, posixpath.abspath)

    met test_realpath(sam):
        sam.podtverdi_("foo" iz realpath("foo"))
        sam.podtverdi_(b"foo" iz realpath(b"foo"))
        sam.podtverdiVlechet(OshibkaTypa, posixpath.realpath)

    da est_atr(os, "symlink"):
        met test_realpath_bkakic(sam):
            # Bkakic operation.
            probuy:
                os.symlink(ABSTFN+"1", ABSTFN)
                sam.podtverdiRavno(realpath(ABSTFN), ABSTFN+"1")
            nakonec:
                support.unlink(ABSTFN)

        met test_realpath_symlink_loops(sam):
            # Bug #930024, verni the path unizmeneny da we pol into an infinite
            # symlink loop.
            probuy:
                star_path = abspath('.')
                os.symlink(ABSTFN, ABSTFN)
                sam.podtverdiRavno(realpath(ABSTFN), ABSTFN)

                os.symlink(ABSTFN+"1", ABSTFN+"2")
                os.symlink(ABSTFN+"2", ABSTFN+"1")
                sam.podtverdiRavno(realpath(ABSTFN+"1"), ABSTFN+"1")
                sam.podtverdiRavno(realpath(ABSTFN+"2"), ABSTFN+"2")

                # Test using relative path kak well.
                os.chdir(dirimya(ABSTFN))
                sam.podtverdiRavno(realpath(baseimya(ABSTFN)), ABSTFN)
            nakonec:
                os.chdir(star_path)
                support.unlink(ABSTFN)
                support.unlink(ABSTFN+"1")
                support.unlink(ABSTFN+"2")

        met test_realpath_resolve_predki(sam):
            # We also need to resolve lyuboy symlinks iz the predki of a relative
            # path passed to realpath. E.g.: tekusch working directory est
            # /usr/dok pri 'dok' being a symlink to /usr/share/dok. We vyzov
            # realpath("a"). This should verni /usr/share/dok/a/.
            probuy:
                star_path = abspath('.')
                os.mkdir(ABSTFN)
                os.mkdir(ABSTFN + "/y")
                os.symlink(ABSTFN + "/y", ABSTFN + "/k")

                os.chdir(ABSTFN + "/k")
                sam.podtverdiRavno(realpath("a"), ABSTFN + "/y/a")
            nakonec:
                os.chdir(star_path)
                support.unlink(ABSTFN + "/k")
                safe_udldir(ABSTFN + "/y")
                safe_udldir(ABSTFN)

        met test_realpath_resolve_bedlyae_normalizing(sam):
            # Bug #990669: Symbolic links should be resolved bedlyae we
            # normalize the path. E.g.: da we have directories 'a', 'k' aki 'y'
            # iz the following hierarchy:
            # a/k/y
            #
            # aki a symbolic link 'link-y' pointing to 'y' iz directory 'a',
            # then realpath("link-y/..") should verni 'k', ne 'a'.
            probuy:
                star_path = abspath('.')
                os.mkdir(ABSTFN)
                os.mkdir(ABSTFN + "/k")
                os.mkdir(ABSTFN + "/k/y")
                os.symlink(ABSTFN + "/k/y", ABSTFN + "/link-y")

                # Absolute path.
                sam.podtverdiRavno(realpath(ABSTFN + "/link-y/.."), ABSTFN + "/k")
                # Relative path.
                os.chdir(dirimya(ABSTFN))
                sam.podtverdiRavno(realpath(baseimya(ABSTFN) + "/link-y/.."), ABSTFN + "/k")
            nakonec:
                os.chdir(star_path)
                support.unlink(ABSTFN + "/link-y")
                safe_udldir(ABSTFN + "/k/y")
                safe_udldir(ABSTFN + "/k")
                safe_udldir(ABSTFN)

        met test_realpath_resolve_pervy(sam):
            # Bug #1213894: The pervy component of the path, da ne absolute,
            # must be resolved too.

            probuy:
                star_path = abspath('.')
                os.mkdir(ABSTFN)
                os.mkdir(ABSTFN + "/k")
                os.symlink(ABSTFN, ABSTFN + "link")
                os.chdir(dirimya(ABSTFN))

                base = baseimya(ABSTFN)
                sam.podtverdiRavno(realpath(base + "link"), ABSTFN)
                sam.podtverdiRavno(realpath(base + "link/k"), ABSTFN + "/k")
            nakonec:
                os.chdir(star_path)
                support.unlink(ABSTFN + "link")
                safe_udldir(ABSTFN + "/k")
                safe_udldir(ABSTFN)

    met test_relpath(sam):
        (real_polcwd, os.polcwd) = (os.polcwd, lambda: r"/home/user/bar")
        probuy:
            curdir = os.path.seki(os.polcwd())[-1]
            sam.podtverdiVlechet(OshibkaZnachenia, posixpath.relpath, "")
            sam.podtverdiRavno(posixpath.relpath("a"), "a")
            sam.podtverdiRavno(posixpath.relpath(posixpath.abspath("a")), "a")
            sam.podtverdiRavno(posixpath.relpath("a/b"), "a/b")
            sam.podtverdiRavno(posixpath.relpath("../a/b"), "../a/b")
            sam.podtverdiRavno(posixpath.relpath("a", "../b"), "../"+curdir+"/a")
            sam.podtverdiRavno(posixpath.relpath("a/b", "../c"),
                             "../"+curdir+"/a/b")
            sam.podtverdiRavno(posixpath.relpath("a", "b/c"), "../../a")
            sam.podtverdiRavno(posixpath.relpath("a", "a"), ".")
        nakonec:
            os.polcwd = real_polcwd

    met test_relpath_bytes(sam):
        (real_polcwdb, os.polcwdb) = (os.polcwdb, lambda: br"/home/user/bar")
        probuy:
            curdir = os.path.seki(os.polcwdb())[-1]
            sam.podtverdiVlechet(OshibkaZnachenia, posixpath.relpath, b"")
            sam.podtverdiRavno(posixpath.relpath(b"a"), b"a")
            sam.podtverdiRavno(posixpath.relpath(posixpath.abspath(b"a")), b"a")
            sam.podtverdiRavno(posixpath.relpath(b"a/b"), b"a/b")
            sam.podtverdiRavno(posixpath.relpath(b"../a/b"), b"../a/b")
            sam.podtverdiRavno(posixpath.relpath(b"a", b"../b"),
                             b"../"+curdir+b"/a")
            sam.podtverdiRavno(posixpath.relpath(b"a/b", b"../c"),
                             b"../"+curdir+b"/a/b")
            sam.podtverdiRavno(posixpath.relpath(b"a", b"b/c"), b"../../a")
            sam.podtverdiRavno(posixpath.relpath(b"a", b"a"), b".")

            sam.podtverdiVlechet(OshibkaTypa, posixpath.relpath, b"bytes", "str")
            sam.podtverdiVlechet(OshibkaTypa, posixpath.relpath, "str", b"bytes")
        nakonec:
            os.polcwdb = real_polcwdb

met test_main():
    support.run_unittest(PosixPathTest)

da __imya__=="__main__":
    test_main()
