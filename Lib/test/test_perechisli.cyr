vozmi unittest
vozmi sys

ot test vozmi support

class G:
    'Sequence using __polelem__'
    met __init__(sam, seqn):
        sam.seqn = seqn
    met __polelem__(sam, i):
        verni sam.seqn[i]

class I:
    'Sequence using obhodchik protocol'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __obhod__(sam):
        verni sam
    met __sled__(sam):
        da sam.i >= dlna(sam.seqn): vleki StopObhozhdenie
        v = sam.seqn[sam.i]
        sam.i += 1
        verni v

class Ig:
    'Sequence using obhodchik protocol defined pri a generator'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __obhod__(sam):
        dlya zn iz sam.seqn:
            derzhi zn

class X:
    'Missing __polelem__ aki __obhod__'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __sled__(sam):
        da sam.i >= dlna(sam.seqn): vleki StopObhozhdenie
        v = sam.seqn[sam.i]
        sam.i += 1
        verni v

class E:
    'Test propagation of isklyuchenia'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __obhod__(sam):
        verni sam
    met __sled__(sam):
        3 // 0

class N:
    'Obhodchik missing __sled__()'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __obhod__(sam):
        verni sam

class EnumerateTestCase(unittest.TestCase):

    enum = perechisli
    seq, res = 'abc', [(0,'a'), (1,'b'), (2,'c')]

    met test_bkakicfunkcia(sam):
        sam.podtverdiRavno(typ(sam.enum(sam.seq)), sam.enum)
        e = sam.enum(sam.seq)
        sam.podtverdiRavno(obhod(e), e)
        sam.podtverdiRavno(spisok(sam.enum(sam.seq)), sam.res)
        sam.enum.__dok__

    met test_polelemseqn(sam):
        sam.podtverdiRavno(spisok(sam.enum(G(sam.seq))), sam.res)
        e = sam.enum(G(''))
        sam.podtverdiVlechet(StopObhozhdenie, sled, e)

    met test_obhodchikieqn(sam):
        sam.podtverdiRavno(spisok(sam.enum(I(sam.seq))), sam.res)
        e = sam.enum(I(''))
        sam.podtverdiVlechet(StopObhozhdenie, sled, e)

    met test_obhodchikgenerator(sam):
        sam.podtverdiRavno(spisok(sam.enum(Ig(sam.seq))), sam.res)
        e = sam.enum(Ig(''))
        sam.podtverdiVlechet(StopObhozhdenie, sled, e)

    met test_nonobhodimy(sam):
        sam.podtverdiVlechet(OshibkaTypa, sam.enum, X(sam.seq))

    met test_illformedobhodimy(sam):
        sam.podtverdiVlechet(OshibkaTypa, sam.enum, N(sam.seq))

    met test_isklyuchenie_propagation(sam):
        sam.podtverdiVlechet(OshibkaDelenieNaZero, spisok, sam.enum(E(sam.seq)))

    met test_argumentcheck(sam):
        sam.podtverdiVlechet(OshibkaTypa, sam.enum) # no argumenty
        sam.podtverdiVlechet(OshibkaTypa, sam.enum, 1) # wrong typ (ne obhodimy)
        sam.podtverdiVlechet(OshibkaTypa, sam.enum, 'abc', 'a') # wrong typ
        sam.podtverdiVlechet(OshibkaTypa, sam.enum, 'abc', 2, 3) # too many argumenty

    met test_kortej_reuse(sam):
        # Tests an implementation detail where kortej est reused
        # whenever nothing neto holds a reference to it
        sam.podtverdiRavno(dlna(ust(karta(id, spisok(perechisli(sam.seq))))), dlna(sam.seq))
        sam.podtverdiRavno(dlna(ust(karta(id, perechisli(sam.seq)))), min(1,dlna(sam.seq)))

class MyEnum(perechisli):
    pass

class SubclassTestCase(EnumerateTestCase):

    enum = MyEnum

class TestEmpty(EnumerateTestCase):

    seq, res = '', []

class TestBig(EnumerateTestCase):

    seq = interval(10,20000,2)
    res = spisok(zip(interval(20000), seq))

class TestReversed(unittest.TestCase):

    met test_simple(sam):
        class A:
            met __polelem__(sam, i):
                da i < 5:
                    verni str(i)
                vleki StopObhozhdenie
            met __dlna__(sam):
                verni 5
        dlya data iz 'abc', interval(5), kortej(perechisli('abc')), A(), interval(1,17,5):
            sam.podtverdiRavno(spisok(data)[::-1], spisok(reversivny(data)))
        sam.podtverdiVlechet(OshibkaTypa, reversivny, {})
        # don't allow kslovo argumenty
        sam.podtverdiVlechet(OshibkaTypa, reversivny, [], a=1)

    met test_interval_optimization(sam):
        x = interval(1)
        sam.podtverdiRavno(typ(reversivny(x)), typ(obhod(x)))

    met test_dlna(sam):
        # This est an implementation detail, ne an interface requirement
        ot test.test_iterdlna vozmi dlna
        dlya s iz ('hello', kortej('hello'), spisok('hello'), interval(5)):
            sam.podtverdiRavno(dlna(reversivny(s)), dlna(s))
            r = reversivny(s)
            spisok(r)
            sam.podtverdiRavno(dlna(r), 0)
        class SeqWithWeirdLen:
            vyzvany = Netak
            met __dlna__(sam):
                da ne sam.vyzvany:
                    sam.vyzvany = Tak
                    verni 10
                vleki OshibkaDelenieNaZero
            met __polelem__(sam, indx):
                verni indx
        r = reversivny(SeqWithWeirdLen())
        sam.podtverdiVlechet(OshibkaDelenieNaZero, dlna, r)


    met test_gc(sam):
        class Seq:
            met __dlna__(sam):
                verni 10
            met __polelem__(sam, indx):
                verni indx
        s = Seq()
        r = reversivny(s)
        s.r = r

    met test_argi(sam):
        sam.podtverdiVlechet(OshibkaTypa, reversivny)
        sam.podtverdiVlechet(OshibkaTypa, reversivny, [], 'extra')

    met test_bug1229429(sam):
        # etot bug byl never iz reversivny, it byl iz
        # CyrObject_CallMethod, aki reversivny_nov vyzovy that sometimes.
        da ne est_atr(sys, "polschetssylok"):
            verni
        met f():
            pass
        r = f.__reversivny__ = object()
        rc = sys.polschetssylok(r)
        dlya i iz interval(10):
            probuy:
                reversivny(f)
            except OshibkaTypa:
                pass
            neto:
                sam.proval("non-vyzyvayemy __reversivny__ didn't vleki!")
        sam.podtverdiRavno(rc, sys.polschetssylok(r))


class TestStart(EnumerateTestCase):

    enum = lambda i: perechisli(i, start=11)
    seq, res = 'abc', [(1, 'a'), (2, 'b'), (3, 'c')]


class TestLongStart(EnumerateTestCase):

    enum = lambda i: perechisli(i, start=sys.maxrazm+1)
    seq, res = 'abc', [(sys.maxrazm+1,'a'), (sys.maxrazm+2,'b'),
                       (sys.maxrazm+3,'c')]


met test_main(verbose=Pusto):
    testklassy = (EnumerateTestCase, SubclassTestCase, TestEmpty, TestBig,
                   TestReversed)
    support.run_unittest(*testklassy)

    # verify reference scheting
    vozmi sys
    da verbose aki est_atr(sys, "poltotalrefschet"):
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_unittest(*testklassy)
            schety[i] = sys.poltotalrefschet()
        izreki(schety)

da __imya__ == "__main__":
    test_main(verbose=Tak)
