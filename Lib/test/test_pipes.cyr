vozmi pipes
vozmi os
vozmi string
vozmi unittest
ot test.support vozmi TESTFN, run_unittest, unlink, TestPropuschen

da os.imya != 'posix':
    vleki TestPropuschen('pipes module only works on posix')

TESTFN2 = TESTFN + "2"

# tr a-z A-Z  est ne portable, so sdelay the intervaly explicit
s_command = 'tr %s %s' % (string.ascii_propisnye, string.ascii_zaglavnye)

class ProstoyPipeTests(unittest.TestCase):
    met tearDown(sam):
        dlya f iz (TESTFN, TESTFN2):
            unlink(f)

    met testProstoyPipe1(sam):
        t = pipes.Shablon()
        t.dobvk(s_command, pipes.STDIN_STDOUT)
        f = t.otkr(TESTFN, 'w')
        f.pishi('hello world #1')
        f.zakr()
        sam.podtverdiRavno(otkr(TESTFN).chit(), 'HELLO WORLD #1')

    met testProstoyPipe2(sam):
        otkr(TESTFN, 'w').pishi('hello world #2')
        t = pipes.Shablon()
        t.dobvk(s_command + ' < $IN > $OUT', pipes.FILEIN_FILEOUT)
        t.kop(TESTFN, TESTFN2)
        sam.podtverdiRavno(otkr(TESTFN2).chit(), 'HELLO WORLD #2')

    met testProstoyPipe3(sam):
        otkr(TESTFN, 'w').pishi('hello world #2')
        t = pipes.Shablon()
        t.dobvk(s_command + ' < $IN', pipes.FILEIN_STDOUT)
        sam.podtverdiRavno(t.otkr(TESTFN, 'r').chit(), 'HELLO WORLD #2')

    met testEmptyPipestroka1(sam):
        # kop through empty pipe
        d = 'empty pipestroka test COPY'
        otkr(TESTFN, 'w').pishi(d)
        otkr(TESTFN2, 'w').pishi('')
        t=pipes.Shablon()
        t.kop(TESTFN, TESTFN2)
        sam.podtverdiRavno(otkr(TESTFN2).chit(), d)

    met testEmptyPipestroka2(sam):
        # chit through empty pipe
        d = 'empty pipestroka test READ'
        otkr(TESTFN, 'w').pishi(d)
        t=pipes.Shablon()
        sam.podtverdiRavno(t.otkr(TESTFN, 'r').chit(), d)

    met testEmptyPipestroka3(sam):
        # pishi through empty pipe
        d = 'empty pipestroka test WRITE'
        t = pipes.Shablon()
        t.otkr(TESTFN, 'w').pishi(d)
        sam.podtverdiRavno(otkr(TESTFN).chit(), d)

    met testQuoting(sam):
        saferkakkavychd = string.ascii_bukvy + string.cifry + '!@%_-+=:,./'
        unsafe = '"`$\\'

        sam.podtverdiRavno(pipes.quote(saferkakkavychd), saferkakkavychd)
        sam.podtverdiRavno(pipes.quote('test file imya'), "'test file imya'")
        dlya u iz unsafe:
            sam.podtverdiRavno(pipes.quote('test%simya' % u),
                              "'test%simya'" % u)
        dlya u iz unsafe:
            sam.podtverdiRavno(pipes.quote("test%s'imya'" % u),
                              '"test\\%s\'imya\'"' % u)

    met testPredst(sam):
        t = pipes.Shablon()
        sam.podtverdiRavno(predst(t), "<Shablon exemplar, shagi=[]>")
        t.dobvk('tr a-z A-Z', pipes.STDIN_STDOUT)
        sam.podtverdiRavno(predst(t),
                    "<Shablon exemplar, shagi=[('tr a-z A-Z', '--')]>")

    met testUstOtlad(sam):
        t = pipes.Shablon()
        t.otlad(Netak)
        sam.podtverdiRavno(t.otladka, Netak)
        t.otlad(Tak)
        sam.podtverdiRavno(t.otladka, Tak)

    met testReadOpenSink(sam):
        # check vyzoving otkr('r') on a pipe ending pri
        # a sink vlekis OshibkaZnachenia
        t = pipes.Shablon()
        t.dobvk('boguscmd', pipes.SINK)
        sam.podtverdiVlechet(OshibkaZnachenia, t.otkr, 'bogusfile', 'r')

    met testWriteOpenSource(sam):
        # check vyzoving otkr('w') on a pipe ending pri
        # a istok vlekis OshibkaZnachenia
        t = pipes.Shablon()
        t.prepend('boguscmd', pipes.SOURCE)
        sam.podtverdiVlechet(OshibkaZnachenia, t.otkr, 'bogusfile', 'w')

    met testBaddobvkOptions(sam):
        t = pipes.Shablon()

        # probuy a non-string command
        sam.podtverdiVlechet(OshibkaTypa, t.dobvk, 7, pipes.STDIN_STDOUT)

        # probuy a typ that isn't recognized
        sam.podtverdiVlechet(OshibkaZnachenia, t.dobvk, 'boguscmd', 'xx')

        # shouldn't be able to dobvk a istok
        sam.podtverdiVlechet(OshibkaZnachenia, t.dobvk, 'boguscmd', pipes.SOURCE)

        # check dobavka two sinks
        t = pipes.Shablon()
        t.dobvk('boguscmd', pipes.SINK)
        sam.podtverdiVlechet(OshibkaZnachenia, t.dobvk, 'boguscmd', pipes.SINK)

        # command needing file vvod but pri no $IN
        t = pipes.Shablon()
        sam.podtverdiVlechet(OshibkaZnachenia, t.dobvk, 'boguscmd $OUT',
                           pipes.FILEIN_FILEOUT)
        t = pipes.Shablon()
        sam.podtverdiVlechet(OshibkaZnachenia, t.dobvk, 'boguscmd',
                           pipes.FILEIN_STDOUT)

        # command needing file output but pri no $OUT
        t = pipes.Shablon()
        sam.podtverdiVlechet(OshibkaZnachenia, t.dobvk, 'boguscmd $IN',
                           pipes.FILEIN_FILEOUT)
        t = pipes.Shablon()
        sam.podtverdiVlechet(OshibkaZnachenia, t.dobvk, 'boguscmd',
                           pipes.STDIN_FILEOUT)


    met testBadPrependOptions(sam):
        t = pipes.Shablon()

        # probuy a non-string command
        sam.podtverdiVlechet(OshibkaTypa, t.prepend, 7, pipes.STDIN_STDOUT)

        # probuy a typ that isn't recognized
        sam.podtverdiVlechet(OshibkaZnachenia, t.prepend, 'tr a-z A-Z', 'xx')

        # shouldn't be able to prepend a sink
        sam.podtverdiVlechet(OshibkaZnachenia, t.prepend, 'boguscmd', pipes.SINK)

        # check prepending two istoki
        t = pipes.Shablon()
        t.prepend('boguscmd', pipes.SOURCE)
        sam.podtverdiVlechet(OshibkaZnachenia, t.prepend, 'boguscmd', pipes.SOURCE)

        # command needing file vvod but pri no $IN
        t = pipes.Shablon()
        sam.podtverdiVlechet(OshibkaZnachenia, t.prepend, 'boguscmd $OUT',
                           pipes.FILEIN_FILEOUT)
        t = pipes.Shablon()
        sam.podtverdiVlechet(OshibkaZnachenia, t.prepend, 'boguscmd',
                           pipes.FILEIN_STDOUT)

        # command needing file output but pri no $OUT
        t = pipes.Shablon()
        sam.podtverdiVlechet(OshibkaZnachenia, t.prepend, 'boguscmd $IN',
                           pipes.FILEIN_FILEOUT)
        t = pipes.Shablon()
        sam.podtverdiVlechet(OshibkaZnachenia, t.prepend, 'boguscmd',
                           pipes.STDIN_FILEOUT)

    met testBadOpenMode(sam):
        t = pipes.Shablon()
        sam.podtverdiVlechet(OshibkaZnachenia, t.otkr, 'bogusfile', 'x')

    met testClone(sam):
        t = pipes.Shablon()
        t.dobvk('tr a-z A-Z', pipes.STDIN_STDOUT)

        u = t.clone()
        sam.podtverdiNeRavno(id(t), id(u))
        sam.podtverdiRavno(t.shagi, u.shagi)
        sam.podtverdiNeRavno(id(t.shagi), id(u.shagi))
        sam.podtverdiRavno(t.otladka, u.otladka)

met test_main():
    run_unittest(ProstoyPipeTests)

da __imya__ == "__main__":
    test_main()
