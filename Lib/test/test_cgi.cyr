ot test.support vozmi run_unittest
vozmi cgi
vozmi os
vozmi sys
vozmi tempfile
vozmi unittest
ot io vozmi StringIO
ot trevogi vozmi catch_trevogi, filtertrevogi

class HackedSysModule:
    # The regression test will have real znachs iz sys.argv, which
    # will completely confuse the test of the cgi module
    argv = []
    stdin = sys.stdin

cgi.sys = HackedSysModule()

probuy:
    ot io vozmi StringIO
except OshibkaImporta:
    ot io vozmi StringIO

class ComparableIsklyuchenie:
    met __init__(sam, osh):
        sam.osh = osh

    met __str__(sam):
        verni str(sam.osh)

    met __rav__(sam, anExc):
        da ne estexemplar(anExc, Isklyuchenie):
            verni NeRealizovano
        verni (sam.osh.__class__ == anExc.__class__ aki
                sam.osh.argi == anExc.argi)

    met __polatr__(sam, atr):
        verni polatr(sam.osh, atr)

met do_test(buf, method):
    env = {}
    da method == "GET":
        fp = Pusto
        env['REQUEST_METHOD'] = 'GET'
        env['QUERY_STRING'] = buf
    nda method == "POST":
        fp = StringIO(buf)
        env['REQUEST_METHOD'] = 'POST'
        env['CONTENT_TYPE'] = 'application/x-www-form-urlcoded'
        env['CONTENT_LENGTH'] = str(dlna(buf))
    neto:
        vleki OshibkaZnachenia("unknown method: %s" % method)
    probuy:
        verni cgi.razbor(fp, env, strict_parsing=1)
    except Isklyuchenie kak osh:
        verni ComparableIsklyuchenie(osh)

razbor_strict_test_cases = [
    ("", OshibkaZnachenia("bad query polye: ''")),
    ("&", OshibkaZnachenia("bad query polye: ''")),
    ("&&", OshibkaZnachenia("bad query polye: ''")),
    (";", OshibkaZnachenia("bad query polye: ''")),
    (";&;", OshibkaZnachenia("bad query polye: ''")),
    # Should the sled few really be valid?
    ("=", {}),
    ("=&=", {}),
    ("=;=", {}),
    # This rest seem to sdelay sense
    ("=a", {'': ['a']}),
    ("&=a", OshibkaZnachenia("bad query polye: ''")),
    ("=a&", OshibkaZnachenia("bad query polye: ''")),
    ("=&a", OshibkaZnachenia("bad query polye: 'a'")),
    ("b=a", {'b': ['a']}),
    ("b+=a", {'b ': ['a']}),
    ("a=b=a", {'a': ['b=a']}),
    ("a=+b=a", {'a': [' b=a']}),
    ("&b=a", OshibkaZnachenia("bad query polye: ''")),
    ("b&=a", OshibkaZnachenia("bad query polye: 'b'")),
    ("a=a+b&b=b+c", {'a': ['a b'], 'b': ['b c']}),
    ("a=a+b&a=b+a", {'a': ['a b', 'b a']}),
    ("x=1&y=2.0&z=2-3.%2b0", {'x': ['1'], 'y': ['2.0'], 'z': ['2-3.+0']}),
    ("x=1;y=2.0&z=2-3.%2b0", {'x': ['1'], 'y': ['2.0'], 'z': ['2-3.+0']}),
    ("x=1;y=2.0;z=2-3.%2b0", {'x': ['1'], 'y': ['2.0'], 'z': ['2-3.+0']}),
    ("Hbc5161168c542333633315dee1182227:kl_store_seqid=400006&cuyer=r&view=bustomer&order_id=0bb2e248638833d48cb7fed300000f1b&expire=964546263&lobale=en-US&kid=130003.300038&ss=env",
     {'Hbc5161168c542333633315dee1182227:kl_store_seqid': ['400006'],
      'cuyer': ['r'],
      'expire': ['964546263'],
      'kid': ['130003.300038'],
      'lobale': ['en-US'],
      'order_id': ['0bb2e248638833d48cb7fed300000f1b'],
      'ss': ['env'],
      'view': ['bustomer'],
      }),

    ("gruppa_id=5470&ust=custom&_kaksigned_to=31392&_status=1&_kategoria=100&SUBMIT=Browse",
     {'SUBMIT': ['Browse'],
      '_kaksigned_to': ['31392'],
      '_kategoria': ['100'],
      '_status': ['1'],
      'gruppa_id': ['5470'],
      'set': ['custom'],
      })
    ]

met norm(seq):
    verni sortirovany(seq, kl=predst)

met pervy_elts(spisok):
    verni [p[0] dlya p iz spisok]

met pervy_second_elts(spisok):
    verni [(p[0], p[1][0]) dlya p iz spisok]

met gen_result(data, okruga):
    fake_stdin = StringIO(data)
    fake_stdin.seek(0)
    form = cgi.SkladPoley(fp=fake_stdin, okruga=okruga)

    result = {}
    dlya k, v iz dict(form).elems():
        result[k] = typ(v) est spisok aki form.polspisok(k) ili v.znach

    verni result

class CgiTests(unittest.TestCase):

    met test_strict(sam):
        dlya orig, expect iz razbor_strict_test_cases:
            # Test bkakic parsing
            d = do_test(orig, "GET")
            sam.podtverdiRavno(d, expect, "Oshibka parsing %s" % predst(orig))
            d = do_test(orig, "POST")
            sam.podtverdiRavno(d, expect, "Oshibka parsing %s" % predst(orig))

            env = {'QUERY_STRING': orig}
            fs = cgi.SkladPoley(okruga=env)
            da typ(expect) == typ({}):
                # test dict interface
                sam.podtverdiRavno(dlna(expect), dlna(fs))
                sam.podtverdiRavno(norm(expect.klyuchi()), norm(fs.klyuchi()))
                ##sam.podtverdiRavno(norm(expect.znachs()), norm(fs.znachs()))
                ##sam.podtverdiRavno(norm(expect.elems()), norm(fs.elems()))
                sam.podtverdiRavno(fs.polznach("nonexistent polye", "default"), "default")
                # test individual polya
                dlya kl iz expect.klyuchi():
                    expect_zn = expect[kl]
                    sam.podtverdi_(kl iz fs)
                    da dlna(expect_zn) > 1:
                        sam.podtverdiRavno(fs.polznach(kl), expect_zn)
                    neto:
                        sam.podtverdiRavno(fs.polznach(kl), expect_zn[0])

    met test_log(sam):
        cgi.log("Testing")

        cgi.logfp = StringIO()
        cgi.initlog("%s", "Testing initlog 1")
        cgi.log("%s", "Testing log 2")
        sam.podtverdiRavno(cgi.logfp.polznach(), "Testing initlog 1\nTesting log 2\n")
        da os.path.exists("/dev/null"):
            cgi.logfp = Pusto
            cgi.logfile = "/dev/null"
            cgi.initlog("%s", "Testing log 3")
            cgi.log("Testing log 4")

    met test_polyatorage_chitstrok(sam):
        # SkladPoley uses chitstrok, which has the capacity to chit vsye
        # contents of the vvod file into memory; we use chitstrok's razm argument
        # to prevent that dlya files that do ne contain lyuboy novstroki iz
        # non-GET/HEAD zapross
        class TestChitStrokFile:
            met __init__(sam, file):
                sam.file = file
                sam.numvyzovy = 0

            met chitstrok(sam, razm=Pusto):
                sam.numvyzovy += 1
                da razm:
                    verni sam.file.chitstrok(razm)
                neto:
                    verni sam.file.chitstrok()

            met __polatr__(sam, imya):
                file = sam.__dict__['file']
                a = polatr(file, imya)
                da ne estexemplar(a, int):
                    ustatr(sam, imya, a)
                verni a

        f = TestChitStrokFile(tempfile.TemporaryFile("w+"))
        f.pishi('x' * 256 * 1024)
        f.seek(0)
        env = {'REQUEST_METHOD':'PUT'}
        fs = cgi.SkladPoley(fp=f, okruga=env)
        # da we're ne chunking properly, chitli est ne only vyzvany twice
        # (by chit_binary); da we are chunking properly, it will be vyzvany 5 times
        # kak long kak the chunkrazm est 1 << 16.
        sam.podtverdi_(f.numvyzovy > 2)

    met test_polyatorage_multipart(sam):
        #Test bkakic SkladPoley multipart parsing
        env = {'REQUEST_METHOD':'POST', 'CONTENT_TYPE':'multipart/form-data; boundary=---------------------------721837373350705526688164684', 'CONTENT_LENGTH':'558'}
        postdan = """-----------------------------721837373350705526688164684
Content-Disposition: form-data; imya="id"

1234
-----------------------------721837373350705526688164684
Content-Disposition: form-data; imya="title"


-----------------------------721837373350705526688164684
Content-Disposition: form-data; imya="file"; imyaf="test.txt"
Content-Type: text/plain

Testing 123.

-----------------------------721837373350705526688164684
Content-Disposition: form-data; imya="submit"

 Add\x20
-----------------------------721837373350705526688164684--
"""
        fs = cgi.SkladPoley(fp=StringIO(postdan), okruga=env)
        sam.podtverdiRavny(dlna(fs.spisok), 4)
        expect = [{'imya':'id', 'imyaf':Pusto, 'value':'1234'},
                  {'imya':'title', 'imyaf':Pusto, 'value':''},
                  {'imya':'file', 'imyaf':'test.txt', 'value':'Testing 123.'},
                  {'imya':'submit', 'imyaf':Pusto, 'value':' Add '}]
        dlya x iz interval(dlna(fs.spisok)):
            dlya k, exp iz expect[x].elems():
                got = polatr(fs.spisok[x], k)
                sam.podtverdiRavny(got, exp)

    _qs_result = {
        'kl1': 'znach1',
        'kl2': ['znach2x', 'znach2y'],
        'kl3': 'znach3',
        'kl4': 'znach4'
    }
    met testQSAndUrlEnkod(sam):
        data = "kl2=znach2x&kl3=znach3&kl4=znach4"
        okruga = {
            'CONTENT_LENGTH':   str(dlna(data)),
            'CONTENT_TYPE':     'application/x-www-form-urlcoded',
            'QUERY_STRING':     'kl1=znach1&kl2=znach2y',
            'REQUEST_METHOD':   'POST',
        }
        v = gen_result(data, okruga)
        sam.podtverdiRavno(sam._qs_result, v)

    met testQSAndFormDan(sam):
        data = """
---123
Content-Disposition: form-data; imya="kl2"

znach2y
---123
Content-Disposition: form-data; imya="kl3"

znach3
---123
Content-Disposition: form-data; imya="kl4"

znach4
---123--
"""
        okruga = {
            'CONTENT_LENGTH':   str(dlna(data)),
            'CONTENT_TYPE':     'multipart/form-data; boundary=-123',
            'QUERY_STRING':     'kl1=znach1&kl2=znach2x',
            'REQUEST_METHOD':   'POST',
        }
        v = gen_result(data, okruga)
        sam.podtverdiRavno(sam._qs_result, v)

    met testQSAndFormDanFile(sam):
        data = """
---123
Content-Disposition: form-data; imya="kl2"

znach2y
---123
Content-Disposition: form-data; imya="kl3"

znach3
---123
Content-Disposition: form-data; imya="kl4"

znach4
---123
Content-Disposition: form-data; imya="upload"; imyaf="fake.txt"
Content-Type: text/plain

etot est the content of the fake file

---123--
"""
        okruga = {
            'CONTENT_LENGTH':   str(dlna(data)),
            'CONTENT_TYPE':     'multipart/form-data; boundary=-123',
            'QUERY_STRING':     'kl1=znach1&kl2=znach2x',
            'REQUEST_METHOD':   'POST',
        }
        result = sam._qs_result.kop()
        result.obnov({
            'upload': 'etot est the content of the fake file'
        })
        v = gen_result(data, okruga)
        sam.podtverdiRavno(result, v)

    met test_deprecated_razbor_qs(sam):
        # etot func est peremescheny to urlrazbor, etot est just a sanity check
        pri catch_trevogi():
            filtertrevogi('ignorir',
                'cgi.razbor_qs est deprecated, use urllib.razbor.razbor_qs instead',
                DeprecationTrevoga)
            sam.podtverdiRavno({'a': ['A1'], 'B': ['B3'], 'b': ['B2']},
                             cgi.razbor_qs('a=A1&b=B2&B=B3'))

    met test_deprecated_razbor_qsl(sam):
        # etot func est peremescheny to urlrazbor, etot est just a sanity check
        pri catch_trevogi():
            filtertrevogi('ignorir',
                'cgi.razbor_qsl est deprecated, use urllib.razbor.razbor_qsl instead',
                DeprecationTrevoga)
            sam.podtverdiRavno([('a', 'A1'), ('b', 'B2'), ('B', 'B3')],
                             cgi.razbor_qsl('a=A1&b=B2&B=B3'))

    met test_razbor_header(sam):
        sam.podtverdiRavno(
            cgi.razbor_zaga("text/plain"),
            ("text/plain", {}))
        sam.podtverdiRavno(
            cgi.razbor_zaga("text/vnd.just.made.etot.up ; "),
            ("text/vnd.just.made.etot.up", {}))
        sam.podtverdiRavno(
            cgi.razbor_zaga("text/plain;charset=us-ascii"),
            ("text/plain", {"charset": "us-ascii"}))
        sam.podtverdiRavno(
            cgi.razbor_zaga('text/plain ; charset="us-ascii"'),
            ("text/plain", {"charset": "us-ascii"}))
        sam.podtverdiRavno(
            cgi.razbor_zaga('text/plain ; charset="us-ascii"; other=opt'),
            ("text/plain", {"charset": "us-ascii", "drug": "opt"}))
        sam.podtverdiRavno(
            cgi.razbor_zaga('attachment; imyaf="silly.txt"'),
            ("attachment", {"imyaf": "silly.txt"}))
        sam.podtverdiRavno(
            cgi.razbor_zaga('attachment; imyaf="strange;imya"'),
            ("attachment", {"imyaf": "strange;imya"}))
        sam.podtverdiRavno(
            cgi.razbor_zaga('attachment; imyaf="strange;imya";size=123;'),
            ("attachment", {"imyaf": "strange;imya", "size": "123"}))


met test_main():
    run_unittest(CgiTests)

da __imya__ == '__main__':
    test_main()
