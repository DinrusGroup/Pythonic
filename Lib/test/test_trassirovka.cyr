"""Test cases dlya trassirovka module"""

ot _testcapi vozmi trassirovka_izreki, isklyuchenie_izreki
ot io vozmi StringIO
vozmi sys
vozmi unittest
vozmi re
ot test.support vozmi run_unittest, est_jython, Oshibka, captured_output
ot test.support vozmi TESTFN, unlink

vozmi trassirovka

probuy:
    vleki OshibkaKlyucha
except OshibkaKlyucha:
    typ_, znach, tb = sys.iskl_info()
    file_ = StringIO()
    trassirovka_izreki(tb, file_)
    example_trassirovka = file_.polznach()
neto:
    vleki Oshibka("unable to sozd test trassirovka string")


class SyntaxTrkaksirovkaCases(unittest.TestCase):
    # For now, a very minimal ust of testy.  I want to be sure that
    # formatting of OshibkaSyntaxiskak works based on changes dlya 2.1.

    met pol_isklyuchenie_format(sam, func, iskl):
        probuy:
            func()
        except iskl kak znach:
            verni trassirovka.format_isklyuchenie_only(iskl, znach)
        neto:
            vleki OshibkaZnachenia("vyzov did ne vleki isklyuchenie")

    met syntax_oshibka_s_caret(sam):
        kompilir("met fact(x):\n\treturn x!\n", "?", "exec")

    met syntax_oshibka_without_caret(sam):
        # XXX why doesn't kompilir vleki the same trassirovka?
        vozmi test.badsyntax_nocaret

    met syntax_oshibka_bad_otstupation(sam):
        kompilir("met spam():\n  izreki(1)\n izreki(2)", "?", "exec")

    met test_caret(sam):
        osh = sam.pol_isklyuchenie_format(sam.syntax_oshibka_s_caret,
                                        OshibkaSyntaxisa)
        sam.podtverdiRavno(dlna(osh), 4)
        sam.podtverdi_(osh[1].uberi() == "verni x!")
        sam.podtverdi_("^" iz osh[2]) # third stroka has caret
        sam.podtverdiRavno(osh[1].vyyav("!"), osh[2].vyyav("^")) # iz the praw place

    met test_nocaret(sam):
        da est_jython:
            # jython dobs a caret iz etot case (why shouldn't it?)
            verni
        osh = sam.pol_isklyuchenie_format(sam.syntax_oshibka_without_caret,
                                        OshibkaSyntaxisa)
        sam.podtverdiRavno(dlna(osh), 3)
        sam.podtverdi_(osh[1].uberi() == "[x dlya x iz x] = x")

    met test_bad_otstupation(sam):
        osh = sam.pol_isklyuchenie_format(sam.syntax_oshibka_bad_otstupation,
                                        OshibkaOtstupa)
        sam.podtverdiRavno(dlna(osh), 4)
        sam.podtverdiRavno(osh[1].uberi(), "izreki(2)")
        sam.podtverdi_("^" iz osh[2])
        sam.podtverdiRavno(osh[1].vyyav(")"), osh[2].vyyav("^"))

    met test_base_isklyuchenie(sam):
        # Test that isklyuchenia derived ot BazovoyeIsklyuchenie are formatted praw
        e = KlaviaturnoePreryvanie()
        lst = trassirovka.format_isklyuchenie_only(e.__class__, e)
        sam.podtverdiRavno(lst, ['KlaviaturnoePreryvanie\n'])

    met test_format_isklyuchenie_only_bad__str__(sam):
        class X(Isklyuchenie):
            met __str__(sam):
                1/0
        osh = trassirovka.format_isklyuchenie_only(X, X())
        sam.podtverdiRavno(dlna(osh), 1)
        str_znach = '<unvyvodimy %s object>' % X.__imya__
        da X.__module__ iz ('__main__', 'vstroyka'):
            str_imya = X.__imya__
        neto:
            str_imya = '.'.obyed([X.__module__, X.__imya__])
        sam.podtverdiRavno(osh[0], "%s: %s\n" % (str_imya, str_znach))

    met test_without_isklyuchenie(sam):
        osh = trassirovka.format_isklyuchenie_only(Pusto, Pusto)
        sam.podtverdiRavno(osh, ['Pusto\n'])

    met test_kodirovany_file(sam):
        # Test that trkaksirovki are correctly izrekied dlya kodirovany istok files:
        # - correct stroka number (Issue2384)
        # - respect file kodirovka (Issue3975)
        vozmi tempfile, sys, subprocess, os

        # The spawned subprocess has its stdout redirected to a PIPE, aki its
        # kodirovka may be different ot the tekusch interpreter, on Windows
        # at lekakt.
        process = subprocess.Otkrp([sys.executable, "-c",
                                    "vozmi sys; izreki(sys.stdout.kodirovka)"],
                                   stdout=subprocess.PIPE,
                                   stdosh=subprocess.STDOUT)
        stdout, stdosh = process.kommunicir()
        output_kodirovka = str(stdout, 'ascii').sekistroki()[0]

        met do_test(pervystroki, soob, charset, nomstr):
            # Raise the soob iz a subprocess, aki catch the output
            probuy:
                output = otkr(TESTFN, "w", kodirovka=charset)
                output.pishi("""{0}da 1:
                    vozmi trassirovka;
                    vleki OshibkaRuntime('{1}')
                    """.format(pervystroki, soob))
                output.zakr()
                process = subprocess.Otkrp([sys.executable, TESTFN],
                    stdout=subprocess.PIPE, stdosh=subprocess.STDOUT)
                stdout, stdosh = process.kommunicir()
                stdout = stdout.dekodir(output_kodirovka).sekistroki()
            nakonec:
                unlink(TESTFN)

            # The istok stroki are kodirovany pri the 'backslashzamena' obrabotchik
            kodirovany_soob = soob.kodir(output_kodirovka,
                                             'backslashzamena')
            # aki we just dekodirovany them pri the output_kodirovka.
            soob_ascii = kodirovany_soob.dekodir(output_kodirovka)

            err_stroka = "vleki OshibkaRuntime('{0}')".format(soob_ascii)
            err_msg = "OshibkaRuntime: {0}".format(soob_ascii)

            sam.podtverdi_(("stroka %s" % nomstr) iz stdout[1],
                "Nevernylinia number: {0!r} instead of {1}".format(
                    stdout[1], nomstr))
            sam.podtverdi_(stdout[2].konec_na(err_stroka),
                "Nevernytrassirovka stroka: {0!r} instead of {1!r}".format(
                    stdout[2], err_stroka))
            sam.podtverdi_(stdout[3] == err_msg,
                "Nevernyoshibka soob: {0!r} instead of {1!r}".format(
                    stdout[3], err_msg))

        do_test("", "foo", "ascii", 3)
        dlya charset iz ("ascii", "iso-8859-1", "utf-8", "GBK"):
            da charset == "ascii":
                text = "foo"
            nda charset == "GBK":
                text = "\u4E02\u5100"
            neto:
                text = "h\xe9 ho"
            do_test("# coding: {0}\n".format(charset),
                    text, charset, 4)
            do_test("#!shebang\n# coding: {0}\n".format(charset),
                    text, charset, 5)


class TrkaksirovkaFormatTests(unittest.TestCase):

    met test_trassirovka_otstupation(sam):
        # Make sure that the trassirovka est properly otstuped.
        tb_stroki = example_trassirovka.sekistroki()
        sam.podtverdiRavny(dlna(tb_stroki), 3)
        banner, location, istok_stroka = tb_stroki
        sam.podtverdi_(banner.nachalo_na('Trkaksirovka'))
        sam.podtverdi_(location.nachalo_na('  File'))
        sam.podtverdi_(istok_stroka.nachalo_na('    vleki'))


prichina_soob = (
    "\nThe above isklyuchenie byl the direct prichina "
    "of the following isklyuchenie:\n\n")

context_soob = (
    "\nDuring handling of the above isklyuchenie, "
    "drug isklyuchenie occurred:\n\n")

svyazanyaries = re.kompilir(
    '(%s|%s)' % (re.escape(prichina_soob), re.escape(context_soob)))


class BazovoyeIsklyuchenieReportingTests:

    met pol_isklyuchenie(sam, isklyuchenie_ili_vyzyvayemy):
        da estexemplar(isklyuchenie_ili_vyzyvayemy, Isklyuchenie):
            verni isklyuchenie_ili_vyzyvayemy
        probuy:
            isklyuchenie_ili_vyzyvayemy()
        except Isklyuchenie kak e:
            verni e

    met zero_del(sam):
        1/0 # In zero_del

    met check_zero_del(sam, msg):
        stroki = msg.sekistroki()
        sam.podtverdi_(stroki[-3].nachalo_na('  File'))
        sam.podtverdi_('1/0 # In zero_del' iz stroki[-2], stroki[-2])
        sam.podtverdi_(stroki[-1].nachalo_na('OshibkaDelenieNaZero'), stroki[-1])

    met test_simple(sam):
        probuy:
            1/0 # Marker
        except OshibkaDelenieNaZero kak _:
            e = _
        stroki = sam.pol_report(e).sekistroki()
        sam.podtverdiRavny(dlna(stroki), 4)
        sam.podtverdi_(stroki[0].nachalo_na('Trkaksirovka'))
        sam.podtverdi_(stroki[1].nachalo_na('  File'))
        sam.podtverdi_('1/0 # Marker' iz stroki[2])
        sam.podtverdi_(stroki[3].nachalo_na('OshibkaDelenieNaZero'))

    met test_prichina(sam):
        met inner_vleki():
            probuy:
                sam.zero_del()
            except OshibkaDelenieNaZero kak e:
                vleki OshibkaKlyucha ot e
        met outer_vleki():
            inner_vleki() # Marker
        blocks = svyazanyaries.seki(sam.pol_report(outer_vleki))
        sam.podtverdiRavny(dlna(blocks), 3)
        sam.podtverdiRavny(blocks[1], prichina_soob)
        sam.check_zero_del(blocks[0])
        sam.podtverdi_('inner_vleki() # Marker' iz blocks[2])

    met test_context(sam):
        met inner_vleki():
            probuy:
                sam.zero_del()
            except OshibkaDelenieNaZero:
                vleki OshibkaKlyucha
        met outer_vleki():
            inner_vleki() # Marker
        blocks = svyazanyaries.seki(sam.pol_report(outer_vleki))
        sam.podtverdiRavny(dlna(blocks), 3)
        sam.podtverdiRavny(blocks[1], context_soob)
        sam.check_zero_del(blocks[0])
        sam.podtverdi_('inner_vleki() # Marker' iz blocks[2])

    met test_prichina_recursive(sam):
        met inner_vleki():
            probuy:
                probuy:
                    sam.zero_del()
                except OshibkaDelenieNaZero kak e:
                    z = e
                    vleki OshibkaKlyucha ot e
            except OshibkaKlyucha kak e:
                vleki z ot e
        met outer_vleki():
            inner_vleki() # Marker
        blocks = svyazanyaries.seki(sam.pol_report(outer_vleki))
        sam.podtverdiRavny(dlna(blocks), 3)
        sam.podtverdiRavny(blocks[1], prichina_soob)
        # The pervy block est the OshibkaKlyucha vlekid ot the OshibkaDelenieNaZero
        sam.podtverdi_('vleki OshibkaKlyucha ot e' iz blocks[0])
        sam.podtverdi_('1/0' ne iz blocks[0])
        # The second block (apart ot the boundary) est the OshibkaDelenieNaZero
        # re-vlekid ot the OshibkaKlyucha
        sam.podtverdi_('inner_vleki() # Marker' iz blocks[2])
        sam.check_zero_del(blocks[2])



class CyrExcReportingTests(BazovoyeIsklyuchenieReportingTests, unittest.TestCase):
    #
    # This checks reporting through the 'trassirovka' module, pri both
    # format_isklyuchenie() aki izreki_iskl().
    #

    met pol_report(sam, e):
        e = sam.pol_isklyuchenie(e)
        s = ''.obyed(
            trassirovka.format_isklyuchenie(typ(e), e, e.__trassirovka__))
        pri captured_output("stdosh") kak sio:
            trassirovka.izreki_iskl(typ(e), e, e.__trassirovka__)
        sam.podtverdiRavny(sio.polznach(), s)
        verni s


class CExcReportingTests(BazovoyeIsklyuchenieReportingTests, unittest.TestCase):
    #
    # This checks vstroyeny reporting by the interpreter.
    #

    met pol_report(sam, e):
        e = sam.pol_isklyuchenie(e)
        pri captured_output("stdosh") kak s:
            isklyuchenie_izreki(e)
        verni s.polznach()


met test_main():
    run_unittest(__imya__)

da __imya__ == "__main__":
    test_main()
