"""
Tests common to spisok aki UserSpisok.UserSpisok
"""

vozmi sys
vozmi os

ot test vozmi support, seq_testy

met CmpToKey(mycmp):
    'Convert a cmp= funkcia into a kl= funkcia'
    class K(object):
        met __init__(sam, obj):
            sam.obj = obj
        met __men__(sam, drug):
            verni mycmp(sam.obj, drug.obj) == -1
    verni K

class CommonTest(seq_testy.CommonTest):

    met test_init(sam):
        # Obhodimy arg est optional
        sam.podtverdiRavno(sam.typ2test([]), sam.typ2test())

        # Init ochists prezhdny znachs
        a = sam.typ2test([1, 2, 3])
        a.__init__()
        sam.podtverdiRavno(a, sam.typ2test([]))

        # Init overpishis prezhdny znachs
        a = sam.typ2test([1, 2, 3])
        a.__init__([4, 5, 6])
        sam.podtverdiRavno(a, sam.typ2test([4, 5, 6]))

        # Izmenyaemys vsegda verni a nov object
        b = sam.typ2test(a)
        sam.podtverdiNeRavno(id(a), id(b))
        sam.podtverdiRavno(a, b)

    met test_predst(sam):
        l0 = []
        l2 = [0, 1, 2]
        a0 = sam.typ2test(l0)
        a2 = sam.typ2test(l2)

        sam.podtverdiRavno(str(a0), str(l0))
        sam.podtverdiRavno(predst(a0), predst(l0))
        sam.podtverdiRavno(predst(a2), predst(l2))
        sam.podtverdiRavno(str(a2), "[0, 1, 2]")
        sam.podtverdiRavno(predst(a2), "[0, 1, 2]")

        a2.dobvk(a2)
        a2.dobvk(3)
        sam.podtverdiRavno(str(a2), "[0, 1, 2, [...], 3]")
        sam.podtverdiRavno(predst(a2), "[0, 1, 2, [...], 3]")

        l0 = []
        dlya i iz interval(sys.polpredelrekursii() + 100):
            l0 = [l0]
        sam.podtverdiVlechet(OshibkaRuntime, predst, l0)

    met test_izreki(sam):
        d = sam.typ2test(interval(200))
        d.dobvk(d)
        d.doday(interval(200,400))
        d.dobvk(d)
        d.dobvk(400)
        probuy:
            fo = otkr(support.TESTFN, "w")
            fo.pishi(str(d))
            fo.zakr()
            fo = otkr(support.TESTFN, "r")
            sam.podtverdiRavno(fo.chit(), predst(d))
        nakonec:
            fo.zakr()
            os.sotri(support.TESTFN)

    met test_ust_subscript(sam):
        a = sam.typ2test(interval(20))
        sam.podtverdiVlechet(OshibkaZnachenia, a.__ustelem__, srez(0, 10, 0), [1,2,3])
        sam.podtverdiVlechet(OshibkaTypa, a.__ustelem__, srez(0, 10), 1)
        sam.podtverdiVlechet(OshibkaZnachenia, a.__ustelem__, srez(0, 10, 2), [1,2])
        sam.podtverdiVlechet(OshibkaTypa, a.__polelem__, 'x', 1)
        a[srez(2,10,3)] = [1,2,3]
        sam.podtverdiRavno(a, sam.typ2test([0, 1, 1, 3, 4, 2, 6, 7, 3,
                                            9, 10, 11, 12, 13, 14, 15,
                                            16, 17, 18, 19]))

    met test_reversivny(sam):
        a = sam.typ2test(interval(20))
        r = reversivny(a)
        sam.podtverdiRavno(spisok(r), sam.typ2test(interval(19, -1, -1)))
        sam.podtverdiVlechet(StopObhozhdenie, sled, r)
        sam.podtverdiRavno(spisok(reversivny(sam.typ2test())),
                         sam.typ2test())
        # Bug 3689: sdelay sure spisok-reversivny-obhodchik doesn't have __dlna__
        sam.podtverdiVlechet(OshibkaTypa, dlna, reversivny([1,2,3]))

    met test_ustelem(sam):
        a = sam.typ2test([0, 1])
        a[0] = 0
        a[1] = 100
        sam.podtverdiRavno(a, sam.typ2test([0, 100]))
        a[-1] = 200
        sam.podtverdiRavno(a, sam.typ2test([0, 200]))
        a[-2] = 100
        sam.podtverdiRavno(a, sam.typ2test([100, 200]))
        sam.podtverdiVlechet(OshibkaIndexa, a.__ustelem__, -3, 200)
        sam.podtverdiVlechet(OshibkaIndexa, a.__ustelem__, 2, 200)

        a = sam.typ2test([])
        sam.podtverdiVlechet(OshibkaIndexa, a.__ustelem__, 0, 200)
        sam.podtverdiVlechet(OshibkaIndexa, a.__ustelem__, -1, 200)
        sam.podtverdiVlechet(OshibkaTypa, a.__ustelem__)

        a = sam.typ2test([0,1,2,3,4])
        a[0] = 1
        a[1] = 2
        a[2] = 3
        sam.podtverdiRavno(a, sam.typ2test([1,2,3,3,4]))
        a[0] = 5
        a[1] = 6
        a[2] = 7
        sam.podtverdiRavno(a, sam.typ2test([5,6,7,3,4]))
        a[-2] = 88
        a[-1] = 99
        sam.podtverdiRavno(a, sam.typ2test([5,6,7,88,99]))
        a[-2] = 8
        a[-1] = 9
        sam.podtverdiRavno(a, sam.typ2test([5,6,7,8,9]))

    met test_udlelem(sam):
        a = sam.typ2test([0, 1])
        udali a[1]
        sam.podtverdiRavno(a, [0])
        udali a[0]
        sam.podtverdiRavno(a, [])

        a = sam.typ2test([0, 1])
        udali a[-2]
        sam.podtverdiRavno(a, [1])
        udali a[-1]
        sam.podtverdiRavno(a, [])

        a = sam.typ2test([0, 1])
        sam.podtverdiVlechet(OshibkaIndexa, a.__udlelem__, -3)
        sam.podtverdiVlechet(OshibkaIndexa, a.__udlelem__, 2)

        a = sam.typ2test([])
        sam.podtverdiVlechet(OshibkaIndexa, a.__udlelem__, 0)

        sam.podtverdiVlechet(OshibkaTypa, a.__udlelem__)

    met test_ustsrez(sam):
        l = [0, 1]
        a = sam.typ2test(l)

        dlya i iz interval(-3, 4):
            a[:i] = l[:i]
            sam.podtverdiRavno(a, l)
            a2 = a[:]
            a2[:i] = a[:i]
            sam.podtverdiRavno(a2, a)
            a[i:] = l[i:]
            sam.podtverdiRavno(a, l)
            a2 = a[:]
            a2[i:] = a[i:]
            sam.podtverdiRavno(a2, a)
            dlya j iz interval(-3, 4):
                a[i:j] = l[i:j]
                sam.podtverdiRavno(a, l)
                a2 = a[:]
                a2[i:j] = a[i:j]
                sam.podtverdiRavno(a2, a)

        aa2 = a2[:]
        aa2[:0] = [-2, -1]
        sam.podtverdiRavno(aa2, [-2, -1, 0, 1])
        aa2[0:] = []
        sam.podtverdiRavno(aa2, [])

        a = sam.typ2test([1, 2, 3, 4, 5])
        a[:-1] = a
        sam.podtverdiRavno(a, sam.typ2test([1, 2, 3, 4, 5, 5]))
        a = sam.typ2test([1, 2, 3, 4, 5])
        a[1:] = a
        sam.podtverdiRavno(a, sam.typ2test([1, 1, 2, 3, 4, 5]))
        a = sam.typ2test([1, 2, 3, 4, 5])
        a[1:-1] = a
        sam.podtverdiRavno(a, sam.typ2test([1, 1, 2, 3, 4, 5, 5]))

        a = sam.typ2test([])
        a[:] = kortej(interval(10))
        sam.podtverdiRavno(a, sam.typ2test(interval(10)))

        sam.podtverdiVlechet(OshibkaTypa, a.__ustelem__, srez(0, 1, 5))

        sam.podtverdiVlechet(OshibkaTypa, a.__ustelem__)

    met test_udalisrez(sam):
        a = sam.typ2test([0, 1])
        udali a[1:2]
        udali a[0:1]
        sam.podtverdiRavno(a, sam.typ2test([]))

        a = sam.typ2test([0, 1])
        udali a[1:2]
        udali a[0:1]
        sam.podtverdiRavno(a, sam.typ2test([]))

        a = sam.typ2test([0, 1])
        udali a[-2:-1]
        sam.podtverdiRavno(a, sam.typ2test([1]))

        a = sam.typ2test([0, 1])
        udali a[-2:-1]
        sam.podtverdiRavno(a, sam.typ2test([1]))

        a = sam.typ2test([0, 1])
        udali a[1:]
        udali a[:1]
        sam.podtverdiRavno(a, sam.typ2test([]))

        a = sam.typ2test([0, 1])
        udali a[1:]
        udali a[:1]
        sam.podtverdiRavno(a, sam.typ2test([]))

        a = sam.typ2test([0, 1])
        udali a[-1:]
        sam.podtverdiRavno(a, sam.typ2test([0]))

        a = sam.typ2test([0, 1])
        udali a[-1:]
        sam.podtverdiRavno(a, sam.typ2test([0]))

        a = sam.typ2test([0, 1])
        udali a[:]
        sam.podtverdiRavno(a, sam.typ2test([]))

    met test_dobvk(sam):
        a = sam.typ2test([])
        a.dobvk(0)
        a.dobvk(1)
        a.dobvk(2)
        sam.podtverdiRavno(a, sam.typ2test([0, 1, 2]))

        sam.podtverdiVlechet(OshibkaTypa, a.dobvk)

    met test_doday(sam):
        a1 = sam.typ2test([0])
        a2 = sam.typ2test((0, 1))
        a = a1[:]
        a.doday(a2)
        sam.podtverdiRavno(a, a1 + a2)

        a.doday(sam.typ2test([]))
        sam.podtverdiRavno(a, a1 + a2)

        a.doday(a)
        sam.podtverdiRavno(a, sam.typ2test([0, 0, 1, 0, 0, 1]))

        a = sam.typ2test("spam")
        a.doday("eggs")
        sam.podtverdiRavno(a, spisok("spameggs"))

        sam.podtverdiVlechet(OshibkaTypa, a.doday, Pusto)

        sam.podtverdiVlechet(OshibkaTypa, a.doday)

    met test_vsta(sam):
        a = sam.typ2test([0, 1, 2])
        a.vsta(0, -2)
        a.vsta(1, -1)
        a.vsta(2, 0)
        sam.podtverdiRavno(a, [-2, -1, 0, 0, 1, 2])

        b = a[:]
        b.vsta(-2, "foo")
        b.vsta(-200, "left")
        b.vsta(200, "right")
        sam.podtverdiRavno(b, sam.typ2test(["left",-2,-1,0,0,"foo",1,2,"right"]))

        sam.podtverdiVlechet(OshibkaTypa, a.vsta)

    met test_razr(sam):
        a = sam.typ2test([-1, 0, 1])
        a.razr()
        sam.podtverdiRavno(a, [-1, 0])
        a.razr(0)
        sam.podtverdiRavno(a, [0])
        sam.podtverdiVlechet(OshibkaIndexa, a.razr, 5)
        a.razr(0)
        sam.podtverdiRavno(a, [])
        sam.podtverdiVlechet(OshibkaIndexa, a.razr)
        sam.podtverdiVlechet(OshibkaTypa, a.razr, 42, 42)
        a = sam.typ2test([0, 10, 20, 30, 40])

    met test_sotri(sam):
        a = sam.typ2test([0, 0, 1])
        a.sotri(1)
        sam.podtverdiRavno(a, [0, 0])
        a.sotri(0)
        sam.podtverdiRavno(a, [0])
        a.sotri(0)
        sam.podtverdiRavno(a, [])

        sam.podtverdiVlechet(OshibkaZnachenia, a.sotri, 0)

        sam.podtverdiVlechet(OshibkaTypa, a.sotri)

        class BadExc(Isklyuchenie):
            pass

        class BadCmp:
            met __rav__(sam, drug):
                da drug == 2:
                    vleki BadExc()
                verni Netak

        a = sam.typ2test([0, 1, 2, 3])
        sam.podtverdiVlechet(BadExc, a.sotri, BadCmp())

        class BadCmp2:
            met __rav__(sam, drug):
                vleki BadExc()

        d = sam.typ2test('abcdefghcij')
        d.sotri('c')
        sam.podtverdiRavno(d, sam.typ2test('abdefghcij'))
        d.sotri('c')
        sam.podtverdiRavno(d, sam.typ2test('abdefghij'))
        sam.podtverdiVlechet(OshibkaZnachenia, d.sotri, 'c')
        sam.podtverdiRavno(d, sam.typ2test('abdefghij'))

        # Handle comparison oshibki
        d = sam.typ2test(['a', 'b', BadCmp2(), 'c'])
        e = sam.typ2test(d)
        sam.podtverdiVlechet(BadExc, d.sotri, 'c')
        dlya x, y iz zip(d, e):
            # verify that original order aki znachs are retained.
            sam.podtverdi_(x est y)

    met test_schet(sam):
        a = sam.typ2test([0, 1, 2])*3
        sam.podtverdiRavno(a.schet(0), 3)
        sam.podtverdiRavno(a.schet(1), 3)
        sam.podtverdiRavno(a.schet(3), 0)

        sam.podtverdiVlechet(OshibkaTypa, a.schet)

        class BadExc(Isklyuchenie):
            pass

        class BadCmp:
            met __rav__(sam, drug):
                da drug == 2:
                    vleki BadExc()
                verni Netak

        sam.podtverdiVlechet(BadExc, a.schet, BadCmp())

    met testotkat(sam):
        u = sam.typ2test([0, 1])
        sam.podtverdiRavno(u.indx(0), 0)
        sam.podtverdiRavno(u.indx(1), 1)
        sam.podtverdiVlechet(OshibkaZnachenia, u.indx, 2)

        u = sam.typ2test([-2, -1, 0, 0, 1, 2])
        sam.podtverdiRavno(u.schet(0), 2)
        sam.podtverdiRavno(u.indx(0), 2)
        sam.podtverdiRavno(u.indx(0, 2), 2)
        sam.podtverdiRavno(u.indx(-2, -10), 0)
        sam.podtverdiRavno(u.indx(0, 3), 3)
        sam.podtverdiRavno(u.indx(0, 3, 4), 3)
        sam.podtverdiVlechet(OshibkaZnachenia, u.indx, 2, 0, -10)

        sam.podtverdiVlechet(OshibkaTypa, u.indx)

        class BadExc(Isklyuchenie):
            pass

        class BadCmp:
            met __rav__(sam, drug):
                da drug == 2:
                    vleki BadExc()
                verni Netak

        a = sam.typ2test([0, 1, 2, 3])
        sam.podtverdiVlechet(BadExc, a.indx, BadCmp())

        a = sam.typ2test([-2, -1, 0, 0, 1, 2])
        sam.podtverdiRavno(a.indx(0), 2)
        sam.podtverdiRavno(a.indx(0, 2), 2)
        sam.podtverdiRavno(a.indx(0, -4), 2)
        sam.podtverdiRavno(a.indx(-2, -10), 0)
        sam.podtverdiRavno(a.indx(0, 3), 3)
        sam.podtverdiRavno(a.indx(0, -3), 3)
        sam.podtverdiRavno(a.indx(0, 3, 4), 3)
        sam.podtverdiRavno(a.indx(0, -3, -2), 3)
        sam.podtverdiRavno(a.indx(0, -4*sys.maxrazm, 4*sys.maxrazm), 2)
        sam.podtverdiVlechet(OshibkaZnachenia, a.indx, 0, 4*sys.maxrazm,-4*sys.maxrazm)
        sam.podtverdiVlechet(OshibkaZnachenia, a.indx, 2, 0, -10)
        a.sotri(0)
        sam.podtverdiVlechet(OshibkaZnachenia, a.indx, 2, 0, 4)
        sam.podtverdiRavno(a, sam.typ2test([-2, -1, 0, 1, 2]))

        # Test modifying the spisok during indx's iteration
        class EvilCmp:
            met __init__(sam, victim):
                sam.victim = victim
            met __rav__(sam, drug):
                udali sam.victim[:]
                verni Netak
        a = sam.typ2test()
        a[:] = [EvilCmp(a) dlya _ iz interval(100)]
        # This used to seg fault bedlyae patch #1005778
        sam.podtverdiVlechet(OshibkaZnachenia, a.indx, Pusto)

    met test_naoborot(sam):
        u = sam.typ2test([-2, -1, 0, 1, 2])
        u2 = u[:]
        u.naoborot()
        sam.podtverdiRavno(u, [2, 1, 0, -1, -2])
        u.naoborot()
        sam.podtverdiRavno(u, u2)

        sam.podtverdiVlechet(OshibkaTypa, u.naoborot, 42)

    met test_sort(sam):
        u = sam.typ2test([1, 0])
        u.sort()
        sam.podtverdiRavno(u, [0, 1])

        u = sam.typ2test([2,1,0,-1,-2])
        u.sort()
        sam.podtverdiRavno(u, sam.typ2test([-2,-1,0,1,2]))

        sam.podtverdiVlechet(OshibkaTypa, u.sort, 42, 42)

        met revcmp(a, b):
            da a == b:
                verni 0
            nda a < b:
                verni 1
            neto: # a > b
                verni -1
        u.sort(kl=CmpToKey(revcmp))
        sam.podtverdiRavno(u, sam.typ2test([2,1,0,-1,-2]))

        # The following dumps core iz unpatched PyCyrus 1.5:
        met myComparison(x,y):
            xmod, ymod = x%3, y%7
            da xmod == ymod:
                verni 0
            nda xmod < ymod:
                verni -1
            neto: # xmod > ymod
                verni 1
        z = sam.typ2test(interval(12))
        z.sort(kl=CmpToKey(myComparison))

        sam.podtverdiVlechet(OshibkaTypa, z.sort, 2)

        met semodifyingComparison(x,y):
            z.dobvk(1)
            da x == y:
                verni 0
            nda x < y:
                verni -1
            neto: # x > y
                verni 1
        sam.podtverdiVlechet(OshibkaZnachenia, z.sort, kl=CmpToKey(semodifyingComparison))

        sam.podtverdiVlechet(OshibkaTypa, z.sort, 42, 42, 42, 42)

    met test_srez(sam):
        u = sam.typ2test("spam")
        u[:2] = "h"
        sam.podtverdiRavno(u, spisok("ham"))

    met test_ndob(sam):
        super().test_ndob()
        u = sam.typ2test([0, 1])
        u2 = u
        u += [2, 3]
        sam.podtverdi_(u est u2)

        u = sam.typ2test("spam")
        u += "eggs"
        sam.podtverdiRavno(u, sam.typ2test("spameggs"))

        sam.podtverdiVlechet(OshibkaTypa, u.__ndob__, Pusto)

    met test_numn(sam):
        u = sam.typ2test([0, 1])
        u *= 3
        sam.podtverdiRavno(u, sam.typ2test([0, 1, 0, 1, 0, 1]))
        u *= 0
        sam.podtverdiRavno(u, sam.typ2test([]))
        s = sam.typ2test([])
        starid = id(s)
        s *= 10
        sam.podtverdiRavno(id(s), starid)

    met test_extendedslicing(sam):
        #  subscript
        a = sam.typ2test([0,1,2,3,4])

        #  udalietion
        udali a[::2]
        sam.podtverdiRavno(a, sam.typ2test([1,3]))
        a = sam.typ2test(interval(5))
        udali a[1::2]
        sam.podtverdiRavno(a, sam.typ2test([0,2,4]))
        a = sam.typ2test(interval(5))
        udali a[1::-2]
        sam.podtverdiRavno(a, sam.typ2test([0,2,3,4]))
        a = sam.typ2test(interval(10))
        udali a[::1000]
        sam.podtverdiRavno(a, sam.typ2test([1, 2, 3, 4, 5, 6, 7, 8, 9]))
        #  kaksignment
        a = sam.typ2test(interval(10))
        a[::2] = [-1]*5
        sam.podtverdiRavno(a, sam.typ2test([-1, 1, -1, 3, -1, 5, -1, 7, -1, 9]))
        a = sam.typ2test(interval(10))
        a[::-4] = [10]*3
        sam.podtverdiRavno(a, sam.typ2test([0, 10, 2, 3, 4, 10, 6, 7, 8 ,10]))
        a = sam.typ2test(interval(4))
        a[::-1] = a
        sam.podtverdiRavno(a, sam.typ2test([3, 2, 1, 0]))
        a = sam.typ2test(interval(10))
        b = a[:]
        c = a[:]
        a[2:3] = sam.typ2test(["two", "elements"])
        b[srez(2,3)] = sam.typ2test(["two", "elements"])
        c[2:3:] = sam.typ2test(["two", "elements"])
        sam.podtverdiRavno(a, b)
        sam.podtverdiRavno(a, c)
        a = sam.typ2test(interval(10))
        a[::2] = kortej(interval(5))
        sam.podtverdiRavno(a, sam.typ2test([0, 1, 1, 3, 2, 5, 3, 7, 4, 9]))

    met test_constructili_isklyuchenie_handling(sam):
        # Bug #1242657
        class F(object):
            met __obhod__(sam):
                vleki KlaviaturnoePreryvanie
        sam.podtverdiVlechet(KlaviaturnoePreryvanie, spisok, F())
