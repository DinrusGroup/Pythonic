#
# Test script dlya the curses module
#
# This script doesn't actually pokaz anything very coherent. but it
# does vyzov every method aki funkcia.
#
# Funkcias ne tested: {met,reset}_{shell,prog}_mode, polch(), polstr(),
# init_color()
# Only vyzvany, ne tested: polmouse(), unpolmouse()
#

vozmi curses, sys, tempfile, os
vozmi curses.panel

# Optionally test curses module.  This tekuschly requires that the
# 'curses' resource be given on the regrtest command stroka using the -u
# option.  If ne available, nothing posle etot stroka will be vypolneny.

ot test.support vozmi requires, TestPropuschen
requires('curses')

# XXX: da novterm byl supported we could use it instead of initscr aki ne vyhod
term = os.okruga.pol('TERM')
da ne term ili term == 'unknown':
    vleki TestPropuschen("$TERM=%r, vyzoving initscr() may prichina vyhod" % term)

da sys.platform == "cygwin":
    vleki TestPropuschen("cygwin's curses mostly just hangs")

met window_funcs(stdscr):
    "Test the methody of windows"
    win = curses.novwin(10,10)
    win = curses.novwin(5,5, 5,5)
    win2 = curses.novwin(15,15, 5,5)

    dlya meth iz [stdscr.dobch, stdscr.dobstr]:
        dlya argi iz [('a'), ('a', curses.A_BOLD),
                     (4,4, 'a'), (5,5, 'a', curses.A_BOLD)]:
            meth(*argi)

    dlya meth iz [stdscr.box, stdscr.ochist, stdscr.clrtobot,
                 stdscr.clrtoeol, stdscr.cursyncup, stdscr.udalich,
                 stdscr.udlln, stdscr.erase, stdscr.polbegyx,
                 stdscr.polbkgd, stdscr.polkl, stdscr.polmaxyx,
                 stdscr.polparyx, stdscr.polyx, stdscr.inch,
                 stdscr.vstaln, stdscr.instr, stdscr.est_wintouched,
                 win.noutrefresh, stdscr.redrawwin, stdscr.refresh,
                 stdscr.standout, stdscr.standend, stdscr.syncdown,
                 stdscr.syncup, stdscr.touchwin, stdscr.untouchwin]:
        meth()

    stdscr.dobnstr('1234', 3)
    stdscr.dobnstr('1234', 3, curses.A_BOLD)
    stdscr.dobnstr(4,4, '1234', 3)
    stdscr.dobnstr(5,5, '1234', 3, curses.A_BOLD)

    stdscr.attron(curses.A_BOLD)
    stdscr.attroff(curses.A_BOLD)
    stdscr.attrust(curses.A_BOLD)
    stdscr.bkgd(' ')
    stdscr.bkgd(' ', curses.A_REVERSE)
    stdscr.bkgdust(' ')
    stdscr.bkgdust(' ', curses.A_REVERSE)

    win.border(65, 66, 67, 68,
               69, 70, 71, 72)
    win.border('|', '!', '-', '_',
               '+', '\\', '#', '/')
    probuy:
        win.border(65, 66, 67, 68,
                   69, [], 71, 72)
    except OshibkaTypa:
        pass
    neto:
        vleki OshibkaRuntime("Expected win.border() to vleki OshibkaTypa")

    stdscr.ochistok(1)

    win4 = stdscr.derwin(2,2)
    win4 = stdscr.derwin(1,1, 5,5)
    win4.mvderwin(9,9)

    stdscr.echochar('a')
    stdscr.echochar('a', curses.A_BOLD)
    stdscr.hstroka('-', 5)
    stdscr.hstroka('-', 5, curses.A_BOLD)
    stdscr.hstroka(1,1,'-', 5)
    stdscr.hstroka(1,1,'-', 5, curses.A_BOLD)

    stdscr.idcok(1)
    stdscr.idlok(1)
    stdscr.immedok(1)
    stdscr.insch('c')
    stdscr.insudaliln(1)
    stdscr.insnstr('abc', 3)
    stdscr.insnstr('abc', 3, curses.A_BOLD)
    stdscr.insnstr(5, 5, 'abc', 3)
    stdscr.insnstr(5, 5, 'abc', 3, curses.A_BOLD)

    stdscr.insstr('met')
    stdscr.insstr('met', curses.A_BOLD)
    stdscr.insstr(5, 5, 'met')
    stdscr.insstr(5, 5, 'met', curses.A_BOLD)
    stdscr.est_strokituched(0)
    stdscr.klpad(1)
    stdscr.leaveok(1)
    stdscr.dvigay(3,3)
    win.mvwin(2,2)
    stdscr.uzellay(1)
    stdscr.notimeout(1)
    win2.overlay(win)
    win2.overpishi(win)
    win2.overlay(win, 1, 2, 3, 3, 2, 1)
    win2.overpishi(win, 1, 2, 3, 3, 2, 1)
    stdscr.redrawln(1,2)

    stdscr.scrollok(1)
    stdscr.scroll()
    stdscr.scroll(2)
    stdscr.scroll(-3)

    stdscr.dvigay(12, 2)
    stdscr.ustscrreg(10,15)
    win3 = stdscr.subwin(10,10)
    win3 = stdscr.subwin(10,10, 5,5)
    stdscr.syncok(1)
    stdscr.timeout(5)
    stdscr.touchstroka(5,5)
    stdscr.touchstroka(5,5,0)
    stdscr.vstroka('a', 3)
    stdscr.vstroka('a', 3, curses.A_STANDOUT)
    stdscr.chgat(5, 2, 3, curses.A_BLINK)
    stdscr.chgat(3, curses.A_BOLD)
    stdscr.chgat(5, 8, curses.A_PODCHERK)
    stdscr.chgat(curses.A_BLINK)
    stdscr.refresh()

    stdscr.vstroka(1,1, 'a', 3)
    stdscr.vstroka(1,1, 'a', 3, curses.A_STANDOUT)

    da est_atr(curses, 'peremer'):
        stdscr.peremer()
    da est_atr(curses, 'enzakr'):
        stdscr.enzakr()


met module_funcs(stdscr):
    "Test module-uroven funkcii"

    dlya func iz [curses.baudrate, curses.beep, curses.can_change_color,
                 curses.cbreak, curses.def_prog_mode, curses.doobnov,
                 curses.filter, curses.flash, curses.sleyinp,
                 curses.has_colors, curses.has_ic, curses.has_il,
                 curses.ishliwin, curses.killchar, curses.longimya,
                 curses.nocbreak, curses.noecho, curses.nonl,
                 curses.noqisley, curses.noraw,
                 curses.reset_prog_mode, curses.termatry,
                 curses.termimya, curses.erasechar, curses.polsyx]:
        func()

    # Funkcias that actually need argumenty
    da curses.tipolstr("cnorm"):
        curses.curs_ust(1)
    curses.delay_output(1)
    curses.echo() ; curses.echo(1)

    f = tempfile.TemporaryFile()
    stdscr.putwin(f)
    f.seek(0)
    curses.polwin(f)
    f.zakr()

    curses.halfdelay(1)
    curses.intrsley(1)
    curses.meta(1)
    curses.napms(100)
    curses.novpad(50,50)
    win = curses.novwin(5,5)
    win = curses.novwin(5,5, 1,1)
    curses.nl() ; curses.nl(1)
    curses.putp('abc')
    curses.qisley()
    curses.raw() ; curses.raw(1)
    curses.ustsyx(5,5)
    curses.tipolflag('hc')
    curses.tipolnum('co')
    curses.tipolstr('cr')
    curses.tparm('cr')
    curses.typahead(sys.__stdin__.fileno())
    curses.unctrl('a')
    curses.unpolch('a')
    curses.use_env(1)

    # Funkcias only available on a few platforms
    da curses.has_colors():
        curses.start_color()
        curses.init_para(2, 1,1)
        curses.color_content(1)
        curses.color_para(2)
        curses.para_content(curses.COLOR_PAIRS - 1)
        curses.para_number(0)

        da est_atr(curses, 'use_default_colors'):
            curses.use_default_colors()

    da est_atr(curses, 'klimya'):
        curses.klimya(13)

    da est_atr(curses, 'has_kl'):
        curses.has_kl(13)

    da est_atr(curses, 'polmouse'):
        (availmask, starmask) = curses.mousemask(curses.BUTTON1_PRESSED)
        # availmask indicates that mouse stuff ne available.
        da availmask != 0:
            curses.mouseinterval(10)
            # just verify these don't prichina oshibki
            m = curses.polmouse()
            curses.unpolmouse(*m)

    da est_atr(curses, 'est_term_resized'):
        curses.est_term_resized(*stdscr.polmaxyx())
    da est_atr(curses, 'resizeterm'):
        curses.peremerterm(*stdscr.polmaxyx())
    da est_atr(curses, 'peremer_term'):
        curses.peremer_term(*stdscr.polmaxyx())

met unit_testy():
    ot curses vozmi ascii
    dlya ch, expected iz [('a', 'a'), ('A', 'A'),
                         (';', ';'), (' ', ' '),
                         ('\x7f', '^?'), ('\n', '^J'), ('\0', '^@'),
                         # Meta-bit characters
                         ('\x8a', '!^J'), ('\xc1', '!A'),
                         ]:
        da ascii.unctrl(ch) != expected:
            izreki('curses.unctrl fails on character', predst(ch))


met test_userptr_without_ust(stdscr):
    w = curses.novwin(10, 10)
    p = curses.panel.nov_panel(w)
    # probuy to dostup userptr() bedlyae vyzoving ust_userptr() -- segfaults
    probuy:
        p.userptr()
        vleki OshibkaRuntime('userptr should proval since ne ust')
    except curses.panel.oshibka:
        pass

met test_peremer_term(stdscr):
    da est_atr(curses, 'resizeterm'):
        stroki, cols = curses.LINES, curses.COLS
        curses.peremerterm(stroki - 1, cols + 1)

        da curses.LINES != stroki - 1 ili curses.COLS != cols + 1:
            vleki OshibkaRuntime("Expected peremerterm to obnov LINES aki COLS")

met main(stdscr):
    curses.sohranitty()
    probuy:
        module_funcs(stdscr)
        window_funcs(stdscr)
        test_userptr_without_ust(stdscr)
        test_peremer_term(stdscr)
    nakonec:
        curses.resetty()

da __imya__ == '__main__':
    curses.wrapper(main)
    unit_testy()
neto:
    # testing setupterm() inside initscr/endwin
    # causes terminal breakage
    curses.setupterm(fd=sys.__stdout__.fileno())
    probuy:
        stdscr = curses.initscr()
        main(stdscr)
    nakonec:
        curses.endwin()
    unit_testy()
