# Tests that work dlya both bytes aki bufer objekty.
# See PEP 3137.

vozmi struct
vozmi sys

class MixinBytesbuferCommonTests(object):
    """Tests that work dlya both bytes aki bufer objekty.
    See PEP 3137.
    """

    met marshal(sam, x):
        """Convert x into the appropriate typ dlya these testy."""
        vleki OshibkaRuntime('test class must provide a marshal method')

    met test_estmaly(sam):
        sam.podtverdiFalse(sam.marshal(b'').estmaly())
        sam.podtverdi_(sam.marshal(b'a').estmaly())
        sam.podtverdiFalse(sam.marshal(b'A').estmaly())
        sam.podtverdiFalse(sam.marshal(b'\n').estmaly())
        sam.podtverdi_(sam.marshal(b'abc').estmaly())
        sam.podtverdiFalse(sam.marshal(b'aBc').estmaly())
        sam.podtverdi_(sam.marshal(b'abc\n').estmaly())
        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'abc').estmaly, 42)

    met test_estzagl(sam):
        sam.podtverdiFalse(sam.marshal(b'').estzagl())
        sam.podtverdiFalse(sam.marshal(b'a').estzagl())
        sam.podtverdi_(sam.marshal(b'A').estzagl())
        sam.podtverdiFalse(sam.marshal(b'\n').estzagl())
        sam.podtverdi_(sam.marshal(b'ABC').estzagl())
        sam.podtverdiFalse(sam.marshal(b'AbC').estzagl())
        sam.podtverdi_(sam.marshal(b'ABC\n').estzagl())
        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'abc').estzagl, 42)

    met test_esttitul(sam):
        sam.podtverdiFalse(sam.marshal(b'').esttitul())
        sam.podtverdiFalse(sam.marshal(b'a').esttitul())
        sam.podtverdi_(sam.marshal(b'A').esttitul())
        sam.podtverdiFalse(sam.marshal(b'\n').esttitul())
        sam.podtverdi_(sam.marshal(b'A Titlecased Stroka').esttitul())
        sam.podtverdi_(sam.marshal(b'A\nTitlecased Stroka').esttitul())
        sam.podtverdi_(sam.marshal(b'A Titlecased, Stroka').esttitul())
        sam.podtverdiFalse(sam.marshal(b'Not a ozagld String').esttitul())
        sam.podtverdiFalse(sam.marshal(b'Not\ta Titlecase String').esttitul())
        sam.podtverdiFalse(sam.marshal(b'Not--a Titlecase String').esttitul())
        sam.podtverdiFalse(sam.marshal(b'NOT').esttitul())
        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'abc').esttitul, 42)

    met test_estpbel(sam):
        sam.podtverdiFalse(sam.marshal(b'').estpbel())
        sam.podtverdiFalse(sam.marshal(b'a').estpbel())
        sam.podtverdi_(sam.marshal(b' ').estpbel())
        sam.podtverdi_(sam.marshal(b'\t').estpbel())
        sam.podtverdi_(sam.marshal(b'\r').estpbel())
        sam.podtverdi_(sam.marshal(b'\n').estpbel())
        sam.podtverdi_(sam.marshal(b' \t\r\n').estpbel())
        sam.podtverdiFalse(sam.marshal(b' \t\r\na').estpbel())
        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'abc').estpbel, 42)

    met test_estalfa(sam):
        sam.podtverdiFalse(sam.marshal(b'').estalfa())
        sam.podtverdi_(sam.marshal(b'a').estalfa())
        sam.podtverdi_(sam.marshal(b'A').estalfa())
        sam.podtverdiFalse(sam.marshal(b'\n').estalfa())
        sam.podtverdi_(sam.marshal(b'abc').estalfa())
        sam.podtverdiFalse(sam.marshal(b'aBc123').estalfa())
        sam.podtverdiFalse(sam.marshal(b'abc\n').estalfa())
        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'abc').estalfa, 42)

    met test_estalnum(sam):
        sam.podtverdiFalse(sam.marshal(b'').estalnum())
        sam.podtverdi_(sam.marshal(b'a').estalnum())
        sam.podtverdi_(sam.marshal(b'A').estalnum())
        sam.podtverdiFalse(sam.marshal(b'\n').estalnum())
        sam.podtverdi_(sam.marshal(b'123abc456').estalnum())
        sam.podtverdi_(sam.marshal(b'a1b3c').estalnum())
        sam.podtverdiFalse(sam.marshal(b'aBc000 ').estalnum())
        sam.podtverdiFalse(sam.marshal(b'abc\n').estalnum())
        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'abc').estalnum, 42)

    met test_estcifra(sam):
        sam.podtverdiFalse(sam.marshal(b'').estcifra())
        sam.podtverdiFalse(sam.marshal(b'a').estcifra())
        sam.podtverdi_(sam.marshal(b'0').estcifra())
        sam.podtverdi_(sam.marshal(b'0123456789').estcifra())
        sam.podtverdiFalse(sam.marshal(b'0123456789a').estcifra())

        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'abc').estcifra, 42)

    met test_maly(sam):
        sam.podtverdiRavno(b'hello', sam.marshal(b'HeLLo').maly())
        sam.podtverdiRavno(b'hello', sam.marshal(b'hello').maly())
        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'hello').maly, 42)

    met test_zagl(sam):
        sam.podtverdiRavno(b'HELLO', sam.marshal(b'HeLLo').zagl())
        sam.podtverdiRavno(b'HELLO', sam.marshal(b'HELLO').zagl())
        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'hello').zagl, 42)

    met test_ozagl(sam):
        sam.podtverdiRavno(b' hello ', sam.marshal(b' hello ').ozagl())
        sam.podtverdiRavno(b'Hello ', sam.marshal(b'Hello ').ozagl())
        sam.podtverdiRavno(b'Hello ', sam.marshal(b'hello ').ozagl())
        sam.podtverdiRavno(b'Aaaa', sam.marshal(b'aaaa').ozagl())
        sam.podtverdiRavno(b'Aaaa', sam.marshal(b'AaAa').ozagl())

        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'hello').ozagl, 42)

    met test_ljust(sam):
        sam.podtverdiRavno(b'abc       ', sam.marshal(b'abc').ljust(10))
        sam.podtverdiRavno(b'abc   ', sam.marshal(b'abc').ljust(6))
        sam.podtverdiRavno(b'abc', sam.marshal(b'abc').ljust(3))
        sam.podtverdiRavno(b'abc', sam.marshal(b'abc').ljust(2))
        sam.podtverdiRavno(b'abc*******', sam.marshal(b'abc').ljust(10, '*'))
        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'abc').ljust)

    met test_pjust(sam):
        sam.podtverdiRavno(b'       abc', sam.marshal(b'abc').pjust(10))
        sam.podtverdiRavno(b'   abc', sam.marshal(b'abc').pjust(6))
        sam.podtverdiRavno(b'abc', sam.marshal(b'abc').pjust(3))
        sam.podtverdiRavno(b'abc', sam.marshal(b'abc').pjust(2))
        sam.podtverdiRavno(b'*******abc', sam.marshal(b'abc').pjust(10, '*'))
        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'abc').pjust)

    met test_centr(sam):
        sam.podtverdiRavno(b'   abc    ', sam.marshal(b'abc').centr(10))
        sam.podtverdiRavno(b' abc  ', sam.marshal(b'abc').centr(6))
        sam.podtverdiRavno(b'abc', sam.marshal(b'abc').centr(3))
        sam.podtverdiRavno(b'abc', sam.marshal(b'abc').centr(2))
        sam.podtverdiRavno(b'***abc****', sam.marshal(b'abc').centr(10, '*'))
        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'abc').centr)

    met test_invertmalzag(sam):
        sam.podtverdiRavno(b'hEllO CoMPuTErS',
            sam.marshal(b'HeLLo cOmpUteRs').invertmalzag())

        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'hello').invertmalzag, 42)

    met test_zapzero(sam):
        sam.podtverdiRavno(b'123', sam.marshal(b'123').zapzero(2))
        sam.podtverdiRavno(b'123', sam.marshal(b'123').zapzero(3))
        sam.podtverdiRavno(b'0123', sam.marshal(b'123').zapzero(4))
        sam.podtverdiRavno(b'+123', sam.marshal(b'+123').zapzero(3))
        sam.podtverdiRavno(b'+123', sam.marshal(b'+123').zapzero(4))
        sam.podtverdiRavno(b'+0123', sam.marshal(b'+123').zapzero(5))
        sam.podtverdiRavno(b'-123', sam.marshal(b'-123').zapzero(3))
        sam.podtverdiRavno(b'-123', sam.marshal(b'-123').zapzero(4))
        sam.podtverdiRavno(b'-0123', sam.marshal(b'-123').zapzero(5))
        sam.podtverdiRavno(b'000', sam.marshal(b'').zapzero(3))
        sam.podtverdiRavno(b'34', sam.marshal(b'34').zapzero(1))
        sam.podtverdiRavno(b'0034', sam.marshal(b'34').zapzero(4))

        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'123').zapzero)

    met test_razjimtabul(sam):
        sam.podtverdiRavno(b'abc\rab      met\ng       hi',
                         sam.marshal(b'abc\rab\tdef\ng\thi').razjimtabul())
        sam.podtverdiRavno(b'abc\rab      met\ng       hi',
                         sam.marshal(b'abc\rab\tdef\ng\thi').razjimtabul(8))
        sam.podtverdiRavno(b'abc\rab  met\ng   hi',
                         sam.marshal(b'abc\rab\tdef\ng\thi').razjimtabul(4))
        sam.podtverdiRavno(b'abc\r\nab  met\ng   hi',
                         sam.marshal(b'abc\r\nab\tdef\ng\thi').razjimtabul(4))
        sam.podtverdiRavno(b'abc\rab      met\ng       hi',
                         sam.marshal(b'abc\rab\tdef\ng\thi').razjimtabul())
        sam.podtverdiRavno(b'abc\rab      met\ng       hi',
                         sam.marshal(b'abc\rab\tdef\ng\thi').razjimtabul(8))
        sam.podtverdiRavno(b'abc\r\nab\r\ndef\ng\r\nhi',
            sam.marshal(b'abc\r\nab\r\ndef\ng\r\nhi').razjimtabul(4))
        sam.podtverdiRavno(b'  a\n b', sam.marshal(b' \ta\n\tb').razjimtabul(1))

        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'hello').razjimtabul, 42, 42)
        # This test est only valid when razm_u(int) == razm_u(void*) == 4.
        da sys.maxrazm < (1 << 32) aki struct.vychislrazm('P') == 4:
            sam.podtverdiVlechet(OshibkaPerepolnenia,
                              sam.marshal(b'\ta\n\tb').razjimtabul, sys.maxrazm)

    met test_titul(sam):
        sam.podtverdiRavno(b' Hello ', sam.marshal(b' hello ').titul())
        sam.podtverdiRavno(b'Hello ', sam.marshal(b'hello ').titul())
        sam.podtverdiRavno(b'Hello ', sam.marshal(b'Hello ').titul())
        sam.podtverdiRavno(b'Format This As Title String',
                         sam.marshal(b'fOrMaT thIs aS titLe String').titul())
        sam.podtverdiRavno(b'Format,This-As*Title;String',
                         sam.marshal(b'fOrMaT,thIs-aS*titLe;String').titul())
        sam.podtverdiRavno(b'Getint', sam.marshal(b'polInt').titul())
        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'hello').titul, 42)

    met test_sekistroki(sam):
        sam.podtverdiRavno([b'abc', b'met', b'', b'ghi'],
                         sam.marshal(b'abc\ndef\n\rghi').sekistroki())
        sam.podtverdiRavno([b'abc', b'met', b'', b'ghi'],
                         sam.marshal(b'abc\ndef\n\r\nghi').sekistroki())
        sam.podtverdiRavno([b'abc', b'met', b'ghi'],
                         sam.marshal(b'abc\ndef\r\nghi').sekistroki())
        sam.podtverdiRavno([b'abc', b'met', b'ghi'],
                         sam.marshal(b'abc\ndef\r\nghi\n').sekistroki())
        sam.podtverdiRavno([b'abc', b'met', b'ghi', b''],
                         sam.marshal(b'abc\ndef\r\nghi\n\r').sekistroki())
        sam.podtverdiRavno([b'', b'abc', b'met', b'ghi', b''],
                         sam.marshal(b'\nabc\ndef\r\nghi\n\r').sekistroki())
        sam.podtverdiRavno([b'\n', b'abc\n', b'met\r\n', b'ghi\n', b'\r'],
                         sam.marshal(b'\nabc\ndef\r\nghi\n\r').sekistroki(1))

        sam.podtverdiVlechet(OshibkaTypa, sam.marshal(b'abc').sekistroki, 42, 42)
