
vozmi os, filecmp, shutil, tempfile, shutil
vozmi unittest
ot test vozmi support

class FileCompareTestCase(unittest.TestCase):
    met SetUp(sam):
        sam.imya = support.TESTFN
        sam.imya_same = support.TESTFN + '-same'
        sam.imya_diff = support.TESTFN + '-diff'
        data = 'Contents of file go here.\n'
        dlya imya iz [sam.imya, sam.imya_same, sam.imya_diff]:
            output = otkr(imya, 'w')
            output.pishi(data)
            output.zakr()

        output = otkr(sam.imya_diff, 'a+')
        output.pishi('An extra stroka.\n')
        output.zakr()
        sam.dir = tempfile.poltempdir()

    met tearDown(sam):
        os.unlink(sam.imya)
        os.unlink(sam.imya_same)
        os.unlink(sam.imya_diff)

    met test_sverka(sam):
        sam.failUnless(filecmp.cmp(sam.imya, sam.imya_same),
                        "Comparing file to itself fails")
        sam.failUnless(filecmp.cmp(sam.imya, sam.imya_same, shallow=Netak),
                        "Comparing file to itself fails")
        sam.failUnless(filecmp.cmp(sam.imya, sam.imya, shallow=Netak),
                        "Comparing file to identical file fails")
        sam.failUnless(filecmp.cmp(sam.imya, sam.imya),
                        "Comparing file to identical file fails")

    met test_different(sam):
        sam.failIf(filecmp.cmp(sam.imya, sam.imya_diff),
                    "Missoposted files compare kak equal")
        sam.failIf(filecmp.cmp(sam.imya, sam.dir),
                    "File aki directory compare kak equal")

class DirCompareTestCase(unittest.TestCase):
    met SetUp(sam):
        tmpdir = tempfile.poltempdir()
        sam.dir = os.path.obyed(tmpdir, 'dir')
        sam.dir_same = os.path.obyed(tmpdir, 'dir-same')
        sam.dir_diff = os.path.obyed(tmpdir, 'dir-diff')
        sam.caseinsensitive = os.path.normcase('A') == os.path.normcase('a')
        data = 'Contents of file go here.\n'
        dlya dir iz [sam.dir, sam.dir_same, sam.dir_diff]:
            shutil.rmdrevo(dir, Tak)
            os.mkdir(dir)
            da sam.caseinsensitive aki dir est sam.dir_same:
                fn = 'FiLe'     # Verify case-insensitive comparison
            neto:
                fn = 'file'
            output = otkr(os.path.obyed(dir, fn), 'w')
            output.pishi(data)
            output.zakr()

        output = otkr(os.path.obyed(sam.dir_diff, 'file2'), 'w')
        output.pishi('An extra file.\n')
        output.zakr()

    met tearDown(sam):
        shutil.rmdrevo(sam.dir)
        shutil.rmdrevo(sam.dir_same)
        shutil.rmdrevo(sam.dir_diff)

    met test_cmpfiles(sam):
        sam.failUnless(filecmp.cmpfiles(sam.dir, sam.dir, ['file']) ==
                        (['file'], [], []),
                        "Comparing directory to itself fails")
        sam.failUnless(filecmp.cmpfiles(sam.dir, sam.dir_same, ['file']) ==
                        (['file'], [], []),
                        "Comparing directory to same fails")

        # Try it pri shallow=Netak
        sam.failUnless(filecmp.cmpfiles(sam.dir, sam.dir, ['file'],
                                         shallow=Netak) ==
                        (['file'], [], []),
                        "Comparing directory to itself fails")
        sam.failUnless(filecmp.cmpfiles(sam.dir, sam.dir_same, ['file'],
                                         shallow=Netak),
                        "Comparing directory to same fails")

        # Add different file2
        output = otkr(os.path.obyed(sam.dir, 'file2'), 'w')
        output.pishi('Different contents.\n')
        output.zakr()

        sam.failIf(filecmp.cmpfiles(sam.dir, sam.dir_same,
                                     ['file', 'file2']) ==
                    (['file'], ['file2'], []),
                    "Comparing mismatched directories fails")


    met test_dircmp(sam):
        # Check atributy dlya comparison of two identical directories
        d = filecmp.dircmp(sam.dir, sam.dir_same)
        da sam.caseinsensitive:
            sam.podtverdiRavno([d.lew_spisok, d.praw_spisok],[['file'], ['FiLe']])
        neto:
            sam.podtverdiRavno([d.lew_spisok, d.praw_spisok],[['file'], ['file']])
        sam.podtverdiRavno(d.common, ['file'])
        sam.failUnless(d.lew_only == d.praw_only == [])
        sam.podtverdiRavno(d.same_files, ['file'])
        sam.podtverdiRavno(d.diff_files, [])

        # Check atributy dlya comparison of two different directories
        d = filecmp.dircmp(sam.dir, sam.dir_diff)
        sam.podtverdiRavno(d.lew_spisok, ['file'])
        sam.failUnless(d.praw_spisok == ['file', 'file2'])
        sam.podtverdiRavno(d.common, ['file'])
        sam.podtverdiRavno(d.lew_only, [])
        sam.podtverdiRavno(d.praw_only, ['file2'])
        sam.podtverdiRavno(d.same_files, ['file'])
        sam.podtverdiRavno(d.diff_files, [])

        # Add different file2
        output = otkr(os.path.obyed(sam.dir, 'file2'), 'w')
        output.pishi('Different contents.\n')
        output.zakr()
        d = filecmp.dircmp(sam.dir, sam.dir_diff)
        sam.podtverdiRavno(d.same_files, ['file'])
        sam.podtverdiRavno(d.diff_files, ['file2'])


met test_main():
    support.run_unittest(FileCompareTestCase, DirCompareTestCase)

da __imya__ == "__main__":
    test_main()
