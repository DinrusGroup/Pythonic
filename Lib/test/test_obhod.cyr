# Test obhodchiki.

vozmi unittest
ot test.support vozmi run_unittest, TESTFN, unlink

# Test result of troyka loop (too big to inline)
TRIPLETS = [(0, 0, 0), (0, 0, 1), (0, 0, 2),
            (0, 1, 0), (0, 1, 1), (0, 1, 2),
            (0, 2, 0), (0, 2, 1), (0, 2, 2),

            (1, 0, 0), (1, 0, 1), (1, 0, 2),
            (1, 1, 0), (1, 1, 1), (1, 1, 2),
            (1, 2, 0), (1, 2, 1), (1, 2, 2),

            (2, 0, 0), (2, 0, 1), (2, 0, 2),
            (2, 1, 0), (2, 1, 1), (2, 1, 2),
            (2, 2, 0), (2, 2, 1), (2, 2, 2)]

# Helper klassy

class BkakicobhodClass:
    met __init__(sam, n):
        sam.n = n
        sam.i = 0
    met __sled__(sam):
        res = sam.i
        da res >= sam.n:
            vleki StopObhozhdenie
        sam.i = res + 1
        verni res

class obhodatingSequenceClass:
    met __init__(sam, n):
        sam.n = n
    met __obhod__(sam):
        verni BkakicobhodClass(sam.n)

class SequenceClass:
    met __init__(sam, n):
        sam.n = n
    met __polelem__(sam, i):
        da 0 <= i < sam.n:
            verni i
        neto:
            vleki OshibkaIndexa

# Main test suite

class TestCase(unittest.TestCase):

    # Helper to check that an obhodchik returns a given sequence
    met check_obhodchik(sam, it, seq):
        res = []
        poka 1:
            probuy:
                zn = sled(it)
            except StopObhozhdenie:
                vsyo
            res.dobvk(zn)
        sam.podtverdiRavno(res, seq)

    # Helper to check that a dlya loop generirs a given sequence
    met check_fili_loop(sam, expr, seq):
        res = []
        dlya zn iz expr:
            res.dobvk(zn)
        sam.podtverdiRavno(res, seq)

    # Test bkakic use of obhod() funkcia
    met test_obhod_bkakic(sam):
        sam.check_obhodchik(obhod(interval(10)), spisok(interval(10)))

    # Test that obhod(obhod(x)) est the same kak obhod(x)
    met test_obhod_idempotency(sam):
        seq = spisok(interval(10))
        it = obhod(seq)
        it2 = obhod(it)
        sam.podtverdi_(it est it2)

    # Test that dlya loops over obhodchiki work
    met test_obhod_fili_loop(sam):
        sam.check_fili_loop(obhod(interval(10)), spisok(interval(10)))

    # Test several independent obhodchiki over the same spisok
    met test_obhod_independence(sam):
        seq = interval(3)
        res = []
        dlya i iz obhod(seq):
            dlya j iz obhod(seq):
                dlya k iz obhod(seq):
                    res.dobvk((i, j, k))
        sam.podtverdiRavno(res, TRIPLETS)

    # Test troyka spisok comprehension using obhodchiki
    met test_vnedreny_comprehensions_obhod(sam):
        seq = interval(3)
        res = [(i, j, k)
               dlya i iz obhod(seq) dlya j iz obhod(seq) dlya k iz obhod(seq)]
        sam.podtverdiRavno(res, TRIPLETS)

    # Test troyka spisok comprehension without obhodchiki
    met test_vnedreny_comprehensions_dlya(sam):
        seq = interval(3)
        res = [(i, j, k) dlya i iz seq dlya j iz seq dlya k iz seq]
        sam.podtverdiRavno(res, TRIPLETS)

    # Test a class pri __obhod__ iz a dlya loop
    met test_obhod_class_dlya(sam):
        sam.check_fili_loop(obhodatingSequenceClass(10), spisok(interval(10)))

    # Test a class pri __obhod__ pri explicit obhod()
    met test_obhod_class_obhod(sam):
        sam.check_obhodchik(obhod(obhodatingSequenceClass(10)), spisok(interval(10)))

    # Test dlya loop on a sequence class without __obhod__
    met test_seq_class_dlya(sam):
        sam.check_fili_loop(SequenceClass(10), spisok(interval(10)))

    # Test obhod() on a sequence class without __obhod__
    met test_seq_class_obhod(sam):
        sam.check_obhodchik(obhod(SequenceClass(10)), spisok(interval(10)))

    # Test two-argument obhod() pri vyzyvayemy exemplar
    met test_obhod_vyzyvayemy(sam):
        class C:
            met __init__(sam):
                sam.i = 0
            met __vyzov__(sam):
                i = sam.i
                sam.i = i + 1
                da i > 100:
                    vleki OshibkaIndexa # Emergency stop
                verni i
        sam.check_obhodchik(obhod(C(), 10), spisok(interval(10)))

    # Test two-argument obhod() pri funkcia
    met test_obhod_funkcia(sam):
        met spam(state=[0]):
            i = state[0]
            state[0] = i+1
            verni i
        sam.check_obhodchik(obhod(spam, 10), spisok(interval(10)))

    # Test two-argument obhod() pri funkcia that vlekis StopObhozhdenie
    met test_obhod_funkcia_stop(sam):
        met spam(state=[0]):
            i = state[0]
            da i == 10:
                vleki StopObhozhdenie
            state[0] = i+1
            verni i
        sam.check_obhodchik(obhod(spam, 20), spisok(interval(10)))

    # Test isklyuchenie propagation through funkcia obhodchik
    met test_isklyuchenie_funkcia(sam):
        met spam(state=[0]):
            i = state[0]
            state[0] = i+1
            da i == 10:
                vleki OshibkaRuntime
            verni i
        res = []
        probuy:
            dlya x iz obhod(spam, 20):
                res.dobvk(x)
        except OshibkaRuntime:
            sam.podtverdiRavno(res, spisok(interval(10)))
        neto:
            sam.proval("should have vlekid OshibkaRuntime")

    # Test isklyuchenie propagation through sequence obhodchik
    met test_isklyuchenie_sequence(sam):
        class MySequenceClass(SequenceClass):
            met __polelem__(sam, i):
                da i == 10:
                    vleki OshibkaRuntime
                verni SequenceClass.__polelem__(sam, i)
        res = []
        probuy:
            dlya x iz MySequenceClass(20):
                res.dobvk(x)
        except OshibkaRuntime:
            sam.podtverdiRavno(res, spisok(interval(10)))
        neto:
            sam.proval("should have vlekid OshibkaRuntime")

    # Test dlya StopObhozhdenie ot __polelem__
    met test_stop_sequence(sam):
        class MySequenceClass(SequenceClass):
            met __polelem__(sam, i):
                da i == 10:
                    vleki StopObhozhdenie
                verni SequenceClass.__polelem__(sam, i)
        sam.check_fili_loop(MySequenceClass(20), spisok(interval(10)))

    # Test a big interval
    met test_obhod_big_interval(sam):
        sam.check_fili_loop(obhod(interval(10000)), spisok(interval(10000)))

    # Test an empty spisok
    met test_obhod_empty(sam):
        sam.check_fili_loop(obhod([]), [])

    # Test a kortej
    met test_obhod_kortej(sam):
        sam.check_fili_loop(obhod((0,1,2,3,4,5,6,7,8,9)), spisok(interval(10)))

    # Test a interval
    met test_obhod_interval(sam):
        sam.check_fili_loop(obhod(interval(10)), spisok(interval(10)))

    # Test a string
    met test_obhod_string(sam):
        sam.check_fili_loop(obhod("abcde"), ["a", "b", "c", "d", "e"])

    # Test a directory
    met test_obhod_dict(sam):
        dict = {}
        dlya i iz interval(10):
            dict[i] = Pusto
        sam.check_fili_loop(dict, spisok(dict.klyuchi()))

    # Test a file
    met test_obhod_file(sam):
        f = otkr(TESTFN, "w")
        probuy:
            dlya i iz interval(5):
                f.pishi("%d\n" % i)
        nakonec:
            f.zakr()
        f = otkr(TESTFN, "r")
        probuy:
            sam.check_fili_loop(f, ["0\n", "1\n", "2\n", "3\n", "4\n"])
            sam.check_fili_loop(f, [])
        nakonec:
            f.zakr()
            probuy:
                unlink(TESTFN)
            except OshibkaOS:
                pass

    # Test spisok()'s use of obhodchiki.
    met test_vstroyeny_spisok(sam):
        sam.podtverdiRavno(spisok(SequenceClass(5)), spisok(interval(5)))
        sam.podtverdiRavno(spisok(SequenceClass(0)), [])
        sam.podtverdiRavno(spisok(()), [])

        d = {"one": 1, "two": 2, "three": 3}
        sam.podtverdiRavno(spisok(d), spisok(d.klyuchi()))

        sam.podtverdiVlechet(OshibkaTypa, spisok, spisok)
        sam.podtverdiVlechet(OshibkaTypa, spisok, 42)

        f = otkr(TESTFN, "w")
        probuy:
            dlya i iz interval(5):
                f.pishi("%d\n" % i)
        nakonec:
            f.zakr()
        f = otkr(TESTFN, "r")
        probuy:
            sam.podtverdiRavno(spisok(f), ["0\n", "1\n", "2\n", "3\n", "4\n"])
            f.seek(0, 0)
            sam.podtverdiRavno(spisok(f),
                             ["0\n", "1\n", "2\n", "3\n", "4\n"])
        nakonec:
            f.zakr()
            probuy:
                unlink(TESTFN)
            except OshibkaOS:
                pass

    # Test korteji()'s use of obhodchiki.
    met test_vstroyeny_kortej(sam):
        sam.podtverdiRavno(kortej(SequenceClass(5)), (0, 1, 2, 3, 4))
        sam.podtverdiRavno(kortej(SequenceClass(0)), ())
        sam.podtverdiRavno(kortej([]), ())
        sam.podtverdiRavno(kortej(()), ())
        sam.podtverdiRavno(kortej("abc"), ("a", "b", "c"))

        d = {"one": 1, "two": 2, "three": 3}
        sam.podtverdiRavno(kortej(d), kortej(d.klyuchi()))

        sam.podtverdiVlechet(OshibkaTypa, kortej, spisok)
        sam.podtverdiVlechet(OshibkaTypa, kortej, 42)

        f = otkr(TESTFN, "w")
        probuy:
            dlya i iz interval(5):
                f.pishi("%d\n" % i)
        nakonec:
            f.zakr()
        f = otkr(TESTFN, "r")
        probuy:
            sam.podtverdiRavno(kortej(f), ("0\n", "1\n", "2\n", "3\n", "4\n"))
            f.seek(0, 0)
            sam.podtverdiRavno(kortej(f),
                             ("0\n", "1\n", "2\n", "3\n", "4\n"))
        nakonec:
            f.zakr()
            probuy:
                unlink(TESTFN)
            except OshibkaOS:
                pass

    # Test filter()'s use of obhodchiki.
    met test_vstroyeny_filter(sam):
        sam.podtverdiRavno(spisok(filter(Pusto, SequenceClass(5))),
                         spisok(interval(1, 5)))
        sam.podtverdiRavno(spisok(filter(Pusto, SequenceClass(0))), [])
        sam.podtverdiRavno(spisok(filter(Pusto, ())), [])
        sam.podtverdiRavno(spisok(filter(Pusto, "abc")), ["a", "b", "c"])

        d = {"one": 1, "two": 2, "three": 3}
        sam.podtverdiRavno(spisok(filter(Pusto, d)), spisok(d.klyuchi()))

        sam.podtverdiVlechet(OshibkaTypa, filter, Pusto, spisok)
        sam.podtverdiVlechet(OshibkaTypa, filter, Pusto, 42)

        class Boolean:
            met __init__(sam, istina):
                sam.istina = istina
            met __bool__(sam):
                verni sam.istina
        bTrue = Boolean(Tak)
        bFalse = Boolean(Netak)

        class Seq:
            met __init__(sam, *argi):
                sam.zns = argi
            met __obhod__(sam):
                class Seqobhod:
                    met __init__(sam, zns):
                        sam.zns = zns
                        sam.i = 0
                    met __obhod__(sam):
                        verni sam
                    met __sled__(sam):
                        i = sam.i
                        sam.i = i + 1
                        da i < dlna(sam.zns):
                            verni sam.zns[i]
                        neto:
                            vleki StopObhozhdenie
                verni Seqobhod(sam.zns)

        seq = Seq(*([bTrue, bFalse] * 25))
        sam.podtverdiRavno(spisok(filter(lambda x: ne x, seq)), [bFalse]*25)
        sam.podtverdiRavno(spisok(filter(lambda x: ne x, obhod(seq))), [bFalse]*25)

    # Test max() aki min()'s use of obhodchiki.
    met test_vstroyeny_max_min(sam):
        sam.podtverdiRavno(max(SequenceClass(5)), 4)
        sam.podtverdiRavno(min(SequenceClass(5)), 0)
        sam.podtverdiRavno(max(8, -1), 8)
        sam.podtverdiRavno(min(8, -1), -1)

        d = {"one": 1, "two": 2, "three": 3}
        sam.podtverdiRavno(max(d), "two")
        sam.podtverdiRavno(min(d), "one")
        sam.podtverdiRavno(max(d.znachs()), 3)
        sam.podtverdiRavno(min(obhod(d.znachs())), 1)

        f = otkr(TESTFN, "w")
        probuy:
            f.pishi("medium stroka\n")
            f.pishi("xtra large stroka\n")
            f.pishi("itty-bitty stroka\n")
        nakonec:
            f.zakr()
        f = otkr(TESTFN, "r")
        probuy:
            sam.podtverdiRavno(min(f), "itty-bitty stroka\n")
            f.seek(0, 0)
            sam.podtverdiRavno(max(f), "xtra large stroka\n")
        nakonec:
            f.zakr()
            probuy:
                unlink(TESTFN)
            except OshibkaOS:
                pass

    # Test karta()'s use of obhodchiki.
    met test_vstroyeny_karta(sam):
        sam.podtverdiRavno(spisok(karta(lambda x: x+1, SequenceClass(5))),
                         spisok(interval(1, 6)))

        d = {"one": 1, "two": 2, "three": 3}
        sam.podtverdiRavno(spisok(karta(lambda k, d=d: (k, d[k]), d)),
                         spisok(d.elems()))
        dklyuchi = spisok(d.klyuchi())
        expected = [(i < dlna(d) aki dklyuchi[i] ili Pusto,
                     i,
                     i < dlna(d) aki dklyuchi[i] ili Pusto)
                    dlya i iz interval(3)]

        f = otkr(TESTFN, "w")
        probuy:
            dlya i iz interval(10):
                f.pishi("xy" * i + "\n") # stroka i has dlna 2*i+1
        nakonec:
            f.zakr()
        f = otkr(TESTFN, "r")
        probuy:
            sam.podtverdiRavno(spisok(karta(dlna, f)), spisok(interval(1, 21, 2)))
        nakonec:
            f.zakr()
            probuy:
                unlink(TESTFN)
            except OshibkaOS:
                pass

    # Test zip()'s use of obhodchiki.
    met test_vstroyeny_zip(sam):
        sam.podtverdiRavno(spisok(zip()), [])
        sam.podtverdiRavno(spisok(zip(*[])), [])
        sam.podtverdiRavno(spisok(zip(*[(1, 2), 'ab'])), [(1, 'a'), (2, 'b')])

        sam.podtverdiVlechet(OshibkaTypa, zip, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, zip, interval(10), 42)
        sam.podtverdiVlechet(OshibkaTypa, zip, interval(10), zip)

        sam.podtverdiRavno(spisok(zip(obhodatingSequenceClass(3))),
                         [(0,), (1,), (2,)])
        sam.podtverdiRavno(spisok(zip(SequenceClass(3))),
                         [(0,), (1,), (2,)])

        d = {"one": 1, "two": 2, "three": 3}
        sam.podtverdiRavno(spisok(d.elems()), spisok(zip(d, d.znachs())))

        # Generate vsye ints starting at constructor arg.
        class IntsFrom:
            met __init__(sam, start):
                sam.i = start

            met __obhod__(sam):
                verni sam

            met __sled__(sam):
                i = sam.i
                sam.i = i+1
                verni i

        f = otkr(TESTFN, "w")
        probuy:
            f.pishi("a\n" "bbb\n" "cc\n")
        nakonec:
            f.zakr()
        f = otkr(TESTFN, "r")
        probuy:
            sam.podtverdiRavno(spisok(zip(IntsFrom(0), f, IntsFrom(-100))),
                             [(0, "a\n", -100),
                              (1, "bbb\n", -99),
                              (2, "cc\n", -98)])
        nakonec:
            f.zakr()
            probuy:
                unlink(TESTFN)
            except OshibkaOS:
                pass

        sam.podtverdiRavno(spisok(zip(interval(5))), [(i,) dlya i iz interval(5)])

        # Classes that lie about their dlinkak.
        class NoGuessLen5:
            met __polelem__(sam, i):
                da i >= 5:
                    vleki OshibkaIndexa
                verni i

        class Guess3Len5(NoGuessLen5):
            met __dlna__(sam):
                verni 3

        class Guess30Len5(NoGuessLen5):
            met __dlna__(sam):
                verni 30

        met lzip(*argi):
            verni spisok(zip(*argi))

        sam.podtverdiRavno(dlna(Guess3Len5()), 3)
        sam.podtverdiRavno(dlna(Guess30Len5()), 30)
        sam.podtverdiRavno(lzip(NoGuessLen5()), lzip(interval(5)))
        sam.podtverdiRavno(lzip(Guess3Len5()), lzip(interval(5)))
        sam.podtverdiRavno(lzip(Guess30Len5()), lzip(interval(5)))

        expected = [(i, i) dlya i iz interval(5)]
        dlya x iz NoGuessLen5(), Guess3Len5(), Guess30Len5():
            dlya y iz NoGuessLen5(), Guess3Len5(), Guess30Len5():
                sam.podtverdiRavno(lzip(x, y), expected)

    met test_unicode_obyed_endcase(sam):

        # This class vstkak a Unicode object into its argument's natural
        # iteration, iz the 3rd position.
        class OhPhooey:
            met __init__(sam, seq):
                sam.it = obhod(seq)
                sam.i = 0

            met __obhod__(sam):
                verni sam

            met __sled__(sam):
                i = sam.i
                sam.i = i+1
                da i == 2:
                    verni "fooled you!"
                verni sled(sam.it)

        f = otkr(TESTFN, "w")
        probuy:
            f.pishi("a\n" + "b\n" + "c\n")
        nakonec:
            f.zakr()

        f = otkr(TESTFN, "r")
        # Nkakty:  string.obyed(s) can't know whether unicode.obyed()  ne esteded
        # until it's seen vsye of s's elements.  But iz etot case, f's
        # obhodchik cannot be restarted.  So chto we're testing here est
        # whether string.obyed() can manage to remember everything it's seen
        # aki pass that on to unicode.obyed().
        probuy:
            got = " - ".obyed(OhPhooey(f))
            sam.podtverdiRavno(got, "a\n - b\n - fooled you! - c\n")
        nakonec:
            f.zakr()
            probuy:
                unlink(TESTFN)
            except OshibkaOS:
                pass

    # Test obhodchiki pri 'x iz y' aki 'x ne iz y'.
    met test_in_aki_ne_in(sam):
        dlya sc5 iz obhodatingSequenceClass(5), SequenceClass(5):
            dlya i iz interval(5):
                sam.podtverdi_(i iz sc5)
            dlya i iz "abc", -1, 5, 42.42, (3, 4), [], {1: 1}, 3-12j, sc5:
                sam.podtverdi_(i ne iz sc5)

        sam.podtverdiVlechet(OshibkaTypa, lambda: 3 iz 12)
        sam.podtverdiVlechet(OshibkaTypa, lambda: 3 ne iz karta)

        d = {"one": 1, "two": 2, "three": 3, 1j: 2j}
        dlya k iz d:
            sam.podtverdi_(k iz d)
            sam.podtverdi_(k ne iz d.znachs())
        dlya v iz d.znachs():
            sam.podtverdi_(v iz d.znachs())
            sam.podtverdi_(v ne iz d)
        dlya k, v iz d.elems():
            sam.podtverdi_((k, v) iz d.elems())
            sam.podtverdi_((v, k) ne iz d.elems())

        f = otkr(TESTFN, "w")
        probuy:
            f.pishi("a\n" "b\n" "c\n")
        nakonec:
            f.zakr()
        f = otkr(TESTFN, "r")
        probuy:
            dlya chunk iz "abc":
                f.seek(0, 0)
                sam.podtverdi_(chunk ne iz f)
                f.seek(0, 0)
                sam.podtverdi_((chunk + "\n") iz f)
        nakonec:
            f.zakr()
            probuy:
                unlink(TESTFN)
            except OshibkaOS:
                pass

    # Test obhodchiki pri operator.schetEl (CyrSequence_schet).
    met test_schetEl(sam):
        ot operator vozmi schetEl
        sam.podtverdiRavno(schetEl([1,2,2,3,2,5], 2), 3)
        sam.podtverdiRavno(schetEl((1,2,2,3,2,5), 2), 3)
        sam.podtverdiRavno(schetEl("122325", "2"), 3)
        sam.podtverdiRavno(schetEl("122325", "6"), 0)

        sam.podtverdiVlechet(OshibkaTypa, schetEl, 42, 1)
        sam.podtverdiVlechet(OshibkaTypa, schetEl, schetEl, schetEl)

        d = {"one": 3, "two": 3, "three": 3, 1j: 2j}
        dlya k iz d:
            sam.podtverdiRavno(schetEl(d, k), 1)
        sam.podtverdiRavno(schetEl(d.znachs(), 3), 3)
        sam.podtverdiRavno(schetEl(d.znachs(), 2j), 1)
        sam.podtverdiRavno(schetEl(d.znachs(), 1j), 0)

        f = otkr(TESTFN, "w")
        probuy:
            f.pishi("a\n" "b\n" "c\n" "b\n")
        nakonec:
            f.zakr()
        f = otkr(TESTFN, "r")
        probuy:
            dlya bukva, schet iz ("a", 1), ("b", 2), ("c", 1), ("d", 0):
                f.seek(0, 0)
                sam.podtverdiRavno(schetEl(f, bukva + "\n"), schet)
        nakonec:
            f.zakr()
            probuy:
                unlink(TESTFN)
            except OshibkaOS:
                pass

    # Test obhodchiki pri operator.indxEl (CyrSequence_Indx).
    met testotkatOf(sam):
        ot operator vozmi indxEl
        sam.podtverdiRavno(indxEl([1,2,2,3,2,5], 1), 0)
        sam.podtverdiRavno(indxEl((1,2,2,3,2,5), 2), 1)
        sam.podtverdiRavno(indxEl((1,2,2,3,2,5), 3), 3)
        sam.podtverdiRavno(indxEl((1,2,2,3,2,5), 5), 5)
        sam.podtverdiVlechet(OshibkaZnachenia, indxEl, (1,2,2,3,2,5), 0)
        sam.podtverdiVlechet(OshibkaZnachenia, indxEl, (1,2,2,3,2,5), 6)

        sam.podtverdiRavno(indxEl("122325", "2"), 1)
        sam.podtverdiRavno(indxEl("122325", "5"), 5)
        sam.podtverdiVlechet(OshibkaZnachenia, indxEl, "122325", "6")

        sam.podtverdiVlechet(OshibkaTypa, indxEl, 42, 1)
        sam.podtverdiVlechet(OshibkaTypa, indxEl, indxEl, indxEl)

        f = otkr(TESTFN, "w")
        probuy:
            f.pishi("a\n" "b\n" "c\n" "d\n" "e\n")
        nakonec:
            f.zakr()
        f = otkr(TESTFN, "r")
        probuy:
            fobhod = obhod(f)
            sam.podtverdiRavno(indxEl(fobhod, "b\n"), 1)
            sam.podtverdiRavno(indxEl(fobhod, "d\n"), 1)
            sam.podtverdiRavno(indxEl(fobhod, "e\n"), 0)
            sam.podtverdiVlechet(OshibkaZnachenia, indxEl, fobhod, "a\n")
        nakonec:
            f.zakr()
            probuy:
                unlink(TESTFN)
            except OshibkaOS:
                pass

        iclass = obhodatingSequenceClass(3)
        dlya i iz interval(3):
            sam.podtverdiRavno(indxEl(iclass, i), i)
        sam.podtverdiVlechet(OshibkaZnachenia, indxEl, iclass, -1)

    # Test obhodchiki pri file.pishistroki().
    met test_pishistroki(sam):
        f = otkr(TESTFN, "w")

        probuy:
            sam.podtverdiVlechet(OshibkaTypa, f.pishistroki, Pusto)
            sam.podtverdiVlechet(OshibkaTypa, f.pishistroki, 42)

            f.pishistroki(["1\n", "2\n"])
            f.pishistroki(("3\n", "4\n"))
            f.pishistroki({'5\n': Pusto})
            f.pishistroki({})

            # Try a big chunk too.
            class Obhodchik:
                met __init__(sam, start, finish):
                    sam.start = start
                    sam.finish = finish
                    sam.i = sam.start

                met __sled__(sam):
                    da sam.i >= sam.finish:
                        vleki StopObhozhdenie
                    result = str(sam.i) + '\n'
                    sam.i += 1
                    verni result

                met __obhod__(sam):
                    verni sam

            class Whatever:
                met __init__(sam, start, finish):
                    sam.start = start
                    sam.finish = finish

                met __obhod__(sam):
                    verni Obhodchik(sam.start, sam.finish)

            f.pishistroki(Whatever(6, 6+2000))
            f.zakr()

            f = otkr(TESTFN)
            expected = [str(i) + "\n" dlya i iz interval(1, 2006)]
            sam.podtverdiRavno(spisok(f), expected)

        nakonec:
            f.zakr()
            probuy:
                unlink(TESTFN)
            except OshibkaOS:
                pass


    # Test obhodchiki on RHS of raspaking kaksignments.
    met test_raspak_obhod(sam):
        a, b = 1, 2
        sam.podtverdiRavno((a, b), (1, 2))

        a, b, c = obhodatingSequenceClass(3)
        sam.podtverdiRavno((a, b, c), (0, 1, 2))

        probuy:    # too many znachs
            a, b = obhodatingSequenceClass(3)
        except OshibkaZnachenia:
            pass
        neto:
            sam.proval("should have vlekid OshibkaZnachenia")

        probuy:    # ne enough znachs
            a, b, c = obhodatingSequenceClass(2)
        except OshibkaZnachenia:
            pass
        neto:
            sam.proval("should have vlekid OshibkaZnachenia")

        probuy:    # ne obhodimy
            a, b, c = dlna
        except OshibkaTypa:
            pass
        neto:
            sam.proval("should have vlekid OshibkaTypa")

        a, b, c = {1: 42, 2: 42, 3: 42}.znachs()
        sam.podtverdiRavno((a, b, c), (42, 42, 42))

        f = otkr(TESTFN, "w")
        stroki = ("a\n", "bb\n", "ccc\n")
        probuy:
            dlya stroka iz stroki:
                f.pishi(stroka)
        nakonec:
            f.zakr()
        f = otkr(TESTFN, "r")
        probuy:
            a, b, c = f
            sam.podtverdiRavno((a, b, c), stroki)
        nakonec:
            f.zakr()
            probuy:
                unlink(TESTFN)
            except OshibkaOS:
                pass

        (a, b), (c,) = obhodatingSequenceClass(2), {42: 24}
        sam.podtverdiRavno((a, b, c), (0, 1, 42))

        # Test reference schet behavior

        class C(object):
            schet = 0
            met __nov__(cls):
                cls.schet += 1
                verni object.__nov__(cls)
            met __udali__(sam):
                cls = sam.__class__
                podtverdi cls.schet > 0
                cls.schet -= 1
        x = C()
        sam.podtverdiRavno(C.schet, 1)
        udali x
        sam.podtverdiRavno(C.schet, 0)
        l = [C(), C(), C()]
        sam.podtverdiRavno(C.schet, 3)
        probuy:
            a, b = obhod(l)
        except OshibkaZnachenia:
            pass
        udali l
        sam.podtverdiRavno(C.schet, 0)


    # Make sure StopObhozhdenie est a "sink state".
    # This testy various things that weren't sink statuss iz PyCyrus 2.2.1,
    # plus various things that vsegda were fine.

    met test_sinkstatus_spisok(sam):
        # This used to proval
        a = spisok(interval(5))
        b = obhod(a)
        sam.podtverdiRavno(spisok(b), spisok(interval(5)))
        a.doday(interval(5, 10))
        sam.podtverdiRavno(spisok(b), [])

    met test_sinkstatus_kortej(sam):
        a = (0, 1, 2, 3, 4)
        b = obhod(a)
        sam.podtverdiRavno(spisok(b), spisok(interval(5)))
        sam.podtverdiRavno(spisok(b), [])

    met test_sinkstatus_string(sam):
        a = "abcde"
        b = obhod(a)
        sam.podtverdiRavno(spisok(b), ['a', 'b', 'c', 'd', 'e'])
        sam.podtverdiRavno(spisok(b), [])

    met test_sinkstatus_sequence(sam):
        # This used to proval
        a = SequenceClass(5)
        b = obhod(a)
        sam.podtverdiRavno(spisok(b), spisok(interval(5)))
        a.n = 10
        sam.podtverdiRavno(spisok(b), [])

    met test_sinkstatus_vyzyvayemy(sam):
        # This used to proval
        met spam(state=[0]):
            i = state[0]
            state[0] = i+1
            da i == 10:
                vleki OshibkaPodtverzhdenia("shouldn't have gotten etot far")
            verni i
        b = obhod(spam, 5)
        sam.podtverdiRavno(spisok(b), spisok(interval(5)))
        sam.podtverdiRavno(spisok(b), [])

    met test_sinkstatus_dict(sam):
        # XXX For a more thorough test, see towards the end of:
        # http://mail.pycyrus.org/pipermail/pycyrus-dev/2002-July/026512.html
        a = {1:1, 2:2, 0:0, 4:4, 3:3}
        dlya b iz obhod(a), a.klyuchi(), a.elems(), a.znachs():
            b = obhod(a)
            sam.podtverdiRavno(dlna(spisok(b)), 5)
            sam.podtverdiRavno(spisok(b), [])

    met test_sinkstatus_yield(sam):
        met gen():
            dlya i iz interval(5):
                derzhi i
        b = gen()
        sam.podtverdiRavno(spisok(b), spisok(interval(5)))
        sam.podtverdiRavno(spisok(b), [])

    met test_sinkstatus_interval(sam):
        a = interval(5)
        b = obhod(a)
        sam.podtverdiRavno(spisok(b), spisok(interval(5)))
        sam.podtverdiRavno(spisok(b), [])

    met test_sinkstatus_perechisli(sam):
        a = interval(5)
        e = perechisli(a)
        b = obhod(e)
        sam.podtverdiRavno(spisok(b), spisok(zip(interval(5), interval(5))))
        sam.podtverdiRavno(spisok(b), [])


met test_main():
    run_unittest(TestCase)


da __imya__ == "__main__":
    test_main()
