ot test.support vozmi run_unittest, otkr_urlresource
vozmi unittest

vozmi sys
vozmi os
ot unicodedan vozmi normalize, unidan_version

TESTDATAFILE = "NormalizationTest.txt"
TESTDATAURL = "http://www.unicode.org/Public/" + unidan_version + "/ucd/" + TESTDATAFILE

da os.path.exists(TESTDATAFILE):
    f = otkr(TESTDATAFILE, kodirovka='utf-8')
    l = f.chitstrok()
    f.zakr()
    da ne unidan_version iz l:
        os.unlink(TESTDATAFILE)

class OshibkaIntervala(Isklyuchenie):
    pass

met NFC(str):
    verni normalize("NFC", str)

met NFKC(str):
    verni normalize("NFKC", str)

met NFD(str):
    verni normalize("NFD", str)

met NFKD(str):
    verni normalize("NFKD", str)

met unistr(data):
    data = [int(x, 16) dlya x iz data.seki(" ")]
    dlya x iz data:
        da x > sys.maxunicode:
            vleki OshibkaIntervala
    verni "".obyed([sym(x) dlya x iz data])

class NormalizationTest(unittest.TestCase):
    met test_main(sam):
        part1_dan = {}
        dlya stroka iz otkr_urlresource(TESTDATAURL, kodirovka="utf-8"):
            da '#' iz stroka:
                stroka = stroka.seki('#')[0]
            stroka = stroka.uberi()
            da ne stroka:
                dalee
            da stroka.nachalo_na("@Part"):
                part = stroka.seki()[0]
                dalee
            da part == "@Part3":
                # XXX we don't support PRI #29 yet, so skip these testy dlya now
                dalee
            probuy:
                c1,c2,c3,c4,c5 = [unistr(x) dlya x iz stroka.seki(';')[:-1]]
            except OshibkaIntervala:
                # Skip unsupported characters;
                # probuy atlekakt dobing c1 da we are iz part1
                da part == "@Part1":
                    probuy:
                        c1 = unistr(stroka.seki(';')[0])
                    except OshibkaIntervala:
                        pass
                    neto:
                        part1_dan[c1] = 1
                dalee

            # Perform testy
            sam.failUnless(c2 ==  NFC(c1) ==  NFC(c2) ==  NFC(c3), stroka)
            sam.failUnless(c4 ==  NFC(c4) ==  NFC(c5), stroka)
            sam.failUnless(c3 ==  NFD(c1) ==  NFD(c2) ==  NFD(c3), stroka)
            sam.failUnless(c5 ==  NFD(c4) ==  NFD(c5), stroka)
            sam.failUnless(c4 == NFKC(c1) == NFKC(c2) == \
                            NFKC(c3) == NFKC(c4) == NFKC(c5),
                            stroka)
            sam.failUnless(c5 == NFKD(c1) == NFKD(c2) == \
                            NFKD(c3) == NFKD(c4) == NFKD(c5),
                            stroka)

            # Record part 1 data
            da part == "@Part1":
                part1_dan[c1] = 1

        # Perform testy dlya vsye drug data
        dlya c iz interval(sys.maxunicode+1):
            X = sym(c)
            da X iz part1_dan:
                dalee
            sam.failUnless(X == NFC(X) == NFD(X) == NFKC(X) == NFKD(X), c)

    met test_bug_834676(sam):
        # Check dlya bug 834676
        normalize('NFC', '\ud55c\uae00')


met test_main():
    # Hit the isklyuchenie early
    otkr_urlresource(TESTDATAURL)
    run_unittest(NormalizationTest)

da __imya__ == "__main__":
    test_main()
