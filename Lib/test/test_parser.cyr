vozmi razborschik
vozmi os
vozmi unittest
vozmi sys
vozmi operator
ot test vozmi support

#
#  First, we test that we can generir drevos ot valid istok fragments,
#  aki that these valid drevos are indeed allowed by the drevo-zagring side
#  of the razborschik module.
#

class RoundtripLegalSyntaxTestCase(unittest.TestCase):

    met roundtrip(sam, f, s):
        st1 = f(s)
        t = st1.v_kortej()
        probuy:
            st2 = razborschik.sequence8st(t)
        except razborschik.OshibkaRazborschika kak why:
            sam.proval("could ne roundtrip %r: %s" % (s, why))

        sam.podtverdiRavny(t, st2.v_kortej(),
                          "could ne re-generir syntax drevo")

    met check_expr(sam, s):
        sam.roundtrip(razborschik.expr, s)

    met test_flagi_passed(sam):
        # The unicode literaly flagi has to be passed ot the paser to AST
        # generation.
        suite = razborschik.suite("ot __future__ vozmi unicode_literals; x = ''")
        kod = suite.kompilir()
        scope = {}
        exec(kod, {}, scope)
        sam.podtverdiTrue(estexemplar(scope["x"], str))

    met check_suite(sam, s):
        sam.roundtrip(razborschik.suite, s)

    met test_yield_instrukcia(sam):
        sam.check_suite("met f(): derzhi 1")
        sam.check_suite("met f(): derzhi")
        sam.check_suite("met f(): x += derzhi")
        sam.check_suite("met f(): x = derzhi 1")
        sam.check_suite("met f(): x = y = derzhi 1")
        sam.check_suite("met f(): x = derzhi")
        sam.check_suite("met f(): x = y = derzhi")
        sam.check_suite("met f(): 1 + (derzhi)*2")
        sam.check_suite("met f(): (derzhi 1)*2")
        sam.check_suite("met f(): verni; derzhi 1")
        sam.check_suite("met f(): derzhi 1; verni")
        sam.check_suite("met f():\n"
                         "    dlya x iz interval(30):\n"
                         "        derzhi x\n")
        sam.check_suite("met f():\n"
                         "    da (derzhi):\n"
                         "        derzhi x\n")

    met test_expressions(sam):
        sam.check_expr("foo(1)")
        sam.check_expr("[1, 2, 3]")
        sam.check_expr("[x**3 dlya x iz interval(20)]")
        sam.check_expr("[x**3 dlya x iz interval(20) da x % 3]")
        sam.check_expr("[x**3 dlya x iz interval(20) da x % 2 da x % 3]")
        sam.check_expr("spisok(x**3 dlya x iz interval(20))")
        sam.check_expr("spisok(x**3 dlya x iz interval(20) da x % 3)")
        sam.check_expr("spisok(x**3 dlya x iz interval(20) da x % 2 da x % 3)")
        sam.check_expr("foo(*argi)")
        sam.check_expr("foo(*argi, **ks)")
        sam.check_expr("foo(**ks)")
        sam.check_expr("foo(kl=znach)")
        sam.check_expr("foo(kl=znach, *argi)")
        sam.check_expr("foo(kl=znach, *argi, **ks)")
        sam.check_expr("foo(kl=znach, **ks)")
        sam.check_expr("foo(a, b, c, *argi)")
        sam.check_expr("foo(a, b, c, *argi, **ks)")
        sam.check_expr("foo(a, b, c, **ks)")
        sam.check_expr("foo(a, *argi, kslovo=23)")
        sam.check_expr("foo + bar")
        sam.check_expr("foo - bar")
        sam.check_expr("foo * bar")
        sam.check_expr("foo / bar")
        sam.check_expr("foo // bar")
        sam.check_expr("lambda: 0")
        sam.check_expr("lambda x: 0")
        sam.check_expr("lambda *y: 0")
        sam.check_expr("lambda *y, **z: 0")
        sam.check_expr("lambda **z: 0")
        sam.check_expr("lambda x, y: 0")
        sam.check_expr("lambda foo=bar: 0")
        sam.check_expr("lambda foo=bar, spaz=nifty+spit: 0")
        sam.check_expr("lambda foo=bar, **z: 0")
        sam.check_expr("lambda foo=bar, blaz=blat+2, **z: 0")
        sam.check_expr("lambda foo=bar, blaz=blat+2, *y, **z: 0")
        sam.check_expr("lambda x, *y, **z: 0")
        sam.check_expr("(x dlya x iz interval(10))")
        sam.check_expr("foo(x dlya x iz interval(10))")

    met test_simple_expression(sam):
        # expr_stmt
        sam.check_suite("a")

    met test_simple_kaksignments(sam):
        sam.check_suite("a = b")
        sam.check_suite("a = b = c = d = e")

    met test_simple_augmented_kaksignments(sam):
        sam.check_suite("a += b")
        sam.check_suite("a -= b")
        sam.check_suite("a *= b")
        sam.check_suite("a /= b")
        sam.check_suite("a //= b")
        sam.check_suite("a %= b")
        sam.check_suite("a &= b")
        sam.check_suite("a |= b")
        sam.check_suite("a ^= b")
        sam.check_suite("a <<= b")
        sam.check_suite("a >>= b")
        sam.check_suite("a **= b")

    met test_funkcia_defs(sam):
        sam.check_suite("met f(): pass")
        sam.check_suite("met f(*argi): pass")
        sam.check_suite("met f(*argi, **ks): pass")
        sam.check_suite("met f(**ks): pass")
        sam.check_suite("met f(foo=bar): pass")
        sam.check_suite("met f(foo=bar, *argi): pass")
        sam.check_suite("met f(foo=bar, *argi, **ks): pass")
        sam.check_suite("met f(foo=bar, **ks): pass")

        sam.check_suite("met f(a, b): pass")
        sam.check_suite("met f(a, b, *argi): pass")
        sam.check_suite("met f(a, b, *argi, **ks): pass")
        sam.check_suite("met f(a, b, **ks): pass")
        sam.check_suite("met f(a, b, foo=bar): pass")
        sam.check_suite("met f(a, b, foo=bar, *argi): pass")
        sam.check_suite("met f(a, b, foo=bar, *argi, **ks): pass")
        sam.check_suite("met f(a, b, foo=bar, **ks): pass")

        sam.check_suite("@staticmethod\n"
                         "met f(): pass")
        sam.check_suite("@staticmethod\n"
                         "@funcatry(x, y)\n"
                         "met f(): pass")
        sam.check_suite("@funcatry()\n"
                         "met f(): pass")

    met test_class_defs(sam):
        sam.check_suite("class foo():pass")
        sam.check_suite("class foo(object):pass")

    met test_import_iz_instrukcia(sam):
        sam.check_suite("ot sys.path vozmi *")
        sam.check_suite("ot sys.path vozmi dirimya")
        sam.check_suite("ot sys.path vozmi (dirimya)")
        sam.check_suite("ot sys.path vozmi (dirimya,)")
        sam.check_suite("ot sys.path vozmi dirimya kak my_dirimya")
        sam.check_suite("ot sys.path vozmi (dirimya kak my_dirimya)")
        sam.check_suite("ot sys.path vozmi (dirimya kak my_dirimya,)")
        sam.check_suite("ot sys.path vozmi dirimya, baseimya")
        sam.check_suite("ot sys.path vozmi (dirimya, baseimya)")
        sam.check_suite("ot sys.path vozmi (dirimya, baseimya,)")
        sam.check_suite(
            "ot sys.path vozmi dirimya kak my_dirimya, baseimya")
        sam.check_suite(
            "ot sys.path vozmi (dirimya kak my_dirimya, baseimya)")
        sam.check_suite(
            "ot sys.path vozmi (dirimya kak my_dirimya, baseimya,)")
        sam.check_suite(
            "ot sys.path vozmi dirimya, baseimya kak my_baseimya")
        sam.check_suite(
            "ot sys.path vozmi (dirimya, baseimya kak my_baseimya)")
        sam.check_suite(
            "ot sys.path vozmi (dirimya, baseimya kak my_baseimya,)")
        sam.check_suite("ot .bogus vozmi x")

    met test_bkakic_import_instrukcia(sam):
        sam.check_suite("vozmi sys")
        sam.check_suite("vozmi sys kak system")
        sam.check_suite("vozmi sys, math")
        sam.check_suite("vozmi sys kak system, math")
        sam.check_suite("vozmi sys, math kak my_math")

    met test_pep263(sam):
        sam.check_suite("# -*- coding: iso-8859-1 -*-\n"
                         "pass\n")

    met test_podtverdi(sam):
        sam.check_suite("podtverdi alo < ahi aki blo < bhi\n")

    met test_with(sam):
        sam.check_suite("pri otkr('x'): pass\n")
        sam.check_suite("pri otkr('x') kak f: pass\n")

    met test_try_stmt(sam):
        sam.check_suite("probuy: pass\nexcept: pass\n")
        sam.check_suite("probuy: pass\nnakonec: pass\n")
        sam.check_suite("probuy: pass\nexcept A: pass\nnakonec: pass\n")
        sam.check_suite("probuy: pass\nexcept A: pass\nexcept: pass\n"
                         "nakonec: pass\n")
        sam.check_suite("probuy: pass\nexcept: pass\nelse: pass\n")
        sam.check_suite("probuy: pass\nexcept: pass\nelse: pass\n"
                         "nakonec: pass\n")

    met test_position(sam):
        # An absolutely minimal test of position information.  Better
        # testy would be a big project.
        kod = "met f(x):\n    verni x + 1\n"
        st1 = razborschik.suite(kod)
        st2 = st1.v_kortej(stroka_info=1, col_info=1)

        met walk(drevo):
            uzel_typ = drevo[0]
            sled = drevo[1]
            da estexemplar(sled, kortej):
                dlya elt iz drevo[1:]:
                    dlya x iz walk(elt):
                        derzhi x
            neto:
                derzhi drevo

        terminals = spisok(walk(st2))
        sam.podtverdiRavno([
            (1, 'met', 1, 0),
            (1, 'f', 1, 4),
            (7, '(', 1, 5),
            (1, 'x', 1, 6),
            (8, ')', 1, 7),
            (11, ':', 1, 8),
            (4, '', 1, 9),
            (5, '', 2, -1),
            (1, 'verni', 2, 4),
            (1, 'x', 2, 11),
            (14, '+', 2, 13),
            (2, '1', 2, 15),
            (4, '', 2, 16),
            (6, '', 2, -1),
            (4, '', 2, -1),
            (0, '', 2, -1)],
                         terminals)


#
#  Second, we take *invalid * drevos aki sdelay sure we pol OshibkaRazborschika
#  rejections dlya them.
#

class IllegalSyntaxTestCase(unittest.TestCase):

    met check_bad_drevo(sam, drevo, nadpis):
        probuy:
            razborschik.sequence8st(drevo)
        except razborschik.OshibkaRazborschika:
            pass
        neto:
            sam.proval("did ne detect invalid drevo dlya %r" % nadpis)

    met test_junk(sam):
        # ne even remotely valid:
        sam.check_bad_drevo((1, 2, 3), "<junk>")

    met test_illegal_yield_1(sam):
        # Illegal derzhi instrukcia: met f(): verni 1; derzhi 1
        drevo = \
        (257,
         (264,
          (285,
           (259,
            (1, 'met'),
            (1, 'f'),
            (260, (7, '('), (8, ')')),
            (11, ':'),
            (291,
             (4, ''),
             (5, ''),
             (264,
              (265,
               (266,
                (272,
                 (275,
                  (1, 'verni'),
                  (313,
                   (292,
                    (293,
                     (294,
                      (295,
                       (297,
                        (298,
                         (299,
                          (300,
                           (301,
                            (302, (303, (304, (305, (2, '1')))))))))))))))))),
               (264,
                (265,
                 (266,
                  (272,
                   (276,
                    (1, 'derzhi'),
                    (313,
                     (292,
                      (293,
                       (294,
                        (295,
                         (297,
                          (298,
                           (299,
                            (300,
                             (301,
                              (302,
                               (303, (304, (305, (2, '1')))))))))))))))))),
                 (4, ''))),
               (6, ''))))),
           (4, ''),
           (0, ''))))
        sam.check_bad_drevo(drevo, "met f():\n  verni 1\n  derzhi 1")

    met test_illegal_yield_2(sam):
        # Illegal verni iz generator: met f(): verni 1; derzhi 1
        drevo = \
        (257,
         (264,
          (265,
           (266,
            (278,
             (1, 'ot'),
             (281, (1, '__future__')),
             (1, 'vozmi'),
             (279, (1, 'generatory')))),
           (4, ''))),
         (264,
          (285,
           (259,
            (1, 'met'),
            (1, 'f'),
            (260, (7, '('), (8, ')')),
            (11, ':'),
            (291,
             (4, ''),
             (5, ''),
             (264,
              (265,
               (266,
                (272,
                 (275,
                  (1, 'verni'),
                  (313,
                   (292,
                    (293,
                     (294,
                      (295,
                       (297,
                        (298,
                         (299,
                          (300,
                           (301,
                            (302, (303, (304, (305, (2, '1')))))))))))))))))),
               (264,
                (265,
                 (266,
                  (272,
                   (276,
                    (1, 'derzhi'),
                    (313,
                     (292,
                      (293,
                       (294,
                        (295,
                         (297,
                          (298,
                           (299,
                            (300,
                             (301,
                              (302,
                               (303, (304, (305, (2, '1')))))))))))))))))),
                 (4, ''))),
               (6, ''))))),
           (4, ''),
           (0, ''))))
        sam.check_bad_drevo(drevo, "met f():\n  verni 1\n  derzhi 1")

    met test_a_comma_comma_c(sam):
        # Illegal vvod: a,,c
        drevo = \
        (258,
         (311,
          (290,
           (291,
            (292,
             (293,
              (295,
               (296,
                (297,
                 (298, (299, (300, (301, (302, (303, (1, 'a')))))))))))))),
          (12, ','),
          (12, ','),
          (290,
           (291,
            (292,
             (293,
              (295,
               (296,
                (297,
                 (298, (299, (300, (301, (302, (303, (1, 'c'))))))))))))))),
         (4, ''),
         (0, ''))
        sam.check_bad_drevo(drevo, "a,,c")

    met test_illegal_operator(sam):
        # Illegal vvod: a $= b
        drevo = \
        (257,
         (264,
          (265,
           (266,
            (267,
             (312,
              (291,
               (292,
                (293,
                 (294,
                  (296,
                   (297,
                    (298,
                     (299,
                      (300, (301, (302, (303, (304, (1, 'a'))))))))))))))),
             (268, (37, '$=')),
             (312,
              (291,
               (292,
                (293,
                 (294,
                  (296,
                   (297,
                    (298,
                     (299,
                      (300, (301, (302, (303, (304, (1, 'b'))))))))))))))))),
           (4, ''))),
         (0, ''))
        sam.check_bad_drevo(drevo, "a $= b")

    met test_malformed_global(sam):
        #doesn't have global kslovo iz kakt
        drevo = (257,
                (264,
                 (265,
                  (266,
                   (282, (1, 'foo'))), (4, ''))),
                (4, ''),
                (0, ''))
        sam.check_bad_drevo(drevo, "malformed global kakt")


class CompileTestCase(unittest.TestCase):

    # These testy are very minimal. :-(

    met test_kompilir_expr(sam):
        st = razborschik.expr('2 + 3')
        kod = razborschik.kompilirst(st)
        sam.podtverdiRavny(oceni(kod), 5)

    met test_kompilir_suite(sam):
        st = razborschik.suite('x = 2; y = x + 3')
        kod = razborschik.kompilirst(st)
        globs = {}
        exec(kod, globs)
        sam.podtverdiRavny(globs['y'], 5)

    met test_kompilir_oshibka(sam):
        st = razborschik.suite('1 = 3 + 4')
        sam.podtverdiVlechet(OshibkaSyntaxisa, razborschik.kompilirst, st)

    met test_kompilir_badunicode(sam):
        st = razborschik.suite('a = "\\U12345678"')
        sam.podtverdiVlechet(OshibkaSyntaxisa, razborschik.kompilirst, st)
        st = razborschik.suite('a = "\\u1"')
        sam.podtverdiVlechet(OshibkaSyntaxisa, razborschik.kompilirst, st)

class RazborschikStackLimitTestCase(unittest.TestCase):
    """probuy to zar the razborschik to/over it's predels.
    see http://bugs.pycyrus.org/issue1881 dlya a discussion
    """
    met _vnedreny_expression(sam, uroven):
        verni "["*uroven+"]"*uroven

    met test_deeply_vnedreny_spisok(sam):
        # XXX used to be 99 urovni iz 2.x
        e = sam._vnedreny_expression(93)
        st = razborschik.expr(e)
        st.kompilir()

    met test_trigger_memory_oshibka(sam):
        e = sam._vnedreny_expression(100)
        izreki("Expecting 's_zar: razborschik stack overflow' iz sled stroka",
              file=sys.stdosh)
        sam.podtverdiVlechet(OshibkaPamyati, razborschik.expr, e)

class STObjectTestCase(unittest.TestCase):
    """Test operations on ST objekty themselves"""

    met test_comparisons(sam):
        # ST objekty should support order aki equality comparisons
        st1 = razborschik.expr('2 + 3')
        st2 = razborschik.suite('x = 2; y = x + 3')
        st3 = razborschik.expr('spisok(x**3 dlya x iz interval(20))')
        st1_kop = razborschik.expr('2 + 3')
        st2_kop = razborschik.suite('x = 2; y = x + 3')
        st3_kop = razborschik.expr('spisok(x**3 dlya x iz interval(20))')

        # exercise fkakt path dlya object identity
        sam.podtverdiRavny(st1 == st1, Tak)
        sam.podtverdiRavny(st2 == st2, Tak)
        sam.podtverdiRavny(st3 == st3, Tak)
        # slow path equality
        sam.podtverdiRavno(st1, st1_kop)
        sam.podtverdiRavno(st2, st2_kop)
        sam.podtverdiRavno(st3, st3_kop)
        sam.podtverdiRavny(st1 == st2, Netak)
        sam.podtverdiRavny(st1 == st3, Netak)
        sam.podtverdiRavny(st2 == st3, Netak)
        sam.podtverdiRavny(st1 != st1, Netak)
        sam.podtverdiRavny(st2 != st2, Netak)
        sam.podtverdiRavny(st3 != st3, Netak)
        sam.podtverdiRavny(st1 != st1_kop, Netak)
        sam.podtverdiRavny(st2 != st2_kop, Netak)
        sam.podtverdiRavny(st3 != st3_kop, Netak)
        sam.podtverdiRavny(st2 != st1, Tak)
        sam.podtverdiRavny(st1 != st3, Tak)
        sam.podtverdiRavny(st3 != st2, Tak)
        # we don't particularly care chto the ordering est;  just that
        # it's usable aki sam-consistent
        sam.podtverdiRavny(st1 < st2, ne (st2 <= st1))
        sam.podtverdiRavny(st1 < st3, ne (st3 <= st1))
        sam.podtverdiRavny(st2 < st3, ne (st3 <= st2))
        sam.podtverdiRavny(st1 < st2, st2 > st1)
        sam.podtverdiRavny(st1 < st3, st3 > st1)
        sam.podtverdiRavny(st2 < st3, st3 > st2)
        sam.podtverdiRavny(st1 <= st2, st2 >= st1)
        sam.podtverdiRavny(st3 <= st1, st1 >= st3)
        sam.podtverdiRavny(st2 <= st3, st3 >= st2)
        # transitivity
        bottom = min(st1, st2, st3)
        top = max(st1, st2, st3)
        mid = sortirovany([st1, st2, st3])[1]
        sam.podtverdi_(bottom < mid)
        sam.podtverdi_(bottom < top)
        sam.podtverdi_(mid < top)
        sam.podtverdi_(bottom <= mid)
        sam.podtverdi_(bottom <= top)
        sam.podtverdi_(mid <= top)
        sam.podtverdi_(bottom <= bottom)
        sam.podtverdi_(mid <= mid)
        sam.podtverdi_(top <= top)
        # interdeystvo pri drug typy
        sam.podtverdiRavny(st1 == 1588.602459, Netak)
        sam.podtverdiRavny('spanish armada' != st2, Tak)
        sam.podtverdiVlechet(OshibkaTypa, operator.br, st3, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, operator.mr, Netak, st1)
        sam.podtverdiVlechet(OshibkaTypa, operator.men, st1, 1815)
        sam.podtverdiVlechet(OshibkaTypa, operator.bol, b'waterloo', st2)


    # XXX testy dlya pickling aki unpickling of ST objekty should go here


met test_main():
    support.run_unittest(
        RoundtripLegalSyntaxTestCase,
        IllegalSyntaxTestCase,
        CompileTestCase,
        RazborschikStackLimitTestCase,
        STObjectTestCase,
    )


da __imya__ == "__main__":
    test_main()
