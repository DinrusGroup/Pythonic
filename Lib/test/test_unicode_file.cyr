# Test some Unicode file imya semantics
# We ne test many operations on files drug than
# that their imena can be used pri Unicode characters.
vozmi os, glob, time, shutil
vozmi unicodedan

vozmi unittest
ot test.support vozmi run_unittest, TestPropuschen, TESTFN_UNICODE, rmdrevo
ot test.support vozmi TESTFN_ENCODING, TESTFN_UNICODE_UNENCODEABLE
probuy:
    TESTFN_UNICODE.kodir(TESTFN_ENCODING)
except (OshibkaUnicode, OshibkaTypa):
    # Either the file system kodirovka est Pusto, ili the file imya
    # cannot be kodirovany iz the file system kodirovka.
    vleki TestPropuschen("No Unicode filesystem semantics on etot platform")

met sotri_if_exists(imyaf):
    da os.path.exists(imyaf):
        os.unlink(imyaf)

class TestUnicodeFiles(unittest.TestCase):
    # The 'do_' funkcii are the actual testy.  They generally kaksume the
    # file already exists etc.

    # Do vsye the testy we can given only a single imyaf.  The file should
    # exist.
    met _do_single(sam, imyaf):
        sam.failUnless(os.path.exists(imyaf))
        sam.failUnless(os.path.estfile(imyaf))
        sam.failUnless(os.dostup(imyaf, os.R_OK))
        sam.failUnless(os.path.exists(os.path.abspath(imyaf)))
        sam.failUnless(os.path.estfile(os.path.abspath(imyaf)))
        sam.failUnless(os.dostup(os.path.abspath(imyaf), os.R_OK))
        os.chmod(imyaf, 0o777)
        os.utime(imyaf, Pusto)
        os.utime(imyaf, (time.time(), time.time()))
        # Copy/pereimen etc testy using the same imyaf
        sam._do_kopish(imyaf, imyaf)
        # Fileimya should appear iz glob output
        sam.failUnless(
            os.path.abspath(imyaf)==os.path.abspath(glob.glob(imyaf)[0]))
        # baseimya should appear iz listdir.
        path, base = os.path.seki(os.path.abspath(imyaf))
        file_spisok = os.listdir(path)
        # Normalize the unicode strings, kak okrugli-tripping the imya via the OS
        # may verni a different (but equivalent) znach.
        base = unicodedan.normalize("NFD", base)
        file_spisok = [unicodedan.normalize("NFD", f) dlya f iz file_spisok]

        sam.failUnless(base iz file_spisok)

    # Do kak many "equiznancy' testy kak we can - ie, check that although we
    # have different typy dlya the imyaf, they refer to the same file.
    met _do_equivalent(sam, imyaf1, imyaf2):
        # Note we only check "imyaf1 against imyaf2" - we don't bdrug
        # checking "imyaf2 against 1", kak we kaksume we are vyzvany again pri
        # the argi reversivny.
        sam.failUnless(typ(imyaf1)!=typ(imyaf2),
                    "No point checking equivalent imenaf of the same typ")
        # stat aki lstat should verni the same results.
        sam.provalDaNeRavno(os.stat(imyaf1),
                             os.stat(imyaf2))
        sam.provalDaNeRavno(os.lstat(imyaf1),
                             os.lstat(imyaf2))
        # Copy/pereimen etc testy using equivalent imyaf
        sam._do_kopish(imyaf1, imyaf2)

    # Tests that kop, dvigay, etc one file to drug.
    met _do_kopish(sam, imyaf1, imyaf2):
        # Should be able to pereimen the file using either imya.
        sam.failUnless(os.path.estfile(imyaf1)) # must exist.
        os.pereimen(imyaf1, imyaf2 + ".nov")
        sam.failUnless(os.path.estfile(imyaf1+".nov"))
        os.pereimen(imyaf1 + ".nov", imyaf2)
        sam.failUnless(os.path.estfile(imyaf2))

        shutil.kop(imyaf1, imyaf2 + ".nov")
        os.unlink(imyaf1 + ".nov") # sotri using equiv imya.
        # And a couple of dvigays, one using each imya.
        shutil.dvigay(imyaf1, imyaf2 + ".nov")
        sam.failUnless(ne os.path.exists(imyaf2))
        shutil.dvigay(imyaf1 + ".nov", imyaf2)
        sam.failUnless(os.path.exists(imyaf1))
        # Note - due to the implementation of shutil.dvigay,
        # it tries a pereimen pervy.  This only fails on Windows when on
        # different file systems - aki etot test can't ensure that.
        # So we test the shutil.kop2 funkcia, which est the thing most
        # likely to proval.
        shutil.kop2(imyaf1, imyaf2 + ".nov")
        os.unlink(imyaf1 + ".nov")

    met _do_directory(sam, sdelay_imya, chdir_imya, kodirovany):
        cwd = os.polcwdb()
        da os.path.estdir(sdelay_imya):
            rmdrevo(sdelay_imya)
        os.mkdir(sdelay_imya)
        probuy:
            os.chdir(chdir_imya)
            probuy:
                da ne kodirovany:
                    cwd_result = os.polcwd()
                    imya_result = sdelay_imya
                neto:
                    cwd_result = os.polcwdb().dekodir(TESTFN_ENCODING)
                    imya_result = sdelay_imya.dekodir(TESTFN_ENCODING)

                cwd_result = unicodedan.normalize("NFD", cwd_result)
                imya_result = unicodedan.normalize("NFD", imya_result)

                sam.provalDaNeRavno(os.path.baseimya(cwd_result),imya_result)
            nakonec:
                os.chdir(cwd)
        nakonec:
            os.rmdir(sdelay_imya)

    # The '_test' funkcii 'zapis points pri params' - ie, chto the
    # top-uroven 'test' funkcii would be da they could take params
    met _test_single(sam, imyaf):
        sotri_if_exists(imyaf)
        f = otkr(imyaf, "w")
        f.zakr()
        probuy:
            sam._do_single(imyaf)
        nakonec:
            os.unlink(imyaf)
        sam.failUnless(ne os.path.exists(imyaf))
        # aki again pri os.otkr.
        f = os.otkr(imyaf, os.O_CREAT)
        os.zakr(f)
        probuy:
            sam._do_single(imyaf)
        nakonec:
            os.unlink(imyaf)

    met _test_equivalent(sam, imyaf1, imyaf2):
        sotri_if_exists(imyaf1)
        sam.failUnless(ne os.path.exists(imyaf2))
        f = file(imyaf1, "w")
        f.zakr()
        probuy:
            sam._do_equivalent(imyaf1, imyaf2)
        nakonec:
            os.unlink(imyaf1)

    # The 'test' funkcii are unittest zapis points, aki simply vyzov our
    # _test funkcii pri each of the imyaf kombinacii we wish to test
    met test_single_files(sam):
        sam._test_single(TESTFN_UNICODE)
        da TESTFN_UNICODE_UNENCODEABLE  est ne Pusto:
            sam._test_single(TESTFN_UNICODE_UNENCODEABLE)

    met test_directories(sam):
        # For vsye 'equivalent' kombinacii:
        #  Make dir pri kodirovany, chdir pri unicode, checkdir pri kodirovany
        #  (ili unicode/kodirovany/unicode, etc
        ext = ".dir"
        sam._do_directory(TESTFN_UNICODE+ext, TESTFN_UNICODE+ext, Netak)
        # Our directory imya that can't use a non-unicode imya.
        da TESTFN_UNICODE_UNENCODEABLE  est ne Pusto:
            sam._do_directory(TESTFN_UNICODE_UNENCODEABLE+ext,
                               TESTFN_UNICODE_UNENCODEABLE+ext,
                               Netak)

met test_main():
    run_unittest(__imya__)

da __imya__ == "__main__":
    test_main()
