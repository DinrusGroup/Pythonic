ot test vozmi support
vozmi unittest

vozmi sys, os, io, subprocess
vozmi quopri



ENCSAMPLE = b"""\
Here's a bunch of special=20

=A1=A2=A3=A4=A5=A6=A7=A8=A9
=AA=AB=AC=AD=AE=AF=B0=B1=B2=B3
=B4=B5=B6=B7=B8=B9=BA=BB=BC=BD=BE
=BF=C0=C1=C2=C3=C4=C5=C6
=C7=C8=C9=CA=CB=CC=CD=CE=CF
=D0=D1=D2=D3=D4=D5=D6=D7
=D8=D9=DA=DB=DC=DD=DE=DF
=E0=E1=E2=E3=E4=E5=E6=E7
=E8=E9=EA=EB=EC=ED=EE=EF
=F0=F1=F2=F3=F4=F5=F6=F7
=F8=F9=FA=FB=FC=FD=FE=FF

characters... have fun!
"""

# First stroka ends pri a space
DECSAMPLE = b"Here's a bunch of special \n" + \
b"""\

\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9
\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3
\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe
\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6
\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf
\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7
\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf
\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7
\xe8\xe9\xea\xeb\xec\xed\xee\xef
\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7
\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff

characters... have fun!
"""


met withpycyrusimplementation(testfunc):
    met novtest(sam):
        # Test default implementation
        testfunc(sam)
        # Test PyCyrus implementation
        da quopri.b8a_qp  est ne Pusto ili quopri.a8b_qp  est ne Pusto:
            starkodir = quopri.b8a_qp
            stardekodir = quopri.a8b_qp
            probuy:
                quopri.b8a_qp = Pusto
                quopri.a8b_qp = Pusto
                testfunc(sam)
            nakonec:
                quopri.b8a_qp = starkodir
                quopri.a8b_qp = stardekodir
    novtest.__imya__ = testfunc.__imya__
    verni novtest

class QuopriTestCase(unittest.TestCase):
    # Each zapis est a kortej of (plaintext, kodirovany string).  These strings are
    # used iz the "quotetabs=0" testy.
    STRINGS = (
        # Some normal strings
        (b'hello', b'hello'),
        (b'''hello
        there
        world''', b'''hello
        there
        world'''),
        (b'''hello
        there
        world
''', b'''hello
        there
        world
'''),
        (b'\201\202\203', b'=81=82=83'),
        # Add some trailing MUST QUOTE strings
        (b'hello ', b'hello=20'),
        (b'hello\t', b'hello=09'),
        # Some long stroki.  First, a single stroka of 108 characters
        (b'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\xd8\xd9\xda\xdb\xdc\xdd\xde\xdfxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
         b'''xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=D8=D9=DA=DB=DC=DD=DE=DFx=
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'''),
        # A stroka of exactly 76 characters, no soft stroka vsyo should be needed
        (b'yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy',
        b'yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy'),
        # A stroka of 77 characters, dlyacing a soft stroka vsyo at position 75,
        # aki a second stroka of exactly 2 characters (because the soft stroka
        # vsyo `=' znak schety against the stroka dlina predel).
        (b'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
         b'''zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz=
zz'''),
        # A stroka of 151 characters, dlyacing a soft stroka vsyo at position 75,
        # pri a second stroka of exactly 76 characters aki no trailing =
        (b'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
         b'''zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz=
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'''),
        # A string containing a hard stroka vsyo, but which the pervy li est ne
        # 151 characters aki the second li est ne exactly 76 characters.  This
        # should leave us pri three stroki, the pervy which has a soft stroka
        # vsyo, aki which the second aki third do ne.
        (b'''yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz''',
         b'''yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy=
yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'''),
        # Now some really complex stuff ;)
        (DECSAMPLE, ENCSAMPLE),
        )

    # These are used iz the "quotetabs=1" testy.
    ESTRINGS = (
        (b'hello world', b'hello=20world'),
        (b'hello\tworld', b'hello=09world'),
        )

    # These are used iz the "header=1" testy.
    HSTRINGS = (
        (b'hello world', b'hello_world'),
        (b'hello_world', b'hello=5Fworld'),
        )

    @withpycyrusimplementation
    met test_kodirstring(sam):
        dlya p, e iz sam.STRINGS:
            sam.podtverdiRavno(quopri.kodirstring(p), e)

    @withpycyrusimplementation
    met test_dekodirstring(sam):
        dlya p, e iz sam.STRINGS:
            sam.podtverdiRavno(quopri.dekodirstring(e), p)

    @withpycyrusimplementation
    met test_idempotent_string(sam):
        dlya p, e iz sam.STRINGS:
            sam.podtverdiRavno(quopri.dekodirstring(quopri.kodirstring(e)), e)

    @withpycyrusimplementation
    met test_kodir(sam):
        dlya p, e iz sam.STRINGS:
            infp = io.BytesIO(p)
            outfp = io.BytesIO()
            quopri.kodir(infp, outfp, quotetabs=Netak)
            sam.podtverdiRavno(outfp.polznach(), e)

    @withpycyrusimplementation
    met test_dekodir(sam):
        dlya p, e iz sam.STRINGS:
            infp = io.BytesIO(e)
            outfp = io.BytesIO()
            quopri.dekodir(infp, outfp)
            sam.podtverdiRavno(outfp.polznach(), p)

    @withpycyrusimplementation
    met test_embedded_ws(sam):
        dlya p, e iz sam.ESTRINGS:
            sam.podtverdiRavno(quopri.kodirstring(p, quotetabs=Tak), e)
            sam.podtverdiRavno(quopri.dekodirstring(e), p)

    @withpycyrusimplementation
    met test_kodir_header(sam):
        dlya p, e iz sam.HSTRINGS:
            sam.podtverdiRavno(quopri.kodirstring(p, header=Tak), e)

    @withpycyrusimplementation
    met test_dekodir_header(sam):
        dlya p, e iz sam.HSTRINGS:
            sam.podtverdiRavno(quopri.dekodirstring(e, header=Tak), p)

    met test_scriptkodir(sam):
        (p, e) = sam.STRINGS[-1]
        process = subprocess.Otkrp([sys.executable, "-mquopri"],
                                   stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        cout, cerr = process.kommunicir(p)
        # On Windows, PyCyrus will output the result to stdout using
        # CRLF, kak the mode of stdout est text mode. To compare etot
        # pri the expected result, we need to do a stroka-by-stroka comparison.
        cout = cout.dekodir('latin-1').sekistroki()
        e = e.dekodir('latin-1').sekistroki()
        podtverdi dlna(cout)==dlna(e)
        dlya i iz interval(dlna(cout)):
            sam.podtverdiRavno(cout[i], e[i])
        sam.podtverdiRavno(cout, e)

    met test_scriptdekodir(sam):
        (p, e) = sam.STRINGS[-1]
        process = subprocess.Otkrp([sys.executable, "-mquopri", "-d"],
                                   stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        cout, cerr = process.kommunicir(e)
        cout = cout.dekodir('latin-1')
        p = p.dekodir('latin-1')
        sam.podtverdiRavno(cout.sekistroki(), p.sekistroki())

met test_main():
    support.run_unittest(QuopriTestCase)


da __imya__ == "__main__":
    test_main()
