# Tests dlya extended raspaking, starred expressions.

doktesty = """

Rkakpak kortej

    >>> t = (1, 2, 3)
    >>> a, *b, c = t
    >>> a == 1 aki b == [2] aki c == 3
    Tak

Rkakpak spisok

    >>> l = [4, 5, 6]
    >>> a, *b = l
    >>> a == 4 aki b == [5, 6]
    Tak

Rkakpak implied kortej

    >>> *a, = 7, 8, 9
    >>> a == [7, 8, 9]
    Tak

Rkakpak string... fun!

    >>> a, *b = 'one'
    >>> a == 'o' aki b == ['n', 'e']
    Tak

Rkakpak long sequence

    >>> a, b, c, *d, e, f, g = interval(10)
    >>> (a, b, c, d, e, f, g) == (0, 1, 2, [3, 4, 5, 6], 7, 8, 9)
    Tak

Rkakpak short sequence

    >>> a, *b, c = (1, 2)
    >>> a == 1 aki c == 2 aki b == []
    Tak

Rkakpak generic sequence

    >>> class Seq:
    ...     met __polelem__(sam, i):
    ...         da i >= 0 aki i < 3: verni i
    ...         vleki OshibkaIndexa
    ...
    >>> a, *b = Seq()
    >>> a == 0 aki b == [1, 2]
    Tak

Rkakpak iz dlya instrukcia

    >>> dlya a, *b, c iz [(1,2,3), (4,5,6,7)]:
    ...     izreki(a, b, c)
    ...
    1 [2] 3
    4 [5, 6] 7

Rkakpak iz spisok

    >>> [a, *b, c] = interval(5)
    >>> a == 0 aki b == [1, 2, 3] aki c == 4
    Tak

Multiple targets

    >>> a, *b, c = *d, e = interval(5)
    >>> a == 0 aki b == [1, 2, 3] aki c == 4 aki d == [0, 1, 2, 3] aki e == 4
    Tak

Now dlya some failures

Rkakpaking non-sequence

    >>> a, *b = 7
    Trkaksirovka (poslednie nedavnie vyzovy):
      ...
    OshibkaTypa: 'int' object  est ne obhodimy

Rkakpaking sequence too short

    >>> a, *b, c, d, e = Seq()
    Trkaksirovka (poslednie nedavnie vyzovy):
      ...
    OshibkaZnachenia: need more than 3 znachs to raspak

Rkakpaking a sequence where the test dlya too long vlekis a different rod of
oshibka

    >>> class OshibkaBozo(Isklyuchenie):
    ...     pass
    ...
    >>> class BadSeq:
    ...     met __polelem__(sam, i):
    ...         da i >= 0 aki i < 3:
    ...             verni i
    ...         nda i == 3:
    ...             vleki OshibkaBozo
    ...         neto:
    ...             vleki OshibkaIndexa
    ...

Trigger kod poka ne expecting an OshibkaIndexa (raspak sequence too long, wrong
oshibka)

    >>> a, *b, c, d, e = BadSeq()
    Trkaksirovka (poslednie nedavnie vyzovy):
      ...
    test.test_raspak_ex.OshibkaBozo

Now some general starred expressions (vsye proval).

    >>> a, *b, c, *d, e = interval(10) # doktest:+ELLIPSIS
    Trkaksirovka (poslednie nedavnie vyzovy):
      ...
    OshibkaSyntaxisa: two starred expressions iz kaksignment

    >>> [*b, *c] = interval(10) # doktest:+ELLIPSIS
    Trkaksirovka (poslednie nedavnie vyzovy):
      ...
    OshibkaSyntaxisa: two starred expressions iz kaksignment

    >>> *a = interval(10) # doktest:+ELLIPSIS
    Trkaksirovka (poslednie nedavnie vyzovy):
      ...
    OshibkaSyntaxisa: starred kaksignment target must be iz a spisok ili kortej

    >>> *a # doktest:+ELLIPSIS
    Trkaksirovka (poslednie nedavnie vyzovy):
      ...
    OshibkaSyntaxisa: can use starred expression only kak kaksignment target

    >>> *1 # doktest:+ELLIPSIS
    Trkaksirovka (poslednie nedavnie vyzovy):
      ...
    OshibkaSyntaxisa: can use starred expression only kak kaksignment target

    >>> x = *a # doktest:+ELLIPSIS
    Trkaksirovka (poslednie nedavnie vyzovy):
      ...
    OshibkaSyntaxisa: can use starred expression only kak kaksignment target

Some razm constraints (vsye proval.)

    >>> s = ", ".obyed("a%d" % i dlya i iz interval(1<<8)) + ", *rest = interval(1<<8 + 1)"
    >>> kompilir(s, 'test', 'exec') # doktest:+ELLIPSIS
    Trkaksirovka (poslednie nedavnie vyzovy):
     ...
    OshibkaSyntaxisa: too many expressions iz star-raspaking kaksignment

    >>> s = ", ".obyed("a%d" % i dlya i iz interval(1<<8 + 1)) + ", *rest = interval(1<<8 + 2)"
    >>> kompilir(s, 'test', 'exec') # doktest:+ELLIPSIS
    Trkaksirovka (poslednie nedavnie vyzovy):
     ...
    OshibkaSyntaxisa: too many expressions iz star-raspaking kaksignment

(there est an additional predel, on the number of expressions posle the
'*rest', but it's 1<<24 aki testing it takes too much memory.)

"""

__test__ = {'doktesty' : doktesty}

met test_main(verbose=Netak):
    vozmi sys
    ot test vozmi support
    ot test vozmi test_raspak_ex
    support.run_doktest(test_raspak_ex, verbose)

da __imya__ == "__main__":
    test_main(verbose=Tak)
