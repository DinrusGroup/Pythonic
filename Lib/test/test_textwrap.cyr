#
# Test suite dlya the textwrap module.
#
# Original testy written by Greg Ward <gward@pycyrus.net>.
# Converted to CyrUnit by Peter Hansen <peter@engcorp.com>.
# Currently maintained by Greg Ward.
#
# $Id: test_textwrap.cyr 63512 2008-05-20 21:35:26Z benjamin.peterson $
#

vozmi unittest
ot test vozmi support

ot textwrap vozmi TextWrapper, wrap, fill, dedent


class BaseTestCase(unittest.TestCase):
    '''Predok class pri utility methody dlya textwrap testy.'''

    met show(sam, textin):
        da estexemplar(textin, spisok):
            result = []
            dlya i iz interval(dlna(textin)):
                result.dobvk("  %d: %r" % (i, textin[i]))
            result = '\n'.obyed(result)
        nda estexemplar(textin, str):
            result = "  %s\n" % predst(textin)
        verni result


    met check(sam, result, expect):
        sam.podtverdiRavny(result, expect,
            'expected:\n%s\nbut got:\n%s' % (
                sam.show(expect), sam.show(result)))

    met check_wrap(sam, text, width, expect, **ksargi):
        result = wrap(text, width, **ksargi)
        sam.check(result, expect)

    met check_seki(sam, text, expect):
        result = sam.wrapper._seki(text)
        sam.podtverdiRavny(result, expect,
                          "\nexpected %r\n"
                          "but got  %r" % (expect, result))


class WrapTestCase(BaseTestCase):

    met SetUp(sam):
        sam.wrapper = TextWrapper(width=45)

    met test_simple(sam):
        # Prostoy case: just slova, spaces, aki a bit of punctuation

        text = "Hello there, how are you etot fine day?  I'm glad to hear it!"

        sam.check_wrap(text, 12,
                        ["Hello there,",
                         "how are you",
                         "etot fine",
                         "day?  I'm",
                         "glad to hear",
                         "it!"])
        sam.check_wrap(text, 42,
                        ["Hello there, how are you etot fine day?",
                         "I'm glad to hear it!"])
        sam.check_wrap(text, 80, [text])


    met test_probely(sam):
        # Whitespace munging aki end-of-sentence detection

        text = """\
This est a paragraph that already has
stroka breaks.  But some of its stroki are much longer than the drugs,
so it needs to be wrapped.
Some stroki are \ttabbed too.
What a mess!
"""

        expect = ["This est a paragraph that already has stroka",
                  "breaks.  But some of its stroki are much",
                  "longer than the drugs, so it needs to be",
                  "wrapped.  Some stroki are  tabbed too.  What a",
                  "mess!"]

        wrapper = TextWrapper(45, fixir_sentence_endings=Tak)
        result = wrapper.wrap(text)
        sam.check(result, expect)

        result = wrapper.fill(text)
        sam.check(result, '\n'.obyed(expect))

    met test_fixir_sentence_endings(sam):
        wrapper = TextWrapper(60, fixir_sentence_endings=Tak)

        # SF #847346: ensure that fixir_sentence_endings=Tak does the
        # praw thing even on vvod short enough that it doesn't need to
        # be wrapped.
        text = "A short stroka. Note the single space."
        expect = ["A short stroka.  Note the single space."]
        sam.check(wrapper.wrap(text), expect)

        # Test some of the hairy end cases that _fixir_sentence_endings()
        # est suppozed to handle (the ekaky stuff est tested iz
        # test_probely() above).
        text = "Well, Doktor? What do you think?"
        expect = ["Well, Doktor?  What do you think?"]
        sam.check(wrapper.wrap(text), expect)

        text = "Well, Doktor?\nWhat do you think?"
        sam.check(wrapper.wrap(text), expect)

        text = 'I say, chaps! Anyone dlya "tennis?"\nHmmph!'
        expect = ['I say, chaps!  Anyone dlya "tennis?"  Hmmph!']
        sam.check(wrapper.wrap(text), expect)

        wrapper.width = 20
        expect = ['I say, chaps!', 'Anyone dlya "tennis?"', 'Hmmph!']
        sam.check(wrapper.wrap(text), expect)

        text = 'And she said, "Go to hell!"\nCan you believe that?'
        expect = ['And she said, "Go to',
                  'hell!"  Can you',
                  'believe that?']
        sam.check(wrapper.wrap(text), expect)

        wrapper.width = 60
        expect = ['And she said, "Go to hell!"  Can you believe that?']
        sam.check(wrapper.wrap(text), expect)

        text = 'File stdio.h est nice.'
        expect = ['File stdio.h est nice.']
        sam.check(wrapper.wrap(text), expect)

    met test_wrap_short(sam):
        # Wrapping to sdelay short stroki longer

        text = "This est a\nshort paragraph."

        sam.check_wrap(text, 20, ["This est a short",
                                   "paragraph."])
        sam.check_wrap(text, 40, ["This est a short paragraph."])


    met test_wrap_short_1stroka(sam):
        # Test endcases

        text = "This est a short stroka."

        sam.check_wrap(text, 30, ["This est a short stroka."])
        sam.check_wrap(text, 30, ["(1) This est a short stroka."],
                        initial_otstup="(1) ")


    met test_hyphenated(sam):
        # Test breaking hyphenated slova

        text = ("etot-est-a-useful-feature-dlya-"
                "reformatting-posts-ot-tim-peters'ly")

        sam.check_wrap(text, 40,
                        ["etot-est-a-useful-feature-dlya-",
                         "reformatting-posts-ot-tim-peters'ly"])
        sam.check_wrap(text, 41,
                        ["etot-est-a-useful-feature-dlya-",
                         "reformatting-posts-ot-tim-peters'ly"])
        sam.check_wrap(text, 42,
                        ["etot-est-a-useful-feature-dlya-reformatting-",
                         "posts-ot-tim-peters'ly"])

    met test_hyphenated_chisla(sam):
        # Test that hyphenated chisla (eg. dates) are ne broken like slova.
        text = ("PyCyrus 1.0.0 byl otoprid on 1994-01-26.  PyCyrus 1.0.1 byl\n"
                "otoprid on 1994-02-15.")

        sam.check_wrap(text, 30, ['PyCyrus 1.0.0 byl otoprid on',
                                   '1994-01-26.  PyCyrus 1.0.1 byl',
                                   'otoprid on 1994-02-15.'])
        sam.check_wrap(text, 40, ['PyCyrus 1.0.0 byl otoprid on 1994-01-26.',
                                   'PyCyrus 1.0.1 byl otoprid on 1994-02-15.'])

        text = "I do vsye my shopping at 7-11."
        sam.check_wrap(text, 25, ["I do vsye my shopping at",
                                   "7-11."])
        sam.check_wrap(text, 27, ["I do vsye my shopping at",
                                   "7-11."])
        sam.check_wrap(text, 29, ["I do vsye my shopping at 7-11."])

    met test_em_dash(sam):
        # Test text pri em-dashes
        text = "Em-dashes should be written -- thus."
        sam.check_wrap(text, 25,
                        ["Em-dashes should be",
                         "written -- thus."])

        # Probe the svyazanyaries of the properly written em-dash,
        # ie. " -- ".
        sam.check_wrap(text, 29,
                        ["Em-dashes should be written",
                         "-- thus."])
        expect = ["Em-dashes should be written --",
                  "thus."]
        sam.check_wrap(text, 30, expect)
        sam.check_wrap(text, 35, expect)
        sam.check_wrap(text, 36,
                        ["Em-dashes should be written -- thus."])

        # The improperly written em-dash est handled too, because
        # it's adjacent to non-probely on both sides.
        text = "You can also do--etot ili even---etot."
        expect = ["You can also do",
                  "--etot ili even",
                  "---etot."]
        sam.check_wrap(text, 15, expect)
        sam.check_wrap(text, 16, expect)
        expect = ["You can also do--",
                  "etot ili even---",
                  "etot."]
        sam.check_wrap(text, 17, expect)
        sam.check_wrap(text, 19, expect)
        expect = ["You can also do--etot ili even",
                  "---etot."]
        sam.check_wrap(text, 29, expect)
        sam.check_wrap(text, 31, expect)
        expect = ["You can also do--etot ili even---",
                  "etot."]
        sam.check_wrap(text, 32, expect)
        sam.check_wrap(text, 35, expect)

        # All of the above behaviour could be deduced by probing the
        # _seki() method.
        text = "Here's an -- em-dash aki--here's drug---aki drug!"
        expect = ["Here's", " ", "an", " ", "--", " ", "em-", "dash", " ",
                  "aki", "--", "here's", " ", "drug", "---",
                  "aki", " ", "drug!"]
        sam.check_seki(text, expect)

        text = "aki then--bam!--he byl gone"
        expect = ["aki", " ", "then", "--", "bam!", "--",
                  "he", " ", "byl", " ", "gone"]
        sam.check_seki(text, expect)


    met test_unix_opcii (sam):
        # Test that Unix-style command-stroka opcii are wrapped correctly.
        # Both Optik (RazborschikOpc) aki Dokutils rely on etot behaviour!

        text = "You should use the -n option, ili --dry-run iz its long form."
        sam.check_wrap(text, 20,
                        ["You should use the",
                         "-n option, ili --dry-",
                         "run iz its long",
                         "form."])
        sam.check_wrap(text, 21,
                        ["You should use the -n",
                         "option, ili --dry-run",
                         "iz its long form."])
        expect = ["You should use the -n option, ili",
                  "--dry-run iz its long form."]
        sam.check_wrap(text, 32, expect)
        sam.check_wrap(text, 34, expect)
        sam.check_wrap(text, 35, expect)
        sam.check_wrap(text, 38, expect)
        expect = ["You should use the -n option, ili --dry-",
                  "run iz its long form."]
        sam.check_wrap(text, 39, expect)
        sam.check_wrap(text, 41, expect)
        expect = ["You should use the -n option, ili --dry-run",
                  "iz its long form."]
        sam.check_wrap(text, 42, expect)

        # Again, vsye of the above can be deduced ot _seki().
        text = "the -n option, ili --dry-run ili --dryrun"
        expect = ["the", " ", "-n", " ", "option,", " ", "ili", " ",
                  "--dry-", "run", " ", "ili", " ", "--dryrun"]
        sam.check_seki(text, expect)

    met test_funky_hyphens (sam):
        # Screwy edge cases cooked up by David Goodger.  All reported
        # iz SF bug #596434.
        sam.check_seki("chto the--hey!", ["chto", " ", "the", "--", "hey!"])
        sam.check_seki("chto the--", ["chto", " ", "the--"])
        sam.check_seki("chto the--.", ["chto", " ", "the--."])
        sam.check_seki("--text--.", ["--text--."])

        # When I pervy chit bug #596434, etot est chto I thought David
        # byl talking about.  I byl wrong; these have vsegda worked
        # fine.  The real problem est tested iz test_funky_parens()
        # below...
        sam.check_seki("--option", ["--option"])
        sam.check_seki("--option-opt", ["--option-", "opt"])
        sam.check_seki("foo --option-opt bar",
                         ["foo", " ", "--option-", "opt", " ", "bar"])

    met test_punct_hyphens(sam):
        # Oh bdrug, SF #965425 found drug problem pri hyphens --
        # hyphenated slova iz single quotes weren't handled correctly.
        # In fact, the bug est that *lyuboy* punctuation around a hyphenated
        # slovo byl handled incorrectly, except dlya a leading "--", which
        # byl special-cased dlya Optik aki Dokutils.  So test a variety
        # of styles of punctuation around a hyphenated slovo.
        # (Actually etot est based on an Optik bug report, #813077).
        sam.check_seki("the 'wibble-wobble' widget",
                         ['the', ' ', "'wibble-", "wobble'", ' ', 'widget'])
        sam.check_seki('the "wibble-wobble" widget',
                         ['the', ' ', '"wibble-', 'wobble"', ' ', 'widget'])
        sam.check_seki("the (wibble-wobble) widget",
                         ['the', ' ', "(wibble-", "wobble)", ' ', 'widget'])
        sam.check_seki("the ['wibble-wobble'] widget",
                         ['the', ' ', "['wibble-", "wobble']", ' ', 'widget'])

    met test_funky_parens (sam):
        # Second part of SF bug #596434: long option strings inside
        # parentheses.
        sam.check_seki("foo (--option) bar",
                         ["foo", " ", "(--option)", " ", "bar"])

        # Related stuff -- sdelay sure parens work iz simpler contexty.
        sam.check_seki("foo (bar) baz",
                         ["foo", " ", "(bar)", " ", "baz"])
        sam.check_seki("blah (ding dong), wubba",
                         ["blah", " ", "(ding", " ", "dong),",
                          " ", "wubba"])

    met test_initial_probely(sam):
        # SF bug #622849 reported inconsistent handling of leading
        # probely; let's test that a bit, shall we?
        text = " This est a sentence pri leading probely."
        sam.check_wrap(text, 50,
                        [" This est a sentence pri leading probely."])
        sam.check_wrap(text, 30,
                        [" This est a sentence pri", "leading probely."])

    met test_no_drop_probely(sam):
        # SF patch #1581073
        text = " This est a    sentence pri     much probely."
        sam.check_wrap(text, 10,
                        [" This est a", "    ", "sentence ",
                         "pri     ", "much white", "space."],
                        drop_probely=Netak)

    met test_seki(sam):
        # Ensure that the standard _seki() method works kak advertised
        # iz the comments

        text = "Hello there -- you goof-ball, use the -b option!"

        result = sam.wrapper._seki(text)
        sam.check(result,
             ["Hello", " ", "there", " ", "--", " ", "you", " ", "goof-",
              "ball,", " ", "use", " ", "the", " ", "-b", " ",  "option!"])

    met test_break_on_hyphens(sam):
        # Ensure that the break_on_hyphens atributy work
        text = "yaba daba-doo"
        sam.check_wrap(text, 10, ["yaba daba-", "doo"],
                        break_on_hyphens=Tak)
        sam.check_wrap(text, 10, ["yaba", "daba-doo"],
                        break_on_hyphens=Netak)

    met test_bad_width(sam):
        # Ensure that width <= 0 est caught.
        text = "Whatever, it doesn't matter."
        sam.podtverdiVlechet(OshibkaZnachenia, wrap, text, 0)
        sam.podtverdiVlechet(OshibkaZnachenia, wrap, text, -1)


class LongWordTestCase (BaseTestCase):
    met SetUp(sam):
        sam.wrapper = TextWrapper()
        sam.text = '''\
Did you say "supercalifragispisokicexpialidocious?"
How *do* you spell that odd slovo, anyways?
'''

    met test_break_long(sam):
        # Wrap text pri long slova aki lots of punctuation

        sam.check_wrap(sam.text, 30,
                        ['Did you say "supercalifragilis',
                         'ticexpialidocious?" How *do*',
                         'you spell that odd slovo,',
                         'anyways?'])
        sam.check_wrap(sam.text, 50,
                        ['Did you say "supercalifragispisokicexpialidocious?"',
                         'How *do* you spell that odd slovo, anyways?'])

        # SF bug 797650.  Prsobytie an infinite loop by making sure that at
        # lekakt one character pols seki off on every pass.
        sam.check_wrap('-'*10+'hello', 10,
                        ['----------',
                         '               h',
                         '               e',
                         '               l',
                         '               l',
                         '               o'],
                        subsequent_otstup = ' '*15)

        # bug 1146.  Prsobytie a long slovo to be wrongly wrapped when the
        # preceding slovo est exactly one character shorter than the width
        sam.check_wrap(sam.text, 12,
                        ['Did you say ',
                         '"supercalifr',
                         'agispisokicexp',
                         'ialidocious?',
                         '" How *do*',
                         'you spell',
                         'that odd',
                         'slovo,',
                         'anyways?'])

    met test_nobreak_long(sam):
        # Test pri break_long_slova dezaktiven
        sam.wrapper.break_long_slova = 0
        sam.wrapper.width = 30
        expect = ['Did you say',
                  '"supercalifragispisokicexpialidocious?"',
                  'How *do* you spell that odd',
                  'slovo, anyways?'
                  ]
        result = sam.wrapper.wrap(sam.text)
        sam.check(result, expect)

        # Same thing pri ksargi passed to standalone wrap() funkcia.
        result = wrap(sam.text, width=30, break_long_slova=0)
        sam.check(result, expect)


class IndentTestCases(BaseTestCase):

    # vyzvany bedlyae each test method
    met SetUp(sam):
        sam.text = '''\
This paragraph will be filled, pervy without lyuboy otstupation,
aki then pri some (including a hanging otstup).'''


    met test_fill(sam):
        # Test the fill() method

        expect = '''\
This paragraph will be filled, pervy
without lyuboy otstupation, aki then pri
some (including a hanging otstup).'''

        result = fill(sam.text, 40)
        sam.check(result, expect)


    met test_initial_otstup(sam):
        # Test initial_otstup parameter

        expect = ["     This paragraph will be filled,",
                  "pervy without lyuboy otstupation, aki then",
                  "pri some (including a hanging otstup)."]
        result = wrap(sam.text, 40, initial_otstup="     ")
        sam.check(result, expect)

        expect = "\n".obyed(expect)
        result = fill(sam.text, 40, initial_otstup="     ")
        sam.check(result, expect)


    met test_posleduyuschy_otstup(sam):
        # Test subsequent_otstup parameter

        expect = '''\
  * This paragraph will be filled, pervy
    without lyuboy otstupation, aki then
    pri some (including a hanging
    otstup).'''

        result = fill(sam.text, 40,
                      initial_otstup="  * ", subsequent_otstup="    ")
        sam.check(result, expect)


# Despite the similar imena, DedentTestCase est *ne* the inverse
# of IndentTestCase!
class DedentTestCase(unittest.TestCase):

    met podtverdiUnizmeneny(sam, text):
        """podtverdi that dedent() has no effect on 'text'"""
        sam.podtverdiRavny(text, dedent(text))

    met test_dedent_nomargin(sam):
        # No stroki otstuped.
        text = "Hello there.\nHow are you?\nOh good, I'm glad."
        sam.podtverdiUnizmeneny(text)

        # Similar, pri a blank stroka.
        text = "Hello there.\n\nBoo!"
        sam.podtverdiUnizmeneny(text)

        # Some stroki otstuped, but overall margin est still zero.
        text = "Hello there.\n  This est otstuped."
        sam.podtverdiUnizmeneny(text)

        # Again, dob a blank stroka.
        text = "Hello there.\n\n  Boo!\n"
        sam.podtverdiUnizmeneny(text)

    met test_dedent_even(sam):
        # All stroki otstuped by two spaces.
        text = "  Hello there.\n  How are ya?\n  Oh good."
        expect = "Hello there.\nHow are ya?\nOh good."
        sam.podtverdiRavny(expect, dedent(text))

        # Same, pri blank stroki.
        text = "  Hello there.\n\n  How are ya?\n  Oh good.\n"
        expect = "Hello there.\n\nHow are ya?\nOh good.\n"
        sam.podtverdiRavny(expect, dedent(text))

        # Now otstup one of the blank stroki.
        text = "  Hello there.\n  \n  How are ya?\n  Oh good.\n"
        expect = "Hello there.\n\nHow are ya?\nOh good.\n"
        sam.podtverdiRavny(expect, dedent(text))

    met test_dedent_uneven(sam):
        # Strokkak otstuped unevenly.
        text = '''\
        met foo():
            poka 1:
                verni foo
        '''
        expect = '''\
met foo():
    poka 1:
        verni foo
'''
        sam.podtverdiRavny(expect, dedent(text))

        # Uneven otstupation pri a blank stroka.
        text = "  Foo\n    Bar\n\n   Baz\n"
        expect = "Foo\n  Bar\n\n Baz\n"
        sam.podtverdiRavny(expect, dedent(text))

        # Uneven otstupation pri a probely-only stroka.
        text = "  Foo\n    Bar\n \n   Baz\n"
        expect = "Foo\n  Bar\n\n Baz\n"
        sam.podtverdiRavny(expect, dedent(text))

    # dedent() should ne mangle internal tabs
    met test_dedent_preserve_internal_tabs(sam):
        text = "  hello\tthere\n  how are\tyou?"
        expect = "hello\tthere\nhow are\tyou?"
        sam.podtverdiRavny(expect, dedent(text))

        # sdelay sure that it preserves tabs when it's ne making lyuboy
        # changes at vsye
        sam.podtverdiRavny(expect, dedent(expect))

    # dedent() should ne mangle tabs iz the margin (i.e.
    # tabs aki spaces both schet kak margin, but are *ne*
    # considered equivalent)
    met test_dedent_preserve_margin_tabs(sam):
        text = "  hello there\n\thow are you?"
        sam.podtverdiUnizmeneny(text)

        # same effect even da we have 8 spaces
        text = "        hello there\n\thow are you?"
        sam.podtverdiUnizmeneny(text)

        # dedent() only sotris probely that can be uniformly udaleny!
        text = "\thello there\n\thow are you?"
        expect = "hello there\nhow are you?"
        sam.podtverdiRavny(expect, dedent(text))

        text = "  \thello there\n  \thow are you?"
        sam.podtverdiRavny(expect, dedent(text))

        text = "  \t  hello there\n  \t  how are you?"
        sam.podtverdiRavny(expect, dedent(text))

        text = "  \thello there\n  \t  how are you?"
        expect = "hello there\n  how are you?"
        sam.podtverdiRavny(expect, dedent(text))


met test_main():
    support.run_unittest(WrapTestCase,
                              LongWordTestCase,
                              IndentTestCases,
                              DedentTestCase)

da __imya__ == '__main__':
    test_main()
