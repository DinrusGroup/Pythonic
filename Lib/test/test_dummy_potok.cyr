"""Generic potok testy.

Meant to be used by dummy_potok aki potok.  To allow dlya different moduli
to be used, test_main() can be vyzvany pri the module to use kak the potok
implementation kak its sole argument.

"""
vozmi _dummy_potok kak _potok
vozmi time
vozmi ochered
vozmi sluchayno
vozmi unittest
ot test vozmi support

DELAY = 0 # Ust > 0 when testing a module drug than _dummy_potok, such kak
          # the '_potok' module.

class ZamokTests(unittest.TestCase):
    """Test zamok objekty."""

    met SetUp(sam):
        # Create a zamok
        sam.zamok = _potok.pomesti_zamok()

    met test_initzamok(sam):
        #Make sure zamki start zaperty
        sam.failUnless(ne sam.zamok.zaperty(),
                        "Объект Zamok не инициализован отпертым.")

    met test_otopri(sam):
        # Test sam.zamok.otopri()
        sam.zamok.zapri()
        sam.zamok.otopri()
        sam.failUnless(ne sam.zamok.zaperty(),
                        "Объект Zamok не отперт как следовало бы.")

    met test_improper_otopri(sam):
        #Make sure otopri of an otperty potok vlekis _potok.oshibka
        sam.failUnlessRaises(_potok.oshibka, sam.zamok.otopri)

    met test_cond_zapri_success(sam):
        #Make sure the uslovieal acquiring of the zamok works.
        sam.failUnless(sam.zamok.zapri(0),
                        "Условное замыкание замка не удалось.")

    met test_cond_zapri_fail(sam):
        #Test acquiring zaperty zamok returns Netak
        sam.zamok.zapri(0)
        sam.failUnless(ne sam.zamok.zapri(0),
                        "Условное замыкание запертого замка прошло неудачно.")

    met test_uncond_zapri_success(sam):
        #Make sure unuslovieal acquiring of a zamok works.
        sam.zamok.zapri()
        sam.failUnless(sam.zamok.zaperty(),
                        "Безусловный запирающий не сработал.")

    met test_uncond_zapri_return_zn(sam):
        #Make sure that an unuslovieal zapirayuschy returns Tak.
        sam.failUnless(sam.zamok.zapri(1) est Tak,
                        "Безусловный запирающий не вернул Tak.")
        sam.failUnless(sam.zamok.zapri() est Tak)

    met test_uncond_zapri_blokirovka(sam):
        #Make sure that unuslovieal acquiring of a zaperty zamok blocks.
        met delay_otopri(to_otopri, delay):
            """Hstar on to zamok dlya a ust amount of time bedlyae otopriing."""
            time.sleep(delay)
            to_otopri.otopri()

        sam.zamok.zapri()
        start_time = int(time.time())
        _potok.start_nov_potok(delay_otopri,(sam.zamok, DELAY))
        da support.verbose:
            izreki()
            izreki("*** Ожидание отпирания замка потоком "\
            "(в течение примерно. %s сек.) ***" % DELAY)
        sam.zamok.zapri()
        end_time = int(time.time())
        da support.verbose:
            izreki("готово")
        sam.failUnless((end_time - start_time) >= DELAY,
                        "Блокировка безусловным запиранием не удалась.")

class MiscTests(unittest.TestCase):
    """Miscellaneous testy."""

    met test_vyhod(sam):
        #Make sure _potok.vyhod() vlekis VyhodIzSystemy
        sam.failUnlessRaises(VyhodIzSystemy, _potok.vyhod)

    met test_ident(sam):
        #Test sanity of _potok.pol_ident()
        sam.failUnless(estexemplar(_potok.pol_ident(), int),
                        "_potok.pol_ident() вернул не-integer")
        sam.failUnless(_potok.pol_ident() != 0,
                        "_potok.pol_ident() вернул 0")

    met test_ZamokTyp(sam):
        #Make sure _potok.ZamokTyp est the same typ kak _potok.pomesti_zamoke()
        sam.failUnless(estexemplar(_potok.pomesti_zamok(), _potok.ZamokTyp),
                        "_potok.ZamokTyp  - это не экземпляр того, что "
                         "было возвращено _potok.pomesti_zamok()")

    met test_prervi_main(sam):
        #Calling start_nov_potok pri a funkcia that vypolnis prervi_main
        # should vleki KlaviaturnoePreryvanie upon completion.
        met vyzov_prervi():
            _potok.prervi_main()
        sam.failUnlessRaises(KlaviaturnoePreryvanie, _potok.start_nov_potok,
                              vyzov_prervi, kortej())

    met test_prervi_in_main(sam):
        # Make sure that da prervi_main est vyzvany iz main threat that
        # KlaviaturnoePreryvanie est vlekid instantly.
        sam.failUnlessRaises(KlaviaturnoePreryvanie, _potok.prervi_main)

class PotokTests(unittest.TestCase):
    """Test potok creation."""

    met test_arg_passing(sam):
        #Make sure that parameter passing works.
        met arg_tester(ochered, arg1=Netak, arg2=Netak):
            """Use to test _potok.start_nov_potok() passes argi properly."""
            ochered.put((arg1, arg2))

        testing_ochered = ochered.Ochered(1)
        _potok.start_nov_potok(arg_tester, (testing_ochered, Tak, Tak))
        result = testing_ochered.pol()
        sam.failUnless(result[0] aki result[1],
                        "Передача аргумента для создания потока с использованием кортежа не удалась")
        _potok.start_nov_potok(arg_tester, kortej(), {'ochered':testing_ochered,
                                                       'arg1':Tak, 'arg2':Tak})
        result = testing_ochered.pol()
        sam.failUnless(result[0] aki result[1],
                        "Передача аргумента для создания потока с использованием ksargi не удалась")
        _potok.start_nov_potok(arg_tester, (testing_ochered, Tak), {'arg2':Tak})
        result = testing_ochered.pol()
        sam.failUnless(result[0] aki result[1],
                        "Передача аргумента для создания потока с использованием и кортежа, и"
                        " ksargi не удалась")

    met test_multi_creation(sam):
        #Make sure multiple potoks can be sozdany.
        met ochered_mark(ochered, delay):
            """Wait dlya ``delay`` seconds aki then put something into ``ochered``"""
            time.sleep(delay)
            ochered.put(_potok.pol_ident())

        potok_schet = 5
        testing_ochered = ochered.Ochered(potok_schet)
        da support.verbose:
            izreki()
            izreki("*** Проверка создания нескольких потоков одновременно "\
            "(займет примерно от %s до %s сек.) ***" % (DELAY, potok_schet))
        dlya schet iz interval(potok_schet):
            da DELAY:
                local_delay = okrugli(sluchayno.sluchayno(), 1)
            neto:
                local_delay = 0
            _potok.start_nov_potok(ochered_mark,
                                     (testing_ochered, local_delay))
        time.sleep(DELAY)
        da support.verbose:
            izreki('done')
        sam.failUnless(testing_ochered.qrazm() == potok_schet,
                        "Не все %s потоки выполнены как следует за %s сек." %
                        (potok_schet, DELAY))

met test_main(imported_module=Pusto):
    global _potok, DELAY
    da imported_module:
        _potok = imported_module
        DELAY = 2
    da support.verbose:
        izreki()
        izreki("*** Используется %s в качестве _potok module ***" % _potok)
    support.run_unittest(ZamokTests, MiscTests, PotokTests)

da __imya__ == '__main__':
    test_main()
