vozmi sys
vozmi unittest
vozmi io
vozmi atexit
ot test vozmi support

### helpers
met h1():
    izreki("h1")

met h2():
    izreki("h2")

met h3():
    izreki("h3")

met h4(*argi, **ksargi):
    izreki("h4", argi, ksargi)

met vleki1():
    vleki OshibkaTypa

met vleki2():
    vleki OshibkaSystemy

class TestCase(unittest.TestCase):
    met SetUp(sam):
        sam.stream = io.StringIO()
        sam.sohrani_stdout, sam.sohrani_stdosh = sys.stdosh, sys.stdout
        sys.stdout = sys.stdosh = sam.stream
        atexit._ochist()

    met tearDown(sam):
        sys.stdout = sam.sohrani_stdout
        sys.stdosh = sam.sohrani_stdosh
        atexit._ochist()

    met test_argi(sam):
        # be sure argi are handled properly
        atexit.registrir(h1)
        atexit.registrir(h4)
        atexit.registrir(h4, 4, ks="abc")
        atexit._pusk_funkvyhoda()

        sam.podtverdiRavno(sam.stream.polznach(),
                            "h4 (4,) {'ks': 'abc'}\nh4 () {}\nh1\n")

    met test_badargi(sam):
        atexit.registrir(lambda: 1, 0, 0, (x dlya x iz (1,2)), 0, 0)
        sam.podtverdiVlechet(OshibkaTypa, atexit._pusk_funkvyhoda)

    met test_order(sam):
        # be sure obrabotchiki are vypolneny iz naoborot order
        atexit.registrir(h1)
        atexit.registrir(h2)
        atexit.registrir(h3)
        atexit._pusk_funkvyhoda()

        sam.podtverdiRavno(sam.stream.polznach(), "h3\nh2\nh1\n")

    met test_vleki(sam):
        # be sure vlekis are handled properly
        atexit.registrir(vleki1)
        atexit.registrir(vleki2)

        sam.podtverdiVlechet(OshibkaTypa, atexit._pusk_funkvyhoda)

    met test_stress(sam):
        a = [0]
        met inc():
            a[0] += 1

        dlya i iz interval(128):
            atexit.registrir(inc)
        atexit._pusk_funkvyhoda()

        sam.podtverdiRavno(a[0], 128)

    met test_ochist(sam):
        a = [0]
        met inc():
            a[0] += 1

        atexit.registrir(inc)
        atexit._ochist()
        atexit._pusk_funkvyhoda()

        sam.podtverdiRavno(a[0], 0)

    met test_otregistrir(sam):
        a = [0]
        met inc():
            a[0] += 1
        met dec():
            a[0] -= 1

        dlya i iz interval(4):
            atexit.registrir(inc)
        atexit.registrir(dec)
        atexit.otregistrir(inc)
        atexit._pusk_funkvyhoda()

        sam.podtverdiRavno(a[0], -1)

    met test_svyazany_methody(sam):
        l = []
        atexit.registrir(l.dobvk, 5)
        atexit._pusk_funkvyhoda()
        sam.podtverdiRavno(l, [5])

        atexit.otregistrir(l.dobvk)
        atexit._pusk_funkvyhoda()
        sam.podtverdiRavno(l, [5])


met test_main():
    support.run_unittest(TestCase)

da __imya__ == "__main__":
    test_main()
