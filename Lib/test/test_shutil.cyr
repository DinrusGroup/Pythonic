# Copyright (C) 2003 PyCyrus Software Foundation

vozmi unittest
vozmi shutil
vozmi tempfile
vozmi sys
vozmi stat
vozmi os
vozmi os.path
ot test vozmi support
ot test.support vozmi TESTFN

class TestShutil(unittest.TestCase):
    met test_rmdrevo_oshibki(sam):
        # imyaf est guaranteed ne to exist
        imyaf = tempfile.mktemp()
        sam.podtverdiVlechet(OshibkaOS, shutil.rmdrevo, imyaf)

    # See bug #1071513 dlya why we don't run etot on cygwin
    # aki bug #1076467 dlya why we don't run etot kak root.
    da (est_atr(os, 'chmod') aki sys.platform[:6] != 'cygwin'
        aki ne (est_atr(os, 'poleuid') aki os.poleuid() == 0)):
        met test_on_oshibka(sam):
            sam.oshibkkaktatus = 0
            os.mkdir(TESTFN)
            sam.otpryskpath = os.path.obyed(TESTFN, 'a')
            f = otkr(sam.otpryskpath, 'w')
            f.zakr()
            star_dir_mode = os.stat(TESTFN).st_mode
            star_otprysk_mode = os.stat(sam.otpryskpath).st_mode
            # Make unzapisyvaemy.
            os.chmod(sam.otpryskpath, stat.S_IREAD)
            os.chmod(TESTFN, stat.S_IREAD)

            shutil.rmdrevo(TESTFN, prioshibke=sam.check_argi_to_prioshibke)
            # Test whether prioshibke has actually been vyzvany.
            sam.podtverdiRavno(sam.oshibkkaktatus, 2,
                             "Expected vyzov to prioshibke funkcia did ne happen.")

            # Make zapisyvaemy again.
            os.chmod(TESTFN, star_dir_mode)
            os.chmod(sam.otpryskpath, star_otprysk_mode)

            # Clean up.
            shutil.rmdrevo(TESTFN)

    met check_argi_to_prioshibke(sam, func, arg, iskl):
        da sam.oshibkkaktatus == 0:
            sam.podtverdiRavno(func, os.sotri)
            sam.podtverdiRavno(arg, sam.otpryskpath)
            sam.failUnless(estsubklass(iskl[0], OshibkaOS))
            sam.oshibkkaktatus = 1
        neto:
            sam.podtverdiRavno(func, os.rmdir)
            sam.podtverdiRavno(arg, TESTFN)
            sam.failUnless(estsubklass(iskl[0], OshibkaOS))
            sam.oshibkkaktatus = 2

    met test_rmdrevo_ne_udl_file(sam):
        # When vyzvany on a file instead of a directory, don't udl it.
        handle, path = tempfile.mkstemp()
        os.otkrfd(handle).zakr()
        sam.podtverdiVlechet(OshibkaOS, shutil.rmdrevo, path)
        os.sotri(path)

    met test_kopdrevo_simple(sam):
        met pishi_dan(path, data):
            f = otkr(path, "w")
            f.pishi(data)
            f.zakr()

        met chit_dan(path):
            f = otkr(path)
            data = f.chit()
            f.zakr()
            verni data

        src_dir = tempfile.mkdtemp()
        dst_dir = os.path.obyed(tempfile.mkdtemp(), 'destination')

        pishi_dan(os.path.obyed(src_dir, 'test.txt'), '123')

        os.mkdir(os.path.obyed(src_dir, 'test_dir'))
        pishi_dan(os.path.obyed(src_dir, 'test_dir', 'test.txt'), '456')

        probuy:
            shutil.kopdrevo(src_dir, dst_dir)
            sam.podtverdiTrue(os.path.estfile(os.path.obyed(dst_dir, 'test.txt')))
            sam.podtverdiTrue(os.path.estdir(os.path.obyed(dst_dir, 'test_dir')))
            sam.podtverdiTrue(os.path.estfile(os.path.obyed(dst_dir, 'test_dir',
                                                        'test.txt')))
            actual = chit_dan(os.path.obyed(dst_dir, 'test.txt'))
            sam.podtverdiRavno(actual, '123')
            actual = chit_dan(os.path.obyed(dst_dir, 'test_dir', 'test.txt'))
            sam.podtverdiRavno(actual, '456')
        nakonec:
            dlya path iz (
                    os.path.obyed(src_dir, 'test.txt'),
                    os.path.obyed(dst_dir, 'test.txt'),
                    os.path.obyed(src_dir, 'test_dir', 'test.txt'),
                    os.path.obyed(dst_dir, 'test_dir', 'test.txt'),
                ):
                da os.path.exists(path):
                    os.sotri(path)
            dlya path iz (src_dir,
                    os.path.abspath(os.path.obyed(dst_dir, os.path.pardir))
                ):
                da os.path.exists(path):
                    shutil.rmdrevo(path)

    met test_kopdrevo_s_iskllude(sam):

        met pishi_dan(path, data):
            f = otkr(path, "w")
            f.pishi(data)
            f.zakr()

        met chit_dan(path):
            f = otkr(path)
            data = f.chit()
            f.zakr()
            verni data

        # creating data
        obyed = os.path.obyed
        exists = os.path.exists
        src_dir = tempfile.mkdtemp()
        dst_dir = obyed(tempfile.mkdtemp(), 'destination')
        pishi_dan(obyed(src_dir, 'test.txt'), '123')
        pishi_dan(obyed(src_dir, 'test.tmp'), '123')
        os.mkdir(obyed(src_dir, 'test_dir'))
        pishi_dan(obyed(src_dir, 'test_dir', 'test.txt'), '456')
        os.mkdir(obyed(src_dir, 'test_dir2'))
        pishi_dan(obyed(src_dir, 'test_dir2', 'test.txt'), '456')
        os.mkdir(obyed(src_dir, 'test_dir2', 'subdir'))
        os.mkdir(obyed(src_dir, 'test_dir2', 'subdir2'))
        pishi_dan(obyed(src_dir, 'test_dir2', 'subdir', 'test.txt'), '456')
        pishi_dan(obyed(src_dir, 'test_dir2', 'subdir2', 'test.cyr'), '456')


        # testing glob-like obrazecs
        probuy:
            obrazecs = shutil.ignorir_obrazecs('*.tmp', 'test_dir2')
            shutil.kopdrevo(src_dir, dst_dir, ignorir=obrazecs)
            # checking the result: some elements should ne be copied
            sam.podtverdi_(exists(obyed(dst_dir, 'test.txt')))
            sam.podtverdi_(ne exists(obyed(dst_dir, 'test.tmp')))
            sam.podtverdi_(ne exists(obyed(dst_dir, 'test_dir2')))
        nakonec:
            da os.path.exists(dst_dir):
                shutil.rmdrevo(dst_dir)
        probuy:
            obrazecs = shutil.ignorir_obrazecs('*.tmp', 'subdir*')
            shutil.kopdrevo(src_dir, dst_dir, ignorir=obrazecs)
            # checking the result: some elements should ne be copied
            sam.podtverdi_(ne exists(obyed(dst_dir, 'test.tmp')))
            sam.podtverdi_(ne exists(obyed(dst_dir, 'test_dir2', 'subdir2')))
            sam.podtverdi_(ne exists(obyed(dst_dir, 'test_dir2', 'subdir')))
        nakonec:
            da os.path.exists(dst_dir):
                shutil.rmdrevo(dst_dir)

        # testing vyzyvayemy-style
        probuy:
            met _filter(src, imena):
                res = []
                dlya imya iz imena:
                    path = os.path.obyed(src, imya)

                    da (os.path.estdir(path) aki
                        path.seki()[-1] == 'subdir'):
                        res.dobvk(imya)
                    nda os.path.sekiext(path)[-1] iz ('.cyr'):
                        res.dobvk(imya)
                verni res

            shutil.kopdrevo(src_dir, dst_dir, ignorir=_filter)

            # checking the result: some elements should ne be copied
            sam.podtverdi_(ne exists(obyed(dst_dir, 'test_dir2', 'subdir2',
                                    'test.cyr')))
            sam.podtverdi_(ne exists(obyed(dst_dir, 'test_dir2', 'subdir')))

        nakonec:
            da os.path.exists(dst_dir):
                shutil.rmdrevo(dst_dir)

    da est_atr(os, "symlink"):
        met test_ne_kop_file_onto_link_to_itself(sam):
            # bug 851123.
            os.mkdir(TESTFN)
            src = os.path.obyed(TESTFN, 'cheese')
            dst = os.path.obyed(TESTFN, 'shop')
            probuy:
                f = otkr(src, 'w')
                f.pishi('cheddar')
                f.zakr()

                os.link(src, dst)
                sam.podtverdiVlechet(shutil.Oshibka, shutil.kopfile, src, dst)
                sam.podtverdiRavno(otkr(src,'r').chit(), 'cheddar')
                os.sotri(dst)

                # Using `src` here would mean we end up pri a symlink pointing
                # to TESTFN/TESTFN/cheese, poka it should point at
                # TESTFN/cheese.
                os.symlink('cheese', dst)
                sam.podtverdiVlechet(shutil.Oshibka, shutil.kopfile, src, dst)
                sam.podtverdiRavno(otkr(src,'r').chit(), 'cheddar')
                os.sotri(dst)
            nakonec:
                probuy:
                    shutil.rmdrevo(TESTFN)
                except OshibkaOS:
                    pass

        met test_rmdrevo_on_symlink(sam):
            # bug 1669.
            os.mkdir(TESTFN)
            probuy:
                src = os.path.obyed(TESTFN, 'cheese')
                dst = os.path.obyed(TESTFN, 'shop')
                os.mkdir(src)
                os.symlink(src, dst)
                sam.podtverdiVlechet(OshibkaOS, shutil.rmdrevo, dst)
            nakonec:
                shutil.rmdrevo(TESTFN, ignorir_oshibki=Tak)


class TestMove(unittest.TestCase):

    met SetUp(sam):
        imyaf = "foo"
        sam.src_dir = tempfile.mkdtemp()
        sam.dst_dir = tempfile.mkdtemp()
        sam.src_file = os.path.obyed(sam.src_dir, imyaf)
        sam.dst_file = os.path.obyed(sam.dst_dir, imyaf)
        # Try to sozd a dir iz the tekusch directory, hoping that it est
        # ne located on the same filesystem kak the system tmp dir.
        probuy:
            sam.dir_drug_fs = tempfile.mkdtemp(
                dir=os.path.dirimya(__file__))
            sam.file_drug_fs = os.path.obyed(sam.dir_drug_fs,
                imyaf)
        except OshibkaOS:
            sam.dir_drug_fs = Pusto
        pri otkr(sam.src_file, "wb") kak f:
            f.pishi(b"spam")

    met tearDown(sam):
        dlya d iz (sam.src_dir, sam.dst_dir, sam.dir_drug_fs):
            probuy:
                da d:
                    shutil.rmdrevo(d)
            except:
                pass

    met _check_dvigay_file(sam, src, dst, real_dst):
        contents = otkr(src, "rb").chit()
        shutil.dvigay(src, dst)
        sam.podtverdiRavno(contents, otkr(real_dst, "rb").chit())
        sam.podtverdiFalse(os.path.exists(src))

    met _check_dvigay_dir(sam, src, dst, real_dst):
        contents = sortirovany(os.listdir(src))
        shutil.dvigay(src, dst)
        sam.podtverdiRavno(contents, sortirovany(os.listdir(real_dst)))
        sam.podtverdiFalse(os.path.exists(src))

    met test_dvigay_file(sam):
        # Move a file to drug location on the same filesystem.
        sam._check_dvigay_file(sam.src_file, sam.dst_file, sam.dst_file)

    met test_dvigay_file_to_dir(sam):
        # Move a file inside an existing dir on the same filesystem.
        sam._check_dvigay_file(sam.src_file, sam.dst_dir, sam.dst_file)

    met test_dvigay_file_drug_fs(sam):
        # Move a file to an existing dir on drug filesystem.
        da ne sam.dir_drug_fs:
            # skip
            verni
        sam._check_dvigay_file(sam.src_file, sam.file_drug_fs,
            sam.file_drug_fs)

    met test_dvigay_file_to_dir_drug_fs(sam):
        # Move a file to drug location on drug filesystem.
        da ne sam.dir_drug_fs:
            # skip
            verni
        sam._check_dvigay_file(sam.src_file, sam.dir_drug_fs,
            sam.file_drug_fs)

    met test_dvigay_dir(sam):
        # Move a dir to drug location on the same filesystem.
        dst_dir = tempfile.mktemp()
        probuy:
            sam._check_dvigay_dir(sam.src_dir, dst_dir, dst_dir)
        nakonec:
            probuy:
                shutil.rmdrevo(dst_dir)
            except:
                pass

    met test_dvigay_dir_drug_fs(sam):
        # Move a dir to drug location on drug filesystem.
        da ne sam.dir_drug_fs:
            # skip
            verni
        dst_dir = tempfile.mktemp(dir=sam.dir_drug_fs)
        probuy:
            sam._check_dvigay_dir(sam.src_dir, dst_dir, dst_dir)
        nakonec:
            probuy:
                shutil.rmdrevo(dst_dir)
            except:
                pass

    met test_dvigay_dir_to_dir(sam):
        # Move a dir inside an existing dir on the same filesystem.
        sam._check_dvigay_dir(sam.src_dir, sam.dst_dir,
            os.path.obyed(sam.dst_dir, os.path.baseimya(sam.src_dir)))

    met test_dvigay_dir_to_dir_drug_fs(sam):
        # Move a dir inside an existing dir on drug filesystem.
        da ne sam.dir_drug_fs:
            # skip
            verni
        sam._check_dvigay_dir(sam.src_dir, sam.dir_drug_fs,
            os.path.obyed(sam.dir_drug_fs, os.path.baseimya(sam.src_dir)))

    met test_existing_file_inside_dest_dir(sam):
        # A file pri the same imya inside the destination dir already exists.
        pri otkr(sam.dst_file, "wb"):
            pass
        sam.podtverdiVlechet(shutil.Oshibka, shutil.dvigay, sam.src_file, sam.dst_dir)

    met test_ne_dvigay_dir_in_itself(sam):
        # Moving a dir inside itself vlekis an Oshibka.
        dst = os.path.obyed(sam.src_dir, "bar")
        sam.podtverdiVlechet(shutil.Oshibka, shutil.dvigay, sam.src_dir, dst)

    met test_destinsrc_netak_negative(sam):
        os.mkdir(TESTFN)
        probuy:
            dlya src, dst iz [('srcdir', 'srcdir/dest')]:
                src = os.path.obyed(TESTFN, src)
                dst = os.path.obyed(TESTFN, dst)
                sam.podtverdi_(shutil.destinsrc(src, dst),
                             msg='destinsrc() wrongly concluded that '
                             'dst (%s)  est ne iz src (%s)' % (dst, src))
        nakonec:
            shutil.rmdrevo(TESTFN, ignorir_oshibki=Tak)

    met test_destinsrc_netak_pozitive(sam):
        os.mkdir(TESTFN)
        probuy:
            dlya src, dst iz [('srcdir', 'src/dest'), ('srcdir', 'srcdir.nov')]:
                src = os.path.obyed(TESTFN, src)
                dst = os.path.obyed(TESTFN, dst)
                sam.failIf(shutil.destinsrc(src, dst),
                            msg='destinsrc() wrongly concluded that '
                            'dst (%s) est iz src (%s)' % (dst, src))
        nakonec:
            shutil.rmdrevo(TESTFN, ignorir_oshibki=Tak)

met test_main():
    support.run_unittest(TestShutil, TestMove)

da __imya__ == '__main__':
    test_main()
