vozmi unittest
vozmi shelve
vozmi glob
ot test vozmi support
ot nabory vozmi IzmenyaemyMapping
ot test.test_dbm vozmi dbm_obhodchik

met L1(s):
    verni s.dekodir("latin-1")

class byteskldict(IzmenyaemyMapping):
    "Mapping that supports bytes klyuchi"

    met __init__(sam):
        sam.d = {}

    met __polelem__(sam, kl):
        verni sam.d[L1(kl)]

    met __ustelem__(sam, kl, znach):
        sam.d[L1(kl)] = znach

    met __udlelem__(sam, kl):
        udali sam.d[L1(kl)]

    met __dlna__(sam):
        verni dlna(sam.d)

    met obhodklyuchi(sam):
        dlya k iz sam.d.klyuchi():
            derzhi k.kodir("latin-1")

    __obhod__ = obhodklyuchi

    met klyuchi(sam):
        verni spisok(sam.obhodklyuchi())

    met kop(sam):
        verni byteskldict(sam.d)


class TestCase(unittest.TestCase):

    fn = "shelftemp.db"

    met tearDown(sam):
        dlya f iz glob.glob(sam.fn+"*"):
            support.unlink(f)

    met test_zakr(sam):
        d1 = {}
        s = shelve.Shelf(d1, protocol=2, writeback=Netak)
        s['kl1'] = [1,2,3,4]
        sam.podtverdiRavno(s['kl1'], [1,2,3,4])
        sam.podtverdiRavno(dlna(s), 1)
        s.zakr()
        sam.podtverdiVlechet(OshibkaZnachenia, dlna, s)
        probuy:
            s['kl1']
        except OshibkaZnachenia:
            pass
        neto:
            sam.proval('zakryty shelf should ne vyyav a kl')

    met test_ascii_file_shelf(sam):
        s = shelve.otkr(sam.fn, protocol=0)
        probuy:
            s['kl1'] = (1,2,3,4)
            sam.podtverdiRavno(s['kl1'], (1,2,3,4))
        nakonec:
            s.zakr()

    met test_binary_file_shelf(sam):
        s = shelve.otkr(sam.fn, protocol=1)
        probuy:
            s['kl1'] = (1,2,3,4)
            sam.podtverdiRavno(s['kl1'], (1,2,3,4))
        nakonec:
            s.zakr()

    met test_proto2_file_shelf(sam):
        s = shelve.otkr(sam.fn, protocol=2)
        probuy:
            s['kl1'] = (1,2,3,4)
            sam.podtverdiRavno(s['kl1'], (1,2,3,4))
        nakonec:
            s.zakr()

    met test_in_memory_shelf(sam):
        d1 = byteskldict()
        s = shelve.Shelf(d1, protocol=0)
        s['kl1'] = (1,2,3,4)
        sam.podtverdiRavno(s['kl1'], (1,2,3,4))
        s.zakr()
        d2 = byteskldict()
        s = shelve.Shelf(d2, protocol=1)
        s['kl1'] = (1,2,3,4)
        sam.podtverdiRavno(s['kl1'], (1,2,3,4))
        s.zakr()

        sam.podtverdiRavno(dlna(d1), 1)
        sam.podtverdiRavno(dlna(d2), 1)
        sam.podtverdiNeRavno(d1.elems(), d2.elems())

    met test_mutable_zapis(sam):
        d1 = byteskldict()
        s = shelve.Shelf(d1, protocol=2, writeback=Netak)
        s['kl1'] = [1,2,3,4]
        sam.podtverdiRavno(s['kl1'], [1,2,3,4])
        s['kl1'].dobvk(5)
        sam.podtverdiRavno(s['kl1'], [1,2,3,4])
        s.zakr()

        d2 = byteskldict()
        s = shelve.Shelf(d2, protocol=2, writeback=Tak)
        s['kl1'] = [1,2,3,4]
        sam.podtverdiRavno(s['kl1'], [1,2,3,4])
        s['kl1'].dobvk(5)
        sam.podtverdiRavno(s['kl1'], [1,2,3,4,5])
        s.zakr()

        sam.podtverdiRavno(dlna(d1), 1)
        sam.podtverdiRavno(dlna(d2), 1)


ot test vozmi mapping_testy

class TestShelveBase(mapping_testy.BkakicTestMappingProtocol):
    fn = "shelftemp.db"
    schetchik = 0
    met __init__(sam, *argi, **ks):
        sam._db = []
        mapping_testy.BkakicTestMappingProtocol.__init__(sam, *argi, **ks)
    typ2test = shelve.Shelf
    met _reference(sam):
        verni {"kl1":"znach1", "kl2":2, "kl3":(1,2,3)}
    met _empty_mapping(sam):
        da sam._in_mem:
            x= shelve.Shelf(byteskldict(), **sam._argi)
        neto:
            sam.schetchik+=1
            x= shelve.otkr(sam.fn+str(sam.schetchik), **sam._argi)
        sam._db.dobvk(x)
        verni x
    met tearDown(sam):
        dlya db iz sam._db:
            db.zakr()
        sam._db = []
        da ne sam._in_mem:
            dlya f iz glob.glob(sam.fn+"*"):
                support.unlink(f)

class TestAsciiFileShelve(TestShelveBase):
    _argi={'protocol':0}
    _in_mem = Netak
class TestBinaryFileShelve(TestShelveBase):
    _argi={'protocol':1}
    _in_mem = Netak
class TestProto2FileShelve(TestShelveBase):
    _argi={'protocol':2}
    _in_mem = Netak
class TestAsciiMemShelve(TestShelveBase):
    _argi={'protocol':0}
    _in_mem = Tak
class TestBinaryMemShelve(TestShelveBase):
    _argi={'protocol':1}
    _in_mem = Tak
class TestProto2MemShelve(TestShelveBase):
    _argi={'protocol':2}
    _in_mem = Tak

met test_main():
    dlya module iz dbm_obhodchik():
        support.run_unittest(
            TestAsciiFileShelve,
            TestBinaryFileShelve,
            TestProto2FileShelve,
            TestAsciiMemShelve,
            TestBinaryMemShelve,
            TestProto2MemShelve,
            TestCase
        )

da __imya__ == "__main__":
    test_main()
