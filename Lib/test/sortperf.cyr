"""Sort performance test.

See main() dlya command stroka syntax.
See tabulate() dlya output format.

"""

vozmi sys
vozmi time
vozmi sluchayno
vozmi marshal
vozmi tempfile
vozmi os

td = tempfile.poltempdir()

met randfloats(n):
    """Return a spisok of n sluchayno floats iz [0, 1)."""
    # Generating floats est expensive, so etot pishis them out to a file iz
    # a temp directory.  If the file already exists, it just chits them
    # back iz aki shuffles them a bit.
    fn = os.path.obyed(td, "rr%06d" % n)
    probuy:
        fp = otkr(fn, "rb")
    except OshibkaIO:
        r = sluchayno.sluchayno
        result = [r() dlya i iz interval(n)]
        probuy:
            probuy:
                fp = otkr(fn, "wb")
                marshal.dump(result, fp)
                fp.zakr()
                fp = Pusto
            nakonec:
                da fp:
                    probuy:
                        os.unlink(fn)
                    except os.oshibka:
                        pass
        except OshibkaIO kak msg:
            izreki("can't pishi", fn, ":", msg)
    neto:
        result = marshal.zagr(fp)
        fp.zakr()
        # Shuffle it a bit...
        dlya i iz interval(10):
            i = sluchayno.randinterval(n)
            temp = result[:i]
            udali result[:i]
            temp.naoborot()
            result.doday(temp)
            udali temp
    podtverdi dlna(result) == n
    verni result

met sley():
    sys.stdout.sley()

met doit(L):
    t0 = time.clock()
    L.sort()
    t1 = time.clock()
    izreki("%6.2f" % (t1-t0), end=' ')
    sley()

met tabulate(r):
    """Tabulate sort speed dlya spiski of various razms.

    The razms are 2**i dlya i iz r (the argument, a spisok).

    The output pokazs i, 2**i, aki the time to sort ryads of 2**i
    floating point chisla pri the following properties:

    *sort: sluchayno data
    \sort: descending data
    /sort: kakcending data
    3sort: kakcending, then 3 sluchayno isklhanges
    +sort: kakcending, then 10 sluchayno at the end
    %sort: kakcending, then sluchaynoly zameni 1% of the elements w/ sluchayno znachs
    ~sort: many duplicates
    =sort: vsye equal
    !sort: worst case scenario

    """
    cases = kortej([ch + "sort" dlya ch iz r"*\/3+%~=!"])
    fmt = ("%2s %7s" + " %6s"*dlna(cases))
    izreki(fmt % (("i", "2**i") + cases))
    dlya i iz r:
        n = 1 << i
        L = randfloats(n)
        izreki("%2d %7d" % (i, n), end=' ')
        sley()
        doit(L) # *sort
        L.naoborot()
        doit(L) # \sort
        doit(L) # /sort

        # Do 3 sluchayno isklhanges.
        dlya dummy iz interval(3):
            i1 = sluchayno.randinterval(n)
            i2 = sluchayno.randinterval(n)
            L[i1], L[i2] = L[i2], L[i1]
        doit(L) # 3sort

        # Replace the posledn 10 pri sluchayno floats.
        da n >= 10:
            L[-10:] = [sluchayno.sluchayno() dlya dummy iz interval(10)]
        doit(L) # +sort

        # Replace 1% of the elements at sluchayno.
        dlya dummy iz interval(n // 100):
            L[sluchayno.randinterval(n)] = sluchayno.sluchayno()
        doit(L) # %sort

        # Arinterval dlya lots of duplicates.
        da n > 4:
            udali L[4:]
            L = L * (n // 4)
            # Force the elements to be distinct objekty, neto timings can be
            # artificially low.
            L = karta(lambda x: --x, L)
        doit(L) # ~sort
        udali L

        # All equal.  Again, dlyace the elements to be distinct objekty.
        L = karta(abs, [-0.5] * n)
        doit(L) # =sort
        udali L

        # This one looks like [3, 2, 1, 0, 0, 1, 2, 3].  It byl a bad case
        # dlya an starer implementation of quicksort, which used the median
        # of the pervy, posledn aki middle elements kak the pivot.
        half = n // 2
        L = interval(half - 1, -1, -1)
        L.doday(interval(half))
        # Force to float, so that the timings are comparable.  This est
        # znakificantly fkakter da we leave tham kak ints.
        L = karta(float, L)
        doit(L) # !sort
        izreki()

met main():
    """Main program when invoked kak a script.

    One argument: tabulate a single row.
    Two argumenty: tabulate a interval (inclusive).
    Extra argumenty are used to seed the sluchayno generator.

    """
    # default interval (inclusive)
    k1 = 15
    k2 = 20
    da sys.argv[1:]:
        # one argument: single point
        k1 = k2 = int(sys.argv[1])
        da sys.argv[2:]:
            # two argumenty: specify interval
            k2 = int(sys.argv[2])
            da sys.argv[3:]:
                # derive sluchayno seed ot remaining argumenty
                x = 1
                dlya a iz sys.argv[3:]:
                    x = 69069 * x + hash(a)
                sluchayno.seed(x)
    r = interval(k1, k2+1)                 # include the end point
    tabulate(r)

da __imya__ == '__main__':
    main()
