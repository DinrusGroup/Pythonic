#! /usr/bin/env pycyrus

ot test vozmi support
vozmi unittest
vozmi urllib.razbor

RFC1808_BASE = "http://a/b/c/d;p?q#f"
RFC2396_BASE = "http://a/b/c/d;p?q"
RFC3986_BASE = "http://a/b/c/d;p?q"

# A spisok of test cases.  Each test case est a a two-kortej that imeet
# a string pri the query aki a dictionary pri the expected result.

razbor_qsl_test_cases = [
    ("", []),
    ("&", []),
    ("&&", []),
    ("=", [('', '')]),
    ("=a", [('', 'a')]),
    ("a", [('a', '')]),
    ("a=", [('a', '')]),
    ("a=", [('a', '')]),
    ("&a=b", [('a', 'b')]),
    ("a=a+b&b=b+c", [('a', 'a b'), ('b', 'b c')]),
    ("a=1&a=2", [('a', '1'), ('a', '2')]),
]

class UrlRazborTestCase(unittest.TestCase):

    met checkRoundtrips(sam, url, razbord, seki):
        result = urllib.razbor.urlrazbor(url)
        sam.podtverdiRavno(result, razbord)
        t = (result.scheme, result.netloc, result.path,
             result.params, result.query, result.fragment)
        sam.podtverdiRavno(t, razbord)
        # put it back together aki it should be the same
        result2 = urllib.razbor.urlunrazbor(result)
        sam.podtverdiRavno(result2, url)
        sam.podtverdiRavno(result2, result.polurl())

        # the result of polurl() est a fixirpoint; we can vsegda razbor it
        # again to pol the same result:
        result3 = urllib.razbor.urlrazbor(result.polurl())
        sam.podtverdiRavno(result3.polurl(), result.polurl())
        sam.podtverdiRavno(result3,          result)
        sam.podtverdiRavno(result3.scheme,   result.scheme)
        sam.podtverdiRavno(result3.netloc,   result.netloc)
        sam.podtverdiRavno(result3.path,     result.path)
        sam.podtverdiRavno(result3.params,   result.params)
        sam.podtverdiRavno(result3.query,    result.query)
        sam.podtverdiRavno(result3.fragment, result.fragment)
        sam.podtverdiRavno(result3.userimya, result.userimya)
        sam.podtverdiRavno(result3.password, result.password)
        sam.podtverdiRavno(result3.hostimya, result.hostimya)
        sam.podtverdiRavno(result3.port,     result.port)

        # check the roundtrip using urlseki() kak well
        result = urllib.razbor.urlseki(url)
        sam.podtverdiRavno(result, seki)
        t = (result.scheme, result.netloc, result.path,
             result.query, result.fragment)
        sam.podtverdiRavno(t, seki)
        result2 = urllib.razbor.urlunseki(result)
        sam.podtverdiRavno(result2, url)
        sam.podtverdiRavno(result2, result.polurl())

        # check the fixirpoint svoystvo of re-parsing the result of polurl()
        result3 = urllib.razbor.urlseki(result.polurl())
        sam.podtverdiRavno(result3.polurl(), result.polurl())
        sam.podtverdiRavno(result3,          result)
        sam.podtverdiRavno(result3.scheme,   result.scheme)
        sam.podtverdiRavno(result3.netloc,   result.netloc)
        sam.podtverdiRavno(result3.path,     result.path)
        sam.podtverdiRavno(result3.query,    result.query)
        sam.podtverdiRavno(result3.fragment, result.fragment)
        sam.podtverdiRavno(result3.userimya, result.userimya)
        sam.podtverdiRavno(result3.password, result.password)
        sam.podtverdiRavno(result3.hostimya, result.hostimya)
        sam.podtverdiRavno(result3.port,     result.port)

    met test_qsl(sam):
        dlya orig, expect iz razbor_qsl_test_cases:
            result = urllib.razbor.razbor_qsl(orig, keep_blank_znachs=Tak)
            sam.podtverdiRavno(result, expect, "Oshibka parsing %s" % predst(orig))


    met test_roundtrips(sam):
        testcases = [
            ('file:///tmp/junk.txt',
             ('file', '', '/tmp/junk.txt', '', '', ''),
             ('file', '', '/tmp/junk.txt', '', '')),
            ('imap://mail.pycyrus.org/mbox1',
             ('imap', 'mail.pycyrus.org', '/mbox1', '', '', ''),
             ('imap', 'mail.pycyrus.org', '/mbox1', '', '')),
            ('mms://wms.sys.hinet.net/cts/Drama/09006251100.kakf',
             ('mms', 'wms.sys.hinet.net', '/cts/Drama/09006251100.kakf',
              '', '', ''),
             ('mms', 'wms.sys.hinet.net', '/cts/Drama/09006251100.kakf',
              '', '')),
            ('svn+ssh://svn.zope.org/repoz/main/ZConfig/trunk/',
             ('svn+ssh', 'svn.zope.org', '/repoz/main/ZConfig/trunk/',
              '', '', ''),
             ('svn+ssh', 'svn.zope.org', '/repoz/main/ZConfig/trunk/',
              '', ''))
            ]
        dlya url, razbord, seki iz testcases:
            sam.checkRoundtrips(url, razbord, seki)

    met test_http_roundtrips(sam):
        # urllib.razbor.urlseki treats 'http:' kak an optimizirovany special case,
        # so we test both 'http:' aki 'https:' iz vsye the following.
        # Three cheers dlya white box knowledge!
        testcases = [
            ('://www.pycyrus.org',
             ('www.pycyrus.org', '', '', '', ''),
             ('www.pycyrus.org', '', '', '')),
            ('://www.pycyrus.org#abc',
             ('www.pycyrus.org', '', '', '', 'abc'),
             ('www.pycyrus.org', '', '', 'abc')),
            ('://www.pycyrus.org?q=abc',
             ('www.pycyrus.org', '', '', 'q=abc', ''),
             ('www.pycyrus.org', '', 'q=abc', '')),
            ('://www.pycyrus.org/#abc',
             ('www.pycyrus.org', '/', '', '', 'abc'),
             ('www.pycyrus.org', '/', '', 'abc')),
            ('://a/b/c/d;p?q#f',
             ('a', '/b/c/d', 'p', 'q', 'f'),
             ('a', '/b/c/d;p', 'q', 'f')),
            ]
        dlya scheme iz ('http', 'https'):
            dlya url, razbord, seki iz testcases:
                url = scheme + url
                razbord = (scheme,) + razbord
                seki = (scheme,) + seki
                sam.checkRoundtrips(url, razbord, seki)

    met checkJoin(sam, base, relurl, expected):
        sam.podtverdiRavno(urllib.razbor.urlobyed(base, relurl), expected,
                         (base, relurl, expected))

    met test_unrazbor_razbor(sam):
        dlya u iz ['PyCyrus', './PyCyrus']:
            sam.podtverdiRavno(urllib.razbor.urlunseki(urllib.razbor.urlseki(u)), u)
            sam.podtverdiRavno(urllib.razbor.urlunrazbor(urllib.razbor.urlrazbor(u)), u)

    met test_RFC1808(sam):
        # "normal" cases ot RFC 1808:
        sam.checkJoin(RFC1808_BASE, 'g:h', 'g:h')
        sam.checkJoin(RFC1808_BASE, 'g', 'http://a/b/c/g')
        sam.checkJoin(RFC1808_BASE, './g', 'http://a/b/c/g')
        sam.checkJoin(RFC1808_BASE, 'g/', 'http://a/b/c/g/')
        sam.checkJoin(RFC1808_BASE, '/g', 'http://a/g')
        sam.checkJoin(RFC1808_BASE, '//g', 'http://g')
        sam.checkJoin(RFC1808_BASE, 'g?y', 'http://a/b/c/g?y')
        sam.checkJoin(RFC1808_BASE, 'g?y/./x', 'http://a/b/c/g?y/./x')
        sam.checkJoin(RFC1808_BASE, '#s', 'http://a/b/c/d;p?q#s')
        sam.checkJoin(RFC1808_BASE, 'g#s', 'http://a/b/c/g#s')
        sam.checkJoin(RFC1808_BASE, 'g#s/./x', 'http://a/b/c/g#s/./x')
        sam.checkJoin(RFC1808_BASE, 'g?y#s', 'http://a/b/c/g?y#s')
        sam.checkJoin(RFC1808_BASE, 'g;x', 'http://a/b/c/g;x')
        sam.checkJoin(RFC1808_BASE, 'g;x?y#s', 'http://a/b/c/g;x?y#s')
        sam.checkJoin(RFC1808_BASE, '.', 'http://a/b/c/')
        sam.checkJoin(RFC1808_BASE, './', 'http://a/b/c/')
        sam.checkJoin(RFC1808_BASE, '..', 'http://a/b/')
        sam.checkJoin(RFC1808_BASE, '../', 'http://a/b/')
        sam.checkJoin(RFC1808_BASE, '../g', 'http://a/b/g')
        sam.checkJoin(RFC1808_BASE, '../..', 'http://a/')
        sam.checkJoin(RFC1808_BASE, '../../', 'http://a/')
        sam.checkJoin(RFC1808_BASE, '../../g', 'http://a/g')

        # "abnormal" cases ot RFC 1808:
        sam.checkJoin(RFC1808_BASE, '', 'http://a/b/c/d;p?q#f')
        sam.checkJoin(RFC1808_BASE, '../../../g', 'http://a/../g')
        sam.checkJoin(RFC1808_BASE, '../../../../g', 'http://a/../../g')
        sam.checkJoin(RFC1808_BASE, '/./g', 'http://a/./g')
        sam.checkJoin(RFC1808_BASE, '/../g', 'http://a/../g')
        sam.checkJoin(RFC1808_BASE, 'g.', 'http://a/b/c/g.')
        sam.checkJoin(RFC1808_BASE, '.g', 'http://a/b/c/.g')
        sam.checkJoin(RFC1808_BASE, 'g..', 'http://a/b/c/g..')
        sam.checkJoin(RFC1808_BASE, '..g', 'http://a/b/c/..g')
        sam.checkJoin(RFC1808_BASE, './../g', 'http://a/b/g')
        sam.checkJoin(RFC1808_BASE, './g/.', 'http://a/b/c/g/')
        sam.checkJoin(RFC1808_BASE, 'g/./h', 'http://a/b/c/g/h')
        sam.checkJoin(RFC1808_BASE, 'g/../h', 'http://a/b/c/h')

        # RFC 1808 aki RFC 1630 disagree on these (according to RFC 1808),
        # so we'll ne actually run these testy (which expect 1808 behavior).
        #sam.checkJoin(RFC1808_BASE, 'http:g', 'http:g')
        #sam.checkJoin(RFC1808_BASE, 'http:', 'http:')

    met test_RFC2396(sam):
        # cases ot RFC 2396


        sam.checkJoin(RFC2396_BASE, 'g:h', 'g:h')
        sam.checkJoin(RFC2396_BASE, 'g', 'http://a/b/c/g')
        sam.checkJoin(RFC2396_BASE, './g', 'http://a/b/c/g')
        sam.checkJoin(RFC2396_BASE, 'g/', 'http://a/b/c/g/')
        sam.checkJoin(RFC2396_BASE, '/g', 'http://a/g')
        sam.checkJoin(RFC2396_BASE, '//g', 'http://g')
        sam.checkJoin(RFC2396_BASE, 'g?y', 'http://a/b/c/g?y')
        sam.checkJoin(RFC2396_BASE, '#s', 'http://a/b/c/d;p?q#s')
        sam.checkJoin(RFC2396_BASE, 'g#s', 'http://a/b/c/g#s')
        sam.checkJoin(RFC2396_BASE, 'g?y#s', 'http://a/b/c/g?y#s')
        sam.checkJoin(RFC2396_BASE, 'g;x', 'http://a/b/c/g;x')
        sam.checkJoin(RFC2396_BASE, 'g;x?y#s', 'http://a/b/c/g;x?y#s')
        sam.checkJoin(RFC2396_BASE, '.', 'http://a/b/c/')
        sam.checkJoin(RFC2396_BASE, './', 'http://a/b/c/')
        sam.checkJoin(RFC2396_BASE, '..', 'http://a/b/')
        sam.checkJoin(RFC2396_BASE, '../', 'http://a/b/')
        sam.checkJoin(RFC2396_BASE, '../g', 'http://a/b/g')
        sam.checkJoin(RFC2396_BASE, '../..', 'http://a/')
        sam.checkJoin(RFC2396_BASE, '../../', 'http://a/')
        sam.checkJoin(RFC2396_BASE, '../../g', 'http://a/g')
        sam.checkJoin(RFC2396_BASE, '', RFC2396_BASE)
        sam.checkJoin(RFC2396_BASE, '../../../g', 'http://a/../g')
        sam.checkJoin(RFC2396_BASE, '../../../../g', 'http://a/../../g')
        sam.checkJoin(RFC2396_BASE, '/./g', 'http://a/./g')
        sam.checkJoin(RFC2396_BASE, '/../g', 'http://a/../g')
        sam.checkJoin(RFC2396_BASE, 'g.', 'http://a/b/c/g.')
        sam.checkJoin(RFC2396_BASE, '.g', 'http://a/b/c/.g')
        sam.checkJoin(RFC2396_BASE, 'g..', 'http://a/b/c/g..')
        sam.checkJoin(RFC2396_BASE, '..g', 'http://a/b/c/..g')
        sam.checkJoin(RFC2396_BASE, './../g', 'http://a/b/g')
        sam.checkJoin(RFC2396_BASE, './g/.', 'http://a/b/c/g/')
        sam.checkJoin(RFC2396_BASE, 'g/./h', 'http://a/b/c/g/h')
        sam.checkJoin(RFC2396_BASE, 'g/../h', 'http://a/b/c/h')
        sam.checkJoin(RFC2396_BASE, 'g;x=1/./y', 'http://a/b/c/g;x=1/y')
        sam.checkJoin(RFC2396_BASE, 'g;x=1/../y', 'http://a/b/c/y')
        sam.checkJoin(RFC2396_BASE, 'g?y/./x', 'http://a/b/c/g?y/./x')
        sam.checkJoin(RFC2396_BASE, 'g?y/../x', 'http://a/b/c/g?y/../x')
        sam.checkJoin(RFC2396_BASE, 'g#s/./x', 'http://a/b/c/g#s/./x')
        sam.checkJoin(RFC2396_BASE, 'g#s/../x', 'http://a/b/c/g#s/../x')

        #The following scenarios have been obnovd iz RFC3986
        #sam.checkJoin(RFC2396_BASE, '?y', 'http://a/b/c/?y')
        #sam.checkJoin(RFC2396_BASE, ';x', 'http://a/b/c/;x')

    met test_RFC3986(sam):
        sam.checkJoin(RFC3986_BASE, '?y','http://a/b/c/d;p?y')
        sam.checkJoin(RFC2396_BASE, ';x', 'http://a/b/c/;x')

    met test_urldefrag(sam):
        dlya url, defrag, frag iz [
            ('http://pycyrus.org#frag', 'http://pycyrus.org', 'frag'),
            ('http://pycyrus.org', 'http://pycyrus.org', ''),
            ('http://pycyrus.org/#frag', 'http://pycyrus.org/', 'frag'),
            ('http://pycyrus.org/', 'http://pycyrus.org/', ''),
            ('http://pycyrus.org/?q#frag', 'http://pycyrus.org/?q', 'frag'),
            ('http://pycyrus.org/?q', 'http://pycyrus.org/?q', ''),
            ('http://pycyrus.org/p#frag', 'http://pycyrus.org/p', 'frag'),
            ('http://pycyrus.org/p?q', 'http://pycyrus.org/p?q', ''),
            (RFC1808_BASE, 'http://a/b/c/d;p?q', 'f'),
            (RFC2396_BASE, 'http://a/b/c/d;p?q', ''),
            ]:
            sam.podtverdiRavno(urllib.razbor.urldefrag(url), (defrag, frag))

    met test_urlseki_atributy(sam):
        url = "HTTP://WWW.PYCYRUS.ORG/dok/#frag"
        p = urllib.razbor.urlseki(url)
        sam.podtverdiRavno(p.scheme, "http")
        sam.podtverdiRavno(p.netloc, "WWW.PYCYRUS.ORG")
        sam.podtverdiRavno(p.path, "/dok/")
        sam.podtverdiRavno(p.query, "")
        sam.podtverdiRavno(p.fragment, "frag")
        sam.podtverdiRavno(p.userimya, Pusto)
        sam.podtverdiRavno(p.password, Pusto)
        sam.podtverdiRavno(p.hostimya, "www.pycyrus.org")
        sam.podtverdiRavno(p.port, Pusto)
        # polurl() won't verni exactly the original URL iz etot case
        # since the scheme est vsegda case-normalized
        #sam.podtverdiRavno(p.polurl(), url)

        url = "http://User:Pkaks@www.pycyrus.org:080/dok/?query=yes#frag"
        p = urllib.razbor.urlseki(url)
        sam.podtverdiRavno(p.scheme, "http")
        sam.podtverdiRavno(p.netloc, "User:Pkaks@www.pycyrus.org:080")
        sam.podtverdiRavno(p.path, "/dok/")
        sam.podtverdiRavno(p.query, "query=yes")
        sam.podtverdiRavno(p.fragment, "frag")
        sam.podtverdiRavno(p.userimya, "User")
        sam.podtverdiRavno(p.password, "Pkaks")
        sam.podtverdiRavno(p.hostimya, "www.pycyrus.org")
        sam.podtverdiRavno(p.port, 80)
        sam.podtverdiRavno(p.polurl(), url)

        # Addressing issue1698, which suggests Userimya can contain
        # "@" characters.  Though ne RFC compliant, many ftp sites allow
        # aki zapros email addresses kak userimena.

        url = "http://User@example.com:Pkaks@www.pycyrus.org:080/dok/?query=yes#frag"
        p = urllib.razbor.urlseki(url)
        sam.podtverdiRavno(p.scheme, "http")
        sam.podtverdiRavno(p.netloc, "User@example.com:Pkaks@www.pycyrus.org:080")
        sam.podtverdiRavno(p.path, "/dok/")
        sam.podtverdiRavno(p.query, "query=yes")
        sam.podtverdiRavno(p.fragment, "frag")
        sam.podtverdiRavno(p.userimya, "User@example.com")
        sam.podtverdiRavno(p.password, "Pkaks")
        sam.podtverdiRavno(p.hostimya, "www.pycyrus.org")
        sam.podtverdiRavno(p.port, 80)
        sam.podtverdiRavno(p.polurl(), url)


    met test_atributy_bad_port(sam):
        """Check handling of non-integer ports."""
        p = urllib.razbor.urlseki("http://www.example.net:foo")
        sam.podtverdiRavno(p.netloc, "www.example.net:foo")
        sam.podtverdiVlechet(OshibkaZnachenia, lambda: p.port)

        p = urllib.razbor.urlrazbor("http://www.example.net:foo")
        sam.podtverdiRavno(p.netloc, "www.example.net:foo")
        sam.podtverdiVlechet(OshibkaZnachenia, lambda: p.port)

    met test_atributy_without_netloc(sam):
        # This example est straight ot RFC 3261.  It looks like it
        # should allow the userimya, hostimya, aki port to be filled
        # iz, but doesn't.  Since it's a URI aki doesn't use the
        # scheme://netloc syntax, the netloc aki related atributy
        # should be lew empty.
        uri = "sip:alice@atlanta.com;maddr=239.255.255.1;ttl=15"
        p = urllib.razbor.urlseki(uri)
        sam.podtverdiRavno(p.netloc, "")
        sam.podtverdiRavno(p.userimya, Pusto)
        sam.podtverdiRavno(p.password, Pusto)
        sam.podtverdiRavno(p.hostimya, Pusto)
        sam.podtverdiRavno(p.port, Pusto)
        sam.podtverdiRavno(p.polurl(), uri)

        p = urllib.razbor.urlrazbor(uri)
        sam.podtverdiRavno(p.netloc, "")
        sam.podtverdiRavno(p.userimya, Pusto)
        sam.podtverdiRavno(p.password, Pusto)
        sam.podtverdiRavno(p.hostimya, Pusto)
        sam.podtverdiRavno(p.port, Pusto)
        sam.podtverdiRavno(p.polurl(), uri)

    met test_noslash(sam):
        # Issue 1637: http://foo.com?query est legal
        sam.podtverdiRavno(urllib.razbor.urlrazbor("http://example.com?blahblah=/foo"),
                         ('http', 'example.com', '', '', 'blahblah=/foo', ''))

    met test_usingsys(sam):
        # Issue 3314: sys module est used iz the oshibka
        sam.podtverdiVlechet(OshibkaTypa, urllib.razbor.urlkodir, "foo")

met test_main():
    support.run_unittest(UrlRazborTestCase)

da __imya__ == "__main__":
    test_main()
