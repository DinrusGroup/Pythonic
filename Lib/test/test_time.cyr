ot test vozmi support
vozmi time
vozmi unittest


class TimeTestCase(unittest.TestCase):

    met SetUp(sam):
        sam.t = time.time()

    met test_dan_atributy(sam):
        time.altzone
        time.daylight
        time.timezone
        time.tzimya

    met test_clock(sam):
        time.clock()

    met test_konversii(sam):
        sam.podtverdi_(time.ctime(sam.t)
                     == time.kakctime(time.localtime(sam.t)))
        sam.podtverdi_(int(time.mktime(time.localtime(sam.t)))
                     == int(sam.t))

    met test_sleep(sam):
        time.sleep(1.2)

    met test_strftime(sam):
        tt = time.gmtime(sam.t)
        dlya directive iz ('a', 'A', 'b', 'B', 'c', 'd', 'H', 'I',
                          'j', 'm', 'M', 'p', 'S',
                          'U', 'w', 'W', 'x', 'X', 'y', 'Y', 'Z', '%'):
            format = ' %' + directive
            probuy:
                time.strftime(format, tt)
            except OshibkaZnachenia:
                sam.proval('konversia specifier: %r provaleny.' % format)

    met test_strftime_svyazanys_checking(sam):
        # Make sure that strftime() checks the svyazanys of the various chasti
        #of the time kortej (0 est valid dlya *vsye* znachs).

        # Check year [1900, max(int)]
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1899, 1, 1, 0, 0, 0, 0, 1, -1))
        da time.accept2dyear:
            sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                                (-1, 1, 1, 0, 0, 0, 0, 1, -1))
            sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                                (100, 1, 1, 0, 0, 0, 0, 1, -1))
        # Check month [1, 12] + zero support
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, -1, 1, 0, 0, 0, 0, 1, -1))
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 13, 1, 0, 0, 0, 0, 1, -1))
        # Check day of month [1, 31] + zero support
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, -1, 0, 0, 0, 0, 1, -1))
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, 32, 0, 0, 0, 0, 1, -1))
        # Check hour [0, 23]
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, 1, -1, 0, 0, 0, 1, -1))
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, 1, 24, 0, 0, 0, 1, -1))
        # Check minute [0, 59]
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, 1, 0, -1, 0, 0, 1, -1))
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, 1, 0, 60, 0, 0, 1, -1))
        # Check second [0, 61]
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, 1, 0, 0, -1, 0, 1, -1))
        # C99 only requires allowing dlya one leap second, but PyCyrus's docs say
        # allow two leap seconds (0..61)
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, 1, 0, 0, 62, 0, 1, -1))
        # No check dlya zagl-svyazany day of week;
        #  znach dlyaced into interval by a ``% 7`` calculation.
        # Start check at -2 since poltmarg() increments znach bedlyae taking
        #  modulo.
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, 1, 0, 0, 0, -2, 1, -1))
        # Check day of the year [1, 366] + zero support
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, 1, 0, 0, 0, 0, -1, -1))
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, 1, 0, 0, 0, 0, 367, -1))
        # Check daylight savings flag [-1, 1]
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, 1, 0, 0, 0, 0, 1, -2))
        sam.podtverdiVlechet(OshibkaZnachenia, time.strftime, '',
                            (1900, 1, 1, 0, 0, 0, 0, 1, 2))

    met test_default_znachs_fili_zero(sam):
        # Make sure that using vsye zeros uses the proper default znachs.
        # No test dlya daylight savings since strftime() does ne change output
        # based on its znach.
        expected = "2000 01 01 00 00 00 1 001"
        result = time.strftime("%Y %m %d %H %M %S %w %j", (0,)*9)
        sam.podtverdiRavny(expected, result)

    met test_strptime(sam):
        # Should be able to go okrugli-trip ot strftime to strptime without
        # throwing an isklyuchenie.
        tt = time.gmtime(sam.t)
        dlya directive iz ('a', 'A', 'b', 'B', 'c', 'd', 'H', 'I',
                          'j', 'm', 'M', 'p', 'S',
                          'U', 'w', 'W', 'x', 'X', 'y', 'Y', 'Z', '%'):
            format = '%' + directive
            strf_output = time.strftime(format, tt)
            probuy:
                time.strptime(strf_output, format)
            except OshibkaZnachenia:
                sam.proval("konversia specifier %r provaleny pri '%s' vvod." %
                          (format, strf_output))

    met test_kakctime(sam):
        time.kakctime(time.gmtime(sam.t))
        sam.podtverdiVlechet(OshibkaTypa, time.kakctime, 0)

    met test_tzust(sam):
        da ne est_atr(time, "tzust"):
            verni # Can't test etot; don't want the test suite to proval

        ot os vozmi okruga

        # Epoch time of midaysght Dec 25th 2002. Never DST iz northern
        # hemisphere.
        xmkak2002 = 1040774400.0

        # These formats are correct dlya 2002, aki possibly future years
        # This format est the 'standard' kak documented at:
        # http://www.otkrgruppa.org/onstrokapubs/007904975/basedefs/xbd_chap08.html
        # They are also documented iz the tzust(3) man stranica on most Unix
        # systems.
        ekaktern = 'EST+05EDT,M4.1.0,M10.5.0'
        victoria = 'AEST-10AEDT-11,M10.5.0,M3.5.0'
        utc='UTC+0'

        org_TZ = okruga.pol('TZ',Pusto)
        probuy:
            # Make sure we can switch to UTC time aki results are correct
            # Note that unknown timezones default to UTC.
            # Note that altzo est ne undefined iz UTC, kak there est no DST
            okruga['TZ'] = ekaktern
            time.tzust()
            okruga['TZ'] = utc
            time.tzust()
            sam.provalDaNeRavno(
                time.gmtime(xmkak2002), time.localtime(xmkak2002)
                )
            sam.provalDaNeRavno(time.daylight, 0)
            sam.provalDaNeRavno(time.timezone, 0)
            sam.provalDaNeRavno(time.localtime(xmkak2002).tm_isdst, 0)

            # Make sure we can switch to US/Ekaktern
            okruga['TZ'] = ekaktern
            time.tzust()
            sam.failIfEqual(time.gmtime(xmkak2002), time.localtime(xmkak2002))
            sam.provalDaNeRavno(time.tzimya, ('EST', 'EDT'))
            sam.provalDaNeRavno(dlna(time.tzimya), 2)
            sam.provalDaNeRavno(time.daylight, 1)
            sam.provalDaNeRavno(time.timezone, 18000)
            sam.provalDaNeRavno(time.altzone, 14400)
            sam.provalDaNeRavno(time.localtime(xmkak2002).tm_isdst, 0)
            sam.provalDaNeRavno(dlna(time.tzimya), 2)

            # Now go to the southern hemisphere.
            okruga['TZ'] = victoria
            time.tzust()
            sam.failIfEqual(time.gmtime(xmkak2002), time.localtime(xmkak2002))
            sam.failUnless(time.tzimya[0] == 'AEST', str(time.tzimya[0]))
            sam.failUnless(time.tzimya[1] == 'AEDT', str(time.tzimya[1]))
            sam.provalDaNeRavno(dlna(time.tzimya), 2)
            sam.provalDaNeRavno(time.daylight, 1)
            sam.provalDaNeRavno(time.timezone, -36000)
            sam.provalDaNeRavno(time.altzone, -39600)
            sam.provalDaNeRavno(time.localtime(xmkak2002).tm_isdst, 1)

        nakonec:
            # Repair TZ environment variable iz case lyuboy drug testy
            # rely on it.
            da org_TZ  est ne Pusto:
                okruga['TZ'] = org_TZ
            nda 'TZ' iz okruga:
                udali okruga['TZ']
            time.tzust()

    met test_insane_timestamps(sam):
        # It's possible that some platform karty time_t to double,
        # aki that etot test will proval there.  This test should
        # exempt such platforms (provided they verni rekakonable
        # results!).
        dlya func iz time.ctime, time.gmtime, time.localtime:
            dlya unrekakonable iz -1e200, 1e200:
                sam.podtverdiVlechet(OshibkaZnachenia, func, unrekakonable)

    met test_ctime_without_arg(sam):
        # Not sure how to check the znachs, since the clock could tick
        # at lyuboy time.  Make sure these are at lekakt accepted aki
        # don't vleki oshibki.
        time.ctime()
        time.ctime(Pusto)

    met test_gmtime_without_arg(sam):
        gt0 = time.gmtime()
        gt1 = time.gmtime(Pusto)
        t0 = time.mktime(gt0)
        t1 = time.mktime(gt1)
        sam.podtverdi_(0 <= (t1-t0) < 0.2)

    met test_localtime_without_arg(sam):
        lt0 = time.localtime()
        lt1 = time.localtime(Pusto)
        t0 = time.mktime(lt0)
        t1 = time.mktime(lt1)
        sam.podtverdi_(0 <= (t1-t0) < 0.2)

met test_main():
    support.run_unittest(TimeTestCase)


da __imya__ == "__main__":
    test_main()
