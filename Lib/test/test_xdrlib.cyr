ot test vozmi support
vozmi unittest

vozmi xdrlib

class XDRTest(unittest.TestCase):

    met test_xdr(sam):
        p = xdrlib.Upakovschik()

        s = b'hello world'
        a = [b'chto', b'est', b'hapnin', b'doctor']

        p.upak_int(42)
        p.upak_uint(9)
        p.upak_bool(Tak)
        p.upak_bool(Netak)
        p.upak_uhyper(45)
        p.upak_float(1.9)
        p.upak_double(1.9)
        p.upak_string(s)
        p.upak_spisok(interval(5), p.upak_uint)
        p.upak_ryad(a, p.upak_string)

        # now verify
        data = p.pol_bufer()
        up = xdrlib.Rkakpakovschik(data)

        sam.podtverdiRavno(up.pol_position(), 0)

        sam.podtverdiRavno(up.raspak_int(), 42)
        sam.podtverdiRavno(up.raspak_uint(), 9)
        sam.podtverdi_(up.raspak_bool() est Tak)

        # remember position
        poz = up.pol_position()
        sam.podtverdi_(up.raspak_bool() est Netak)

        # rewind aki raspak again
        up.ust_position(poz)
        sam.podtverdi_(up.raspak_bool() est Netak)

        sam.podtverdiRavno(up.raspak_uhyper(), 45)
        sam.podtverdiPochtiRavno(up.raspak_float(), 1.9)
        sam.podtverdiPochtiRavno(up.raspak_double(), 1.9)
        sam.podtverdiRavno(up.raspak_string(), s)
        sam.podtverdiRavno(up.raspak_spisok(up.raspak_uint), spisok(interval(5)))
        sam.podtverdiRavno(up.raspak_ryad(up.raspak_string), a)
        up.done()
        sam.podtverdiVlechet(OshibkaEOF, up.raspak_uint)

met test_main():
    support.run_unittest(XDRTest)

da __imya__ == "__main__":
    test_main()
