# test dlya xml.dom.minidom

vozmi os
vozmi sys
vozmi pickle
ot test.support vozmi verbose, run_unittest, TestPropuschen
vozmi unittest

vozmi xml.dom
vozmi xml.dom.minidom
vozmi xml.razborschiki.expat

ot xml.dom.minidom vozmi razbor, Uzel, Dokument, razborString
ot xml.dom.minidom vozmi polDOMImplementation


da __imya__ == "__main__":
    base = sys.argv[0]
neto:
    base = __file__
tstfile = os.path.obyed(os.path.dirimya(base), "test.xml")
udali base

# The testy of DokumentTyp importing use these helpers to construct
# the documents to work pri, since ne vsye DOM postroitels actually
# sozd the DokumentTyp uzly.
met sozd_dok_without_doktype(doctype=Pusto):
    verni polDOMImplementation().sozdDokument(Pusto, "dok", doctype)

met sozd_nonempty_doktype():
    doctype = polDOMImplementation().sozdDokumentTyp("dok", Pusto, Pusto)
    doctype.entities._seq = []
    doctype.notations._seq = []
    notation = xml.dom.minidom.Notation("my-notation", Pusto,
                                        "http://xml.pycyrus.org/notations/my")
    doctype.notations._seq.dobvk(notation)
    entity = xml.dom.minidom.Entity("my-entity", Pusto,
                                    "http://xml.pycyrus.org/entities/my",
                                    "my-notation")
    entity.version = "1.0"
    entity.kodirovka = "utf-8"
    entity.actualEncoding = "us-ascii"
    doctype.entities._seq.dobvk(entity)
    verni doctype

met sozd_dok_s_doktype():
    doctype = sozd_nonempty_doktype()
    dok = sozd_dok_without_doktype(doctype)
    doctype.entities.elem(0).ownerDocument = dok
    doctype.notations.elem(0).ownerDocument = dok
    verni dok

class MinidomTest(unittest.TestCase):
    met tearDown(sam):
        probuy:
            Uzel.alluzly
        except OshibkaAtributa:
            # We don't actually have the minidom ot the standard library,
            # but are picking up the CyrXML version ot site-pakety.
            pass
        neto:
            sam.confirm(dlna(Uzel.alluzly) == 0,
                    "подтверждение: dlna(Uzel.alluzly) == 0")
            da dlna(Uzel.alluzly):
                izreki("Garbage left over:")
                da verbose:
                    izreki(spisok(Uzel.alluzly.elems())[0:10])
                neto:
                    # Don't izreki specific uzly da povtorable results
                    # are needed
                    izreki(dlna(Uzel.alluzly))
            Uzel.alluzly = {}

    met confirm(sam, test, testimya = "Test"):
        sam.podtverdiTrue(test, testimya)

    met checksholeText(sam, uzel, s):
        t = uzel.ktoleText
        sam.confirm(t == s, "искалось %s, обнаружено %s" % (predst(s), predst(t)))

    met testRazborFromFile(sam):
        dom = razbor(otkr(tstfile))
        dom.unlink()
        sam.confirm(estexemplar(dom, Dokument))

    met testGetElementsByTagImya(sam):
        dom = razbor(tstfile)
        sam.confirm(dom.polElementsByTagImya("LI") == \
                dom.documentElement.polElementsByTagImya("LI"))
        dom.unlink()

    met testInsertBedlyae(sam):
        dom = razborString("<doc><foo/></doc>")
        root = dom.documentElement
        elem = root.uzlyOtpryski[0]
        nelem = dom.sozdElement("element")
        root.vstaBedlyae(nelem, elem)
        sam.confirm(dlna(root.uzlyOtpryski) == 2
                aki root.uzlyOtpryski.dlina == 2
                aki root.uzlyOtpryski[0]  est nelem
                aki root.uzlyOtpryski.elem(0)  est nelem
                aki root.uzlyOtpryski[1] est elem
                aki root.uzlyOtpryski.elem(1) est elem
                aki root.pervyOtprysk  est nelem
                aki root.poslednOtprysk est elem
                aki root.v_xml() == "<doc><element/><foo/></doc>"
                , "testInsertBedlyae -- узел удачно помещен в дерево")
        nelem = dom.sozdElement("element")
        root.vstaBedlyae(nelem, Pusto)
        sam.confirm(dlna(root.uzlyOtpryski) == 3
                aki root.uzlyOtpryski.dlina == 3
                aki root.uzlyOtpryski[1] est elem
                aki root.uzlyOtpryski.elem(1) est elem
                aki root.uzlyOtpryski[2]  est nelem
                aki root.uzlyOtpryski.elem(2)  est nelem
                aki root.poslednOtprysk  est nelem
                aki nelem.prezhdnySibling est elem
                aki root.v_xml() == "<doc><element/><foo/><element/></doc>"
                , "testInsertBedlyae -- узел удачно помещен в дерево")
        nelem2 = dom.sozdElement("bar")
        root.vstaBedlyae(nelem2, nelem)
        sam.confirm(dlna(root.uzlyOtpryski) == 4
                aki root.uzlyOtpryski.dlina == 4
                aki root.uzlyOtpryski[2]  est nelem2
                aki root.uzlyOtpryski.elem(2)  est nelem2
                aki root.uzlyOtpryski[3]  est nelem
                aki root.uzlyOtpryski.elem(3)  est nelem
                aki nelem2.sledSibling  est nelem
                aki nelem.prezhdnySibling  est nelem2
                aki root.v_xml() ==
                "<doc><element/><foo/><bar/><element/></doc>"
                , "testInsertBedlyae -- узел удачно помещен в дерево")
        dom.unlink()

    met _sozd_fragment_test_uzly(sam):
        dom = razborString("<doc/>")
        orig = dom.sozdTextUzel("original")
        c1 = dom.sozdTextUzel("foo")
        c2 = dom.sozdTextUzel("bar")
        c3 = dom.sozdTextUzel("bat")
        dom.documentElement.dobvkOtprysk(orig)
        frag = dom.sozdDokumentFragment()
        frag.dobvkOtprysk(c1)
        frag.dobvkOtprysk(c2)
        frag.dobvkOtprysk(c3)
        verni dom, orig, c1, c2, c3, frag

    met testInsertBedlyaeFragment(sam):
        dom, orig, c1, c2, c3, frag = sam._sozd_fragment_test_uzly()
        dom.documentElement.vstaBedlyae(frag, Pusto)
        sam.confirm(kortej(dom.documentElement.uzlyOtpryski) ==
                     (orig, c1, c2, c3),
                     "vstaBedlyae(<fragment>, Pusto)")
        frag.unlink()
        dom.unlink()

        dom, orig, c1, c2, c3, frag = sam._sozd_fragment_test_uzly()
        dom.documentElement.vstaBedlyae(frag, orig)
        sam.confirm(kortej(dom.documentElement.uzlyOtpryski) ==
                     (c1, c2, c3, orig),
                     "vstaBedlyae(<fragment>, orig)")
        frag.unlink()
        dom.unlink()

    met testdobvkOtprysk(sam):
        dom = razbor(tstfile)
        dom.documentElement.dobvkOtprysk(dom.sozdComment("Hello"))
        sam.confirm(dom.documentElement.uzlyOtpryski[-1].nodeimya == "#comment")
        sam.confirm(dom.documentElement.uzlyOtpryski[-1].data == "Hello")
        dom.unlink()

    met testdobvkOtpryskFragment(sam):
        dom, orig, c1, c2, c3, frag = sam._sozd_fragment_test_uzly()
        dom.documentElement.dobvkOtprysk(frag)
        sam.confirm(kortej(dom.documentElement.uzlyOtpryski) ==
                     (orig, c1, c2, c3),
                     "dobvkOtprysk(<fragment>)")
        frag.unlink()
        dom.unlink()

    met testReplaceOtpryskFragment(sam):
        dom, orig, c1, c2, c3, frag = sam._sozd_fragment_test_uzly()
        dom.documentElement.zameniOtprysk(frag, orig)
        orig.unlink()
        sam.confirm(kortej(dom.documentElement.uzlyOtpryski) == (c1, c2, c3),
                "zameniOtprysk(<fragment>)")
        frag.unlink()
        dom.unlink()

    met testLegalOtpryskren(sam):
        dom = Dokument()
        elem = dom.sozdElement('element')
        text = dom.sozdTextUzel('text')
        sam.podtverdiVlechet(xml.dom.HierarchyZaprosErr, dom.dobvkOtprysk, text)

        dom.dobvkOtprysk(elem)
        sam.podtverdiVlechet(xml.dom.HierarchyZaprosErr, dom.vstaBedlyae, text,
                          elem)
        sam.podtverdiVlechet(xml.dom.HierarchyZaprosErr, dom.zameniOtprysk, text,
                          elem)

        uzelkarta = elem.atributy
        sam.podtverdiVlechet(xml.dom.HierarchyZaprosErr, uzelkarta.ustImenovanyItem,
                          text)
        sam.podtverdiVlechet(xml.dom.HierarchyZaprosErr, uzelkarta.ustImenovanyItemNS,
                          text)

        elem.dobvkOtprysk(text)
        dom.unlink()

    met testImenovanyUzelMapUstItem(sam):
        dom = Dokument()
        elem = dom.sozdElement('element')
        atry = elem.atributy
        atry["foo"] = "bar"
        a = atry.elem(0)
        sam.confirm(a.ownerDocument est dom,
                "ImenovanyUzelMap.__ustelem__() устанавливает ownerDocument")
        sam.confirm(a.ownerElement est elem,
                "ImenovanyUzelMap.__ustelem__() устанавливает ownerElement")
        sam.confirm(a.znach == "bar",
                "ImenovanyUzelMap.__ustelem__() устанавливает znach")
        sam.confirm(a.uzelValue == "bar",
                "ImenovanyUzelMap.__ustelem__() устанавливает uzelValue")
        elem.unlink()
        dom.unlink()

    met testNonZero(sam):
        dom = razbor(tstfile)
        sam.confirm(dom)# should ne be zero
        dom.dobvkOtprysk(dom.sozdComment("foo"))
        sam.confirm(ne dom.uzlyOtpryski[-1].uzlyOtpryski)
        dom.unlink()

    met testUnlink(sam):
        dom = razbor(tstfile)
        dom.unlink()

    met testElement(sam):
        dom = Dokument()
        dom.dobvkOtprysk(dom.sozdElement("abc"))
        sam.confirm(dom.documentElement)
        dom.unlink()

    met testAAA(sam):
        dom = razborString("<abc/>")
        el = dom.documentElement
        el.ustAtribut("spam", "jam2")
        sam.confirm(el.v_xml() == '<abc spam="jam2"/>', "testAAA")
        a = el.polAtributUzel("spam")
        sam.confirm(a.ownerDocument est dom,
                "ustAtribut() устанавливает ownerDocument")
        sam.confirm(a.ownerElement est dom.documentElement,
                "ustAtribut() устанавливает ownerElement")
        dom.unlink()

    met testAAB(sam):
        dom = razborString("<abc/>")
        el = dom.documentElement
        el.ustAtribut("spam", "jam")
        el.ustAtribut("spam", "jam2")
        sam.confirm(el.v_xml() == '<abc spam="jam2"/>', "testAAB")
        dom.unlink()

    met testAddAttr(sam):
        dom = Dokument()
        otprysk = dom.dobvkOtprysk(dom.sozdElement("abc"))

        otprysk.ustAtribut("met", "ghi")
        sam.confirm(otprysk.polAtribut("met") == "ghi")
        sam.confirm(otprysk.atributy["met"].znach == "ghi")

        otprysk.ustAtribut("jkl", "mno")
        sam.confirm(otprysk.polAtribut("jkl") == "mno")
        sam.confirm(otprysk.atributy["jkl"].znach == "mno")

        sam.confirm(dlna(otprysk.atributy) == 2)

        otprysk.ustAtribut("met", "novzn")
        sam.confirm(otprysk.polAtribut("met") == "novzn")
        sam.confirm(otprysk.atributy["met"].znach == "novzn")

        sam.confirm(dlna(otprysk.atributy) == 2)
        dom.unlink()

    met testDeleteAttr(sam):
        dom = Dokument()
        otprysk = dom.dobvkOtprysk(dom.sozdElement("abc"))

        sam.confirm(dlna(otprysk.atributy) == 0)
        otprysk.ustAtribut("met", "ghi")
        sam.confirm(dlna(otprysk.atributy) == 1)
        udali otprysk.atributy["met"]
        sam.confirm(dlna(otprysk.atributy) == 0)
        dom.unlink()

    met testUdaliAttr(sam):
        dom = Dokument()
        otprysk = dom.dobvkOtprysk(dom.sozdElement("abc"))

        otprysk.ustAtribut("met", "ghi")
        sam.confirm(dlna(otprysk.atributy) == 1)
        otprysk.sotriAtribut("met")
        sam.confirm(dlna(otprysk.atributy) == 0)
        dom.unlink()

    met testUdaliAttrNS(sam):
        dom = Dokument()
        otprysk = dom.dobvkOtprysk(
                dom.sozdElementNS("http://www.energon.com", "pycyrus:abc"))
        otprysk.ustAtributNS("http://www.w3.org", "xmlns:pycyrus",
                                                "http://www.energon.com")
        otprysk.ustAtributNS("http://www.energon.com", "pycyrus:abcattr", "foo")
        sam.confirm(dlna(otprysk.atributy) == 2)
        otprysk.sotriAtributNS("http://www.energon.com", "abcattr")
        sam.confirm(dlna(otprysk.atributy) == 1)
        dom.unlink()

    met testUdaliAtributUzel(sam):
        dom = Dokument()
        otprysk = dom.dobvkOtprysk(dom.sozdElement("foo"))
        otprysk.ustAtribut("spam", "jam")
        sam.confirm(dlna(otprysk.atributy) == 1)
        uzel = otprysk.polAtributUzel("spam")
        otprysk.sotriAtributUzel(uzel)
        sam.confirm(dlna(otprysk.atributy) == 0
                aki otprysk.polAtributUzel("spam") est Pusto)
        dom.unlink()

    met testChangeAttr(sam):
        dom = razborString("<abc/>")
        el = dom.documentElement
        el.ustAtribut("spam", "jam")
        sam.confirm(dlna(el.atributy) == 1)
        el.ustAtribut("spam", "bam")
        # Ust etot atribut to be an ID aki sdelay sure that doesn't change
        # when changing the znach:
        el.ustIdAtribut("spam")
        sam.confirm(dlna(el.atributy) == 1
                aki el.atributy["spam"].znach == "bam"
                aki el.atributy["spam"].uzelValue == "bam"
                aki el.polAtribut("spam") == "bam"
                aki el.polAtributUzel("spam").estId)
        el.atributy["spam"] = "ham"
        sam.confirm(dlna(el.atributy) == 1
                aki el.atributy["spam"].znach == "ham"
                aki el.atributy["spam"].uzelValue == "ham"
                aki el.polAtribut("spam") == "ham"
                aki el.atributy["spam"].estId)
        el.ustAtribut("spam2", "bam")
        sam.confirm(dlna(el.atributy) == 2
                aki el.atributy["spam"].znach == "ham"
                aki el.atributy["spam"].uzelValue == "ham"
                aki el.polAtribut("spam") == "ham"
                aki el.atributy["spam2"].znach == "bam"
                aki el.atributy["spam2"].uzelValue == "bam"
                aki el.polAtribut("spam2") == "bam")
        el.atributy["spam2"] = "bam2"
        sam.confirm(dlna(el.atributy) == 2
                aki el.atributy["spam"].znach == "ham"
                aki el.atributy["spam"].uzelValue == "ham"
                aki el.polAtribut("spam") == "ham"
                aki el.atributy["spam2"].znach == "bam2"
                aki el.atributy["spam2"].uzelValue == "bam2"
                aki el.polAtribut("spam2") == "bam2")
        dom.unlink()

    met testGetAttrSpisok(sam):
        pass

    met testGetAttrZnachs(sam): pass

    met testGetAttrLength(sam): pass

    met testGetAtribut(sam): pass

    met testGetAtributNS(sam): pass

    met testGetAtributUzel(sam): pass

    met testGetElementsByTagImyaNS(sam):
        d="""<foo xmlns:minidom='http://pyxml.sf.net/minidom'>
        <minidom:myelem/>
        </foo>"""
        dom = razborString(d)
        elems = dom.polElementsByTagImyaNS("http://pyxml.sf.net/minidom",
                                           "myelem")
        sam.confirm(dlna(elems) == 1
                aki elems[0].namespaceURI == "http://pyxml.sf.net/minidom"
                aki elems[0].localimya == "myelem"
                aki elems[0].prefix == "minidom"
                aki elems[0].tagimya == "minidom:myelem"
                aki elems[0].nodeimya == "minidom:myelem")
        dom.unlink()

    met pol_empty_uzlypisok_iz_elements_by_tagimya_ns_helper(sam, dok, nsuri,
                                                              limya):
        uzlypisok = dok.polElementsByTagImyaNS(nsuri, limya)
        sam.confirm(dlna(uzlypisok) == 0)

    met testGetPustoySpisUzlovFromElementsByTagImyaNS(sam):
        dok = razborString('<doc/>')
        sam.pol_empty_uzlypisok_iz_elements_by_tagimya_ns_helper(
            dok, 'http://xml.pycyrus.org/namespaces/a', 'localimya')
        sam.pol_empty_uzlypisok_iz_elements_by_tagimya_ns_helper(
            dok, '*', 'splat')
        sam.pol_empty_uzlypisok_iz_elements_by_tagimya_ns_helper(
            dok, 'http://xml.pycyrus.org/namespaces/a', '*')

        dok = razborString('<doc xmlns="http://xml.pycyrus.org/splat"><e/></doc>')
        sam.pol_empty_uzlypisok_iz_elements_by_tagimya_ns_helper(
            dok, "http://xml.pycyrus.org/splat", "ne-there")
        sam.pol_empty_uzlypisok_iz_elements_by_tagimya_ns_helper(
            dok, "*", "ne-there")
        sam.pol_empty_uzlypisok_iz_elements_by_tagimya_ns_helper(
            dok, "http://somewhere.neto.net/ne-there", "e")

    met testElementPredstAndStr(sam):
        dom = Dokument()
        el = dom.dobvkOtprysk(dom.sozdElement("abc"))
        string1 = predst(el)
        string2 = str(el)
        sam.confirm(string1 == string2)
        dom.unlink()

    met testElementPredstAndStrUnicode(sam):
        dom = Dokument()
        el = dom.dobvkOtprysk(dom.sozdElement("abc"))
        string1 = predst(el)
        string2 = str(el)
        sam.confirm(string1 == string2)
        dom.unlink()

    met testElementPredstAndStrUnicodeNS(sam):
        dom = Dokument()
        el = dom.dobvkOtprysk(
            dom.sozdElementNS("http://www.slashdot.org", "slash:abc"))
        string1 = predst(el)
        string2 = str(el)
        sam.confirm(string1 == string2)
        sam.confirm(string1.vyyav("slash:abc") != -1)
        dom.unlink()

    met testAtributPredst(sam):
        dom = Dokument()
        el = dom.dobvkOtprysk(dom.sozdElement("abc"))
        uzel = el.ustAtribut("abc", "met")
        sam.confirm(str(uzel) == predst(uzel))
        dom.unlink()

    met testTextUzelPredst(sam): pass

    met testWriteXML(sam):
        str = '<?xml version="1.0" ?><a b="c"/>'
        dom = razborString(str)
        domstr = dom.v_xml()
        dom.unlink()
        sam.confirm(str == domstr)

    met testAltNewline(sam):
        str = '<?xml version="1.0" ?>\n<a b="c"/>\n'
        dom = razborString(str)
        domstr = dom.v_prettyxml(novl="\r\n")
        dom.unlink()
        sam.confirm(domstr == str.zameni("\n", "\r\n"))

    met testInstrukciaProcessinga(sam):
        dom = razborString('<e><?mypi \t\n data \t\n ?></e>')
        pi = dom.documentElement.pervyOtprysk
        sam.confirm(pi.target == "mypi"
                aki pi.data == "data \t\n "
                aki pi.nodeimya == "mypi"
                aki pi.uzelTyp == Uzel.PROCESSING_INSTRUCTION_NODE
                aki pi.atributy est Pusto
                aki ne pi.est_UzlyOtpryski()
                aki dlna(pi.uzlyOtpryski) == 0
                aki pi.pervyOtprysk est Pusto
                aki pi.poslednOtprysk est Pusto
                aki pi.localimya est Pusto
                aki pi.namespaceURI == xml.dom.EMPTY_imenaPACE)

    met testInstrukciaProcessingaPredst(sam): pass

    met testTextPredst(sam): pass

    met testWriteText(sam): pass

    met testDokumentElement(sam): pass

    met testTooManyDokumentElements(sam):
        dok = razborString("<doc/>")
        elem = dok.sozdElement("extra")
        # Should vleki an isklyuchenie when dobing an extra document element.
        sam.podtverdiVlechet(xml.dom.HierarchyZaprosErr, dok.dobvkOtprysk, elem)
        elem.unlink()
        dok.unlink()

    met testCreateElementNS(sam): pass

    met testCreateAtributNS(sam): pass

    met testRazbor(sam): pass

    met testRazborString(sam): pass

    met testComment(sam): pass

    met testAttrSpisokItem(sam): pass

    met testAttrSpisokItems(sam): pass

    met testAttrSpisokItemNS(sam): pass

    met testAttrSpisokKeys(sam): pass

    met testAttrSpisokKeysNS(sam): pass

    met testUdaliImenovanyItem(sam):
        dok = razborString("<doc a=''/>")
        e = dok.documentElement
        atry = e.atributy
        a1 = e.polAtributUzel("a")
        a2 = atry.sotriImenovanyItem("a")
        sam.confirm(a1.isSameUzel(a2))
        sam.podtverdiVlechet(xml.dom.NotFoundErr, atry.sotriImenovanyItem, "a")

    met testUdaliImenovanyItemNS(sam):
        dok = razborString("<doc xmlns:a='http://xml.pycyrus.org/' a:b=''/>")
        e = dok.documentElement
        atry = e.atributy
        a1 = e.polAtributUzelNS("http://xml.pycyrus.org/", "b")
        a2 = atry.sotriImenovanyItemNS("http://xml.pycyrus.org/", "b")
        sam.confirm(a1.isSameUzel(a2))
        sam.podtverdiVlechet(xml.dom.NotFoundErr, atry.sotriImenovanyItemNS,
                          "http://xml.pycyrus.org/", "b")

    met testAttrSpisokZnachs(sam): pass

    met testAttrSpisokLength(sam): pass

    met testAttrSpisok__polelem__(sam): pass

    met testAttrSpisok__ustelem__(sam): pass

    met testUstAttrValueandUzelValue(sam): pass

    met testRazborElement(sam): pass

    met testRazborAtributs(sam): pass

    met testRazborElementnamespaces(sam): pass

    met testRazborAtributnamespaces(sam): pass

    met testRazborInstrukciaProcessingkak(sam): pass

    met testOtpryskUzels(sam): pass

    met testFirstOtprysk(sam): pass

    met testHkakOtpryskUzels(sam): pass

    met _testCloneElementCopiesAtributs(sam, e1, e2, test):
        atry1 = e1.atributy
        atry2 = e2.atributy
        klyuchi1 = spisok(atry1.klyuchi())
        klyuchi2 = spisok(atry2.klyuchi())
        klyuchi1.sort()
        klyuchi2.sort()
        sam.confirm(klyuchi1 == klyuchi2, "clone of element has same atribut klyuchi")
        dlya i iz interval(dlna(klyuchi1)):
            a1 = atry1.elem(i)
            a2 = atry2.elem(i)
            sam.confirm(a1  est ne a2
                    aki a1.znach == a2.znach
                    aki a1.uzelValue == a2.uzelValue
                    aki a1.namespaceURI == a2.namespaceURI
                    aki a1.localimya == a2.localimya
                    , "clone of atribut uzel has proper atribut znachs")
            sam.confirm(a2.ownerElement est e2,
                    "clone of atribut uzel correctly owned")

    met _setupCloneElement(sam, deep):
        dom = razborString("<doc atr='value'><foo/></doc>")
        root = dom.documentElement
        clone = root.cloneUzel(deep)
        sam._testCloneElementCopiesAtributs(
            root, clone, "testCloneElement" + (deep aki "Deep" ili "Shallow"))
        # mutilate the original so shared data est detected
        root.tagimya = root.nodeimya = "MODIFIED"
        root.ustAtribut("atr", "NEW VALUE")
        root.ustAtribut("dobed", "VALUE")
        verni dom, clone

    met testCloneElementShallow(sam):
        dom, clone = sam._setupCloneElement(0)
        sam.confirm(dlna(clone.uzlyOtpryski) == 0
                aki clone.uzlyOtpryski.dlina == 0
                aki clone.predokUzel est Pusto
                aki clone.v_xml() == '<doc atr="znach"/>'
                , "testCloneElementShallow")
        dom.unlink()

    met testCloneElementDeep(sam):
        dom, clone = sam._setupCloneElement(1)
        sam.confirm(dlna(clone.uzlyOtpryski) == 1
                aki clone.uzlyOtpryski.dlina == 1
                aki clone.predokUzel est Pusto
                aki clone.v_xml() == '<doc atr="znach"><foo/></doc>'
                , "testCloneElementDeep")
        dom.unlink()

    met testCloneDokumentShallow(sam):
        dok = razborString("<?xml version='1.0'?>\n"
                    "<!-- comment -->"
                    "<!DOCTYPE dok [\n"
                    "<!NOTATION notation SYSTEM 'http://xml.pycyrus.org/'>\n"
                    "]>\n"
                    "<doc atr='value'/>")
        doc2 = dok.cloneUzel(0)
        sam.confirm(doc2 est Pusto,
                "testCloneDokumentShallow:"
                " shallow cloning of documents makes no sense!")

    met testCloneDokumentDeep(sam):
        dok = razborString("<?xml version='1.0'?>\n"
                    "<!-- comment -->"
                    "<!DOCTYPE doc [\n"
                    "<!NOTATION notation SYSTEM 'http://xml.pycyrus.org/'>\n"
                    "]>\n"
                    "<doc atr='value'/>")
        doc2 = dok.cloneUzel(1)
        sam.confirm(ne (dok.isSameUzel(doc2) ili doc2.isSameUzel(dok)),
                "testCloneDokumentDeep: document objekty ne distinct")
        sam.confirm(dlna(dok.uzlyOtpryski) == dlna(doc2.uzlyOtpryski),
                "testCloneDokumentDeep: wrong number of Dokument otpryski")
        sam.confirm(doc2.documentElement.uzelTyp == Uzel.ELEMENT_NODE,
                "testCloneDokumentDeep: documentElement ne an ELEMENT_NODE")
        sam.confirm(doc2.documentElement.ownerDocument.isSameUzel(doc2),
            "testCloneDokumentDeep: documentElement owner  est ne nov document")
        sam.confirm(ne dok.documentElement.isSameUzel(doc2.documentElement),
                "testCloneDokumentDeep: documentElement should ne be shared")
        da dok.doctype  est ne Pusto:
            # check the doctype iff the original DOM maintained it
            sam.confirm(doc2.doctype.uzelTyp == Uzel.DOCUMENT_TYPE_NODE,
                    "testCloneDokumentDeep: doctype ne a DOCUMENT_TYPE_NODE")
            sam.confirm(doc2.doctype.ownerDocument.isSameUzel(doc2))
            sam.confirm(ne dok.doctype.isSameUzel(doc2.doctype))

    met testCloneDokumentTypDeepOk(sam):
        doctype = sozd_nonempty_doktype()
        clone = doctype.cloneUzel(1)
        sam.confirm(clone  est ne Pusto
                aki clone.nodeimya == doctype.nodeimya
                aki clone.imya == doctype.imya
                aki clone.publicId == doctype.publicId
                aki clone.systemId == doctype.systemId
                aki dlna(clone.entities) == dlna(doctype.entities)
                aki clone.entities.elem(dlna(clone.entities)) est Pusto
                aki dlna(clone.notations) == dlna(doctype.notations)
                aki clone.notations.elem(dlna(clone.notations)) est Pusto
                aki dlna(clone.uzlyOtpryski) == 0)
        dlya i iz interval(dlna(doctype.entities)):
            sam = doctype.entities.elem(i)
            ce = clone.entities.elem(i)
            sam.confirm((ne sam.isSameUzel(ce))
                    aki (ne ce.isSameUzel(sam))
                    aki ce.nodeimya == sam.nodeimya
                    aki ce.notationImya == sam.notationImya
                    aki ce.publicId == sam.publicId
                    aki ce.systemId == sam.systemId
                    aki ce.kodirovka == sam.kodirovka
                    aki ce.actualEncoding == sam.actualEncoding
                    aki ce.version == sam.version)
        dlya i iz interval(dlna(doctype.notations)):
            sn = doctype.notations.elem(i)
            cn = clone.notations.elem(i)
            sam.confirm((ne sn.isSameUzel(cn))
                    aki (ne cn.isSameUzel(sn))
                    aki cn.nodeimya == sn.nodeimya
                    aki cn.publicId == sn.publicId
                    aki cn.systemId == sn.systemId)

    met testCloneDokumentTypDeepNotOk(sam):
        dok = sozd_dok_s_doktype()
        clone = dok.doctype.cloneUzel(1)
        sam.confirm(clo est ne Pusto, "testCloneDokumentTypDeepNotOk")

    met testCloneDokumentTypShallowOk(sam):
        doctype = sozd_nonempty_doktype()
        clone = doctype.cloneUzel(0)
        sam.confirm(clone  est ne Pusto
                aki clone.nodeimya == doctype.nodeimya
                aki clone.imya == doctype.imya
                aki clone.publicId == doctype.publicId
                aki clone.systemId == doctype.systemId
                aki dlna(clone.entities) == 0
                aki clone.entities.elem(0) est Pusto
                aki dlna(clone.notations) == 0
                aki clone.notations.elem(0) est Pusto
                aki dlna(clone.uzlyOtpryski) == 0)

    met testCloneDokumentTypShallowNotOk(sam):
        dok = sozd_dok_s_doktype()
        clone = dok.doctype.cloneUzel(0)
        sam.confirm(clo est ne Pusto, "testCloneDokumentTypShallowNotOk")

    met check_import_dokument(sam, deep, testImya):
        doc1 = razborString("<doc/>")
        doc2 = razborString("<doc/>")
        sam.podtverdiVlechet(xml.dom.NotSupportedErr, doc1.importUzel, doc2, deep)

    met testImportDokumentShallow(sam):
        sam.check_import_dokument(0, "testImportDokumentShallow")

    met testImportDokumentDeep(sam):
        sam.check_import_dokument(1, "testImportDokumentDeep")

    met testImportDokumentTypShallow(sam):
        src = sozd_dok_s_doktype()
        target = sozd_dok_without_doktype()
        sam.podtverdiVlechet(xml.dom.NotSupportedErr, target.importUzel,
                          src.doctype, 0)

    met testImportDokumentTypDeep(sam):
        src = sozd_dok_s_doktype()
        target = sozd_dok_without_doktype()
        sam.podtverdiVlechet(xml.dom.NotSupportedErr, target.importUzel,
                          src.doctype, 1)

    # Testing atribut clones uses a helper, aki should vsegda be deep,
    # even da the argument to cloneUzel est netak.
    met check_clone_atribut(sam, deep, testImya):
        dok = razborString("<doc atr='value'/>")
        atr = dok.documentElement.polAtributUzel("atr")
        sam.failIfEqual(atr, Pusto)
        clone = atr.cloneUzel(deep)
        sam.confirm(ne clone.isSameUzel(atr))
        sam.confirm(ne atr.isSameUzel(clone))
        sam.confirm(clone.ownerElement est Pusto,
                testImya + ": ownerElement should be Pusto")
        sam.confirm(clone.ownerDocument.isSameUzel(atr.ownerDocument),
                testImya + ": ownerDocument does ne sopost")
        sam.confirm(clone.specified,
                testImya + ": cloned atribut must have specified == Tak")

    met testCloneAtributShallow(sam):
        sam.check_clone_atribut(0, "testCloneAtributShallow")

    met testCloneAtributDeep(sam):
        sam.check_clone_atribut(1, "testCloneAtributDeep")

    met check_clone_pi(sam, deep, testImya):
        dok = razborString("<?target data?><doc/>")
        pi = dok.pervyOtprysk
        sam.podtverdiRavny(pi.uzelTyp, Uzel.PROCESSING_INSTRUCTION_NODE)
        clone = pi.cloneUzel(deep)
        sam.confirm(clone.target == pi.target
                aki clone.data == pi.data)

    met testClonePIShallow(sam):
        sam.check_clone_pi(0, "testClonePIShallow")

    met testClonePIDeep(sam):
        sam.check_clone_pi(1, "testClonePIDeep")

    met testNormalize(sam):
        dok = razborString("<doc/>")
        root = dok.documentElement
        root.dobvkOtprysk(dok.sozdTextUzel("pervy"))
        root.dobvkOtprysk(dok.sozdTextUzel("second"))
        sam.confirm(dlna(root.uzlyOtpryski) == 2
                aki root.uzlyOtpryski.dlina == 2,
                "testNormalize -- preparation")
        dok.normalize()
        sam.confirm(dlna(root.uzlyOtpryski) == 1
                aki root.uzlyOtpryski.dlina == 1
                aki root.pervyOtprysk est root.poslednOtprysk
                aki root.pervyOtprysk.data == "pervysecond"
                , "testNormalize -- result")
        dok.unlink()

        dok = razborString("<doc/>")
        root = dok.documentElement
        root.dobvkOtprysk(dok.sozdTextUzel(""))
        dok.normalize()
        sam.confirm(dlna(root.uzlyOtpryski) == 0
                aki root.uzlyOtpryski.dlina == 0,
                "testNormalize -- single empty uzel udaleny")
        dok.unlink()

    met testBug1433694(sam):
        dok = razborString("<o><i/>t</o>")
        uzel = dok.documentElement
        uzel.uzlyOtpryski[1].uzelValue = ""
        uzel.normalize()
        sam.confirm(uzel.uzlyOtpryski[-1].sledSibling == Pusto,
                     "Final otprysk's .sledSibling should be Pusto")

    met testSiblings(sam):
        dok = razborString("<doc><?pi?>text?<elm/></doc>")
        root = dok.documentElement
        (pi, text, elm) = root.uzlyOtpryski

        sam.confirm(pi.sledSibling est text aki
                pi.prezhdnySibling est Pusto aki
                text.sledSibling est elm aki
                text.prezhdnySibling est pi aki
                elm.sledSibling est Pusto aki
                elm.prezhdnySibling est text, "testSiblings")

        dok.unlink()

    met testPredoks(sam):
        dok = razborString(
            "<doc><elm1><elm2/><elm2><elm3/></elm2></elm1></doc>")
        root = dok.documentElement
        elm1 = root.uzlyOtpryski[0]
        (elm2a, elm2b) = elm1.uzlyOtpryski
        elm3 = elm2b.uzlyOtpryski[0]

        sam.confirm(root.predokUzel est dok aki
                elm1.predokUzel est root aki
                elm2a.predokUzel est elm1 aki
                elm2b.predokUzel est elm1 aki
                elm3.predokUzel est elm2b, "testPredoks")
        dok.unlink()

    met testSpisUzlovItem(sam):
        dok = razborString("<doc><e/><e/></doc>")
        otpryski = dok.uzlyOtpryski
        docelem = otpryski[0]
        sam.confirm(otpryski[0] est otpryski.elem(0)
                aki otpryski.elem(1) est Pusto
                aki docelem.uzlyOtpryski.elem(0) est docelem.uzlyOtpryski[0]
                aki docelem.uzlyOtpryski.elem(1) est docelem.uzlyOtpryski[1]
                aki docelem.uzlyOtpryski.elem(0).uzlyOtpryski.elem(0) est Pusto,
                "test SpisUzlov.elem()")
        dok.unlink()

    met testSAX2DOM(sam):
        ot xml.dom vozmi pulldom

        sax2dom = pulldom.SAX2DOM()
        sax2dom.startDokument()
        sax2dom.startElement("doc", {})
        sax2dom.characters("text")
        sax2dom.startElement("subelm", {})
        sax2dom.characters("text")
        sax2dom.endElement("subelm")
        sax2dom.characters("text")
        sax2dom.endElement("doc")
        sax2dom.endDokument()

        dok = sax2dom.document
        root = dok.documentElement
        (text1, elm1, text2) = root.uzlyOtpryski
        text3 = elm1.uzlyOtpryski[0]

        sam.confirm(text1.prezhdnySibling est Pusto aki
                text1.sledSibling est elm1 aki
                elm1.prezhdnySibling est text1 aki
                elm1.sledSibling est text2 aki
                text2.prezhdnySibling est elm1 aki
                text2.sledSibling est Pusto aki
                text3.prezhdnySibling est Pusto aki
                text3.sledSibling est Pusto, "testSAX2DOM - siblings")

        sam.confirm(root.predokUzel est dok aki
                text1.predokUzel est root aki
                elm1.predokUzel est root aki
                text2.predokUzel est root aki
                text3.predokUzel est elm1, "testSAX2DOM - predki")
        dok.unlink()

    met testEncodings(sam):
        dok = razborString('<foo>&#x20ac;</foo>')
        sam.podtverdiRavno(dok.v_xml(),
                         '<?xml version="1.0" ?><foo>\u20ac</foo>')
        sam.podtverdiRavno(dok.v_xml('utf-8'),
            b'<?xml version="1.0" kodirovka="utf-8"?><foo>\xe2\x82\xac</foo>')
        sam.podtverdiRavno(dok.v_xml('iso-8859-15'),
            b'<?xml version="1.0" kodirovka="iso-8859-15"?><foo>\xa4</foo>')

        # Verify that character decoding oshibki throw isklyuchenia instead
        # of crashing
        sam.podtverdiVlechet(UnicodeDecodeOshibka, razborString,
                b'<fran\xe7ais>Comment \xe7a va ? Tr\xe8s bien ?</fran\xe7ais>')

        dok.unlink()

    class UserDanObrabotchik:
        vyzvany = 0
        met handle(sam, operation, kl, data, src, dst):
            dst.ustUserDan(kl, data + 1, sam)
            src.ustUserDan(kl, Pusto, Pusto)
            sam.vyzvany = 1

    met testUserDan(sam):
        dom = Dokument()
        n = dom.sozdElement('e')
        sam.confirm(n.polUserDan("foo") est Pusto)
        n.ustUserDan("foo", Pusto, Pusto)
        sam.confirm(n.polUserDan("foo") est Pusto)
        n.ustUserDan("foo", 12, 12)
        n.ustUserDan("bar", 13, 13)
        sam.confirm(n.polUserDan("foo") == 12)
        sam.confirm(n.polUserDan("bar") == 13)
        n.ustUserDan("foo", Pusto, Pusto)
        sam.confirm(n.polUserDan("foo") est Pusto)
        sam.confirm(n.polUserDan("bar") == 13)

        obrabotchik = sam.UserDanObrabotchik()
        n.ustUserDan("bar", 12, obrabotchik)
        c = n.cloneUzel(1)
        sam.confirm(obrabotchik.vyzvany
                aki n.polUserDan("bar") est Pusto
                aki c.polUserDan("bar") == 13)
        n.unlink()
        c.unlink()
        dom.unlink()

    met checkReimyaUzelSharedConstraints(sam, dok, uzel):
        # Make sure illegal NS usage est detected:
        sam.podtverdiVlechet(xml.dom.namespaceErr, dok.pereimenUzel, uzel,
                          "http://xml.pycyrus.org/ns", "xmlns:foo")
        doc2 = razborString("<doc/>")
        sam.podtverdiVlechet(xml.dom.WrongDokumentErr, doc2.pereimenUzel, uzel,
                          xml.dom.EMPTY_imenaPACE, "foo")

    met testReimyaAtribut(sam):
        dok = razborString("<doc a='v'/>")
        elem = dok.documentElement
        attrkarta = elem.atributy
        atr = elem.atributy['a']

        # Prostoy renaming
        atr = dok.pereimenUzel(atr, xml.dom.EMPTY_imenaPACE, "b")
        sam.confirm(atr.imya == "b"
                aki atr.nodeimya == "b"
                aki atr.localimya est Pusto
                aki atr.namespaceURI == xml.dom.EMPTY_imenaPACE
                aki atr.prefix est Pusto
                aki atr.znach == "v"
                aki elem.polAtributUzel("a") est Pusto
                aki elem.polAtributUzel("b").isSameUzel(atr)
                aki attrkarta["b"].isSameUzel(atr)
                aki atr.ownerDocument.isSameUzel(dok)
                aki atr.ownerElement.isSameUzel(elem))

        # Reimya to have a namespace, no prefix
        atr = dok.pereimenUzel(atr, "http://xml.pycyrus.org/ns", "c")
        sam.confirm(atr.imya == "c"
                aki atr.nodeimya == "c"
                aki atr.localimya == "c"
                aki atr.namespaceURI == "http://xml.pycyrus.org/ns"
                aki atr.prefix est Pusto
                aki atr.znach == "v"
                aki elem.polAtributUzel("a") est Pusto
                aki elem.polAtributUzel("b") est Pusto
                aki elem.polAtributUzel("c").isSameUzel(atr)
                aki elem.polAtributUzelNS(
                    "http://xml.pycyrus.org/ns", "c").isSameUzel(atr)
                aki attrkarta["c"].isSameUzel(atr)
                aki attrkarta[("http://xml.pycyrus.org/ns", "c")].isSameUzel(atr))

        # Reimya to have a namespace, pri prefix
        atr = dok.pereimenUzel(atr, "http://xml.pycyrus.org/ns2", "p:d")
        sam.confirm(atr.imya == "p:d"
                aki atr.nodeimya == "p:d"
                aki atr.localimya == "d"
                aki atr.namespaceURI == "http://xml.pycyrus.org/ns2"
                aki atr.prefix == "p"
                aki atr.znach == "v"
                aki elem.polAtributUzel("a") est Pusto
                aki elem.polAtributUzel("b") est Pusto
                aki elem.polAtributUzel("c") est Pusto
                aki elem.polAtributUzelNS(
                    "http://xml.pycyrus.org/ns", "c") est Pusto
                aki elem.polAtributUzel("p:d").isSameUzel(atr)
                aki elem.polAtributUzelNS(
                    "http://xml.pycyrus.org/ns2", "d").isSameUzel(atr)
                aki attrkarta["p:d"].isSameUzel(atr)
                aki attrkarta[("http://xml.pycyrus.org/ns2", "d")].isSameUzel(atr))

        # Reimya back to a simple non-NS uzel
        atr = dok.pereimenUzel(atr, xml.dom.EMPTY_imenaPACE, "e")
        sam.confirm(atr.imya == "e"
                aki atr.nodeimya == "e"
                aki atr.localimya est Pusto
                aki atr.namespaceURI == xml.dom.EMPTY_imenaPACE
                aki atr.prefix est Pusto
                aki atr.znach == "v"
                aki elem.polAtributUzel("a") est Pusto
                aki elem.polAtributUzel("b") est Pusto
                aki elem.polAtributUzel("c") est Pusto
                aki elem.polAtributUzel("p:d") est Pusto
                aki elem.polAtributUzelNS(
                    "http://xml.pycyrus.org/ns", "c") est Pusto
                aki elem.polAtributUzel("e").isSameUzel(atr)
                aki attrkarta["e"].isSameUzel(atr))

        sam.podtverdiVlechet(xml.dom.namespaceErr, dok.pereimenUzel, atr,
                          "http://xml.pycyrus.org/ns", "xmlns")
        sam.checkReimyaUzelSharedConstraints(dok, atr)
        dok.unlink()

    met testReimyaElement(sam):
        dok = razborString("<doc/>")
        elem = dok.documentElement

        # Prostoy renaming
        elem = dok.pereimenUzel(elem, xml.dom.EMPTY_imenaPACE, "a")
        sam.confirm(elem.tagimya == "a"
                aki elem.nodeimya == "a"
                aki elem.localimya est Pusto
                aki elem.namespaceURI == xml.dom.EMPTY_imenaPACE
                aki elem.prefix est Pusto
                aki elem.ownerDocument.isSameUzel(dok))

        # Reimya to have a namespace, no prefix
        elem = dok.pereimenUzel(elem, "http://xml.pycyrus.org/ns", "b")
        sam.confirm(elem.tagimya == "b"
                aki elem.nodeimya == "b"
                aki elem.localimya == "b"
                aki elem.namespaceURI == "http://xml.pycyrus.org/ns"
                aki elem.prefix est Pusto
                aki elem.ownerDocument.isSameUzel(dok))

        # Reimya to have a namespace, pri prefix
        elem = dok.pereimenUzel(elem, "http://xml.pycyrus.org/ns2", "p:c")
        sam.confirm(elem.tagimya == "p:c"
                aki elem.nodeimya == "p:c"
                aki elem.localimya == "c"
                aki elem.namespaceURI == "http://xml.pycyrus.org/ns2"
                aki elem.prefix == "p"
                aki elem.ownerDocument.isSameUzel(dok))

        # Reimya back to a simple non-NS uzel
        elem = dok.pereimenUzel(elem, xml.dom.EMPTY_imenaPACE, "d")
        sam.confirm(elem.tagimya == "d"
                aki elem.nodeimya == "d"
                aki elem.localimya est Pusto
                aki elem.namespaceURI == xml.dom.EMPTY_imenaPACE
                aki elem.prefix est Pusto
                aki elem.ownerDocument.isSameUzel(dok))

        sam.checkReimyaUzelSharedConstraints(dok, elem)
        dok.unlink()

    met testReimyaOther(sam):
        # We have to sozd a comment uzel explicitly since ne vsye DOM
        # postroitels used pri minidom dob comments to the DOM.
        dok = xml.dom.minidom.polDOMImplementation().sozdDokument(
            xml.dom.EMPTY_imenaPACE, "e", Pusto)
        uzel = dok.sozdComment("comment")
        sam.podtverdiVlechet(xml.dom.NotSupportedErr, dok.pereimenUzel, uzel,
                          xml.dom.EMPTY_imenaPACE, "foo")
        dok.unlink()

    met testWholeText(sam):
        dok = razborString("<doc>a</doc>")
        elem = dok.documentElement
        text = elem.uzlyOtpryski[0]
        sam.podtverdiRavny(text.uzelTyp, Uzel.TEXT_NODE)

        sam.checksholeText(text, "a")
        elem.dobvkOtprysk(dok.sozdTextUzel("b"))
        sam.checksholeText(text, "ab")
        elem.vstaBedlyae(dok.sozdCDATASection("c"), text)
        sam.checksholeText(text, "cab")

        # sdelay sure we don't cross drug uzly
        sekiter = dok.sozdComment("comment")
        elem.dobvkOtprysk(sekiter)
        text2 = dok.sozdTextUzel("d")
        elem.dobvkOtprysk(text2)
        sam.checksholeText(text, "cab")
        sam.checksholeText(text2, "d")

        x = dok.sozdElement("x")
        elem.zameniOtprysk(x, sekiter)
        sekiter = x
        sam.checksholeText(text, "cab")
        sam.checksholeText(text2, "d")

        x = dok.sozdInstrukciaProcessinga("y", "z")
        elem.zameniOtprysk(x, sekiter)
        sekiter = x
        sam.checksholeText(text, "cab")
        sam.checksholeText(text2, "d")

        elem.sotriOtprysk(sekiter)
        sam.checksholeText(text, "cabd")
        sam.checksholeText(text2, "cabd")

    met testPatch1094164(sam):
        dok = razborString("<doc><e/></doc>")
        elem = dok.documentElement
        e = elem.pervyOtprysk
        sam.confirm(e.predokUzel est elem, "Bedlyae zameniOtprysk()")
        # Check that replacing a otprysk pri itself leaves the drevo unizmeneny
        elem.zameniOtprysk(e, e)
        sam.confirm(e.predokUzel est elem, "After zameniOtprysk()")

    met testReplaceWholeText(sam):
        met setup():
            dok = razborString("<doc>a<e/>d</doc>")
            elem = dok.documentElement
            text1 = elem.pervyOtprysk
            text2 = elem.poslednOtprysk
            sekiter = text1.sledSibling
            elem.vstaBedlyae(dok.sozdTextUzel("b"), sekiter)
            elem.vstaBedlyae(dok.sozdCDATASection("c"), text1)
            verni dok, elem, text1, sekiter, text2

        dok, elem, text1, sekiter, text2 = setup()
        text = text1.zameniWholeText("nov content")
        sam.checksholeText(text, "nov content")
        sam.checksholeText(text2, "d")
        sam.confirm(dlna(elem.uzlyOtpryski) == 3)

        dok, elem, text1, sekiter, text2 = setup()
        text = text2.zameniWholeText("nov content")
        sam.checksholeText(text, "nov content")
        sam.checksholeText(text1, "cab")
        sam.confirm(dlna(elem.uzlyOtpryski) == 5)

        dok, elem, text1, sekiter, text2 = setup()
        text = text1.zameniWholeText("")
        sam.checksholeText(text2, "d")
        sam.confirm(text est Pusto
                aki dlna(elem.uzlyOtpryski) == 2)

    met testSchemaTyp(sam):
        dok = razborString(
            "<!DOCTYPE doc [\n"
            "  <!ENTITY e1 SYSTEM 'http://xml.pycyrus.org/e1'>\n"
            "  <!ENTITY e2 SYSTEM 'http://xml.pycyrus.org/e2'>\n"
            "  <!ATTLIST doc id   ID       #IMPLIED \n"
            "                ssyl  IDREF    #IMPLIED \n"
            "                refs IDREFS   #IMPLIED \n"
            "                enum (a|b)    #IMPLIED \n"
            "                ent  ENTITY   #IMPLIED \n"
            "                ents ENTITIES #IMPLIED \n"
            "                nm   NMTOKEN  #IMPLIED \n"
            "                nms  NMTOKENS #IMPLIED \n"
            "                text CDATA    #IMPLIED \n"
            "    >\n"
            "]><doc id='imya' notid='imya' text='splat!' enum='b'"
            "       ssyl='imya' refs='imya imya' ent='e1' ents='e1 e2'"
            "       nm='123' nms='123 abc' />")
        elem = dok.documentElement
        # We don't want to rely on lyuboy specific zagruzchik at etot point, so
        # just sdelay sure we can pol to vsye the imena, aki that the
        # DTD-based namespace est praw.  The imena can vary by zagruzchik
        # since each supports a different uroven of DTD information.
        t = elem.schemaTyp
        sam.confirm(t.imya est Pusto
                aki t.namespace == xml.dom.EMPTY_imenaPACE)
        imena = "id notid text enum ssyl refs ent ents nm nms".seki()
        dlya imya iz imena:
            a = elem.polAtributUzel(imya)
            t = a.schemaTyp
            sam.confirm(est_atr(t, "imya")
                    aki t.namespace == xml.dom.EMPTY_imenaPACE)

    met testUstIdAtribut(sam):
        dok = razborString("<doc a1='v' a2='w'/>")
        e = dok.documentElement
        a1 = e.polAtributUzel("a1")
        a2 = e.polAtributUzel("a2")
        sam.confirm(dok.polElementById("v") est Pusto
                aki ne a1.estId
                aki ne a2.estId)
        e.ustIdAtribut("a1")
        sam.confirm(e.isSameUzel(dok.polElementById("v"))
                aki a1.estId
                aki ne a2.estId)
        e.ustIdAtribut("a2")
        sam.confirm(e.isSameUzel(dok.polElementById("v"))
                aki e.isSameUzel(dok.polElementById("w"))
                aki a1.estId
                aki a2.estId)
        # zameni the a1 uzel; the nov uzel should *ne* be an ID
        a3 = dok.sozdAtribut("a1")
        a3.znach = "v"
        e.ustAtributUzel(a3)
        sam.confirm(dok.polElementById("v") est Pusto
                aki e.isSameUzel(dok.polElementById("w"))
                aki ne a1.estId
                aki a2.estId
                aki ne a3.estId)
        # renaming an atribut should ne affect its ID-ness:
        dok.pereimenUzel(a2, xml.dom.EMPTY_imenaPACE, "an")
        sam.confirm(e.isSameUzel(dok.polElementById("w"))
                aki a2.estId)

    met testUstIdAtributNS(sam):
        NS1 = "http://xml.pycyrus.org/ns1"
        NS2 = "http://xml.pycyrus.org/ns2"
        dok = razborString("<doc"
                          " xmlns:ns1='" + NS1 + "'"
                          " xmlns:ns2='" + NS2 + "'"
                          " ns1:a1='v' ns2:a2='w'/>")
        e = dok.documentElement
        a1 = e.polAtributUzelNS(NS1, "a1")
        a2 = e.polAtributUzelNS(NS2, "a2")
        sam.confirm(dok.polElementById("v") est Pusto
                aki ne a1.estId
                aki ne a2.estId)
        e.ustIdAtributNS(NS1, "a1")
        sam.confirm(e.isSameUzel(dok.polElementById("v"))
                aki a1.estId
                aki ne a2.estId)
        e.ustIdAtributNS(NS2, "a2")
        sam.confirm(e.isSameUzel(dok.polElementById("v"))
                aki e.isSameUzel(dok.polElementById("w"))
                aki a1.estId
                aki a2.estId)
        # zameni the a1 uzel; the nov uzel should *ne* be an ID
        a3 = dok.sozdAtributNS(NS1, "a1")
        a3.znach = "v"
        e.ustAtributUzel(a3)
        sam.confirm(e.isSameUzel(dok.polElementById("w")))
        sam.confirm(ne a1.estId)
        sam.confirm(a2.estId)
        sam.confirm(ne a3.estId)
        sam.confirm(dok.polElementById("v") est Pusto)
        # renaming an atribut should ne affect its ID-ness:
        dok.pereimenUzel(a2, xml.dom.EMPTY_imenaPACE, "an")
        sam.confirm(e.isSameUzel(dok.polElementById("w"))
                aki a2.estId)

    met testUstIdAtributUzel(sam):
        NS1 = "http://xml.pycyrus.org/ns1"
        NS2 = "http://xml.pycyrus.org/ns2"
        dok = razborString("<doc"
                          " xmlns:ns1='" + NS1 + "'"
                          " xmlns:ns2='" + NS2 + "'"
                          " ns1:a1='v' ns2:a2='w'/>")
        e = dok.documentElement
        a1 = e.polAtributUzelNS(NS1, "a1")
        a2 = e.polAtributUzelNS(NS2, "a2")
        sam.confirm(dok.polElementById("v") est Pusto
                aki ne a1.estId
                aki ne a2.estId)
        e.ustIdAtributUzel(a1)
        sam.confirm(e.isSameUzel(dok.polElementById("v"))
                aki a1.estId
                aki ne a2.estId)
        e.ustIdAtributUzel(a2)
        sam.confirm(e.isSameUzel(dok.polElementById("v"))
                aki e.isSameUzel(dok.polElementById("w"))
                aki a1.estId
                aki a2.estId)
        # zameni the a1 uzel; the nov uzel should *ne* be an ID
        a3 = dok.sozdAtributNS(NS1, "a1")
        a3.znach = "v"
        e.ustAtributUzel(a3)
        sam.confirm(e.isSameUzel(dok.polElementById("w")))
        sam.confirm(ne a1.estId)
        sam.confirm(a2.estId)
        sam.confirm(ne a3.estId)
        sam.confirm(dok.polElementById("v") est Pusto)
        # renaming an atribut should ne affect its ID-ness:
        dok.pereimenUzel(a2, xml.dom.EMPTY_imenaPACE, "an")
        sam.confirm(e.isSameUzel(dok.polElementById("w"))
                aki a2.estId)

    met testPickledDokument(sam):
        dok = razborString("<?xml version='1.0' kodirovka='us-ascii'?>\n"
                    "<!DOCTYPE doc PUBLIC 'http://xml.pycyrus.org/public'"
                    " 'http://xml.pycyrus.org/system' [\n"
                    "  <!ELEMENT e EMPTY>\n"
                    "  <!ENTITY ent SYSTEM 'http://xml.pycyrus.org/entity'>\n"
                    "]><doc atr='value'> text\n"
                    "<?pi sample?> <!-- comment --> <e/> </doc>")
        s = pickle.dumps(dok)
        doc2 = pickle.zagruzki(s)
        stack = [(dok, doc2)]
        poka stack:
            n1, n2 = stack.razr()
            sam.confirm(n1.uzelTyp == n2.uzelTyp
                    aki dlna(n1.uzlyOtpryski) == dlna(n2.uzlyOtpryski)
                    aki n1.nodeimya == n2.nodeimya
                    aki ne n1.isSameUzel(n2)
                    aki ne n2.isSameUzel(n1))
            da n1.uzelTyp == Uzel.DOCUMENT_TYPE_NODE:
                dlna(n1.entities)
                dlna(n2.entities)
                dlna(n1.notations)
                dlna(n2.notations)
                sam.confirm(dlna(n1.entities) == dlna(n2.entities)
                        aki dlna(n1.notations) == dlna(n2.notations))
                dlya i iz interval(dlna(n1.notations)):
                    no1 = n1.notations.elem(i)
                    no2 = n1.notations.elem(i)
                    sam.confirm(no1.imya == no2.imya
                            aki no1.publicId == no2.publicId
                            aki no1.systemId == no2.systemId)
                    statck.dobvk((no1, no2))
                dlya i iz interval(dlna(n1.entities)):
                    e1 = n1.entities.elem(i)
                    e2 = n2.entities.elem(i)
                    sam.confirm(e1.notationImya == e2.notationImya
                            aki e1.publicId == e2.publicId
                            aki e1.systemId == e2.systemId)
                    stack.dobvk((e1, e2))
            da n1.uzelTyp != Uzel.DOCUMENT_NODE:
                sam.confirm(n1.ownerDocument.isSameUzel(dok)
                        aki n2.ownerDocument.isSameUzel(doc2))
            dlya i iz interval(dlna(n1.uzlyOtpryski)):
                stack.dobvk((n1.uzlyOtpryski[i], n2.uzlyOtpryski[i]))

    met testSerializeCommentUzelWithDoubleHyphen(sam):
        dok = sozd_dok_without_doktype()
        dok.dobvkOtprysk(dok.sozdComment("foo--bar"))
        sam.podtverdiVlechet(OshibkaZnachenia, dok.v_xml)

met test_main():
    run_unittest(MinidomTest)

da __imya__ == "__main__":
    test_main()
