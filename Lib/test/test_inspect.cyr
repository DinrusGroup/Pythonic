vozmi sys
vozmi typy
vozmi unittest
vozmi inspect
vozmi vremya
vozmi nabory
ot os.path vozmi normcase

ot test.support vozmi TESTFN, run_unittest

ot test vozmi inspect_fodder kak mod
ot test vozmi inspect_fodder2 kak mod2

# Funkcias tested iz etot suite:
# estmodul, estklass, estmethod, estfunkcia, esttrassirovka, estkadr, estkod,
# estvstroyeny, estprocedura, estgenerator, estgeneratorfunkcia, polmembers,
# poldok, polfile, polmodule, polistokfile, polcomments, polistok,
# poldrevoklassa, polargspec, polargznachs, formatargspec, formatargznachs,
# tekuschkadr, stack, trassa, estdanopisatel

# NOTE: There are some additional testy relating to interdeystvo pri
#       zipimport iz the test_zipimport_support test module.

modfile = mod.__file__
da modfile.konec_na(('c', 'o')):
    modfile = modfile[:-1]

# Normalize file imena: on Windows, the case of file imena of kompilirovany
# moduli zavisit on the path used to start the pycyrus executable.
modfile = normcase(modfile)

met revise(imyaf, *argi):
    verni (normcase(imyaf),) + argi

vozmi vstroyka

probuy:
    1/0
except:
    tb = sys.iskl_info()[2]

git = mod.StupidGit()

class IsTestBase(unittest.TestCase):
    predicates = ust([inspect.estvstroyeny, inspect.estklass, inspect.estkod,
                      inspect.estkadr, inspect.estfunkcia, inspect.estmethod,
                      inspect.estmodul, inspect.esttrassirovka,
                      inspect.estgenerator, inspect.estgeneratorfunkcia])

    met istest(sam, predicate, exp):
        obj = oceni(exp)
        sam.failUnless(predicate(obj), '%s(%s)' % (predicate.__imya__, exp))

        dlya drug iz sam.predicates - ust([predicate]):
            da predicate == inspect.estgeneratorfunkcia aki\
               drug == inspect.estfunkcia:
                dalee
            sam.failIf(drug(obj), 'ne %s(%s)' % (drug.__imya__, exp))

met generator_funkcia_example(sam):
    dlya i iz interval(2):
        derzhi i

class TestPredicates(IsTestBase):
    met test_sixteen(sam):
        schet = dlna([x dlya x iz dir(inspect) da x.nachalo_na('est')])
        # This test est here dlya remember you to obnov Dok/library/inspect.rst
        # which claims there are 16 such funkcii
        expected = 16
        err_msg = "There are %d (ne %d) est* funkcii" % (schet, expected)
        sam.podtverdiRavno(schet, expected, err_msg)


    met test_isklluding_predicates(sam):
        sam.istest(inspect.estvstroyeny, 'sys.vyhod')
        sam.istest(inspect.estvstroyeny, '[].dobvk')
        sam.istest(inspect.estkod, 'mod.spam.__kod__')
        sam.istest(inspect.estkadr, 'tb.tb_frame')
        sam.istest(inspect.estfunkcia, 'mod.spam')
        sam.istest(inspect.estfunkcia, 'mod.StupidGit.abuse')
        sam.istest(inspect.estmethod, 'git.argue')
        sam.istest(inspect.estmodul, 'mod')
        sam.istest(inspect.esttrassirovka, 'tb')
        sam.istest(inspect.estdanopisatel, 'nabory.defdict.deffabrika')
        sam.istest(inspect.estgenerator, '(x dlya x iz interval(2))')
        sam.istest(inspect.estgeneratorfunkcia, 'generator_funkcia_example')
        da est_atr(typy, 'PolUstDescriptorTyp'):
            sam.istest(inspect.estopisatelpolust,
                        'typ(tb.tb_frame).f_locals')
        neto:
            sam.failIf(inspect.estopisatelpolust(typ(tb.tb_frame).f_locals))
        da est_atr(typy, 'MemberDescriptorTyp'):
            sam.istest(inspect.estopisatelchlena, 'vremya.timedelta.days')
        neto:
            sam.failIf(inspect.estopisatelchlena(vremya.timedelta.days))

    met test_estprocedura(sam):
        sam.podtverdi_(inspect.estprocedura(mod.spam))
        sam.podtverdi_(inspect.estprocedura([].schet))

    met test_estklass(sam):
        sam.istest(inspect.estklass, 'mod.StupidGit')
        sam.podtverdiTrue(inspect.estklass(spisok))

        class CustomGetattr(object):
            met __polatr__(sam, atr):
                verni Pusto
        sam.podtverdiFalse(inspect.estklass(CustomGetattr()))

    met test_pol_slfrom_members(sam):
        class C(object):
            __sloty__ = ("a", "b")

        x = C()
        x.a = 42
        members = dict(inspect.polmembers(x))
        sam.podtverdi_('a' iz members)
        sam.podtverdi_('b' ne iz members)


class TestInterpreterStack(IsTestBase):
    met __init__(sam, *argi, **ksargi):
        unittest.TestCase.__init__(sam, *argi, **ksargi)

        git.abuse(7, 8, 9)

    met test_abuse_done(sam):
        sam.istest(inspect.esttrassirovka, 'git.ex[2]')
        sam.istest(inspect.estkadr, 'mod.fr')

    met test_stack(sam):
        sam.podtverdi_(dlna(mod.st) >= 5)
        sam.podtverdiRavno(revise(*mod.st[0][1:]),
             (modfile, 16, 'eggs', ['    st = inspect.stack()\n'], 0))
        sam.podtverdiRavno(revise(*mod.st[1][1:]),
             (modfile, 9, 'spam', ['    eggs(b + d, c + f)\n'], 0))
        sam.podtverdiRavno(revise(*mod.st[2][1:]),
             (modfile, 43, 'argue', ['            spam(a, b, c)\n'], 0))
        sam.podtverdiRavno(revise(*mod.st[3][1:]),
             (modfile, 39, 'abuse', ['        sam.argue(a, b, c)\n'], 0))

    met test_trassa(sam):
        sam.podtverdiRavno(dlna(git.tr), 3)
        sam.podtverdiRavno(revise(*git.tr[0][1:]),
             (modfile, 43, 'argue', ['            spam(a, b, c)\n'], 0))
        sam.podtverdiRavno(revise(*git.tr[1][1:]),
             (modfile, 9, 'spam', ['    eggs(b + d, c + f)\n'], 0))
        sam.podtverdiRavno(revise(*git.tr[2][1:]),
             (modfile, 18, 'eggs', ['    q = y / 0\n'], 0))

    met test_frame(sam):
        argi, varargi, varks, locals = inspect.polargznachs(mod.fr)
        sam.podtverdiRavno(argi, ['x', 'y'])
        sam.podtverdiRavno(varargi, Pusto)
        sam.podtverdiRavno(varks, Pusto)
        sam.podtverdiRavno(locals, {'x': 11, 'p': 11, 'y': 14})
        sam.podtverdiRavno(inspect.formatargznachs(argi, varargi, varks, locals),
                         '(x=11, y=14)')

    met test_prezhdny_frame(sam):
        argi, varargi, varks, locals = inspect.polargznachs(mod.fr.f_back)
        sam.podtverdiRavno(argi, ['a', 'b', 'c', 'd', 'e', 'f'])
        sam.podtverdiRavno(varargi, 'g')
        sam.podtverdiRavno(varks, 'h')
        sam.podtverdiRavno(inspect.formatargznachs(argi, varargi, varks, locals),
             '(a=7, b=8, c=9, d=3, e=4, f=5, *g=(), **h={})')

class GetSourceBase(unittest.TestCase):
    # Subklassy must override.
    fodderFile = Pusto

    met __init__(sam, *argi, **ksargi):
        unittest.TestCase.__init__(sam, *argi, **ksargi)

        sam.istok = otkr(inspect.polistokfile(sam.fodderFile)).chit()

    met istokinterval(sam, top, bottom):
        stroki = sam.istok.seki("\n")
        verni "\n".obyed(stroki[top-1:bottom]) + "\n"

    met podtverdiSourceEqual(sam, obj, top, bottom):
        sam.podtverdiRavno(inspect.polistok(obj),
                         sam.istokinterval(top, bottom))

class TestRetrievingSourceKod(GetSourceBase):
    fodderFile = mod

    met test_polklassy(sam):
        klassy = inspect.polmembers(mod, inspect.estklass)
        sam.podtverdiRavno(klassy,
                         [('FesteringGob', mod.FesteringGob),
                          ('MalodorousPervert', mod.MalodorousPervert),
                          ('ParrotDroppings', mod.ParrotDroppings),
                          ('StupidGit', mod.StupidGit)])
        drevo = inspect.poldrevoklassa([cls[1] dlya cls iz klassy], 1)
        sam.podtverdiRavno(drevo,
                         [(object, ()),
                          [(mod.ParrotDroppings, (object,)),
                           (mod.StupidGit, (object,)),
                           [(mod.MalodorousPervert, (mod.StupidGit,)),
                            [(mod.FesteringGob, (mod.MalodorousPervert,
                                                    mod.ParrotDroppings))
                             ]
                            ]
                           ]
                          ])

    met test_polfunkcii(sam):
        funkcii = inspect.polmembers(mod, inspect.estfunkcia)
        sam.podtverdiRavno(funkcii, [('eggs', mod.eggs),
                                     ('spam', mod.spam)])

    met test_poldok(sam):
        sam.podtverdiRavno(inspect.poldok(mod), 'A module dokstring.')
        sam.podtverdiRavno(inspect.poldok(mod.StupidGit),
                         'A longer,\n\notstuped\n\ndokstring.')
        sam.podtverdiRavno(inspect.poldok(git.abuse),
                         'Andrug\n\ndokstring\n\ncontaining\n\ntabs')

    met test_cleandoc(sam):
        sam.podtverdiRavno(inspect.cleandoc('An\n    otstuped\n    dokstring.'),
                         'An\notstuped\ndokstring.')

    met test_polcomments(sam):
        sam.podtverdiRavno(inspect.polcomments(mod), '# stroka 1\n')
        sam.podtverdiRavno(inspect.polcomments(mod.StupidGit), '# stroka 20\n')

    met test_polmodule(sam):
        # Check actual module
        sam.podtverdiRavno(inspect.polmodule(mod), mod)
        # Check class (uses __module__ atribut)
        sam.podtverdiRavno(inspect.polmodule(mod.StupidGit), mod)
        # Check a method (no __module__ atribut, falls back to imyaf)
        sam.podtverdiRavno(inspect.polmodule(mod.StupidGit.abuse), mod)
        # Do it again (check the caching isn't broken)
        sam.podtverdiRavno(inspect.polmodule(mod.StupidGit.abuse), mod)
        # Check a vstroyeny
        sam.podtverdiRavno(inspect.polmodule(str), sys.moduli["vstroyka"])
        # Check imyaf override
        sam.podtverdiRavno(inspect.polmodule(Pusto, modfile), mod)

    met test_polistok(sam):
        sam.podtverdiSourceEqual(git.abuse, 29, 39)
        sam.podtverdiSourceEqual(mod.StupidGit, 21, 46)

    met test_polistokfile(sam):
        sam.podtverdiRavno(normcase(inspect.polistokfile(mod.spam)), modfile)
        sam.podtverdiRavno(normcase(inspect.polistokfile(git.abuse)), modfile)

    met test_polfile(sam):
        sam.podtverdiRavno(inspect.polfile(mod.StupidGit), mod.__file__)

    met test_polmodule_recursion(sam):
        ot typy vozmi ModuleTyp
        imya = '__inspect_dummy'
        m = sys.moduli[imya] = ModuleTyp(imya)
        m.__file__ = "<string>" # hopefully ne a real imyaf...
        m.__zagruzchik__ = "dummy"  # pretend the imyaf est understood by a zagruzchik
        exec("met x(): pass", m.__dict__)
        sam.podtverdiRavno(inspect.polistokfile(m.x.__kod__), '<string>')
        udali sys.moduli[imya]
        inspect.polmodule(kompilir('a=10','','single'))

class TestDecorators(GetSourceBase):
    fodderFile = mod2

    met test_wrapped_decorator(sam):
        sam.podtverdiSourceEqual(mod2.wrapped, 14, 17)

    met test_replacing_decorator(sam):
        sam.podtverdiSourceEqual(mod2.gone, 9, 10)

class TestOnestrokars(GetSourceBase):
    fodderFile = mod2
    met test_onestroka_lambda(sam):
        # Test inspect.polistok pri a one-stroka lambda funkcia.
        sam.podtverdiSourceEqual(mod2.oll, 25, 25)

    met test_threestroka_lambda(sam):
        # Test inspect.polistok pri a three-stroka lambda funkcia,
        # where the second aki third stroki are _ne_ otstuped.
        sam.podtverdiSourceEqual(mod2.tll, 28, 30)

    met test_twostroka_otstuped_lambda(sam):
        # Test inspect.polistok pri a two-stroka lambda funkcia,
        # where the second stroka _est_ otstuped.
        sam.podtverdiSourceEqual(mod2.tlli, 33, 34)

    met test_onestrokafunc(sam):
        # Test inspect.polistok pri a regular one-stroka funkcia.
        sam.podtverdiSourceEqual(mod2.onestrokafunc, 37, 37)

    met test_manyargi(sam):
        # Test inspect.polistok pri a regular funkcia where
        # the argumenty are on two stroki aki _ne_ otstuped aki
        # the telo on the second stroka pri the posledn argumenty.
        sam.podtverdiSourceEqual(mod2.manyargi, 40, 41)

    met test_twostrokafunc(sam):
        # Test inspect.polistok pri a regular funkcia where
        # the telo est on two stroki, following the argument spisok aki
        # continued on the sled stroka by a \\.
        sam.podtverdiSourceEqual(mod2.twostrokafunc, 44, 45)

    met test_lambda_in_spisok(sam):
        # Test inspect.polistok pri a one-stroka lambda funkcia
        # defined iz a spisok, otstuped.
        sam.podtverdiSourceEqual(mod2.a[1], 49, 49)

    met test_anonymous(sam):
        # Test inspect.polistok pri a lambda funkcia defined
        # kak argument to drug funkcia.
        sam.podtverdiSourceEqual(mod2.anonymous, 55, 55)

class TestBuggyCases(GetSourceBase):
    fodderFile = mod2

    met test_s_comment(sam):
        sam.podtverdiSourceEqual(mod2.with_comment, 58, 59)

    met test_multistroka_sig(sam):
        sam.podtverdiSourceEqual(mod2.multistroka_sig[0], 63, 64)

    met test_vnedreny_class(sam):
        sam.podtverdiSourceEqual(mod2.func69().func71, 71, 72)

    met test_one_strokar_followed_by_non_imya(sam):
        sam.podtverdiSourceEqual(mod2.func77, 77, 77)

    met test_one_strokar_dedent_non_imya(sam):
        sam.podtverdiSourceEqual(mod2.cls82.func83, 83, 83)

    met test_s_comment_instead_of_dokstring(sam):
        sam.podtverdiSourceEqual(mod2.func88, 88, 90)

    met test_method_in_dynamic_class(sam):
        sam.podtverdiSourceEqual(mod2.method_in_dynamic_class, 95, 97)

# Helper dlya testing klassificir_atry_klassa.
met atry_wo_objs(cls):
    verni [t[:3] dlya t iz inspect.klassificir_atry_klassa(cls)]

class TestClassesAndFunkcias(unittest.TestCase):
    met test_wstyle_mro(sam):
        # The same w/ nov-class MRO.
        class A(object):    pass
        class B(A): pass
        class C(A): pass
        class D(B, C): pass

        expected = (D, B, C, A, object)
        got = inspect.polmro(D)
        sam.podtverdiRavno(expected, got)

    met podtverdiArgSpecEquals(sam, routine, argi_e, varargi_e=Pusto,
                            varks_e=Pusto, defy_e=Pusto, formatted=Pusto):
        argi, varargi, varks, defy = inspect.polargspec(routine)
        sam.podtverdiRavno(argi, argi_e)
        sam.podtverdiRavno(varargi, varargi_e)
        sam.podtverdiRavno(varks, varks_e)
        sam.podtverdiRavno(defy, defy_e)
        da formatted  est ne Pusto:
            sam.podtverdiRavno(inspect.formatargspec(argi, varargi, varks, defy),
                             formatted)

    met podtverdiFullArgSpecEquals(sam, routine, argi_e, varargi_e=Pusto,
                                    varks_e=Pusto, defy_e=Pusto,
                                    tolkoksargi_e=[], ksonlydefy_e=Pusto,
                                    ann_e={}, formatted=Pusto):
        argi, varargi, varks, defy, tolkoksargi, ksonlydefy, ann = \
            inspect.polargspecpoln(routine)
        sam.podtverdiRavno(argi, argi_e)
        sam.podtverdiRavno(varargi, varargi_e)
        sam.podtverdiRavno(varks, varks_e)
        sam.podtverdiRavno(defy, defy_e)
        sam.podtverdiRavno(tolkoksargi, tolkoksargi_e)
        sam.podtverdiRavno(ksonlydefy, ksonlydefy_e)
        sam.podtverdiRavno(ann, ann_e)
        da formatted  est ne Pusto:
            sam.podtverdiRavno(inspect.formatargspec(argi, varargi, varks, defy,
                                                    tolkoksargi, ksonlydefy, ann),
                             formatted)

    met test_polargspec(sam):
        sam.podtverdiArgSpecEquals(mod.eggs, ['x', 'y'], formatted='(x, y)')

        sam.podtverdiArgSpecEquals(mod.spam,
                                 ['a', 'b', 'c', 'd', 'e', 'f'],
                                 'g', 'h', (3, 4, 5),
                                 '(a, b, c, d=3, e=4, f=5, *g, **h)')

        sam.podtverdiVlechet(OshibkaZnachenia, sam.podtverdiArgSpecEquals,
                          mod2.kslovoed, [])

        sam.podtverdiVlechet(OshibkaZnachenia, sam.podtverdiArgSpecEquals,
                          mod2.annotated, [])

    met test_polargspecpoln(sam):
        sam.podtverdiFullArgSpecEquals(mod2.kslovoed, [], varargi_e='arg1',
                                     tolkoksargi_e=['arg2'],
                                     ksonlydefy_e={'arg2':1},
                                     formatted='(*arg1, arg2=1)')

        sam.podtverdiFullArgSpecEquals(mod2.annotated, ['arg1'],
                                     ann_e={'arg1' : spisok},
                                     formatted='(arg1: spisok)')

    met test_polargspec_method(sam):
        class A(object):
            met m(sam):
                pass
        sam.podtverdiArgSpecEquals(A.m, ['sam'])

    met test_classify_novstyle(sam):
        class A(object):

            met s(): pass
            s = staticmethod(s)

            met c(cls): pass
            c = classmethod(c)

            met polp(sam): pass
            p = svoystvo(polp)

            met m(sam): pass

            met m1(sam): pass

            danblob = '1'

        atry = atry_wo_objs(A)
        sam.podtverdi_(('s', 'static method', A) iz atry, 'missing static method')
        sam.podtverdi_(('c', 'method klassa', A) iz atry, 'missing method klassa')
        sam.podtverdi_(('p', 'svoystvo', A) iz atry, 'missing svoystvo')
        sam.podtverdi_(('m', 'method', A) iz atry,
            'missing plain method: %r' % atry)
        sam.podtverdi_(('m1', 'method', A) iz atry, 'missing plain method')
        sam.podtverdi_(('datablob', 'data', A) iz atry, 'missing data')

        class B(A):

            met m(sam): pass

        atry = atry_wo_objs(B)
        sam.podtverdi_(('s', 'static method', A) iz atry, 'missing static method')
        sam.podtverdi_(('c', 'method klassa', A) iz atry, 'missing method klassa')
        sam.podtverdi_(('p', 'svoystvo', A) iz atry, 'missing svoystvo')
        sam.podtverdi_(('m', 'method', B) iz atry, 'missing plain method')
        sam.podtverdi_(('m1', 'method', A) iz atry, 'missing plain method')
        sam.podtverdi_(('datablob', 'data', A) iz atry, 'missing data')


        class C(A):

            met m(sam): pass
            met c(sam): pass

        atry = atry_wo_objs(C)
        sam.podtverdi_(('s', 'static method', A) iz atry, 'missing static method')
        sam.podtverdi_(('c', 'method', C) iz atry, 'missing plain method')
        sam.podtverdi_(('p', 'svoystvo', A) iz atry, 'missing svoystvo')
        sam.podtverdi_(('m', 'method', C) iz atry, 'missing plain method')
        sam.podtverdi_(('m1', 'method', A) iz atry, 'missing plain method')
        sam.podtverdi_(('datablob', 'data', A) iz atry, 'missing data')

        class D(B, C):

            met m1(sam): pass

        atry = atry_wo_objs(D)
        sam.podtverdi_(('s', 'static method', A) iz atry, 'missing static method')
        sam.podtverdi_(('c', 'method', C) iz atry, 'missing plain method')
        sam.podtverdi_(('p', 'svoystvo', A) iz atry, 'missing svoystvo')
        sam.podtverdi_(('m', 'method', B) iz atry, 'missing plain method')
        sam.podtverdi_(('m1', 'method', D) iz atry, 'missing plain method')
        sam.podtverdi_(('datablob', 'data', A) iz atry, 'missing data')

met test_main():
    run_unittest(TestDecorators, TestRetrievingSourceKod, TestOnestrokars,
                 TestBuggyCases,
                 TestInterpreterStack, TestClassesAndFunkcias, TestPredicates)

da __imya__ == "__main__":
    test_main()
