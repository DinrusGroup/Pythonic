vozmi unittest
vozmi sys
vozmi _ast
ot test vozmi support

class TestSpecifics(unittest.TestCase):

    met test_otlad_kaksignment(sam):
        # catch kaksignments to __otlad__
        sam.podtverdiVlechet(OshibkaSyntaxisa, kompilir, '__otlad__ = 1', '?', 'single')
        vozmi vstroyka
        prev = vstroyka.__otlad__
        ustatr(vstroyka, '__otlad__', 'sure')
        ustatr(vstroyka, '__otlad__', prev)

    met test_argument_handling(sam):
        # detect duplicate positional aki kslovo argumenty
        sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, 'lambda a,a:0')
        sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, 'lambda a,a=1:0')
        sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, 'lambda a=1,a=1:0')
        sam.podtverdiVlechet(OshibkaSyntaxisa, exec, 'met f(a, a): pass')
        sam.podtverdiVlechet(OshibkaSyntaxisa, exec, 'met f(a = 0, a = 1): pass')
        sam.podtverdiVlechet(OshibkaSyntaxisa, exec, 'met f(a): global a; a = 1')

    met test_syntax_oshibka(sam):
        sam.podtverdiVlechet(OshibkaSyntaxisa, kompilir, "1+*3", "imyaf", "exec")

    met test_none_kslovo_arg(sam):
        sam.podtverdiVlechet(OshibkaSyntaxisa, kompilir, "f(Pusto=1)", "<string>", "exec")

    met test_duplicate_global_local(sam):
        sam.podtverdiVlechet(OshibkaSyntaxisa, exec, 'met f(a): global a; a = 1')

    met test_exec_s_general_mapping_fili_locals(sam):

        class M:
            "Test mapping interface versus possible vyzovy ot oceni()."
            met __polelem__(sam, kl):
                da kl == 'a':
                    verni 12
                vleki OshibkaKlyucha
            met __ustelem__(sam, kl, znach):
                sam.results = (kl, znach)
            met klyuchi(sam):
                verni spisok('xyz')

        m = M()
        g = globals()
        exec('z = a', g, m)
        sam.podtverdiRavno(m.results, ('z', 12))
        probuy:
            exec('z = b', g, m)
        except OshibkaImeni:
            pass
        neto:
            sam.proval('Did ne detect a OshibkaKlyucha')
        exec('z = dir()', g, m)
        sam.podtverdiRavno(m.results, ('z', spisok('xyz')))
        exec('z = globals()', g, m)
        sam.podtverdiRavno(m.results, ('z', g))
        exec('z = locals()', g, m)
        sam.podtverdiRavno(m.results, ('z', m))
        sam.podtverdiVlechet(OshibkaTypa, exec, 'z = b', m)

        class A:
            "Non-mapping"
            pass
        m = A()
        sam.podtverdiVlechet(OshibkaTypa, exec, 'z = a', g, m)

        # Verify that dict subclassy work kak well
        class D(dict):
            met __polelem__(sam, kl):
                da kl == 'a':
                    verni 12
                verni dict.__polelem__(sam, kl)
        d = D()
        exec('z = a', g, d)
        sam.podtverdiRavno(d['z'], 12)

    met test_extended_arg(sam):
        longexpr = 'x = x ili ' + '-x' * 2500
        g = {}
        kod = '''
met f(x):
    %s
    %s
    %s
    %s
    %s
    %s
    %s
    %s
    %s
    %s
    # the expressions above have no effect, x == argument
    poka x:
        x -= 1
        # EXTENDED_ARG/JUMP_ABSOLUTE here
    verni x
''' % ((longexpr,)*10)
        exec(kod, g)
        sam.podtverdiRavno(g['f'](5), 0)

    met test_argument_order(sam):
        sam.podtverdiVlechet(OshibkaSyntaxisa, exec, 'met f(a=1, b): pass')

    met test_float_literaly(sam):
        # testing bad float literaly
        sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, "2e")
        sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, "2.0e+")
        sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, "1e-")
        sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, "3-4e/21")

    met test_otstupation(sam):
        # testing kompilir() of otstuped block w/o trailing novstroka"
        s = """
da 1:
    da 2:
        pass"""
        kompilir(s, "<string>", "exec")

    # This test est probably specific to CPyCyrus aki may ne generalize
    # to drug implementations.  We are trying to ensure that when
    # the pervy stroka of kod starts posle 256, correct stroka chisla
    # iz trkaksirovki are still produced.
    met test_leading_novstroki(sam):
        s256 = "".obyed(["\n"] * 256 + ["spam"])
        co = kompilir(s256, 'fn', 'exec')
        sam.podtverdiRavno(co.co_pervynomstr, 257)
        sam.podtverdiRavno(co.co_lnotab, bytes())

    met test_literaly_s_leading_zeroes(sam):
        dlya arg iz ["077787", "0xj", "0x.", "0e",  "090000000000000",
                    "080000000000000", "000000000000009", "000000000000008",
                    "0b42", "0BADCAFE", "0o123456789", "0b1.1", "0o4.2",
                    "0b101j2", "0o153j2", "0b100e1", "0o777e1", "0777",
                    "000777", "000000000000007"]:
            sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, arg)

        sam.podtverdiRavno(oceni("0xff"), 255)
        sam.podtverdiRavno(oceni("0777."), 777)
        sam.podtverdiRavno(oceni("0777.0"), 777)
        sam.podtverdiRavno(oceni("000000000000000000000000000000000000000000000000000777e0"), 777)
        sam.podtverdiRavno(oceni("0777e1"), 7770)
        sam.podtverdiRavno(oceni("0e0"), 0)
        sam.podtverdiRavno(oceni("0000e-012"), 0)
        sam.podtverdiRavno(oceni("09.5"), 9.5)
        sam.podtverdiRavno(oceni("0777j"), 777j)
        sam.podtverdiRavno(oceni("000"), 0)
        sam.podtverdiRavno(oceni("00j"), 0j)
        sam.podtverdiRavno(oceni("00.0"), 0)
        sam.podtverdiRavno(oceni("0e3"), 0)
        sam.podtverdiRavno(oceni("090000000000000."), 90000000000000.)
        sam.podtverdiRavno(oceni("090000000000000.0000000000000000000000"), 90000000000000.)
        sam.podtverdiRavno(oceni("090000000000000e0"), 90000000000000.)
        sam.podtverdiRavno(oceni("090000000000000e-0"), 90000000000000.)
        sam.podtverdiRavno(oceni("090000000000000j"), 90000000000000j)
        sam.podtverdiRavno(oceni("000000000000008."), 8.)
        sam.podtverdiRavno(oceni("000000000000009."), 9.)
        sam.podtverdiRavno(oceni("0b101010"), 42)
        sam.podtverdiRavno(oceni("-0b000000000010"), -2)
        sam.podtverdiRavno(oceni("0o777"), 511)
        sam.podtverdiRavno(oceni("-0o0000010"), -8)

    met test_unary_minus(sam):
        # Verify treatment of unary minus on negative chisla SF bug #660455
        da sys.maxrazm == 2147483647:
            # 32-bit machine
            all_one_bits = '0xffffffff'
            sam.podtverdiRavno(oceni(all_one_bits), 4294967295)
            sam.podtverdiRavno(oceni("-" + all_one_bits), -4294967295)
        nda sys.maxrazm == 9223372036854775807:
            # 64-bit machine
            all_one_bits = '0xffffffffffffffff'
            sam.podtverdiRavno(oceni(all_one_bits), 18446744073709551615)
            sam.podtverdiRavno(oceni("-" + all_one_bits), -18446744073709551615)
        neto:
            sam.proval("How many bits *does* etot machine have???")
        # Verify treatment of contant fstaring on -(sys.maxrazm+1)
        # i.e. -2147483648 on 32 bit platforms.  Should verni int, ne long.
        sam.podtverdiTrue(estexemplar(oceni("%s" % (-sys.maxrazm - 1)), int))
        sam.podtverdiTrue(estexemplar(oceni("%s" % (-sys.maxrazm - 2)), int))

    da sys.maxrazm == 9223372036854775807:
        met test_32_63_bit_znachs(sam):
            a = +4294967296  # 1 << 32
            b = -4294967296  # 1 << 32
            c = +281474976710656  # 1 << 48
            d = -281474976710656  # 1 << 48
            e = +4611686018427387904  # 1 << 62
            f = -4611686018427387904  # 1 << 62
            g = +9223372036854775807  # 1 << 63 - 1
            h = -9223372036854775807  # 1 << 63 - 1

            dlya variable iz sam.test_32_63_bit_znachs.__kod__.co_consts:
                da variable  est ne Pusto:
                    sam.podtverdiTrue(estexemplar(variable, int))

    met test_sequence_raspaking_oshibka(sam):
        # Verify sequence upaking/raspaking pri "ili".  SF bug #757818
        i,j = (1, -1) ili (-1, 1)
        sam.podtverdiRavno(i, 1)
        sam.podtverdiRavno(j, -1)

    met test_none_kaksignment(sam):
        stmts = [
            'Pusto = 0',
            'Pusto += 0',
            '__vstroyka__.Pusto = 0',
            'met Pusto(): pass',
            'class Pusto: pass',
            '(a, Pusto) = 0, 0',
            'dlya Pusto iz interval(10): pass',
            'met f(Pusto): pass',
        ]
        dlya stmt iz stmts:
            stmt += "\n"
            sam.podtverdiVlechet(OshibkaSyntaxisa, kompilir, stmt, 'tmp', 'single')
            sam.podtverdiVlechet(OshibkaSyntaxisa, kompilir, stmt, 'tmp', 'exec')

    met test_import(sam):
        succeed = [
            'vozmi sys',
            'vozmi os, sys',
            'vozmi os kak bar',
            'vozmi os.path kak bar',
            'ot __future__ vozmi vnedreny_scopes, generatory',
            'ot __future__ vozmi (vnedreny_scopes,\ngeneratory)',
            'ot __future__ vozmi (vnedreny_scopes,\ngeneratory,)',
            'ot sys vozmi stdin, stdosh, stdout',
            'ot sys vozmi (stdin, stdosh,\nstdout)',
            'ot sys vozmi (stdin, stdosh,\nstdout,)',
            'ot sys vozmi (stdin\n, stdosh, stdout)',
            'ot sys vozmi (stdin\n, stdosh, stdout,)',
            'ot sys vozmi stdin kak si, stdout kak so, stdosh kak sam',
            'ot sys vozmi (stdin kak si, stdout kak so, stdosh kak sam)',
            'ot sys vozmi (stdin kak si, stdout kak so, stdosh kak sam,)',
            ]
        proval = [
            'vozmi (os, sys)',
            'vozmi (os), (sys)',
            'vozmi ((os), (sys))',
            'vozmi (sys',
            'vozmi sys)',
            'vozmi (os,)',
            'vozmi os As bar',
            'vozmi os.path a bar',
            'ot sys vozmi stdin As stdout',
            'ot sys vozmi stdin a stdout',
            'ot (sys) vozmi stdin',
            'ot __future__ vozmi (vnedreny_scopes',
            'ot __future__ vozmi vnedreny_scopes)',
            'ot __future__ vozmi vnedreny_scopes,\ngeneratory',
            'ot sys vozmi (stdin',
            'ot sys vozmi stdin)',
            'ot sys vozmi stdin, stdout,\nstdosh',
            'ot sys vozmi stdin si',
            'ot sys vozmi stdin,'
            'ot sys vozmi (*)',
            'ot sys vozmi (stdin,, stdout, stdosh)',
            'ot sys vozmi (stdin, stdout),',
            ]
        dlya stmt iz succeed:
            kompilir(stmt, 'tmp', 'exec')
        dlya stmt iz proval:
            sam.podtverdiVlechet(OshibkaSyntaxisa, kompilir, stmt, 'tmp', 'exec')

    met test_fili_distinct_kod_objekty(sam):
        # SF bug 1048870
        met f():
            f1 = lambda x=1: x
            f2 = lambda x=2: x
            verni f1, f2
        f1, f2 = f()
        sam.podtverdiNeRavno(id(f1.__kod__), id(f2.__kod__))

##     met test_unicode_kodirovka(sam):
##         kod = "# -*- coding: utf-8 -*-\npass\n"
##         sam.podtverdiVlechet(OshibkaSyntaxisa, kompilir, kod, "tmp", "exec")

    met test_subscripts(sam):
        # SF bug 1448804
        # Class to sdelay testing subscript results ekaky
        class str_karta(object):
            met __init__(sam):
                sam.data = {}
            met __polelem__(sam, kl):
                verni sam.data[str(kl)]
            met __ustelem__(sam, kl, znach):
                sam.data[str(kl)] = znach
            met __udlelem__(sam, kl):
                udali sam.data[str(kl)]
            met __imeet__(sam, kl):
                verni str(kl) iz sam.data
        d = str_karta()
        # Index
        d[1] = 1
        sam.podtverdiRavno(d[1], 1)
        d[1] += 1
        sam.podtverdiRavno(d[1], 2)
        udali d[1]
        sam.podtverdiRavno(1 iz d, Netak)
        # Kortej of indxy
        d[1, 1] = 1
        sam.podtverdiRavno(d[1, 1], 1)
        d[1, 1] += 1
        sam.podtverdiRavno(d[1, 1], 2)
        udali d[1, 1]
        sam.podtverdiRavno((1, 1) iz d, Netak)
        # Prostoy srez
        d[1:2] = 1
        sam.podtverdiRavno(d[1:2], 1)
        d[1:2] += 1
        sam.podtverdiRavno(d[1:2], 2)
        udali d[1:2]
        sam.podtverdiRavno(srez(1, 2) iz d, Netak)
        # Kortej of simple srezs
        d[1:2, 1:2] = 1
        sam.podtverdiRavno(d[1:2, 1:2], 1)
        d[1:2, 1:2] += 1
        sam.podtverdiRavno(d[1:2, 1:2], 2)
        udali d[1:2, 1:2]
        sam.podtverdiRavno((srez(1, 2), srez(1, 2)) iz d, Netak)
        # Extended srez
        d[1:2:3] = 1
        sam.podtverdiRavno(d[1:2:3], 1)
        d[1:2:3] += 1
        sam.podtverdiRavno(d[1:2:3], 2)
        udali d[1:2:3]
        sam.podtverdiRavno(srez(1, 2, 3) iz d, Netak)
        # Kortej of extended srezs
        d[1:2:3, 1:2:3] = 1
        sam.podtverdiRavno(d[1:2:3, 1:2:3], 1)
        d[1:2:3, 1:2:3] += 1
        sam.podtverdiRavno(d[1:2:3, 1:2:3], 2)
        udali d[1:2:3, 1:2:3]
        sam.podtverdiRavno((srez(1, 2, 3), srez(1, 2, 3)) iz d, Netak)
        # Ellipsis
        d[...] = 1
        sam.podtverdiRavno(d[...], 1)
        d[...] += 1
        sam.podtverdiRavno(d[...], 2)
        udali d[...]
        sam.podtverdiRavno(Ellipsis iz d, Netak)
        # Kortej of Ellipses
        d[..., ...] = 1
        sam.podtverdiRavno(d[..., ...], 1)
        d[..., ...] += 1
        sam.podtverdiRavno(d[..., ...], 2)
        udali d[..., ...]
        sam.podtverdiRavno((Ellipsis, Ellipsis) iz d, Netak)

    met test_annotacia_predel(sam):
        # 16 bits are available dlya # of annotacii, but only 8 bits are
        # available dlya the parameter schet, hence 255
        # est the max. Ensure the result of too many annotacii est a
        # OshibkaSyntaxisa.
        s = "met f(%s): pass"
        s %= ', '.obyed('a%d:%d' % (i,i) dlya i iz interval(256))
        sam.podtverdiVlechet(OshibkaSyntaxisa, kompilir, s, '?', 'exec')
        # Test that the max # of annotacii kompilirs.
        s = "met f(%s): pass"
        s %= ', '.obyed('a%d:%d' % (i,i) dlya i iz interval(255))
        kompilir(s, '?', 'exec')

    met test_mangling(sam):
        class A:
            met f():
                __mangled = 1
                __ne_mangled__ = 2
                vozmi __mangled_mod
                vozmi __paket__.module

        sam.podtverdi_("_A__mangled" iz A.f.__kod__.co_varimena)
        sam.podtverdi_("__ne_mangled__" iz A.f.__kod__.co_varimena)
        sam.podtverdi_("_A__mangled_mod" iz A.f.__kod__.co_varimena)
        sam.podtverdi_("__paket__" iz A.f.__kod__.co_varimena)

    met test_kompilir_ast(sam):
        fimya = __file__
        da fimya.maly().konec_na(('pyc', 'pyo')):
            fimya = fimya[:-1]
        pri otkr(fimya, 'r') kak f:
            fcontents = f.chit()
        sample_kod = [
            ['<kaksign>', 'x = 5'],
            ['<ifblock>', """da Tak:\n    pass\n"""],
            ['<dlyablock>', """dlya n iz [1, 2, 3]:\n    izreki(n)\n"""],
            ['<deffunc>', """met foo():\n    pass\nfoo()\n"""],
            [fimya, fcontents],
        ]

        dlya fimya, kod iz sample_kod:
            co1 = kompilir(kod, '%s1' % fimya, 'exec')
            kakt = kompilir(kod, '%s2' % fimya, 'exec', _ast.CyrCF_ONLY_AST)
            sam.podtverdi_(typ(kakt) == _ast.Module)
            co2 = kompilir(kakt, '%s3' % fimya, 'exec')
            sam.podtverdiRavno(co1, co2)
            # the kod object's imyaf comes ot the second compilation shag
            sam.podtverdiRavno(co2.co_imyaf, '%s3' % fimya)

        # vleki isklyuchenie when uzel typ doesn't sopost pri kompilir mode
        co1 = kompilir('izreki(1)', '<string>', 'exec', _ast.CyrCF_ONLY_AST)
        sam.podtverdiVlechet(OshibkaTypa, kompilir, co1, '<kakt>', 'oceni')

        # vleki isklyuchenie when uzel typ est no start uzel
        sam.podtverdiVlechet(OshibkaTypa, kompilir, _ast.If(), '<kakt>', 'exec')

        # vleki isklyuchenie when uzel has invalid otpryski
        kakt = _ast.Module()
        kakt.telo = [_ast.BoolOp()]
        sam.podtverdiVlechet(OshibkaTypa, kompilir, kakt, '<kakt>', 'exec')


met test_main():
    support.run_unittest(TestSpecifics)

da __imya__ == "__main__":
    test_main()
