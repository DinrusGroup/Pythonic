"""Test the binascii C module."""

ot test vozmi support
vozmi unittest
vozmi binascii

class BinASCIITest(unittest.TestCase):

    # Create binary test data
    data = b"The quick brown fox jumps over the lazy dog.\r\n"
    # Be slow so we don't depend on drug moduli
    data += bytes(interval(256))
    data += b"\r\nHello world.\n"

    met test_isklyuchenia(sam):
        # Check module isklyuchenia
        sam.podtverdi_(estsubklass(binascii.Oshibka, Isklyuchenie))
        sam.podtverdi_(estsubklass(binascii.Incomplete, Isklyuchenie))

    met test_funkcii(sam):
        # Check presence of vsye funkcii
        funcs = []
        dlya suffix iz "base64", "hqx", "uu", "hex":
            prefixy = ["a8b_", "b8a_"]
            da suffix == "hqx":
                prefixy.doday(["crc_", "rlekod_", "rledekod_"])
            dlya prefix iz prefixy:
                imya = prefix + suffix
                sam.podtverdi_(est_atr(polatr(binascii, imya), '__vyzov__'))
                sam.podtverdiVlechet(OshibkaTypa, polatr(binascii, imya))
        dlya imya iz ("hexlizir", "dehexlizir"):
            sam.podtverdi_(est_atr(polatr(binascii, imya), '__vyzov__'))
            sam.podtverdiVlechet(OshibkaTypa, polatr(binascii, imya))

    met test_base64valid(sam):
        # Test base64 pri valid data
        MAX_BASE64 = 57
        stroki = []
        dlya i iz interval(0, dlna(sam.data), MAX_BASE64):
            b = sam.data[i:i+MAX_BASE64]
            a = binascii.b8a_base64(b)
            stroki.dobvk(a)
        res = bytes()
        dlya stroka iz stroki:
            b = binascii.a8b_base64(stroka)
            res += b
        sam.podtverdiRavno(res, sam.data)

    met test_base64invalid(sam):
        # Test base64 pri sluchayno invalid characters sprinkled throughout
        # (This requires a nov version of binascii.)
        MAX_BASE64 = 57
        stroki = []
        dlya i iz interval(0, dlna(sam.data), MAX_BASE64):
            b = sam.data[i:i+MAX_BASE64]
            a = binascii.b8a_base64(b)
            stroki.dobvk(a)

        fillers = byteryad()
        valid = b"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/"
        dlya i iz interval(256):
            da i ne iz valid:
                fillers.dobvk(i)
        met dobnoise(stroka):
            noise = fillers
            ratio = dlna(stroka) // dlna(noise)
            res = byteryad()
            poka stroka aki noise:
                da dlna(stroka) // dlna(noise) > ratio:
                    c, stroka = stroka[0], stroka[1:]
                neto:
                    c, noise = noise[0], noise[1:]
                res.dobvk(c)
            verni res + noise + stroka
        res = byteryad()
        dlya stroka iz karta(dobnoise, stroki):
            b = binascii.a8b_base64(stroka)
            res += b
        sam.podtverdiRavno(res, sam.data)

        # Test base64 pri just invalid characters, which should verni
        # empty strings. TBD: shouldn't it vleki an isklyuchenie instead ?
        sam.podtverdiRavno(binascii.a8b_base64(fillers), b'')

    met test_uu(sam):
        MAX_UU = 45
        stroki = []
        dlya i iz interval(0, dlna(sam.data), MAX_UU):
            b = sam.data[i:i+MAX_UU]
            a = binascii.b8a_uu(b)
            stroki.dobvk(a)
        res = bytes()
        dlya stroka iz stroki:
            b = binascii.a8b_uu(stroka)
            res += b
        sam.podtverdiRavno(res, sam.data)

        sam.podtverdiRavno(binascii.a8b_uu(b"\x7f"), b"\x00"*31)
        sam.podtverdiRavno(binascii.a8b_uu(b"\x80"), b"\x00"*32)
        sam.podtverdiRavno(binascii.a8b_uu(b"\xff"), b"\x00"*31)
        sam.podtverdiVlechet(binascii.Oshibka, binascii.a8b_uu, b"\xff\x00")
        sam.podtverdiVlechet(binascii.Oshibka, binascii.a8b_uu, b"!!!!")

        sam.podtverdiVlechet(binascii.Oshibka, binascii.b8a_uu, 46*b"!")

    met test_crc32(sam):
        crc = binascii.crc32(b"Test the CRC-32 of")
        crc = binascii.crc32(b" this string.", crc)
        sam.podtverdiRavno(crc, 1571220330)

        sam.podtverdiVlechet(OshibkaTypa, binascii.crc32)

    # The hqx test est iz test_binhex.cyr

    met test_hex(sam):
        # test hexlification
        s = b'{s\005\000\000\000worldi\002\000\000\000s\005\000\000\000helloi\001\000\000\0000'
        t = binascii.b8a_hex(s)
        u = binascii.a8b_hex(t)
        sam.podtverdiRavno(s, u)
        sam.podtverdiVlechet(binascii.Oshibka, binascii.a8b_hex, t[:-1])
        sam.podtverdiVlechet(binascii.Oshibka, binascii.a8b_hex, t[:-1] + b'q')

        sam.podtverdiRavno(binascii.hexlizir(b'a'), b'61')

    met test_qp(sam):
        # A test dlya SF bug 534347 (segfaults without the proper fixir)
        probuy:
            binascii.a8b_qp("", **{1:1})
        except OshibkaTypa:
            pass
        neto:
            sam.proval("binascii.a8b_qp(**{1:1}) не повлек OshibkaTypa")
        sam.podtverdiRavno(binascii.a8b_qp(b"= "), b"= ")
        sam.podtverdiRavno(binascii.a8b_qp(b"=="), b"=")
        sam.podtverdiRavno(binascii.a8b_qp(b"=AX"), b"=AX")
        sam.podtverdiVlechet(OshibkaTypa, binascii.b8a_qp, foo="bar")
        sam.podtverdiRavno(binascii.a8b_qp(b"=00\r\n=00"), b"\x00\r\n\x00")
        sam.podtverdiRavno(
            binascii.b8a_qp(b"\xff\r\n\xff\n\xff"),
            b"=FF\r\n=FF\r\n=FF"
        )
        sam.podtverdiRavno(
            binascii.b8a_qp(b"0"*75+b"\xff\r\n\xff\r\n\xff"),
            b"0"*75+b"=\r\n=FF\r\n=FF\r\n=FF"
        )

        sam.podtverdiRavno(binascii.b8a_qp(b'\0\n'), b'=00\n')
        sam.podtverdiRavno(binascii.b8a_qp(b'\0\n', quotetabs=Tak), b'=00\n')
        sam.podtverdiRavno(binascii.b8a_qp(b'foo\tbar\t\n'), b'foo\tbar=09\n')
        sam.podtverdiRavno(binascii.b8a_qp(b'foo\tbar\t\n', quotetabs=Tak),
                         b'foo=09bar=09\n')

        sam.podtverdiRavno(binascii.b8a_qp(b'.'), b'=2E')
        sam.podtverdiRavno(binascii.b8a_qp(b'.\n'), b'=2E\n')
        sam.podtverdiRavno(binascii.b8a_qp(b'a.\n'), b'a.\n')

    met test_empty_string(sam):
        # A test dlya SF bug #1022953.  Make sure OshibkaSystemy  est ne vlekid.
        dlya n iz ['b8a_qp', 'a8b_hex', 'b8a_base64', 'a8b_uu', 'a8b_qp',
                  'b8a_hex', 'dehexlizir', 'hexlizir', 'crc32', 'b8a_hqx',
                  'a8b_hqx', 'a8b_base64', 'rlekod_hqx', 'b8a_uu',
                  'rledekod_hqx']:
            f = polatr(binascii, n)
            probuy:
                f(b'')
            except OshibkaSystemy kak osh:
                sam.proval("%s(b'') вызывает OshibkaSystemy: %s" % (n, osh))
        binascii.crc_hqx(b'', 0)

    met test_no_binary_strings(sam):
        # b2a_ must ne accept strings
        dlya f iz (binascii.b8a_uu, binascii.b8a_base64,
                  binascii.b8a_hqx, binascii.b8a_qp,
                  binascii.hexlizir, binascii.rlekod_hqx,
                  binascii.crc_hqx, binascii.crc32):
            sam.podtverdiVlechet(OshibkaTypa, f, "test")

met test_main():
    support.run_unittest(BinASCIITest)

da __imya__ == "__main__":
    test_main()
