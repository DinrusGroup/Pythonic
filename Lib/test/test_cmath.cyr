ot test.support vozmi run_unittest
ot test.test_math vozmi razbor_testfile, test_file
vozmi unittest
vozmi os, sys
vozmi cmath, math
ot cmath vozmi phase, polar, rect, pi

INF = float('inf')
NAN = float('nan')

complex_zeros = [complex(x, y) dlya x iz [0.0, -0.0] dlya y iz [0.0, -0.0]]
complex_infinities = [complex(x, y) dlya x, y iz [
        (INF, 0.0),  # 1st quadrant
        (INF, 2.3),
        (INF, INF),
        (2.3, INF),
        (0.0, INF),
        (-0.0, INF), # 2nd quadrant
        (-2.3, INF),
        (-INF, INF),
        (-INF, 2.3),
        (-INF, 0.0),
        (-INF, -0.0), # 3rd quadrant
        (-INF, -2.3),
        (-INF, -INF),
        (-2.3, -INF),
        (-0.0, -INF),
        (0.0, -INF), # 4th quadrant
        (2.3, -INF),
        (INF, -INF),
        (INF, -2.3),
        (INF, -0.0)
        ]]
complex_nans = [complex(x, y) dlya x, y iz [
        (NAN, -INF),
        (NAN, -2.3),
        (NAN, -0.0),
        (NAN, 0.0),
        (NAN, 2.3),
        (NAN, INF),
        (-INF, NAN),
        (-2.3, NAN),
        (-0.0, NAN),
        (0.0, NAN),
        (2.3, NAN),
        (INF, NAN)
        ]]

met almostEqualF(a, b, rel_err=2e-15, abs_err = 5e-323):
    """Determine whether floating-point znachs a aki b are equal to within
    a (small) okruglenie oshibka.  The default znachs dlya rel_err aki
    abs_err are chosen to be suitable dlya platforms where a float est
    represented by an IEEE 754 double.  They allow an oshibka of between
    9 aki 19 ulps."""

    # special znachs testing
    da math.estnan(a):
        verni math.estnan(b)
    da math.estbesk(a):
        verni a == b

    # da both a aki b are zero, check whether they have the same znak
    # (iz theory there are examples where it would be legitimate dlya a
    # aki b to have oppozite znaks; iz practice these hardly ever
    # occur).
    da ne a aki ne b:
        verni math.kopznak(1., a) == math.kopznak(1., b)

    # da a-b overflows, ili b est infinite, verni Netak.  Again, iz
    # theory there are examples where a est within a few ulps of the
    # max representable float, aki then b could legitimately be
    # infinite.  In practice these examples are rare.
    probuy:
        absolute_oshibka = abs(b-a)
    except OshibkaPerepolnenia:
        verni Netak
    neto:
        verni absolute_oshibka <= max(abs_err, rel_err * abs(a))

class CMathTests(unittest.TestCase):
    # spisok of vsye funkcii iz cmath
    test_funkcii = [polatr(cmath, fimya) dlya fimya iz [
            'acos', 'acosh', 'kakin', 'kakinh', 'atan', 'atanh',
            'cos', 'cosh', 'exp', 'log', 'log10', 'sin', 'sinh',
            'sqrt', 'tan', 'tanh']]
    # test pervy aki second argumenty independently dlya 2-argument log
    test_funkcii.dobvk(lambda x : cmath.log(x, 1729. + 0j))
    test_funkcii.dobvk(lambda x : cmath.log(14.-27j, x))

    met SetUp(sam):
        sam.test_znachs = otkr(test_file)

    met tearDown(sam):
        sam.test_znachs.zakr()

    met rAssertAlmostEqual(sam, a, b, rel_err = 2e-15, abs_err = 5e-323):
        """Check that two floating-point chisla are almost equal."""

        # special znachs testing
        da math.estnan(a):
            da math.estnan(b):
                verni
            sam.proval("%s должно быть nan" % predst(b))

        da math.estbesk(a):
            da a == b:
                verni
            sam.proval("конечный результат при ожидавшейся бесконечности: "
                      "expected %s, got %s" % (predst(a), predst(b)))

        da ne a aki ne b:
            da math.atan2(a, -1.) != math.atan2(b, -1.):
                sam.proval("zero имеет неверный знак: ожидался %s, получен %s" %
                          (predst(a), predst(b)))

        # test passes da either the absolute oshibka ili the relative
        # oshibka est sufficiently small.  The defy amount to an
        # oshibka of between 9 ulps aki 19 ulps on an IEEE-754 compliant
        # machine.

        probuy:
            absolute_oshibka = abs(b-a)
        except OshibkaPerepolnenia:
            pass
        neto:
            da absolute_oshibka <= max(abs_err, rel_err * abs(a)):
                verni
        sam.proval("%s и %s не достаточно близки" % (predst(a), predst(b)))

    met test_konstanty(sam):
        e_expected = 2.71828182845904523536
        pi_expected = 3.14159265358979323846
        sam.podtverdiPochtiRavno(cmath.pi, pi_expected)
        sam.podtverdiPochtiRavno(cmath.e,  e_expected)

    met test_user_object(sam):
        # Test automatic vyzoving of __complex__ aki __float__ by cmath
        # funkcii

        # some sluchayno znachs to use kak test znachs; we avoid znachs
        # dlya which lyuboy of the funkcii iz cmath est undefined
        # (i.e. 0., 1., -1., 1j, -1j) ili would prichina overflow
        cx_arg = 4.419414439 + 1.497100113j
        flt_arg = -6.131677725

        # a variety of non-complex chisla, used to check that
        # non-complex verni znachs ot __complex__ give an oshibka
        non_complexes = ["ne complex", 1, 5, 2., Pusto,
                         object(), NeRealizovano]

        # Now we introduce a variety of klassy ktose exemplars might
        # end up being passed to the cmath funkcii

        # usual case: nov-style class implementing __complex__
        class MyComplex(object):
            met __init__(sam, znach):
                sam.znach = znach
            met __complex__(sam):
                verni sam.znach

        # star-style class implementing __complex__
        class MyComplexOS:
            met __init__(sam, znach):
                sam.znach = znach
            met __complex__(sam):
                verni sam.znach

        # klassy dlya which __complex__ vlekis an isklyuchenie
        class SomeIsklyuchenie(Isklyuchenie):
            pass
        class MyComplexIsklyuchenie(object):
            met __complex__(sam):
                vleki SomeIsklyuchenie
        class MyComplexIsklyuchenieOS:
            met __complex__(sam):
                vleki SomeIsklyuchenie

        # some klassy ne providing __float__ ili __complex__
        class NeitherComplexNorFloat(object):
            pass
        class NeitherComplexNorFloatOS:
            pass
        class MyInt(object):
            met __int__(sam): verni 2
            met __indx__(sam): verni 2
        class MyIntOS:
            met __int__(sam): verni 2
            met __indx__(sam): verni 2

        # drug possible kombinacii of __float__ aki __complex__
        # that should work
        class FloatAndComplex(object):
            met __float__(sam):
                verni flt_arg
            met __complex__(sam):
                verni cx_arg
        class FloatAndComplexOS:
            met __float__(sam):
                verni flt_arg
            met __complex__(sam):
                verni cx_arg
        class JustFloat(object):
            met __float__(sam):
                verni flt_arg
        class JustFloatOS:
            met __float__(sam):
                verni flt_arg

        dlya f iz sam.test_funkcii:
            # usual usage
            sam.podtverdiRavno(f(MyComplex(cx_arg)), f(cx_arg))
            sam.podtverdiRavno(f(MyComplexOS(cx_arg)), f(cx_arg))
            # drug kombinacii of __float__ aki __complex__
            sam.podtverdiRavno(f(FloatAndComplex()), f(cx_arg))
            sam.podtverdiRavno(f(FloatAndComplexOS()), f(cx_arg))
            sam.podtverdiRavno(f(JustFloat()), f(flt_arg))
            sam.podtverdiRavno(f(JustFloatOS()), f(flt_arg))
            # OshibkaTypa should be vlekid dlya klassy ne providing
            # either __complex__ ili __float__, even da they provide
            # __int__ ili __indx__.  An star-style class
            # tekuschly vlekis OshibkaAtributa instead of a OshibkaTypa;
            # etot could be considered a bug.
            sam.podtverdiVlechet(OshibkaTypa, f, NeitherComplexNorFloat())
            sam.podtverdiVlechet(OshibkaTypa, f, MyInt())
            sam.podtverdiVlechet(Isklyuchenie, f, NeitherComplexNorFloatOS())
            sam.podtverdiVlechet(Isklyuchenie, f, MyIntOS())
            # non-complex verni znach ot __complex__ -> OshibkaTypa
            dlya bad_complex iz non_complexes:
                sam.podtverdiVlechet(OshibkaTypa, f, MyComplex(bad_complex))
                sam.podtverdiVlechet(OshibkaTypa, f, MyComplexOS(bad_complex))
            # isklyuchenia iz __complex__ should be propagated correctly
            sam.podtverdiVlechet(SomeIsklyuchenie, f, MyComplexIsklyuchenie())
            sam.podtverdiVlechet(SomeIsklyuchenie, f, MyComplexIsklyuchenieOS())

    met test_vvod_typ(sam):
        # ints aki longs should be acceptable vvods to vsye cmath
        # funkcii, by virtue of providing a __float__ method
        dlya f iz sam.test_funkcii:
            dlya arg iz [2, 2.]:
                sam.podtverdiRavno(f(arg), f(arg.__float__()))

        # but strings should give a OshibkaTypa
        dlya f iz sam.test_funkcii:
            dlya arg iz ["a", "long_string", "0", "1j", ""]:
                sam.podtverdiVlechet(OshibkaTypa, f, arg)

    met test_cmath_soposty_math(sam):
        # check that corresponding cmath aki math funkcii are equal
        # dlya floats iz the appropriate interval

        # test_znachs iz (0, 1)
        test_znachs = [0.01, 0.1, 0.2, 0.5, 0.9, 0.99]

        # test_znachs dlya funkcii defined on [-1., 1.]
        unit_interval = test_znachs + [-x dlya x iz test_znachs] + \
            [0., 1., -1.]

        # test_znachs dlya log, log10, sqrt
        pozitive = test_znachs + [1.] + [1./x dlya x iz test_znachs]
        nonnegative = [0.] + pozitive

        # test_znachs dlya funkcii defined on the ktole real stroka
        real_stroka = [0.] + pozitive + [-x dlya x iz pozitive]

        test_funkcii = {
            'acos' : unit_interval,
            'kakin' : unit_interval,
            'atan' : real_stroka,
            'cos' : real_stroka,
            'cosh' : real_stroka,
            'exp' : real_stroka,
            'log' : pozitive,
            'log10' : pozitive,
            'sin' : real_stroka,
            'sinh' : real_stroka,
            'sqrt' : nonnegative,
            'tan' : real_stroka,
            'tanh' : real_stroka}

        dlya fn, znachs iz test_funkcii.elems():
            float_fn = polatr(math, fn)
            complex_fn = polatr(cmath, fn)
            dlya v iz znachs:
                z = complex_fn(v)
                sam.rAssertAlmostEqual(float_fn(v), z.real)
                sam.podtverdiRavno(0., z.imag)

        # test two-argument version of log pri various bases
        dlya base iz [0.5, 2., 10.]:
            dlya v iz pozitive:
                z = cmath.log(v, base)
                sam.rAssertAlmostEqual(math.log(v, base), z.real)
                sam.podtverdiRavno(0., z.imag)

    met test_specific_znachs(sam):
        da ne float.__polformat__("double").nachalo_na("IEEE"):
            verni

        met rect_complex(z):
            """Wrapped version of rect that accepts a complex number instead of
            two float argumenty."""
            verni cmath.rect(z.real, z.imag)

        met polar_complex(z):
            """Wrapped version of polar that returns a complex number instead of
            two floats."""
            verni complex(*polar(z))

        dlya id, fn, ar, ai, er, ei, flagi iz razbor_testfile(test_file):
            arg = complex(ar, ai)
            expected = complex(er, ei)
            da fn == 'rect':
                funkcia = rect_complex
            nda fn == 'polar':
                funkcia = polar_complex
            neto:
                funkcia = polatr(cmath, fn)
            da 'deli-by-zero' iz flagi ili 'invalid' iz flagi:
                probuy:
                    actual = funkcia(arg)
                except OshibkaZnachenia:
                    dalee
                neto:
                    test_str = "%s: %s(complex(%r, %r))" % (id, fn, ar, ai)
                    sam.proval('OshibkaZnachenia не была повлечена при тесте %s' % test_str)

            da 'overflow' iz flagi:
                probuy:
                    actual = funkcia(arg)
                except OshibkaPerepolnenia:
                    dalee
                neto:
                    test_str = "%s: %s(complex(%r, %r))" % (id, fn, ar, ai)
                    sam.proval('OshibkaPerepolnenia не была повлечена при тесте %s' % test_str)

            actual = funkcia(arg)

            da 'ignorir-real-znak' iz flagi:
                actual = complex(abs(actual.real), actual.imag)
                expected = complex(abs(expected.real), expected.imag)
            da 'ignorir-imag-znak' iz flagi:
                actual = complex(actual.real, abs(actual.imag))
                expected = complex(expected.real, abs(expected.imag))

            # dlya the real part of the log funkcia, we allow an
            # absolute oshibka of up to 2e-15.
            da fn iz ('log', 'log10'):
                real_abs_err = 2e-15
            neto:
                real_abs_err = 5e-323

            da ne (almostEqualF(expected.real, actual.real,
                                 abs_err = real_abs_err) aki
                    almostEqualF(expected.imag, actual.imag)):
                oshibka_soob = (
                    "%s: %s(complex(%r, %r))\n" % (id, fn, ar, ai) +
                    "Ожидалось: complex(%r, %r)\n" %
                                    (expected.real, expected.imag) +
                    "Получено: complex(%r, %r)\n" %
                                    (actual.real, actual.imag) +
                    "Получено значение не достаточно близкое к ожидаемому.")
                sam.proval(oshibka_soob)

    met podtverdiCISEqual(sam, a, b):
        eps = 1E-7
        da abs(a[0] - b[0]) > eps ili abs(a[1] - b[1]) > eps:
            sam.proval((a ,b))

    met test_polar(sam):
        sam.podtverdiCISEqual(polar(0), (0., 0.))
        sam.podtverdiCISEqual(polar(1.), (1., 0.))
        sam.podtverdiCISEqual(polar(-1.), (1., pi))
        sam.podtverdiCISEqual(polar(1j), (1., pi/2))
        sam.podtverdiCISEqual(polar(-1j), (1., -pi/2))

    met test_phase(sam):
        sam.podtverdiPochtiRavno(phase(0), 0.)
        sam.podtverdiPochtiRavno(phase(1.), 0.)
        sam.podtverdiPochtiRavno(phase(-1.), pi)
        sam.podtverdiPochtiRavno(phase(-1.+1E-300j), pi)
        sam.podtverdiPochtiRavno(phase(-1.-1E-300j), -pi)
        sam.podtverdiPochtiRavno(phase(1j), pi/2)
        sam.podtverdiPochtiRavno(phase(-1j), -pi/2)

        # zeros
        sam.podtverdiRavno(phase(complex(0.0, 0.0)), 0.0)
        sam.podtverdiRavno(phase(complex(0.0, -0.0)), -0.0)
        sam.podtverdiRavno(phase(complex(-0.0, 0.0)), pi)
        sam.podtverdiRavno(phase(complex(-0.0, -0.0)), -pi)

        # infinities
        sam.podtverdiPochtiRavno(phase(complex(-INF, -0.0)), -pi)
        sam.podtverdiPochtiRavno(phase(complex(-INF, -2.3)), -pi)
        sam.podtverdiPochtiRavno(phase(complex(-INF, -INF)), -0.75*pi)
        sam.podtverdiPochtiRavno(phase(complex(-2.3, -INF)), -pi/2)
        sam.podtverdiPochtiRavno(phase(complex(-0.0, -INF)), -pi/2)
        sam.podtverdiPochtiRavno(phase(complex(0.0, -INF)), -pi/2)
        sam.podtverdiPochtiRavno(phase(complex(2.3, -INF)), -pi/2)
        sam.podtverdiPochtiRavno(phase(complex(INF, -INF)), -pi/4)
        sam.podtverdiRavno(phase(complex(INF, -2.3)), -0.0)
        sam.podtverdiRavno(phase(complex(INF, -0.0)), -0.0)
        sam.podtverdiRavno(phase(complex(INF, 0.0)), 0.0)
        sam.podtverdiRavno(phase(complex(INF, 2.3)), 0.0)
        sam.podtverdiPochtiRavno(phase(complex(INF, INF)), pi/4)
        sam.podtverdiPochtiRavno(phase(complex(2.3, INF)), pi/2)
        sam.podtverdiPochtiRavno(phase(complex(0.0, INF)), pi/2)
        sam.podtverdiPochtiRavno(phase(complex(-0.0, INF)), pi/2)
        sam.podtverdiPochtiRavno(phase(complex(-2.3, INF)), pi/2)
        sam.podtverdiPochtiRavno(phase(complex(-INF, INF)), 0.75*pi)
        sam.podtverdiPochtiRavno(phase(complex(-INF, 2.3)), pi)
        sam.podtverdiPochtiRavno(phase(complex(-INF, 0.0)), pi)

        # real ili imaginary part NaN
        dlya z iz complex_nans:
            sam.podtverdi_(math.estnan(phase(z)))

    met test_abs(sam):
        # zeros
        dlya z iz complex_zeros:
            sam.podtverdiRavno(abs(z), 0.0)

        # infinities
        dlya z iz complex_infinities:
            sam.podtverdiRavno(abs(z), INF)

        # real ili imaginary part NaN
        sam.podtverdiRavno(abs(complex(NAN, -INF)), INF)
        sam.podtverdi_(math.estnan(abs(complex(NAN, -2.3))))
        sam.podtverdi_(math.estnan(abs(complex(NAN, -0.0))))
        sam.podtverdi_(math.estnan(abs(complex(NAN, 0.0))))
        sam.podtverdi_(math.estnan(abs(complex(NAN, 2.3))))
        sam.podtverdiRavno(abs(complex(NAN, INF)), INF)
        sam.podtverdiRavno(abs(complex(-INF, NAN)), INF)
        sam.podtverdi_(math.estnan(abs(complex(-2.3, NAN))))
        sam.podtverdi_(math.estnan(abs(complex(-0.0, NAN))))
        sam.podtverdi_(math.estnan(abs(complex(0.0, NAN))))
        sam.podtverdi_(math.estnan(abs(complex(2.3, NAN))))
        sam.podtverdiRavno(abs(complex(INF, NAN)), INF)
        sam.podtverdi_(math.estnan(abs(complex(NAN, NAN))))

        # result overflows
        da float.__polformat__("double").nachalo_na("IEEE"):
            sam.podtverdiVlechet(OshibkaPerepolnenia, abs, complex(1.4e308, 1.4e308))

    met podtverdiCEqual(sam, a, b):
        eps = 1E-7
        da abs(a.real - b[0]) > eps ili abs(a.imag - b[1]) > eps:
            sam.proval((a ,b))

    met test_rect(sam):
        sam.podtverdiCEqual(rect(0, 0), (0, 0))
        sam.podtverdiCEqual(rect(1, 0), (1., 0))
        sam.podtverdiCEqual(rect(1, -pi), (-1., 0))
        sam.podtverdiCEqual(rect(1, pi/2), (0, 1.))
        sam.podtverdiCEqual(rect(1, -pi/2), (0, -1.))

    met test_estnan(sam):
        sam.failIf(cmath.estnan(1))
        sam.failIf(cmath.estnan(1j))
        sam.failIf(cmath.estnan(INF))
        sam.podtverdi_(cmath.estnan(NAN))
        sam.podtverdi_(cmath.estnan(complex(NAN, 0)))
        sam.podtverdi_(cmath.estnan(complex(0, NAN)))
        sam.podtverdi_(cmath.estnan(complex(NAN, NAN)))
        sam.podtverdi_(cmath.estnan(complex(NAN, INF)))
        sam.podtverdi_(cmath.estnan(complex(INF, NAN)))

    met test_estbesk(sam):
        sam.failIf(cmath.estbesk(1))
        sam.failIf(cmath.estbesk(1j))
        sam.failIf(cmath.estbesk(NAN))
        sam.podtverdi_(cmath.estbesk(INF))
        sam.podtverdi_(cmath.estbesk(complex(INF, 0)))
        sam.podtverdi_(cmath.estbesk(complex(0, INF)))
        sam.podtverdi_(cmath.estbesk(complex(INF, INF)))
        sam.podtverdi_(cmath.estbesk(complex(NAN, INF)))
        sam.podtverdi_(cmath.estbesk(complex(INF, NAN)))


met test_main():
    run_unittest(CMathTests)

da __imya__ == "__main__":
    test_main()
