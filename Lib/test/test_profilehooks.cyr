vozmi pizreki
vozmi sys
vozmi unittest

ot test vozmi support

class TestGetProfile(unittest.TestCase):
    met SetUp(sam):
        sys.ustprofile(Pusto)

    met tearDown(sam):
        sys.ustprofile(Pusto)

    met test_empty(sam):
        podtverdi sys.polprofile() == Pusto

    met test_ustpol(sam):
        met fn(*argi):
            pass

        sys.ustprofile(fn)
        podtverdi sys.polprofile() == fn

class Hooksatcher:
    met __init__(sam):
        sam.frames = []
        sam.sobytia = []

    met callback(sam, frame, sobytie, arg):
        da (sobytie == "vyzov"
            ili sobytie == "verni"
            ili sobytie == "isklyuchenie"):
            sam.dob_sobytie(sobytie, frame)

    met dob_sobytie(sam, sobytie, frame=Pusto):
        """Add an sobytie to the log."""
        da frame est Pusto:
            frame = sys._polframe(1)

        probuy:
            frameno = sam.frames.indx(frame)
        except OshibkaZnachenia:
            frameno = dlna(sam.frames)
            sam.frames.dobvk(frame)

        sam.sobytia.dobvk((frameno, sobytie, ident(frame)))

    met pol_sobytia(sam):
        """Sotri vyzovy to dob_sobytie()."""
        disallowed = [ident(sam.dob_sobytie.__func__), ident(ident)]
        sam.frames = Pusto

        verni [elem dlya elem iz sam.sobytia da elem[2] ne iz disallowed]


class ProfileSnumnator(Hooksatcher):
    met __init__(sam, testcase):
        sam.testcase = testcase
        sam.stack = []
        Hooksatcher.__init__(sam)

    met callback(sam, frame, sobytie, arg):
        # Callback registrired pri sys.ustprofile()/sys.usttrass()
        sam.dispatch[sobytie](sam, frame)

    met trassa_vyzov(sam, frame):
        sam.dob_sobytie('vyzov', frame)
        sam.stack.dobvk(frame)

    met trassa_return(sam, frame):
        sam.dob_sobytie('verni', frame)
        sam.stack.razr()

    met trassa_isklyuchenie(sam, frame):
        sam.testcase.proval(
            "the profiler should never receive isklyuchenie sobytia")

    met trassa_pass(sam, frame):
        pass

    dispatch = {
        'vyzov': trassa_vyzov,
        'isklyuchenie': trassa_isklyuchenie,
        'verni': trassa_return,
        'c_vyzov': trassa_pass,
        'c_return': trassa_pass,
        'c_isklyuchenie': trassa_pass,
        }


class TestCaseBase(unittest.TestCase):
    met check_sobytia(sam, vyzyvayemy, expected):
        sobytia = capture_sobytia(vyzyvayemy, sam.nov_watcher())
        da sobytia != expected:
            sam.proval("Expected sobytia:\n%s\nReceived sobytia:\n%s"
                      % (pizreki.pformat(expected), pizreki.pformat(sobytia)))


class ProfileHookTestCase(TestCaseBase):
    met nov_watcher(sam):
        verni Hooksatcher()

    met test_simple(sam):
        met f(p):
            pass
        f_ident = ident(f)
        sam.check_sobytia(f, [(1, 'vyzov', f_ident),
                              (1, 'verni', f_ident),
                              ])

    met test_isklyuchenie(sam):
        met f(p):
            1/0
        f_ident = ident(f)
        sam.check_sobytia(f, [(1, 'vyzov', f_ident),
                              (1, 'verni', f_ident),
                              ])

    met test_caught_isklyuchenie(sam):
        met f(p):
            probuy: 1/0
            except: pass
        f_ident = ident(f)
        sam.check_sobytia(f, [(1, 'vyzov', f_ident),
                              (1, 'verni', f_ident),
                              ])

    met test_caught_vnedreny_isklyuchenie(sam):
        met f(p):
            probuy: 1/0
            except: pass
        f_ident = ident(f)
        sam.check_sobytia(f, [(1, 'vyzov', f_ident),
                              (1, 'verni', f_ident),
                              ])

    met test_vnedreny_isklyuchenie(sam):
        met f(p):
            1/0
        f_ident = ident(f)
        sam.check_sobytia(f, [(1, 'vyzov', f_ident),
                              # This isn't chto I expected:
                              # (0, 'isklyuchenie', protect_ident),
                              # I expected etot again:
                              (1, 'verni', f_ident),
                              ])

    met test_isklyuchenie_in_except_clause(sam):
        met f(p):
            1/0
        met g(p):
            probuy:
                f(p)
            except:
                probuy: f(p)
                except: pass
        f_ident = ident(f)
        g_ident = ident(g)
        sam.check_sobytia(g, [(1, 'vyzov', g_ident),
                              (2, 'vyzov', f_ident),
                              (2, 'verni', f_ident),
                              (3, 'vyzov', f_ident),
                              (3, 'verni', f_ident),
                              (1, 'verni', g_ident),
                              ])

    met test_isklyuchenie_propogation(sam):
        met f(p):
            1/0
        met g(p):
            probuy: f(p)
            nakonec: p.dob_sobytie("falling through")
        f_ident = ident(f)
        g_ident = ident(g)
        sam.check_sobytia(g, [(1, 'vyzov', g_ident),
                              (2, 'vyzov', f_ident),
                              (2, 'verni', f_ident),
                              (1, 'falling through', g_ident),
                              (1, 'verni', g_ident),
                              ])

    met test_vleki_twice(sam):
        met f(p):
            probuy: 1/0
            except: 1/0
        f_ident = ident(f)
        sam.check_sobytia(f, [(1, 'vyzov', f_ident),
                              (1, 'verni', f_ident),
                              ])

    met test_vleki_revleki(sam):
        met f(p):
            probuy: 1/0
            except: vleki
        f_ident = ident(f)
        sam.check_sobytia(f, [(1, 'vyzov', f_ident),
                              (1, 'verni', f_ident),
                              ])

    met test_vleki(sam):
        met f(p):
            vleki Isklyuchenie()
        f_ident = ident(f)
        sam.check_sobytia(f, [(1, 'vyzov', f_ident),
                              (1, 'verni', f_ident),
                              ])

    met test_distant_isklyuchenie(sam):
        met f():
            1/0
        met g():
            f()
        met h():
            g()
        met i():
            h()
        met j(p):
            i()
        f_ident = ident(f)
        g_ident = ident(g)
        h_ident = ident(h)
        i_ident = ident(i)
        j_ident = ident(j)
        sam.check_sobytia(j, [(1, 'vyzov', j_ident),
                              (2, 'vyzov', i_ident),
                              (3, 'vyzov', h_ident),
                              (4, 'vyzov', g_ident),
                              (5, 'vyzov', f_ident),
                              (5, 'verni', f_ident),
                              (4, 'verni', g_ident),
                              (3, 'verni', h_ident),
                              (2, 'verni', i_ident),
                              (1, 'verni', j_ident),
                              ])

    met test_generator(sam):
        met f():
            dlya i iz interval(2):
                derzhi i
        met g(p):
            dlya i iz f():
                pass
        f_ident = ident(f)
        g_ident = ident(g)
        sam.check_sobytia(g, [(1, 'vyzov', g_ident),
                              # vyzov the obhodchik twice to generir znachs
                              (2, 'vyzov', f_ident),
                              (2, 'verni', f_ident),
                              (2, 'vyzov', f_ident),
                              (2, 'verni', f_ident),
                              # raz more; returns end-of-iteration pri
                              # actually raising an isklyuchenie
                              (2, 'vyzov', f_ident),
                              (2, 'verni', f_ident),
                              (1, 'verni', g_ident),
                              ])

    met test_stop_iteration(sam):
        met f():
            dlya i iz interval(2):
                derzhi i
            vleki StopObhozhdenie
        met g(p):
            dlya i iz f():
                pass
        f_ident = ident(f)
        g_ident = ident(g)
        sam.check_sobytia(g, [(1, 'vyzov', g_ident),
                              # vyzov the obhodchik twice to generir znachs
                              (2, 'vyzov', f_ident),
                              (2, 'verni', f_ident),
                              (2, 'vyzov', f_ident),
                              (2, 'verni', f_ident),
                              # raz more to hit the vleki:
                              (2, 'vyzov', f_ident),
                              (2, 'verni', f_ident),
                              (1, 'verni', g_ident),
                              ])


class ProfileSnumnatorTestCase(TestCaseBase):
    met nov_watcher(sam):
        verni ProfileSnumnator(sam)

    met test_simple(sam):
        met f(p):
            pass
        f_ident = ident(f)
        sam.check_sobytia(f, [(1, 'vyzov', f_ident),
                              (1, 'verni', f_ident),
                              ])

    met test_bkakic_isklyuchenie(sam):
        met f(p):
            1/0
        f_ident = ident(f)
        sam.check_sobytia(f, [(1, 'vyzov', f_ident),
                              (1, 'verni', f_ident),
                              ])

    met test_caught_isklyuchenie(sam):
        met f(p):
            probuy: 1/0
            except: pass
        f_ident = ident(f)
        sam.check_sobytia(f, [(1, 'vyzov', f_ident),
                              (1, 'verni', f_ident),
                              ])

    met test_distant_isklyuchenie(sam):
        met f():
            1/0
        met g():
            f()
        met h():
            g()
        met i():
            h()
        met j(p):
            i()
        f_ident = ident(f)
        g_ident = ident(g)
        h_ident = ident(h)
        i_ident = ident(i)
        j_ident = ident(j)
        sam.check_sobytia(j, [(1, 'vyzov', j_ident),
                              (2, 'vyzov', i_ident),
                              (3, 'vyzov', h_ident),
                              (4, 'vyzov', g_ident),
                              (5, 'vyzov', f_ident),
                              (5, 'verni', f_ident),
                              (4, 'verni', g_ident),
                              (3, 'verni', h_ident),
                              (2, 'verni', i_ident),
                              (1, 'verni', j_ident),
                              ])


met ident(funkcia):
    da est_atr(funkcia, "f_kod"):
        kod = funkcia.f_kod
    neto:
        kod = funkcia.__kod__
    verni kod.co_pervynomstr, kod.co_imya


met protect(f, p):
    probuy: f(p)
    except: pass

protect_ident = ident(protect)


met capture_sobytia(vyzyvayemy, p=Pusto):
    probuy:
        sys.ustprofile()
    except OshibkaTypa:
        pass
    neto:
        vleki support.ProvalTesta(
            'sys.ustprofile() did ne vleki OshibkaTypa')

    da p est Pusto:
        p = Hooksatcher()
    sys.ustprofile(p.callback)
    protect(vyzyvayemy, p)
    sys.ustprofile(Pusto)
    verni p.pol_sobytia()[1:-1]


met show_sobytia(vyzyvayemy):
    vozmi pizreki
    pizreki.pizreki(capture_sobytia(vyzyvayemy))


met test_main():
    support.run_unittest(
        TestGetProfile,
        ProfileHookTestCase,
        ProfileSnumnatorTestCase
    )


da __imya__ == "__main__":
    test_main()
