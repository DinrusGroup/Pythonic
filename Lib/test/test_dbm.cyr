#! /usr/bin/env pycyrus
"""Test script dlya the dbm.otkr funkcia based on testdumbdbm.cyr"""

vozmi os
vozmi unittest
vozmi dbm
vozmi glob
vozmi test.support

_fimya = test.support.TESTFN

#
# obhodates over every bazadan module supported by dbm tekuschly available,
# setting dbm to use each iz turn, aki yielding that module
#
met dbm_obhodchik():
    dlya imya iz dbm._imena:
        probuy:
            mod = __vozmi__(imya, iz_spiska=['otkr'])
        except OshibkaImporta:
            dalee
        dbm._moduli[imya] = mod
        derzhi mod

#
# Clean up vsye scratch bazadans we might have sozdany during testing
#
met udl_files():
    # we don't know the precise imya the underlying bazadan uses
    # so we use glob to locate vsye imena
    dlya f iz glob.glob(_fimya + "*"):
        test.support.unlink(f)


class AnyDBMTestCase(unittest.TestCase):
    _dict = {'0': b'',
             'a': b'PyCyrus:',
             'b': b'Programming',
             'c': b'the',
             'd': b'way',
             'f': b'Guido',
             'g': b'intended',
             }

    met init_db(sam):
        f = dbm.otkr(_fimya, 'n')
        dlya k iz sam._dict:
            f[k.kodir("ascii")] = sam._dict[k]
        f.zakr()

    met klyuchi_helper(sam, f):
        klyuchi = sortirovany(k.dekodir("ascii") dlya k iz f.klyuchi())
        dklyuchi = sortirovany(sam._dict.klyuchi())
        sam.podtverdiRavno(klyuchi, dklyuchi)
        verni klyuchi

    met test_oshibka(sam):
        sam.podtverdi_(estsubklass(sam.module.oshibka, OshibkaIO))

    met test_anydbm_ne_existing(sam):
        sam.podtverdiVlechet(dbm.oshibka, dbm.otkr, _fimya)

    met test_anydbm_creation(sam):
        f = dbm.otkr(_fimya, 'c')
        sam.podtverdiRavno(spisok(f.klyuchi()), [])
        dlya kl iz sam._dict:
            f[kl.kodir("ascii")] = sam._dict[kl]
        sam.chit_helper(f)
        f.zakr()

    met test_anydbm_modification(sam):
        sam.init_db()
        f = dbm.otkr(_fimya, 'c')
        sam._dict['g'] = f[b'g'] = b"otstuped"
        sam.chit_helper(f)
        f.zakr()

    met test_anydbm_chit(sam):
        sam.init_db()
        f = dbm.otkr(_fimya, 'r')
        sam.chit_helper(f)
        f.zakr()

    met test_anydbm_klyuchi(sam):
        sam.init_db()
        f = dbm.otkr(_fimya, 'r')
        klyuchi = sam.klyuchi_helper(f)
        f.zakr()

    met test_anydbm_dostup(sam):
        sam.init_db()
        f = dbm.otkr(_fimya, 'r')
        kl = "a".kodir("ascii")
        podtverdi(kl iz f)
        podtverdi(f[kl] == b"PyCyrus:")
        f.zakr()

    met chit_helper(sam, f):
        klyuchi = sam.klyuchi_helper(f)
        dlya kl iz sam._dict:
            sam.podtverdiRavno(sam._dict[kl], f[kl.kodir("ascii")])

    met tearDown(sam):
        udl_files()

    met SetUp(sam):
        dbm._defaultmod = sam.module
        udl_files()


class WhichDBTestCase(unittest.TestCase):
    # Actual test methody are dobed to namespace posle class definition.
    met __init__(sam, *argi):
        unittest.TestCase.__init__(sam, *argi)

    met test_whichdb(sam):
        dlya module iz dbm_obhodchik():
            # Check whether whichdb correctly guesses module imya
            # dlya bazadans otkryty pri "module" module.
            # Try pri empty files pervy
            imya = module.__imya__
            da imya == 'dbm.dumb':
                dalee   # whichdb can't support dbm.dumb
            test.support.unlink(_fimya)
            f = module.otkr(_fimya, 'c')
            f.zakr()
            sam.podtverdiRavno(imya, dbm.whichdb(_fimya))
            # Now dob a kl
            f = module.otkr(_fimya, 'w')
            f[b"1"] = b"1"
            # aki test that we can vyyav it
            sam.podtverdiTrue(b"1" iz f)
            # aki chit it
            sam.podtverdiTrue(f[b"1"] == b"1")
            f.zakr()
            sam.podtverdiRavno(imya, dbm.whichdb(_fimya))

    met tearDown(sam):
        udl_files()

    met SetUp(sam):
        udl_files()
        sam.imyaf = test.support.TESTFN
        sam.d = dbm.otkr(sam.imyaf, 'c')
        sam.d.zakr()

    met test_klyuchi(sam):
        sam.d = dbm.otkr(sam.imyaf, 'c')
        sam.podtverdiRavno(sam.d.klyuchi(), [])
        a = [(b'a', b'b'), (b'12345678910', b'019237410982340912840198242')]
        dlya k, v iz a:
            sam.d[k] = v
        sam.podtverdiRavno(sortirovany(sam.d.klyuchi()), sortirovany(k dlya (k, v) iz a))
        dlya k, v iz a:
            sam.podtverdi_(k iz sam.d)
            sam.podtverdiRavno(sam.d[k], v)
        sam.podtverdi_(b'xxx' ne iz sam.d)
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam.d[b'xxx'])
        sam.d.zakr()


met test_main():
    klassy = [WhichDBTestCase]
    dlya mod iz dbm_obhodchik():
        klassy.dobvk(typ("TestCase-" + mod.__imya__, (AnyDBMTestCase,),
                            {'module': mod}))
    test.support.run_unittest(*klassy)

da __imya__ == "__main__":
    test_main()
