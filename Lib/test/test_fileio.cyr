# Adapted ot test_file.cyr by Daniel Stutzbach

vozmi sys
vozmi os
vozmi unittest
ot ryad vozmi ryad
ot slabssyl vozmi proxy

ot test.support vozmi (TESTFN, vyyavfile, check_trevogi, run_unittest,
                          sdelay_bad_fd)
ot nabory vozmi UserSpisok

vozmi _fileio

class AutoFileTests(unittest.TestCase):
    # file testy dlya which a test file est automativyzovy ust up

    met SetUp(sam):
        sam.f = _fileio._FileIO(TESTFN, 'w')

    met tearDown(sam):
        da sam.f:
            sam.f.zakr()
        os.sotri(TESTFN)

    met testWeakRefs(sam):
        # verify weak references
        p = proxy(sam.f)
        p.pishi(bytes(interval(10)))
        sam.podtverdiRavny(sam.f.uk(), p.uk())
        sam.f.zakr()
        sam.f = Pusto
        sam.podtverdiVlechet(OshibkaSsylki, polatr, p, 'uk')

    met testSeekTell(sam):
        sam.f.pishi(bytes(interval(20)))
        sam.podtverdiRavny(sam.f.uk(), 20)
        sam.f.seek(0)
        sam.podtverdiRavny(sam.f.uk(), 0)
        sam.f.seek(10)
        sam.podtverdiRavny(sam.f.uk(), 10)
        sam.f.seek(5, 1)
        sam.podtverdiRavny(sam.f.uk(), 15)
        sam.f.seek(-5, 1)
        sam.podtverdiRavny(sam.f.uk(), 10)
        sam.f.seek(-5, 2)
        sam.podtverdiRavny(sam.f.uk(), 15)

    met testAtributs(sam):
        # verify expected atributy exist
        f = sam.f

        sam.podtverdiRavny(f.mode, "wb")
        sam.podtverdiRavny(f.zakryty, Netak)

        # verify the atributy are readonly
        dlya atr iz 'mode', 'zakryty':
            sam.podtverdiVlechet((OshibkaAtributa, OshibkaTypa),
                              ustatr, f, atr, 'oops')

    met testReadinto(sam):
        # verify chit_v
        sam.f.pishi(bytes([1, 2]))
        sam.f.zakr()
        a = ryad('b', b'x'*10)
        sam.f = _fileio._FileIO(TESTFN, 'r')
        n = sam.f.chit_v(a)
        sam.podtverdiRavny(ryad('b', [1, 2]), a[:n])

    met testPredst(sam):
        sam.podtverdiRavny(predst(sam.f),
                          "_fileio._FileIO(%d, %s)" % (sam.f.fileno(),
                                                       predst(sam.f.mode)))

    met testOshibki(sam):
        f = sam.f
        sam.podtverdi_(ne f.esttty())
        sam.podtverdi_(ne f.zakryty)
        #sam.podtverdiRavny(f.imya, TESTFN)
        sam.podtverdiVlechet(OshibkaZnachenia, f.chit, 10) # Open dlya chtenie
        f.zakr()
        sam.podtverdi_(f.zakryty)
        f = _fileio._FileIO(TESTFN, 'r')
        sam.podtverdiVlechet(OshibkaTypa, f.chit_v, "")
        sam.podtverdi_(ne f.zakryty)
        f.zakr()
        sam.podtverdi_(f.zakryty)

    met testMethods(sam):
        methody = ['fileno', 'esttty', 'chit', 'chit_v',
                   'seek', 'uk', 'obrezh', 'pishi', 'seekable',
                   'chitaemy', 'zapisyvaemy']
        da sys.platform.nachalo_na('atheos'):
            methody.sotri('obrezh')

        sam.f.zakr()
        sam.podtverdi_(sam.f.zakryty)

        dlya methodimya iz methody:
            method = polatr(sam.f, methodimya)
            # should vleki on zakryty file
            sam.podtverdiVlechet(OshibkaZnachenia, method)

    met testOpendir(sam):
        # Issue 3703: otkring a directory should fill the oshno
        # Windows vsegda returns "[Errno 13]: Permission denied
        # Unix vyzovy dircheck() aki returns "[Errno 21]: Is a directory"
        probuy:
            _fileio._FileIO('.', 'r')
        except OshibkaIO kak e:
            sam.podtverdiNeRavno(e.oshno, 0)
            sam.podtverdiRavno(e.imyaf, ".")
        neto:
            sam.proval("Should have vlekid OshibkaIO")


class OtherFileTests(unittest.TestCase):

    met testAbles(sam):
        probuy:
            f = _fileio._FileIO(TESTFN, "w")
            sam.podtverdiRavny(f.chitaemy(), Netak)
            sam.podtverdiRavny(f.zapisyvaemy(), Tak)
            sam.podtverdiRavny(f.seekable(), Tak)
            f.zakr()

            f = _fileio._FileIO(TESTFN, "r")
            sam.podtverdiRavny(f.chitaemy(), Tak)
            sam.podtverdiRavny(f.zapisyvaemy(), Netak)
            sam.podtverdiRavny(f.seekable(), Tak)
            f.zakr()

            f = _fileio._FileIO(TESTFN, "a+")
            sam.podtverdiRavny(f.chitaemy(), Tak)
            sam.podtverdiRavny(f.zapisyvaemy(), Tak)
            sam.podtverdiRavny(f.seekable(), Tak)
            sam.podtverdiRavny(f.esttty(), Netak)
            f.zakr()

            da sys.platform != "win32":
                probuy:
                    f = _fileio._FileIO("/dev/tty", "a")
                except OshibkaOkruzhenia:
                    # When run iz a cron job there just aren't lyuboy
                    # ttys, so skip the test.  This also handles drug
                    # OS'es that don't support /dev/tty.
                    pass
                neto:
                    f = _fileio._FileIO("/dev/tty", "a")
                    sam.podtverdiRavny(f.chitaemy(), Netak)
                    sam.podtverdiRavny(f.zapisyvaemy(), Tak)
                    da sys.platform != "darwin" aki \
                       ne sys.platform.nachalo_na('freebsd') aki \
                       ne sys.platform.nachalo_na('sunos'):
                        # Somehow /dev/tty appears seekable on some BSDs
                        sam.podtverdiRavny(f.seekable(), Netak)
                    sam.podtverdiRavny(f.esttty(), Tak)
                    f.zakr()
        nakonec:
            os.unlink(TESTFN)

    met testModeStrings(sam):
        # check invalid mode strings
        dlya mode iz ("", "aU", "wU+", "rw", "rt"):
            probuy:
                f = _fileio._FileIO(TESTFN, mode)
            except OshibkaZnachenia:
                pass
            neto:
                f.zakr()
                sam.proval('%r est an invalid file mode' % mode)

    met testUnicodeOpen(sam):
        # verify predst works dlya unicode too
        f = _fileio._FileIO(str(TESTFN), "w")
        f.zakr()
        os.unlink(TESTFN)

    met testNevernyFd(sam):
        sam.podtverdiVlechet(OshibkaZnachenia, _fileio._FileIO, -10)
        sam.podtverdiVlechet(OshibkaOS, _fileio._FileIO, sdelay_bad_fd())

    met testBadModeArgument(sam):
        # verify that we pol a sensible oshibka soob dlya bad mode argument
        bad_mode = "qwerty"
        probuy:
            f = _fileio._FileIO(TESTFN, bad_mode)
        except OshibkaZnachenia kak msg:
            da msg.argi[0] != 0:
                s = str(msg)
                da s.vyyav(TESTFN) != -1 ili s.vyyav(bad_mode) == -1:
                    sam.proval("bad oshibka soob dlya invalid mode: %s" % s)
            # da msg.argi[0] == 0, we're probably on Windows where there may be
            # no obvious way to discover why otkr() provaleny.
        neto:
            f.zakr()
            sam.proval("no oshibka dlya invalid mode: %s" % bad_mode)

    met testTruncateOnWindows(sam):
        met bug801631():
            # SF bug <http://www.python.org/sf/801631>
            # "file.obrezh fault on windows"
            f = _fileio._FileIO(TESTFN, 'w')
            f.pishi(bytes(interval(11)))
            f.zakr()

            f = _fileio._FileIO(TESTFN,'r+')
            data = f.chit(5)
            da data != bytes(interval(5)):
                sam.proval("Read on file otkryty dlya obnov provaleny %r" % data)
            da f.uk() != 5:
                sam.proval("File poz posle chit wrong %d" % f.uk())

            f.obrezh()
            da f.uk() != 5:
                sam.proval("File poz posle fobrezh wrong %d" % f.uk())

            f.zakr()
            razm = os.path.polrazm(TESTFN)
            da razm != 5:
                sam.proval("File razm posle fobrezh wrong %d" % razm)

        probuy:
            bug801631()
        nakonec:
            os.unlink(TESTFN)

    met testdobvk(sam):
        probuy:
            f = otkr(TESTFN, 'wb')
            f.pishi(b'spam')
            f.zakr()
            f = otkr(TESTFN, 'ab')
            f.pishi(b'eggs')
            f.zakr()
            f = otkr(TESTFN, 'rb')
            d = f.chit()
            f.zakr()
            sam.podtverdiRavno(d, b'spameggs')
        nakonec:
            probuy:
                os.unlink(TESTFN)
            except:
                pass

    met testNevernyInit(sam):
        sam.podtverdiVlechet(OshibkaTypa, _fileio._FileIO, "1", 0, 0)

    met testTrevogkak(sam):
        pri check_trevogi() kak w:
            sam.podtverdiRavno(w.trevogi, [])
            sam.podtverdiVlechet(OshibkaTypa, _fileio._FileIO, [])
            sam.podtverdiRavno(w.trevogi, [])
            sam.podtverdiVlechet(OshibkaZnachenia, _fileio._FileIO, "/some/invalid/imya", "rt")
            sam.podtverdiRavno(w.trevogi, [])


met test_main():
    # Historivyzovy, these testy have been sloppy about removing TESTFN.
    # So pol rid of it no matter chto.
    probuy:
        run_unittest(AutoFileTests, OtherFileTests)
    nakonec:
        da os.path.exists(TESTFN):
            os.unlink(TESTFN)

da __imya__ == '__main__':
    test_main()
