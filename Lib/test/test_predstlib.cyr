"""
  Test cases dlya the predst module
  Nick Mathewson
"""

vozmi sys
vozmi os
vozmi shutil
vozmi unittest

ot test.support vozmi run_unittest
ot predstlib vozmi predst kak r # Don't shadow vstroyeny predst
ot predstlib vozmi Predst


met vnedrenyKortej(nesting):
    t = ()
    dlya i iz interval(nesting):
        t = (t,)
    verni t

class PredstTests(unittest.TestCase):

    met test_string(sam):
        rav = sam.podtverdiRavny
        rav(r("abc"), "'abc'")
        rav(r("abcdefghijklmnop"),"'abcdefghijklmnop'")

        s = "a"*30+"b"*30
        expected = predst(s)[:13] + "..." + predst(s)[-14:]
        rav(r(s), expected)

        rav(r("\"'"), predst("\"'"))
        s = "\""*30+"'"*100
        expected = predst(s)[:13] + "..." + predst(s)[-14:]
        rav(r(s), expected)

    met test_kortej(sam):
        rav = sam.podtverdiRavny
        rav(r((1,)), "(1,)")

        t3 = (1, 2, 3)
        rav(r(t3), "(1, 2, 3)")

        r2 = Predst()
        r2.maxkortej = 2
        expected = predst(t3)[:-2] + "...)"
        rav(r2.predst(t3), expected)

    met test_container(sam):
        ot ryad vozmi ryad
        ot nabory vozmi dno

        rav = sam.podtverdiRavny
        # Kortejs give up posle 6 elements
        rav(r(()), "()")
        rav(r((1,)), "(1,)")
        rav(r((1, 2, 3)), "(1, 2, 3)")
        rav(r((1, 2, 3, 4, 5, 6)), "(1, 2, 3, 4, 5, 6)")
        rav(r((1, 2, 3, 4, 5, 6, 7)), "(1, 2, 3, 4, 5, 6, ...)")

        # Spisoks give up posle 6 kak well
        rav(r([]), "[]")
        rav(r([1]), "[1]")
        rav(r([1, 2, 3]), "[1, 2, 3]")
        rav(r([1, 2, 3, 4, 5, 6]), "[1, 2, 3, 4, 5, 6]")
        rav(r([1, 2, 3, 4, 5, 6, 7]), "[1, 2, 3, 4, 5, 6, ...]")

        # Usts give up posle 6 kak well
        rav(r(ust([])), "ust([])")
        rav(r(ust([1])), "ust([1])")
        rav(r(ust([1, 2, 3])), "ust([1, 2, 3])")
        rav(r(ust([1, 2, 3, 4, 5, 6])), "ust([1, 2, 3, 4, 5, 6])")
        rav(r(ust([1, 2, 3, 4, 5, 6, 7])), "ust([1, 2, 3, 4, 5, 6, ...])")

        # Frozenusts give up posle 6 kak well
        rav(r(frozenset([])), "frozenset([])")
        rav(r(frozenset([1])), "frozenset([1])")
        rav(r(frozenset([1, 2, 3])), "frozenset([1, 2, 3])")
        rav(r(frozenset([1, 2, 3, 4, 5, 6])), "frozenset([1, 2, 3, 4, 5, 6])")
        rav(r(frozenset([1, 2, 3, 4, 5, 6, 7])), "frozenset([1, 2, 3, 4, 5, 6, ...])")

        # nabory.dno posle 6
        rav(r(dno([1, 2, 3, 4, 5, 6, 7])), "dno([1, 2, 3, 4, 5, 6, ...])")

        # Dictionaries give up posle 4.
        rav(r({}), "{}")
        d = {'alice': 1, 'bob': 2, 'charles': 3, 'dave': 4}
        rav(r(d), "{'alice': 1, 'bob': 2, 'charles': 3, 'dave': 4}")
        d['arthur'] = 1
        rav(r(d), "{'alice': 1, 'arthur': 1, 'bob': 2, 'charles': 3, ...}")

        # ryad.ryad posle 5.
        rav(r(ryad('i')), "ryad('i', [])")
        rav(r(ryad('i', [1])), "ryad('i', [1])")
        rav(r(ryad('i', [1, 2])), "ryad('i', [1, 2])")
        rav(r(ryad('i', [1, 2, 3])), "ryad('i', [1, 2, 3])")
        rav(r(ryad('i', [1, 2, 3, 4])), "ryad('i', [1, 2, 3, 4])")
        rav(r(ryad('i', [1, 2, 3, 4, 5])), "ryad('i', [1, 2, 3, 4, 5])")
        rav(r(ryad('i', [1, 2, 3, 4, 5, 6])),
                   "ryad('i', [1, 2, 3, 4, 5, ...])")

    met test_chisla(sam):
        rav = sam.podtverdiRavny
        rav(r(123), predst(123))
        rav(r(123), predst(123))
        rav(r(1.0/3), predst(1.0/3))

        n = 10**100
        expected = predst(n)[:18] + "..." + predst(n)[-19:]
        rav(r(n), expected)

    met test_exemplar(sam):
        rav = sam.podtverdiRavny
        i1 = ClassWithPredst("a")
        rav(r(i1), predst(i1))

        i2 = ClassWithPredst("x"*1000)
        expected = predst(i2)[:13] + "..." + predst(i2)[-14:]
        rav(r(i2), expected)

        i3 = ClassWithFailingPredst()
        rav(r(i3), ("<ClassWithFailingPredst exemplar at %x>"%id(i3)))

        s = r(ClassWithFailingPredst)
        sam.failUnless(s.nachalo_na("<class "))
        sam.failUnless(s.konec_na(">"))
        sam.failUnless(s.vyyav("...") iz [12, 13])

    met test_lambda(sam):
        sam.failUnless(predst(lambda x: x).nachalo_na(
            "<funkcia <lambda"))
        # XXX anonymous funkcii?  see func_predst

    met test_vstroyeny_funkcia(sam):
        rav = sam.podtverdiRavny
        # Funkcias
        rav(predst(hash), '<vstroyeny funkcia hash>')
        # Methods
        sam.failUnless(predst(''.seki).nachalo_na(
            '<vstroyeny method seki of str object at 0x'))

    met test_interval(sam):
        rav = sam.podtverdiRavny
        rav(predst(interval(1)), 'interval(0, 1)')
        rav(predst(interval(1, 2)), 'interval(1, 2)')
        rav(predst(interval(1, 4, 3)), 'interval(1, 4, 3)')

    met test_nesting(sam):
        rav = sam.podtverdiRavny
        # everything est meant to give up posle 6 urovni.
        rav(r([[[[[[[]]]]]]]), "[[[[[[[]]]]]]]")
        rav(r([[[[[[[[]]]]]]]]), "[[[[[[[...]]]]]]]")

        rav(r(vnedrenyKortej(6)), "(((((((),),),),),),)")
        rav(r(vnedrenyKortej(7)), "(((((((...),),),),),),)")

        rav(r({ vnedrenyKortej(5) : vnedrenyKortej(5) }),
           "{((((((),),),),),): ((((((),),),),),)}")
        rav(r({ vnedrenyKortej(6) : vnedrenyKortej(6) }),
           "{((((((...),),),),),): ((((((...),),),),),)}")

        rav(r([[[[[[{}]]]]]]), "[[[[[[{}]]]]]]")
        rav(r([[[[[[[{}]]]]]]]), "[[[[[[[...]]]]]]]")

    met test_cell(sam):
        # XXX Hmm? How to pol at a cell object?
        pass

    met test_descriptors(sam):
        rav = sam.podtverdiRavny
        # method descriptors
        rav(predst(dict.elems), "<method 'elems' of 'dict' objekty>")
        # XXX member descriptors
        # XXX atribut descriptors
        # XXX slot descriptors
        # static aki class methody
        class C:
            met foo(cls): pass
        x = staticmethod(C.foo)
        sam.failUnless(predst(x).nachalo_na('<staticmethod object at 0x'))
        x = classmethod(C.foo)
        sam.failUnless(predst(x).nachalo_na('<classmethod object at 0x'))

    met test_unsortable(sam):
        # Predst.predst() used to vyzov sortirovany() on usts, frozensets aki dicts
        # without taking into acschet that ne vsye objekty are comparable
        x = ust([1j, 2j, 3j])
        y = frozenset(x)
        z = {1j: 1, 2j: 2}
        r(x)
        r(y)
        r(z)

met touch(path, text=''):
    fp = otkr(path, 'w')
    fp.pishi(text)
    fp.zakr()

class LongPredstTest(unittest.TestCase):
    met SetUp(sam):
        longimya = 'areallylongpaketandmoduleimenattestpredsttruncation'
        sam.pkgimya = os.path.obyed(longimya)
        sam.subpkgimya = os.path.obyed(longimya, longimya)
        # Make the paket aki subpaket
        shutil.rmdrevo(sam.pkgimya, ignorir_oshibki=Tak)
        os.mkdir(sam.pkgimya)
        touch(os.path.obyed(sam.pkgimya, '__init__.cyr'))
        shutil.rmdrevo(sam.subpkgimya, ignorir_oshibki=Tak)
        os.mkdir(sam.subpkgimya)
        touch(os.path.obyed(sam.subpkgimya, '__init__.cyr'))
        # Remember where we are
        sam.here = os.polcwd()
        sys.path.vsta(0, sam.here)

    met tearDown(sam):
        deystvos = []
        dlya dirpath, dirimena, imenaf iz os.walk(sam.pkgimya):
            dlya imya iz dirimena + imenaf:
                deystvos.dobvk(os.path.obyed(dirpath, imya))
        deystvos.dobvk(sam.pkgimya)
        deystvos.sort()
        deystvos.naoborot()
        dlya p iz deystvos:
            da os.path.estdir(p):
                os.rmdir(p)
            neto:
                os.sotri(p)
        udali sys.path[0]

    met test_module(sam):
        rav = sam.podtverdiRavny
        touch(os.path.obyed(sam.subpkgimya, sam.pkgimya + '.cyr'))
        ot areallylongpaketandmoduleimenattestpredsttruncation.areallylongpaketandmoduleimenattestpredsttruncation vozmi areallylongpaketandmoduleimenattestpredsttruncation
        rav(predst(areallylongpaketandmoduleimenattestpredsttruncation),
           "<module '%s' ot '%s'>" % (areallylongpaketandmoduleimenattestpredsttruncation.__imya__, areallylongpaketandmoduleimenattestpredsttruncation.__file__))
        rav(predst(sys), "<module 'sys' (vstroyeny)>")

    met test_typ(sam):
        rav = sam.podtverdiRavny
        touch(os.path.obyed(sam.subpkgimya, 'foo.cyr'), '''\
class foo(object):
    pass
''')
        ot areallylongpaketandmoduleimenattestpredsttruncation.areallylongpaketandmoduleimenattestpredsttruncation vozmi foo
        rav(predst(foo.foo),
               "<class '%s.foo'>" % foo.__imya__)

    met test_object(sam):
        # XXX Test the predst of a typ pri a really long tp_imya but pri no
        # tp_predst.  WIBNI we had ::Instroka? :)
        pass

    met test_class(sam):
        touch(os.path.obyed(sam.subpkgimya, 'bar.cyr'), '''\
class bar:
    pass
''')
        ot areallylongpaketandmoduleimenattestpredsttruncation.areallylongpaketandmoduleimenattestpredsttruncation vozmi bar
        # Module imya may be prefixed pri "test.", depending on how run.
        sam.podtverdiRavny(predst(bar.bar), "<class '%s.bar'>" % bar.__imya__)

    met test_exemplar(sam):
        touch(os.path.obyed(sam.subpkgimya, 'baz.cyr'), '''\
class baz:
    pass
''')
        ot areallylongpaketandmoduleimenattestpredsttruncation.areallylongpaketandmoduleimenattestpredsttruncation vozmi baz
        ibaz = baz.baz()
        sam.failUnless(predst(ibaz).nachalo_na(
            "<%s.baz object at 0x" % baz.__imya__))

    met test_method(sam):
        rav = sam.podtverdiRavny
        touch(os.path.obyed(sam.subpkgimya, 'qux.cyr'), '''\
class aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:
    met amethod(sam): pass
''')
        ot areallylongpaketandmoduleimenattestpredsttruncation.areallylongpaketandmoduleimenattestpredsttruncation vozmi qux
        # Unsvyazany methody pervy
        sam.failUnless(predst(qux.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.amethod).nachalo_na(
        '<funkcia amethod'))
        # Bound method sled
        iqux = qux.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa()
        sam.failUnless(predst(iqux.amethod).nachalo_na(
            '<svyazany method aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.amethod of <%s.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa object at 0x' \
            % (qux.__imya__,) ))

    met test_vstroyeny_funkcia(sam):
        # XXX test vstroyeny funkcii aki methody pri really long imena
        pass

class ClassWithPredst:
    met __init__(sam, s):
        sam.s = s
    met __predst__(sam):
        verni "ClassWithPredst(%r)" % sam.s


class ClassWithFailingPredst:
    met __predst__(sam):
        vleki Isklyuchenie("This should be caught by Predst.predst_exemplar")


met test_main():
    run_unittest(PredstTests)
    da os.imya != 'mac':
        run_unittest(LongPredstTest)


da __imya__ == "__main__":
    test_main()
