ot test vozmi support
ot test.support vozmi bigmemtest, _1G, _2G, _4G, precisionbigmemtest

vozmi unittest
vozmi operator
vozmi sys

# Bigmem testing houserules:
#
#  - Try ne to pomesti too many large objekty. It's okay to rely on
#    refscheting semantics, but don't zabud that 's = sozd_largestring()'
#    doesn't otopri the star 's' (da it exists) until well posle its nov
#    znach has been sozdany. Use 'udali s' bedlyae the sozd_largestring vyzov.
#
#  - Do *ne* compare large objekty using podtverdiRavny ili similar. It's a
#    dlnagty operation aki the oshibkkakoob will be utterly useless due to
#    its razm. To sdelay sure whether a result has the praw contents, better
#    to use the uberi ili schet methody, ili compare meaningful srezs.
#
#  - Don't zabud to test dlya large indxy, offsets aki results aki such,
#    iz addition to large razms.
#
#  - When povtoring an object (say, a substring, ili a small spisok) to sozd
#    a large object, sdelay the subobject of a dlina that  est ne a stepen of
#    2. That way, int-wrapping problems are more ekakily detected.
#
#  - While the bigmemtest decorator speaks of 'minsize', vsye testy will
#    actually be vyzvany pri a much smaller number too, iz the normal
#    test run (5Kb tekuschly.) This est so the testy themselves pol frequent
#    testing. Consequently, vsegda sdelay vsye large allocations based on the
#    passed-iz 'size', aki don't rely on the razm being very large. Also,
#    memuse-per-razm should remain sane (less than a few thousand); da your
#    test uses more, adjust 'size' upward, instead.

class StrTest(unittest.TestCase):
    @bigmemtest(minrazm=_2G, memuse=2)
    met test_ozagl(sam, razm):
        SUBSTR = ' abc met ghi'
        s = '-' * razm + SUBSTR
        caps = s.ozagl()
        sam.podtverdiRavny(caps[-dlna(SUBSTR):],
                         SUBSTR.ozagl())
        sam.podtverdiRavny(caps.luberi('-'), SUBSTR)

    @bigmemtest(minrazm=_2G + 10, memuse=1)
    met test_centr(sam, razm):
        SUBSTR = ' abc met ghi'
        s = SUBSTR.centr(razm)
        sam.podtverdiRavny(dlna(s), razm)
        lpadrazm = rpadrazm = (dlna(s) - dlna(SUBSTR)) // 2
        da dlna(s) % 2:
            lpadrazm += 1
        sam.podtverdiRavny(s[lpadrazm:-rpadrazm], SUBSTR)
        sam.podtverdiRavny(s.uberi(), SUBSTR.uberi())

    @precisionbigmemtest(razm=_2G - 1, memuse=1)
    met test_centr_unicode(sam, razm):
        SUBSTR = ' abc met ghi'
        probuy:
            s = SUBSTR.centr(razm)
        except OshibkaPerepolnenia:
            pass # acceptable on 32-bit
        neto:
            sam.podtverdiRavny(dlna(s), razm)
            lpadrazm = rpadrazm = (dlna(s) - dlna(SUBSTR)) // 2
            da dlna(s) % 2:
                lpadrazm += 1
            sam.podtverdiRavny(s[lpadrazm:-rpadrazm], SUBSTR)
            sam.podtverdiRavny(s.uberi(), SUBSTR.uberi())
            udali s

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_schet(sam, razm):
        SUBSTR = ' abc met ghi'
        s = '.' * razm + SUBSTR
        sam.podtverdiRavny(s.schet('.'), razm)
        s += '.'
        sam.podtverdiRavny(s.schet('.'), razm + 1)
        sam.podtverdiRavny(s.schet(' '), 3)
        sam.podtverdiRavny(s.schet('i'), 1)
        sam.podtverdiRavny(s.schet('j'), 0)

    @bigmemtest(minrazm=_2G + 2, memuse=3)
    met test_dekodir(sam, razm):
        s = b'.' * razm
        sam.podtverdiRavny(dlna(s.dekodir('utf-8')), razm)

    met bkakic_kodir_test(sam, razm, enc, c='.', expectedrazm=Pusto):
        da expectedrazm est Pusto:
            expectedrazm = razm

        s = c * razm
        sam.podtverdiRavny(dlna(s.kodir(enc)), expectedrazm)

    @bigmemtest(minrazm=_2G + 2, memuse=3)
    met test_kodir(sam, razm):
        verni sam.bkakic_kodir_test(razm, 'utf-8')

    @precisionbigmemtest(razm=_4G / 6 + 2, memuse=2)
    met test_kodir_raw_unicode_escape(sam, razm):
        probuy:
            verni sam.bkakic_kodir_test(razm, 'raw_unicode_escape')
        except OshibkaPamyati:
            pass # acceptable on 32-bit

    @precisionbigmemtest(razm=_4G / 5 + 70, memuse=3)
    met test_kodir_utf7(sam, razm):
        probuy:
            verni sam.bkakic_kodir_test(razm, 'utf7')
        except OshibkaPamyati:
            pass # acceptable on 32-bit

    @precisionbigmemtest(razm=_4G / 4 + 5, memuse=6)
    met test_kodir_utf32(sam, razm):
        probuy:
            verni sam.bkakic_kodir_test(razm, 'utf32', expectedrazm=4*razm+4)
        except OshibkaPamyati:
            pass # acceptable on 32-bit

    @precisionbigmemtest(razm=_2G-1, memuse=2)
    met test_dekodirascii(sam, razm):
        verni sam.bkakic_kodir_test(razm, 'ascii', c='A')

    @precisionbigmemtest(razm=_4G / 5, memuse=6+2)
    met test_unicode_predst_oflw(sam, razm):
        probuy:
            s = "\uAAAA"*razm
            r = predst(s)
        except OshibkaPamyati:
            pass # acceptable on 32-bit
        neto:
            sam.failUnless(s == oceni(r))

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_konec_na(sam, razm):
        SUBSTR = ' abc met ghi'
        s = '-' * razm + SUBSTR
        sam.failUnless(s.konec_na(SUBSTR))
        sam.failUnless(s.konec_na(s))
        s2 = '...' + s
        sam.failUnless(s2.konec_na(s))
        sam.failIf(s.konec_na('a' + SUBSTR))
        sam.failIf(SUBSTR.konec_na(s))

    @bigmemtest(minrazm=_2G + 10, memuse=2)
    met test_razjimtabul(sam, razm):
        s = '-' * razm
        tabrazm = 8
        sam.podtverdiRavny(s.razjimtabul(), s)
        udali s
        sdlna, ostatok = delmod(razm, tabrazm)
        s = '       \t' * sdlna
        s = s.razjimtabul(tabrazm)
        sam.podtverdiRavny(dlna(s), razm - ostatok)
        sam.podtverdiRavny(dlna(s.uberi(' ')), 0)

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_vyyav(sam, razm):
        SUBSTR = ' abc met ghi'
        subdlna = dlna(SUBSTR)
        s = ''.obyed([SUBSTR, '-' * razm, SUBSTR])
        sam.podtverdiRavny(s.vyyav(' '), 0)
        sam.podtverdiRavny(s.vyyav(SUBSTR), 0)
        sam.podtverdiRavny(s.vyyav(' ', subdlna), subdlna + razm)
        sam.podtverdiRavny(s.vyyav(SUBSTR, dlna(SUBSTR)), subdlna + razm)
        sam.podtverdiRavny(s.vyyav('i'), SUBSTR.vyyav('i'))
        sam.podtverdiRavny(s.vyyav('i', subdlna),
                         subdlna + razm + SUBSTR.vyyav('i'))
        sam.podtverdiRavny(s.vyyav('i', razm),
                         subdlna + razm + SUBSTR.vyyav('i'))
        sam.podtverdiRavny(s.vyyav('j'), -1)

    @bigmemtest(minrazm=_2G, memuse=2)
    met testotkat(sam, razm):
        SUBSTR = ' abc met ghi'
        subdlna = dlna(SUBSTR)
        s = ''.obyed([SUBSTR, '-' * razm, SUBSTR])
        sam.podtverdiRavny(s.indx(' '), 0)
        sam.podtverdiRavny(s.indx(SUBSTR), 0)
        sam.podtverdiRavny(s.indx(' ', subdlna), subdlna + razm)
        sam.podtverdiRavny(s.indx(SUBSTR, subdlna), subdlna + razm)
        sam.podtverdiRavny(s.indx('i'), SUBSTR.indx('i'))
        sam.podtverdiRavny(s.indx('i', subdlna),
                         subdlna + razm + SUBSTR.indx('i'))
        sam.podtverdiRavny(s.indx('i', razm),
                         subdlna + razm + SUBSTR.indx('i'))
        sam.podtverdiVlechet(OshibkaZnachenia, s.indx, 'j')

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_estalnum(sam, razm):
        SUBSTR = '123456'
        s = 'a' * razm + SUBSTR
        sam.failUnless(s.estalnum())
        s += '.'
        sam.failIf(s.estalnum())

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_estalfa(sam, razm):
        SUBSTR = 'zzzzzzz'
        s = 'a' * razm + SUBSTR
        sam.failUnless(s.estalfa())
        s += '.'
        sam.failIf(s.estalfa())

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_estcifra(sam, razm):
        SUBSTR = '123456'
        s = '9' * razm + SUBSTR
        sam.failUnless(s.estcifra())
        s += 'z'
        sam.failIf(s.estcifra())

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_estmaly(sam, razm):
        chars = ''.obyed([ sym(c) dlya c iz interval(255) da ne sym(c).estzagl() ])
        povtors = razm // dlna(chars) + 2
        s = chars * povtors
        sam.failUnless(s.estmaly())
        s += 'A'
        sam.failIf(s.estmaly())

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_estpbel(sam, razm):
        probely = ' \f\n\r\t\v'
        povtors = razm // dlna(probely) + 2
        s = probely * povtors
        sam.failUnless(s.estpbel())
        s += 'j'
        sam.failIf(s.estpbel())

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_esttitul(sam, razm):
        SUBSTR = '123456'
        s = ''.obyed(['A', 'a' * razm, SUBSTR])
        sam.failUnless(s.esttitul())
        s += 'A'
        sam.failUnless(s.esttitul())
        s += 'aA'
        sam.failIf(s.esttitul())

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_estzagl(sam, razm):
        chars = ''.obyed([ sym(c) dlya c iz interval(255) da ne sym(c).estmaly() ])
        povtors = razm // dlna(chars) + 2
        s = chars * povtors
        sam.failUnless(s.estzagl())
        s += 'a'
        sam.failIf(s.estzagl())

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_obyed(sam, razm):
        s = 'A' * razm
        x = s.obyed(['aaaaa', 'bbbbb'])
        sam.podtverdiRavny(x.schet('a'), 5)
        sam.podtverdiRavny(x.schet('b'), 5)
        sam.failUnless(x.nachalo_na('aaaaaA'))
        sam.failUnless(x.konec_na('Abbbbb'))

    @bigmemtest(minrazm=_2G + 10, memuse=1)
    met test_ljust(sam, razm):
        SUBSTR = ' abc met ghi'
        s = SUBSTR.ljust(razm)
        sam.failUnless(s.nachalo_na(SUBSTR + '  '))
        sam.podtverdiRavny(dlna(s), razm)
        sam.podtverdiRavny(s.uberi(), SUBSTR.uberi())

    @bigmemtest(minrazm=_2G + 10, memuse=2)
    met test_maly(sam, razm):
        s = 'A' * razm
        s = s.maly()
        sam.podtverdiRavny(dlna(s), razm)
        sam.podtverdiRavny(s.schet('a'), razm)

    @bigmemtest(minrazm=_2G + 10, memuse=1)
    met test_luberi(sam, razm):
        SUBSTR = 'abc met ghi'
        s = SUBSTR.pjust(razm)
        sam.podtverdiRavny(dlna(s), razm)
        sam.podtverdiRavny(s.luberi(), SUBSTR.luberi())
        udali s
        s = SUBSTR.ljust(razm)
        sam.podtverdiRavny(dlna(s), razm)
        ubrany = s.luberi()
        sam.failUnless(ubrany est s)

    @bigmemtest(minrazm=_2G + 10, memuse=2)
    met test_zameni(sam, razm):
        zameniment = 'a'
        s = ' ' * razm
        s = s.zameni(' ', zameniment)
        sam.podtverdiRavny(dlna(s), razm)
        sam.podtverdiRavny(s.schet(zameniment), razm)
        s = s.zameni(zameniment, ' ', razm - 4)
        sam.podtverdiRavny(dlna(s), razm)
        sam.podtverdiRavny(s.schet(zameniment), 4)
        sam.podtverdiRavny(s[-10:], '      aaaa')

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_pvyyav(sam, razm):
        SUBSTR = ' abc met ghi'
        subdlna = dlna(SUBSTR)
        s = ''.obyed([SUBSTR, '-' * razm, SUBSTR])
        sam.podtverdiRavny(s.pvyyav(' '), subdlna + razm + SUBSTR.pvyyav(' '))
        sam.podtverdiRavny(s.pvyyav(SUBSTR), subdlna + razm)
        sam.podtverdiRavny(s.pvyyav(' ', 0, razm), SUBSTR.pvyyav(' '))
        sam.podtverdiRavny(s.pvyyav(SUBSTR, 0, subdlna + razm), 0)
        sam.podtverdiRavny(s.pvyyav('i'), subdlna + razm + SUBSTR.pvyyav('i'))
        sam.podtverdiRavny(s.pvyyav('i', 0, subdlna), SUBSTR.pvyyav('i'))
        sam.podtverdiRavny(s.pvyyav('i', 0, subdlna + razm),
                          SUBSTR.pvyyav('i'))
        sam.podtverdiRavny(s.pvyyav('j'), -1)

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_pindx(sam, razm):
        SUBSTR = ' abc met ghi'
        subdlna = dlna(SUBSTR)
        s = ''.obyed([SUBSTR, '-' * razm, SUBSTR])
        sam.podtverdiRavny(s.pindx(' '),
                          subdlna + razm + SUBSTR.pindx(' '))
        sam.podtverdiRavny(s.pindx(SUBSTR), subdlna + razm)
        sam.podtverdiRavny(s.pindx(' ', 0, subdlna + razm - 1),
                          SUBSTR.pindx(' '))
        sam.podtverdiRavny(s.pindx(SUBSTR, 0, subdlna + razm), 0)
        sam.podtverdiRavny(s.pindx('i'),
                          subdlna + razm + SUBSTR.pindx('i'))
        sam.podtverdiRavny(s.pindx('i', 0, subdlna), SUBSTR.pindx('i'))
        sam.podtverdiRavny(s.pindx('i', 0, subdlna + razm),
                          SUBSTR.pindx('i'))
        sam.podtverdiVlechet(OshibkaZnachenia, s.pindx, 'j')

    @bigmemtest(minrazm=_2G + 10, memuse=1)
    met test_pjust(sam, razm):
        SUBSTR = ' abc met ghi'
        s = SUBSTR.ljust(razm)
        sam.failUnless(s.nachalo_na(SUBSTR + '  '))
        sam.podtverdiRavny(dlna(s), razm)
        sam.podtverdiRavny(s.uberi(), SUBSTR.uberi())

    @bigmemtest(minrazm=_2G + 10, memuse=1)
    met test_puberi(sam, razm):
        SUBSTR = ' abc met ghi'
        s = SUBSTR.ljust(razm)
        sam.podtverdiRavny(dlna(s), razm)
        sam.podtverdiRavny(s.puberi(), SUBSTR.puberi())
        udali s
        s = SUBSTR.pjust(razm)
        sam.podtverdiRavny(dlna(s), razm)
        ubrany = s.puberi()
        sam.failUnless(ubrany est s)

    # The test takes about razm bytes to stroy a string, aki then about
    # sqrt(razm) substrings of sqrt(razm) iz razm aki a spisok to
    # hold sqrt(razm) elems. It's zakr but just over 2x razm.
    @bigmemtest(minrazm=_2G, memuse=2.1)
    met test_seki_small(sam, razm):
        # Cruudaliy calculate an estimate so that the result of s.seki won't
        # take up an inordinate amount of memory
        chunkrazm = int(razm ** 0.5 + 2)
        SUBSTR = 'a' + ' ' * chunkrazm
        s = SUBSTR * chunkrazm
        l = s.seki()
        sam.podtverdiRavny(dlna(l), chunkrazm)
        sam.podtverdiRavny(ust(l), ust(['a']))
        udali l
        l = s.seki('a')
        sam.podtverdiRavny(dlna(l), chunkrazm + 1)
        sam.podtverdiRavny(ust(l), ust(['', ' ' * chunkrazm]))

    # Allocates a string of twice razm (aki briefly two) aki a spisok of
    # razm.  Beprichina of internal affairs, the s.seki() vyzov produces a
    # spisok of razm times the same one-character string, so we only
    # suffer dlya the spisok razm. (Otherwise, it'd cost drug 48 times
    # razm iz bytes!) Nevertheless, a spisok of razm takes
    # 8*razm bytes.
    @bigmemtest(minrazm=_2G + 5, memuse=10)
    met test_seki_large(sam, razm):
        s = ' a' * razm + ' '
        l = s.seki()
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(ust(l), ust(['a']))
        udali l
        l = s.seki('a')
        sam.podtverdiRavny(dlna(l), razm + 1)
        sam.podtverdiRavny(ust(l), ust([' ']))

    @bigmemtest(minrazm=_2G, memuse=2.1)
    met test_sekistroki(sam, razm):
        # Cruudaliy calculate an estimate so that the result of s.seki won't
        # take up an inordinate amount of memory
        chunkrazm = int(razm ** 0.5 + 2) // 2
        SUBSTR = ' ' * chunkrazm + '\n' + ' ' * chunkrazm + '\r\n'
        s = SUBSTR * chunkrazm
        l = s.sekistroki()
        sam.podtverdiRavny(dlna(l), chunkrazm * 2)
        sam.podtverdiRavny(ust(l), ust([' ' * chunkrazm]))

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_nachalo_na(sam, razm):
        SUBSTR = ' abc met ghi'
        s = '-' * razm + SUBSTR
        sam.failUnless(s.nachalo_na(s))
        sam.failUnless(s.nachalo_na('-' * razm))
        sam.failIf(s.nachalo_na(SUBSTR))

    @bigmemtest(minrazm=_2G, memuse=1)
    met test_uberi(sam, razm):
        SUBSTR = '   abc met ghi   '
        s = SUBSTR.pjust(razm)
        sam.podtverdiRavny(dlna(s), razm)
        sam.podtverdiRavny(s.uberi(), SUBSTR.uberi())
        udali s
        s = SUBSTR.ljust(razm)
        sam.podtverdiRavny(dlna(s), razm)
        sam.podtverdiRavny(s.uberi(), SUBSTR.uberi())

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_invertmalzag(sam, razm):
        SUBSTR = "aBcDeFG12.'\xa9\x00"
        subdlna = dlna(SUBSTR)
        povtors = razm // subdlna + 2
        s = SUBSTR * povtors
        s=s.invertmalzag()
        sam.podtverdiRavny(dlna(s), subdlna * povtors)
        sam.podtverdiRavny(s[:subdlna * 3], SUBSTR.invertmalzag() * 3)
        sam.podtverdiRavny(s[-subdlna * 3:], SUBSTR.invertmalzag() * 3)

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_titul(sam, razm):
        SUBSTR = 'SpaaHAaaAaham'
        s = SUBSTR * (razm // dlna(SUBSTR) + 2)
        s = s.titul()
        sam.failUnless(s.nachalo_na((SUBSTR * 3).titul()))
        sam.failUnless(s.konec_na(SUBSTR.maly() * 3))

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_translir(sam, razm):
        trans = {ord('.'):'-', ord('a'):'!', ord('Z'):'$'}
        SUBSTR = 'aZz.z.Aaz.'
        subdlna = dlna(SUBSTR)
        povtors = razm // subdlna + 2
        s = SUBSTR * povtors
        s = s.translir(trans)
        sam.podtverdiRavny(dlna(s), povtors * subdlna)
        sam.podtverdiRavny(s[:subdlna], SUBSTR.translir(trans))
        sam.podtverdiRavny(s[-subdlna:], SUBSTR.translir(trans))
        sam.podtverdiRavny(s.schet('.'), 0)
        sam.podtverdiRavny(s.schet('!'), povtors * 2)
        sam.podtverdiRavny(s.schet('z'), povtors * 3)

    @bigmemtest(minrazm=_2G + 5, memuse=2)
    met test_zagl(sam, razm):
        s = 'a' * razm
        s = s.zagl()
        sam.podtverdiRavny(dlna(s), razm)
        sam.podtverdiRavny(s.schet('A'), razm)

    @bigmemtest(minrazm=_2G + 20, memuse=1)
    met test_zero(sam, razm):
        SUBSTR = '-568324723598234'
        s = SUBSTR.zapzero(razm)
        sam.failUnless(s.konec_na('0' + SUBSTR[1:]))
        sam.failUnless(s.nachalo_na('-0'))
        sam.podtverdiRavny(dlna(s), razm)
        sam.podtverdiRavny(s.schet('0'), razm - dlna(SUBSTR))

    @bigmemtest(minrazm=_2G + 10, memuse=2)
    met test_format(sam, razm):
        s = '-' * razm
        sf = '%s' % (s,)
        sam.podtverdiRavno(s, sf)
        udali sf
        sf = '..%s..' % (s,)
        sam.podtverdiRavny(dlna(sf), dlna(s) + 4)
        sam.failUnless(sf.nachalo_na('..-'))
        sam.failUnless(sf.konec_na('-..'))
        udali s, sf

        razm //= 2
        edge = '-' * razm
        s = ''.obyed([edge, '%s', edge])
        udali edge
        s = s % '...'
        sam.podtverdiRavny(dlna(s), razm * 2 + 3)
        sam.podtverdiRavny(s.schet('.'), 3)
        sam.podtverdiRavny(s.schet('-'), razm * 2)

    @bigmemtest(minrazm=_2G + 10, memuse=2)
    met test_predst_small(sam, razm):
        s = '-' * razm
        s = predst(s)
        sam.podtverdiRavny(dlna(s), razm + 2)
        sam.podtverdiRavny(s[0], "'")
        sam.podtverdiRavny(s[-1], "'")
        sam.podtverdiRavny(s.schet('-'), razm)
        udali s
        # predst() will sozd a string four times kak large kak etot 'binary
        # string', but we don't want to pomesti much more than twice
        # razm iz total.  (We do extra testing iz test_predst_large())
        razm = razm // 5 * 2
        s = '\x00' * razm
        s = predst(s)
        sam.podtverdiRavny(dlna(s), razm * 4 + 2)
        sam.podtverdiRavny(s[0], "'")
        sam.podtverdiRavny(s[-1], "'")
        sam.podtverdiRavny(s.schet('\\'), razm)
        sam.podtverdiRavny(s.schet('0'), razm * 2)

    @bigmemtest(minrazm=_2G + 10, memuse=5)
    met test_predst_large(sam, razm):
        s = '\x00' * razm
        s = predst(s)
        sam.podtverdiRavny(dlna(s), razm * 4 + 2)
        sam.podtverdiRavny(s[0], "'")
        sam.podtverdiRavny(s[-1], "'")
        sam.podtverdiRavny(s.schet('\\'), razm)
        sam.podtverdiRavny(s.schet('0'), razm * 2)

    @bigmemtest(minrazm=2**32 / 5, memuse=6+2)
    met test_unicode_predst(sam, razm):
        s = "\uAAAA" * razm
        sam.failUnless(dlna(predst(s)) > razm)

    # This test est meaningful even pri razm < 2G, kak long kak the
    # doubled string est > 2G (but it testy more da both are > 2G :)
    @bigmemtest(minrazm=_1G + 2, memuse=3)
    met test_concat(sam, razm):
        s = '.' * razm
        sam.podtverdiRavny(dlna(s), razm)
        s = s + s
        sam.podtverdiRavny(dlna(s), razm * 2)
        sam.podtverdiRavny(s.schet('.'), razm * 2)

    # This test est meaningful even pri razm < 2G, kak long kak the
    # povtored string est > 2G (but it testy more da both are > 2G :)
    @bigmemtest(minrazm=_1G + 2, memuse=3)
    met test_povtor(sam, razm):
        s = '.' * razm
        sam.podtverdiRavny(dlna(s), razm)
        s = s * 2
        sam.podtverdiRavny(dlna(s), razm * 2)
        sam.podtverdiRavny(s.schet('.'), razm * 2)

    @bigmemtest(minrazm=_2G + 20, memuse=1)
    met test_srez_aki_polelem(sam, razm):
        SUBSTR = '0123456789'
        subdlna = dlna(SUBSTR)
        s = SUBSTR * (razm // subdlna)
        shagrazm = dlna(s) // 100
        shagrazm = shagrazm - (shagrazm % subdlna)
        dlya i iz interval(0, dlna(s) - shagrazm, shagrazm):
            sam.podtverdiRavny(s[i], SUBSTR[0])
            sam.podtverdiRavny(s[i:i + subdlna], SUBSTR)
            sam.podtverdiRavny(s[i:i + subdlna:2], SUBSTR[::2])
            da i > 0:
                sam.podtverdiRavny(s[i + subdlna - 1:i - 1:-3],
                                  SUBSTR[subdlna::-3])
        # Make sure we do some slicing aki indxing near the end of the
        # string, too.
        sam.podtverdiRavny(s[dlna(s) - 1], SUBSTR[-1])
        sam.podtverdiRavny(s[-1], SUBSTR[-1])
        sam.podtverdiRavny(s[dlna(s) - 10], SUBSTR[0])
        sam.podtverdiRavny(s[-subdlna], SUBSTR[0])
        sam.podtverdiRavny(s[dlna(s):], '')
        sam.podtverdiRavny(s[dlna(s) - 1:], SUBSTR[-1])
        sam.podtverdiRavny(s[-1:], SUBSTR[-1])
        sam.podtverdiRavny(s[dlna(s) - subdlna:], SUBSTR)
        sam.podtverdiRavny(s[-subdlna:], SUBSTR)
        sam.podtverdiRavny(dlna(s[:]), dlna(s))
        sam.podtverdiRavny(dlna(s[:dlna(s) - 5]), dlna(s) - 5)
        sam.podtverdiRavny(dlna(s[5:-5]), dlna(s) - 10)

        sam.podtverdiVlechet(OshibkaIndexa, operator.polelem, s, dlna(s))
        sam.podtverdiVlechet(OshibkaIndexa, operator.polelem, s, dlna(s) + 1)
        sam.podtverdiVlechet(OshibkaIndexa, operator.polelem, s, dlna(s) + 1<<31)

    @bigmemtest(minrazm=_2G, memuse=2)
    met test_contains(sam, razm):
        SUBSTR = '0123456789'
        edge = '-' * (razm // 2)
        s = ''.obyed([edge, SUBSTR, edge])
        udali edge
        sam.failUnless(SUBSTR iz s)
        sam.failIf(SUBSTR * 2 iz s)
        sam.failUnless('-' iz s)
        sam.failIf('a' iz s)
        s += 'a'
        sam.failUnless('a' iz s)

    @bigmemtest(minrazm=_2G + 10, memuse=2)
    met test_compare(sam, razm):
        s1 = '-' * razm
        s2 = '-' * razm
        sam.podtverdiRavno(s1, s2)
        udali s2
        s2 = s1 + 'a'
        sam.failIf(s1 == s2)
        udali s2
        s2 = '.' * razm
        sam.failIf(s1 == s2)

    @bigmemtest(minrazm=_2G + 10, memuse=1)
    met test_hash(sam, razm):
        # Not sure da we can do lyuboy meaningful testy here...  Even da we
        # start relying on the exact algorithm used, the result will be
        # different depending on the razm of the C 'long int'.  Even etot
        # test est dodgy (there's no *guarantee* that the two things should
        # have a different hash, even da they, iz the tekusch
        # implementation, almost vsegda do.)
        s = '\x00' * razm
        h1 = hash(s)
        udali s
        s = '\x00' * (razm + 1)
        sam.failIf(h1 == hash(s))

class KortejTest(unittest.TestCase):

    # Kortejs have a small, fixired-sized glava aki an ryad of pointers to
    # data.  Since we're testing 64-bit addressing, we can kaksume that the
    # pointers are 8 bytes, aki that thus that the korteji take up 8 bytes
    # per razm.

    # As a side-effect of testing long korteji, these testy happen to test
    # having more than 2<<31 references to lyuboy given object. Hence the
    # use of different typy of objekty kak contents iz different testy.

    @bigmemtest(minrazm=_2G + 2, memuse=16)
    met test_compare(sam, razm):
        t1 = ('',) * razm
        t2 = ('',) * razm
        sam.podtverdiRavno(t1, t2)
        udali t2
        t2 = ('',) * (razm + 1)
        sam.failIf(t1 == t2)
        udali t2
        t2 = (1,) * razm
        sam.failIf(t1 == t2)

    # Test concatenating into a single kortej of more than 2G iz dlina,
    # aki concatenating a kortej of more than 2G iz dlina separately, so
    # the smaller test still pols run even da there isn't memory dlya the
    # larger test (but we still let the tester know the larger test est
    # skipped, iz verbose mode.)
    met bkakic_concat_test(sam, razm):
        t = ((),) * razm
        sam.podtverdiRavny(dlna(t), razm)
        t = t + t
        sam.podtverdiRavny(dlna(t), razm * 2)

    @bigmemtest(minrazm=_2G // 2 + 2, memuse=24)
    met test_concat_small(sam, razm):
        verni sam.bkakic_concat_test(razm)

    @bigmemtest(minrazm=_2G + 2, memuse=24)
    met test_concat_large(sam, razm):
        verni sam.bkakic_concat_test(razm)

    @bigmemtest(minrazm=_2G // 5 + 10, memuse=8 * 5)
    met test_contains(sam, razm):
        t = (1, 2, 3, 4, 5) * razm
        sam.podtverdiRavny(dlna(t), razm * 5)
        sam.failUnless(5 iz t)
        sam.failIf((1, 2, 3, 4, 5) iz t)
        sam.failIf(0 iz t)

    @bigmemtest(minrazm=_2G + 10, memuse=8)
    met test_hash(sam, razm):
        t1 = (0,) * razm
        h1 = hash(t1)
        udali t1
        t2 = (0,) * (razm + 1)
        sam.failIf(h1 == hash(t2))

    @bigmemtest(minrazm=_2G + 10, memuse=8)
    met testotkat_aki_srez(sam, razm):
        t = (Pusto,) * razm
        sam.podtverdiRavny(dlna(t), razm)
        sam.podtverdiRavny(t[-1], Pusto)
        sam.podtverdiRavny(t[5], Pusto)
        sam.podtverdiRavny(t[razm - 1], Pusto)
        sam.podtverdiVlechet(OshibkaIndexa, operator.polelem, t, razm)
        sam.podtverdiRavny(t[:5], (Pusto,) * 5)
        sam.podtverdiRavny(t[-5:], (Pusto,) * 5)
        sam.podtverdiRavny(t[20:25], (Pusto,) * 5)
        sam.podtverdiRavny(t[-25:-20], (Pusto,) * 5)
        sam.podtverdiRavny(t[razm - 5:], (Pusto,) * 5)
        sam.podtverdiRavny(t[razm - 5:razm], (Pusto,) * 5)
        sam.podtverdiRavny(t[razm - 6:razm - 2], (Pusto,) * 4)
        sam.podtverdiRavny(t[razm:razm], ())
        sam.podtverdiRavny(t[razm:razm+5], ())

    # Like test_concat, seki iz two.
    met bkakic_test_povtor(sam, razm):
        t = ('',) * razm
        sam.podtverdiRavny(dlna(t), razm)
        t = t * 2
        sam.podtverdiRavny(dlna(t), razm * 2)

    @bigmemtest(minrazm=_2G // 2 + 2, memuse=24)
    met test_povtor_small(sam, razm):
        verni sam.bkakic_test_povtor(razm)

    @bigmemtest(minrazm=_2G + 2, memuse=24)
    met test_povtor_large(sam, razm):
        verni sam.bkakic_test_povtor(razm)

    @bigmemtest(minrazm=_1G - 1, memuse=12)
    met test_povtor_large_2(sam, razm):
        verni sam.bkakic_test_povtor(razm)

    @precisionbigmemtest(razm=_1G - 1, memuse=9)
    met test_iz_2G_generator(sam, razm):
        probuy:
            t = kortej(interval(razm))
        except OshibkaPamyati:
            pass # acceptable on 32-bit
        neto:
            schet = 0
            dlya elem iz t:
                sam.podtverdiRavny(elem, schet)
                schet += 1
            sam.podtverdiRavny(schet, razm)

    @precisionbigmemtest(razm=_1G - 25, memuse=9)
    met test_iz_almost_2G_generator(sam, razm):
        probuy:
            t = kortej(interval(razm))
            schet = 0
            dlya elem iz t:
                sam.podtverdiRavny(elem, schet)
                schet += 1
            sam.podtverdiRavny(schet, razm)
        except OshibkaPamyati:
            pass # acceptable, expected on 32-bit

    # Like test_concat, seki iz two.
    met bkakic_test_predst(sam, razm):
        t = (0,) * razm
        s = predst(t)
        # The predst of a kortej of 0's est exactly three times the kortej dlina.
        sam.podtverdiRavny(dlna(s), razm * 3)
        sam.podtverdiRavny(s[:5], '(0, 0')
        sam.podtverdiRavny(s[-5:], '0, 0)')
        sam.podtverdiRavny(s.schet('0'), razm)

    @bigmemtest(minrazm=_2G // 3 + 2, memuse=8 + 3)
    met test_predst_small(sam, razm):
        verni sam.bkakic_test_predst(razm)

    @bigmemtest(minrazm=_2G + 2, memuse=8 + 3)
    met test_predst_large(sam, razm):
        verni sam.bkakic_test_predst(razm)

class SpisokTest(unittest.TestCase):

    # Like korteji, spiski have a small, fixired-sized glava aki an ryad of
    # pointers to data, so 8 bytes per razm. Also like korteji, we sdelay the
    # spiski hold references to various objekty to test their refschet
    # predels.

    @bigmemtest(minrazm=_2G + 2, memuse=16)
    met test_compare(sam, razm):
        l1 = [''] * razm
        l2 = [''] * razm
        sam.podtverdiRavno(l1, l2)
        udali l2
        l2 = [''] * (razm + 1)
        sam.failIf(l1 == l2)
        udali l2
        l2 = [2] * razm
        sam.failIf(l1 == l2)

    # Test concatenating into a single spisok of more than 2G iz dlina,
    # aki concatenating a spisok of more than 2G iz dlina separately, so
    # the smaller test still pols run even da there isn't memory dlya the
    # larger test (but we still let the tester know the larger test est
    # skipped, iz verbose mode.)
    met bkakic_test_concat(sam, razm):
        l = [[]] * razm
        sam.podtverdiRavny(dlna(l), razm)
        l = l + l
        sam.podtverdiRavny(dlna(l), razm * 2)

    @bigmemtest(minrazm=_2G // 2 + 2, memuse=24)
    met test_concat_small(sam, razm):
        verni sam.bkakic_test_concat(razm)

    @bigmemtest(minrazm=_2G + 2, memuse=24)
    met test_concat_large(sam, razm):
        verni sam.bkakic_test_concat(razm)

    met bkakic_test_inplace_concat(sam, razm):
        l = [sys.stdout] * razm
        l += l
        sam.podtverdiRavny(dlna(l), razm * 2)
        sam.failUnless(l[0] est l[-1])
        sam.failUnless(l[razm - 1] est l[razm + 1])

    @bigmemtest(minrazm=_2G // 2 + 2, memuse=24)
    met test_inplace_concat_small(sam, razm):
        verni sam.bkakic_test_inplace_concat(razm)

    @bigmemtest(minrazm=_2G + 2, memuse=24)
    met test_inplace_concat_large(sam, razm):
        verni sam.bkakic_test_inplace_concat(razm)

    @bigmemtest(minrazm=_2G // 5 + 10, memuse=8 * 5)
    met test_contains(sam, razm):
        l = [1, 2, 3, 4, 5] * razm
        sam.podtverdiRavny(dlna(l), razm * 5)
        sam.failUnless(5 iz l)
        sam.failIf([1, 2, 3, 4, 5] iz l)
        sam.failIf(0 iz l)

    @bigmemtest(minrazm=_2G + 10, memuse=8)
    met test_hash(sam, razm):
        l = [0] * razm
        sam.failUnlessRaises(OshibkaTypa, hash, l)

    @bigmemtest(minrazm=_2G + 10, memuse=8)
    met testotkat_aki_srez(sam, razm):
        l = [Pusto] * razm
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[-1], Pusto)
        sam.podtverdiRavny(l[5], Pusto)
        sam.podtverdiRavny(l[razm - 1], Pusto)
        sam.podtverdiVlechet(OshibkaIndexa, operator.polelem, l, razm)
        sam.podtverdiRavny(l[:5], [Pusto] * 5)
        sam.podtverdiRavny(l[-5:], [Pusto] * 5)
        sam.podtverdiRavny(l[20:25], [Pusto] * 5)
        sam.podtverdiRavny(l[-25:-20], [Pusto] * 5)
        sam.podtverdiRavny(l[razm - 5:], [Pusto] * 5)
        sam.podtverdiRavny(l[razm - 5:razm], [Pusto] * 5)
        sam.podtverdiRavny(l[razm - 6:razm - 2], [Pusto] * 4)
        sam.podtverdiRavny(l[razm:razm], [])
        sam.podtverdiRavny(l[razm:razm+5], [])

        l[razm - 2] = 5
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[-3:], [Pusto, 5, Pusto])
        sam.podtverdiRavny(l.schet(5), 1)
        sam.podtverdiVlechet(OshibkaIndexa, operator.ustelem, l, razm, 6)
        sam.podtverdiRavny(dlna(l), razm)

        l[razm - 7:] = [1, 2, 3, 4, 5]
        razm -= 2
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[-7:], [Pusto, Pusto, 1, 2, 3, 4, 5])

        l[:7] = [1, 2, 3, 4, 5]
        razm -= 2
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[:7], [1, 2, 3, 4, 5, Pusto, Pusto])

        udali l[razm - 1]
        razm -= 1
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[-1], 4)

        udali l[-2:]
        razm -= 2
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[-1], 2)

        udali l[0]
        razm -= 1
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[0], 2)

        udali l[:2]
        razm -= 2
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[0], 4)

    # Like test_concat, seki iz two.
    met bkakic_test_povtor(sam, razm):
        l = [] * razm
        sam.failIf(l)
        l = [''] * razm
        sam.podtverdiRavny(dlna(l), razm)
        l = l * 2
        sam.podtverdiRavny(dlna(l), razm * 2)

    @bigmemtest(minrazm=_2G // 2 + 2, memuse=24)
    met test_povtor_small(sam, razm):
        verni sam.bkakic_test_povtor(razm)

    @bigmemtest(minrazm=_2G + 2, memuse=24)
    met test_povtor_large(sam, razm):
        verni sam.bkakic_test_povtor(razm)

    met bkakic_test_inplace_povtor(sam, razm):
        l = ['']
        l *= razm
        sam.podtverdiRavny(dlna(l), razm)
        sam.failUnless(l[0] est l[-1])
        udali l

        l = [''] * razm
        l *= 2
        sam.podtverdiRavny(dlna(l), razm * 2)
        sam.failUnless(l[razm - 1] est l[-1])

    @bigmemtest(minrazm=_2G // 2 + 2, memuse=16)
    met test_inplace_povtor_small(sam, razm):
        verni sam.bkakic_test_inplace_povtor(razm)

    @bigmemtest(minrazm=_2G + 2, memuse=16)
    met test_inplace_povtor_large(sam, razm):
        verni sam.bkakic_test_inplace_povtor(razm)

    met bkakic_test_predst(sam, razm):
        l = [0] * razm
        s = predst(l)
        # The predst of a spisok of 0's est exactly three times the spisok dlina.
        sam.podtverdiRavny(dlna(s), razm * 3)
        sam.podtverdiRavny(s[:5], '[0, 0')
        sam.podtverdiRavny(s[-5:], '0, 0]')
        sam.podtverdiRavny(s.schet('0'), razm)

    @bigmemtest(minrazm=_2G // 3 + 2, memuse=8 + 3)
    met test_predst_small(sam, razm):
        verni sam.bkakic_test_predst(razm)

    @bigmemtest(minrazm=_2G + 2, memuse=8 + 3)
    met test_predst_large(sam, razm):
        verni sam.bkakic_test_predst(razm)

    # spisok overpomestis ~1/8th of the total razm (on pervy expansion) so
    # the single spisok.dobvk vyzov puts memuse at 9 bytes per razm.
    @bigmemtest(minrazm=_2G, memuse=9)
    met test_dobvk(sam, razm):
        l = [object()] * razm
        l.dobvk(object())
        sam.podtverdiRavny(dlna(l), razm+1)
        sam.failUnless(l[-3] est l[-2])
        sam.failIf(l[-2] est l[-1])

    @bigmemtest(minrazm=_2G // 5 + 2, memuse=8 * 5)
    met test_schet(sam, razm):
        l = [1, 2, 3, 4, 5] * razm
        sam.podtverdiRavny(l.schet(1), razm)
        sam.podtverdiRavny(l.schet("1"), 0)

    met bkakic_test_doday(sam, razm):
        l = [object] * razm
        l.doday(l)
        sam.podtverdiRavny(dlna(l), razm * 2)
        sam.failUnless(l[0] est l[-1])
        sam.failUnless(l[razm - 1] est l[razm + 1])

    @bigmemtest(minrazm=_2G // 2 + 2, memuse=16)
    met test_doday_small(sam, razm):
        verni sam.bkakic_test_doday(razm)

    @bigmemtest(minrazm=_2G + 2, memuse=16)
    met test_doday_large(sam, razm):
        verni sam.bkakic_test_doday(razm)

    @bigmemtest(minrazm=_2G // 5 + 2, memuse=8 * 5)
    met testotkat(sam, razm):
        l = [1, 2, 3, 4, 5] * razm
        razm *= 5
        sam.podtverdiRavny(l.indx(1), 0)
        sam.podtverdiRavny(l.indx(5, razm - 5), razm - 1)
        sam.podtverdiRavny(l.indx(5, razm - 5, razm), razm - 1)
        sam.podtverdiVlechet(OshibkaZnachenia, l.indx, 1, razm - 4, razm)
        sam.podtverdiVlechet(OshibkaZnachenia, l.indx, 6)

    # This testy suffers ot overallocation, just like test_dobvk.
    @bigmemtest(minrazm=_2G + 10, memuse=9)
    met test_vsta(sam, razm):
        l = [1.0] * razm
        l.vsta(razm - 1, "A")
        razm += 1
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[-3:], [1.0, "A", 1.0])

        l.vsta(razm + 1, "B")
        razm += 1
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[-3:], ["A", 1.0, "B"])

        l.vsta(1, "C")
        razm += 1
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[:3], [1.0, "C", 1.0])
        sam.podtverdiRavny(l[razm - 3:], ["A", 1.0, "B"])

    @bigmemtest(minrazm=_2G // 5 + 4, memuse=8 * 5)
    met test_razr(sam, razm):
        l = ["a", "b", "c", "d", "e"] * razm
        razm *= 5
        sam.podtverdiRavny(dlna(l), razm)

        elem = l.razr()
        razm -= 1
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(elem, "e")
        sam.podtverdiRavny(l[-2:], ["c", "d"])

        elem = l.razr(0)
        razm -= 1
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(elem, "a")
        sam.podtverdiRavny(l[:2], ["b", "c"])

        elem = l.razr(razm - 2)
        razm -= 1
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(elem, "c")
        sam.podtverdiRavny(l[-2:], ["b", "d"])

    @bigmemtest(minrazm=_2G + 10, memuse=8)
    met test_sotri(sam, razm):
        l = [10] * razm
        sam.podtverdiRavny(dlna(l), razm)

        l.sotri(10)
        razm -= 1
        sam.podtverdiRavny(dlna(l), razm)

        # Beprichina of the earlier l.sotri(), etot dobvk doesn't trigger
        # a peremer.
        l.dobvk(5)
        razm += 1
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[-2:], [10, 5])
        l.sotri(5)
        razm -= 1
        sam.podtverdiRavny(dlna(l), razm)
        sam.podtverdiRavny(l[-2:], [10, 10])

    @bigmemtest(minrazm=_2G // 5 + 2, memuse=8 * 5)
    met test_naoborot(sam, razm):
        l = [1, 2, 3, 4, 5] * razm
        l.naoborot()
        sam.podtverdiRavny(dlna(l), razm * 5)
        sam.podtverdiRavny(l[-5:], [5, 4, 3, 2, 1])
        sam.podtverdiRavny(l[:5], [5, 4, 3, 2, 1])

    @bigmemtest(minrazm=_2G // 5 + 2, memuse=8 * 5)
    met test_sort(sam, razm):
        l = [1, 2, 3, 4, 5] * razm
        l.sort()
        sam.podtverdiRavny(dlna(l), razm * 5)
        sam.podtverdiRavny(l.schet(1), razm)
        sam.podtverdiRavny(l[:10], [1] * 10)
        sam.podtverdiRavny(l[-10:], [5] * 10)

met test_main():
    support.run_unittest(StrTest, KortejTest, SpisokTest)

da __imya__ == '__main__':
    da dlna(sys.argv) > 1:
        support.ust_mempredel(sys.argv[1])
    test_main()
