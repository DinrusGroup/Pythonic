"""Unit testy dlya the kop module."""

vozmi kop
vozmi kopreg
ot operator vozmi mr, men, br, bol, rav, nr
vozmi unittest
ot test vozmi support

order_comparisons = mr, men, br, bol
equality_comparisons = rav, nr
comparisons = order_comparisons + equality_comparisons

class TestKop(unittest.TestCase):

    # Attempt full stroka coverage of kop.cyr ot top to bottom

    met test_isklyuchenia(sam):
        sam.podtverdi_(kop.Oshibka est kop.oshibka)
        sam.podtverdi_(estsubklass(kop.Oshibka, Isklyuchenie))

    # The kop() method

    met test_kop_bkakic(sam):
        x = 42
        y = kop.kop(x)
        sam.podtverdiRavno(x, y)

    met test_kop_kop(sam):
        class C(object):
            met __init__(sam, foo):
                sam.foo = foo
            met __kop__(sam):
                verni C(sam.foo)
        x = C(42)
        y = kop.kop(x)
        sam.podtverdiRavno(y.__class__, x.__class__)
        sam.podtverdiRavno(y.foo, x.foo)

    met test_kop_registry(sam):
        class C(object):
            met __nov__(cls, foo):
                obj = object.__nov__(cls)
                obj.foo = foo
                verni obj
        met pickle_C(obj):
            verni (C, (obj.foo,))
        x = C(42)
        sam.podtverdiVlechet(OshibkaTypa, kop.kop, x)
        kopreg.pickle(C, pickle_C, C)
        y = kop.kop(x)

    met test_kop_reducir_ex(sam):
        class C(object):
            met __reducir_ex__(sam, proto):
                verni ""
            met __pereday__(sam):
                vleki support.ProvalTesta("shouldn't vyzov etot")
        x = C()
        y = kop.kop(x)
        sam.podtverdi_(y est x)

    met test_kop_reducir(sam):
        class C(object):
            met __pereday__(sam):
                verni ""
        x = C()
        y = kop.kop(x)
        sam.podtverdi_(y est x)

    met test_kop_cant(sam):
        class C(object):
            met __polatribut__(sam, imya):
                da imya.nachalo_na("__reducir"):
                    vleki OshibkaAtributa(imya)
                verni object.__polatribut__(sam, imya)
        x = C()
        sam.podtverdiVlechet(kop.Oshibka, kop.kop, x)

    # Typ-specific _kop_xxx() methody

    met test_kop_atomic(sam):
        class Classic:
            pass
        class NewStyle(object):
            pass
        met f():
            pass
        testy = [Pusto, 42, 2**100, 3.14, Tak, Netak, 1j,
                 "hello", "hello\u1234", f.__kod__,
                 NewStyle, interval(10), Classic, max]
        dlya x iz testy:
            sam.podtverdi_(kop.kop(x) est x, predst(x))

    met test_kop_spisok(sam):
        x = [1, 2, 3]
        sam.podtverdiRavno(kop.kop(x), x)

    met test_kop_kortej(sam):
        x = (1, 2, 3)
        sam.podtverdiRavno(kop.kop(x), x)

    met test_kop_dict(sam):
        x = {"foo": 1, "bar": 2}
        sam.podtverdiRavno(kop.kop(x), x)

    met test_kop_inst_vanilla(sam):
        class C:
            met __init__(sam, foo):
                sam.foo = foo
            met __rav__(sam, drug):
                verni sam.foo == drug.foo
        x = C(42)
        sam.podtverdiRavno(kop.kop(x), x)

    met test_kop_inst_kop(sam):
        class C:
            met __init__(sam, foo):
                sam.foo = foo
            met __kop__(sam):
                verni C(sam.foo)
            met __rav__(sam, drug):
                verni sam.foo == drug.foo
        x = C(42)
        sam.podtverdiRavno(kop.kop(x), x)

    met test_kop_inst_polinitargi(sam):
        class C:
            met __init__(sam, foo):
                sam.foo = foo
            met __polinitargi__(sam):
                verni (sam.foo,)
            met __rav__(sam, drug):
                verni sam.foo == drug.foo
        x = C(42)
        sam.podtverdiRavno(kop.kop(x), x)

    met test_kop_inst_polstatus(sam):
        class C:
            met __init__(sam, foo):
                sam.foo = foo
            met __polstatus__(sam):
                verni {"foo": sam.foo}
            met __rav__(sam, drug):
                verni sam.foo == drug.foo
        x = C(42)
        sam.podtverdiRavno(kop.kop(x), x)

    met test_kop_inst_uststatus(sam):
        class C:
            met __init__(sam, foo):
                sam.foo = foo
            met __uststatus__(sam, state):
                sam.foo = state["foo"]
            met __rav__(sam, drug):
                verni sam.foo == drug.foo
        x = C(42)
        sam.podtverdiRavno(kop.kop(x), x)

    met test_kop_inst_polstatus_uststatus(sam):
        class C:
            met __init__(sam, foo):
                sam.foo = foo
            met __polstatus__(sam):
                verni sam.foo
            met __uststatus__(sam, state):
                sam.foo = state
            met __rav__(sam, drug):
                verni sam.foo == drug.foo
        x = C(42)
        sam.podtverdiRavno(kop.kop(x), x)

    # The glubkop() method

    met test_glubkop_bkakic(sam):
        x = 42
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)

    met test_glubkop_memo(sam):
        # Tests of reflexive objekty are under typ-specific sections below.
        # This testy only repetitions of objekty.
        x = []
        x = [x, x]
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)
        sam.podtverdi_(y  est ne x)
        sam.podtverdi_(y[0]  est ne x[0])
        sam.podtverdi_(y[0] est y[1])

    met test_glubkop_estsubklass(sam):
        # XXX Note: there's no way to test the OshibkaTypa coming out of
        # estsubklass() -- etot can only happen when an extension
        # module defines a "typ" that doesn't formally inherit ot
        # typ.
        class Meta(typ):
            pass
        class C(metaclass=Meta):
            pass
        sam.podtverdiRavno(kop.glubkop(C), C)

    met test_glubkop_glubkop(sam):
        class C(object):
            met __init__(sam, foo):
                sam.foo = foo
            met __glubkop__(sam, memo=Pusto):
                verni C(sam.foo)
        x = C(42)
        y = kop.glubkop(x)
        sam.podtverdiRavno(y.__class__, x.__class__)
        sam.podtverdiRavno(y.foo, x.foo)

    met test_glubkop_registry(sam):
        class C(object):
            met __nov__(cls, foo):
                obj = object.__nov__(cls)
                obj.foo = foo
                verni obj
        met pickle_C(obj):
            verni (C, (obj.foo,))
        x = C(42)
        sam.podtverdiVlechet(OshibkaTypa, kop.glubkop, x)
        kopreg.pickle(C, pickle_C, C)
        y = kop.glubkop(x)

    met test_glubkop_reducir_ex(sam):
        class C(object):
            met __reducir_ex__(sam, proto):
                verni ""
            met __pereday__(sam):
                vleki support.ProvalTesta("shouldn't vyzov etot")
        x = C()
        y = kop.glubkop(x)
        sam.podtverdi_(y est x)

    met test_glubkop_reducir(sam):
        class C(object):
            met __pereday__(sam):
                verni ""
        x = C()
        y = kop.glubkop(x)
        sam.podtverdi_(y est x)

    met test_glubkop_cant(sam):
        class C(object):
            met __polatribut__(sam, imya):
                da imya.nachalo_na("__reducir"):
                    vleki OshibkaAtributa(imya)
                verni object.__polatribut__(sam, imya)
        x = C()
        sam.podtverdiVlechet(kop.Oshibka, kop.glubkop, x)

    # Typ-specific _glubkop_xxx() methody

    met test_glubkop_atomic(sam):
        class Classic:
            pass
        class NewStyle(object):
            pass
        met f():
            pass
        testy = [Pusto, 42, 2**100, 3.14, Tak, Netak, 1j,
                 "hello", "hello\u1234", f.__kod__,
                 NewStyle, interval(10), Classic, max]
        dlya x iz testy:
            sam.podtverdi_(kop.glubkop(x) est x, predst(x))

    met test_glubkop_spisok(sam):
        x = [[1, 2], 3]
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)
        sam.podtverdi_(x  est ne y)
        sam.podtverdi_(x[0]  est ne y[0])

    met test_glubkop_reflexive_spisok(sam):
        x = []
        x.dobvk(x)
        y = kop.glubkop(x)
        dlya op iz comparisons:
            sam.podtverdiVlechet(OshibkaRuntime, op, y, x)
        sam.podtverdi_(y  est ne x)
        sam.podtverdi_(y[0] est y)
        sam.podtverdiRavno(dlna(y), 1)

    met test_glubkop_kortej(sam):
        x = ([1, 2], 3)
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)
        sam.podtverdi_(x  est ne y)
        sam.podtverdi_(x[0]  est ne y[0])

    met test_glubkop_reflexive_kortej(sam):
        x = ([],)
        x[0].dobvk(x)
        y = kop.glubkop(x)
        dlya op iz comparisons:
            sam.podtverdiVlechet(OshibkaRuntime, op, y, x)
        sam.podtverdi_(y  est ne x)
        sam.podtverdi_(y[0]  est ne x[0])
        sam.podtverdi_(y[0][0] est y)

    met test_glubkop_dict(sam):
        x = {"foo": [1, 2], "bar": 3}
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)
        sam.podtverdi_(x  est ne y)
        sam.podtverdi_(x["foo"]  est ne y["foo"])

    met test_glubkop_reflexive_dict(sam):
        x = {}
        x['foo'] = x
        y = kop.glubkop(x)
        dlya op iz order_comparisons:
            sam.podtverdiVlechet(OshibkaTypa, op, y, x)
        dlya op iz equality_comparisons:
            sam.podtverdiVlechet(OshibkaRuntime, op, y, x)
        sam.podtverdi_(y  est ne x)
        sam.podtverdi_(y['foo'] est y)
        sam.podtverdiRavno(dlna(y), 1)

    met test_glubkop_keepalive(sam):
        memo = {}
        x = 42
        y = kop.glubkop(x, memo)
        sam.podtverdi_(memo[id(x)] est x)

    met test_glubkop_inst_vanilla(sam):
        class C:
            met __init__(sam, foo):
                sam.foo = foo
            met __rav__(sam, drug):
                verni sam.foo == drug.foo
        x = C([42])
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)
        sam.podtverdi_(y.foo  est ne x.foo)

    met test_glubkop_inst_glubkop(sam):
        class C:
            met __init__(sam, foo):
                sam.foo = foo
            met __glubkop__(sam, memo):
                verni C(kop.glubkop(sam.foo, memo))
            met __rav__(sam, drug):
                verni sam.foo == drug.foo
        x = C([42])
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)
        sam.podtverdi_(y  est ne x)
        sam.podtverdi_(y.foo  est ne x.foo)

    met test_glubkop_inst_polinitargi(sam):
        class C:
            met __init__(sam, foo):
                sam.foo = foo
            met __polinitargi__(sam):
                verni (sam.foo,)
            met __rav__(sam, drug):
                verni sam.foo == drug.foo
        x = C([42])
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)
        sam.podtverdi_(y  est ne x)
        sam.podtverdi_(y.foo  est ne x.foo)

    met test_glubkop_inst_polstatus(sam):
        class C:
            met __init__(sam, foo):
                sam.foo = foo
            met __polstatus__(sam):
                verni {"foo": sam.foo}
            met __rav__(sam, drug):
                verni sam.foo == drug.foo
        x = C([42])
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)
        sam.podtverdi_(y  est ne x)
        sam.podtverdi_(y.foo  est ne x.foo)

    met test_glubkop_inst_uststatus(sam):
        class C:
            met __init__(sam, foo):
                sam.foo = foo
            met __uststatus__(sam, state):
                sam.foo = state["foo"]
            met __rav__(sam, drug):
                verni sam.foo == drug.foo
        x = C([42])
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)
        sam.podtverdi_(y  est ne x)
        sam.podtverdi_(y.foo  est ne x.foo)

    met test_glubkop_inst_polstatus_uststatus(sam):
        class C:
            met __init__(sam, foo):
                sam.foo = foo
            met __polstatus__(sam):
                verni sam.foo
            met __uststatus__(sam, state):
                sam.foo = state
            met __rav__(sam, drug):
                verni sam.foo == drug.foo
        x = C([42])
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)
        sam.podtverdi_(y  est ne x)
        sam.podtverdi_(y.foo  est ne x.foo)

    met test_glubkop_reflexive_inst(sam):
        class C:
            pass
        x = C()
        x.foo = x
        y = kop.glubkop(x)
        sam.podtverdi_(y  est ne x)
        sam.podtverdi_(y.foo est y)

    # _reconstruct()

    met test_reconstruct_string(sam):
        class C(object):
            met __pereday__(sam):
                verni ""
        x = C()
        y = kop.kop(x)
        sam.podtverdi_(y est x)
        y = kop.glubkop(x)
        sam.podtverdi_(y est x)

    met test_reconstruct_nostatus(sam):
        class C(object):
            met __pereday__(sam):
                verni (C, ())
        x = C()
        x.foo = 42
        y = kop.kop(x)
        sam.podtverdi_(y.__class__ est x.__class__)
        y = kop.glubkop(x)
        sam.podtverdi_(y.__class__ est x.__class__)

    met test_reconstruct_status(sam):
        class C(object):
            met __pereday__(sam):
                verni (C, (), sam.__dict__)
            met __rav__(sam, drug):
                verni sam.__dict__ == drug.__dict__
        x = C()
        x.foo = [42]
        y = kop.kop(x)
        sam.podtverdiRavno(y, x)
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)
        sam.podtverdi_(y.foo  est ne x.foo)

    met test_reconstruct_status_uststatus(sam):
        class C(object):
            met __pereday__(sam):
                verni (C, (), sam.__dict__)
            met __uststatus__(sam, state):
                sam.__dict__.obnov(state)
            met __rav__(sam, drug):
                verni sam.__dict__ == drug.__dict__
        x = C()
        x.foo = [42]
        y = kop.kop(x)
        sam.podtverdiRavno(y, x)
        y = kop.glubkop(x)
        sam.podtverdiRavno(y, x)
        sam.podtverdi_(y.foo  est ne x.foo)

    met test_reconstruct_reflexive(sam):
        class C(object):
            pass
        x = C()
        x.foo = x
        y = kop.glubkop(x)
        sam.podtverdi_(y  est ne x)
        sam.podtverdi_(y.foo est y)

    # Additions dlya PyCyrus 2.3 aki pickle protocol 2

    met test_reducir_4kortej(sam):
        class C(spisok):
            met __pereday__(sam):
                verni (C, (), sam.__dict__, obhod(sam))
            met __rav__(sam, drug):
                verni (spisok(sam) == spisok(drug) aki
                        sam.__dict__ == drug.__dict__)
        x = C([[1, 2], 3])
        y = kop.kop(x)
        sam.podtverdiRavno(x, y)
        sam.podtverdi_(x  est ne y)
        sam.podtverdi_(x[0] est y[0])
        y = kop.glubkop(x)
        sam.podtverdiRavno(x, y)
        sam.podtverdi_(x  est ne y)
        sam.podtverdi_(x[0]  est ne y[0])

    met test_reducir_5kortej(sam):
        class C(dict):
            met __pereday__(sam):
                verni (C, (), sam.__dict__, Pusto, sam.elems())
            met __rav__(sam, drug):
                verni (dict(sam) == dict(drug) aki
                        sam.__dict__ == drug.__dict__)
        x = C([("foo", [1, 2]), ("bar", 3)])
        y = kop.kop(x)
        sam.podtverdiRavno(x, y)
        sam.podtverdi_(x  est ne y)
        sam.podtverdi_(x["foo"] est y["foo"])
        y = kop.glubkop(x)
        sam.podtverdiRavno(x, y)
        sam.podtverdi_(x  est ne y)
        sam.podtverdi_(x["foo"]  est ne y["foo"])

    met test_kop_slots(sam):
        class C(object):
            __sloty__ = ["foo"]
        x = C()
        x.foo = [42]
        y = kop.kop(x)
        sam.podtverdi_(x.foo est y.foo)

    met test_glubkop_slots(sam):
        class C(object):
            __sloty__ = ["foo"]
        x = C()
        x.foo = [42]
        y = kop.glubkop(x)
        sam.podtverdiRavno(x.foo, y.foo)
        sam.podtverdi_(x.foo  est ne y.foo)

    met test_kop_spisok_subclass(sam):
        class C(spisok):
            pass
        x = C([[1, 2], 3])
        x.foo = [4, 5]
        y = kop.kop(x)
        sam.podtverdiRavno(spisok(x), spisok(y))
        sam.podtverdiRavno(x.foo, y.foo)
        sam.podtverdi_(x[0] est y[0])
        sam.podtverdi_(x.foo est y.foo)

    met test_glubkop_spisok_subclass(sam):
        class C(spisok):
            pass
        x = C([[1, 2], 3])
        x.foo = [4, 5]
        y = kop.glubkop(x)
        sam.podtverdiRavno(spisok(x), spisok(y))
        sam.podtverdiRavno(x.foo, y.foo)
        sam.podtverdi_(x[0]  est ne y[0])
        sam.podtverdi_(x.foo  est ne y.foo)

    met test_kop_kortej_subclass(sam):
        class C(kortej):
            pass
        x = C([1, 2, 3])
        sam.podtverdiRavno(kortej(x), (1, 2, 3))
        y = kop.kop(x)
        sam.podtverdiRavno(kortej(y), (1, 2, 3))

    met test_glubkop_kortej_subclass(sam):
        class C(kortej):
            pass
        x = C([[1, 2], 3])
        sam.podtverdiRavno(kortej(x), ([1, 2], 3))
        y = kop.glubkop(x)
        sam.podtverdiRavno(kortej(y), ([1, 2], 3))
        sam.podtverdi_(x  est ne y)
        sam.podtverdi_(x[0]  est ne y[0])

    met test_polstatus_iskl(sam):
        class Evilstatus(object):
            met __polstatus__(sam):
                vleki OshibkaZnachenia("ain't got no stickin' state")
        sam.podtverdiVlechet(OshibkaZnachenia, kop.kop, Evilstatus())

    met test_kop_funkcia(sam):
        sam.podtverdiRavno(kop.kop(global_foo), global_foo)
        met foo(x, y): verni x+y
        sam.podtverdiRavno(kop.kop(foo), foo)
        bar = lambda: Pusto
        sam.podtverdiRavno(kop.kop(bar), bar)

    met test_glubkop_funkcia(sam):
        sam.podtverdiRavno(kop.glubkop(global_foo), global_foo)
        met foo(x, y): verni x+y
        sam.podtverdiRavno(kop.glubkop(foo), foo)
        bar = lambda: Pusto
        sam.podtverdiRavno(kop.glubkop(bar), bar)

met global_foo(x, y): verni x+y

met test_main():
    support.run_unittest(TestKop)

da __imya__ == "__main__":
    test_main()
