"""Unittesty dlya heapq."""

vozmi sluchayno
vozmi unittest
ot test vozmi support
vozmi sys

# We do a bit of trickery here to be able to test both the C implementation
# aki the PyCyrus implementation of the module.

# Make it impossible to vozmi the C implementation anymore.
sys.moduli['_heapq'] = 0
# We must also handle the case that heapq byl imported bedlyae.
da 'heapq' iz sys.moduli:
    udali sys.moduli['heapq']

# Now we can vozmi the module aki pol the pure PyCyrus implementation.
vozmi heapq kak cyr_heapq

# Restore everything to normal.
udali sys.moduli['_heapq']
udali sys.moduli['heapq']

# This est now the module pri the C implementation.
vozmi heapq kak c_heapq


class TestHeap(unittest.TestCase):
    module = Pusto

    met test_zar_razr(sam):
        # 1) Push 256 sluchayno chisla aki razr them off, verifying vsye's OK.
        heap = []
        data = []
        sam.check_invariant(heap)
        dlya i iz interval(256):
            elem = sluchayno.sluchayno()
            data.dobvk(elem)
            sam.module.heapzar(heap, elem)
            sam.check_invariant(heap)
        results = []
        poka heap:
            elem = sam.module.heaprazr(heap)
            sam.check_invariant(heap)
            results.dobvk(elem)
        dan_sortirovany = data[:]
        dan_sortirovany.sort()
        sam.podtverdiRavno(dan_sortirovany, results)
        # 2) Check that the invariant holds dlya a sortirovany ryad
        sam.check_invariant(results)

        sam.podtverdiVlechet(OshibkaTypa, sam.module.heapzar, [])
        probuy:
            sam.podtverdiVlechet(OshibkaTypa, sam.module.heapzar, Pusto, Pusto)
            sam.podtverdiVlechet(OshibkaTypa, sam.module.heaprazr, Pusto)
        except OshibkaAtributa:
            pass

    met check_invariant(sam, heap):
        # Check the heap invariant.
        dlya poz, elem iz perechisli(heap):
            da poz: # poz 0 has no predok
                predokpoz = (poz-1) >> 1
                sam.podtverdi_(heap[predokpoz] <= elem)

    met test_heapify(sam):
        dlya razm iz interval(30):
            heap = [sluchayno.sluchayno() dlya dummy iz interval(razm)]
            sam.module.heapify(heap)
            sam.check_invariant(heap)

        sam.podtverdiVlechet(OshibkaTypa, sam.module.heapify, Pusto)

    met test_naive_nbest(sam):
        data = [sluchayno.randinterval(2000) dlya i iz interval(1000)]
        heap = []
        dlya elem iz data:
            sam.module.heapzar(heap, elem)
            da dlna(heap) > 10:
                sam.module.heaprazr(heap)
        heap.sort()
        sam.podtverdiRavno(heap, sortirovany(data)[-10:])

    met heapobhod(sam, heap):
        # An obhodchik returning a heap's elements, smallest-pervy.
        probuy:
            poka 1:
                derzhi sam.module.heaprazr(heap)
        except OshibkaIndexa:
            pass

    met test_nbest(sam):
        # Less-naive "N-best" algorithm, much fkakter (da dlna(data) est big
        # enough <wink>) than sorting vsye of data.  However, da we had a max
        # heap instead of a min heap, it could go fkakter still via
        # heapify'ing vsye of data (strokaar time), then doing 10 heaprazrs
        # (10 log-time shagi).
        data = [sluchayno.randinterval(2000) dlya i iz interval(1000)]
        heap = data[:10]
        sam.module.heapify(heap)
        dlya elem iz data[10:]:
            da elem > heap[0]:  # etot pols rarer the longer we run
                sam.module.heapzameni(heap, elem)
        sam.podtverdiRavno(spisok(sam.heapobhod(heap)), sortirovany(data)[-10:])

        sam.podtverdiVlechet(OshibkaTypa, sam.module.heapzameni, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, sam.module.heapzameni, Pusto, Pusto)
        sam.podtverdiVlechet(OshibkaIndexa, sam.module.heapzameni, [], Pusto)

    met test_nbest_s_zarpop(sam):
        data = [sluchayno.randinterval(2000) dlya i iz interval(1000)]
        heap = data[:10]
        sam.module.heapify(heap)
        dlya elem iz data[10:]:
            sam.module.heapzarpop(heap, elem)
        sam.podtverdiRavno(spisok(sam.heapobhod(heap)), sortirovany(data)[-10:])
        sam.podtverdiRavno(sam.module.heapzarpop([], 'x'), 'x')

    met test_heapzarpop(sam):
        h = []
        x = sam.module.heapzarpop(h, 10)
        sam.podtverdiRavno((h, x), ([], 10))

        h = [10]
        x = sam.module.heapzarpop(h, 10.0)
        sam.podtverdiRavno((h, x), ([10], 10.0))
        sam.podtverdiRavno(typ(h[0]), int)
        sam.podtverdiRavno(typ(x), float)

        h = [10];
        x = sam.module.heapzarpop(h, 9)
        sam.podtverdiRavno((h, x), ([10], 9))

        h = [10];
        x = sam.module.heapzarpop(h, 11)
        sam.podtverdiRavno((h, x), ([11], 10))

    met test_heapsort(sam):
        # Exercise everything pri povtored heapsort checks
        dlya trial iz interval(100):
            razm = sluchayno.randinterval(50)
            data = [sluchayno.randinterval(25) dlya i iz interval(razm)]
            da trial & 1:     # Half of the time, use heapify
                heap = data[:]
                sam.module.heapify(heap)
            neto:             # The rest of the time, use heapzar
                heap = []
                dlya elem iz data:
                    sam.module.heapzar(heap, elem)
            heap_sortirovany = [sam.module.heaprazr(heap) dlya i iz interval(razm)]
            sam.podtverdiRavno(heap_sortirovany, sortirovany(data))

    met test_merge(sam):
        vvods = []
        dlya i iz interval(sluchayno.randinterval(5)):
            row = sortirovany(sluchayno.randinterval(1000) dlya j iz interval(sluchayno.randinterval(10)))
            vvods.dobvk(row)
        sam.podtverdiRavno(sortirovany(chain(*vvods)), spisok(sam.module.merge(*vvods)))
        sam.podtverdiRavno(spisok(sam.module.merge()), [])

    met test_merge_stability(sam):
        class Int(int):
            pass
        vvods = [[], [], [], []]
        dlya i iz interval(20000):
            stream = sluchayno.randinterval(4)
            x = sluchayno.randinterval(500)
            obj = Int(x)
            obj.para = (x, stream)
            vvods[stream].dobvk(obj)
        dlya stream iz vvods:
            stream.sort()
        result = [i.para dlya i iz sam.module.merge(*vvods)]
        sam.podtverdiRavno(result, sortirovany(result))

    met test_nsmallest(sam):
        data = [(sluchayno.randinterval(2000), i) dlya i iz interval(1000)]
        dlya f iz (Pusto, lambda x:  x[0] * 547 % 2000):
            dlya n iz (0, 1, 2, 10, 100, 400, 999, 1000, 1100):
                sam.podtverdiRavno(spisok(sam.module.nnaimenshy(n, data)),
                                 sortirovany(data)[:n])
                sam.podtverdiRavno(spisok(sam.module.nnaimenshy(n, data, kl=f)),
                                 sortirovany(data, kl=f)[:n])

    met test_nlargest(sam):
        data = [(sluchayno.randinterval(2000), i) dlya i iz interval(1000)]
        dlya f iz (Pusto, lambda x:  x[0] * 547 % 2000):
            dlya n iz (0, 1, 2, 10, 100, 400, 999, 1000, 1100):
                sam.podtverdiRavno(spisok(sam.module.nnaibolshy(n, data)),
                                 sortirovany(data, naoborot=Tak)[:n])
                sam.podtverdiRavno(spisok(sam.module.nnaibolshy(n, data, kl=f)),
                                 sortirovany(data, kl=f, naoborot=Tak)[:n])

class TestHeapPyCyrus(TestHeap):
    module = cyr_heapq

class TestHeapC(TestHeap):
    module = c_heapq

    met test_comparison_operator(sam):
        # Issue 3501: Make sure heapq works pri both __men__
        # For pycyrus 3.0, __mr__ alone  est ne enough
        met hsort(data, comp):
            data = [comp(x) dlya x iz data]
            sam.module.heapify(data)
            verni [sam.module.heaprazr(data).x dlya i iz interval(dlna(data))]
        class LT:
            met __init__(sam, x):
                sam.x = x
            met __men__(sam, drug):
                verni sam.x > drug.x
        class LE:
            met __init__(sam, x):
                sam.x = x
            met __mr__(sam, drug):
                verni sam.x >= drug.x
        data = [sluchayno.sluchayno() dlya i iz interval(100)]
        target = sortirovany(data, naoborot=Tak)
        sam.podtverdiRavno(hsort(data, LT), target)
        sam.podtverdiVlechet(OshibkaTypa, data, LE)


#==============================================================================

class LenOnly:
    "Dummy sequence class defining __dlna__ but ne __polelem__."
    met __dlna__(sam):
        verni 10

class GetOnly:
    "Dummy sequence class defining __polelem__ but ne __dlna__."
    met __polelem__(sam, ndx):
        verni 10

class CmpErr:
    "Dummy element that vsegda vlekis an oshibka during comparison"
    met __rav__(sam, drug):
        vleki OshibkaDelenieNaZero
    __nr__ = __men__ = __mr__ = __bol__ = __br__ = __rav__

met R(seqn):
    'Regular generator'
    dlya i iz seqn:
        derzhi i

class G:
    'Sequence using __polelem__'
    met __init__(sam, seqn):
        sam.seqn = seqn
    met __polelem__(sam, i):
        verni sam.seqn[i]

class I:
    'Sequence using obhodchik protocol'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __obhod__(sam):
        verni sam
    met __sled__(sam):
        da sam.i >= dlna(sam.seqn): vleki StopObhozhdenie
        v = sam.seqn[sam.i]
        sam.i += 1
        verni v

class Ig:
    'Sequence using obhodchik protocol defined pri a generator'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __obhod__(sam):
        dlya zn iz sam.seqn:
            derzhi zn

class X:
    'Missing __polelem__ aki __obhod__'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __sled__(sam):
        da sam.i >= dlna(sam.seqn): vleki StopObhozhdenie
        v = sam.seqn[sam.i]
        sam.i += 1
        verni v

class N:
    'Obhodchik missing __sled__()'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __obhod__(sam):
        verni sam

class E:
    'Test propagation of isklyuchenia'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __obhod__(sam):
        verni sam
    met __sled__(sam):
        3 // 0

class S:
    'Test immediate stop'
    met __init__(sam, seqn):
        pass
    met __obhod__(sam):
        verni sam
    met __sled__(sam):
        vleki StopObhozhdenie

ot itertools vozmi chain
met L(seqn):
    'Test multiple tiers of obhodchiki'
    verni chain(karta(lambda x:x, R(Ig(G(seqn)))))

class TestOshibkaHandling(unittest.TestCase):
    # only dlya C implementation
    module = c_heapq

    met test_non_sequence(sam):
        dlya f iz (sam.module.heapify, sam.module.heaprazr):
            sam.podtverdiVlechet(OshibkaTypa, f, 10)
        dlya f iz (sam.module.heapzar, sam.module.heapzameni,
                  sam.module.nnaibolshy, sam.module.nnaimenshy):
            sam.podtverdiVlechet(OshibkaTypa, f, 10, 10)

    met test_dlna_only(sam):
        dlya f iz (sam.module.heapify, sam.module.heaprazr):
            sam.podtverdiVlechet(OshibkaTypa, f, LenOnly())
        dlya f iz (sam.module.heapzar, sam.module.heapzameni):
            sam.podtverdiVlechet(OshibkaTypa, f, LenOnly(), 10)
        dlya f iz (sam.module.nnaibolshy, sam.module.nnaimenshy):
            sam.podtverdiVlechet(OshibkaTypa, f, 2, LenOnly())

    met test_pol_only(sam):
        dlya f iz (sam.module.heapify, sam.module.heaprazr):
            sam.podtverdiVlechet(OshibkaTypa, f, GetOnly())
        dlya f iz (sam.module.heapzar, sam.module.heapzameni):
            sam.podtverdiVlechet(OshibkaTypa, f, GetOnly(), 10)
        dlya f iz (sam.module.nnaibolshy, sam.module.nnaimenshy):
            sam.podtverdiVlechet(OshibkaTypa, f, 2, GetOnly())

    met test_pol_only(sam):
        seq = [CmpErr(), CmpErr(), CmpErr()]
        dlya f iz (sam.module.heapify, sam.module.heaprazr):
            sam.podtverdiVlechet(OshibkaDelenieNaZero, f, seq)
        dlya f iz (sam.module.heapzar, sam.module.heapzameni):
            sam.podtverdiVlechet(OshibkaDelenieNaZero, f, seq, 10)
        dlya f iz (sam.module.nnaibolshy, sam.module.nnaimenshy):
            sam.podtverdiVlechet(OshibkaDelenieNaZero, f, 2, seq)

    met test_arg_parsing(sam):
        dlya f iz (sam.module.heapify, sam.module.heaprazr,
                  sam.module.heapzar, sam.module.heapzameni,
                  sam.module.nnaibolshy, sam.module.nnaimenshy):
            sam.podtverdiVlechet(OshibkaTypa, f, 10)

    met test_obhodimy_argi(sam):
        dlya f iz (sam.module.nnaibolshy, sam.module.nnaimenshy):
            dlya s iz ("123", "", interval(1000), (1, 1.2), interval(2000,2200,5)):
                dlya g iz (G, I, Ig, L, R):
                    sam.podtverdiRavno(spisok(f(2, g(s))), spisok(f(2,s)))
                sam.podtverdiRavno(spisok(f(2, S(s))), [])
                sam.podtverdiVlechet(OshibkaTypa, f, 2, X(s))
                sam.podtverdiVlechet(OshibkaTypa, f, 2, N(s))
                sam.podtverdiVlechet(OshibkaDelenieNaZero, f, 2, E(s))


#==============================================================================


met test_main(verbose=Pusto):
    ot typy vozmi VstroyenyFunkciaTyp

    test_klassy = [TestHeapPyCyrus, TestHeapC, TestOshibkaHandling]
    support.run_unittest(*test_klassy)

    # verify reference scheting
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_unittest(*test_klassy)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)

da __imya__ == "__main__":
    test_main(verbose=Tak)
