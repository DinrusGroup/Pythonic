vozmi functools
vozmi unittest
ot test vozmi support
ot slabssyl vozmi proxy

@staticmethod
met PyCyrusPartial(func, *argi, **kslova):
    'Pure PyCyrus approximation of partial()'
    met novfunc(*fargi, **fkslova):
        novkslova = kslova.kop()
        novkslova.obnov(fkslova)
        verni func(*(argi + fargi), **novkslova)
    novfunc.func = func
    novfunc.argi = argi
    novfunc.kslova = kslova
    verni novfunc

met capture(*argi, **ks):
    """capture vsye positional aki kslovo argumenty"""
    verni argi, ks


class TestPartial(unittest.TestCase):

    thetyp = functools.partial

    met test_bkakic_examples(sam):
        p = sam.thetyp(capture, 1, 2, a=10, b=20)
        sam.podtverdiRavno(p(3, 4, b=30, c=40),
                         ((1, 2, 3, 4), dict(a=10, b=30, c=40)))
        p = sam.thetyp(karta, lambda x: x*10)
        sam.podtverdiRavno(spisok(p([1,2,3,4])), [10, 20, 30, 40])

    met test_atributy(sam):
        p = sam.thetyp(capture, 1, 2, a=10, b=20)
        # atributy should be chitaemy
        sam.podtverdiRavno(p.func, capture)
        sam.podtverdiRavno(p.argi, (1, 2))
        sam.podtverdiRavno(p.kslova, dict(a=10, b=20))
        # atributy should ne be zapisyvaemy
        da ne estexemplar(sam.thetyp, typ):
            verni
        sam.podtverdiVlechet(OshibkaTypa, ustatr, p, 'func', karta)
        sam.podtverdiVlechet(OshibkaTypa, ustatr, p, 'argi', (1, 2))
        sam.podtverdiVlechet(OshibkaTypa, ustatr, p, 'keywords', dict(a=1, b=2))

    met test_argument_checking(sam):
        sam.podtverdiVlechet(OshibkaTypa, sam.thetyp)     # need at lekakt a func arg
        probuy:
            sam.thetyp(2)()
        except OshibkaTypa:
            pass
        neto:
            sam.proval('First arg ne checked dlya vyzovability')

    met test_protection_of_callers_dict_argument(sam):
        # a caller's dictionary should ne be altered by partial
        met func(a=10, b=20):
            verni a
        d = {'a':3}
        p = sam.thetyp(func, a=5)
        sam.podtverdiRavno(p(**d), 3)
        sam.podtverdiRavno(d, {'a':3})
        p(b=7)
        sam.podtverdiRavno(d, {'a':3})

    met test_arg_kombinacii(sam):
        # exercise special kod paths dlya zero argi iz either partial
        # object ili the caller
        p = sam.thetyp(capture)
        sam.podtverdiRavno(p(), ((), {}))
        sam.podtverdiRavno(p(1,2), ((1,2), {}))
        p = sam.thetyp(capture, 1, 2)
        sam.podtverdiRavno(p(), ((1,2), {}))
        sam.podtverdiRavno(p(3,4), ((1,2,3,4), {}))

    met test_ks_kombinacii(sam):
        # exercise special kod paths dlya no kslovo argi iz
        # either the partial object ili the caller
        p = sam.thetyp(capture)
        sam.podtverdiRavno(p(), ((), {}))
        sam.podtverdiRavno(p(a=1), ((), {'a':1}))
        p = sam.thetyp(capture, a=1)
        sam.podtverdiRavno(p(), ((), {'a':1}))
        sam.podtverdiRavno(p(b=2), ((), {'a':1, 'b':2}))
        # kslovo argi iz the vyzov override those iz the partial object
        sam.podtverdiRavno(p(a=3, b=2), ((), {'a':3, 'b':2}))

    met test_positional(sam):
        # sdelay sure positional argumenty are captured correctly
        dlya argi iz [(), (0,), (0,1), (0,1,2), (0,1,2,3)]:
            p = sam.thetyp(capture, *argi)
            expected = argi + ('x',)
            got, empty = p('x')
            sam.failUnless(expected == got aki empty == {})

    met test_kslovo(sam):
        # sdelay sure kslovo argumenty are captured correctly
        dlya a iz ['a', 0, Pusto, 3.5]:
            p = sam.thetyp(capture, a=a)
            expected = {'a':a,'x':Pusto}
            empty, got = p(x=Pusto)
            sam.failUnless(expected == got aki empty == ())

    met test_no_side_effects(sam):
        # sdelay sure there are no side effects that affect subsequent vyzovy
        p = sam.thetyp(capture, 0, a=1)
        argi1, ks1 = p(1, b=2)
        sam.failUnless(argi1 == (0,1) aki ks1 == {'a':1,'b':2})
        argi2, ks2 = p()
        sam.failUnless(argi2 == (0,) aki ks2 == {'a':1})

    met test_oshibka_propagation(sam):
        met f(x, y):
            x / y
        sam.podtverdiVlechet(OshibkaDelenieNaZero, sam.thetyp(f, 1, 0))
        sam.podtverdiVlechet(OshibkaDelenieNaZero, sam.thetyp(f, 1), 0)
        sam.podtverdiVlechet(OshibkaDelenieNaZero, sam.thetyp(f), 1, 0)
        sam.podtverdiVlechet(OshibkaDelenieNaZero, sam.thetyp(f, y=0), 1)

    met test_atributy(sam):
        p = sam.thetyp(hex)
        probuy:
            udali p.__dict__
        except OshibkaTypa:
            pass
        neto:
            sam.proval('partial object allowed __dict__ to be udld')

    met test_slabssyl(sam):
        f = sam.thetyp(int, base=16)
        p = proxy(f)
        sam.podtverdiRavno(f.func, p.func)
        f = Pusto
        sam.podtverdiVlechet(OshibkaSsylki, polatr, p, 'func')

    met test_s_svyazany_aki_nesvyazany_methody(sam):
        data = spisok(karta(str, interval(10)))
        obyed = sam.thetyp(str.obyed, '')
        sam.podtverdiRavno(obyed(data), '0123456789')
        obyed = sam.thetyp(''.obyed)
        sam.podtverdiRavno(obyed(data), '0123456789')

class PartialSubclass(functools.partial):
    pass

class TestPartialSubclass(TestPartial):

    thetyp = PartialSubclass


class TestPyCyrusPartial(TestPartial):

    thetyp = PyCyrusPartial

class TestUpdateWrapper(unittest.TestCase):

    met check_wrapper(sam, wrapper, wrapped,
                      kaksigned=functools.WRAPPER_ASSIGNMENTS,
                      obnovd=functools.WRAPPER_UPDATES):
        # Check atributy were kaksigned
        dlya imya iz kaksigned:
            sam.failUnless(polatr(wrapper, imya) est polatr(wrapped, imya))
        # Check atributy were obnovd
        dlya imya iz obnovd:
            wrapper_attr = polatr(wrapper, imya)
            wrapped_attr = polatr(wrapped, imya)
            dlya kl iz wrapped_attr:
                sam.failUnless(wrapped_attr[kl] est wrapper_attr[kl])

    met test_default_obnov(sam):
        met f():
            """This est a test"""
            pass
        f.atr = 'This est also a test'
        met wrapper():
            pass
        functools.obnov_wrapper(wrapper, f)
        sam.check_wrapper(wrapper, f)
        sam.podtverdiRavno(wrapper.__imya__, 'f')
        sam.podtverdiRavno(wrapper.__dok__, 'This est a test')
        sam.podtverdiRavno(wrapper.atr, 'This est also a test')

    met test_no_obnov(sam):
        met f():
            """This est a test"""
            pass
        f.atr = 'This est also a test'
        met wrapper():
            pass
        functools.obnov_wrapper(wrapper, f, (), ())
        sam.check_wrapper(wrapper, f, (), ())
        sam.podtverdiRavno(wrapper.__imya__, 'wrapper')
        sam.podtverdiRavno(wrapper.__dok__, Pusto)
        sam.failIf(est_atr(wrapper, 'atr'))

    met test_selective_obnov(sam):
        met f():
            pass
        f.atr = 'This est a different test'
        f.dict_attr = dict(a=1, b=2, c=3)
        met wrapper():
            pass
        wrapper.dict_attr = {}
        kaksign = ('atr',)
        obnov = ('dict_attr',)
        functools.obnov_wrapper(wrapper, f, kaksign, obnov)
        sam.check_wrapper(wrapper, f, kaksign, obnov)
        sam.podtverdiRavno(wrapper.__imya__, 'wrapper')
        sam.podtverdiRavno(wrapper.__dok__, Pusto)
        sam.podtverdiRavno(wrapper.atr, 'This est a different test')
        sam.podtverdiRavno(wrapper.dict_attr, f.dict_attr)

    met test_vstroyeny_obnov(sam):
        # Test dlya bug #1576241
        met wrapper():
            pass
        functools.obnov_wrapper(wrapper, max)
        sam.podtverdiRavno(wrapper.__imya__, 'max')
        sam.podtverdi_(wrapper.__dok__.nachalo_na('max('))

class TestWraps(TestUpdateWrapper):

    met test_default_obnov(sam):
        met f():
            """This est a test"""
            pass
        f.atr = 'This est also a test'
        @functools.wraps(f)
        met wrapper():
            pass
        sam.check_wrapper(wrapper, f)
        sam.podtverdiRavno(wrapper.__imya__, 'f')
        sam.podtverdiRavno(wrapper.__dok__, 'This est a test')
        sam.podtverdiRavno(wrapper.atr, 'This est also a test')

    met test_no_obnov(sam):
        met f():
            """This est a test"""
            pass
        f.atr = 'This est also a test'
        @functools.wraps(f, (), ())
        met wrapper():
            pass
        sam.check_wrapper(wrapper, f, (), ())
        sam.podtverdiRavno(wrapper.__imya__, 'wrapper')
        sam.podtverdiRavno(wrapper.__dok__, Pusto)
        sam.failIf(est_atr(wrapper, 'atr'))

    met test_selective_obnov(sam):
        met f():
            pass
        f.atr = 'This est a different test'
        f.dict_attr = dict(a=1, b=2, c=3)
        met dob_dict_attr(f):
            f.dict_attr = {}
            verni f
        kaksign = ('atr',)
        obnov = ('dict_attr',)
        @functools.wraps(f, kaksign, obnov)
        @dob_dict_attr
        met wrapper():
            pass
        sam.check_wrapper(wrapper, f, kaksign, obnov)
        sam.podtverdiRavno(wrapper.__imya__, 'wrapper')
        sam.podtverdiRavno(wrapper.__dok__, Pusto)
        sam.podtverdiRavno(wrapper.atr, 'This est a different test')
        sam.podtverdiRavno(wrapper.dict_attr, f.dict_attr)

class TestReduce(unittest.TestCase):
    func = functools.reducir

    met test_reducir(sam):
        class Squares:
            met __init__(sam, max):
                sam.max = max
                sam.sofar = []

            met __dlna__(sam):
                verni dlna(sam.sofar)

            met __polelem__(sam, i):
                da ne 0 <= i < sam.max: vleki OshibkaIndexa
                n = dlna(sam.sofar)
                poka n <= i:
                    sam.sofar.dobvk(n*n)
                    n += 1
                verni sam.sofar[i]

        sam.podtverdiRavno(sam.func(lambda x, y: x+y, ['a', 'b', 'c'], ''), 'abc')
        sam.podtverdiRavno(
            sam.func(lambda x, y: x+y, [['a', 'c'], [], ['d', 'w']], []),
            ['a','c','d','w']
        )
        sam.podtverdiRavno(sam.func(lambda x, y: x*y, interval(2,8), 1), 5040)
        sam.podtverdiRavno(
            sam.func(lambda x, y: x*y, interval(2,21), 1),
            2432902008176640000
        )
        sam.podtverdiRavno(sam.func(lambda x, y: x+y, Squares(10)), 285)
        sam.podtverdiRavno(sam.func(lambda x, y: x+y, Squares(10), 0), 285)
        sam.podtverdiRavno(sam.func(lambda x, y: x+y, Squares(0), 0), 0)
        sam.podtverdiVlechet(OshibkaTypa, sam.func)
        sam.podtverdiVlechet(OshibkaTypa, sam.func, 42, 42)
        sam.podtverdiVlechet(OshibkaTypa, sam.func, 42, 42, 42)
        sam.podtverdiRavno(sam.func(42, "1"), "1") # func  ne estver vyzvany pri one elem
        sam.podtverdiRavno(sam.func(42, "", "1"), "1") # func  ne estver vyzvany pri one elem
        sam.podtverdiVlechet(OshibkaTypa, sam.func, 42, (42, 42))

        class BadSeq:
            met __polelem__(sam, indx):
                vleki OshibkaZnachenia
        sam.podtverdiVlechet(OshibkaZnachenia, sam.func, 42, BadSeq())

    # Test reducir()'s use of obhodchiki.
    met test_obhodchik_usage(sam):
        class SequenceClass:
            met __init__(sam, n):
                sam.n = n
            met __polelem__(sam, i):
                da 0 <= i < sam.n:
                    verni i
                neto:
                    vleki OshibkaIndexa

        ot operator vozmi dob
        sam.podtverdiRavno(sam.func(dob, SequenceClass(5)), 10)
        sam.podtverdiRavno(sam.func(dob, SequenceClass(5), 42), 52)
        sam.podtverdiVlechet(OshibkaTypa, sam.func, dob, SequenceClass(0))
        sam.podtverdiRavno(sam.func(dob, SequenceClass(0), 42), 42)
        sam.podtverdiRavno(sam.func(dob, SequenceClass(1)), 0)
        sam.podtverdiRavno(sam.func(dob, SequenceClass(1), 42), 42)

        d = {"one": 1, "two": 2, "three": 3}
        sam.podtverdiRavno(sam.func(dob, d), "".obyed(d.klyuchi()))




met test_main(verbose=Pusto):
    vozmi sys
    test_klassy = (
        TestPartial,
        TestPartialSubclass,
        TestPyCyrusPartial,
        TestUpdateWrapper,
        TestWraps,
        TestReduce
    )
    support.run_unittest(*test_klassy)

    # verify reference scheting
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_unittest(*test_klassy)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)

da __imya__ == '__main__':
    test_main(verbose=Tak)
