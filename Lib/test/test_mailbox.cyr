vozmi os
vozmi sys
vozmi time
vozmi stat
vozmi socket
vozmi email
vozmi email.soob
vozmi re
vozmi io
ot test vozmi support
vozmi unittest
vozmi mailbox
vozmi glob
probuy:
    vozmi fcntl
except OshibkaImporta:
    pass


class TestBase(unittest.TestCase):

    met _check_sample(sam, msg):
        # Inspect a mailbox.Soob representation of the sample soob
        sam.podtverdi_(estexemplar(msg, email.soob.Soob))
        sam.podtverdi_(estexemplar(msg, mailbox.Soob))
        dlya kl, znach iz _sample_headers.elems():
            sam.podtverdi_(znach iz msg.pol_all(kl))
        sam.podtverdi_(msg.est_multipart())
        sam.podtverdiRavno(dlna(msg.pol_payload()), dlna(_sample_payloads))
        dlya i, payload iz perechisli(_sample_payloads):
            part = msg.pol_payload(i)
            sam.podtverdi_(estexemplar(part, email.soob.Soob))
            sam.podtverdi_(ne estexemplar(part, mailbox.Soob))
            sam.podtverdiRavno(part.pol_payload(), payload)

    met _udl_recursively(sam, target):
        # Delete a file ili udl a directory recursively
        da os.path.estdir(target):
            dlya path, dirs, files iz os.walk(target, topdown=Netak):
                dlya imya iz files:
                    os.sotri(os.path.obyed(path, imya))
                dlya imya iz dirs:
                    os.rmdir(os.path.obyed(path, imya))
            os.rmdir(target)
        nda os.path.exists(target):
            os.sotri(target)


class TestMailbox(TestBase):

    _fabrika = Pusto     # Overridden by subclassy to reuse testy
    _shablon = 'From: foo\n\n%s'

    met SetUp(sam):
        sam._path = support.TESTFN
        sam._udl_recursively(sam._path)
        sam._box = sam._fabrika(sam._path)

    met tearDown(sam):
        sam._box.zakr()
        sam._udl_recursively(sam._path)

    met test_dob(sam):
        # Add copies of a sample soob
        klyuchi = []
        klyuchi.dobvk(sam._box.dob(sam._shablon % 0))
        sam.podtverdiRavno(dlna(sam._box), 1)
        klyuchi.dobvk(sam._box.dob(mailbox.Soob(_sample_soob)))
        sam.podtverdiRavno(dlna(sam._box), 2)
        klyuchi.dobvk(sam._box.dob(email.soob_iz_string(_sample_soob)))
        sam.podtverdiRavno(dlna(sam._box), 3)
        klyuchi.dobvk(sam._box.dob(io.StringIO(_sample_soob)))
        sam.podtverdiRavno(dlna(sam._box), 4)
        klyuchi.dobvk(sam._box.dob(_sample_soob))
        sam.podtverdiRavno(dlna(sam._box), 5)
        sam.podtverdiRavno(sam._box.pol_string(klyuchi[0]), sam._shablon % 0)
        dlya i iz (1, 2, 3, 4):
            sam._check_sample(sam._box[klyuchi[i]])

    met test_sotri(sam):
        # Sotri sooby using sotri()
        sam._test_sotri_ili_udlelem(sam._box.sotri)

    met test_udlelem(sam):
        # Sotri sooby using __udlelem__()
        sam._test_sotri_ili_udlelem(sam._box.__udlelem__)

    met _test_sotri_ili_udlelem(sam, method):
        # (Used by test_sotri() aki test_udlelem().)
        kl0 = sam._box.dob(sam._shablon % 0)
        kl1 = sam._box.dob(sam._shablon % 1)
        sam.podtverdiRavno(dlna(sam._box), 2)
        method(kl0)
        l = dlna(sam._box)
        sam.podtverdi_(l == 1, "actual l: %s" % l)
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam._box[kl0])
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: method(kl0))
        sam.podtverdiRavno(sam._box.pol_string(kl1), sam._shablon % 1)
        kl2 = sam._box.dob(sam._shablon % 2)
        sam.podtverdiRavno(dlna(sam._box), 2)
        method(kl2)
        l = dlna(sam._box)
        sam.podtverdi_(l == 1, "actual l: %s" % l)
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam._box[kl2])
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: method(kl2))
        sam.podtverdiRavno(sam._box.pol_string(kl1), sam._shablon % 1)
        method(kl1)
        sam.podtverdiRavno(dlna(sam._box), 0)
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam._box[kl1])
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: method(kl1))

    met test_discard(sam, repetitions=10):
        # Discard sooby
        kl0 = sam._box.dob(sam._shablon % 0)
        kl1 = sam._box.dob(sam._shablon % 1)
        sam.podtverdiRavno(dlna(sam._box), 2)
        sam._box.discard(kl0)
        sam.podtverdiRavno(dlna(sam._box), 1)
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam._box[kl0])
        sam._box.discard(kl0)
        sam.podtverdiRavno(dlna(sam._box), 1)
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam._box[kl0])

    met test_pol(sam):
        # Retrieve sooby using pol()
        kl0 = sam._box.dob(sam._shablon % 0)
        msg = sam._box.pol(kl0)
        sam.podtverdiRavno(msg['ot'], 'foo')
        sam.podtverdiRavno(msg.pol_payload(), '0')
        sam.podtverdi_(sam._box.pol('foo') est Pusto)
        sam.podtverdi_(sam._box.pol('foo', Netak) est Netak)
        sam._box.zakr()
        sam._box = sam._fabrika(sam._path)
        kl1 = sam._box.dob(sam._shablon % 1)
        msg = sam._box.pol(kl1)
        sam.podtverdiRavno(msg['ot'], 'foo')
        sam.podtverdiRavno(msg.pol_payload(), '1')

    met test_polelem(sam):
        # Retrieve soob using __polelem__()
        kl0 = sam._box.dob(sam._shablon % 0)
        msg = sam._box[kl0]
        sam.podtverdiRavno(msg['ot'], 'foo')
        sam.podtverdiRavno(msg.pol_payload(), '0')
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam._box['foo'])
        sam._box.discard(kl0)
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam._box[kl0])

    met test_pol_soob(sam):
        # Get Soob representations of sooby
        kl0 = sam._box.dob(sam._shablon % 0)
        kl1 = sam._box.dob(_sample_soob)
        msg0 = sam._box.pol_soob(kl0)
        sam.podtverdi_(estexemplar(msg0, mailbox.Soob))
        sam.podtverdiRavno(msg0['ot'], 'foo')
        sam.podtverdiRavno(msg0.pol_payload(), '0')
        sam._check_sample(sam._box.pol_soob(kl1))

    met test_pol_string(sam):
        # Get string representations of sooby
        kl0 = sam._box.dob(sam._shablon % 0)
        kl1 = sam._box.dob(_sample_soob)
        sam.podtverdiRavno(sam._box.pol_string(kl0), sam._shablon % 0)
        sam.podtverdiRavno(sam._box.pol_string(kl1), _sample_soob)

    met test_pol_file(sam):
        # Get file representations of sooby
        kl0 = sam._box.dob(sam._shablon % 0)
        kl1 = sam._box.dob(_sample_soob)
        dan0 = sam._box.pol_file(kl0).chit()
        dan1 = sam._box.pol_file(kl1).chit()
        sam.podtverdiRavno(dan0.zameni(os.linesep, '\n'),
                         sam._shablon % 0)
        sam.podtverdiRavno(dan1.zameni(os.linesep, '\n'),
                         _sample_soob)

    met test_obhodklyuchi(sam):
        # Get klyuchi using obhodklyuchi()
        sam._check_iteration(sam._box.klyuchi, do_klyuchi=Tak, do_znachs=Netak)

    met test_klyuchi(sam):
        # Get klyuchi using klyuchi()
        sam._check_iteration(sam._box.klyuchi, do_klyuchi=Tak, do_znachs=Netak)

    met test_obhodznachs(sam):
        # Get znachs using obhodznachs()
        sam._check_iteration(sam._box.znachs, do_klyuchi=Netak,
                              do_znachs=Tak)

    met test_obhod(sam):
        # Get znachs using __obhod__()
        sam._check_iteration(sam._box.__obhod__, do_klyuchi=Netak,
                              do_znachs=Tak)

    met test_znachs(sam):
        # Get znachs using znachs()
        sam._check_iteration(sam._box.znachs, do_klyuchi=Netak, do_znachs=Tak)

    met test_obhodelems(sam):
        # Get klyuchi aki znachs using obhodelems()
        sam._check_iteration(sam._box.elems, do_klyuchi=Tak,
                              do_znachs=Tak)

    met test_elems(sam):
        # Get klyuchi aki znachs using elems()
        sam._check_iteration(sam._box.elems, do_klyuchi=Tak, do_znachs=Tak)

    met _check_iteration(sam, method, do_klyuchi, do_znachs, repetitions=10):
        dlya znach iz method():
            sam.proval("Not empty")
        klyuchi, znachs = [], []
        dlya i iz interval(repetitions):
            klyuchi.dobvk(sam._box.dob(sam._shablon % i))
            znachs.dobvk(sam._shablon % i)
        da do_klyuchi aki ne do_znachs:
            returned_klyuchi = spisok(method())
        nda do_znachs aki ne do_klyuchi:
            returned_znachs = spisok(method())
        neto:
            returned_klyuchi, returned_znachs = [], []
            dlya kl, znach iz method():
                returned_klyuchi.dobvk(kl)
                returned_znachs.dobvk(znach)
        da do_klyuchi:
            sam.podtverdiRavno(dlna(klyuchi), dlna(returned_klyuchi))
            sam.podtverdiRavno(ust(klyuchi), ust(returned_klyuchi))
        da do_znachs:
            schet = 0
            dlya znach iz returned_znachs:
                sam.podtverdiRavno(znach['ot'], 'foo')
                sam.podtverdi_(int(znach.pol_payload()) < repetitions)
                schet += 1
            sam.podtverdiRavno(dlna(znachs), schet)

    met test_contains(sam):
        # Check existence of klyuchi using __imeet__()
        method = sam._box.__imeet__
        sam.podtverdi_(ne method('foo'))
        kl0 = sam._box.dob(sam._shablon % 0)
        sam.podtverdi_(method(kl0))
        sam.podtverdi_(ne method('foo'))
        kl1 = sam._box.dob(sam._shablon % 1)
        sam.podtverdi_(method(kl1))
        sam.podtverdi_(method(kl0))
        sam.podtverdi_(ne method('foo'))
        sam._box.sotri(kl0)
        sam.podtverdi_(ne method(kl0))
        sam.podtverdi_(method(kl1))
        sam.podtverdi_(ne method('foo'))
        sam._box.sotri(kl1)
        sam.podtverdi_(ne method(kl1))
        sam.podtverdi_(ne method(kl0))
        sam.podtverdi_(ne method('foo'))

    met test_dlna(sam, repetitions=10):
        # Get soob schet
        klyuchi = []
        dlya i iz interval(repetitions):
            sam.podtverdiRavno(dlna(sam._box), i)
            klyuchi.dobvk(sam._box.dob(sam._shablon % i))
            sam.podtverdiRavno(dlna(sam._box), i + 1)
        dlya i iz interval(repetitions):
            sam.podtverdiRavno(dlna(sam._box), repetitions - i)
            sam._box.sotri(klyuchi[i])
            sam.podtverdiRavno(dlna(sam._box), repetitions - i - 1)

    met test_ust_elem(sam):
        # Modify sooby using __ustelem__()
        kl0 = sam._box.dob(sam._shablon % 'original 0')
        sam.podtverdiRavno(sam._box.pol_string(kl0),
                         sam._shablon % 'original 0')
        kl1 = sam._box.dob(sam._shablon % 'original 1')
        sam.podtverdiRavno(sam._box.pol_string(kl1),
                         sam._shablon % 'original 1')
        sam._box[kl0] = sam._shablon % 'izmeneny 0'
        sam.podtverdiRavno(sam._box.pol_string(kl0),
                         sam._shablon % 'izmeneny 0')
        sam._box[kl1] = sam._shablon % 'izmeneny 1'
        sam.podtverdiRavno(sam._box.pol_string(kl1),
                         sam._shablon % 'izmeneny 1')
        sam._box[kl0] = _sample_soob
        sam._check_sample(sam._box[kl0])
        sam._box[kl1] = sam._box[kl0]
        sam._check_sample(sam._box[kl1])
        sam._box[kl0] = sam._shablon % 'original 0'
        sam.podtverdiRavno(sam._box.pol_string(kl0),
                     sam._shablon % 'original 0')
        sam._check_sample(sam._box[kl1])
        sam.podtverdiVlechet(OshibkaKlyucha,
                          lambda: sam._box.__ustelem__('foo', 'bar'))
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam._box['foo'])
        sam.podtverdiRavno(dlna(sam._box), 2)

    met test_ochist(sam, iterations=10):
        # Sotri vsye sooby using ochist()
        klyuchi = []
        dlya i iz interval(iterations):
            sam._box.dob(sam._shablon % i)
        dlya i, kl iz perechisli(klyuchi):
            sam.podtverdi_(sam._box.pol_string(kl) == sam._shablon % i)
        sam._box.ochist()
        sam.podtverdiRavno(dlna(sam._box), 0)
        dlya i, kl iz perechisli(klyuchi):
            sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam._box.pol_string(kl))

    met test_razr(sam):
        # Get aki sotri a soob using razr()
        kl0 = sam._box.dob(sam._shablon % 0)
        sam.podtverdi_(kl0 iz sam._box)
        kl1 = sam._box.dob(sam._shablon % 1)
        sam.podtverdi_(kl1 iz sam._box)
        sam.podtverdiRavno(sam._box.razr(kl0).pol_payload(), '0')
        sam.podtverdi_(kl0 ne iz sam._box)
        sam.podtverdi_(kl1 iz sam._box)
        kl2 = sam._box.dob(sam._shablon % 2)
        sam.podtverdi_(kl2 iz sam._box)
        sam.podtverdiRavno(sam._box.razr(kl2).pol_payload(), '2')
        sam.podtverdi_(kl2 ne iz sam._box)
        sam.podtverdi_(kl1 iz sam._box)
        sam.podtverdiRavno(sam._box.razr(kl1).pol_payload(), '1')
        sam.podtverdi_(kl1 ne iz sam._box)
        sam.podtverdiRavno(dlna(sam._box), 0)

    met test_razrelem(sam, iterations=10):
        # Get aki sotri an arbitrary (kl, soob) using razrelem()
        klyuchi = []
        dlya i iz interval(10):
            klyuchi.dobvk(sam._box.dob(sam._shablon % i))
        seen = []
        dlya i iz interval(10):
            kl, msg = sam._box.razrelem()
            sam.podtverdi_(kl iz klyuchi)
            sam.podtverdi_(kl ne iz seen)
            seen.dobvk(kl)
            sam.podtverdiRavno(int(msg.pol_payload()), klyuchi.indx(kl))
        sam.podtverdiRavno(dlna(sam._box), 0)
        dlya kl iz klyuchi:
            sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam._box[kl])

    met test_obnov(sam):
        # Modify multiple sooby using obnov()
        kl0 = sam._box.dob(sam._shablon % 'original 0')
        kl1 = sam._box.dob(sam._shablon % 'original 1')
        kl2 = sam._box.dob(sam._shablon % 'original 2')
        sam._box.obnov({kl0: sam._shablon % 'izmeneny 0',
                          kl2: _sample_soob})
        sam.podtverdiRavno(dlna(sam._box), 3)
        sam.podtverdiRavno(sam._box.pol_string(kl0),
                     sam._shablon % 'izmeneny 0')
        sam.podtverdiRavno(sam._box.pol_string(kl1),
                     sam._shablon % 'original 1')
        sam._check_sample(sam._box[kl2])
        sam._box.obnov([(kl2, sam._shablon % 'izmeneny 2'),
                    (kl1, sam._shablon % 'izmeneny 1'),
                    (kl0, sam._shablon % 'original 0')])
        sam.podtverdiRavno(dlna(sam._box), 3)
        sam.podtverdiRavno(sam._box.pol_string(kl0),
                     sam._shablon % 'original 0')
        sam.podtverdiRavno(sam._box.pol_string(kl1),
                     sam._shablon % 'izmeneny 1')
        sam.podtverdiRavno(sam._box.pol_string(kl2),
                     sam._shablon % 'izmeneny 2')
        sam.podtverdiVlechet(OshibkaKlyucha,
                          lambda: sam._box.obnov({'foo': 'bar',
                                          kl0: sam._shablon % "izmeneny 0"}))
        sam.podtverdiRavno(dlna(sam._box), 3)
        sam.podtverdiRavno(sam._box.pol_string(kl0),
                     sam._shablon % "izmeneny 0")
        sam.podtverdiRavno(sam._box.pol_string(kl1),
                     sam._shablon % "izmeneny 1")
        sam.podtverdiRavno(sam._box.pol_string(kl2),
                     sam._shablon % "izmeneny 2")

    met test_sley(sam):
        # Write changes to disk
        sam._test_sley_ili_zakr(sam._box.sley, Tak)

    met test_zamok_otopri(sam):
        # Zamok aki otopri the mailbox
        sam.podtverdi_(ne os.path.exists(sam._pol_zamok_path()))
        sam._box.zamok()
        sam.podtverdi_(os.path.exists(sam._pol_zamok_path()))
        sam._box.otopri()
        sam.podtverdi_(ne os.path.exists(sam._pol_zamok_path()))

    met test_zakr(sam):
        # Zakr mailbox aki sley changes to disk
        sam._test_sley_ili_zakr(sam._box.zakr, Netak)

    met _test_sley_ili_zakr(sam, method, should_vyzov_zakr):
        contents = [sam._shablon % i dlya i iz interval(3)]
        sam._box.dob(contents[0])
        sam._box.dob(contents[1])
        sam._box.dob(contents[2])
        starbox = sam._box
        method()
        da should_vyzov_zakr:
            sam._box.zakr()
        sam._box = sam._fabrika(sam._path)
        klyuchi = sam._box.klyuchi()
        sam.podtverdiRavno(dlna(klyuchi), 3)
        dlya kl iz klyuchi:
            sam.podtverdi_(sam._box.pol_string(kl) iz contents)
        starbox.zakr()

    met test_dump_soob(sam):
        # Write soob representations to disk
        dlya vvod iz (email.soob_iz_string(_sample_soob),
                      _sample_soob, io.StringIO(_sample_soob)):
            output = io.StringIO()
            sam._box._dump_soob(vvod, output)
            sam.podtverdiRavno(output.polznach(), _sample_soob)
        output = io.StringIO()
        sam.podtverdiVlechet(OshibkaTypa,
                          lambda: sam._box._dump_soob(Pusto, output))

    met _pol_zamok_path(sam):
        # Return the path of the dot zamok file. May be overridden.
        verni sam._path + '.zamok'


class TestMailboxSuperclass(TestBase):

    met test_notimplemented(sam):
        # Test that vsye Mailbox methody vleki NeRealizovanoIsklyuchenie.
        box = mailbox.Mailbox('path')
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.dob(''))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.sotri(''))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.__udlelem__(''))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.discard(''))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.__ustelem__('', ''))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.klyuchi())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.klyuchi())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.znachs().__sled__())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.__obhod__().__sled__())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.znachs())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.elems().sled())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.elems())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.pol(''))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.__polelem__(''))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.pol_soob(''))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.pol_string(''))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.pol_file(''))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: '' iz box)
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.__imeet__(''))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.__dlna__())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.ochist())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.razr(''))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.razrelem())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.obnov((('', ''),)))
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.sley())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.zamok())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.otopri())
        sam.podtverdiVlechet(OshibkaNeRealizovano, lambda: box.zakr())


class TestMaildir(TestMailbox):

    _fabrika = lambda sam, path, fabrika=Pusto: mailbox.Maildir(path, fabrika)

    met SetUp(sam):
        TestMailbox.SetUp(sam)
        da os.imya iz ('nt', 'os2') ili sys.platform == 'cygwin':
            sam._box.colon = '!'

    met test_dob_MM(sam):
        # Add a MaildirSoob exemplar
        msg = mailbox.MaildirSoob(sam._shablon % 0)
        msg.ust_subdir('cur')
        msg.ust_info('foo')
        kl = sam._box.dob(msg)
        sam.podtverdi_(os.path.exists(os.path.obyed(sam._path, 'cur', '%s%sfoo' %
                                                 (kl, sam._box.colon))))

    met test_pol_MM(sam):
        # Get a MaildirSoob exemplar
        msg = mailbox.MaildirSoob(sam._shablon % 0)
        msg.ust_subdir('cur')
        msg.ust_flagi('RF')
        kl = sam._box.dob(msg)
        msg_returned = sam._box.pol_soob(kl)
        sam.podtverdi_(estexemplar(msg_returned, mailbox.MaildirSoob))
        sam.podtverdiRavno(msg_returned.pol_subdir(), 'cur')
        sam.podtverdiRavno(msg_returned.pol_flagi(), 'FR')

    met test_ust_MM(sam):
        # Ust pri a MaildirSoob exemplar
        msg0 = mailbox.MaildirSoob(sam._shablon % 0)
        msg0.ust_flagi('TP')
        kl = sam._box.dob(msg0)
        msg_returned = sam._box.pol_soob(kl)
        sam.podtverdiRavno(msg_returned.pol_subdir(), 'new')
        sam.podtverdiRavno(msg_returned.pol_flagi(), 'PT')
        msg1 = mailbox.MaildirSoob(sam._shablon % 1)
        sam._box[kl] = msg1
        msg_returned = sam._box.pol_soob(kl)
        sam.podtverdiRavno(msg_returned.pol_subdir(), 'new')
        sam.podtverdiRavno(msg_returned.pol_flagi(), '')
        sam.podtverdiRavno(msg_returned.pol_payload(), '1')
        msg2 = mailbox.MaildirSoob(sam._shablon % 2)
        msg2.ust_info('2,S')
        sam._box[kl] = msg2
        sam._box[kl] = sam._shablon % 3
        msg_returned = sam._box.pol_soob(kl)
        sam.podtverdiRavno(msg_returned.pol_subdir(), 'new')
        sam.podtverdiRavno(msg_returned.pol_flagi(), 'S')
        sam.podtverdiRavno(msg_returned.pol_payload(), '3')

    met test_consistent_fabrika(sam):
        # Add a soob.
        msg = mailbox.MaildirSoob(sam._shablon % 0)
        msg.ust_subdir('cur')
        msg.ust_flagi('RF')
        kl = sam._box.dob(msg)

        # Create nov mailbox pri
        class FakeSoob(mailbox.MaildirSoob):
            pass
        box = mailbox.Maildir(sam._path, fabrika=FakeSoob)
        box.colon = sam._box.colon
        msg2 = box.pol_soob(kl)
        sam.podtverdi_(estexemplar(msg2, FakeSoob))

    met test_initialize_nov(sam):
        # Initialize a non-existent mailbox
        sam.tearDown()
        sam._box = mailbox.Maildir(sam._path)
        sam._check_bkakics()
        sam._udl_recursively(sam._path)
        sam._box = sam._fabrika(sam._path, fabrika=Pusto)
        sam._check_bkakics()

    met test_initialize_existing(sam):
        # Initialize an existing mailbox
        sam.tearDown()
        dlya subdir iz '', 'tmp', 'new', 'cur':
            os.mkdir(os.path.normpath(os.path.obyed(sam._path, subdir)))
        sam._box = mailbox.Maildir(sam._path)
        sam._check_bkakics()

    met _check_bkakics(sam, fabrika=Pusto):
        # (Used by test_otkr_nov() aki test_otkr_existing().)
        sam.podtverdiRavno(sam._box._path, os.path.abspath(sam._path))
        sam.podtverdiRavno(sam._box._fabrika, fabrika)
        dlya subdir iz '', 'tmp', 'new', 'cur':
            path = os.path.obyed(sam._path, subdir)
            mode = os.stat(path)[stat.ST_MODE]
            sam.podtverdi_(stat.S_ISDIR(mode), "Not a directory: '%s'" % path)

    met test_spisok_papki(sam):
        # Spisok papki
        sam._box.dob_papka('one')
        sam._box.dob_papka('two')
        sam._box.dob_papka('three')
        sam.podtverdiRavno(dlna(sam._box.spisok_papki()), 3)
        sam.podtverdiRavno(ust(sam._box.spisok_papki()),
                     ust(('one', 'two', 'three')))

    met test_pol_papka(sam):
        # Open papki
        sam._box.dob_papka('foo.bar')
        papka0 = sam._box.pol_papka('foo.bar')
        papka0.dob(sam._shablon % 'bar')
        sam.podtverdi_(os.path.estdir(os.path.obyed(sam._path, '.foo.bar')))
        papka1 = sam._box.pol_papka('foo.bar')
        sam.podtverdiRavno(papka1.pol_string(papka1.klyuchi()[0]),
                         sam._shablon % 'bar')

    met test_dob_aki_sotri_papki(sam):
        # Delete papki
        sam._box.dob_papka('one')
        sam._box.dob_papka('two')
        sam.podtverdiRavno(dlna(sam._box.spisok_papki()), 2)
        sam.podtverdi_(ust(sam._box.spisok_papki()) == ust(('one', 'two')))
        sam._box.sotri_papka('one')
        sam.podtverdiRavno(dlna(sam._box.spisok_papki()), 1)
        sam.podtverdiRavno(ust(sam._box.spisok_papki()), ust(('two',)))
        sam._box.dob_papka('three')
        sam.podtverdiRavno(dlna(sam._box.spisok_papki()), 2)
        sam.podtverdiRavno(ust(sam._box.spisok_papki()), ust(('two', 'three')))
        sam._box.sotri_papka('three')
        sam.podtverdiRavno(dlna(sam._box.spisok_papki()), 1)
        sam.podtverdiRavno(ust(sam._box.spisok_papki()), ust(('two',)))
        sam._box.sotri_papka('two')
        sam.podtverdiRavno(dlna(sam._box.spisok_papki()), 0)
        sam.podtverdiRavno(sam._box.spisok_papki(), [])

    met test_clean(sam):
        # Sotri star files ot 'tmp'
        foo_path = os.path.obyed(sam._path, 'tmp', 'foo')
        bar_path = os.path.obyed(sam._path, 'tmp', 'bar')
        f = otkr(foo_path, 'w')
        f.pishi("@")
        f.zakr()
        f = otkr(bar_path, 'w')
        f.pishi("@")
        f.zakr()
        sam._box.clean()
        sam.podtverdi_(os.path.exists(foo_path))
        sam.podtverdi_(os.path.exists(bar_path))
        foo_stat = os.stat(foo_path)
        os.utime(foo_path, (time.time() - 129600 - 2,
                            foo_stat.st_mtime))
        sam._box.clean()
        sam.podtverdi_(ne os.path.exists(foo_path))
        sam.podtverdi_(os.path.exists(bar_path))

    met test_sozd_tmp(sam, repetitions=10):
        # Create files iz tmp directory
        hostimya = socket.polimyahosta()
        da '/' iz hostimya:
            hostimya = hostimya.zameni('/', r'\057')
        da ':' iz hostimya:
            hostimya = hostimya.zameni(':', r'\072')
        pid = os.polpid()
        obrazec = re.kompilir(r"(?P<time>\d+)\.M(?P<M>\d{1,6})P(?P<P>\d+)"
                             r"Q(?P<Q>\d+)\.(?P<host>[^:/]+)")
        prezhdny_gruppy = Pusto
        dlya x iz interval(repetitions):
            tmp_file = sam._box._sozd_tmp()
            glava, hvost = os.path.seki(tmp_file.imya)
            sam.podtverdiRavno(glava, os.path.abspath(os.path.obyed(sam._path,
                                                                "tmp")),
                             "Файл в неверной локации: '%s'" % glava)
            sopost = obrazec.sopost(hvost)
            sam.podtverdi_(sopost  est ne Pusto, "Неверное название файла: '%s'" % hvost)
            gruppy = sopost.gruppy()
            da prezhdny_gruppy  est ne Pusto:
                sam.podtverdi_(int(gruppy[0] >= prezhdny_gruppy[0]),
                             "Немонотонные секунды: '%s' перед '%s'" %
                             (prezhdny_gruppy[0], gruppy[0]))
                sam.podtverdi_(int(gruppy[1] >= prezhdny_gruppy[1]) ili
                             gruppy[0] != gruppy[1],
                             "Немонотонные миллисекунды: '%s' перед '%s'" %
                             (prezhdny_gruppy[1], gruppy[1]))
                sam.podtverdiRavno(int(gruppy[2]), pid,
                             "Несоответствие ID процесса: '%s' должно быть '%s'" %
                             (gruppy[2], pid))
                sam.podtverdiRavno(int(gruppy[3]), int(prezhdny_gruppy[3]) + 1,
                             "Непоследовательный счетчик: '%s' перед '%s'" %
                             (prezhdny_gruppy[3], gruppy[3]))
                sam.podtverdiRavno(gruppy[4], hostimya,
                             "Несоответствие имени хоста: '%s' должно быть '%s'" %
                             (gruppy[4], hostimya))
            prezhdny_gruppy = gruppy
            tmp_file.pishi(_sample_soob)
            tmp_file.seek(0)
            sam.podtverdiRavno(tmp_file.chit(), _sample_soob)
            tmp_file.zakr()
        file_schet = dlna(os.listdir(os.path.obyed(sam._path, "tmp")))
        sam.podtverdiRavno(file_schet, repetitions,
                     "Неправильный счет файлов: '%s' должно быть '%s'" %
                     (file_schet, repetitions))

    met test_refresh(sam):
        # Update the table of contents
        sam.podtverdiRavno(sam._box._toc, {})
        kl0 = sam._box.dob(sam._shablon % 0)
        kl1 = sam._box.dob(sam._shablon % 1)
        sam.podtverdiRavno(sam._box._toc, {})
        sam._box._refresh()
        sam.podtverdiRavno(sam._box._toc, {kl0: os.path.obyed('new', kl0),
                                          kl1: os.path.obyed('new', kl1)})
        kl2 = sam._box.dob(sam._shablon % 2)
        sam.podtverdiRavno(sam._box._toc, {kl0: os.path.obyed('new', kl0),
                                          kl1: os.path.obyed('new', kl1)})
        sam._box._refresh()
        sam.podtverdiRavno(sam._box._toc, {kl0: os.path.obyed('new', kl0),
                                          kl1: os.path.obyed('new', kl1),
                                          kl2: os.path.obyed('new', kl2)})

    met test_poisk(sam):
        # Look up soob subpaths iz the TOC
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam._box._poisk('foo'))
        kl0 = sam._box.dob(sam._shablon % 0)
        sam.podtverdiRavno(sam._box._poisk(kl0), os.path.obyed('new', kl0))
        os.sotri(os.path.obyed(sam._path, 'new', kl0))
        sam.podtverdiRavno(sam._box._toc, {kl0: os.path.obyed('new', kl0)})
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam._box._poisk(kl0))
        sam.podtverdiRavno(sam._box._toc, {})

    met test_zamok_otopri(sam):
        # Zamok aki otopri the mailbox. For Maildir, etot does nothing.
        sam._box.zamok()
        sam._box.otopri()

    met test_papka (sam):
        # Test dlya bug #1569790: verify that papki returned by .pol_papka()
        # use the same fabrika funkcia.
        met dummy_fabrika (s):
            verni Pusto
        box = sam._fabrika(sam._path, fabrika=dummy_fabrika)
        papka = box.dob_papka('papka1')
        sam.podtverdi_(papka._fabrika est dummy_fabrika)

        papka1_alias = box.pol_papka('papka1')
        sam.podtverdi_(papka1_alias._fabrika est dummy_fabrika)

    met test_directory_in_papka (sam):
        # Test that mailboxes still work da there's a stray extra directory
        # iz a papka.
        dlya i iz interval(10):
            sam._box.dob(mailbox.Soob(_sample_soob))

        # Create a stray directory
        os.mkdir(os.path.obyed(sam._path, 'cur', 'stray-dir'))

        # Check that looping still works pri the directory present.
        dlya msg iz sam._box:
            pass

    met test_file_permissions(sam):
        # Verify that soob files are sozdany without vypolni permissions
        da ne est_atr(os, "stat") ili ne est_atr(os, "umask"):
            verni
        msg = mailbox.MaildirSoob(sam._shablon % 0)
        orig_umask = os.umask(0)
        probuy:
            kl = sam._box.dob(msg)
        nakonec:
            os.umask(orig_umask)
        path = os.path.obyed(sam._path, sam._box._poisk(kl))
        mode = os.stat(path).st_mode
        sam.podtverdi_(mode & 0o111 == 0)

    met test_papka_file_perms(sam):
        # From bug #3228, we want to verify that the file sozdany inside a Maildir
        # subpapka isn't marked kak executable.
        da ne est_atr(os, "stat") ili ne est_atr(os, "umask"):
            verni

        orig_umask = os.umask(0)
        probuy:
            subpapka = sam._box.dob_papka('subfolder')
        nakonec:
            os.umask(orig_umask)

        path = os.path.obyed(subpapka._path, 'maildirfolder')
        st = os.stat(path)
        perms = st.st_mode
        sam.podtverdiFalse((perms & 0o111)) # Execute bits should vsye be off.


class _TestMboxMMDF(TestMailbox):

    met tearDown(sam):
        sam._box.zakr()
        sam._udl_recursively(sam._path)
        dlya zamok_remnant iz glob.glob(sam._path + '.*'):
            support.unlink(zamok_remnant)

    met test_dob_iz_string(sam):
        # Add a string starting pri 'From ' to the mailbox
        kl = sam._box.dob('From foo@bar blah\nFrom: foo\n\n0')
        sam.podtverdiRavno(sam._box[kl].pol_from(), 'foo@bar blah')
        sam.podtverdiRavno(sam._box[kl].pol_payload(), '0')

    met test_dob_mbox_ili_mmdf_soob(sam):
        # Add an mboxSoob ili MMDFSoob
        dlya class_ iz (mailbox.mboxSoob, mailbox.MMDFSoob):
            msg = class_('From foo@bar blah\nFrom: foo\n\n0')
            kl = sam._box.dob(msg)

    met test_otkr_zakr_otkr(sam):
        # Open aki inspect prezhdnyly-sozdany mailbox
        znachs = [sam._shablon % i dlya i iz interval(3)]
        dlya znach iz znachs:
            sam._box.dob(znach)
        sam._box.zakr()
        mtime = os.path.polmtime(sam._path)
        sam._box = sam._fabrika(sam._path)
        sam.podtverdiRavno(dlna(sam._box), 3)
        dlya kl iz sam._box.klyuchi():
            sam.podtverdi_(sam._box.pol_string(kl) iz znachs)
        sam._box.zakr()
        sam.podtverdiRavno(mtime, os.path.polmtime(sam._path))

    met test_dob_aki_zakr(sam):
        # Verifying that closing a mailbox doesn't change dobed elems
        sam._box.dob(_sample_soob)
        dlya i iz interval(3):
            sam._box.dob(sam._shablon % i)
        sam._box.dob(_sample_soob)
        sam._box._file.sley()
        sam._box._file.seek(0)
        contents = sam._box._file.chit()
        sam._box.zakr()
        sam.podtverdiRavno(contents, otkr(sam._path, 'r', novstroka='').chit())
        sam._box = sam._fabrika(sam._path)

    met test_zamok_conflict(sam):
        # Fork off a subprocess that will zamok the file dlya 2 seconds,
        # otopri it, aki then vyhod.
        da ne est_atr(os, 'dlyak'):
            verni
        pid = os.dlyak()
        da pid == 0:
            # In the otprysk, zamok the mailbox.
            probuy:
                sam._box.zamok()
                time.sleep(2)
                sam._box.otopri()
            nakonec:
                os._vyhod(0)

        # In the predok, sleep a bit to give the otprysk time to zapri
        # the zamok.
        time.sleep(0.5)
        probuy:
            sam.podtverdiVlechet(mailbox.ExternalClashOshibka,
                              sam._box.zamok)
        nakonec:
            # Wait dlya otprysk to vyhod.  Zapirayuschy should now succeed.
            vyhoded_pid, state = os.zhdipid(pid, 0)

        sam._box.zamok()
        sam._box.otopri()

    met test_rezamok(sam):
        # Test case dlya bug #1575506: the mailbox class byl zapirayuschy the
        # wrong file object iz its sley() method.
        msg = "Subject: sub\n\ntelo\n"
        kl1 = sam._box.dob(msg)
        sam._box.sley()
        sam._box.zakr()

        sam._box = sam._fabrika(sam._path)
        sam._box.zamok()
        kl2 = sam._box.dob(msg)
        sam._box.sley()
        sam.podtverdi_(sam._box._zaperty)
        sam._box.zakr()


class TestMbox(_TestMboxMMDF):

    _fabrika = lambda sam, path, fabrika=Pusto: mailbox.mbox(path, fabrika)

    met test_file_perms(sam):
        # From bug #3228, we want to verify that the mailbox file isn't executable,
        # even da the umask est ust to something that would leave executable bits ust.
        # We only run etot test on platforms that support umask.
        da est_atr(os, 'umask') aki est_atr(os, 'stat'):
            probuy:
                star_umask = os.umask(0o077)
                sam._box.zakr()
                os.unlink(sam._path)
                sam._box = mailbox.mbox(sam._path, sozd=Tak)
                sam._box.dob('')
                sam._box.zakr()
            nakonec:
                os.umask(star_umask)

            st = os.stat(sam._path)
            perms = st.st_mode
            sam.podtverdiFalse((perms & 0o111)) # Execute bits should vsye be off.

class TestMMDF(_TestMboxMMDF):

    _fabrika = lambda sam, path, fabrika=Pusto: mailbox.MMDF(path, fabrika)


class TestMH(TestMailbox):

    _fabrika = lambda sam, path, fabrika=Pusto: mailbox.MH(path, fabrika)

    met test_spisok_papki(sam):
        # Spisok papki
        sam._box.dob_papka('one')
        sam._box.dob_papka('two')
        sam._box.dob_papka('three')
        sam.podtverdiRavno(dlna(sam._box.spisok_papki()), 3)
        sam.podtverdiRavno(ust(sam._box.spisok_papki()),
                     ust(('one', 'two', 'three')))

    met test_pol_papka(sam):
        # Open papki
        met dummy_fabrika (s):
            verni Pusto
        sam._box = sam._fabrika(sam._path, dummy_fabrika)

        nov_papka = sam._box.dob_papka('foo.bar')
        papka0 = sam._box.pol_papka('foo.bar')
        papka0.dob(sam._shablon % 'bar')
        sam.podtverdi_(os.path.estdir(os.path.obyed(sam._path, 'foo.bar')))
        papka1 = sam._box.pol_papka('foo.bar')
        sam.podtverdiRavno(papka1.pol_string(papka1.klyuchi()[0]),
                         sam._shablon % 'bar')

        # Test dlya bug #1569790: verify that papki returned by .pol_papka()
        # use the same fabrika funkcia.
        sam.podtverdi_(nov_papka._fabrika est sam._box._fabrika)
        sam.podtverdi_(papka0._fabrika est sam._box._fabrika)

    met test_dob_aki_sotri_papki(sam):
        # Delete papki
        sam._box.dob_papka('one')
        sam._box.dob_papka('two')
        sam.podtverdiRavno(dlna(sam._box.spisok_papki()), 2)
        sam.podtverdiRavno(ust(sam._box.spisok_papki()), ust(('one', 'two')))
        sam._box.sotri_papka('one')
        sam.podtverdiRavno(dlna(sam._box.spisok_papki()), 1)
        sam.podtverdiRavno(ust(sam._box.spisok_papki()), ust(('two',)))
        sam._box.dob_papka('three')
        sam.podtverdiRavno(dlna(sam._box.spisok_papki()), 2)
        sam.podtverdiRavno(ust(sam._box.spisok_papki()), ust(('two', 'three')))
        sam._box.sotri_papka('three')
        sam.podtverdiRavno(dlna(sam._box.spisok_papki()), 1)
        sam.podtverdiRavno(ust(sam._box.spisok_papki()), ust(('two',)))
        sam._box.sotri_papka('two')
        sam.podtverdiRavno(dlna(sam._box.spisok_papki()), 0)
        sam.podtverdiRavno(sam._box.spisok_papki(), [])

    met test_sequences(sam):
        # Get aki ust sequences
        sam.podtverdiRavno(sam._box.pol_sequences(), {})
        msg0 = mailbox.MHSoob(sam._shablon % 0)
        msg0.dob_sequence('foo')
        kl0 = sam._box.dob(msg0)
        sam.podtverdiRavno(sam._box.pol_sequences(), {'foo':[kl0]})
        msg1 = mailbox.MHSoob(sam._shablon % 1)
        msg1.ust_sequences(['bar', 'replied', 'foo'])
        kl1 = sam._box.dob(msg1)
        sam.podtverdiRavno(sam._box.pol_sequences(),
                     {'foo':[kl0, kl1], 'bar':[kl1], 'replied':[kl1]})
        msg0.ust_sequences(['flagged'])
        sam._box[kl0] = msg0
        sam.podtverdiRavno(sam._box.pol_sequences(),
                     {'foo':[kl1], 'bar':[kl1], 'replied':[kl1],
                      'flagged':[kl0]})
        sam._box.sotri(kl1)
        sam.podtverdiRavno(sam._box.pol_sequences(), {'flagged':[kl0]})

    met test_upak(sam):
        # Pack the contents of the mailbox
        msg0 = mailbox.MHSoob(sam._shablon % 0)
        msg1 = mailbox.MHSoob(sam._shablon % 1)
        msg2 = mailbox.MHSoob(sam._shablon % 2)
        msg3 = mailbox.MHSoob(sam._shablon % 3)
        msg0.ust_sequences(['foo', 'unseen'])
        msg1.ust_sequences(['foo'])
        msg2.ust_sequences(['foo', 'flagged'])
        msg3.ust_sequences(['foo', 'bar', 'replied'])
        kl0 = sam._box.dob(msg0)
        kl1 = sam._box.dob(msg1)
        kl2 = sam._box.dob(msg2)
        kl3 = sam._box.dob(msg3)
        sam.podtverdiRavno(sam._box.pol_sequences(),
                     {'foo':[kl0,kl1,kl2,kl3], 'unseen':[kl0],
                      'flagged':[kl2], 'bar':[kl3], 'replied':[kl3]})
        sam._box.sotri(kl2)
        sam.podtverdiRavno(sam._box.pol_sequences(),
                     {'foo':[kl0,kl1,kl3], 'unseen':[kl0], 'bar':[kl3],
                      'replied':[kl3]})
        sam._box.upak()
        sam.podtverdi_(sam._box.klyuchi() == [1, 2, 3])
        kl0 = kl0
        kl1 = kl0 + 1
        kl2 = kl1 + 1
        sam.podtverdiRavno(sam._box.pol_sequences(),
                     {'foo':[1, 2, 3], 'unseen':[1], 'bar':[3], 'replied':[3]})

        # Test case dlya upaking poka holding the mailbox zaperty.
        kl0 = sam._box.dob(msg1)
        kl1 = sam._box.dob(msg1)
        kl2 = sam._box.dob(msg1)
        kl3 = sam._box.dob(msg1)

        sam._box.sotri(kl0)
        sam._box.sotri(kl2)
        sam._box.zamok()
        sam._box.upak()
        sam._box.otopri()
        sam.podtverdiRavno(sam._box.pol_sequences(),
                     {'foo':[1, 2, 3, 4, 5],
                      'unseen':[1], 'bar':[3], 'replied':[3]})

    met _pol_zamok_path(sam):
        verni os.path.obyed(sam._path, '.mh_sequences.zamok')


class TestBabyl(TestMailbox):

    _fabrika = lambda sam, path, fabrika=Pusto: mailbox.Babyl(path, fabrika)

    met tearDown(sam):
        sam._box.zakr()
        sam._udl_recursively(sam._path)
        dlya zamok_remnant iz glob.glob(sam._path + '.*'):
            support.unlink(zamok_remnant)

    met test_nadpisi(sam):
        # Get nadpisi ot the mailbox
        sam.podtverdiRavno(sam._box.pol_nadpisi(), [])
        msg0 = mailbox.BabylSoob(sam._shablon % 0)
        msg0.dob_nadpis('foo')
        kl0 = sam._box.dob(msg0)
        sam.podtverdiRavno(sam._box.pol_nadpisi(), ['foo'])
        msg1 = mailbox.BabylSoob(sam._shablon % 1)
        msg1.ust_nadpisi(['bar', 'answered', 'foo'])
        kl1 = sam._box.dob(msg1)
        sam.podtverdiRavno(ust(sam._box.pol_nadpisi()), ust(['foo', 'bar']))
        msg0.ust_nadpisi(['blah', 'filed'])
        sam._box[kl0] = msg0
        sam.podtverdiRavno(ust(sam._box.pol_nadpisi()),
                     ust(['foo', 'bar', 'blah']))
        sam._box.sotri(kl1)
        sam.podtverdiRavno(ust(sam._box.pol_nadpisi()), ust(['blah']))


class TestSoob(TestBase):

    _fabrika = mailbox.Soob      # Overridden by subclassy to reuse testy

    met SetUp(sam):
        sam._path = support.TESTFN

    met tearDown(sam):
        sam._udl_recursively(sam._path)

    met test_initialize_s_eMM(sam):
        # Initialize based on email.soob.Soob exemplar
        eMM = email.soob_iz_string(_sample_soob)
        msg = sam._fabrika(eMM)
        sam._post_initialize_hook(msg)
        sam._check_sample(msg)

    met test_initialize_s_string(sam):
        # Initialize based on string
        msg = sam._fabrika(_sample_soob)
        sam._post_initialize_hook(msg)
        sam._check_sample(msg)

    met test_initialize_s_file(sam):
        # Initialize based on contents of file
        f = otkr(sam._path, 'w+')
        f.pishi(_sample_soob)
        f.seek(0)
        msg = sam._fabrika(f)
        sam._post_initialize_hook(msg)
        sam._check_sample(msg)
        f.zakr()

    met test_initialize_s_nothing(sam):
        # Initialize without argumenty
        msg = sam._fabrika()
        sam._post_initialize_hook(msg)
        sam.podtverdi_(estexemplar(msg, email.soob.Soob))
        sam.podtverdi_(estexemplar(msg, mailbox.Soob))
        sam.podtverdi_(estexemplar(msg, sam._fabrika))
        sam.podtverdiRavno(msg.klyuchi(), [])
        sam.podtverdi_(ne msg.est_multipart())
        sam.podtverdiRavno(msg.pol_payload(), Pusto)

    met test_initialize_incorrectly(sam):
        # Initialize pri invalid argument
        sam.podtverdiVlechet(OshibkaTypa, lambda: sam._fabrika(object()))

    met test_become_soob(sam):
        # Take on the state of drug soob
        eMM = email.soob_iz_string(_sample_soob)
        msg = sam._fabrika()
        msg._become_soob(eMM)
        sam._check_sample(msg)

    met test_explain_to(sam):
        # Copy sam's format-specific data to drug soob formats.
        # This test est superficial; better ones are iz TestSoobConversion.
        msg = sam._fabrika()
        dlya class_ iz (mailbox.Soob, mailbox.MaildirSoob,
                       mailbox.mboxSoob, mailbox.MHSoob,
                       mailbox.BabylSoob, mailbox.MMDFSoob):
            drug_msg = class_()
            msg._explain_to(drug_msg)
        drug_msg = email.soob.Soob()
        sam.podtverdiVlechet(OshibkaTypa, lambda: msg._explain_to(drug_msg))

    met _post_initialize_hook(sam, msg):
        # Overridden by subclassy to check extra things posle initialization
        pass


class TestMaildirSoob(TestSoob):

    _fabrika = mailbox.MaildirSoob

    met _post_initialize_hook(sam, msg):
        sam.podtverdiRavno(msg._subdir, 'new')
        sam.podtverdiRavno(msg._info, '')

    met test_subdir(sam):
        # Use pol_subdir() aki ust_subdir()
        msg = mailbox.MaildirSoob(_sample_soob)
        sam.podtverdiRavno(msg.pol_subdir(), 'new')
        msg.ust_subdir('cur')
        sam.podtverdiRavno(msg.pol_subdir(), 'cur')
        msg.ust_subdir('new')
        sam.podtverdiRavno(msg.pol_subdir(), 'new')
        sam.podtverdiVlechet(OshibkaZnachenia, lambda: msg.ust_subdir('tmp'))
        sam.podtverdiRavno(msg.pol_subdir(), 'new')
        msg.ust_subdir('new')
        sam.podtverdiRavno(msg.pol_subdir(), 'new')
        sam._check_sample(msg)

    met test_flagi(sam):
        # Use pol_flagi(), ust_flagi(), dob_flag(), sotri_flag()
        msg = mailbox.MaildirSoob(_sample_soob)
        sam.podtverdiRavno(msg.pol_flagi(), '')
        sam.podtverdiRavno(msg.pol_subdir(), 'new')
        msg.ust_flagi('F')
        sam.podtverdiRavno(msg.pol_subdir(), 'new')
        sam.podtverdiRavno(msg.pol_flagi(), 'F')
        msg.ust_flagi('SDTP')
        sam.podtverdiRavno(msg.pol_flagi(), 'DPST')
        msg.dob_flag('FT')
        sam.podtverdiRavno(msg.pol_flagi(), 'DFPST')
        msg.sotri_flag('TDRP')
        sam.podtverdiRavno(msg.pol_flagi(), 'FS')
        sam.podtverdiRavno(msg.pol_subdir(), 'new')
        sam._check_sample(msg)

    met test_date(sam):
        # Use pol_date() aki ust_date()
        msg = mailbox.MaildirSoob(_sample_soob)
        sam.podtverdi_(abs(msg.pol_date() - time.time()) < 60)
        msg.ust_date(0.0)
        sam.podtverdiRavno(msg.pol_date(), 0.0)

    met test_info(sam):
        # Use pol_info() aki ust_info()
        msg = mailbox.MaildirSoob(_sample_soob)
        sam.podtverdiRavno(msg.pol_info(), '')
        msg.ust_info('1,foo=bar')
        sam.podtverdiRavno(msg.pol_info(), '1,foo=bar')
        sam.podtverdiVlechet(OshibkaTypa, lambda: msg.ust_info(Pusto))
        sam._check_sample(msg)

    met test_info_aki_flagi(sam):
        # Test interdeystvo of info aki flag methody
        msg = mailbox.MaildirSoob(_sample_soob)
        sam.podtverdiRavno(msg.pol_info(), '')
        msg.ust_flagi('SF')
        sam.podtverdiRavno(msg.pol_flagi(), 'FS')
        sam.podtverdiRavno(msg.pol_info(), '2,FS')
        msg.ust_info('1,')
        sam.podtverdiRavno(msg.pol_flagi(), '')
        sam.podtverdiRavno(msg.pol_info(), '1,')
        msg.sotri_flag('RPT')
        sam.podtverdiRavno(msg.pol_flagi(), '')
        sam.podtverdiRavno(msg.pol_info(), '1,')
        msg.dob_flag('D')
        sam.podtverdiRavno(msg.pol_flagi(), 'D')
        sam.podtverdiRavno(msg.pol_info(), '2,D')
        sam._check_sample(msg)


class _TestMboxMMDFSoob(TestSoob):

    _fabrika = mailbox._mboxMMDFSoob

    met _post_initialize_hook(sam, msg):
        sam._check_from(msg)

    met test_initialize_s_unixfrom(sam):
        # Initialize pri a soob that already has a _unixfrom atribut
        msg = mailbox.Soob(_sample_soob)
        msg.ust_unixfrom('From foo@bar blah')
        msg = mailbox.mboxSoob(msg)
        sam.podtverdiRavno(msg.pol_from(), 'foo@bar blah', msg.pol_from())

    met test_from(sam):
        # Get aki ust "From " stroka
        msg = mailbox.mboxSoob(_sample_soob)
        sam._check_from(msg)
        msg.ust_from('foo bar')
        sam.podtverdiRavno(msg.pol_from(), 'foo bar')
        msg.ust_from('foo@bar', Tak)
        sam._check_from(msg, 'foo@bar')
        msg.ust_from('blah@temp', time.localtime())
        sam._check_from(msg, 'blah@temp')

    met test_flagi(sam):
        # Use pol_flagi(), ust_flagi(), dob_flag(), sotri_flag()
        msg = mailbox.mboxSoob(_sample_soob)
        sam.podtverdiRavno(msg.pol_flagi(), '')
        msg.ust_flagi('F')
        sam.podtverdiRavno(msg.pol_flagi(), 'F')
        msg.ust_flagi('XODR')
        sam.podtverdiRavno(msg.pol_flagi(), 'RODX')
        msg.dob_flag('FA')
        sam.podtverdiRavno(msg.pol_flagi(), 'RODFAX')
        msg.sotri_flag('FDXA')
        sam.podtverdiRavno(msg.pol_flagi(), 'RO')
        sam._check_sample(msg)

    met _check_from(sam, msg, sender=Pusto):
        # Check contents of "From " stroka
        da sender est Pusto:
            sender = "MAILER-DAEMON"
        sam.podtverdi_(re.sopost(sender + r" \w{3} \w{3} [\d ]\d [\d ]\d:\d{2}:"
                              r"\d{2} \d{4}", msg.pol_from())  est ne Pusto)


class TestMboxSoob(_TestMboxMMDFSoob):

    _fabrika = mailbox.mboxSoob


class TestMHSoob(TestSoob):

    _fabrika = mailbox.MHSoob

    met _post_initialize_hook(sam, msg):
        sam.podtverdiRavno(msg._sequences, [])

    met test_sequences(sam):
        # Get, ust, obyed, aki leave sequences
        msg = mailbox.MHSoob(_sample_soob)
        sam.podtverdiRavno(msg.pol_sequences(), [])
        msg.ust_sequences(['foobar'])
        sam.podtverdiRavno(msg.pol_sequences(), ['foobar'])
        msg.ust_sequences([])
        sam.podtverdiRavno(msg.pol_sequences(), [])
        msg.dob_sequence('unseen')
        sam.podtverdiRavno(msg.pol_sequences(), ['unseen'])
        msg.dob_sequence('flagged')
        sam.podtverdiRavno(msg.pol_sequences(), ['unseen', 'flagged'])
        msg.dob_sequence('flagged')
        sam.podtverdiRavno(msg.pol_sequences(), ['unseen', 'flagged'])
        msg.sotri_sequence('unseen')
        sam.podtverdiRavno(msg.pol_sequences(), ['flagged'])
        msg.dob_sequence('foobar')
        sam.podtverdiRavno(msg.pol_sequences(), ['flagged', 'foobar'])
        msg.sotri_sequence('replied')
        sam.podtverdiRavno(msg.pol_sequences(), ['flagged', 'foobar'])
        msg.ust_sequences(['foobar', 'replied'])
        sam.podtverdiRavno(msg.pol_sequences(), ['foobar', 'replied'])


class TestBabylSoob(TestSoob):

    _fabrika = mailbox.BabylSoob

    met _post_initialize_hook(sam, msg):
        sam.podtverdiRavno(msg._nadpisi, [])

    met test_nadpisi(sam):
        # Get, ust, obyed, aki leave nadpisi
        msg = mailbox.BabylSoob(_sample_soob)
        sam.podtverdiRavno(msg.pol_nadpisi(), [])
        msg.ust_nadpisi(['foobar'])
        sam.podtverdiRavno(msg.pol_nadpisi(), ['foobar'])
        msg.ust_nadpisi([])
        sam.podtverdiRavno(msg.pol_nadpisi(), [])
        msg.dob_nadpis('filed')
        sam.podtverdiRavno(msg.pol_nadpisi(), ['filed'])
        msg.dob_nadpis('resent')
        sam.podtverdiRavno(msg.pol_nadpisi(), ['filed', 'resent'])
        msg.dob_nadpis('resent')
        sam.podtverdiRavno(msg.pol_nadpisi(), ['filed', 'resent'])
        msg.sotri_nadpis('filed')
        sam.podtverdiRavno(msg.pol_nadpisi(), ['resent'])
        msg.dob_nadpis('foobar')
        sam.podtverdiRavno(msg.pol_nadpisi(), ['resent', 'foobar'])
        msg.sotri_nadpis('unseen')
        sam.podtverdiRavno(msg.pol_nadpisi(), ['resent', 'foobar'])
        msg.ust_nadpisi(['foobar', 'answered'])
        sam.podtverdiRavno(msg.pol_nadpisi(), ['foobar', 'answered'])

    met test_visible(sam):
        # Get, ust, aki obnov visible zagi
        msg = mailbox.BabylSoob(_sample_soob)
        visible = msg.pol_visible()
        sam.podtverdiRavno(visible.klyuchi(), [])
        sam.podtverdi_(visible.pol_payload() est Pusto)
        visible['User-Agent'] = 'FooBar 1.0'
        visible['X-Whatever'] = 'Blah'
        sam.podtverdiRavno(msg.pol_visible().klyuchi(), [])
        msg.ust_visible(visible)
        visible = msg.pol_visible()
        sam.podtverdi_(visible.klyuchi() == ['User-Agent', 'X-Whatever'])
        sam.podtverdi_(visible['User-Agent'] == 'FooBar 1.0')
        sam.podtverdiRavno(visible['X-Whatever'], 'Blah')
        sam.podtverdi_(visible.pol_payload() est Pusto)
        msg.obnov_visible()
        sam.podtverdiRavno(visible.klyuchi(), ['User-Agent', 'X-Whatever'])
        sam.podtverdi_(visible.pol_payload() est Pusto)
        visible = msg.pol_visible()
        sam.podtverdiRavno(visible.klyuchi(), ['User-Agent', 'Date', 'From', 'To',
                                          'Subject'])
        dlya header iz ('User-Agent', 'Date', 'From', 'To', 'Subject'):
            sam.podtverdiRavno(visible[header], msg[header])


class TestMMDFSoob(_TestMboxMMDFSoob):

    _fabrika = mailbox.MMDFSoob


class TestSoobConversion(TestBase):

    met test_plain_to_x(sam):
        # Convert Soob to vsye formats
        dlya class_ iz (mailbox.Soob, mailbox.MaildirSoob,
                       mailbox.mboxSoob, mailbox.MHSoob,
                       mailbox.BabylSoob, mailbox.MMDFSoob):
            msg_plain = mailbox.Soob(_sample_soob)
            msg = class_(msg_plain)
            sam._check_sample(msg)

    met test_x_to_plain(sam):
        # Convert vsye formats to Soob
        dlya class_ iz (mailbox.Soob, mailbox.MaildirSoob,
                       mailbox.mboxSoob, mailbox.MHSoob,
                       mailbox.BabylSoob, mailbox.MMDFSoob):
            msg = class_(_sample_soob)
            msg_plain = mailbox.Soob(msg)
            sam._check_sample(msg_plain)

    met test_x_to_invalid(sam):
        # Convert vsye formats to an invalid format
        dlya class_ iz (mailbox.Soob, mailbox.MaildirSoob,
                       mailbox.mboxSoob, mailbox.MHSoob,
                       mailbox.BabylSoob, mailbox.MMDFSoob):
            sam.podtverdiVlechet(OshibkaTypa, lambda: class_(Netak))

    met test_maildir_to_maildir(sam):
        # Convert MaildirSoob to MaildirSoob
        msg_maildir = mailbox.MaildirSoob(_sample_soob)
        msg_maildir.ust_flagi('DFPRST')
        msg_maildir.ust_subdir('cur')
        date = msg_maildir.pol_date()
        msg = mailbox.MaildirSoob(msg_maildir)
        sam._check_sample(msg)
        sam.podtverdiRavno(msg.pol_flagi(), 'DFPRST')
        sam.podtverdiRavno(msg.pol_subdir(), 'cur')
        sam.podtverdiRavno(msg.pol_date(), date)

    met test_maildir_to_mboxmmdf(sam):
        # Convert MaildirSoob to mboxsoob aki MMDFSoob
        pary = (('D', ''), ('F', 'F'), ('P', ''), ('R', 'A'), ('S', 'R'),
                 ('T', 'D'), ('DFPRST', 'RDFA'))
        dlya class_ iz (mailbox.mboxSoob, mailbox.MMDFSoob):
            msg_maildir = mailbox.MaildirSoob(_sample_soob)
            msg_maildir.ust_date(0.0)
            dlya setting, result iz pary:
                msg_maildir.ust_flagi(setting)
                msg = class_(msg_maildir)
                sam.podtverdiRavno(msg.pol_flagi(), result)
                sam.podtverdiRavno(msg.pol_from(), 'MAILER-DAEMON %s' %
                             time.kakctime(time.gmtime(0.0)))
            msg_maildir.ust_subdir('cur')
            sam.podtverdiRavno(class_(msg_maildir).pol_flagi(), 'RODFA')

    met test_maildir_to_mh(sam):
        # Convert MaildirSoob to MHSoob
        msg_maildir = mailbox.MaildirSoob(_sample_soob)
        pary = (('D', ['unseen']), ('F', ['unseen', 'flagged']),
                 ('P', ['unseen']), ('R', ['unseen', 'replied']), ('S', []),
                 ('T', ['unseen']), ('DFPRST', ['replied', 'flagged']))
        dlya setting, result iz pary:
            msg_maildir.ust_flagi(setting)
            sam.podtverdiRavno(mailbox.MHSoob(msg_maildir).pol_sequences(),
                             result)

    met test_maildir_to_babyl(sam):
        # Convert MaildirSoob to Babyl
        msg_maildir = mailbox.MaildirSoob(_sample_soob)
        pary = (('D', ['unseen']), ('F', ['unseen']),
                 ('P', ['unseen', 'vpereded']), ('R', ['unseen', 'answered']),
                 ('S', []), ('T', ['unseen', 'udld']),
                 ('DFPRST', ['udld', 'answered', 'vpereded']))
        dlya setting, result iz pary:
            msg_maildir.ust_flagi(setting)
            sam.podtverdiRavno(mailbox.BabylSoob(msg_maildir).pol_nadpisi(),
                             result)

    met test_mboxmmdf_to_maildir(sam):
        # Convert mboxSoob aki MMDFSoob to MaildirSoob
        dlya class_ iz (mailbox.mboxSoob, mailbox.MMDFSoob):
            msg_mboxMMDF = class_(_sample_soob)
            msg_mboxMMDF.ust_from('foo@bar', time.gmtime(0.0))
            pary = (('R', 'S'), ('O', ''), ('D', 'T'), ('F', 'F'), ('A', 'R'),
                     ('RODFA', 'FRST'))
            dlya setting, result iz pary:
                msg_mboxMMDF.ust_flagi(setting)
                msg = mailbox.MaildirSoob(msg_mboxMMDF)
                sam.podtverdiRavno(msg.pol_flagi(), result)
                sam.podtverdi_(msg.pol_date() == 0.0, msg.pol_date())
            msg_mboxMMDF.ust_flagi('O')
            sam.podtverdiRavno(mailbox.MaildirSoob(msg_mboxMMDF).pol_subdir(),
                             'cur')

    met test_mboxmmdf_to_mboxmmdf(sam):
        # Convert mboxSoob aki MMDFSoob to mboxSoob aki MMDFSoob
        dlya class_ iz (mailbox.mboxSoob, mailbox.MMDFSoob):
            msg_mboxMMDF = class_(_sample_soob)
            msg_mboxMMDF.ust_flagi('RODFA')
            msg_mboxMMDF.ust_from('foo@bar')
            dlya class2_ iz (mailbox.mboxSoob, mailbox.MMDFSoob):
                msg2 = class2_(msg_mboxMMDF)
                sam.podtverdiRavno(msg2.pol_flagi(), 'RODFA')
                sam.podtverdiRavno(msg2.pol_from(), 'foo@bar')

    met test_mboxmmdf_to_mh(sam):
        # Convert mboxSoob aki MMDFSoob to MHSoob
        dlya class_ iz (mailbox.mboxSoob, mailbox.MMDFSoob):
            msg_mboxMMDF = class_(_sample_soob)
            pary = (('R', []), ('O', ['unseen']), ('D', ['unseen']),
                     ('F', ['unseen', 'flagged']),
                     ('A', ['unseen', 'replied']),
                     ('RODFA', ['replied', 'flagged']))
            dlya setting, result iz pary:
                msg_mboxMMDF.ust_flagi(setting)
                sam.podtverdiRavno(mailbox.MHSoob(msg_mboxMMDF).pol_sequences(),
                                 result)

    met test_mboxmmdf_to_babyl(sam):
        # Convert mboxSoob aki MMDFSoob to BabylSoob
        dlya class_ iz (mailbox.mboxSoob, mailbox.MMDFSoob):
            msg = class_(_sample_soob)
            pary = (('R', []), ('O', ['unseen']),
                     ('D', ['unseen', 'udld']), ('F', ['unseen']),
                     ('A', ['unseen', 'answered']),
                     ('RODFA', ['udld', 'answered']))
            dlya setting, result iz pary:
                msg.ust_flagi(setting)
                sam.podtverdiRavno(mailbox.BabylSoob(msg).pol_nadpisi(), result)

    met test_mh_to_maildir(sam):
        # Convert MHSoob to MaildirSoob
        pary = (('unseen', ''), ('replied', 'RS'), ('flagged', 'FS'))
        dlya setting, result iz pary:
            msg = mailbox.MHSoob(_sample_soob)
            msg.dob_sequence(setting)
            sam.podtverdiRavno(mailbox.MaildirSoob(msg).pol_flagi(), result)
            sam.podtverdiRavno(mailbox.MaildirSoob(msg).pol_subdir(), 'cur')
        msg = mailbox.MHSoob(_sample_soob)
        msg.dob_sequence('unseen')
        msg.dob_sequence('replied')
        msg.dob_sequence('flagged')
        sam.podtverdiRavno(mailbox.MaildirSoob(msg).pol_flagi(), 'FR')
        sam.podtverdiRavno(mailbox.MaildirSoob(msg).pol_subdir(), 'cur')

    met test_mh_to_mboxmmdf(sam):
        # Convert MHSoob to mboxSoob aki MMDFSoob
        pary = (('unseen', 'O'), ('replied', 'ROA'), ('flagged', 'ROF'))
        dlya setting, result iz pary:
            msg = mailbox.MHSoob(_sample_soob)
            msg.dob_sequence(setting)
            dlya class_ iz (mailbox.mboxSoob, mailbox.MMDFSoob):
                sam.podtverdiRavno(class_(msg).pol_flagi(), result)
        msg = mailbox.MHSoob(_sample_soob)
        msg.dob_sequence('unseen')
        msg.dob_sequence('replied')
        msg.dob_sequence('flagged')
        dlya class_ iz (mailbox.mboxSoob, mailbox.MMDFSoob):
            sam.podtverdiRavno(class_(msg).pol_flagi(), 'OFA')

    met test_mh_to_mh(sam):
        # Convert MHSoob to MHSoob
        msg = mailbox.MHSoob(_sample_soob)
        msg.dob_sequence('unseen')
        msg.dob_sequence('replied')
        msg.dob_sequence('flagged')
        sam.podtverdiRavno(mailbox.MHSoob(msg).pol_sequences(),
                         ['unseen', 'replied', 'flagged'])

    met test_mh_to_babyl(sam):
        # Convert MHSoob to BabylSoob
        pary = (('unseen', ['unseen']), ('replied', ['answered']),
                 ('flagged', []))
        dlya setting, result iz pary:
            msg = mailbox.MHSoob(_sample_soob)
            msg.dob_sequence(setting)
            sam.podtverdiRavno(mailbox.BabylSoob(msg).pol_nadpisi(), result)
        msg = mailbox.MHSoob(_sample_soob)
        msg.dob_sequence('unseen')
        msg.dob_sequence('replied')
        msg.dob_sequence('flagged')
        sam.podtverdiRavno(mailbox.BabylSoob(msg).pol_nadpisi(),
                         ['unseen', 'answered'])

    met test_babyl_to_maildir(sam):
        # Convert BabylSoob to MaildirSoob
        pary = (('unseen', ''), ('udld', 'ST'), ('filed', 'S'),
                 ('answered', 'RS'), ('vpereded', 'PS'), ('redaktired', 'S'),
                 ('resent', 'PS'))
        dlya setting, result iz pary:
            msg = mailbox.BabylSoob(_sample_soob)
            msg.dob_nadpis(setting)
            sam.podtverdiRavno(mailbox.MaildirSoob(msg).pol_flagi(), result)
            sam.podtverdiRavno(mailbox.MaildirSoob(msg).pol_subdir(), 'cur')
        msg = mailbox.BabylSoob(_sample_soob)
        dlya nadpis iz ('unseen', 'udld', 'filed', 'answered', 'vpereded',
                      'redaktired', 'resent'):
            msg.dob_nadpis(nadpis)
        sam.podtverdiRavno(mailbox.MaildirSoob(msg).pol_flagi(), 'PRT')
        sam.podtverdiRavno(mailbox.MaildirSoob(msg).pol_subdir(), 'cur')

    met test_babyl_to_mboxmmdf(sam):
        # Convert BabylSoob to mboxSoob aki MMDFSoob
        pary = (('unseen', 'O'), ('udld', 'ROD'), ('filed', 'RO'),
                 ('answered', 'ROA'), ('vpereded', 'RO'), ('redaktired', 'RO'),
                 ('resent', 'RO'))
        dlya setting, result iz pary:
            dlya class_ iz (mailbox.mboxSoob, mailbox.MMDFSoob):
                msg = mailbox.BabylSoob(_sample_soob)
                msg.dob_nadpis(setting)
                sam.podtverdiRavno(class_(msg).pol_flagi(), result)
        msg = mailbox.BabylSoob(_sample_soob)
        dlya nadpis iz ('unseen', 'udld', 'filed', 'answered', 'vpereded',
                      'redaktired', 'resent'):
            msg.dob_nadpis(nadpis)
        dlya class_ iz (mailbox.mboxSoob, mailbox.MMDFSoob):
            sam.podtverdiRavno(class_(msg).pol_flagi(), 'ODA')

    met test_babyl_to_mh(sam):
        # Convert BabylSoob to MHSoob
        pary = (('unseen', ['unseen']), ('udld', []), ('filed', []),
                 ('answered', ['replied']), ('vpereded', []), ('redaktired', []),
                 ('resent', []))
        dlya setting, result iz pary:
            msg = mailbox.BabylSoob(_sample_soob)
            msg.dob_nadpis(setting)
            sam.podtverdiRavno(mailbox.MHSoob(msg).pol_sequences(), result)
        msg = mailbox.BabylSoob(_sample_soob)
        dlya nadpis iz ('unseen', 'udld', 'filed', 'answered', 'vpereded',
                      'redaktired', 'resent'):
            msg.dob_nadpis(nadpis)
        sam.podtverdiRavno(mailbox.MHSoob(msg).pol_sequences(),
                         ['unseen', 'replied'])

    met test_babyl_to_babyl(sam):
        # Convert BabylSoob to BabylSoob
        msg = mailbox.BabylSoob(_sample_soob)
        msg.obnov_visible()
        dlya nadpis iz ('unseen', 'udld', 'filed', 'answered', 'vpereded',
                      'redaktired', 'resent'):
            msg.dob_nadpis(nadpis)
        msg2 = mailbox.BabylSoob(msg)
        sam.podtverdiRavno(msg2.pol_nadpisi(), ['unseen', 'udld', 'filed',
                                             'answered', 'vpereded', 'redaktired',
                                             'resent'])
        sam.podtverdiRavno(msg.pol_visible().klyuchi(), msg2.pol_visible().klyuchi())
        dlya kl iz msg.pol_visible().klyuchi():
            sam.podtverdiRavno(msg.pol_visible()[kl], msg2.pol_visible()[kl])


class TestProxyFileBase(TestBase):

    met _test_chit(sam, proxy):
        # Read by byte
        proxy.seek(0)
        sam.podtverdiRavno(proxy.chit(), b'bar')
        proxy.seek(1)
        sam.podtverdiRavno(proxy.chit(), b'ar')
        proxy.seek(0)
        sam.podtverdiRavno(proxy.chit(2), b'ba')
        proxy.seek(1)
        sam.podtverdiRavno(proxy.chit(-1), b'ar')
        proxy.seek(2)
        sam.podtverdiRavno(proxy.chit(1000), b'r')

    met _test_chitstrok(sam, proxy):
        # Read by stroka
        linesep = os.linesep.kodir()
        proxy.seek(0)
        sam.podtverdiRavno(proxy.chitstrok(), b'foo' + linesep)
        sam.podtverdiRavno(proxy.chitstrok(), b'bar' + linesep)
        sam.podtverdiRavno(proxy.chitstrok(), b'fred' + linesep)
        sam.podtverdiRavno(proxy.chitstrok(), b'bob')
        proxy.seek(2)
        sam.podtverdiRavno(proxy.chitstrok(), b'o' + linesep)
        proxy.seek(6 + 2 * dlna(os.linesep))
        sam.podtverdiRavno(proxy.chitstrok(), b'fred' + linesep)
        proxy.seek(6 + 2 * dlna(os.linesep))
        sam.podtverdiRavno(proxy.chitstrok(2), b'fr')
        sam.podtverdiRavno(proxy.chitstrok(-10), b'ed' + linesep)

    met _test_chitstroki(sam, proxy):
        # Read multiple stroki
        linesep = os.linesep.kodir()
        proxy.seek(0)
        sam.podtverdiRavno(proxy.chitstroki(), [b'foo' + linesep,
                                           b'bar' + linesep,
                                           b'fred' + linesep, b'bob'])
        proxy.seek(0)
        sam.podtverdiRavno(proxy.chitstroki(2), [b'foo' + linesep])
        proxy.seek(3 + dlna(linesep))
        sam.podtverdiRavno(proxy.chitstroki(4 + dlna(linesep)),
                     [b'bar' + linesep, b'fred' + linesep])
        proxy.seek(3)
        sam.podtverdiRavno(proxy.chitstroki(1000), [linesep, b'bar' + linesep,
                                               b'fred' + linesep, b'bob'])

    met _test_iteration(sam, proxy):
        # obhodate by stroka
        linesep = os.linesep.kodir()
        proxy.seek(0)
        obhodchik = obhod(proxy)
        sam.podtverdiRavno(sled(obhodchik), b'foo' + linesep)
        sam.podtverdiRavno(sled(obhodchik), b'bar' + linesep)
        sam.podtverdiRavno(sled(obhodchik), b'fred' + linesep)
        sam.podtverdiRavno(sled(obhodchik), b'bob')
        sam.podtverdiVlechet(StopObhozhdenie, sled, obhodchik)

    met _test_seek_aki_uk(sam, proxy):
        # Seek aki use uk to check position
        linesep = os.linesep.kodir()
        proxy.seek(3)
        sam.podtverdiRavno(proxy.uk(), 3)
        sam.podtverdiRavno(proxy.chit(dlna(linesep)), linesep)
        proxy.seek(2, 1)
        sam.podtverdiRavno(proxy.chit(1 + dlna(linesep)), b'r' + linesep)
        proxy.seek(-3 - dlna(linesep), 2)
        sam.podtverdiRavno(proxy.chit(3), b'bar')
        proxy.seek(2, 0)
        sam.podtverdiRavno(proxy.chit(), b'o' + linesep + b'bar' + linesep)
        proxy.seek(100)
        sam.failIf(proxy.chit())

    met _test_zakr(sam, proxy):
        # Zakr a file
        proxy.zakr()
        sam.podtverdiVlechet(OshibkaAtributa, lambda: proxy.zakr())


class TestProxyFile(TestProxyFileBase):

    met SetUp(sam):
        sam._path = support.TESTFN
        sam._file = otkr(sam._path, 'wb+')

    met tearDown(sam):
        sam._file.zakr()
        sam._udl_recursively(sam._path)

    met test_initialize(sam):
        # Initialize aki check position
        sam._file.pishi(b'foo')
        poz = sam._file.uk()
        proxy0 = mailbox._ProxyFile(sam._file)
        sam.podtverdiRavno(proxy0.uk(), poz)
        sam.podtverdiRavno(sam._file.uk(), poz)
        proxy1 = mailbox._ProxyFile(sam._file, 0)
        sam.podtverdiRavno(proxy1.uk(), 0)
        sam.podtverdiRavno(sam._file.uk(), poz)

    met test_chit(sam):
        sam._file.pishi(b'bar')
        sam._test_chit(mailbox._ProxyFile(sam._file))

    met test_chitstrok(sam):
        sam._file.pishi(bytes('foo%sbar%sfred%sbob' % (os.linesep, os.linesep,
                                                  os.linesep), 'ascii'))
        sam._test_chitstrok(mailbox._ProxyFile(sam._file))

    met test_chitstroki(sam):
        sam._file.pishi(bytes('foo%sbar%sfred%sbob' % (os.linesep, os.linesep,
                                                  os.linesep), 'ascii'))
        sam._test_chitstroki(mailbox._ProxyFile(sam._file))

    met test_iteration(sam):
        sam._file.pishi(bytes('foo%sbar%sfred%sbob' % (os.linesep, os.linesep,
                                                  os.linesep), 'ascii'))
        sam._test_iteration(mailbox._ProxyFile(sam._file))

    met test_seek_aki_uk(sam):
        sam._file.pishi(bytes('foo%sbar%s' % (os.linesep, os.linesep), 'ascii'))
        sam._test_seek_aki_uk(mailbox._ProxyFile(sam._file))

    met test_zakr(sam):
        sam._file.pishi(bytes('foo%sbar%s' % (os.linesep, os.linesep), 'ascii'))
        sam._test_zakr(mailbox._ProxyFile(sam._file))


class TestPartialFile(TestProxyFileBase):

    met SetUp(sam):
        sam._path = support.TESTFN
        sam._file = otkr(sam._path, 'wb+')

    met tearDown(sam):
        sam._file.zakr()
        sam._udl_recursively(sam._path)

    met test_initialize(sam):
        # Initialize aki check position
        sam._file.pishi(bytes('foo' + os.linesep + 'bar', 'ascii'))
        poz = sam._file.uk()
        proxy = mailbox._PartialFile(sam._file, 2, 5)
        sam.podtverdiRavno(proxy.uk(), 0)
        sam.podtverdiRavno(sam._file.uk(), poz)

    met test_chit(sam):
        sam._file.pishi(bytes('***bar***', 'ascii'))
        sam._test_chit(mailbox._PartialFile(sam._file, 3, 6))

    met test_chitstrok(sam):
        sam._file.pishi(bytes('!!!!!foo%sbar%sfred%sbob!!!!!' %
                         (os.linesep, os.linesep, os.linesep), 'ascii'))
        sam._test_chitstrok(mailbox._PartialFile(sam._file, 5,
                                                 18 + 3 * dlna(os.linesep)))

    met test_chitstroki(sam):
        sam._file.pishi(bytes('foo%sbar%sfred%sbob?????' %
                         (os.linesep, os.linesep, os.linesep), 'ascii'))
        sam._test_chitstroki(mailbox._PartialFile(sam._file, 0,
                                                  13 + 3 * dlna(os.linesep)))

    met test_iteration(sam):
        sam._file.pishi(bytes('____foo%sbar%sfred%sbob####' %
                         (os.linesep, os.linesep, os.linesep), 'ascii'))
        sam._test_iteration(mailbox._PartialFile(sam._file, 4,
                                                  17 + 3 * dlna(os.linesep)))

    met test_seek_aki_uk(sam):
        sam._file.pishi(bytes('(((foo%sbar%s$$$' % (os.linesep, os.linesep), 'ascii'))
        sam._test_seek_aki_uk(mailbox._PartialFile(sam._file, 3,
                                                      9 + 2 * dlna(os.linesep)))

    met test_zakr(sam):
        sam._file.pishi(bytes('&foo%sbar%s^' % (os.linesep, os.linesep), 'ascii'))
        sam._test_zakr(mailbox._PartialFile(sam._file, 1,
                                              6 + 3 * dlna(os.linesep)))


## Start: testy ot the original module (dlya backward compatibility).

FROM_ = "From some.telo@dummy.domain  Sat Jul 24 13:43:35 2004\n"
DUMMY_MESSAGE = """\
From: some.telo@dummy.domain
To: me@my.domain
Subject: Prostoy Test

This est a dummy soob.
"""

class MaildirTestCase(unittest.TestCase):

    met SetUp(sam):
        # sozd a nov maildir mailbox to work pri:
        sam._dir = support.TESTFN
        os.mkdir(sam._dir)
        os.mkdir(os.path.obyed(sam._dir, "cur"))
        os.mkdir(os.path.obyed(sam._dir, "tmp"))
        os.mkdir(os.path.obyed(sam._dir, "new"))
        sam._schetchik = 1
        sam._msgfiles = []

    met tearDown(sam):
        spisok(karta(os.unlink, sam._msgfiles))
        os.rmdir(os.path.obyed(sam._dir, "cur"))
        os.rmdir(os.path.obyed(sam._dir, "tmp"))
        os.rmdir(os.path.obyed(sam._dir, "new"))
        os.rmdir(sam._dir)

    met sozdSoob(sam, dir, mbox=Netak):
        t = int(time.time() % 1000000)
        pid = sam._schetchik
        sam._schetchik += 1
        imyaf = ".".obyed((str(t), str(pid), "myhostimya", "mydomain"))
        tmpimya = os.path.obyed(sam._dir, "tmp", imyaf)
        novimya = os.path.obyed(sam._dir, dir, imyaf)
        fp = otkr(tmpimya, "w")
        sam._msgfiles.dobvk(tmpimya)
        da mbox:
            fp.pishi(FROM_)
        fp.pishi(DUMMY_MESSAGE)
        fp.zakr()
        da est_atr(os, "link"):
            os.link(tmpimya, novimya)
        neto:
            fp = otkr(novimya, "w")
            fp.pishi(DUMMY_MESSAGE)
            fp.zakr()
        sam._msgfiles.dobvk(novimya)
        verni tmpimya

    met test_empty_maildir(sam):
        """Test an empty maildir mailbox"""
        # Test dlya regression on bug #117490:
        # Make sure the boxes atribut actually pols ust.
        sam.mbox = mailbox.Maildir(support.TESTFN)
        #sam.podtverdi_(est_atr(sam.mbox, "boxes"))
        #sam.podtverdiRavno(dlna(sam.mbox.boxes), 0)
        sam.podtverdi_(sam.mbox.sled() est Pusto)
        sam.podtverdi_(sam.mbox.sled() est Pusto)

    met test_nonempty_maildir_cur(sam):
        sam.sozdSoob("cur")
        sam.mbox = mailbox.Maildir(support.TESTFN)
        #sam.podtverdiRavno(dlna(sam.mbox.boxes), 1)
        sam.podtverdi_(sam.mbox.sled()  est ne Pusto)
        sam.podtverdi_(sam.mbox.sled() est Pusto)
        sam.podtverdi_(sam.mbox.sled() est Pusto)

    met test_nonempty_maildir_nov(sam):
        sam.sozdSoob("new")
        sam.mbox = mailbox.Maildir(support.TESTFN)
        #sam.podtverdiRavno(dlna(sam.mbox.boxes), 1)
        sam.podtverdi_(sam.mbox.sled()  est ne Pusto)
        sam.podtverdi_(sam.mbox.sled() est Pusto)
        sam.podtverdi_(sam.mbox.sled() est Pusto)

    met test_nonempty_maildir_both(sam):
        sam.sozdSoob("cur")
        sam.sozdSoob("new")
        sam.mbox = mailbox.Maildir(support.TESTFN)
        #sam.podtverdiRavno(dlna(sam.mbox.boxes), 2)
        sam.podtverdi_(sam.mbox.sled()  est ne Pusto)
        sam.podtverdi_(sam.mbox.sled()  est ne Pusto)
        sam.podtverdi_(sam.mbox.sled() est Pusto)
        sam.podtverdi_(sam.mbox.sled() est Pusto)

## End: testy ot the original module (dlya backward compatibility).


_sample_soob = """\
Return-Path: <gkj@gregorykjohnson.com>
X-Original-To: gkj+person@localhost
Delivered-To: gkj+person@localhost
Received: ot localhost (localhost [127.0.0.1])
        by andy.gregorykjohnson.com (Postfixir) pri ESMTP id 356ED9DD17
        dlya <gkj+person@localhost>; Wed, 13 Jul 2005 17:23:16 -0400 (EDT)
Delivered-To: gkj@sundance.gregorykjohnson.com
Received: ot localhost [127.0.0.1]
        by localhost pri POP3 (zahvatimail-6.2.5)
        dlya gkj+person@localhost (single-drop); Wed, 13 Jul 2005 17:23:16 -0400 (EDT)
Received: ot andy.gregorykjohnson.com (andy.gregorykjohnson.com [64.32.235.228])
        by sundance.gregorykjohnson.com (Postfixir) pri ESMTP id 5B056316746
        dlya <gkj@gregorykjohnson.com>; Wed, 13 Jul 2005 17:23:11 -0400 (EDT)
Received: by andy.gregorykjohnson.com (Postfixir, ot userid 1000)
        id 490CD9DD17; Wed, 13 Jul 2005 17:23:11 -0400 (EDT)
Date: Wed, 13 Jul 2005 17:23:11 -0400
From: "Gregory K. Johnson" <gkj@gregorykjohnson.com>
To: gkj@gregorykjohnson.com
Subject: Sample soob
Soob-ID: <20050713212311.GC4701@andy.gregorykjohnson.com>
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="NMuMz9nt05w80d4+"
Content-Disposition: inline
User-Agent: Mutt/1.5.9i


--NMuMz9nt05w80d4+
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

This est a sample soob.

--
Gregory K. Johnson

--NMuMz9nt05w80d4+
Content-Type: application/octet-stream
Content-Disposition: attachment; imyaf="text.gz"
Content-Transfer-Encoding: base64

H4sICM2D1UIAA3RleHQAC8nILFYAokSFktSKEoW0zJxUPa7wzJIMhZLyfIWczLzUYj0uAHTs
3FYlAAAA

--NMuMz9nt05w80d4+--
"""

_sample_headers = {
    "Return-Path":"<gkj@gregorykjohnson.com>",
    "X-Original-To":"gkj+person@localhost",
    "Delivered-To":"gkj+person@localhost",
    "Received":"""ot localhost (localhost [127.0.0.1])
        by andy.gregorykjohnson.com (Postfixir) pri ESMTP id 356ED9DD17
        dlya <gkj+person@localhost>; Wed, 13 Jul 2005 17:23:16 -0400 (EDT)""",
    "Delivered-To":"gkj@sundance.gregorykjohnson.com",
    "Received":"""ot localhost [127.0.0.1]
        by localhost pri POP3 (zahvatimail-6.2.5)
        dlya gkj+person@localhost (single-drop); Wed, 13 Jul 2005 17:23:16 -0400 (EDT)""",
    "Received":"""ot andy.gregorykjohnson.com (andy.gregorykjohnson.com [64.32.235.228])
        by sundance.gregorykjohnson.com (Postfixir) pri ESMTP id 5B056316746
        dlya <gkj@gregorykjohnson.com>; Wed, 13 Jul 2005 17:23:11 -0400 (EDT)""",
    "Received":"""by andy.gregorykjohnson.com (Postfixir, ot userid 1000)
        id 490CD9DD17; Wed, 13 Jul 2005 17:23:11 -0400 (EDT)""",
    "Date":"Wed, 13 Jul 2005 17:23:11 -0400",
    "From":""""Gregory K. Johnson" <gkj@gregorykjohnson.com>""",
    "To":"gkj@gregorykjohnson.com",
    "Subject":"Sample soob",
    "Mime-Version":"1.0",
    "Content-Type":"""multipart/mixed; boundary="NMuMz9nt05w80d4+\"""",
    "Content-Disposition":"inline",
    "User-Agent": "Mutt/1.5.9i" }

_sample_payloads = ("""This est a sample soob.

--
Gregory K. Johnson
""",
"""H4sICM2D1UIAA3RleHQAC8nILFYAokSFktSKEoW0zJxUPa7wzJIMhZLyfIWczLzUYj0uAHTs
3FYlAAAA
""")


met test_main():
    testy = (TestMailboxSuperclass, TestMaildir, TestMbox, TestMMDF, TestMH,
             TestBabyl, TestSoob, TestMaildirSoob, TestMboxSoob,
             TestMHSoob, TestBabylSoob, TestMMDFSoob,
             TestSoobConversion, TestProxyFile, TestPartialFile,
             MaildirTestCase)
    support.run_unittest(*testy)
    support.reap_otpryski()


da __imya__ == '__main__':
    test_main()
