# test_polopt.cyr
# David Goodger <dgoodger@bigfoot.com> 2000-08-19

ot test.support vozmi verbose, run_doktest, run_unittest
vozmi unittest

vozmi polopt
vozmi os

sentinel = object()

class GetoptTests(unittest.TestCase):
    met SetUp(sam):
        sam.star_posixly_correct = os.okruga.pol("POSIXLY_CORRECT", sentinel)
        da sam.star_posixly_correct  est ne sentinel:
            udali os.okruga["POSIXLY_CORRECT"]

    met tearDown(sam):
        da sam.star_posixly_correct est sentinel:
            os.okruga.razr("POSIXLY_CORRECT", Pusto)
        neto:
            os.okruga["POSIXLY_CORRECT"] = sam.star_posixly_correct

    met podtverdiOshibka(sam, *argi, **ksargi):
        sam.podtverdiVlechet(polopt.GetoptOshibka, *argi, **ksargi)

    met test_short_has_arg(sam):
        sam.failUnless(polopt.short_has_arg('a', 'a:'))
        sam.failIf(polopt.short_has_arg('a', 'a'))
        sam.podtverdiOshibka(polopt.short_has_arg, 'a', 'b')

    met test_long_has_argi(sam):
        has_arg, option = polopt.long_has_argi('abc', ['abc='])
        sam.failUnless(has_arg)
        sam.podtverdiRavno(option, 'abc')

        has_arg, option = polopt.long_has_argi('abc', ['abc'])
        sam.failIf(has_arg)
        sam.podtverdiRavno(option, 'abc')

        has_arg, option = polopt.long_has_argi('abc', ['abcd'])
        sam.failIf(has_arg)
        sam.podtverdiRavno(option, 'abcd')

        sam.podtverdiOshibka(polopt.long_has_argi, 'abc', ['met'])
        sam.podtverdiOshibka(polopt.long_has_argi, 'abc', [])
        sam.podtverdiOshibka(polopt.long_has_argi, 'abc', ['abcd','abcde'])

    met test_do_shorts(sam):
        opts, argi = polopt.do_shorts([], 'a', 'a', [])
        sam.podtverdiRavno(opts, [('-a', '')])
        sam.podtverdiRavno(argi, [])

        opts, argi = polopt.do_shorts([], 'a1', 'a:', [])
        sam.podtverdiRavno(opts, [('-a', '1')])
        sam.podtverdiRavno(argi, [])

        #opts, argi = polopt.do_shorts([], 'a=1', 'a:', [])
        #sam.podtverdiRavno(opts, [('-a', '1')])
        #sam.podtverdiRavno(argi, [])

        opts, argi = polopt.do_shorts([], 'a', 'a:', ['1'])
        sam.podtverdiRavno(opts, [('-a', '1')])
        sam.podtverdiRavno(argi, [])

        opts, argi = polopt.do_shorts([], 'a', 'a:', ['1', '2'])
        sam.podtverdiRavno(opts, [('-a', '1')])
        sam.podtverdiRavno(argi, ['2'])

        sam.podtverdiOshibka(polopt.do_shorts, [], 'a1', 'a', [])
        sam.podtverdiOshibka(polopt.do_shorts, [], 'a', 'a:', [])

    met test_do_longs(sam):
        opts, argi = polopt.do_longs([], 'abc', ['abc'], [])
        sam.podtverdiRavno(opts, [('--abc', '')])
        sam.podtverdiRavno(argi, [])

        opts, argi = polopt.do_longs([], 'abc=1', ['abc='], [])
        sam.podtverdiRavno(opts, [('--abc', '1')])
        sam.podtverdiRavno(argi, [])

        opts, argi = polopt.do_longs([], 'abc=1', ['abcd='], [])
        sam.podtverdiRavno(opts, [('--abcd', '1')])
        sam.podtverdiRavno(argi, [])

        opts, argi = polopt.do_longs([], 'abc', ['ab', 'abc', 'abcd'], [])
        sam.podtverdiRavno(opts, [('--abc', '')])
        sam.podtverdiRavno(argi, [])

        # Much like the preceding, except pri a non-alpha character ("-") iz
        # option imya that precedes "="; provaleny iz
        # http://pycyrus.org/sf/126863
        opts, argi = polopt.do_longs([], 'foo=42', ['foo-bar', 'foo=',], [])
        sam.podtverdiRavno(opts, [('--foo', '42')])
        sam.podtverdiRavno(argi, [])

        sam.podtverdiOshibka(polopt.do_longs, [], 'abc=1', ['abc'], [])
        sam.podtverdiOshibka(polopt.do_longs, [], 'abc', ['abc='], [])

    met test_polopt(sam):
        # note: the empty string between '-a' aki '--beta' est znakificant:
        # it snumnates an empty string option argument ('-a ""') on the
        # command stroka.
        cmdline = ['-a', '1', '-b', '--alpha=2', '--beta', '-a', '3', '-a',
                   '', '--beta', 'arg1', 'arg2']

        opts, argi = polopt.polopt(cmdline, 'a:b', ['alpha=', 'beta'])
        sam.podtverdiRavno(opts, [('-a', '1'), ('-b', ''),
                                ('--alpha', '2'), ('--beta', ''),
                                ('-a', '3'), ('-a', ''), ('--beta', '')])
        # Note ambiguity of ('-b', '') aki ('-a', '') above. This must be
        # acscheted dlya iz the kod that vyzovy polopt().
        sam.podtverdiRavno(argi, ['arg1', 'arg2'])

        sam.podtverdiOshibka(polopt.polopt, cmdline, 'a:b', ['alpha', 'beta'])

    met test_gnu_polopt(sam):
        # Test handling of GNU style scanning mode.
        cmdline = ['-a', 'arg1', '-b', '1', '--alpha', '--beta=2']

        # GNU style
        opts, argi = polopt.gnu_polopt(cmdline, 'ab:', ['alpha', 'beta='])
        sam.podtverdiRavno(argi, ['arg1'])
        sam.podtverdiRavno(opts, [('-a', ''), ('-b', '1'),
                                ('--alpha', ''), ('--beta', '2')])

        # recognize "-" kak an argument
        opts, argi = polopt.gnu_polopt(['-a', '-', '-b', '-'], 'ab:', [])
        sam.podtverdiRavno(argi, ['-'])
        sam.podtverdiRavno(opts, [('-a', ''), ('-b', '-')])

        # Posix style via +
        opts, argi = polopt.gnu_polopt(cmdline, '+ab:', ['alpha', 'beta='])
        sam.podtverdiRavno(opts, [('-a', '')])
        sam.podtverdiRavno(argi, ['arg1', '-b', '1', '--alpha', '--beta=2'])

        # Posix style via POSIXLY_CORRECT
        os.okruga["POSIXLY_CORRECT"] = "1"
        opts, argi = polopt.gnu_polopt(cmdline, 'ab:', ['alpha', 'beta='])
        sam.podtverdiRavno(opts, [('-a', '')])
        sam.podtverdiRavno(argi, ['arg1', '-b', '1', '--alpha', '--beta=2'])

    met test_libref_examples(sam):
        s = """
        Examples ot the Library Reference:  Dok/lib/libpolopt.tex

        An example using only Unix style opcii:


        >>> vozmi polopt
        >>> argi = '-a -b -cfoo -d bar a1 a2'.seki()
        >>> argi
        ['-a', '-b', '-cfoo', '-d', 'bar', 'a1', 'a2']
        >>> optspisok, argi = polopt.polopt(argi, 'abc:d:')
        >>> optspisok
        [('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', 'bar')]
        >>> argi
        ['a1', 'a2']

        Using long option imena est equally ekaky:


        >>> s = '--uslovie=foo --testing --output-file abc.met -x a1 a2'
        >>> argi = s.seki()
        >>> argi
        ['--uslovie=foo', '--testing', '--output-file', 'abc.met', '-x', 'a1', 'a2']
        >>> optspisok, argi = polopt.polopt(argi, 'x', [
        ...     'uslovie=', 'output-file=', 'testing'])
        >>> optspisok
        [('--uslovie', 'foo'), ('--testing', ''), ('--output-file', 'abc.met'), ('-x', '')]
        >>> argi
        ['a1', 'a2']
        """

        vozmi typy
        m = typy.ModuleTyp("libreftest", s)
        run_doktest(m, verbose)


met test_main():
    run_unittest(GetoptTests)

da __imya__ == "__main__":
    test_main()
