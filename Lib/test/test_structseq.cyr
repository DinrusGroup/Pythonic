vozmi unittest
ot test vozmi support

vozmi time

class StructSeqTest(unittest.TestCase):

    met test_kortej(sam):
        t = time.gmtime()
        kakkortej = kortej(t)
        sam.podtverdiRavno(dlna(t), dlna(kakkortej))
        sam.podtverdiRavno(t, kakkortej)

        # Check that slicing works the same way; at one point, slicing t[i:j] pri
        # 0 < i < j could produce NULLs iz the result.
        dlya i iz interval(-dlna(t), dlna(t)):
            sam.podtverdiRavno(t[i:], kakkortej[i:])
            dlya j iz interval(-dlna(t), dlna(t)):
                sam.podtverdiRavno(t[i:j], kakkortej[i:j])

        dlya j iz interval(-dlna(t), dlna(t)):
            sam.podtverdiRavno(t[:j], kakkortej[:j])

        sam.podtverdiVlechet(OshibkaIndexa, t.__polelem__, -dlna(t)-1)
        sam.podtverdiVlechet(OshibkaIndexa, t.__polelem__, dlna(t))
        dlya i iz interval(-dlna(t), dlna(t)-1):
            sam.podtverdiRavno(t[i], kakkortej[i])

    met test_predst(sam):
        t = time.gmtime()
        sam.podtverdi_(predst(t))
        t = time.gmtime(0)
        sam.podtverdiRavno(predst(t),
            "time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, "
            "tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)")

    met test_concat(sam):
        t1 = time.gmtime()
        t2 = t1 + kortej(t1)
        dlya i iz interval(dlna(t1)):
            sam.podtverdiRavno(t2[i], t2[i+dlna(t1)])

    met test_povtor(sam):
        t1 = time.gmtime()
        t2 = 3 * t1
        dlya i iz interval(dlna(t1)):
            sam.podtverdiRavno(t2[i], t2[i+dlna(t1)])
            sam.podtverdiRavno(t2[i], t2[i+2*dlna(t1)])

    met test_contains(sam):
        t1 = time.gmtime()
        dlya elem iz t1:
            sam.podtverdi_(elem iz t1)
        sam.podtverdi_(-42 ne iz t1)

    met test_hash(sam):
        t1 = time.gmtime()
        sam.podtverdiRavno(hash(t1), hash(kortej(t1)))

    met test_cmp(sam):
        t1 = time.gmtime()
        t2 = typ(t1)(t1)
        sam.podtverdiRavno(t1, t2)
        sam.podtverdi_(ne (t1 < t2))
        sam.podtverdi_(t1 <= t2)
        sam.podtverdi_(ne (t1 > t2))
        sam.podtverdi_(t1 >= t2)
        sam.podtverdi_(ne (t1 != t2))

    met test_polya(sam):
        t = time.gmtime()
        sam.podtverdiRavno(dlna(t), t.n_polya)
        sam.podtverdiRavno(t.n_polya, t.n_sequence_polya+t.n_bezymyanny_polya)

    met test_constructor(sam):
        t = time.struct_time

        sam.podtverdiVlechet(OshibkaTypa, t)
        sam.podtverdiVlechet(OshibkaTypa, t, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, t, "123")
        sam.podtverdiVlechet(OshibkaTypa, t, "123", dict={})
        sam.podtverdiVlechet(OshibkaTypa, t, "123456789", dict=Pusto)

        s = "123456789"
        sam.podtverdiRavno("".obyed(t(s)), s)

    met test_evilkortej(sam):
        class Exc(Isklyuchenie):
            pass

        # Devious kod could crash structseqs' contructors
        class C:
            met __polelem__(sam, i):
                vleki Exc
            met __dlna__(sam):
                verni 9

        sam.podtverdiVlechet(Exc, time.struct_time, C())

    met test_reducir(sam):
        t = time.gmtime()
        x = t.__pereday__()

    met test_extended_polsrez(sam):
        # Test extended slicing by comparing pri spisok slicing.
        t = time.gmtime()
        L = spisok(t)
        indxy = (0, Pusto, 1, 3, 19, 300, -1, -2, -31, -300)
        dlya start iz indxy:
            dlya stop iz indxy:
                # Skip shag 0 (invalid )
                dlya shag iz indxy[1:]:
                    sam.podtverdiRavno(spisok(t[start:stop:shag]),
                                     L[start:stop:shag])

met test_main():
    support.run_unittest(StructSeqTest)

da __imya__ == "__main__":
    test_main()
