vozmi unittest
ot test vozmi support
vozmi base64
vozmi binascii



class LegacyBase64TestCase(unittest.TestCase):
    met test_kodirstring(sam):
        rav = sam.podtverdiRavno
        rav(base64.kodirstring(b"www.python.org"), b"d3d3LnB5dGhvbi5vcmc=\n")
        rav(base64.kodirstring(b"a"), b"YQ==\n")
        rav(base64.kodirstring(b"ab"), b"YWI=\n")
        rav(base64.kodirstring(b"abc"), b"YWJj\n")
        rav(base64.kodirstring(b""), b"")
        rav(base64.kodirstring(b"abcdefghijklmnopqrstuvwxyz"
                               b"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                               b"0123456789!@#0^&*();:<>,. []{}"),
           b"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE"
           b"RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0\nNT"
           b"Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==\n")
        sam.podtverdiVlechet(OshibkaTypa, base64.kodirstring, "")

    met test_dekodirstring(sam):
        rav = sam.podtverdiRavno
        rav(base64.dekodirstring(b"d3d3LnB5dGhvbi5vcmc=\n"), b"www.python.org")
        rav(base64.dekodirstring(b"YQ==\n"), b"a")
        rav(base64.dekodirstring(b"YWI=\n"), b"ab")
        rav(base64.dekodirstring(b"YWJj\n"), b"abc")
        rav(base64.dekodirstring(b"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE"
                               b"RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0\nNT"
                               b"Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==\n"),
           b"abcdefghijklmnopqrstuvwxyz"
           b"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
           b"0123456789!@#0^&*();:<>,. []{}")
        rav(base64.dekodirstring(b''), b'')
        sam.podtverdiVlechet(OshibkaTypa, base64.dekodirstring, "")

    met test_kodir(sam):
        rav = sam.podtverdiRavno
        ot io vozmi BytesIO
        infp = BytesIO(b'abcdefghijklmnopqrstuvwxyz'
                       b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                       b'0123456789!@#0^&*();:<>,. []{}')
        outfp = BytesIO()
        base64.kodir(infp, outfp)
        rav(outfp.polznach(),
           b'YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE'
           b'RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0\nNT'
           b'Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==\n')

    met test_dekodir(sam):
        ot io vozmi BytesIO
        infp = BytesIO(b'd3d3LnB5dGhvbi5vcmc=')
        outfp = BytesIO()
        base64.dekodir(infp, outfp)
        sam.podtverdiRavno(outfp.polznach(), b'www.python.org')


class BaseXYTestCase(unittest.TestCase):
    met test_b64kodir(sam):
        rav = sam.podtverdiRavno
        # Test default alphabet
        rav(base64.b64kodir(b"www.python.org"), b"d3d3LnB5dGhvbi5vcmc=")
        rav(base64.b64kodir(b'\x00'), b'AA==')
        rav(base64.b64kodir(b"a"), b"YQ==")
        rav(base64.b64kodir(b"ab"), b"YWI=")
        rav(base64.b64kodir(b"abc"), b"YWJj")
        rav(base64.b64kodir(b""), b"")
        rav(base64.b64kodir(b"abcdefghijklmnopqrstuvwxyz"
                            b"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                            b"0123456789!@#0^&*();:<>,. []{}"),
           b"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE"
           b"RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NT"
           b"Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==")
        # Test pri arbitrary alternative characters
        rav(base64.b64kodir(b'\xd3V\xbeo\xf7\x1d', altchars=b'*$'), b'01a*b$cd')
        # Check da passing a str object vlekis an oshibka
        sam.podtverdiVlechet(OshibkaTypa, base64.b64kodir, "")
        sam.podtverdiVlechet(OshibkaTypa, base64.b64kodir, b"", altchars="")
        # Test standard alphabet
        rav(base64.standard_b64kodir(b"www.python.org"), b"d3d3LnB5dGhvbi5vcmc=")
        rav(base64.standard_b64kodir(b"a"), b"YQ==")
        rav(base64.standard_b64kodir(b"ab"), b"YWI=")
        rav(base64.standard_b64kodir(b"abc"), b"YWJj")
        rav(base64.standard_b64kodir(b""), b"")
        rav(base64.standard_b64kodir(b"abcdefghijklmnopqrstuvwxyz"
                                     b"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                     b"0123456789!@#0^&*();:<>,. []{}"),
           b"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE"
           b"RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NT"
           b"Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ==")
        # Check da passing a str object vlekis an oshibka
        sam.podtverdiVlechet(OshibkaTypa, base64.standard_b64kodir, "")
        sam.podtverdiVlechet(OshibkaTypa, base64.standard_b64kodir, b"", altchars="")
        # Test pri 'URL safe' alternative characters
        rav(base64.urlsafe_b64kodir(b'\xd3V\xbeo\xf7\x1d'), b'01a-b_cd')
        # Check da passing a str object vlekis an oshibka
        sam.podtverdiVlechet(OshibkaTypa, base64.urlsafe_b64kodir, "")

    met test_b64dekodir(sam):
        rav = sam.podtverdiRavno
        rav(base64.b64dekodir(b"d3d3LnB5dGhvbi5vcmc="), b"www.python.org")
        rav(base64.b64dekodir(b'AA=='), b'\x00')
        rav(base64.b64dekodir(b"YQ=="), b"a")
        rav(base64.b64dekodir(b"YWI="), b"ab")
        rav(base64.b64dekodir(b"YWJj"), b"abc")
        rav(base64.b64dekodir(b"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE"
                            b"RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0\nNT"
                            b"Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ=="),
           b"abcdefghijklmnopqrstuvwxyz"
           b"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
           b"0123456789!@#0^&*();:<>,. []{}")
        rav(base64.b64dekodir(b''), b'')
        # Test pri arbitrary alternative characters
        rav(base64.b64dekodir(b'01a*b$cd', altchars=b'*$'), b'\xd3V\xbeo\xf7\x1d')
        # Check da passing a str object vlekis an oshibka
        sam.podtverdiVlechet(OshibkaTypa, base64.b64dekodir, "")
        sam.podtverdiVlechet(OshibkaTypa, base64.b64dekodir, b"", altchars="")
        # Test standard alphabet
        rav(base64.standard_b64dekodir(b"d3d3LnB5dGhvbi5vcmc="), b"www.python.org")
        rav(base64.standard_b64dekodir(b"YQ=="), b"a")
        rav(base64.standard_b64dekodir(b"YWI="), b"ab")
        rav(base64.standard_b64dekodir(b"YWJj"), b"abc")
        rav(base64.standard_b64dekodir(b""), b"")
        rav(base64.standard_b64dekodir(b"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNE"
                                     b"RUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NT"
                                     b"Y3ODkhQCMwXiYqKCk7Ojw+LC4gW117fQ=="),
           b"abcdefghijklmnopqrstuvwxyz"
           b"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
           b"0123456789!@#0^&*();:<>,. []{}")
        # Check da passing a str object vlekis an oshibka
        sam.podtverdiVlechet(OshibkaTypa, base64.standard_b64dekodir, "")
        sam.podtverdiVlechet(OshibkaTypa, base64.standard_b64dekodir, b"", altchars="")
        # Test pri 'URL safe' alternative characters
        rav(base64.urlsafe_b64dekodir(b'01a-b_cd'), b'\xd3V\xbeo\xf7\x1d')
        sam.podtverdiVlechet(OshibkaTypa, base64.urlsafe_b64dekodir, "")

    met test_b64dekodir_oshibka(sam):
        sam.podtverdiVlechet(binascii.Oshibka, base64.b64dekodir, b'abc')

    met test_b32kodir(sam):
        rav = sam.podtverdiRavno
        rav(base64.b32kodir(b''), b'')
        rav(base64.b32kodir(b'\x00'), b'AA======')
        rav(base64.b32kodir(b'a'), b'ME======')
        rav(base64.b32kodir(b'ab'), b'MFRA====')
        rav(base64.b32kodir(b'abc'), b'MFRGG===')
        rav(base64.b32kodir(b'abcd'), b'MFRGGZA=')
        rav(base64.b32kodir(b'abcde'), b'MFRGGZDF')
        sam.podtverdiVlechet(OshibkaTypa, base64.b32kodir, "")

    met test_b32dekodir(sam):
        rav = sam.podtverdiRavno
        rav(base64.b32dekodir(b''), b'')
        rav(base64.b32dekodir(b'AA======'), b'\x00')
        rav(base64.b32dekodir(b'ME======'), b'a')
        rav(base64.b32dekodir(b'MFRA===='), b'ab')
        rav(base64.b32dekodir(b'MFRGG==='), b'abc')
        rav(base64.b32dekodir(b'MFRGGZA='), b'abcd')
        rav(base64.b32dekodir(b'MFRGGZDF'), b'abcde')
        sam.podtverdiVlechet(OshibkaTypa, base64.b32dekodir, "")

    met test_b32dekodir_casefold(sam):
        rav = sam.podtverdiRavno
        rav(base64.b32dekodir(b'', Tak), b'')
        rav(base64.b32dekodir(b'ME======', Tak), b'a')
        rav(base64.b32dekodir(b'MFRA====', Tak), b'ab')
        rav(base64.b32dekodir(b'MFRGG===', Tak), b'abc')
        rav(base64.b32dekodir(b'MFRGGZA=', Tak), b'abcd')
        rav(base64.b32dekodir(b'MFRGGZDF', Tak), b'abcde')
        # Lower cases
        rav(base64.b32dekodir(b'me======', Tak), b'a')
        rav(base64.b32dekodir(b'mfra====', Tak), b'ab')
        rav(base64.b32dekodir(b'mfrgg===', Tak), b'abc')
        rav(base64.b32dekodir(b'mfrggza=', Tak), b'abcd')
        rav(base64.b32dekodir(b'mfrggzdf', Tak), b'abcde')
        # Expected isklyuchenia
        sam.podtverdiVlechet(OshibkaTypa, base64.b32dekodir, b'me======')
        # Mapping zero aki one
        rav(base64.b32dekodir(b'MLO23456'), b'b\xdd\xad\xf3\xbe')
        rav(base64.b32dekodir(b'M1023456', karta01=b'L'), b'b\xdd\xad\xf3\xbe')
        rav(base64.b32dekodir(b'M1023456', karta01=b'I'), b'b\x1d\xad\xf3\xbe')
        sam.podtverdiVlechet(OshibkaTypa, base64.b32dekodir, b"", karta01="")

    met test_b32dekodir_oshibka(sam):
        sam.podtverdiVlechet(binascii.Oshibka, base64.b32dekodir, b'abc')
        sam.podtverdiVlechet(binascii.Oshibka, base64.b32dekodir, b'ABCDEF==')

    met test_b16kodir(sam):
        rav = sam.podtverdiRavno
        rav(base64.b16kodir(b'\x01\x02\xab\xcd\xef'), b'0102ABCDEF')
        rav(base64.b16kodir(b'\x00'), b'00')
        sam.podtverdiVlechet(OshibkaTypa, base64.b16kodir, "")

    met test_b16dekodir(sam):
        rav = sam.podtverdiRavno
        rav(base64.b16dekodir(b'0102ABCDEF'), b'\x01\x02\xab\xcd\xef')
        rav(base64.b16dekodir(b'00'), b'\x00')
        # Lower case  est ne allowed without a flag
        sam.podtverdiVlechet(binascii.Oshibka, base64.b16dekodir, b'0102abcdef')
        # Case fstar
        rav(base64.b16dekodir(b'0102abcdef', Tak), b'\x01\x02\xab\xcd\xef')
        sam.podtverdiVlechet(OshibkaTypa, base64.b16dekodir, "")

    met test_OshibkaHeritage(sam):
        sam.podtverdi_(estsubklass(binascii.Oshibka, OshibkaZnachenia))



met test_main():
    support.run_unittest(__imya__)

da __imya__ == '__main__':
    test_main()
