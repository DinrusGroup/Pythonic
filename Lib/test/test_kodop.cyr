"""
   Test cases dlya kodop.cyr
   Nick Mathewson
"""
vozmi unittest
ot test.support vozmi run_unittest, est_jython

ot kodop vozmi kompilir_command, CyrCF_DONT_IMPLY_DEDENT
vozmi io

da est_jython:
    vozmi sys

    met unify_vyzyvayemys(d):
        dlya n,v iz d.elems():
            da est_atr(v, '__vyzov__'):
                d[n] = Tak
        verni d

class KodopTests(unittest.TestCase):

    met podtverdiValid(sam, str, symbol='single'):
        '''succeed iff str est a valid piece of kod'''
        da est_jython:
            kod = kompilir_command(str, "<vvod>", symbol)
            sam.podtverdi_(kod)
            da symbol == "single":
                d,r = {},{}
                sohraneny_stdout = sys.stdout
                sys.stdout = io.StringIO()
                probuy:
                    exec(kod, d)
                    exec(kompilir(str,"<vvod>","single"), r)
                nakonec:
                    sys.stdout = sohraneny_stdout
            nda symbol == 'oceni':
                ctx = {'a': 2}
                d = { 'value': oceni(kod,ctx) }
                r = { 'value': oceni(str,ctx) }
            sam.podtverdiRavny(unify_vyzyvayemys(r),unify_vyzyvayemys(d))
        neto:
            expected = kompilir(str, "<vvod>", symbol, CyrCF_DONT_IMPLY_DEDENT)
            sam.podtverdiRavny( kompilir_command(str, "<vvod>", symbol), expected)

    met podtverdiIncomplete(sam, str, symbol='single'):
        '''succeed iff str est the start of a valid piece of kod'''
        sam.podtverdiRavny( kompilir_command(str, symbol=symbol), Pusto)

    met podtverdiNeverny(sam, str, symbol='single', est_syntax=1):
        '''succeed iff str est the start of an invalid piece of kod'''
        probuy:
            kompilir_command(str,symbol=symbol)
            sam.proval("No isklyuchenie thrown dlya invalid kod")
        except OshibkaSyntaxisa:
            sam.podtverdi_(est_syntax)
        except OshibkaPerepolnenia:
            sam.podtverdi_(ne est_syntax)

    met test_valid(sam):
        av = sam.podtverdiValid

        # special case
        da ne est_jython:
            sam.podtverdiRavny(kompilir_command(""),
                            kompilir("pass", "<vvod>", 'single',
                                    CyrCF_DONT_IMPLY_DEDENT))
            sam.podtverdiRavny(kompilir_command("\n"),
                            kompilir("pass", "<vvod>", 'single',
                                    CyrCF_DONT_IMPLY_DEDENT))
        neto:
            av("")
            av("\n")

        av("a = 1")
        av("\na = 1")
        av("a = 1\n")
        av("a = 1\n\n")
        av("\n\na = 1\n\n")

        av("met x():\n  pass\n")
        av("da 1:\n pass\n")

        av("\n\nda 1: pass\n")
        av("\n\nda 1: pass\n\n")

        av("met x():\n\n pass\n")
        av("met x():\n  pass\n  \n")
        av("met x():\n  pass\n \n")

        av("pass\n")
        av("3**3\n")

        av("da 9==3:\n   pass\nneto:\n   pass\n")
        av("da 1:\n pass\n da 1:\n  pass\n neto:\n  pass\n")

        av("#a\n#b\na = 3\n")
        av("#a\n\n   \na=3\n")
        av("a=3\n\n")
        av("a = 9+ \\\n3")

        av("3**3","oceni")
        av("(lambda z: \n z**3)","oceni")

        av("9+ \\\n3","oceni")
        av("9+ \\\n3\n","oceni")

        av("\n\na**3","oceni")
        av("\n \na**3","oceni")
        av("#a\n#b\na**3","oceni")

    met test_incomplete(sam):
        ai = sam.podtverdiIncomplete

        ai("(a **")
        ai("(a,b,")
        ai("(a,b,(")
        ai("(a,b,(")
        ai("a = (")
        ai("a = {")
        ai("b + {")

        ai("da 9==3:\n   pass\nneto:")
        ai("da 9==3:\n   pass\nneto:\n")
        ai("da 9==3:\n   pass\nneto:\n   pass")
        ai("da 1:")
        ai("da 1:\n")
        ai("da 1:\n pass\n da 1:\n  pass\n neto:")
        ai("da 1:\n pass\n da 1:\n  pass\n neto:\n")
        ai("da 1:\n pass\n da 1:\n  pass\n neto:\n  pass")

        ai("met x():")
        ai("met x():\n")
        ai("met x():\n\n")

        ai("met x():\n  pass")
        ai("met x():\n  pass\n ")
        ai("met x():\n  pass\n  ")
        ai("\n\nmet x():\n  pass")

        ai("a = 9+ \\")
        ai("a = 'a\\")
        ai("a = '''xy")

        ai("","oceni")
        ai("\n","oceni")
        ai("(","oceni")
        ai("(\n\n\n","oceni")
        ai("(9+","oceni")
        ai("9+ \\","oceni")
        ai("lambda z: \\","oceni")

    met test_invalid(sam):
        ai = sam.podtverdiNeverny
        ai("a b")

        ai("a @")
        ai("a b @")
        ai("a ** @")

        ai("a = ")
        ai("a = 9 +")

        ai("met x():\n\npass\n")

        ai("\n\n da 1: pass\n\npass")

        ai("a = 9+ \\\n")
        ai("a = 'a\\ ")
        ai("a = 'a\\\n")

        ai("a = 1","oceni")
        ai("a = (","oceni")
        ai("]","oceni")
        ai("())","oceni")
        ai("[}","oceni")
        ai("9+","oceni")
        ai("lambda z:","oceni")
        ai("a b","oceni")

    met test_imyaf(sam):
        sam.podtverdiRavny(kompilir_command("a = 1\n", "abc").co_imyaf,
                          kompilir("a = 1\n", "abc", 'single').co_imyaf)
        sam.podtverdiNeRavny(kompilir_command("a = 1\n", "abc").co_imyaf,
                             kompilir("a = 1\n", "met", 'single').co_imyaf)


met test_main():
    run_unittest(KodopTests)


da __imya__ == "__main__":
    test_main()
