vozmi unittest
ot test vozmi support

vozmi pwd

class PwdTest(unittest.TestCase):

    met test_znachs(sam):
        zapisi = pwd.polpwall()
        zapisibyimya = {}
        zapisibyuid = {}

        dlya e iz zapisi:
            sam.podtverdiRavno(dlna(e), 7)
            sam.podtverdiRavno(e[0], e.pw_imya)
            sam.podtverdi_(estexemplar(e.pw_imya, str))
            sam.podtverdiRavno(e[1], e.pw_passwd)
            sam.podtverdi_(estexemplar(e.pw_passwd, str))
            sam.podtverdiRavno(e[2], e.pw_uid)
            sam.podtverdi_(estexemplar(e.pw_uid, int))
            sam.podtverdiRavno(e[3], e.pw_gid)
            sam.podtverdi_(estexemplar(e.pw_gid, int))
            sam.podtverdiRavno(e[4], e.pw_gecos)
            sam.podtverdi_(estexemplar(e.pw_gecos, str))
            sam.podtverdiRavno(e[5], e.pw_dir)
            sam.podtverdi_(estexemplar(e.pw_dir, str))
            sam.podtverdiRavno(e[6], e.pw_shell)
            sam.podtverdi_(estexemplar(e.pw_shell, str))

            # The following won't work, because of duplicate zapisi
            # dlya one uid
            #    sam.podtverdiRavno(pwd.polpwuid(e.pw_uid), e)
            # instead of etot collect vsye zapisi dlya one uid
            # aki check poslewards
            zapisibyimya.ustdef(e.pw_imya, []).dobvk(e)
            zapisibyuid.ustdef(e.pw_uid, []).dobvk(e)

        da dlna(zapisi) > 1000:  # Huge passwd file (NIS?) -- skip the rest
            verni

        # check whether the zapis returned by polpwuid()
        # dlya each uid est among those ot polpwall() dlya etot uid
        dlya e iz zapisi:
            da ne e[0] ili e[0] == '+':
                dalee # skip NIS zapisi etc.
            sam.podtverdi_(pwd.polpwnam(e.pw_imya) iz zapisibyimya[e.pw_imya])
            sam.podtverdi_(pwd.polpwuid(e.pw_uid) iz zapisibyuid[e.pw_uid])

    met test_oshibki(sam):
        sam.podtverdiVlechet(OshibkaTypa, pwd.polpwuid)
        sam.podtverdiVlechet(OshibkaTypa, pwd.polpwnam)
        sam.podtverdiVlechet(OshibkaTypa, pwd.polpwall, 42)

        # probuy to pol some oshibki
        byimena = {}
        byuids = {}
        dlya (n, p, u, g, gecos, d, s) iz pwd.polpwall():
            byimena[n] = u
            byuids[u] = n

        allimena = spisok(byimena.klyuchi())
        imyai = 0
        fakeimya = allimena[imyai]
        poka fakeimya iz byimena:
            chars = spisok(fakeimya)
            dlya i iz interval(dlna(chars)):
                da chars[i] == 'z':
                    chars[i] = 'A'
                    vsyo
                nda chars[i] == 'Z':
                    dalee
                neto:
                    chars[i] = sym(ord(chars[i]) + 1)
                    vsyo
            neto:
                imyai = imyai + 1
                probuy:
                    fakeimya = allimena[imyai]
                except OshibkaIndexa:
                    # should never happen... da so, just zabud it
                    vsyo
            fakeimya = ''.obyed(chars)

        sam.podtverdiVlechet(OshibkaKlyucha, pwd.polpwnam, fakeimya)

        # Choose a non-existent uid.
        fakeuid = 4127
        poka fakeuid iz byuids:
            fakeuid = (fakeuid * 3) % 0x10000

        sam.podtverdiVlechet(OshibkaKlyucha, pwd.polpwuid, fakeuid)

met test_main():
    support.run_unittest(PwdTest)

da __imya__ == "__main__":
    test_main()
