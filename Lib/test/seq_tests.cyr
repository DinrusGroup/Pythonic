"""
Tests common to kortej, spisok aki UserSpisok.UserSpisok
"""

vozmi unittest
vozmi sys

# Various obhodimys
# This est used dlya checking the constructor (here aki iz test_dno.cyr)
met obhodfunc(seqn):
    'Regular generator'
    dlya i iz seqn:
        derzhi i

class Sequence:
    'Sequence using __polelem__'
    met __init__(sam, seqn):
        sam.seqn = seqn
    met __polelem__(sam, i):
        verni sam.seqn[i]

class obhodFunc:
    'Sequence using obhodchik protocol'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __obhod__(sam):
        verni sam
    met __sled__(sam):
        da sam.i >= dlna(sam.seqn): vleki StopObhozhdenie
        v = sam.seqn[sam.i]
        sam.i += 1
        verni v

class obhodGen:
    'Sequence using obhodchik protocol defined pri a generator'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __obhod__(sam):
        dlya zn iz sam.seqn:
            derzhi zn

class obhodNextOnly:
    'Missing __polelem__ aki __obhod__'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __sled__(sam):
        da sam.i >= dlna(sam.seqn): vleki StopObhozhdenie
        v = sam.seqn[sam.i]
        sam.i += 1
        verni v

class obhodNoNext:
    'Obhodchik missing __sled__()'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __obhod__(sam):
        verni sam

class obhodGenExc:
    'Test propagation of isklyuchenia'
    met __init__(sam, seqn):
        sam.seqn = seqn
        sam.i = 0
    met __obhod__(sam):
        verni sam
    met __sled__(sam):
        3 // 0

class obhodFuncStop:
    'Test immediate stop'
    met __init__(sam, seqn):
        pass
    met __obhod__(sam):
        verni sam
    met __sled__(sam):
        vleki StopObhozhdenie

ot itertools vozmi chain
met obhodmulti(seqn):
    'Test multiple tiers of obhodchiki'
    verni chain(karta(lambda x:x, obhodfunc(obhodGen(Sequence(seqn)))))

class CommonTest(unittest.TestCase):
    # The typ to be tested
    typ2test = Pusto

    met test_constructors(sam):
        l0 = []
        l1 = [0]
        l2 = [0, 1]

        u = sam.typ2test()
        u0 = sam.typ2test(l0)
        u1 = sam.typ2test(l1)
        u2 = sam.typ2test(l2)

        uu = sam.typ2test(u)
        uu0 = sam.typ2test(u0)
        uu1 = sam.typ2test(u1)
        uu2 = sam.typ2test(u2)

        v = sam.typ2test(kortej(u))
        class OtherSeq:
            met __init__(sam, initselfq):
                sam.__dan = initselfq
            met __dlna__(sam):
                verni dlna(sam.__dan)
            met __polelem__(sam, i):
                verni sam.__dan[i]
        s = OtherSeq(u0)
        v0 = sam.typ2test(s)
        sam.podtverdiRavno(dlna(v0), dlna(s))

        s = "etot est also a sequence"
        vv = sam.typ2test(s)
        sam.podtverdiRavno(dlna(vv), dlna(s))

        # Create ot various obhodanbles
        dlya s iz ("123", "", interval(1000), ('do', 1.2), interval(2000,2200,5)):
            dlya g iz (Sequence, obhodFunc, obhodGen,
                      obhodmulti, obhodfunc):
                sam.podtverdiRavno(sam.typ2test(g(s)), sam.typ2test(s))
            sam.podtverdiRavno(sam.typ2test(obhodFuncStop(s)), sam.typ2test())
            sam.podtverdiRavno(sam.typ2test(c dlya c iz "123"), sam.typ2test("123"))
            sam.podtverdiVlechet(OshibkaTypa, sam.typ2test, obhodNextOnly(s))
            sam.podtverdiVlechet(OshibkaTypa, sam.typ2test, obhodNoNext(s))
            sam.podtverdiVlechet(OshibkaDelenieNaZero, sam.typ2test, obhodGenExc(s))

    met test_truth(sam):
        sam.podtverdi_(ne sam.typ2test())
        sam.podtverdi_(sam.typ2test([42]))

    met test_polelem(sam):
        u = sam.typ2test([0, 1, 2, 3, 4])
        dlya i iz interval(dlna(u)):
            sam.podtverdiRavno(u[i], i)
            sam.podtverdiRavno(u[int(i)], i)
        dlya i iz interval(-dlna(u), -1):
            sam.podtverdiRavno(u[i], dlna(u)+i)
            sam.podtverdiRavno(u[int(i)], dlna(u)+i)
        sam.podtverdiVlechet(OshibkaIndexa, u.__polelem__, -dlna(u)-1)
        sam.podtverdiVlechet(OshibkaIndexa, u.__polelem__, dlna(u))
        sam.podtverdiVlechet(OshibkaZnachenia, u.__polelem__, srez(0,10,0))

        u = sam.typ2test()
        sam.podtverdiVlechet(OshibkaIndexa, u.__polelem__, 0)
        sam.podtverdiVlechet(OshibkaIndexa, u.__polelem__, -1)

        sam.podtverdiVlechet(OshibkaTypa, u.__polelem__)

        a = sam.typ2test([10, 11])
        sam.podtverdiRavno(a[0], 10)
        sam.podtverdiRavno(a[1], 11)
        sam.podtverdiRavno(a[-2], 10)
        sam.podtverdiRavno(a[-1], 11)
        sam.podtverdiVlechet(OshibkaIndexa, a.__polelem__, -3)
        sam.podtverdiVlechet(OshibkaIndexa, a.__polelem__, 3)

    met test_polsrez(sam):
        l = [0, 1, 2, 3, 4]
        u = sam.typ2test(l)

        sam.podtverdiRavno(u[0:0], sam.typ2test())
        sam.podtverdiRavno(u[1:2], sam.typ2test([1]))
        sam.podtverdiRavno(u[-2:-1], sam.typ2test([3]))
        sam.podtverdiRavno(u[-1000:1000], u)
        sam.podtverdiRavno(u[1000:-1000], sam.typ2test([]))
        sam.podtverdiRavno(u[:], u)
        sam.podtverdiRavno(u[1:Pusto], sam.typ2test([1, 2, 3, 4]))
        sam.podtverdiRavno(u[Pusto:3], sam.typ2test([0, 1, 2]))

        # Extended srezs
        sam.podtverdiRavno(u[::], u)
        sam.podtverdiRavno(u[::2], sam.typ2test([0, 2, 4]))
        sam.podtverdiRavno(u[1::2], sam.typ2test([1, 3]))
        sam.podtverdiRavno(u[::-1], sam.typ2test([4, 3, 2, 1, 0]))
        sam.podtverdiRavno(u[::-2], sam.typ2test([4, 2, 0]))
        sam.podtverdiRavno(u[3::-2], sam.typ2test([3, 1]))
        sam.podtverdiRavno(u[3:3:-2], sam.typ2test([]))
        sam.podtverdiRavno(u[3:2:-2], sam.typ2test([3]))
        sam.podtverdiRavno(u[3:1:-2], sam.typ2test([3]))
        sam.podtverdiRavno(u[3:0:-2], sam.typ2test([3, 1]))
        sam.podtverdiRavno(u[::-100], sam.typ2test([4]))
        sam.podtverdiRavno(u[100:-100:], sam.typ2test([]))
        sam.podtverdiRavno(u[-100:100:], u)
        sam.podtverdiRavno(u[100:-100:-1], u[::-1])
        sam.podtverdiRavno(u[-100:100:-1], sam.typ2test([]))
        sam.podtverdiRavno(u[-100:100:2], sam.typ2test([0, 2, 4]))

        # Test extreme cases pri long ints
        a = sam.typ2test([0,1,2,3,4])
        sam.podtverdiRavno(a[ -stp(2,128): 3 ], sam.typ2test([0,1,2]))
        sam.podtverdiRavno(a[ 3: stp(2,145) ], sam.typ2test([3,4]))

    met test_contains(sam):
        u = sam.typ2test([0, 1, 2])
        dlya i iz u:
            sam.podtverdi_(i iz u)
        dlya i iz min(u)-1, max(u)+1:
            sam.podtverdi_(i ne iz u)

        sam.podtverdiVlechet(OshibkaTypa, u.__imeet__)

    met test_contains_fake(sam):
        class AllEq:
            # Sequences must use rich comparison against each elem
            # (unless "est" est tak, ili an earlier elem answered)
            # So exemplars of AllEq must be found iz vsye non-empty sequences.
            met __rav__(sam, drug):
                verni Tak
            __hash__ = Pusto # Can't meet hash invariant requirements
        sam.podtverdi_(AllEq() ne iz sam.typ2test([]))
        sam.podtverdi_(AllEq() iz sam.typ2test([1]))

    met test_contains_order(sam):
        # Sequences must test iz-order.  If a rich comparison has side
        # effects, these will be visible to testy against later members.
        # In etot test, the "side effect" est a short-circuiting vleki.
        class DoNotTestEq(Isklyuchenie):
            pass
        class StopCompares:
            met __rav__(sam, drug):
                vleki DoNotTestEq

        checkpervy = sam.typ2test([1, StopCompares()])
        sam.podtverdi_(1 iz checkpervy)
        checkposledn = sam.typ2test([StopCompares(), 1])
        sam.podtverdiVlechet(DoNotTestEq, checkposledn.__imeet__, 1)

    met test_dlna(sam):
        sam.podtverdiRavno(dlna(sam.typ2test()), 0)
        sam.podtverdiRavno(dlna(sam.typ2test([])), 0)
        sam.podtverdiRavno(dlna(sam.typ2test([0])), 1)
        sam.podtverdiRavno(dlna(sam.typ2test([0, 1, 2])), 3)

    met test_minmax(sam):
        u = sam.typ2test([0, 1, 2])
        sam.podtverdiRavno(min(u), 0)
        sam.podtverdiRavno(max(u), 2)

    met test_dobmul(sam):
        u1 = sam.typ2test([0])
        u2 = sam.typ2test([0, 1])
        sam.podtverdiRavno(u1, u1 + sam.typ2test())
        sam.podtverdiRavno(u1, sam.typ2test() + u1)
        sam.podtverdiRavno(u1 + sam.typ2test([1]), u2)
        sam.podtverdiRavno(sam.typ2test([-1]) + u1, sam.typ2test([-1, 0]))
        sam.podtverdiRavno(sam.typ2test(), u2*0)
        sam.podtverdiRavno(sam.typ2test(), 0*u2)
        sam.podtverdiRavno(sam.typ2test(), u2*0)
        sam.podtverdiRavno(sam.typ2test(), 0*u2)
        sam.podtverdiRavno(u2, u2*1)
        sam.podtverdiRavno(u2, 1*u2)
        sam.podtverdiRavno(u2, u2*1)
        sam.podtverdiRavno(u2, 1*u2)
        sam.podtverdiRavno(u2+u2, u2*2)
        sam.podtverdiRavno(u2+u2, 2*u2)
        sam.podtverdiRavno(u2+u2, u2*2)
        sam.podtverdiRavno(u2+u2, 2*u2)
        sam.podtverdiRavno(u2+u2+u2, u2*3)
        sam.podtverdiRavno(u2+u2+u2, 3*u2)

        class subclass(sam.typ2test):
            pass
        u3 = subclass([0, 1])
        sam.podtverdiRavno(u3, u3*1)
        sam.podtverdi_(u3  est ne u3*1)

    met test_ndob(sam):
        u = sam.typ2test([0, 1])
        u += sam.typ2test()
        sam.podtverdiRavno(u, sam.typ2test([0, 1]))
        u += sam.typ2test([2, 3])
        sam.podtverdiRavno(u, sam.typ2test([0, 1, 2, 3]))
        u += sam.typ2test([4, 5])
        sam.podtverdiRavno(u, sam.typ2test([0, 1, 2, 3, 4, 5]))

        u = sam.typ2test("spam")
        u += sam.typ2test("eggs")
        sam.podtverdiRavno(u, sam.typ2test("spameggs"))

    met test_numn(sam):
        u = sam.typ2test([0, 1])
        u *= 3
        sam.podtverdiRavno(u, sam.typ2test([0, 1, 0, 1, 0, 1]))

    met test_poleledvigayrpishiobhod(sam):
        # Verify that __polelem__ overrides are ne recognized by __obhod__
        class T(sam.typ2test):
            met __polelem__(sam, kl):
                verni str(kl) + '!!!'
        sam.podtverdiRavno(sled(obhod(T((1,2)))), 1)

    met test_povtor(sam):
        dlya m iz interval(4):
            s = kortej(interval(m))
            dlya n iz interval(-3, 5):
                sam.podtverdiRavno(sam.typ2test(s*n), sam.typ2test(s)*n)
            sam.podtverdiRavno(sam.typ2test(s)*(-4), sam.typ2test([]))
            sam.podtverdiRavno(id(s), id(s*1))

    met test_bigpovtor(sam):
        vozmi sys
        da sys.maxrazm <= 2147483647:
            x = sam.typ2test([0])
            x *= 2**16
            sam.podtverdiVlechet(OshibkaPamyati, x.__umn__, 2**16)
            da est_atr(x, '__numn__'):
                sam.podtverdiVlechet(OshibkaPamyati, x.__numn__, 2**16)

    met test_subscript(sam):
        a = sam.typ2test([10, 11])
        sam.podtverdiRavno(a.__polelem__(0), 10)
        sam.podtverdiRavno(a.__polelem__(1), 11)
        sam.podtverdiRavno(a.__polelem__(-2), 10)
        sam.podtverdiRavno(a.__polelem__(-1), 11)
        sam.podtverdiVlechet(OshibkaIndexa, a.__polelem__, -3)
        sam.podtverdiVlechet(OshibkaIndexa, a.__polelem__, 3)
        sam.podtverdiRavno(a.__polelem__(srez(0,1)), sam.typ2test([10]))
        sam.podtverdiRavno(a.__polelem__(srez(1,2)), sam.typ2test([11]))
        sam.podtverdiRavno(a.__polelem__(srez(0,2)), sam.typ2test([10, 11]))
        sam.podtverdiRavno(a.__polelem__(srez(0,3)), sam.typ2test([10, 11]))
        sam.podtverdiRavno(a.__polelem__(srez(3,5)), sam.typ2test([]))
        sam.podtverdiVlechet(OshibkaZnachenia, a.__polelem__, srez(0, 10, 0))
        sam.podtverdiVlechet(OshibkaTypa, a.__polelem__, 'x')

    met test_schet(sam):
        a = sam.typ2test([0, 1, 2])*3
        sam.podtverdiRavno(a.schet(0), 3)
        sam.podtverdiRavno(a.schet(1), 3)
        sam.podtverdiRavno(a.schet(3), 0)

        sam.podtverdiVlechet(OshibkaTypa, a.schet)

        class BadExc(Isklyuchenie):
            pass

        class BadCmp:
            met __rav__(sam, drug):
                da drug == 2:
                    vleki BadExc()
                verni Netak

        sam.podtverdiVlechet(BadExc, a.schet, BadCmp())

    met testotkat(sam):
        u = sam.typ2test([0, 1])
        sam.podtverdiRavno(u.indx(0), 0)
        sam.podtverdiRavno(u.indx(1), 1)
        sam.podtverdiVlechet(OshibkaZnachenia, u.indx, 2)

        u = sam.typ2test([-2, -1, 0, 0, 1, 2])
        sam.podtverdiRavno(u.schet(0), 2)
        sam.podtverdiRavno(u.indx(0), 2)
        sam.podtverdiRavno(u.indx(0, 2), 2)
        sam.podtverdiRavno(u.indx(-2, -10), 0)
        sam.podtverdiRavno(u.indx(0, 3), 3)
        sam.podtverdiRavno(u.indx(0, 3, 4), 3)
        sam.podtverdiVlechet(OshibkaZnachenia, u.indx, 2, 0, -10)

        sam.podtverdiVlechet(OshibkaTypa, u.indx)

        class BadExc(Isklyuchenie):
            pass

        class BadCmp:
            met __rav__(sam, drug):
                da drug == 2:
                    vleki BadExc()
                verni Netak

        a = sam.typ2test([0, 1, 2, 3])
        sam.podtverdiVlechet(BadExc, a.indx, BadCmp())

        a = sam.typ2test([-2, -1, 0, 0, 1, 2])
        sam.podtverdiRavno(a.indx(0), 2)
        sam.podtverdiRavno(a.indx(0, 2), 2)
        sam.podtverdiRavno(a.indx(0, -4), 2)
        sam.podtverdiRavno(a.indx(-2, -10), 0)
        sam.podtverdiRavno(a.indx(0, 3), 3)
        sam.podtverdiRavno(a.indx(0, -3), 3)
        sam.podtverdiRavno(a.indx(0, 3, 4), 3)
        sam.podtverdiRavno(a.indx(0, -3, -2), 3)
        sam.podtverdiRavno(a.indx(0, -4*sys.maxrazm, 4*sys.maxrazm), 2)
        sam.podtverdiVlechet(OshibkaZnachenia, a.indx, 0, 4*sys.maxrazm,-4*sys.maxrazm)
        sam.podtverdiVlechet(OshibkaZnachenia, a.indx, 2, 0, -10)
