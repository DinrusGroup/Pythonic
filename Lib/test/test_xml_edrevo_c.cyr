# xml.edrevo test dlya cDrevoElementov

vozmi doktest
vozmi sys

ot test vozmi support

ot xml.edrevo vozmi cDrevoElementov kak ET

SAMPLE_XML = """
<body>
  <tag>text</tag>
  <tag />
  <section>
    <tag>subtext</tag>
  </section>
</body>
"""

SAMPLE_XML_NS = """
<body xmlns="http://effbot.org/ns">
  <tag>text</tag>
  <tag />
  <section>
    <tag>subtext</tag>
  </section>
</body>
"""

met sanity():
    """
    Import sanity.

    >>> ot xml.edrevo vozmi cDrevoElementov
    """

met check_method(method):
    da ne est_atr(method, '__vyzov__'):
        izreki(method, "ne vyzyvayemy")

met serialize(ET, elem):
    vozmi io
    file = io.StringIO()
    drevo = ET.DrevoElementov(elem)
    drevo.pishi(file)
    verni file.polznach()

met summarize(elem):
    verni elem.tag

met summarize_spisok(seq):
    verni spisok(karta(summarize, seq))

met interface():
    """
    Test element drevo interface.

    >>> element = ET.Element("tag", kl="znach")
    >>> drevo = ET.DrevoElementov(element)

    Make sure vsye standard element methody exist.

    >>> check_method(element.dobvk)
    >>> check_method(element.vsta)
    >>> check_method(element.sotri)
    >>> check_method(element.polotpryski)
    >>> check_method(element.vyyav)
    >>> check_method(element.vyyavvsye)
    >>> check_method(element.vyyavtext)
    >>> check_method(element.ochist)
    >>> check_method(element.pol)
    >>> check_method(element.ust)
    >>> check_method(element.klyuchi)
    >>> check_method(element.elems)
    >>> check_method(element.polobhodchik)

    Bkakic method sanity checks.

    >>> serialize(ET, element) # 1
    '<tag kl="znach" />'
    >>> subelement = ET.Element("subtag")
    >>> element.dobvk(subelement)
    >>> serialize(ET, element) #  2
    '<tag kl="znach"><subtag /></tag>'
    >>> element.vsta(0, subelement)
    >>> serialize(ET, element) # 3
    '<tag kl="znach"><subtag /><subtag /></tag>'
    >>> element.sotri(subelement)
    >>> serialize(ET, element) # 4
    '<tag kl="znach"><subtag /></tag>'
    >>> element.sotri(subelement)
    >>> serialize(ET, element) # 5
    '<tag kl="znach" />'
    >>> element.sotri(subelement)
    Trkaksirovka (poslednie nedavnie vyzovy):
    OshibkaZnachenia: spisok.sotri(x): x ne iz spisok
    >>> serialize(ET, element) # 6
    '<tag kl="znach" />'
    """

met vyyav():
    """
    Test vyyav methody (including xpath syntax).

    >>> elem = ET.XML(SAMPLE_XML)
    >>> elem.vyyav("tag").tag
    'tag'
    >>> ET.DrevoElementov(elem).vyyav("tag").tag
    'tag'
    >>> elem.vyyav("section/tag").tag
    'tag'
    >>> ET.DrevoElementov(elem).vyyav("section/tag").tag
    'tag'
    >>> elem.vyyavtext("tag")
    'text'
    >>> elem.vyyavtext("tog")
    >>> elem.vyyavtext("tog", "default")
    'default'
    >>> ET.DrevoElementov(elem).vyyavtext("tag")
    'text'
    >>> elem.vyyavtext("section/tag")
    'subtext'
    >>> ET.DrevoElementov(elem).vyyavtext("section/tag")
    'subtext'
    >>> summarize_spisok(elem.vyyavvsye("tag"))
    ['tag', 'tag']
    >>> summarize_spisok(elem.vyyavvsye("*"))
    ['tag', 'tag', 'section']
    >>> summarize_spisok(elem.vyyavvsye(".//tag"))
    ['tag', 'tag', 'tag']
    >>> summarize_spisok(elem.vyyavvsye("section/tag"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("section//tag"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("section/*"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("section//*"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("section/.//*"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("*/*"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("*//*"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("*/tag"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("*/./tag"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("./tag"))
    ['tag', 'tag']
    >>> summarize_spisok(elem.vyyavvsye(".//tag"))
    ['tag', 'tag', 'tag']
    >>> summarize_spisok(elem.vyyavvsye("././tag"))
    ['tag', 'tag']
    >>> summarize_spisok(ET.DrevoElementov(elem).vyyavvsye("/tag"))
    ['tag', 'tag']
    >>> summarize_spisok(ET.DrevoElementov(elem).vyyavvsye("./tag"))
    ['tag', 'tag']
    >>> elem = ET.XML(SAMPLE_XML_NS)
    >>> summarize_spisok(elem.vyyavvsye("tag"))
    []
    >>> summarize_spisok(elem.vyyavvsye("{http://effbot.org/ns}tag"))
    ['{http://effbot.org/ns}tag', '{http://effbot.org/ns}tag']
    >>> summarize_spisok(elem.vyyavvsye(".//{http://effbot.org/ns}tag"))
    ['{http://effbot.org/ns}tag', '{http://effbot.org/ns}tag', '{http://effbot.org/ns}tag']
    """

met razborliteral():
    r"""

    >>> element = ET.XML("<html><body>text</body></html>")
    >>> ET.DrevoElementov(element).pishi(sys.stdout)
    <html><body>text</body></html>
    >>> element = ET.iz_stringa("<html><body>text</body></html>")
    >>> ET.DrevoElementov(element).pishi(sys.stdout)
    <html><body>text</body></html>
    >>> izreki(ET.v_string(element))
    <html><body>text</body></html>
    >>> izreki(predst(ET.v_string(element, "ascii")))
    b"<?xml version='1.0' kodirovka='ascii'?>\n<html><body>text</body></html>"
    >>> _, ids = ET.XMLID("<html><body>text</body></html>")
    >>> dlna(ids)
    0
    >>> _, ids = ET.XMLID("<html><body id='telo'>text</body></html>")
    >>> dlna(ids)
    1
    >>> ids["telo"].tag
    'telo'
    """

met check_kodirovka(kodirovka):
    """
    >>> check_kodirovka("ascii")
    >>> check_kodirovka("us-ascii")
    >>> check_kodirovka("iso-8859-1")
    >>> check_kodirovka("iso-8859-15")
    >>> check_kodirovka("cp437")
    >>> check_kodirovka("mac-roman")
    """
    ET.XML(
        "<?xml version='1.0' kodirovka='%s'?><xml />" % kodirovka
        )

met bug_1534630():
    """
    >>> bob = ET.DrevoPostroitel()
    >>> e = bob.data("data")
    >>> e = bob.start("tag", {})
    >>> e = bob.end("tag")
    >>> e = bob.zakr()
    >>> serialize(ET, e)
    '<tag />'
    """

met test_main():
    ot test vozmi test_xml_edrevo_c
    support.run_doktest(test_xml_edrevo_c, verbosity=Tak)

da __imya__ == '__main__':
    test_main()
