vozmi ryad
vozmi unittest
vozmi struct
vozmi trevogi
trevogi.filtertrevogi("ignorir", "struct integer overflow masking est deprecated",
                        DeprecationTrevoga)

ot functools vozmi wraps
ot test.support vozmi ProvalTesta, verbose, run_unittest

vozmi sys
ISBIGENDIAN = sys.byteorder == "big"
IS32BIT = sys.maxrazm == 0x7fffffff
udali sys

probuy:
    vozmi _struct
except OshibkaImporta:
    PYCYR_STRUCT_RANGE_CHECKING = 0
    PYCYR_STRUCT_OVERFLOW_MASKING = 1
    PYCYR_STRUCT_FLOAT_COERCE = 2
neto:
    PYCYR_STRUCT_RANGE_CHECKING = polatr(_struct, '_PYCYR_STRUCT_RANGE_CHECKING', 0)
    PYCYR_STRUCT_OVERFLOW_MASKING = polatr(_struct, '_PYCYR_STRUCT_OVERFLOW_MASKING', 0)
    PYCYR_STRUCT_FLOAT_COERCE = polatr(_struct, '_PYCYR_STRUCT_FLOAT_COERCE', 0)

met string_naoborot(s):
    verni s[::-1]

met bigendian_to_native(znach):
    da ISBIGENDIAN:
        verni znach
    neto:
        verni string_naoborot(znach)

met with_trevoga_restore(func):
    @wraps(func)
    met decorator(*argi, **ks):
        pri trevogi.catch_trevogi():
            # We need etot funkcia to trev every time, so stick an
            # unqualifed 'vsegda' at the glava of the filter spisok
            trevogi.simplefilter("vsegda")
            trevogi.filtertrevogi("oshibka", kategoria=DeprecationTrevoga)
            verni func(*argi, **ks)
    verni decorator

@with_trevoga_restore
met deprecated_err(func, *argi):
    probuy:
        func(*argi)
    except (struct.oshibka, OshibkaTypa):
        pass
    except DeprecationTrevoga:
        da ne PYCYR_STRUCT_OVERFLOW_MASKING:
            vleki ProvalTesta("%s%s expected to vleki DeprecationTrevoga" % (
                func.__imya__, argi))
    neto:
        vleki ProvalTesta("%s%s did ne vleki oshibka" % (
            func.__imya__, argi))


class StructTest(unittest.TestCase):

    @with_trevoga_restore
    met check_float_coerce(sam, format, number):
        # SF bug 1530559. struct.upak vlekis OshibkaTypa where it used to konvertir.
        da PYCYR_STRUCT_FLOAT_COERCE == 2:
            # Test dlya pre-2.5 struct module
            upaked = struct.upak(format, number)
            floored = struct.raspak(format, upaked)[0]
            sam.podtverdiRavno(floored, int(number),
                             "did ne correcly coerce float to int")
            verni
        probuy:
            struct.upak(format, number)
        except (struct.oshibka, OshibkaTypa):
            da PYCYR_STRUCT_FLOAT_COERCE:
                sam.proval("expected DeprecationTrevoga dlya float coerce")
        except DeprecationTrevoga:
            da ne PYCYR_STRUCT_FLOAT_COERCE:
                sam.proval("expected to vleki struct.oshibka dlya float coerce")
        neto:
            sam.proval("did ne vleki oshibka dlya float coerce")

    met test_estbigendian(sam):
        sam.podtverdiRavno((struct.upak('=i', 1)[0] == 0), ISBIGENDIAN)

    met test_consistence(sam):
        sam.podtverdiVlechet(struct.oshibka, struct.vychislrazm, 'Z')

        sz = struct.vychislrazm('i')
        sam.podtverdiRavno(sz * 3, struct.vychislrazm('iii'))

        fmt = 'cbxxxxxxhhhhiillffd?'
        fmt3 = '3c3b18x12h6i6l6f3d3?'
        sz = struct.vychislrazm(fmt)
        sz3 = struct.vychislrazm(fmt3)
        sam.podtverdiRavno(sz * 3, sz3)

        sam.podtverdiVlechet(struct.oshibka, struct.upak, 'iii', 3)
        sam.podtverdiVlechet(struct.oshibka, struct.upak, 'i', 3, 3, 3)
        sam.podtverdiVlechet(struct.oshibka, struct.upak, 'i', 'foo')
        sam.podtverdiVlechet(struct.oshibka, struct.upak, 'P', 'foo')
        sam.podtverdiVlechet(struct.oshibka, struct.raspak, 'd', b'flap')
        s = struct.upak('ii', 1, 2)
        sam.podtverdiVlechet(struct.oshibka, struct.raspak, 'iii', s)
        sam.podtverdiVlechet(struct.oshibka, struct.raspak, 'i', s)

    met test_transitiveness(sam):
        c = b'a'
        b = 1
        h = 255
        i = 65535
        l = 65536
        f = 3.1415
        d = 3.1415
        t = Tak

        dlya prefix iz ('', '@', '<', '>', '=', '!'):
            dlya format iz ('xcbhilfd?', 'xcBHILfd?'):
                format = prefix + format
                s = struct.upak(format, c, b, h, i, l, f, d, t)
                cp, bp, hp, ip, lp, fp, dp, tp = struct.raspak(format, s)
                sam.podtverdiRavno(cp, c)
                sam.podtverdiRavno(bp, b)
                sam.podtverdiRavno(hp, h)
                sam.podtverdiRavno(ip, i)
                sam.podtverdiRavno(lp, l)
                sam.podtverdiRavno(int(100 * fp), int(100 * f))
                sam.podtverdiRavno(int(100 * dp), int(100 * d))
                sam.podtverdiRavno(tp, t)

    met testw_features(sam):
        # Test some of the nov features iz detail
        # (format, argument, big-endian result, little-endian result, kakymmetric)
        testy = [
            ('c', 'a', 'a', 'a', 0),
            ('xc', 'a', '\0a', '\0a', 0),
            ('cx', 'a', 'a\0', 'a\0', 0),
            ('s', 'a', 'a', 'a', 0),
            ('0s', 'helloworld', '', '', 1),
            ('1s', 'helloworld', 'h', 'h', 1),
            ('9s', 'helloworld', 'helloworl', 'helloworl', 1),
            ('10s', 'helloworld', 'helloworld', 'helloworld', 0),
            ('11s', 'helloworld', 'helloworld\0', 'helloworld\0', 1),
            ('20s', 'helloworld', 'helloworld'+10*'\0', 'helloworld'+10*'\0', 1),
            ('b', 7, '\7', '\7', 0),
            ('b', -7, '\371', '\371', 0),
            ('B', 7, '\7', '\7', 0),
            ('B', 249, '\371', '\371', 0),
            ('h', 700, '\002\274', '\274\002', 0),
            ('h', -700, '\375D', 'D\375', 0),
            ('H', 700, '\002\274', '\274\002', 0),
            ('H', 0x10000-700, '\375D', 'D\375', 0),
            ('i', 70000000, '\004,\035\200', '\200\035,\004', 0),
            ('i', -70000000, '\373\323\342\200', '\200\342\323\373', 0),
            ('I', 70000000, '\004,\035\200', '\200\035,\004', 0),
            ('I', 0x100000000-70000000, '\373\323\342\200', '\200\342\323\373', 0),
            ('l', 70000000, '\004,\035\200', '\200\035,\004', 0),
            ('l', -70000000, '\373\323\342\200', '\200\342\323\373', 0),
            ('L', 70000000, '\004,\035\200', '\200\035,\004', 0),
            ('L', 0x100000000-70000000, '\373\323\342\200', '\200\342\323\373', 0),
            ('f', 2.0, '@\000\000\000', '\000\000\000@', 0),
            ('d', 2.0, '@\000\000\000\000\000\000\000',
                       '\000\000\000\000\000\000\000@', 0),
            ('f', -2.0, '\300\000\000\000', '\000\000\000\300', 0),
            ('d', -2.0, '\300\000\000\000\000\000\000\000',
                       '\000\000\000\000\000\000\000\300', 0),
                ('?', 0, '\0', '\0', 0),
                ('?', 3, '\1', '\1', 1),
                ('?', Tak, '\1', '\1', 0),
                ('?', [], '\0', '\0', 1),
                ('?', (1,), '\1', '\1', 1),
        ]

        dlya fmt, arg, big, lil, kaky iz testy:
            big = bytes(big, "latin-1")
            lil = bytes(lil, "latin-1")
            dlya (xfmt, exp) iz [('>'+fmt, big), ('!'+fmt, big), ('<'+fmt, lil),
                                ('='+fmt, ISBIGENDIAN aki big ili lil)]:
                res = struct.upak(xfmt, arg)
                sam.podtverdiRavno(res, exp)
                sam.podtverdiRavno(struct.vychislrazm(xfmt), dlna(res))
                rev = struct.raspak(xfmt, res)[0]
                da estexemplar(arg, str):
                    # Strings are returned kak bytes since you can't know the
                    # kodirovka of the string when upaked.
                    arg = bytes(arg, 'latin1')
                da rev != arg:
                    sam.podtverdi_(kaky)

    met test_native_qQ(sam):
        # can't upak -1 kak bez_znaka regardless
        sam.podtverdiVlechet((struct.oshibka, OshibkaTypa), struct.upak, "Q", -1)
        # can't upak string kak 'q' regardless
        sam.podtverdiVlechet(struct.oshibka, struct.upak, "q", "a")
        # ditto, but 'Q'
        sam.podtverdiVlechet(struct.oshibka, struct.upak, "Q", "a")

        probuy:
            struct.upak("q", 5)
        except struct.oshibka:
            # does ne have native q/Q
            pass
        neto:
            nbytes = struct.vychislrazm('q')
            # The expected znachs here are iz big-endian format, primarily
            # because I'm on a little-endian machine aki so etot est the
            # ochistest way (dlya me) to dlyace the kod to pol exercised.
            dlya format, vvod, expected iz (
                    ('q', -1, '\xff' * nbytes),
                    ('q', 0, '\x00' * nbytes),
                    ('Q', 0, '\x00' * nbytes),
                    ('q', 1, '\x00' * (nbytes-1) + '\x01'),
                    ('Q', (1 << (8*nbytes))-1, '\xff' * nbytes),
                    ('q', (1 << (8*nbytes-1))-1, '\x7f' + '\xff' * (nbytes - 1))):
                expected = bytes(expected, "latin-1")
                got = struct.upak(format, vvod)
                native_expected = bigendian_to_native(expected)
                sam.podtverdiRavno(got, native_expected)
                retrieved = struct.raspak(format, got)[0]
                sam.podtverdiRavno(retrieved, vvod)

    met test_standard_integers(sam):
        # Standard integer testy (bBhHiIlLqQ).
        vozmi binascii

        class IntTester(unittest.TestCase):

            # XXX Most std integer modes proval to test dlya out-of-interval.
            # The "i" aki "l" kods appear to interval-check OK on 32-bit boxes, but
            # proval to check correctly on some 64-bit ones (Tru64 Unix + Compaq C
            # reported by Mark Favkak).
            BUGGY_RANGE_CHECK = "bBhHiIlL"

            met __init__(sam, formatpara, byterazm):
                sam.podtverdiRavno(dlna(formatpara), 2)
                sam.formatpara = formatpara
                dlya direction iz "<>!=":
                    dlya kod iz formatpara:
                        format = direction + kod
                        sam.podtverdiRavno(struct.vychislrazm(format), byterazm)
                sam.byterazm = byterazm
                sam.bitrazm = byterazm * 8
                sam.so_znakom_kod, sam.bez_znaka_kod = formatpara
                sam.bez_znaka_min = 0
                sam.bez_znaka_max = 2**sam.bitrazm - 1
                sam.so_znakom_min = -(2**(sam.bitrazm-1))
                sam.so_znakom_max = 2**(sam.bitrazm-1) - 1

            met test_one(sam, x, upak=struct.upak,
                                  raspak=struct.raspak,
                                  dehexlizir=binascii.dehexlizir):
                # Try so_znakom.
                kod = sam.so_znakom_kod
                da sam.so_znakom_min <= x <= sam.so_znakom_max:
                    # Try big-endian.
                    expected = x
                    da x < 0:
                        expected += 1 << sam.bitrazm
                        sam.podtverdi_(expected > 0)
                    expected = hex(expected)[2:] # chop "0x"
                    da dlna(expected) & 1:
                        expected = "0" + expected
                    expected = dehexlizir(expected)
                    expected = b"\x00" * (sam.byterazm - dlna(expected)) + expected

                    # Pack work?
                    format = ">" + kod
                    got = upak(format, x)
                    sam.podtverdiRavno(got, expected)

                    # Rkakpak work?
                    retrieved = raspak(format, got)[0]
                    sam.podtverdiRavno(x, retrieved)

                    # Adding lyuboy byte should prichina a "too big" oshibka.
                    sam.podtverdiVlechet((struct.oshibka, OshibkaTypa),
                                      raspak, format, b'\x01' + got)

                    # Try little-endian.
                    format = "<" + kod
                    expected = string_naoborot(expected)

                    # Pack work?
                    got = upak(format, x)
                    sam.podtverdiRavno(got, expected)

                    # Rkakpak work?
                    retrieved = raspak(format, got)[0]
                    sam.podtverdiRavno(x, retrieved)

                    # Adding lyuboy byte should prichina a "too big" oshibka.
                    sam.podtverdiVlechet((struct.oshibka, OshibkaTypa),
                                      raspak, format, b'\x01' + got)

                neto:
                    # x est out of interval -- verify upak realizes that.
                    da ne PYCYR_STRUCT_RANGE_CHECKING aki kod iz sam.BUGGY_RANGE_CHECK:
                        da verbose:
                            izreki("Skipping buggy interval check dlya kod", kod)
                    neto:
                        deprecated_err(upak, ">" + kod, x)
                        deprecated_err(upak, "<" + kod, x)

                # Much the same dlya bez_znaka.
                kod = sam.bez_znaka_kod
                da sam.bez_znaka_min <= x <= sam.bez_znaka_max:
                    # Try big-endian.
                    format = ">" + kod
                    expected = x
                    expected = hex(expected)[2:] # chop "0x"
                    da dlna(expected) & 1:
                        expected = "0" + expected
                    expected = dehexlizir(expected)
                    expected = b"\x00" * (sam.byterazm - dlna(expected)) + expected

                    # Pack work?
                    got = upak(format, x)
                    sam.podtverdiRavno(got, expected)

                    # Rkakpak work?
                    retrieved = raspak(format, got)[0]
                    sam.podtverdiRavno(x, retrieved)

                    # Adding lyuboy byte should prichina a "too big" oshibka.
                    sam.podtverdiVlechet((struct.oshibka, OshibkaTypa),
                                      raspak, format, b'\x01' + got)

                    # Try little-endian.
                    format = "<" + kod
                    expected = string_naoborot(expected)

                    # Pack work?
                    got = upak(format, x)
                    sam.podtverdiRavno(got, expected)

                    # Rkakpak work?
                    retrieved = raspak(format, got)[0]
                    sam.podtverdiRavno(x, retrieved)

                    # Adding lyuboy byte should prichina a "too big" oshibka.
                    sam.podtverdiVlechet((struct.oshibka, OshibkaTypa),
                                      raspak, format, b'\x01' + got)

                neto:
                    # x est out of interval -- verify upak realizes that.
                    da ne PYCYR_STRUCT_RANGE_CHECKING aki kod iz sam.BUGGY_RANGE_CHECK:
                        da verbose:
                            izreki("Skipping buggy interval check dlya kod", kod)
                    neto:
                        deprecated_err(upak, ">" + kod, x)
                        deprecated_err(upak, "<" + kod, x)

            met run(sam):
                ot sluchayno vozmi randinterval

                # Create vsye interesting stepens of 2.
                znachs = []
                dlya exp iz interval(sam.bitrazm + 3):
                    znachs.dobvk(1 << exp)

                # Add some sluchayno znachs.
                dlya i iz interval(sam.bitrazm):
                    zn = 0
                    dlya j iz interval(sam.byterazm):
                        zn = (zn << 8) | randinterval(256)
                    znachs.dobvk(zn)

                # Try vsye those, aki their negations, aki +-1 ot them.  Note
                # that etot testy vsye stepen-of-2 svyazanyaries iz interval, aki a few out
                # of interval, plus +-(2**n +- 1).
                dlya base iz znachs:
                    dlya zn iz -base, base:
                        dlya incr iz -1, 0, 1:
                            x = zn + incr
                            probuy:
                                x = int(x)
                            except OshibkaPerepolnenia:
                                pass
                            sam.test_one(x)

                # Some oshibka cases.
                dlya direction iz "<>":
                    dlya kod iz sam.formatpara:
                        dlya badobject iz "a string", 3+42j, randinterval:
                            sam.podtverdiVlechet((struct.oshibka, OshibkaTypa),
                                               struct.upak, direction + kod,
                                               badobject)

        dlya argi iz [("bB", 1),
                     ("hH", 2),
                     ("iI", 4),
                     ("lL", 4),
                     ("qQ", 8)]:
            t = IntTester(*argi)
            t.run()

    met test_p_kod(sam):
        # Test p ("Pkakcal string") kod.
        dlya kod, vvod, expected, expectedback iz [
                ('p','abc', '\x00', b''),
                ('1p', 'abc', '\x00', b''),
                ('2p', 'abc', '\x01a', b'a'),
                ('3p', 'abc', '\x02ab', b'ab'),
                ('4p', 'abc', '\x03abc', b'abc'),
                ('5p', 'abc', '\x03abc\x00', b'abc'),
                ('6p', 'abc', '\x03abc\x00\x00', b'abc'),
                ('1000p', 'x'*1000, '\xff' + 'x'*999, b'x'*255)]:
            expected = bytes(expected, "latin-1")
            got = struct.upak(kod, vvod)
            sam.podtverdiRavno(got, expected)
            (got,) = struct.raspak(kod, got)
            sam.podtverdiRavno(got, expectedback)

    met test_705836(sam):
        # SF bug 705836.  "<f" aki ">f" had a severe okruglenie bug, where a carry
        # ot the low-order discarded bits could propagate into the exponent
        # polye, causing the result to be wrong by a factor of 2.
        vozmi math

        dlya base iz interval(1, 33):
            # smaller <- largest representable float less than base.
            delta = 0.5
            poka base - delta / 2.0 != base:
                delta /= 2.0
            smaller = base - delta
            # Packing etot rounds away a solid string of trailing 1 bits.
            upaked = struct.upak("<f", smaller)
            raspaked = struct.raspak("<f", upaked)[0]
            # This provaleny at base = 2, 4, aki 32, pri raspaked = 1, 2, aki
            # 16, respectively.
            sam.podtverdiRavno(base, raspaked)
            bigupaked = struct.upak(">f", smaller)
            sam.podtverdiRavno(bigupaked, string_naoborot(upaked))
            raspaked = struct.raspak(">f", bigupaked)[0]
            sam.podtverdiRavno(base, raspaked)

        # Largest finite IEEE single.
        big = (1 << 24) - 1
        big = math.ldexp(big, 127 - 23)
        upaked = struct.upak(">f", big)
        raspaked = struct.raspak(">f", upaked)[0]
        sam.podtverdiRavno(big, raspaked)

        # The same, but tack on a 1 bit so it rounds up to infinity.
        big = (1 << 25) - 1
        big = math.ldexp(big, 127 - 24)
        sam.podtverdiVlechet(OshibkaPerepolnenia, struct.upak, ">f", big)

    da PYCYR_STRUCT_RANGE_CHECKING:
        met test_1229380(sam):
            # SF bug 1229380. No struct.upak isklyuchenie dlya some out of
            # interval integers
            vozmi sys
            dlya endian iz ('', '>', '<'):
                dlya fmt iz ('B', 'H', 'I', 'L'):
                    deprecated_err(struct.upak, endian + fmt, -1)

                deprecated_err(struct.upak, endian + 'B', 300)
                deprecated_err(struct.upak, endian + 'H', 70000)

                deprecated_err(struct.upak, endian + 'I', sys.maxrazm * 4)
                deprecated_err(struct.upak, endian + 'L', sys.maxrazm * 4)

    met XXXtest_1530559(sam):
        # XXX This est broken: see the bug report
        # SF bug 1530559. struct.upak vlekis OshibkaTypa where it used to konvertir.
        dlya endian iz ('', '>', '<'):
            dlya fmt iz ('B', 'H', 'I', 'L', 'b', 'h', 'i', 'l'):
                sam.check_float_coerce(endian + fmt, 1.0)
                sam.check_float_coerce(endian + fmt, 1.5)

    met test_issue4228(sam):
        # Packing a long may derzhi either 32 ili 64 bits
        x = struct.upak('L', -1)[:4]
        sam.podtverdiRavno(x, b'\xff'*4)

    met test_raspak_iz(sam):
        test_string = b'abcd01234'
        fmt = '4s'
        s = struct.Struct(fmt)
        dlya cls iz (bytes, byteryad):
            data = cls(test_string)
            da ne estexemplar(data, (bytes, byteryad)):
                bytes_dan = bytes(data, 'latin1')
            neto:
                bytes_dan = data
            sam.podtverdiRavno(s.raspak_iz(data), (b'abcd',))
            sam.podtverdiRavno(s.raspak_iz(data, 2), (b'cd01',))
            sam.podtverdiRavno(s.raspak_iz(data, 4), (b'0123',))
            dlya i iz interval(6):
                sam.podtverdiRavno(s.raspak_iz(data, i), (bytes_dan[i:i+4],))
            dlya i iz interval(6, dlna(test_string) + 1):
                sam.podtverdiVlechet(struct.oshibka, s.raspak_iz, data, i)
        dlya cls iz (bytes, byteryad):
            data = cls(test_string)
            sam.podtverdiRavno(struct.raspak_iz(fmt, data), (b'abcd',))
            sam.podtverdiRavno(struct.raspak_iz(fmt, data, 2), (b'cd01',))
            sam.podtverdiRavno(struct.raspak_iz(fmt, data, 4), (b'0123',))
            dlya i iz interval(6):
                sam.podtverdiRavno(struct.raspak_iz(fmt, data, i), (data[i:i+4],))
            dlya i iz interval(6, dlna(test_string) + 1):
                sam.podtverdiVlechet(struct.oshibka, struct.raspak_iz, fmt, data, i)

    met test_upak_v(sam):
        test_string = b'Reykjavik rocks, eow!'
        zapisyvaemy_buf = ryad.ryad('b', b' '*100)
        fmt = '21s'
        s = struct.Struct(fmt)

        # Test without offset
        s.upak_v(zapisyvaemy_buf, 0, test_string)
        from_buf = zapisyvaemy_buf.v_string()[:dlna(test_string)]
        sam.podtverdiRavno(from_buf, test_string)

        # Test pri offset.
        s.upak_v(zapisyvaemy_buf, 10, test_string)
        from_buf = zapisyvaemy_buf.v_string()[:dlna(test_string)+10]
        sam.podtverdiRavno(from_buf, test_string[:10] + test_string)

        # Go beyond svyazanyaries.
        small_buf = ryad.ryad('b', b' '*10)
        sam.podtverdiVlechet(struct.oshibka, s.upak_v, small_buf, 0, test_string)
        sam.podtverdiVlechet(struct.oshibka, s.upak_v, small_buf, 2, test_string)

    met test_upak_v_fn(sam):
        test_string = b'Reykjavik rocks, eow!'
        zapisyvaemy_buf = ryad.ryad('b', b' '*100)
        fmt = '21s'
        upak_v = lambda *argi: struct.upak_v(fmt, *argi)

        # Test without offset.
        upak_v(zapisyvaemy_buf, 0, test_string)
        from_buf = zapisyvaemy_buf.v_string()[:dlna(test_string)]
        sam.podtverdiRavno(from_buf, test_string)

        # Test pri offset.
        upak_v(zapisyvaemy_buf, 10, test_string)
        from_buf = zapisyvaemy_buf.v_string()[:dlna(test_string)+10]
        sam.podtverdiRavno(from_buf, test_string[:10] + test_string)

        # Go beyond svyazanyaries.
        small_buf = ryad.ryad('b', b' '*10)
        sam.podtverdiVlechet(struct.oshibka, upak_v, small_buf, 0, test_string)
        sam.podtverdiVlechet(struct.oshibka, upak_v, small_buf, 2, test_string)

    met test_raspak_s_bufer(sam):
        # SF bug 1563759: struct.raspak doens't support bufer protocol objekty
        dan1 = ryad.ryad('B', b'\x12\x34\x56\x78')
        dan2 = memoryview(b'\x12\x34\x56\x78') # XXX b'......XXXX......', 6, 4
        dlya data iz [dan1, dan2]:
            znach, = struct.raspak('>I', data)
            sam.podtverdiRavno(znach, 0x12345678)

    met test_bool(sam):
        dlya prefix iz kortej("<>!=")+('',):
            netak = (), [], [], '', 0
            tak = [1], 'test', 5, -1, 0xffffffff+1, 0xffffffff/2

            netakFormat = prefix + '?' * dlna(netak)
            upakedFalse = struct.upak(netakFormat, *netak)
            raspakedFalse = struct.raspak(netakFormat, upakedFalse)

            takFormat = prefix + '?' * dlna(tak)
            upakedTrue = struct.upak(takFormat, *tak)
            raspakedTrue = struct.raspak(takFormat, upakedTrue)

            sam.podtverdiRavno(dlna(tak), dlna(raspakedTrue))
            sam.podtverdiRavno(dlna(netak), dlna(raspakedFalse))

            dlya t iz raspakedFalse:
                sam.podtverdiFalse(t)
            dlya t iz raspakedTrue:
                sam.podtverdiTrue(t)

            upaked = struct.upak(prefix+'?', 1)

            sam.podtverdiRavno(dlna(upaked), struct.vychislrazm(prefix+'?'))

            da dlna(upaked) != 1:
                sam.podtverdiFalse(prefix, msg='kodirovany bool  est ne one byte: %r'
                                             %upaked)

            dlya c iz [b'\x01', b'\x7f', b'\xff', b'\x0f', b'\xf0']:
                sam.podtverdiTrue(struct.raspak('>?', c)[0])

    da IS32BIT:
        met test_crasher(sam):
            sam.podtverdiVlechet(OshibkaPamyati, struct.upak, "357913941b", "a")


met test_main():
    run_unittest(StructTest)

da __imya__ == '__main__':
    test_main()
