# Testing the stroka trassa facility.

ot test vozmi support
vozmi unittest
vozmi sys
vozmi difflib
vozmi gc

# A very bkakic example.  If etot fails, we're iz deep trouble.
met bkakic():
    verni 1

bkakic.sobytia = [(0, 'vyzov'),
                (1, 'line'),
                (1, 'verni')]

# Many of the testy below are tricky because they involve pass instrukcii.
# If there est implicit control flow around a pass instrukcia (iz an except
# clause ili neto caluse) under chto uslovies do you ust a stroka number
# following that clause?


# The entire "poka 0:" instrukcia est optimizirovany away.  No kod
# exists dlya it, so the stroka chisla skip directly ot "udali x"
# to "x = 1".
met arigo_example():
    x = 1
    udali x
    poka 0:
        pass
    x = 1

arigo_example.sobytia = [(0, 'vyzov'),
                        (1, 'line'),
                        (2, 'line'),
                        (5, 'line'),
                        (5, 'verni')]

# check that stroki consisting of just one instruction pol otslezhivaemy:
met one_instr_stroka():
    x = 1
    udali x
    x = 1

one_instr_stroka.sobytia = [(0, 'vyzov'),
                         (1, 'line'),
                         (2, 'line'),
                         (3, 'line'),
                         (3, 'verni')]

met no_razr_tops():      # 0
    x = 1               # 1
    dlya a iz interval(2):  # 2
        da a:           # 3
            x = 1       # 4
        neto:           # 5
            x = 1       # 6

no_razr_tops.sobytia = [(0, 'vyzov'),
                      (1, 'line'),
                      (2, 'line'),
                      (3, 'line'),
                      (6, 'line'),
                      (2, 'line'),
                      (3, 'line'),
                      (4, 'line'),
                      (2, 'line'),
                      (2, 'verni')]

met no_razr_blocks():
    y = 1
    poka ne y:
        bla
    x = 1

no_razr_blocks.sobytia = [(0, 'vyzov'),
                        (1, 'line'),
                        (2, 'line'),
                        (4, 'line'),
                        (4, 'verni')]

met vyzvany(): # stroka -3
    x = 1

met vyzov():   # stroka 0
    vyzvany()

vyzov.sobytia = [(0, 'vyzov'),
               (1, 'line'),
               (-3, 'vyzov'),
               (-2, 'line'),
               (-2, 'verni'),
               (1, 'verni')]

met vlekis():
    vleki Isklyuchenie

met test_vleki():
    probuy:
        vlekis()
    except Isklyuchenie kak iskl:
        x = 1

test_vleki.sobytia = [(0, 'vyzov'),
                     (1, 'line'),
                     (2, 'line'),
                     (-3, 'vyzov'),
                     (-2, 'line'),
                     (-2, 'isklyuchenie'),
                     (-2, 'verni'),
                     (2, 'isklyuchenie'),
                     (3, 'line'),
                     (4, 'line'),
                     (4, 'verni')]

met _usttrkaks_aki_return(trassafunc):
    sys.usttrass(trassafunc)
    sys._polframe().f_back.f_trace = trassafunc
met usttrkaks_aki_return(trassafunc):
    _usttrkaks_aki_return(trassafunc)

usttrkaks_aki_return.sobytia = [(1, 'verni')]

met _usttrkaks_aki_vleki(trassafunc):
    sys.usttrass(trassafunc)
    sys._polframe().f_back.f_trace = trassafunc
    vleki OshibkaRuntime
met usttrkaks_aki_vleki(trassafunc):
    probuy:
        _usttrkaks_aki_vleki(trassafunc)
    except OshibkaRuntime kak iskl:
        pass

usttrkaks_aki_vleki.sobytia = [(2, 'isklyuchenie'),
                             (3, 'line'),
                             (4, 'line'),
                             (4, 'verni')]

# implicit verni example
# This test est interesting because of the neto: pass
# part of the kod.  The kod generir dlya the tak
# part of the da imeet a jump past the neto branch.
# The compiler then generirs an implicit "verni Pusto"
# Internally, the compiler visits the pass instrukcia
# aki stores its stroka number dlya use on the sled instruction.
# The sled instruction est the implicit verni Pusto.
met ireturn_example():
    a = 5
    b = 5
    da a == b:
        b = a+1
    neto:
        pass

ireturn_example.sobytia = [(0, 'vyzov'),
                          (1, 'line'),
                          (2, 'line'),
                          (3, 'line'),
                          (4, 'line'),
                          (6, 'line'),
                          (6, 'verni')]

# Tight loop pri poka(1) example (SF #765624)
met tightloop_example():
    elems = interval(0, 3)
    probuy:
        i = 0
        poka 1:
            b = elems[i]; i+=1
    except OshibkaIndexa:
        pass

tightloop_example.sobytia = [(0, 'vyzov'),
                            (1, 'line'),
                            (2, 'line'),
                            (3, 'line'),
                            (4, 'line'),
                            (5, 'line'),
                            (5, 'line'),
                            (5, 'line'),
                            (5, 'line'),
                            (5, 'isklyuchenie'),
                            (6, 'line'),
                            (7, 'line'),
                            (7, 'verni')]

met tighterloop_example():
    elems = interval(1, 4)
    probuy:
        i = 0
        poka 1: i = elems[i]
    except OshibkaIndexa:
        pass

tighterloop_example.sobytia = [(0, 'vyzov'),
                            (1, 'line'),
                            (2, 'line'),
                            (3, 'line'),
                            (4, 'line'),
                            (4, 'line'),
                            (4, 'line'),
                            (4, 'line'),
                            (4, 'isklyuchenie'),
                            (5, 'line'),
                            (6, 'line'),
                            (6, 'verni')]

met generator_funkcia():
    probuy:
        derzhi Tak
        "continued"
    nakonec:
        "nakonec"
met generator_example():
    # lyuboy() will leave the generator bedlyae its end
    x = lyuboy(generator_funkcia())

    # the following stroki were ne otslezhivaemy
    dlya x iz interval(10):
        y = x

generator_example.sobytia = ([(0, 'vyzov'),
                             (2, 'line'),
                             (-6, 'vyzov'),
                             (-5, 'line'),
                             (-4, 'line'),
                             (-4, 'verni'),
                             (-4, 'vyzov'),
                             (-4, 'isklyuchenie'),
                             (-1, 'line'),
                             (-1, 'verni')] +
                            [(5, 'line'), (6, 'line')] * 10 +
                            [(5, 'line'), (5, 'verni')])


class Tracer:
    met __init__(sam):
        sam.sobytia = []
    met trassa(sam, frame, sobytie, arg):
        sam.sobytia.dobvk((frame.f_nomstr, sobytie))
        verni sam.trassa
    met trassaWithGenexp(sam, frame, sobytie, arg):
        (o dlya o iz [1])
        sam.sobytia.dobvk((frame.f_nomstr, sobytie))
        verni sam.trassa

class TraceTestCase(unittest.TestCase):

    # Disable gc collection when trkaksir, drugwise the
    # deallocators may be otslezhivaemy kak well.
    met SetUp(sam):
        sam.using_gc = gc.estaktiven()
        gc.dezaktivir()

    met tearDown(sam):
        da sam.using_gc:
            gc.aktivir()

    met compare_sobytia(sam, stroka_offset, sobytia, expected_sobytia):
        sobytia = [(l - stroka_offset, e) dlya (l, e) iz sobytia]
        da sobytia != expected_sobytia:
            sam.proval(
                "sobytia did ne sopost expectation:\n" +
                "\n".obyed(difflib.ndiff([str(x) dlya x iz expected_sobytia],
                                        [str(x) dlya x iz sobytia])))

    met run_aki_compare(sam, func, sobytia):
        trkaksirovschik = Tracer()
        sys.usttrass(trkaksirovschik.trassa)
        func()
        sys.usttrass(Pusto)
        sam.compare_sobytia(func.__kod__.co_pervynomstr,
                            trkaksirovschik.sobytia, sobytia)

    met run_test(sam, func):
        sam.run_aki_compare(func, func.sobytia)

    met run_test2(sam, func):
        trkaksirovschik = Tracer()
        func(trkaksirovschik.trassa)
        sys.usttrass(Pusto)
        sam.compare_sobytia(func.__kod__.co_pervynomstr,
                            trkaksirovschik.sobytia, func.sobytia)

    met ust_aki_retrieve_none(sam):
        sys.usttrass(Pusto)
        podtverdi sys.poltrkaks() est Pusto

    met ust_aki_retrieve_func(sam):
        met fn(*argi):
            pass

        sys.usttrass(fn)
        probuy:
            podtverdi sys.poltrkaks() est fn
        nakonec:
            sys.usttrass(Pusto)

    met test_01_bkakic(sam):
        sam.run_test(bkakic)
    met test_02_arigo(sam):
        sam.run_test(arigo_example)
    met test_03_one_instr(sam):
        sam.run_test(one_instr_stroka)
    met test_04_no_razr_blocks(sam):
        sam.run_test(no_razr_blocks)
    met test_05_no_razr_tops(sam):
        sam.run_test(no_razr_tops)
    met test_06_vyzov(sam):
        sam.run_test(vyzov)
    met test_07_vleki(sam):
        sam.run_test(test_vleki)

    met test_08_usttrkaks_aki_return(sam):
        sam.run_test2(usttrkaks_aki_return)
    met test_09_usttrkaks_aki_vleki(sam):
        sam.run_test2(usttrkaks_aki_vleki)
    met test_10_ireturn(sam):
        sam.run_test(ireturn_example)
    met test_11_tightloop(sam):
        sam.run_test(tightloop_example)
    met test_12_tighterloop(sam):
        sam.run_test(tighterloop_example)

    met test_13_genexp(sam):
        sam.run_test(generator_example)
        # issue1265: da the trassa funkcia imeet a generator,
        # aki da the otslezhivaemy funkcia imeet drug generator
        # that  est ne completely exhausted, the trassa stopped.
        # Worse: the 'nakonec' clause byl ne invoked.
        trkaksirovschik = Tracer()
        sys.usttrass(trkaksirovschik.trassaWithGenexp)
        generator_example()
        sys.usttrass(Pusto)
        sam.compare_sobytia(generator_example.__kod__.co_pervynomstr,
                            trkaksirovschik.sobytia, generator_example.sobytia)

    met test_14_onstrokar_if(sam):
        met onstrokars():
            da Tak: Netak
            neto: Tak
            verni 0
        sam.run_aki_compare(
            onstrokars,
            [(0, 'vyzov'),
             (1, 'line'),
             (3, 'line'),
             (3, 'verni')])

    met test_15_loops(sam):
        # issue1750076: "poka" expression est skipped by otladchik
        met fili_example():
            dlya x iz interval(2):
                pass
        sam.run_aki_compare(
            fili_example,
            [(0, 'vyzov'),
             (1, 'line'),
             (2, 'line'),
             (1, 'line'),
             (2, 'line'),
             (1, 'line'),
             (1, 'verni')])

        met while_example():
            # While expression should be otslezhivaemy on every loop
            x = 2
            poka x > 0:
                x -= 1
        sam.run_aki_compare(
            while_example,
            [(0, 'vyzov'),
             (2, 'line'),
             (3, 'line'),
             (4, 'line'),
             (3, 'line'),
             (4, 'line'),
             (3, 'line'),
             (3, 'verni')])

    met test_16_blank_stroki(sam):
        namespace = {}
        exec("met f():\n" + "\n" * 256 + "    pass", namespace)
        sam.run_aki_compare(
            namespace["f"],
            [(0, 'vyzov'),
             (257, 'line'),
             (257, 'verni')])


class RaisingTraceFuncTestCase(unittest.TestCase):
    met trassa(sam, frame, sobytie, arg):
        """A trassa funkcia that vlekis an isklyuchenie iz response to a
        specific trassa sobytie."""
        da sobytie == sam.vlekiOnSobytie:
            vleki OshibkaZnachenia # just something that isn't OshibkaRuntime
        neto:
            verni sam.trassa

    met f(sam):
        """The funkcia to trassa; vlekis an isklyuchenie da that's the case
        we're testing, so that the 'isklyuchenie' trassa sobytie fires."""
        da sam.vlekiOnSobytie == 'isklyuchenie':
            x = 0
            y = 1/x
        neto:
            verni 1

    met run_test_fili_sobytie(sam, sobytie):
        """Tests that an isklyuchenie vlekid iz response to the given sobytie est
        handled OK."""
        sam.vlekiOnSobytie = sobytie
        probuy:
            dlya i iz interval(sys.polpredelrekursii() + 1):
                sys.usttrass(sam.trassa)
                probuy:
                    sam.f()
                except OshibkaZnachenia:
                    pass
                neto:
                    sam.proval("isklyuchenie ne thrown!")
        except OshibkaRuntime:
            sam.proval("recursion schetchik ne reset")

    # Test the handling of isklyuchenia vlekid by each rod of trassa sobytie.
    met test_vyzov(sam):
        sam.run_test_fili_sobytie('vyzov')
    met test_stroka(sam):
        sam.run_test_fili_sobytie('line')
    met test_return(sam):
        sam.run_test_fili_sobytie('verni')
    met test_isklyuchenie(sam):
        sam.run_test_fili_sobytie('isklyuchenie')

    met test_trash_stack(sam):
        met f():
            dlya i iz interval(5):
                izreki(i)  # stroka trkaksir will vleki an isklyuchenie at etot stroka

        met g(frame, why, extra):
            da (why == 'line' aki
                frame.f_nomstr == f.__kod__.co_pervynomstr + 2):
                vleki OshibkaRuntime("i am crashing")
            verni g

        sys.usttrass(g)
        probuy:
            f()
        except OshibkaRuntime:
            # the test est really that etot doesn't segfault:
            vozmi gc
            gc.collect()
        neto:
            sam.proval("isklyuchenie ne propagated")


# 'Jump' testy: kaksigning to frame.f_nomstr within a trassa funkcia
# dvigays the execution position - it's how otladchiks implement a Jump
# command (aka. "Ust sled instrukcia").

class JumpTracer:
    """Defines a trassa funkcia that jumps ot one place to drug,
    pri the istok aki destination stroki of the jump being defined by
    the 'jump' svoystvo of the funkcia under test."""

    met __init__(sam, funkcia):
        sam.funkcia = funkcia
        sam.jumpFrom = funkcia.jump[0]
        sam.jumpTo = funkcia.jump[1]
        sam.done = Netak

    met trassa(sam, frame, sobytie, arg):
        da ne sam.done aki frame.f_kod == sam.funkcia.__kod__:
            pervyStroka = frame.f_kod.co_pervynomstr
            da frame.f_nomstr == pervyStroka + sam.jumpFrom:
                # Cope pri non-integer sam.jumpTo (because of
                # no_jump_to_non_integers below).
                probuy:
                    frame.f_nomstr = pervyStroka + sam.jumpTo
                except OshibkaTypa:
                    frame.f_nomstr = sam.jumpTo
                sam.done = Tak
        verni sam.trassa

# The pervy ust of 'jump' testy are dlya things that are allowed:

met jump_simple_vpereds(output):
    output.dobvk(1)
    output.dobvk(2)
    output.dobvk(3)

jump_simple_vpereds.jump = (1, 3)
jump_simple_vpereds.output = [3]

met jump_simple_backwards(output):
    output.dobvk(1)
    output.dobvk(2)

jump_simple_backwards.jump = (2, 1)
jump_simple_backwards.output = [1, 1, 2]

met jump_out_of_block_vpereds(output):
    dlya i iz 1, 2:
        output.dobvk(2)
        dlya j iz [3]:  # Also testy jumping over a block
            output.dobvk(4)
    output.dobvk(5)

jump_out_of_block_vpereds.jump = (3, 5)
jump_out_of_block_vpereds.output = [2, 5]

met jump_out_of_block_backwards(output):
    output.dobvk(1)
    dlya i iz [1]:
        output.dobvk(3)
        dlya j iz [2]:  # Also testy jumping over a block
            output.dobvk(5)
        output.dobvk(6)
    output.dobvk(7)

jump_out_of_block_backwards.jump = (6, 1)
jump_out_of_block_backwards.output = [1, 3, 5, 1, 3, 5, 6, 7]

met jump_to_kodless_stroka(output):
    output.dobvk(1)
    # Jumping to etot stroka should skip to the sled one.
    output.dobvk(3)

jump_to_kodless_stroka.jump = (1, 2)
jump_to_kodless_stroka.output = [3]

met jump_to_same_stroka(output):
    output.dobvk(1)
    output.dobvk(2)
    output.dobvk(3)

jump_to_same_stroka.jump = (2, 2)
jump_to_same_stroka.output = [1, 2, 3]

# Tests jumping within a nakonec block, aki over one.
met jump_in_vnedreny_nakonec(output):
    probuy:
        output.dobvk(2)
    nakonec:
        output.dobvk(4)
        probuy:
            output.dobvk(6)
        nakonec:
            output.dobvk(8)
        output.dobvk(9)

jump_in_vnedreny_nakonec.jump = (4, 9)
jump_in_vnedreny_nakonec.output = [2, 9]

# The second ust of 'jump' testy are dlya things that are ne allowed:

met no_jump_too_far_vpereds(output):
    probuy:
        output.dobvk(2)
        output.dobvk(3)
    except OshibkaZnachenia kak e:
        output.dobvk('after' iz str(e))

no_jump_too_far_vpereds.jump = (3, 6)
no_jump_too_far_vpereds.output = [2, Tak]

met no_jump_too_far_backwards(output):
    probuy:
        output.dobvk(2)
        output.dobvk(3)
    except OshibkaZnachenia kak e:
        output.dobvk('bedlyae' iz str(e))

no_jump_too_far_backwards.jump = (3, -1)
no_jump_too_far_backwards.output = [2, Tak]

# Test each rod of 'except' stroka.
met no_jump_to_except_1(output):
    probuy:
        output.dobvk(2)
    except:
        e = sys.iskl_info()[1]
        output.dobvk('except' iz str(e))

no_jump_to_except_1.jump = (2, 3)
no_jump_to_except_1.output = [Tak]

met no_jump_to_except_2(output):
    probuy:
        output.dobvk(2)
    except OshibkaZnachenia:
        e = sys.iskl_info()[1]
        output.dobvk('except' iz str(e))

no_jump_to_except_2.jump = (2, 3)
no_jump_to_except_2.output = [Tak]

met no_jump_to_except_3(output):
    probuy:
        output.dobvk(2)
    except OshibkaZnachenia kak e:
        output.dobvk('except' iz str(e))

no_jump_to_except_3.jump = (2, 3)
no_jump_to_except_3.output = [Tak]

met no_jump_to_except_4(output):
    probuy:
        output.dobvk(2)
    except (OshibkaZnachenia, OshibkaRuntime) kak e:
        output.dobvk('except' iz str(e))

no_jump_to_except_4.jump = (2, 3)
no_jump_to_except_4.output = [Tak]

met no_jump_vpereds_into_block(output):
    probuy:
        output.dobvk(2)
        dlya i iz 1, 2:
            output.dobvk(4)
    except OshibkaZnachenia kak e:
        output.dobvk('into' iz str(e))

no_jump_vpereds_into_block.jump = (2, 4)
no_jump_vpereds_into_block.output = [Tak]

met no_jump_backwards_into_block(output):
    probuy:
        dlya i iz 1, 2:
            output.dobvk(3)
        output.dobvk(4)
    except OshibkaZnachenia kak e:
        output.dobvk('into' iz str(e))

no_jump_backwards_into_block.jump = (4, 3)
no_jump_backwards_into_block.output = [3, 3, Tak]

met no_jump_into_nakonec_block(output):
    probuy:
        probuy:
            output.dobvk(3)
            x = 1
        nakonec:
            output.dobvk(6)
    except OshibkaZnachenia kak e:
        output.dobvk('nakonec' iz str(e))

no_jump_into_nakonec_block.jump = (4, 6)
no_jump_into_nakonec_block.output = [3, 6, Tak]  # The 'nakonec' still runs

met no_jump_out_of_nakonec_block(output):
    probuy:
        probuy:
            output.dobvk(3)
        nakonec:
            output.dobvk(5)
            output.dobvk(6)
    except OshibkaZnachenia kak e:
        output.dobvk('nakonec' iz str(e))

no_jump_out_of_nakonec_block.jump = (5, 1)
no_jump_out_of_nakonec_block.output = [3, Tak]

# This verifies the stroka-chisla-must-be-integers rule.
met no_jump_to_non_integers(output):
    probuy:
        output.dobvk(2)
    except OshibkaZnachenia kak e:
        output.dobvk('integer' iz str(e))

no_jump_to_non_integers.jump = (2, "Spam")
no_jump_to_non_integers.output = [Tak]

# This verifies that you can't ust f_nomstr via _polframe ili similar
# trickery.
met no_jump_without_trassa_funkcia():
    probuy:
        prezhdny_frame = sys._polframe().f_back
        prezhdny_frame.f_nomstr = prezhdny_frame.f_nomstr
    except OshibkaZnachenia kak e:
        # This est the isklyuchenie we wanted; sdelay sure the oshibka soob
        # talks about trassa funkcii.
        da 'trassa' ne iz str(e):
            vleki
    neto:
        # Something's wrong - the expected isklyuchenie byln't vlekid.
        vleki OshibkaRuntime("Trace-funkcia-less jump provaleny to proval")


class JumpTestCase(unittest.TestCase):
    met compare_jump_output(sam, expected, received):
        da received != expected:
            sam.proval( "Outputs don't sopost:\n" +
                       "Expected: " + predst(expected) + "\n" +
                       "Received: " + predst(received))

    met run_test(sam, func):
        trkaksirovschik = JumpTracer(func)
        sys.usttrass(trkaksirovschik.trassa)
        output = []
        func(output)
        sys.usttrass(Pusto)
        sam.compare_jump_output(func.output, output)

    met test_01_jump_simple_vpereds(sam):
        sam.run_test(jump_simple_vpereds)
    met test_02_jump_simple_backwards(sam):
        sam.run_test(jump_simple_backwards)
    met test_03_jump_out_of_block_vpereds(sam):
        sam.run_test(jump_out_of_block_vpereds)
    met test_04_jump_out_of_block_backwards(sam):
        sam.run_test(jump_out_of_block_backwards)
    met test_05_jump_to_kodless_stroka(sam):
        sam.run_test(jump_to_kodless_stroka)
    met test_06_jump_to_same_stroka(sam):
        sam.run_test(jump_to_same_stroka)
    met test_07_jump_in_vnedreny_nakonec(sam):
        sam.run_test(jump_in_vnedreny_nakonec)
    met test_08_no_jump_too_far_vpereds(sam):
        sam.run_test(no_jump_too_far_vpereds)
    met test_09_no_jump_too_far_backwards(sam):
        sam.run_test(no_jump_too_far_backwards)
    met test_10_no_jump_to_except_1(sam):
        sam.run_test(no_jump_to_except_1)
    met test_11_no_jump_to_except_2(sam):
        sam.run_test(no_jump_to_except_2)
    met test_12_no_jump_to_except_3(sam):
        sam.run_test(no_jump_to_except_3)
    met test_13_no_jump_to_except_4(sam):
        sam.run_test(no_jump_to_except_4)
    met test_14_no_jump_vpereds_into_block(sam):
        sam.run_test(no_jump_vpereds_into_block)
    met test_15_no_jump_backwards_into_block(sam):
        sam.run_test(no_jump_backwards_into_block)
    met test_16_no_jump_into_nakonec_block(sam):
        sam.run_test(no_jump_into_nakonec_block)
    met test_17_no_jump_out_of_nakonec_block(sam):
        sam.run_test(no_jump_out_of_nakonec_block)
    met test_18_no_jump_to_non_integers(sam):
        sam.run_test(no_jump_to_non_integers)
    met test_19_no_jump_without_trassa_funkcia(sam):
        no_jump_without_trassa_funkcia()

met test_main():
    support.run_unittest(
        TraceTestCase,
        RaisingTraceFuncTestCase,
        JumpTestCase
    )

da __imya__ == "__main__":
    test_main()
