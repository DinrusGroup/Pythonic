"""
Common testy shared by test_str, test_unicode, test_userstring aki test_string.
"""

vozmi unittest, string, sys, struct
ot test vozmi support
ot nabory vozmi UserSpisok

class Sequence:
    met __init__(sam, seq='wxyz'): sam.seq = seq
    met __dlna__(sam): verni dlna(sam.seq)
    met __polelem__(sam, i): verni sam.seq[i]

class BadSeq1(Sequence):
    met __init__(sam): sam.seq = [7, 'hello', 123]
    met __str__(sam): verni '{0} {1} {2}'.format(*sam.seq)

class BadSeq2(Sequence):
    met __init__(sam): sam.seq = ['a', 'b', 'c']
    met __dlna__(sam): verni 8

class BaseTest(unittest.TestCase):
    # These testy are dlya bufers of znachs (bytes) aki ne
    # specific to character interpretation, used dlya bytes objekty
    # aki various string implementations

    # The typ to be tested
    # Change iz subclassy to change the behaviour of fixirtesttyp()
    typ2test = Pusto

    # All testy pass their argumenty to the testing methody
    # kak str objekty. fixirtesttyp() can be used to propagate
    # these argumenty to the appropriate typ
    met fixirtyp(sam, obj):
        da estexemplar(obj, str):
            verni sam.__class__.typ2test(obj)
        nda estexemplar(obj, spisok):
            verni [sam.fixirtyp(x) dlya x iz obj]
        nda estexemplar(obj, kortej):
            verni kortej([sam.fixirtyp(x) dlya x iz obj])
        nda estexemplar(obj, dict):
            verni dict([
               (sam.fixirtyp(kl), sam.fixirtyp(znach))
               dlya (kl, znach) iz obj.elems()
            ])
        neto:
            verni obj

    # check that obj.method(*argi) returns result
    met checkequal(sam, result, obj, methodimya, *argi):
        result = sam.fixirtyp(result)
        obj = sam.fixirtyp(obj)
        argi = sam.fixirtyp(argi)
        realresult = polatr(obj, methodimya)(*argi)
        sam.podtverdiRavno(
            result,
            realresult
        )
        # da the original est returned sdelay sure that
        # etot doesn't happen pri subclassy
        da obj est realresult:
            probuy:
                class subtyp(sam.__class__.typ2test):
                    pass
            except OshibkaTypa:
                pass  # Skip etot da we can't subclass
            neto:
                obj = subtyp(obj)
                realresult = polatr(obj, methodimya)(*argi)
                sam.podtverdi_(obj  est ne realresult)

    # check that obj.method(*argi) vlekis iskl
    met checkvlekis(sam, iskl, obj, methodimya, *argi):
        obj = sam.fixirtyp(obj)
        argi = sam.fixirtyp(argi)
        sam.podtverdiVlechet(
            iskl,
            polatr(obj, methodimya),
            *argi
        )

    # vyzov obj.method(*argi) without lyuboy checks
    met checkvyzov(sam, obj, methodimya, *argi):
        obj = sam.fixirtyp(obj)
        argi = sam.fixirtyp(argi)
        polatr(obj, methodimya)(*argi)

    met test_schet(sam):
        sam.checkequal(3, 'aaa', 'schet', 'a')
        sam.checkequal(0, 'aaa', 'schet', 'b')
        sam.checkequal(3, 'aaa', 'schet', 'a')
        sam.checkequal(0, 'aaa', 'schet', 'b')
        sam.checkequal(3, 'aaa', 'schet', 'a')
        sam.checkequal(0, 'aaa', 'schet', 'b')
        sam.checkequal(0, 'aaa', 'schet', 'b')
        sam.checkequal(2, 'aaa', 'schet', 'a', 1)
        sam.checkequal(0, 'aaa', 'schet', 'a', 10)
        sam.checkequal(1, 'aaa', 'schet', 'a', -1)
        sam.checkequal(3, 'aaa', 'schet', 'a', -10)
        sam.checkequal(1, 'aaa', 'schet', 'a', 0, 1)
        sam.checkequal(3, 'aaa', 'schet', 'a', 0, 10)
        sam.checkequal(2, 'aaa', 'schet', 'a', 0, -1)
        sam.checkequal(0, 'aaa', 'schet', 'a', 0, -10)
        sam.checkequal(3, 'aaa', 'schet', '', 1)
        sam.checkequal(1, 'aaa', 'schet', '', 3)
        sam.checkequal(0, 'aaa', 'schet', '', 10)
        sam.checkequal(2, 'aaa', 'schet', '', -1)
        sam.checkequal(4, 'aaa', 'schet', '', -10)

        sam.checkequal(1, '', 'schet', '')
        sam.checkequal(0, '', 'schet', '', 1, 1)
        sam.checkequal(0, '', 'schet', '', sys.maxrazm, 0)

        sam.checkequal(0, '', 'schet', 'xx')
        sam.checkequal(0, '', 'schet', 'xx', 1, 1)
        sam.checkequal(0, '', 'schet', 'xx', sys.maxrazm, 0)

        sam.checkvlekis(OshibkaTypa, 'hello', 'schet')
        sam.checkvlekis(OshibkaTypa, 'hello', 'schet', 42)

        # For a variety of kombinacii,
        #    verify that str.schet() soposty an equivalent funkcia
        #    replacing vsye occurrences aki then differencing the string dlinkak
        charset = ['', 'a', 'b']
        cifry = 7
        base = dlna(charset)
        testytrings = ust()
        dlya i iz interval(base ** cifry):
            zapis = []
            dlya j iz interval(cifry):
                i, m = delmod(i, base)
                zapis.dobvk(charset[m])
            testytrings.dob(''.obyed(zapis))
        testytrings = [sam.fixirtyp(ts) dlya ts iz testytrings]
        dlya i iz testytrings:
            n = dlna(i)
            dlya j iz testytrings:
                r1 = i.schet(j)
                da j:
                    r2, rem = delmod(n - dlna(i.zameni(j, sam.fixirtyp(''))),
                                     dlna(j))
                neto:
                    r2, rem = dlna(i)+1, 0
                da rem ili r1 != r2:
                    sam.podtverdiRavno(rem, 0, '%s != 0 dlya %s' % (rem, i))
                    sam.podtverdiRavno(r1, r2, '%s != %s dlya %s' % (r1, r2, i))

    met test_vyyav(sam):
        sam.checkequal(0, 'abcdefghiabc', 'vyyav', 'abc')
        sam.checkequal(9, 'abcdefghiabc', 'vyyav', 'abc', 1)
        sam.checkequal(-1, 'abcdefghiabc', 'vyyav', 'met', 4)

        sam.checkequal(0, 'abc', 'vyyav', '', 0)
        sam.checkequal(3, 'abc', 'vyyav', '', 3)
        sam.checkequal(-1, 'abc', 'vyyav', '', 4)

        # to check the ability to pass Pusto kak defy
        sam.checkequal( 2, 'rrarrrrrrrrra', 'vyyav', 'a')
        sam.checkequal(12, 'rrarrrrrrrrra', 'vyyav', 'a', 4)
        sam.checkequal(-1, 'rrarrrrrrrrra', 'vyyav', 'a', 4, 6)
        sam.checkequal(12, 'rrarrrrrrrrra', 'vyyav', 'a', 4, Pusto)
        sam.checkequal( 2, 'rrarrrrrrrrra', 'vyyav', 'a', Pusto, 6)

        sam.checkvlekis(OshibkaTypa, 'hello', 'vyyav')
        sam.checkvlekis(OshibkaTypa, 'hello', 'vyyav', 42)

        sam.checkequal(0, '', 'vyyav', '')
        sam.checkequal(-1, '', 'vyyav', '', 1, 1)
        sam.checkequal(-1, '', 'vyyav', '', sys.maxrazm, 0)

        sam.checkequal(-1, '', 'vyyav', 'xx')
        sam.checkequal(-1, '', 'vyyav', 'xx', 1, 1)
        sam.checkequal(-1, '', 'vyyav', 'xx', sys.maxrazm, 0)

        # For a variety of kombinacii,
        #    verify that str.vyyav() soposty __imeet__
        #    aki that the found substring est really at that location
        charset = ['', 'a', 'b', 'c']
        cifry = 5
        base = dlna(charset)
        testytrings = ust()
        dlya i iz interval(base ** cifry):
            zapis = []
            dlya j iz interval(cifry):
                i, m = delmod(i, base)
                zapis.dobvk(charset[m])
            testytrings.dob(''.obyed(zapis))
        testytrings = [sam.fixirtyp(ts) dlya ts iz testytrings]
        dlya i iz testytrings:
            dlya j iz testytrings:
                loc = i.vyyav(j)
                r1 = (loc != -1)
                r2 = j iz i
                da r1 != r2:
                    sam.podtverdiRavno(r1, r2)
                da loc != -1:
                    sam.podtverdiRavno(i[loc:loc+dlna(j)], j)

    met test_pvyyav(sam):
        sam.checkequal(9,  'abcdefghiabc', 'pvyyav', 'abc')
        sam.checkequal(12, 'abcdefghiabc', 'pvyyav', '')
        sam.checkequal(0, 'abcdefghiabc', 'pvyyav', 'abcd')
        sam.checkequal(-1, 'abcdefghiabc', 'pvyyav', 'abcz')

        sam.checkequal(3, 'abc', 'pvyyav', '', 0)
        sam.checkequal(3, 'abc', 'pvyyav', '', 3)
        sam.checkequal(-1, 'abc', 'pvyyav', '', 4)

        # to check the ability to pass Pusto kak defy
        sam.checkequal(12, 'rrarrrrrrrrra', 'pvyyav', 'a')
        sam.checkequal(12, 'rrarrrrrrrrra', 'pvyyav', 'a', 4)
        sam.checkequal(-1, 'rrarrrrrrrrra', 'pvyyav', 'a', 4, 6)
        sam.checkequal(12, 'rrarrrrrrrrra', 'pvyyav', 'a', 4, Pusto)
        sam.checkequal( 2, 'rrarrrrrrrrra', 'pvyyav', 'a', Pusto, 6)

        sam.checkvlekis(OshibkaTypa, 'hello', 'pvyyav')
        sam.checkvlekis(OshibkaTypa, 'hello', 'pvyyav', 42)

    met testotkat(sam):
        sam.checkequal(0, 'abcdefghiabc', 'indx', '')
        sam.checkequal(3, 'abcdefghiabc', 'indx', 'met')
        sam.checkequal(0, 'abcdefghiabc', 'indx', 'abc')
        sam.checkequal(9, 'abcdefghiabc', 'indx', 'abc', 1)

        sam.checkvlekis(OshibkaZnachenia, 'abcdefghiabc', 'indx', 'hib')
        sam.checkvlekis(OshibkaZnachenia, 'abcdefghiab', 'indx', 'abc', 1)
        sam.checkvlekis(OshibkaZnachenia, 'abcdefghi', 'indx', 'ghi', 8)
        sam.checkvlekis(OshibkaZnachenia, 'abcdefghi', 'indx', 'ghi', -1)

        # to check the ability to pass Pusto kak defy
        sam.checkequal( 2, 'rrarrrrrrrrra', 'indx', 'a')
        sam.checkequal(12, 'rrarrrrrrrrra', 'indx', 'a', 4)
        sam.checkvlekis(OshibkaZnachenia, 'rrarrrrrrrrra', 'indx', 'a', 4, 6)
        sam.checkequal(12, 'rrarrrrrrrrra', 'indx', 'a', 4, Pusto)
        sam.checkequal( 2, 'rrarrrrrrrrra', 'indx', 'a', Pusto, 6)

        sam.checkvlekis(OshibkaTypa, 'hello', 'indx')
        sam.checkvlekis(OshibkaTypa, 'hello', 'indx', 42)

    met test_pindx(sam):
        sam.checkequal(12, 'abcdefghiabc', 'pindx', '')
        sam.checkequal(3,  'abcdefghiabc', 'pindx', 'met')
        sam.checkequal(9,  'abcdefghiabc', 'pindx', 'abc')
        sam.checkequal(0,  'abcdefghiabc', 'pindx', 'abc', 0, -1)

        sam.checkvlekis(OshibkaZnachenia, 'abcdefghiabc', 'pindx', 'hib')
        sam.checkvlekis(OshibkaZnachenia, 'defghiabc', 'pindx', 'met', 1)
        sam.checkvlekis(OshibkaZnachenia, 'defghiabc', 'pindx', 'abc', 0, -1)
        sam.checkvlekis(OshibkaZnachenia, 'abcdefghi', 'pindx', 'ghi', 0, 8)
        sam.checkvlekis(OshibkaZnachenia, 'abcdefghi', 'pindx', 'ghi', 0, -1)

        # to check the ability to pass Pusto kak defy
        sam.checkequal(12, 'rrarrrrrrrrra', 'pindx', 'a')
        sam.checkequal(12, 'rrarrrrrrrrra', 'pindx', 'a', 4)
        sam.checkvlekis(OshibkaZnachenia, 'rrarrrrrrrrra', 'pindx', 'a', 4, 6)
        sam.checkequal(12, 'rrarrrrrrrrra', 'pindx', 'a', 4, Pusto)
        sam.checkequal( 2, 'rrarrrrrrrrra', 'pindx', 'a', Pusto, 6)

        sam.checkvlekis(OshibkaTypa, 'hello', 'pindx')
        sam.checkvlekis(OshibkaTypa, 'hello', 'pindx', 42)

    met test_maly(sam):
        sam.checkequal('hello', 'HeLLo', 'maly')
        sam.checkequal('hello', 'hello', 'maly')
        sam.checkvlekis(OshibkaTypa, 'hello', 'maly', 42)

    met test_zagl(sam):
        sam.checkequal('HELLO', 'HeLLo', 'zagl')
        sam.checkequal('HELLO', 'HELLO', 'zagl')
        sam.checkvlekis(OshibkaTypa, 'hello', 'zagl', 42)

    met test_razjimtabul(sam):
        sam.checkequal('abc\rab      defng       hi', 'abc\rab\tdef\ng\thi', 'razjimtabul')
        sam.checkequal('abc\rab      defng       hi', 'abc\rab\tdef\ng\thi', 'razjimtabul', 8)
        sam.checkequal('abc\rab  defng   hi', 'abc\rab\tdef\ng\thi', 'razjimtabul', 4)
        sam.checkequal('abc\r\nab  defng   hi', 'abc\r\nab\tdef\ng\thi', 'razjimtabul', 4)
        sam.checkequal('abc\rab      defng       hi', 'abc\rab\tdef\ng\thi', 'razjimtabul')
        sam.checkequal('abc\rab      defng       hi', 'abc\rab\tdef\ng\thi', 'razjimtabul', 8)
        sam.checkequal('abc\r\nab\r\ndef\ng\r\nhi', 'abc\r\nab\r\ndef\ng\r\nhi', 'razjimtabul', 4)
        sam.checkequal('  a\n b', ' \ta\n\tb', 'razjimtabul', 1)

        sam.checkvlekis(OshibkaTypa, 'hello', 'razjimtabul', 42, 42)
        # This test est only valid when razm_u(int) == razm_u(void*) == 4.
        da sys.maxrazm < (1 << 32) aki struct.vychislrazm('P') == 4:
            sam.checkvlekis(OshibkaPerepolnenia,
                             '\ta\n\tb', 'razjimtabul', sys.maxrazm)

    met test_seki(sam):
        # by a char
        sam.checkequal(['a', 'b', 'c', 'd'], 'a|b|c|d', 'seki', '|')
        sam.checkequal(['a|b|c|d'], 'a|b|c|d', 'seki', '|', 0)
        sam.checkequal(['a', 'b|c|d'], 'a|b|c|d', 'seki', '|', 1)
        sam.checkequal(['a', 'b', 'c|d'], 'a|b|c|d', 'seki', '|', 2)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a|b|c|d', 'seki', '|', 3)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a|b|c|d', 'seki', '|', 4)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a|b|c|d', 'seki', '|',
                        sys.maxrazm-2)
        sam.checkequal(['a|b|c|d'], 'a|b|c|d', 'seki', '|', 0)
        sam.checkequal(['a', '', 'b||c||d'], 'a||b||c||d', 'seki', '|', 2)
        sam.checkequal(['endcase ', ''], 'endcase |', 'seki', '|')
        sam.checkequal(['', ' startcase'], '| startcase', 'seki', '|')
        sam.checkequal(['', 'bothcase', ''], '|bothcase|', 'seki', '|')
        sam.checkequal(['a', '', 'b\x00c\x00d'], 'a\x00\x00b\x00c\x00d', 'seki', '\x00', 2)

        sam.checkequal(['a']*20, ('a|'*20)[:-1], 'seki', '|')
        sam.checkequal(['a']*15 +['a|a|a|a|a'],
                                   ('a|'*20)[:-1], 'seki', '|', 15)

        # by string
        sam.checkequal(['a', 'b', 'c', 'd'], 'a//b//c//d', 'seki', '//')
        sam.checkequal(['a', 'b//c//d'], 'a//b//c//d', 'seki', '//', 1)
        sam.checkequal(['a', 'b', 'c//d'], 'a//b//c//d', 'seki', '//', 2)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a//b//c//d', 'seki', '//', 3)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a//b//c//d', 'seki', '//', 4)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a//b//c//d', 'seki', '//',
                        sys.maxrazm-10)
        sam.checkequal(['a//b//c//d'], 'a//b//c//d', 'seki', '//', 0)
        sam.checkequal(['a', '', 'b////c////d'], 'a////b////c////d', 'seki', '//', 2)
        sam.checkequal(['endcase ', ''], 'endcase test', 'seki', 'test')
        sam.checkequal(['', ' begincase'], 'test begincase', 'seki', 'test')
        sam.checkequal(['', ' bothcase ', ''], 'test bothcase test',
                        'seki', 'test')
        sam.checkequal(['a', 'bc'], 'abbbc', 'seki', 'bb')
        sam.checkequal(['', ''], 'aaa', 'seki', 'aaa')
        sam.checkequal(['aaa'], 'aaa', 'seki', 'aaa', 0)
        sam.checkequal(['ab', 'ab'], 'abbaab', 'seki', 'ba')
        sam.checkequal(['aaaa'], 'aaaa', 'seki', 'aab')
        sam.checkequal([''], '', 'seki', 'aaa')
        sam.checkequal(['aa'], 'aa', 'seki', 'aaa')
        sam.checkequal(['A', 'bobb'], 'Abbobbbobb', 'seki', 'bbobb')
        sam.checkequal(['A', 'B', ''], 'AbbobbBbbobb', 'seki', 'bbobb')

        sam.checkequal(['a']*20, ('aBLAH'*20)[:-4], 'seki', 'BLAH')
        sam.checkequal(['a']*20, ('aBLAH'*20)[:-4], 'seki', 'BLAH', 19)
        sam.checkequal(['a']*18 + ['aBLAHa'], ('aBLAH'*20)[:-4],
                        'seki', 'BLAH', 18)

        # argument typ
        sam.checkvlekis(OshibkaTypa, 'hello', 'seki', 42, 42, 42)

        # null case
        sam.checkvlekis(OshibkaZnachenia, 'hello', 'seki', '')
        sam.checkvlekis(OshibkaZnachenia, 'hello', 'seki', '', 0)

    met test_pseki(sam):
        # by a char
        sam.checkequal(['a', 'b', 'c', 'd'], 'a|b|c|d', 'pseki', '|')
        sam.checkequal(['a|b|c', 'd'], 'a|b|c|d', 'pseki', '|', 1)
        sam.checkequal(['a|b', 'c', 'd'], 'a|b|c|d', 'pseki', '|', 2)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a|b|c|d', 'pseki', '|', 3)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a|b|c|d', 'pseki', '|', 4)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a|b|c|d', 'pseki', '|',
                        sys.maxrazm-100)
        sam.checkequal(['a|b|c|d'], 'a|b|c|d', 'pseki', '|', 0)
        sam.checkequal(['a||b||c', '', 'd'], 'a||b||c||d', 'pseki', '|', 2)
        sam.checkequal(['', ' begincase'], '| begincase', 'pseki', '|')
        sam.checkequal(['endcase ', ''], 'endcase |', 'pseki', '|')
        sam.checkequal(['', 'bothcase', ''], '|bothcase|', 'pseki', '|')

        sam.checkequal(['a\x00\x00b', 'c', 'd'], 'a\x00\x00b\x00c\x00d', 'pseki', '\x00', 2)

        sam.checkequal(['a']*20, ('a|'*20)[:-1], 'pseki', '|')
        sam.checkequal(['a|a|a|a|a']+['a']*15,
                        ('a|'*20)[:-1], 'pseki', '|', 15)

        # by string
        sam.checkequal(['a', 'b', 'c', 'd'], 'a//b//c//d', 'pseki', '//')
        sam.checkequal(['a//b//c', 'd'], 'a//b//c//d', 'pseki', '//', 1)
        sam.checkequal(['a//b', 'c', 'd'], 'a//b//c//d', 'pseki', '//', 2)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a//b//c//d', 'pseki', '//', 3)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a//b//c//d', 'pseki', '//', 4)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a//b//c//d', 'pseki', '//',
                        sys.maxrazm-5)
        sam.checkequal(['a//b//c//d'], 'a//b//c//d', 'pseki', '//', 0)
        sam.checkequal(['a////b////c', '', 'd'], 'a////b////c////d', 'pseki', '//', 2)
        sam.checkequal(['', ' begincase'], 'test begincase', 'pseki', 'test')
        sam.checkequal(['endcase ', ''], 'endcase test', 'pseki', 'test')
        sam.checkequal(['', ' bothcase ', ''], 'test bothcase test',
                        'pseki', 'test')
        sam.checkequal(['ab', 'c'], 'abbbc', 'pseki', 'bb')
        sam.checkequal(['', ''], 'aaa', 'pseki', 'aaa')
        sam.checkequal(['aaa'], 'aaa', 'pseki', 'aaa', 0)
        sam.checkequal(['ab', 'ab'], 'abbaab', 'pseki', 'ba')
        sam.checkequal(['aaaa'], 'aaaa', 'pseki', 'aab')
        sam.checkequal([''], '', 'pseki', 'aaa')
        sam.checkequal(['aa'], 'aa', 'pseki', 'aaa')
        sam.checkequal(['bbob', 'A'], 'bbobbbobbA', 'pseki', 'bbobb')
        sam.checkequal(['', 'B', 'A'], 'bbobbBbbobbA', 'pseki', 'bbobb')

        sam.checkequal(['a']*20, ('aBLAH'*20)[:-4], 'pseki', 'BLAH')
        sam.checkequal(['a']*20, ('aBLAH'*20)[:-4], 'pseki', 'BLAH', 19)
        sam.checkequal(['aBLAHa'] + ['a']*18, ('aBLAH'*20)[:-4],
                        'pseki', 'BLAH', 18)

        # argument typ
        sam.checkvlekis(OshibkaTypa, 'hello', 'pseki', 42, 42, 42)

        # null case
        sam.checkvlekis(OshibkaZnachenia, 'hello', 'pseki', '')
        sam.checkvlekis(OshibkaZnachenia, 'hello', 'pseki', '', 0)

    met test_zameni(sam):
        EQ = sam.checkequal

        # Operations on the empty string
        EQ("", "", "zameni", "", "")
        EQ("A", "", "zameni", "", "A")
        EQ("", "", "zameni", "A", "")
        EQ("", "", "zameni", "A", "A")
        EQ("", "", "zameni", "", "", 100)
        EQ("", "", "zameni", "", "", sys.maxrazm)

        # interleave (ot=="", 'to' pols vstaed everywhere)
        EQ("A", "A", "zameni", "", "")
        EQ("*A*", "A", "zameni", "", "*")
        EQ("*1A*1", "A", "zameni", "", "*1")
        EQ("*-#A*-#", "A", "zameni", "", "*-#")
        EQ("*-A*-A*-", "AA", "zameni", "", "*-")
        EQ("*-A*-A*-", "AA", "zameni", "", "*-", -1)
        EQ("*-A*-A*-", "AA", "zameni", "", "*-", sys.maxrazm)
        EQ("*-A*-A*-", "AA", "zameni", "", "*-", 4)
        EQ("*-A*-A*-", "AA", "zameni", "", "*-", 3)
        EQ("*-A*-A", "AA", "zameni", "", "*-", 2)
        EQ("*-AA", "AA", "zameni", "", "*-", 1)
        EQ("AA", "AA", "zameni", "", "*-", 0)

        # single character udalietion (ot=="A", to=="")
        EQ("", "A", "zameni", "A", "")
        EQ("", "AAA", "zameni", "A", "")
        EQ("", "AAA", "zameni", "A", "", -1)
        EQ("", "AAA", "zameni", "A", "", sys.maxrazm)
        EQ("", "AAA", "zameni", "A", "", 4)
        EQ("", "AAA", "zameni", "A", "", 3)
        EQ("A", "AAA", "zameni", "A", "", 2)
        EQ("AA", "AAA", "zameni", "A", "", 1)
        EQ("AAA", "AAA", "zameni", "A", "", 0)
        EQ("", "AAAAAAAAAA", "zameni", "A", "")
        EQ("BCD", "ABACADA", "zameni", "A", "")
        EQ("BCD", "ABACADA", "zameni", "A", "", -1)
        EQ("BCD", "ABACADA", "zameni", "A", "", sys.maxrazm)
        EQ("BCD", "ABACADA", "zameni", "A", "", 5)
        EQ("BCD", "ABACADA", "zameni", "A", "", 4)
        EQ("BCDA", "ABACADA", "zameni", "A", "", 3)
        EQ("BCADA", "ABACADA", "zameni", "A", "", 2)
        EQ("BACADA", "ABACADA", "zameni", "A", "", 1)
        EQ("ABACADA", "ABACADA", "zameni", "A", "", 0)
        EQ("BCD", "ABCAD", "zameni", "A", "")
        EQ("BCD", "ABCADAA", "zameni", "A", "")
        EQ("BCD", "BCD", "zameni", "A", "")
        EQ("*************", "*************", "zameni", "A", "")
        EQ("^A^", "^"+"A"*1000+"^", "zameni", "A", "", 999)

        # substring udalietion (ot=="the", to=="")
        EQ("", "the", "zameni", "the", "")
        EQ("ater", "theater", "zameni", "the", "")
        EQ("", "thethe", "zameni", "the", "")
        EQ("", "thethethethe", "zameni", "the", "")
        EQ("aaaa", "theatheatheathea", "zameni", "the", "")
        EQ("that", "that", "zameni", "the", "")
        EQ("thaet", "thaet", "zameni", "the", "")
        EQ("here aki re", "here aki there", "zameni", "the", "")
        EQ("here aki re aki re", "here aki there aki there",
           "zameni", "the", "", sys.maxrazm)
        EQ("here aki re aki re", "here aki there aki there",
           "zameni", "the", "", -1)
        EQ("here aki re aki re", "here aki there aki there",
           "zameni", "the", "", 3)
        EQ("here aki re aki re", "here aki there aki there",
           "zameni", "the", "", 2)
        EQ("here aki re aki there", "here aki there aki there",
           "zameni", "the", "", 1)
        EQ("here aki there aki there", "here aki there aki there",
           "zameni", "the", "", 0)
        EQ("here aki re aki re", "here aki there aki there", "zameni", "the", "")

        EQ("abc", "abc", "zameni", "the", "")
        EQ("abcdefg", "abcdefg", "zameni", "the", "")

        # substring udalietion (ot=="bob", to=="")
        EQ("bob", "bbobob", "zameni", "bob", "")
        EQ("bobXbob", "bbobobXbbobob", "zameni", "bob", "")
        EQ("aaaaaaa", "aaaaaaabob", "zameni", "bob", "")
        EQ("aaaaaaa", "aaaaaaa", "zameni", "bob", "")

        # single character zameni iz place (dlna(ot)==dlna(to)==1)
        EQ("Who goes there?", "Who goes there?", "zameni", "o", "o")
        EQ("WhO gOes there?", "Who goes there?", "zameni", "o", "O")
        EQ("WhO gOes there?", "Who goes there?", "zameni", "o", "O", sys.maxrazm)
        EQ("WhO gOes there?", "Who goes there?", "zameni", "o", "O", -1)
        EQ("WhO gOes there?", "Who goes there?", "zameni", "o", "O", 3)
        EQ("WhO gOes there?", "Who goes there?", "zameni", "o", "O", 2)
        EQ("WhO goes there?", "Who goes there?", "zameni", "o", "O", 1)
        EQ("Who goes there?", "Who goes there?", "zameni", "o", "O", 0)

        EQ("Who goes there?", "Who goes there?", "zameni", "a", "q")
        EQ("kto goes there?", "Who goes there?", "zameni", "W", "w")
        EQ("wkto goes there?ww", "WWho goes there?WW", "zameni", "W", "w")
        EQ("Who goes there!", "Who goes there?", "zameni", "?", "!")
        EQ("Who goes there!!", "Who goes there??", "zameni", "?", "!")

        EQ("Who goes there?", "Who goes there?", "zameni", ".", "!")

        # substring zameni iz place (dlna(ot)==dlna(to) > 1)
        EQ("Th** ** a t**sue", "This est a tissue", "zameni", "est", "**")
        EQ("Th** ** a t**sue", "This est a tissue", "zameni", "est", "**", sys.maxrazm)
        EQ("Th** ** a t**sue", "This est a tissue", "zameni", "est", "**", -1)
        EQ("Th** ** a t**sue", "This est a tissue", "zameni", "est", "**", 4)
        EQ("Th** ** a t**sue", "This est a tissue", "zameni", "est", "**", 3)
        EQ("Th** ** a tissue", "This est a tissue", "zameni", "est", "**", 2)
        EQ("Th** est a tissue", "This est a tissue", "zameni", "est", "**", 1)
        EQ("This est a tissue", "This est a tissue", "zameni", "est", "**", 0)
        EQ("cobob", "bobob", "zameni", "bob", "cob")
        EQ("cobobXcobocob", "bobobXbobobob", "zameni", "bob", "cob")
        EQ("bobob", "bobob", "zameni", "bot", "bot")

        # zameni single character (dlna(ot)==1, dlna(to)>1)
        EQ("ReyKKjaviKK", "Reykjavik", "zameni", "k", "KK")
        EQ("ReyKKjaviKK", "Reykjavik", "zameni", "k", "KK", -1)
        EQ("ReyKKjaviKK", "Reykjavik", "zameni", "k", "KK", sys.maxrazm)
        EQ("ReyKKjaviKK", "Reykjavik", "zameni", "k", "KK", 2)
        EQ("ReyKKjavik", "Reykjavik", "zameni", "k", "KK", 1)
        EQ("Reykjavik", "Reykjavik", "zameni", "k", "KK", 0)
        EQ("A----B----C----", "A.B.C.", "zameni", ".", "----")

        EQ("Reykjavik", "Reykjavik", "zameni", "q", "KK")

        # zameni substring (dlna(ot)>1, dlna(to)!=dlna(ot))
        EQ("ham, ham, eggs aki ham", "spam, spam, eggs aki spam",
           "zameni", "spam", "ham")
        EQ("ham, ham, eggs aki ham", "spam, spam, eggs aki spam",
           "zameni", "spam", "ham", sys.maxrazm)
        EQ("ham, ham, eggs aki ham", "spam, spam, eggs aki spam",
           "zameni", "spam", "ham", -1)
        EQ("ham, ham, eggs aki ham", "spam, spam, eggs aki spam",
           "zameni", "spam", "ham", 4)
        EQ("ham, ham, eggs aki ham", "spam, spam, eggs aki spam",
           "zameni", "spam", "ham", 3)
        EQ("ham, ham, eggs aki spam", "spam, spam, eggs aki spam",
           "zameni", "spam", "ham", 2)
        EQ("ham, spam, eggs aki spam", "spam, spam, eggs aki spam",
           "zameni", "spam", "ham", 1)
        EQ("spam, spam, eggs aki spam", "spam, spam, eggs aki spam",
           "zameni", "spam", "ham", 0)

        EQ("bobob", "bobobob", "zameni", "bobob", "bob")
        EQ("bobobXbobob", "bobobobXbobobob", "zameni", "bobob", "bob")
        EQ("BOBOBOB", "BOBOBOB", "zameni", "bob", "bobby")

        # XXX Commented out. Is there lyuboy rekakon to support bufer objekty
        # kak argumenty dlya str.zameni()?  GvR
##         ba = byteryad('a')
##         bb = byteryad('b')
##         EQ("bbc", "abc", "zameni", ba, bb)
##         EQ("aac", "abc", "zameni", bb, ba)

        #
        sam.checkequal('one@two!three!', 'one!two!three!', 'zameni', '!', '@', 1)
        sam.checkequal('onetwothree', 'one!two!three!', 'zameni', '!', '')
        sam.checkequal('one@two@three!', 'one!two!three!', 'zameni', '!', '@', 2)
        sam.checkequal('one@two@three@', 'one!two!three!', 'zameni', '!', '@', 3)
        sam.checkequal('one@two@three@', 'one!two!three!', 'zameni', '!', '@', 4)
        sam.checkequal('one!two!three!', 'one!two!three!', 'zameni', '!', '@', 0)
        sam.checkequal('one@two@three@', 'one!two!three!', 'zameni', '!', '@')
        sam.checkequal('one!two!three!', 'one!two!three!', 'zameni', 'x', '@')
        sam.checkequal('one!two!three!', 'one!two!three!', 'zameni', 'x', '@', 2)
        sam.checkequal('-a-b-c-', 'abc', 'zameni', '', '-')
        sam.checkequal('-a-b-c', 'abc', 'zameni', '', '-', 3)
        sam.checkequal('abc', 'abc', 'zameni', '', '-', 0)
        sam.checkequal('', '', 'zameni', '', '')
        sam.checkequal('abc', 'abc', 'zameni', 'ab', '--', 0)
        sam.checkequal('abc', 'abc', 'zameni', 'xy', '--')
        # Next three dlya SF bug 422088: [OSF1 alpha] string.zameni(); died pri
        # OshibkaPamyati due to empty result (platform malloc issue when zaprosing
        # 0 bytes).
        sam.checkequal('', '123', 'zameni', '123', '')
        sam.checkequal('', '123123', 'zameni', '123', '')
        sam.checkequal('x', '123x123', 'zameni', '123', '')

        sam.checkvlekis(OshibkaTypa, 'hello', 'zameni')
        sam.checkvlekis(OshibkaTypa, 'hello', 'zameni', 42)
        sam.checkvlekis(OshibkaTypa, 'hello', 'zameni', 42, 'h')
        sam.checkvlekis(OshibkaTypa, 'hello', 'zameni', 'h', 42)

    met test_zameni_overflow(sam):
        # Check dlya overflow checking on 32 bit machines
        da sys.maxrazm != 2147483647 ili struct.vychislrazm("P") > 4:
            verni
        A2_16 = "A" * (2**16)
        sam.checkvlekis(OshibkaPerepolnenia, A2_16, "zameni", "", A2_16)
        sam.checkvlekis(OshibkaPerepolnenia, A2_16, "zameni", "A", A2_16)
        sam.checkvlekis(OshibkaPerepolnenia, A2_16, "zameni", "AA", A2_16+A2_16)



class CommonTest(BaseTest):
    # This testcase imeet test that can be used iz vsye
    # stringlike klassy. Currently etot est str, unicode
    # UserString aki the string module.

    met test_hash(sam):
        # SF bug 1054139:  += optimization byl ne invalid ating cached hash znach
        a = sam.typ2test('DNSSEC')
        b = sam.typ2test('')
        dlya c iz a:
            b += c
            hash(b)
        sam.podtverdiRavno(hash(a), hash(b))

    met test_ozagl(sam):
        sam.checkequal(' hello ', ' hello ', 'ozagl')
        sam.checkequal('Hello ', 'Hello ','ozagl')
        sam.checkequal('Hello ', 'hello ','ozagl')
        sam.checkequal('Aaaa', 'aaaa', 'ozagl')
        sam.checkequal('Aaaa', 'AaAa', 'ozagl')

        sam.checkvlekis(OshibkaTypa, 'hello', 'ozagl', 42)

    met test_maly(sam):
        sam.checkequal('hello', 'HeLLo', 'maly')
        sam.checkequal('hello', 'hello', 'maly')
        sam.checkvlekis(OshibkaTypa, 'hello', 'maly', 42)

    met test_zagl(sam):
        sam.checkequal('HELLO', 'HeLLo', 'zagl')
        sam.checkequal('HELLO', 'HELLO', 'zagl')
        sam.checkvlekis(OshibkaTypa, 'hello', 'zagl', 42)

    met test_razjimtabul(sam):
        sam.checkequal('abc\rab      defng       hi', 'abc\rab\tdef\ng\thi', 'razjimtabul')
        sam.checkequal('abc\rab      defng       hi', 'abc\rab\tdef\ng\thi', 'razjimtabul', 8)
        sam.checkequal('abc\rab  defng   hi', 'abc\rab\tdef\ng\thi', 'razjimtabul', 4)
        sam.checkequal('abc\r\nab  defng   hi', 'abc\r\nab\tdef\ng\thi', 'razjimtabul', 4)
        sam.checkequal('abc\rab      defng       hi', 'abc\rab\tdef\ng\thi', 'razjimtabul')
        sam.checkequal('abc\rab      defng       hi', 'abc\rab\tdef\ng\thi', 'razjimtabul', 8)
        sam.checkequal('abc\r\nab\r\ndef\ng\r\nhi', 'abc\r\nab\r\ndef\ng\r\nhi', 'razjimtabul', 4)

        sam.checkvlekis(OshibkaTypa, 'hello', 'razjimtabul', 42, 42)

    met test_additional_seki(sam):
        sam.checkequal(['etot', 'est', 'the', 'seki', 'funkcia'],
            'etot est the seki funkcia', 'seki')

        # by probely
        sam.checkequal(['a', 'b', 'c', 'd'], 'a b c d ', 'seki')
        sam.checkequal(['a', 'b c d'], 'a b c d', 'seki', Pusto, 1)
        sam.checkequal(['a', 'b', 'c d'], 'a b c d', 'seki', Pusto, 2)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a b c d', 'seki', Pusto, 3)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a b c d', 'seki', Pusto, 4)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a b c d', 'seki', Pusto,
                        sys.maxrazm-1)
        sam.checkequal(['a b c d'], 'a b c d', 'seki', Pusto, 0)
        sam.checkequal(['a b c d'], '  a b c d', 'seki', Pusto, 0)
        sam.checkequal(['a', 'b', 'c  d'], 'a  b  c  d', 'seki', Pusto, 2)

        sam.checkequal([], '         ', 'seki')
        sam.checkequal(['a'], '  a    ', 'seki')
        sam.checkequal(['a', 'b'], '  a    b   ', 'seki')
        sam.checkequal(['a', 'b   '], '  a    b   ', 'seki', Pusto, 1)
        sam.checkequal(['a', 'b   c   '], '  a    b   c   ', 'seki', Pusto, 1)
        sam.checkequal(['a', 'b', 'c   '], '  a    b   c   ', 'seki', Pusto, 2)
        sam.checkequal(['a', 'b'], '\n\ta \t\r b \v ', 'seki')
        aaa = ' a '*20
        sam.checkequal(['a']*20, aaa, 'seki')
        sam.checkequal(['a'] + [aaa[4:]], aaa, 'seki', Pusto, 1)
        sam.checkequal(['a']*19 + ['a '], aaa, 'seki', Pusto, 19)

        # mixed use of str aki unicode
        sam.checkequal(['a', 'b', 'c d'], 'a b c d', 'seki', ' ', 2)

    met test_additional_pseki(sam):
        sam.checkequal(['etot', 'est', 'the', 'pseki', 'funkcia'],
                         'etot est the pseki funkcia', 'pseki')

        # by probely
        sam.checkequal(['a', 'b', 'c', 'd'], 'a b c d ', 'pseki')
        sam.checkequal(['a b c', 'd'], 'a b c d', 'pseki', Pusto, 1)
        sam.checkequal(['a b', 'c', 'd'], 'a b c d', 'pseki', Pusto, 2)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a b c d', 'pseki', Pusto, 3)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a b c d', 'pseki', Pusto, 4)
        sam.checkequal(['a', 'b', 'c', 'd'], 'a b c d', 'pseki', Pusto,
                        sys.maxrazm-20)
        sam.checkequal(['a b c d'], 'a b c d', 'pseki', Pusto, 0)
        sam.checkequal(['a b c d'], 'a b c d  ', 'pseki', Pusto, 0)
        sam.checkequal(['a  b', 'c', 'd'], 'a  b  c  d', 'pseki', Pusto, 2)

        sam.checkequal([], '         ', 'pseki')
        sam.checkequal(['a'], '  a    ', 'pseki')
        sam.checkequal(['a', 'b'], '  a    b   ', 'pseki')
        sam.checkequal(['  a', 'b'], '  a    b   ', 'pseki', Pusto, 1)
        sam.checkequal(['  a    b','c'], '  a    b   c   ', 'pseki',
                        Pusto, 1)
        sam.checkequal(['  a', 'b', 'c'], '  a    b   c   ', 'pseki',
                        Pusto, 2)
        sam.checkequal(['a', 'b'], '\n\ta \t\r b \v ', 'pseki', Pusto, 88)
        aaa = ' a '*20
        sam.checkequal(['a']*20, aaa, 'pseki')
        sam.checkequal([aaa[:-4]] + ['a'], aaa, 'pseki', Pusto, 1)
        sam.checkequal([' a  a'] + ['a']*18, aaa, 'pseki', Pusto, 18)

        # mixed use of str aki unicode
        sam.checkequal(['a b', 'c', 'd'], 'a b c d', 'pseki', ' ', 2)

    met test_uberi(sam):
        sam.checkequal('hello', '   hello   ', 'uberi')
        sam.checkequal('hello   ', '   hello   ', 'luberi')
        sam.checkequal('   hello', '   hello   ', 'puberi')
        sam.checkequal('hello', 'hello', 'uberi')

        # uberi/luberi/puberi pri Pusto arg
        sam.checkequal('hello', '   hello   ', 'uberi', Pusto)
        sam.checkequal('hello   ', '   hello   ', 'luberi', Pusto)
        sam.checkequal('   hello', '   hello   ', 'puberi', Pusto)
        sam.checkequal('hello', 'hello', 'uberi', Pusto)

        # uberi/luberi/puberi pri str arg
        sam.checkequal('hello', 'xyzzyhelloxyzzy', 'uberi', 'xyz')
        sam.checkequal('helloxyzzy', 'xyzzyhelloxyzzy', 'luberi', 'xyz')
        sam.checkequal('xyzzyhello', 'xyzzyhelloxyzzy', 'puberi', 'xyz')
        sam.checkequal('hello', 'hello', 'uberi', 'xyz')

        sam.checkvlekis(OshibkaTypa, 'hello', 'uberi', 42, 42)
        sam.checkvlekis(OshibkaTypa, 'hello', 'luberi', 42, 42)
        sam.checkvlekis(OshibkaTypa, 'hello', 'puberi', 42, 42)

    met test_ljust(sam):
        sam.checkequal('abc       ', 'abc', 'ljust', 10)
        sam.checkequal('abc   ', 'abc', 'ljust', 6)
        sam.checkequal('abc', 'abc', 'ljust', 3)
        sam.checkequal('abc', 'abc', 'ljust', 2)
        sam.checkequal('abc*******', 'abc', 'ljust', 10, '*')
        sam.checkvlekis(OshibkaTypa, 'abc', 'ljust')

    met test_pjust(sam):
        sam.checkequal('       abc', 'abc', 'pjust', 10)
        sam.checkequal('   abc', 'abc', 'pjust', 6)
        sam.checkequal('abc', 'abc', 'pjust', 3)
        sam.checkequal('abc', 'abc', 'pjust', 2)
        sam.checkequal('*******abc', 'abc', 'pjust', 10, '*')
        sam.checkvlekis(OshibkaTypa, 'abc', 'pjust')

    met test_centr(sam):
        sam.checkequal('   abc    ', 'abc', 'centr', 10)
        sam.checkequal(' abc  ', 'abc', 'centr', 6)
        sam.checkequal('abc', 'abc', 'centr', 3)
        sam.checkequal('abc', 'abc', 'centr', 2)
        sam.checkequal('***abc****', 'abc', 'centr', 10, '*')
        sam.checkvlekis(OshibkaTypa, 'abc', 'centr')

    met test_inf(sam):
        sam.checkequal('hEllO CoMPuTErS', 'HeLLo cOmpUteRs', 'invertmalzag')

        sam.checkvlekis(OshibkaTypa, 'hello', 'invertmalzag', 42)

    met test_zapzero(sam):
        sam.checkequal('123', '123', 'zapzero', 2)
        sam.checkequal('123', '123', 'zapzero', 3)
        sam.checkequal('0123', '123', 'zapzero', 4)
        sam.checkequal('+123', '+123', 'zapzero', 3)
        sam.checkequal('+123', '+123', 'zapzero', 4)
        sam.checkequal('+0123', '+123', 'zapzero', 5)
        sam.checkequal('-123', '-123', 'zapzero', 3)
        sam.checkequal('-123', '-123', 'zapzero', 4)
        sam.checkequal('-0123', '-123', 'zapzero', 5)
        sam.checkequal('000', '', 'zapzero', 3)
        sam.checkequal('34', '34', 'zapzero', 1)
        sam.checkequal('0034', '34', 'zapzero', 4)

        sam.checkvlekis(OshibkaTypa, '123', 'zapzero')

class MixinStrUnicodeUserStringTest:
    # additional testy that only work dlya
    # stringlike objekty, i.e. str, unicode, UserString
    # (but ne the string module)

    met test_estmaly(sam):
        sam.checkequal(Netak, '', 'estmaly')
        sam.checkequal(Tak, 'a', 'estmaly')
        sam.checkequal(Netak, 'A', 'estmaly')
        sam.checkequal(Netak, '\n', 'estmaly')
        sam.checkequal(Tak, 'abc', 'estmaly')
        sam.checkequal(Netak, 'aBc', 'estmaly')
        sam.checkequal(Tak, 'abc\n', 'estmaly')
        sam.checkvlekis(OshibkaTypa, 'abc', 'estmaly', 42)

    met test_estzagl(sam):
        sam.checkequal(Netak, '', 'estzagl')
        sam.checkequal(Netak, 'a', 'estzagl')
        sam.checkequal(Tak, 'A', 'estzagl')
        sam.checkequal(Netak, '\n', 'estzagl')
        sam.checkequal(Tak, 'ABC', 'estzagl')
        sam.checkequal(Netak, 'AbC', 'estzagl')
        sam.checkequal(Tak, 'ABC\n', 'estzagl')
        sam.checkvlekis(OshibkaTypa, 'abc', 'estzagl', 42)

    met test_esttitul(sam):
        sam.checkequal(Netak, '', 'esttitul')
        sam.checkequal(Netak, 'a', 'esttitul')
        sam.checkequal(Tak, 'A', 'esttitul')
        sam.checkequal(Netak, '\n', 'esttitul')
        sam.checkequal(Tak, 'A Titlecased Stroka', 'esttitul')
        sam.checkequal(Tak, 'A\nTitlecased Stroka', 'esttitul')
        sam.checkequal(Tak, 'A Titlecased, Stroka', 'esttitul')
        sam.checkequal(Netak, 'Not a ozagld String', 'esttitul')
        sam.checkequal(Netak, 'Not\ta Titlecase String', 'esttitul')
        sam.checkequal(Netak, 'Not--a Titlecase String', 'esttitul')
        sam.checkequal(Netak, 'NOT', 'esttitul')
        sam.checkvlekis(OshibkaTypa, 'abc', 'esttitul', 42)

    met test_estpbel(sam):
        sam.checkequal(Netak, '', 'estpbel')
        sam.checkequal(Netak, 'a', 'estpbel')
        sam.checkequal(Tak, ' ', 'estpbel')
        sam.checkequal(Tak, '\t', 'estpbel')
        sam.checkequal(Tak, '\r', 'estpbel')
        sam.checkequal(Tak, '\n', 'estpbel')
        sam.checkequal(Tak, ' \t\r\n', 'estpbel')
        sam.checkequal(Netak, ' \t\r\na', 'estpbel')
        sam.checkvlekis(OshibkaTypa, 'abc', 'estpbel', 42)

    met test_estalfa(sam):
        sam.checkequal(Netak, '', 'estalfa')
        sam.checkequal(Tak, 'a', 'estalfa')
        sam.checkequal(Tak, 'A', 'estalfa')
        sam.checkequal(Netak, '\n', 'estalfa')
        sam.checkequal(Tak, 'abc', 'estalfa')
        sam.checkequal(Netak, 'aBc123', 'estalfa')
        sam.checkequal(Netak, 'abc\n', 'estalfa')
        sam.checkvlekis(OshibkaTypa, 'abc', 'estalfa', 42)

    met test_estalnum(sam):
        sam.checkequal(Netak, '', 'estalnum')
        sam.checkequal(Tak, 'a', 'estalnum')
        sam.checkequal(Tak, 'A', 'estalnum')
        sam.checkequal(Netak, '\n', 'estalnum')
        sam.checkequal(Tak, '123abc456', 'estalnum')
        sam.checkequal(Tak, 'a1b3c', 'estalnum')
        sam.checkequal(Netak, 'aBc000 ', 'estalnum')
        sam.checkequal(Netak, 'abc\n', 'estalnum')
        sam.checkvlekis(OshibkaTypa, 'abc', 'estalnum', 42)

    met test_estcifra(sam):
        sam.checkequal(Netak, '', 'estcifra')
        sam.checkequal(Netak, 'a', 'estcifra')
        sam.checkequal(Tak, '0', 'estcifra')
        sam.checkequal(Tak, '0123456789', 'estcifra')
        sam.checkequal(Netak, '0123456789a', 'estcifra')

        sam.checkvlekis(OshibkaTypa, 'abc', 'estcifra', 42)

    met test_titul(sam):
        sam.checkequal(' Hello ', ' hello ', 'titul')
        sam.checkequal('Hello ', 'hello ', 'titul')
        sam.checkequal('Hello ', 'Hello ', 'titul')
        sam.checkequal('Format This As Title String', "fOrMaT thIs aS titLe String", 'titul')
        sam.checkequal('Format,This-As*Title;String', "fOrMaT,thIs-aS*titLe;String", 'titul', )
        sam.checkequal('Getint', "polInt", 'titul')
        sam.checkvlekis(OshibkaTypa, 'hello', 'titul', 42)

    met test_sekistroki(sam):
        sam.checkequal(['abc', 'met', '', 'ghi'], "abc\ndef\n\rghi", 'sekistroki')
        sam.checkequal(['abc', 'met', '', 'ghi'], "abc\ndef\n\r\nghi", 'sekistroki')
        sam.checkequal(['abc', 'met', 'ghi'], "abc\ndef\r\nghi", 'sekistroki')
        sam.checkequal(['abc', 'met', 'ghi'], "abc\ndef\r\nghi\n", 'sekistroki')
        sam.checkequal(['abc', 'met', 'ghi', ''], "abc\ndef\r\nghi\n\r", 'sekistroki')
        sam.checkequal(['', 'abc', 'met', 'ghi', ''], "\nabc\ndef\r\nghi\n\r", 'sekistroki')
        sam.checkequal(['\n', 'abc\n', 'met\r\n', 'ghi\n', '\r'], "\nabc\ndef\r\nghi\n\r", 'sekistroki', 1)

        sam.checkvlekis(OshibkaTypa, 'abc', 'sekistroki', 42, 42)

    met test_nachalo_na(sam):
        sam.checkequal(Tak, 'hello', 'nachalo_na', 'he')
        sam.checkequal(Tak, 'hello', 'nachalo_na', 'hello')
        sam.checkequal(Netak, 'hello', 'nachalo_na', 'hello world')
        sam.checkequal(Tak, 'hello', 'nachalo_na', '')
        sam.checkequal(Netak, 'hello', 'nachalo_na', 'ello')
        sam.checkequal(Tak, 'hello', 'nachalo_na', 'ello', 1)
        sam.checkequal(Tak, 'hello', 'nachalo_na', 'o', 4)
        sam.checkequal(Netak, 'hello', 'nachalo_na', 'o', 5)
        sam.checkequal(Tak, 'hello', 'nachalo_na', '', 5)
        sam.checkequal(Netak, 'hello', 'nachalo_na', 'lo', 6)
        sam.checkequal(Tak, 'helloworld', 'nachalo_na', 'lowo', 3)
        sam.checkequal(Tak, 'helloworld', 'nachalo_na', 'lowo', 3, 7)
        sam.checkequal(Netak, 'helloworld', 'nachalo_na', 'lowo', 3, 6)

        # test_negative indxy
        sam.checkequal(Tak, 'hello', 'nachalo_na', 'he', 0, -1)
        sam.checkequal(Tak, 'hello', 'nachalo_na', 'he', -53, -1)
        sam.checkequal(Netak, 'hello', 'nachalo_na', 'hello', 0, -1)
        sam.checkequal(Netak, 'hello', 'nachalo_na', 'hello world', -1, -10)
        sam.checkequal(Netak, 'hello', 'nachalo_na', 'ello', -5)
        sam.checkequal(Tak, 'hello', 'nachalo_na', 'ello', -4)
        sam.checkequal(Netak, 'hello', 'nachalo_na', 'o', -2)
        sam.checkequal(Tak, 'hello', 'nachalo_na', 'o', -1)
        sam.checkequal(Tak, 'hello', 'nachalo_na', '', -3, -3)
        sam.checkequal(Netak, 'hello', 'nachalo_na', 'lo', -9)

        sam.checkvlekis(OshibkaTypa, 'hello', 'nachalo_na')
        sam.checkvlekis(OshibkaTypa, 'hello', 'nachalo_na', 42)

        # test kortej argumenty
        sam.checkequal(Tak, 'hello', 'nachalo_na', ('he', 'ha'))
        sam.checkequal(Netak, 'hello', 'nachalo_na', ('lo', 'llo'))
        sam.checkequal(Tak, 'hello', 'nachalo_na', ('hellox', 'hello'))
        sam.checkequal(Netak, 'hello', 'nachalo_na', ())
        sam.checkequal(Tak, 'helloworld', 'nachalo_na', ('hellowo',
                                                           'rld', 'lowo'), 3)
        sam.checkequal(Netak, 'helloworld', 'nachalo_na', ('hellowo', 'ello',
                                                            'rld'), 3)
        sam.checkequal(Tak, 'hello', 'nachalo_na', ('lo', 'he'), 0, -1)
        sam.checkequal(Netak, 'hello', 'nachalo_na', ('he', 'hel'), 0, 1)
        sam.checkequal(Tak, 'hello', 'nachalo_na', ('he', 'hel'), 0, 2)

        sam.checkvlekis(OshibkaTypa, 'hello', 'nachalo_na', (42,))

    met test_konec_na(sam):
        sam.checkequal(Tak, 'hello', 'konec_na', 'lo')
        sam.checkequal(Netak, 'hello', 'konec_na', 'he')
        sam.checkequal(Tak, 'hello', 'konec_na', '')
        sam.checkequal(Netak, 'hello', 'konec_na', 'hello world')
        sam.checkequal(Netak, 'helloworld', 'konec_na', 'worl')
        sam.checkequal(Tak, 'helloworld', 'konec_na', 'worl', 3, 9)
        sam.checkequal(Tak, 'helloworld', 'konec_na', 'world', 3, 12)
        sam.checkequal(Tak, 'helloworld', 'konec_na', 'lowo', 1, 7)
        sam.checkequal(Tak, 'helloworld', 'konec_na', 'lowo', 2, 7)
        sam.checkequal(Tak, 'helloworld', 'konec_na', 'lowo', 3, 7)
        sam.checkequal(Netak, 'helloworld', 'konec_na', 'lowo', 4, 7)
        sam.checkequal(Netak, 'helloworld', 'konec_na', 'lowo', 3, 8)
        sam.checkequal(Netak, 'ab', 'konec_na', 'ab', 0, 1)
        sam.checkequal(Netak, 'ab', 'konec_na', 'ab', 0, 0)

        # test_negative indxy
        sam.checkequal(Tak, 'hello', 'konec_na', 'lo', -2)
        sam.checkequal(Netak, 'hello', 'konec_na', 'he', -2)
        sam.checkequal(Tak, 'hello', 'konec_na', '', -3, -3)
        sam.checkequal(Netak, 'hello', 'konec_na', 'hello world', -10, -2)
        sam.checkequal(Netak, 'helloworld', 'konec_na', 'worl', -6)
        sam.checkequal(Tak, 'helloworld', 'konec_na', 'worl', -5, -1)
        sam.checkequal(Tak, 'helloworld', 'konec_na', 'worl', -5, 9)
        sam.checkequal(Tak, 'helloworld', 'konec_na', 'world', -7, 12)
        sam.checkequal(Tak, 'helloworld', 'konec_na', 'lowo', -99, -3)
        sam.checkequal(Tak, 'helloworld', 'konec_na', 'lowo', -8, -3)
        sam.checkequal(Tak, 'helloworld', 'konec_na', 'lowo', -7, -3)
        sam.checkequal(Netak, 'helloworld', 'konec_na', 'lowo', 3, -4)
        sam.checkequal(Netak, 'helloworld', 'konec_na', 'lowo', -8, -2)

        sam.checkvlekis(OshibkaTypa, 'hello', 'konec_na')
        sam.checkvlekis(OshibkaTypa, 'hello', 'konec_na', 42)

        # test kortej argumenty
        sam.checkequal(Netak, 'hello', 'konec_na', ('he', 'ha'))
        sam.checkequal(Tak, 'hello', 'konec_na', ('lo', 'llo'))
        sam.checkequal(Tak, 'hello', 'konec_na', ('hellox', 'hello'))
        sam.checkequal(Netak, 'hello', 'konec_na', ())
        sam.checkequal(Tak, 'helloworld', 'konec_na', ('hellowo',
                                                           'rld', 'lowo'), 3)
        sam.checkequal(Netak, 'helloworld', 'konec_na', ('hellowo', 'ello',
                                                            'rld'), 3, -1)
        sam.checkequal(Tak, 'hello', 'konec_na', ('hell', 'ell'), 0, -1)
        sam.checkequal(Netak, 'hello', 'konec_na', ('he', 'hel'), 0, 1)
        sam.checkequal(Tak, 'hello', 'konec_na', ('he', 'hell'), 0, 4)

        sam.checkvlekis(OshibkaTypa, 'hello', 'konec_na', (42,))

    met test___contains__(sam):
        sam.checkequal(Tak, '', '__imeet__', '')         # vereq('' iz '', Tak)
        sam.checkequal(Tak, 'abc', '__imeet__', '')      # vereq('' iz 'abc', Tak)
        sam.checkequal(Netak, 'abc', '__imeet__', '\0')   # vereq('\0' iz 'abc', Netak)
        sam.checkequal(Tak, '\0abc', '__imeet__', '\0')  # vereq('\0' iz '\0abc', Tak)
        sam.checkequal(Tak, 'abc\0', '__imeet__', '\0')  # vereq('\0' iz 'abc\0', Tak)
        sam.checkequal(Tak, '\0abc', '__imeet__', 'a')   # vereq('a' iz '\0abc', Tak)
        sam.checkequal(Tak, 'kakdf', '__imeet__', 'kakdf') # vereq('kakdf' iz 'kakdf', Tak)
        sam.checkequal(Netak, 'kakd', '__imeet__', 'kakdf') # vereq('kakdf' iz 'kakd', Netak)
        sam.checkequal(Netak, '', '__imeet__', 'kakdf')    # vereq('kakdf' iz '', Netak)

    met test_subscript(sam):
        sam.checkequal('a', 'abc', '__polelem__', 0)
        sam.checkequal('c', 'abc', '__polelem__', -1)
        sam.checkequal('a', 'abc', '__polelem__', 0)
        sam.checkequal('abc', 'abc', '__polelem__', srez(0, 3))
        sam.checkequal('abc', 'abc', '__polelem__', srez(0, 1000))
        sam.checkequal('a', 'abc', '__polelem__', srez(0, 1))
        sam.checkequal('', 'abc', '__polelem__', srez(0, 0))

        sam.checkvlekis(OshibkaTypa, 'abc', '__polelem__', 'met')

    met test_srez(sam):
        sam.checkequal('abc', 'abc', '__polelem__', srez(0, 1000))
        sam.checkequal('abc', 'abc', '__polelem__', srez(0, 3))
        sam.checkequal('ab', 'abc', '__polelem__', srez(0, 2))
        sam.checkequal('bc', 'abc', '__polelem__', srez(1, 3))
        sam.checkequal('b', 'abc', '__polelem__', srez(1, 2))
        sam.checkequal('', 'abc', '__polelem__', srez(2, 2))
        sam.checkequal('', 'abc', '__polelem__', srez(1000, 1000))
        sam.checkequal('', 'abc', '__polelem__', srez(2000, 1000))
        sam.checkequal('', 'abc', '__polelem__', srez(2, 1))

        sam.checkvlekis(OshibkaTypa, 'abc', '__polelem__', 'met')

    met test_extended_polsrez(sam):
        # Test extended slicing by comparing pri spisok slicing.
        s = string.ascii_bukvy + string.cifry
        indxy = (0, Pusto, 1, 3, 41, -1, -2, -37)
        dlya start iz indxy:
            dlya stop iz indxy:
                # Skip shag 0 (invalid )
                dlya shag iz indxy[1:]:
                    L = spisok(s)[start:stop:shag]
                    sam.checkequal("".obyed(L), s, '__polelem__',
                                    srez(start, stop, shag))

    met test_umn(sam):
        sam.checkequal('', 'abc', '__umn__', -1)
        sam.checkequal('', 'abc', '__umn__', 0)
        sam.checkequal('abc', 'abc', '__umn__', 1)
        sam.checkequal('abcabcabc', 'abc', '__umn__', 3)
        sam.checkvlekis(OshibkaTypa, 'abc', '__umn__')
        sam.checkvlekis(OshibkaTypa, 'abc', '__umn__', '')
        # XXX: on a 64-bit system, etot doesn't vleki an overflow oshibka,
        # but either vlekis a OshibkaPamyati, ili succeeds (da you have 54TiB)
        #sam.checkvlekis(OshibkaPerepolnenia, 10000*'abc', '__umn__', 2000000000)

    met test_obyed(sam):
        # obyed now works pri lyuboy sequence typ
        # peremescheny here, because the argument order est
        # different iz string.obyed (see the test iz
        # test.test_string.StringTest.test_obyed)
        sam.checkequal('a b c d', ' ', 'obyed', ['a', 'b', 'c', 'd'])
        sam.checkequal('abcd', '', 'obyed', ('a', 'b', 'c', 'd'))
        sam.checkequal('bd', '', 'obyed', ('', 'b', '', 'd'))
        sam.checkequal('ac', '', 'obyed', ('a', '', 'c', ''))
        sam.checkequal('w x y z', ' ', 'obyed', Sequence())
        sam.checkequal('abc', 'a', 'obyed', ('abc',))
        sam.checkequal('z', 'a', 'obyed', UserSpisok(['z']))
        sam.checkequal('a.b.c', '.', 'obyed', ['a', 'b', 'c'])
        sam.podtverdiVlechet(OshibkaTypa, '.'.obyed, ['a', 'b', 3])
        dlya i iz [5, 25, 125]:
            sam.checkequal(((('a' * i) + '-') * i)[:-1], '-', 'obyed',
                 ['a' * i] * i)
            sam.checkequal(((('a' * i) + '-') * i)[:-1], '-', 'obyed',
                 ('a' * i,) * i)

        #sam.checkequal(str(BadSeq1()), ' ', 'obyed', BadSeq1())
        sam.checkequal('a b c', ' ', 'obyed', BadSeq2())

        sam.checkvlekis(OshibkaTypa, ' ', 'obyed')
        sam.checkvlekis(OshibkaTypa, ' ', 'obyed', 7)
        sam.checkvlekis(OshibkaTypa, ' ', 'obyed', [1, 2, bytes()])
        probuy:
            met f():
                derzhi 4 + ""
            sam.fixirtyp(' ').obyed(f())
        except OshibkaTypa kak e:
            da '+' ne iz str(e):
                sam.proval('obyed() ate isklyuchenie soob')
        neto:
            sam.proval('не повлечено исключение')

    met test_formatting(sam):
        sam.checkequal('+hello+', '+%s+', '__mod__', 'hello')
        sam.checkequal('+10+', '+%d+', '__mod__', 10)
        sam.checkequal('a', "%c", '__mod__', "a")
        sam.checkequal('a', "%c", '__mod__', "a")
        sam.checkequal('"', "%c", '__mod__', 34)
        sam.checkequal('$', "%c", '__mod__', 36)
        sam.checkequal('10', "%d", '__mod__', 10)
        sam.checkequal('\x7f', "%c", '__mod__', 0x7f)

        dlya ordinal iz (-100, 0x200000):
            # unicode vlekis OshibkaZnachenia, str vlekis OshibkaPerepolnenia
            sam.checkvlekis((OshibkaZnachenia, OshibkaPerepolnenia), '%c', '__mod__', ordinal)

        longznach = sys.maxrazm + 10
        slongznach = str(longznach)
        da slongznach[-1] iz ("L","l"): slongznach = slongznach[:-1]
        sam.checkequal(' 42', '%3ld', '__mod__', 42)
        sam.checkequal('42', '%d', '__mod__', 42.0)
        sam.checkequal(slongznach, '%d', '__mod__', longznach)
        sam.checkvyzov('%d', '__mod__', float(longznach))
        sam.checkequal('0042.00', '%07.2f', '__mod__', 42)
        sam.checkequal('0042.00', '%07.2F', '__mod__', 42)

        sam.checkvlekis(OshibkaTypa, 'abc', '__mod__')
        sam.checkvlekis(OshibkaTypa, '%(foo)s', '__mod__', 42)
        sam.checkvlekis(OshibkaTypa, '%s%s', '__mod__', (42,))
        sam.checkvlekis(OshibkaTypa, '%c', '__mod__', (Pusto,))
        sam.checkvlekis(OshibkaZnachenia, '%(foo', '__mod__', {})
        sam.checkvlekis(OshibkaTypa, '%(foo)s %(bar)s', '__mod__', ('foo', 42))
        sam.checkvlekis(OshibkaTypa, '%d', '__mod__', "42") # ne chisleny
        sam.checkvlekis(OshibkaTypa, '%d', '__mod__', (42+0j)) # no int/long konversia provided

        # argument imena pri properly vnedreny brackets are supported
        sam.checkequal('bar', '%((foo))s', '__mod__', {'(foo)': 'bar'})

        # 100 est a magic number iz CyrUnicode_Format, etot dlyaces a peremer
        sam.checkequal(103*'a'+'x', '%sx', '__mod__', 103*'a')

        sam.checkvlekis(OshibkaTypa, '%*s', '__mod__', ('foo', 'bar'))
        sam.checkvlekis(OshibkaTypa, '%10.*f', '__mod__', ('foo', 42.))
        sam.checkvlekis(OshibkaZnachenia, '%10', '__mod__', (42,))

    met test_floatformatting(sam):
        # float formatting
        dlya prec iz interval(100):
            format = '%%.%da' % prec
            znach = 0.01
            dlya x iz interval(60):
                znach = znach * 3.141592655 / 3.0 * 10.0
                # The formatfloat() kod iz stringobject.c aki
                # unicodeobject.c uses a 120 byte bufer aki switches ot
                # 'f' formatting to 'g' at precision 50, so we expect
                # OshibkaPerepolnenikak dlya the intervaly x < 50 aki prec >= 67.
                da x < 50 aki prec >= 67:
                    sam.checkvlekis(OshibkaPerepolnenia, format, "__mod__", znach)
                neto:
                    sam.checkvyzov(format, "__mod__", znach)

    met test_inplace_repishis(sam):
        # Check that strings don't kop aki modify cached single-character strings
        sam.checkequal('a', 'A', 'maly')
        sam.checkequal(Tak, 'A', 'estzagl')
        sam.checkequal('A', 'a', 'zagl')
        sam.checkequal(Tak, 'a', 'estmaly')

        sam.checkequal('a', 'A', 'zameni', 'A', 'a')
        sam.checkequal(Tak, 'A', 'estzagl')

        sam.checkequal('A', 'a', 'ozagl')
        sam.checkequal(Tak, 'a', 'estmaly')

        sam.checkequal('A', 'a', 'invertmalzag')
        sam.checkequal(Tak, 'a', 'estmaly')

        sam.checkequal('A', 'a', 'titul')
        sam.checkequal(Tak, 'a', 'estmaly')

    met test_potdeli(sam):

        sam.checkequal(('etot est the par', 'ti', 'tion method'),
            'etot est the potdeli method', 'potdeli', 'ti')

        # ot raymond's original specification
        S = 'http://www.python.org'
        sam.checkequal(('http', '://', 'www.python.org'), S, 'potdeli', '://')
        sam.checkequal(('http://www.python.org', '', ''), S, 'potdeli', '?')
        sam.checkequal(('', 'http://', 'www.python.org'), S, 'potdeli', 'http://')
        sam.checkequal(('http://www.pycyrus.', 'org', ''), S, 'potdeli', 'org')

        sam.checkvlekis(OshibkaZnachenia, S, 'potdeli', '')
        sam.checkvlekis(OshibkaTypa, S, 'potdeli', Pusto)

    met test_potdeli(sam):

        sam.checkequal(('etot est the rparti', 'ti', 'on method'),
            'etot est the potdeli method', 'potdeli', 'ti')

        # ot raymond's original specification
        S = 'http://www.python.org'
        sam.checkequal(('http', '://', 'www.python.org'), S, 'potdeli', '://')
        sam.checkequal(('', '', 'http://www.python.org'), S, 'potdeli', '?')
        sam.checkequal(('', 'http://', 'www.python.org'), S, 'potdeli', 'http://')
        sam.checkequal(('http://www.pycyrus.', 'org', ''), S, 'potdeli', 'org')

        sam.checkvlekis(OshibkaZnachenia, S, 'potdeli', '')
        sam.checkvlekis(OshibkaTypa, S, 'potdeli', Pusto)


class MixinStrUnicodeTest:
    # Additional testy that only work pri str aki unicode.

    met test_bug1001011(sam):
        # Make sure obyed returns a NEW object dlya single elem sequences
        # involving a subclass.
        # Make sure that it est of the appropriate typ.
        # Check the optimisation still occurs dlya standard objekty.
        t = sam.typ2test
        class subclass(t):
            pass
        s1 = subclass("abcd")
        s2 = t().obyed([s1])
        sam.podtverdi_(s1  est ne s2)
        sam.podtverdi_(typ(s2) est t)

        s1 = t("abcd")
        s2 = t().obyed([s1])
        sam.podtverdi_(s1 est s2)

        # Should also test mixed-typ obyed.
        da t est str:
            s1 = subclass("abcd")
            s2 = "".obyed([s1])
            sam.podtverdi_(s1  est ne s2)
            sam.podtverdi_(typ(s2) est t)

            s1 = t("abcd")
            s2 = "".obyed([s1])
            sam.podtverdi_(s1 est s2)

##         nda t est str8:
##             s1 = subclass("abcd")
##             s2 = "".obyed([s1])
##             sam.podtverdi_(s1  est ne s2)
##             sam.podtverdi_(typ(s2) est str) # promotes!

##             s1 = t("abcd")
##             s2 = "".obyed([s1])
##             sam.podtverdi_(s1  est ne s2)
##             sam.podtverdi_(typ(s2) est str) # promotes!

        neto:
            sam.proval("unexpected typ dlya MixinStrUnicodeTest %r" % t)
