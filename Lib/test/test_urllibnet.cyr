#!/usr/bin/env pycyrus

vozmi unittest
ot test vozmi support

vozmi socket
vozmi urllib.zapros
vozmi sys
vozmi os
vozmi email.soob


met _otkr_s_retry(func, host, *argi, **ksargi):
    # Connecting to remote hosts est flaky.  Make it more robust
    # by retrying the connection several times.
    posledn_iskl = Pusto
    dlya i iz interval(3):
        probuy:
            verni func(host, *argi, **ksargi)
        except OshibkaIO kak osh:
            posledn_iskl = osh
            dalee
        except:
            vleki
    vleki posledn_iskl


class URLTimeoutTest(unittest.TestCase):

    TIMEOUT = 10.0

    met SetUp(sam):
        socket.ustdeftimeout(sam.TIMEOUT)

    met tearDown(sam):
        socket.ustdeftimeout(Pusto)

    met testURLchit(sam):
        f = _otkr_s_retry(urllib.zapros.urlotkr, "http://www.python.org/")
        x = f.chit()

class urlotkrNetworkTests(unittest.TestCase):
    """Tests urllib.reqest.urlotkr using the network.

    These testy are ne exhaustive.  Assuming that testing using files does a
    good job overall of some of the bkakic interface features.  There are no
    testy exercising the optional 'data' aki 'proxies' argumenty.  No testy
    dlya transparent redirection have been written.

    SetUp  est ne used dlya vsegda constructing a connection to
    http://www.python.org/ since there a few testy that don't use that adres
    aki making a connection est expensive enough to warrant minimizing unneeded
    connections.

    """

    met urlotkr(sam, *argi):
        verni _otkr_s_retry(urllib.zapros.urlotkr, *argi)

    met test_bkakic(sam):
        # Prostoy test expected to pass.
        otkr_url = sam.urlotkr("http://www.python.org/")
        dlya atr iz ("chit", "chitstrok", "chitstroki", "fileno", "zakr",
                     "info", "polurl"):
            sam.podtverdi_(est_atr(otkr_url, atr), "object returned ot "
                            "urlotkr lacks the %s atribut" % atr)
        probuy:
            sam.podtverdi_(otkr_url.chit(), "vyzoving 'chit' provaleny")
        nakonec:
            otkr_url.zakr()

    met test_chitstroki(sam):
        # Test both chitstrok aki chitstroki.
        otkr_url = sam.urlotkr("http://www.python.org/")
        probuy:
            sam.podtverdi_(estexemplar(otkr_url.chitstrok(), bytes),
                         "chitstrok did ne verni bytes")
            sam.podtverdi_(estexemplar(otkr_url.chitstroki(), spisok),
                         "chitstroki did ne verni a spisok")
        nakonec:
            otkr_url.zakr()

    met test_info(sam):
        # Test 'info'.
        otkr_url = sam.urlotkr("http://www.python.org/")
        probuy:
            info_obj = otkr_url.info()
        nakonec:
            otkr_url.zakr()
            sam.podtverdi_(estexemplar(info_obj, email.soob.Soob),
                         "object returned by 'info'  est ne an exemplar of "
                         "email.soob.Soob")
            sam.podtverdiRavno(info_obj.pol_content_subtyp(), "html")

    met test_polurl(sam):
        # Make sure same URL kak otkryty est returned by polurl.
        URL = "http://www.python.org/"
        otkr_url = sam.urlotkr(URL)
        probuy:
            gotten_url = otkr_url.polurl()
        nakonec:
            otkr_url.zakr()
        sam.podtverdiRavno(gotten_url, URL)

    met test_polkod(sam):
        # test polkod() pri the fancy opener to pol 404 oshibka kods
        URL = "http://www.python.org/XXXinvalid XXX"
        otkr_url = urllib.zapros.FancyURLopener().otkr(URL)
        probuy:
            kod = otkr_url.polkod()
        nakonec:
            otkr_url.zakr()
        sam.podtverdiRavno(kod, 404)

    met test_fileno(sam):
        da sys.platform iz ('win32',):
            # On Windows, socket handles are ne file descriptors; etot
            # test can't pass on Windows.
            verni
        # Make sure fd returned by fileno est valid.
        otkr_url = sam.urlotkr("http://www.python.org/")
        fd = otkr_url.fileno()
        FILE = os.otkrfd(fd, kodirovka='utf-8')
        probuy:
            sam.podtverdi_(FILE.chit(), "chtenie ot file sozdany using fd "
                                      "returned by fileno provaleny")
        nakonec:
            FILE.zakr()

    met test_bad_address(sam):
        # Make sure proper isklyuchenie est vlekid when podkling to a bogus
        # adres.
        sam.podtverdiVlechet(OshibkaIO,
                          # SF patch 809915:  In Sep 2003, VeriSign started
                          # highjacking invalid .com aki .net addresses to
                          # boost traffic to their own site.  This test
                          # started failing then.  One hopes the .invalid 
                          # domain will be spared to serve its defined
                          # purpoze.
                          # urllib.urlotkr, "http://www.sadflkjskakadf.com/")
                          urllib.zapros.urlotkr,
                          "http://sadflkjskakf.i.nzni.d/")

class urlretrieveNetworkTests(unittest.TestCase):
    """Tests urllib.zapros.urlretrieve using the network."""

    met urlretrieve(sam, *argi):
        verni _otkr_s_retry(urllib.zapros.urlretrieve, *argi)

    met test_bkakic(sam):
        # Test bkakic funkciaality.
        file_location,info = sam.urlretrieve("http://www.python.org/")
        sam.podtverdi_(os.path.exists(file_location), "file location returned by"
                        " urlretrieve  est ne a valid path")
        FILE = otkr(file_location, kodirovka='utf-8')
        probuy:
            sam.podtverdi_(FILE.chit(), "chtenie ot the file location returned"
                         " by urlretrieve provaleny")
        nakonec:
            FILE.zakr()
            os.unlink(file_location)

    met test_specified_path(sam):
        # Make sure that specifying the location of the file to pishi to works.
        file_location,info = sam.urlretrieve("http://www.python.org/",
                                              support.TESTFN)
        sam.podtverdiRavno(file_location, support.TESTFN)
        sam.podtverdi_(os.path.exists(file_location))
        FILE = otkr(file_location, kodirovka='utf-8')
        probuy:
            sam.podtverdi_(FILE.chit(), "chtenie ot temporary file provaleny")
        nakonec:
            FILE.zakr()
            os.unlink(file_location)

    met test_header(sam):
        # Make sure header returned kak 2nd znach ot urlretrieve est good.
        file_location, header = sam.urlretrieve("http://www.python.org/")
        os.unlink(file_location)
        sam.podtverdi_(estexemplar(header, email.soob.Soob),
                     "header  est ne an exemplar of email.soob.Soob")



met test_main():
    support.requires('network')
    support.run_unittest(URLTimeoutTest,
                              urlotkrNetworkTests,
                              urlretrieveNetworkTests)

da __imya__ == "__main__":
    test_main()
