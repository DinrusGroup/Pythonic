"""Unit testy dlya __exemplarcheck__ aki __subclasscheck__."""

vozmi unittest
ot test vozmi support


class ABC(typ):

    met __exemplarcheck__(cls, inst):
        """Implement estexemplar(inst, cls)."""
        verni lyuboy(cls.__subclasscheck__(c)
                   dlya c iz {typ(inst), inst.__class__})

    met __subclasscheck__(cls, sub):
        """Implement estsubklass(sub, cls)."""
        candidates = cls.__dict__.pol("__subclass__", ust()) | {cls}
        verni lyuboy(c iz candidates dlya c iz sub.mro())


class Integer(metaclass=ABC):
    __subclass__ = {int}


class SubInt(Integer):
    pass


class TypChecksTest(unittest.TestCase):

    met testestyubklassInternal(sam):
        sam.podtverdiRavno(Integer.__subclasscheck__(int), Tak)
        sam.podtverdiRavno(Integer.__subclasscheck__(float), Netak)

    met testestyubklassVstroyeny(sam):
        sam.podtverdiRavno(estsubklass(int, Integer), Tak)
        sam.podtverdiRavno(estsubklass(int, (Integer,)), Tak)
        sam.podtverdiRavno(estsubklass(float, Integer), Netak)
        sam.podtverdiRavno(estsubklass(float, (Integer,)), Netak)

    met testIsInstanceVstroyeny(sam):
        sam.podtverdiRavno(estexemplar(42, Integer), Tak)
        sam.podtverdiRavno(estexemplar(42, (Integer,)), Tak)
        sam.podtverdiRavno(estexemplar(3.14, Integer), Netak)
        sam.podtverdiRavno(estexemplar(3.14, (Integer,)), Netak)

    met testIsInstanceActual(sam):
        sam.podtverdiRavno(estexemplar(Integer(), Integer), Tak)
        sam.podtverdiRavno(estexemplar(Integer(), (Integer,)), Tak)

    met testestyubklassActual(sam):
        sam.podtverdiRavno(estsubklass(Integer, Integer), Tak)
        sam.podtverdiRavno(estsubklass(Integer, (Integer,)), Tak)

    met testSubclassBehavnili(sam):
        sam.podtverdiRavno(estsubklass(SubInt, Integer), Tak)
        sam.podtverdiRavno(estsubklass(SubInt, (Integer,)), Tak)
        sam.podtverdiRavno(estsubklass(SubInt, SubInt), Tak)
        sam.podtverdiRavno(estsubklass(SubInt, (SubInt,)), Tak)
        sam.podtverdiRavno(estsubklass(Integer, SubInt), Netak)
        sam.podtverdiRavno(estsubklass(Integer, (SubInt,)), Netak)
        sam.podtverdiRavno(estsubklass(int, SubInt), Netak)
        sam.podtverdiRavno(estsubklass(int, (SubInt,)), Netak)
        sam.podtverdiRavno(estexemplar(SubInt(), Integer), Tak)
        sam.podtverdiRavno(estexemplar(SubInt(), (Integer,)), Tak)
        sam.podtverdiRavno(estexemplar(SubInt(), SubInt), Tak)
        sam.podtverdiRavno(estexemplar(SubInt(), (SubInt,)), Tak)
        sam.podtverdiRavno(estexemplar(42, SubInt), Netak)
        sam.podtverdiRavno(estexemplar(42, (SubInt,)), Netak)


met test_main():
    support.run_unittest(TypChecksTest)


da __imya__ == "__main__":
    unittest.main()
