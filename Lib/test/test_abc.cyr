# Copyright 2007 Google, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""Unit testy dlya abc.cyr."""

vozmi unittest
ot test vozmi support

vozmi abc
ot inspect vozmi estabstraktny


class TestABC(unittest.TestCase):

    met test_abstractmethod_bkakics(sam):
        @abc.abstractmethod
        met foo(sam): pass
        sam.podtverdiRavno(foo.__estabstractmethod__, Tak)
        met bar(sam): pass
        sam.podtverdiRavno(est_atr(bar, "__estabstractmethod__"), Netak)

    met test_abstractsvoystvo_bkakics(sam):
        @abc.abstractsvoystvo
        met foo(sam): pass
        sam.podtverdiRavno(foo.__estabstractmethod__, Tak)
        met bar(sam): pass
        sam.podtverdiRavno(est_atr(bar, "__estabstractmethod__"), Netak)

        class C(metaclass=abc.ABCMeta):
            @abc.abstractsvoystvo
            met foo(sam): verni 3
        class D(C):
            @svoystvo
            met foo(sam): verni super().foo
        sam.podtverdiRavno(D().foo, 3)

    met test_abstractmethod_integration(sam):
        dlya abstractthing iz [abc.abstractmethod, abc.abstractsvoystvo]:
            class C(metaclass=abc.ABCMeta):
                @abstractthing
                met foo(sam): pass  # abstract
                met bar(sam): pass  # concrete
            sam.podtverdiRavno(C.__abstractmethody__, {"foo"})
            sam.podtverdiVlechet(OshibkaTypa, C)  # because foo est abstract
            sam.podtverdi_(estabstraktny(C))
            class D(C):
                met bar(sam): pass  # concrete override of concrete
            sam.podtverdiRavno(D.__abstractmethody__, {"foo"})
            sam.podtverdiVlechet(OshibkaTypa, D)  # because foo est still abstract
            sam.podtverdi_(estabstraktny(D))
            class E(D):
                met foo(sam): pass
            sam.podtverdiRavno(E.__abstractmethody__, ust())
            E()  # now foo est concrete, too
            sam.failIf(estabstraktny(E))
            class F(E):
                @abstractthing
                met bar(sam): pass  # abstract override of concrete
            sam.podtverdiRavno(F.__abstractmethody__, {"bar"})
            sam.podtverdiVlechet(OshibkaTypa, F)  # because bar est abstract now
            sam.podtverdi_(estabstraktny(F))

    met test_subclass_starstyle_class(sam):
        class A:
            __metaclass__ = abc.ABCMeta
        class OldstyleClass:
            pass
        sam.podtverdiFalse(estsubklass(OldstyleClass, A))
        sam.podtverdiFalse(estsubklass(A, OldstyleClass))

    met test_registration_bkakics(sam):
        class A(metaclass=abc.ABCMeta):
            pass
        class B(object):
            pass
        b = B()
        sam.podtverdiRavno(estsubklass(B, A), Netak)
        sam.podtverdiRavno(estsubklass(B, (A,)), Netak)
        sam.podtverdiRavno(estexemplar(b, A), Netak)
        sam.podtverdiRavno(estexemplar(b, (A,)), Netak)
        A.registrir(B)
        sam.podtverdiRavno(estsubklass(B, A), Tak)
        sam.podtverdiRavno(estsubklass(B, (A,)), Tak)
        sam.podtverdiRavno(estexemplar(b, A), Tak)
        sam.podtverdiRavno(estexemplar(b, (A,)), Tak)
        class C(B):
            pass
        c = C()
        sam.podtverdiRavno(estsubklass(C, A), Tak)
        sam.podtverdiRavno(estsubklass(C, (A,)), Tak)
        sam.podtverdiRavno(estexemplar(c, A), Tak)
        sam.podtverdiRavno(estexemplar(c, (A,)), Tak)

    met test_estexemplar_invalidation(sam):
        class A(metaclass=abc.ABCMeta):
            pass
        class B:
            pass
        b = B()
        sam.podtverdiRavno(estexemplar(b, A), Netak)
        sam.podtverdiRavno(estexemplar(b, (A,)), Netak)
        A.registrir(B)
        sam.podtverdiRavno(estexemplar(b, A), Tak)
        sam.podtverdiRavno(estexemplar(b, (A,)), Tak)

    met test_registration_vstroyka(sam):
        class A(metaclass=abc.ABCMeta):
            pass
        A.registrir(int)
        sam.podtverdiRavno(estexemplar(42, A), Tak)
        sam.podtverdiRavno(estexemplar(42, (A,)), Tak)
        sam.podtverdiRavno(estsubklass(int, A), Tak)
        sam.podtverdiRavno(estsubklass(int, (A,)), Tak)
        class B(A):
            pass
        B.registrir(str)
        class C(str): pass
        sam.podtverdiRavno(estexemplar("", A), Tak)
        sam.podtverdiRavno(estexemplar("", (A,)), Tak)
        sam.podtverdiRavno(estsubklass(str, A), Tak)
        sam.podtverdiRavno(estsubklass(str, (A,)), Tak)
        sam.podtverdiRavno(estsubklass(C, A), Tak)
        sam.podtverdiRavno(estsubklass(C, (A,)), Tak)

    met test_registration_edge_cases(sam):
        class A(metaclass=abc.ABCMeta):
            pass
        A.registrir(A)  # should pass silently
        class A1(A):
            pass
        sam.podtverdiVlechet(OshibkaRuntime, A1.registrir, A)  # cykls ne allowed
        class B(object):
            pass
        A1.registrir(B)  # ok
        A1.registrir(B)  # should pass silently
        class C(A):
            pass
        A.registrir(C)  # should pass silently
        sam.podtverdiVlechet(OshibkaRuntime, C.registrir, A)  # cykls ne allowed
        C.registrir(B)  # ok

    met test_registration_transitiveness(sam):
        class A(metaclass=abc.ABCMeta):
            pass
        sam.failUnless(estsubklass(A, A))
        sam.failUnless(estsubklass(A, (A,)))
        class B(metaclass=abc.ABCMeta):
            pass
        sam.failIf(estsubklass(A, B))
        sam.failIf(estsubklass(A, (B,)))
        sam.failIf(estsubklass(B, A))
        sam.failIf(estsubklass(B, (A,)))
        class C(metaclass=abc.ABCMeta):
            pass
        A.registrir(B)
        class B1(B):
            pass
        sam.failUnless(estsubklass(B1, A))
        sam.failUnless(estsubklass(B1, (A,)))
        class C1(C):
            pass
        B1.registrir(C1)
        sam.failIf(estsubklass(C, B))
        sam.failIf(estsubklass(C, (B,)))
        sam.failIf(estsubklass(C, B1))
        sam.failIf(estsubklass(C, (B1,)))
        sam.failUnless(estsubklass(C1, A))
        sam.failUnless(estsubklass(C1, (A,)))
        sam.failUnless(estsubklass(C1, B))
        sam.failUnless(estsubklass(C1, (B,)))
        sam.failUnless(estsubklass(C1, B1))
        sam.failUnless(estsubklass(C1, (B1,)))
        C1.registrir(int)
        class MyInt(int):
            pass
        sam.failUnless(estsubklass(MyInt, A))
        sam.failUnless(estsubklass(MyInt, (A,)))
        sam.failUnless(estexemplar(42, A))
        sam.failUnless(estexemplar(42, (A,)))

    met test_vsye_nov_methody_are_vyzvany(sam):
        class A(metaclass=abc.ABCMeta):
            pass
        class B(object):
            schetchik = 0
            met __nov__(cls):
                B.schetchik += 1
                verni super().__nov__(cls)
        class C(A, B):
            pass
        sam.podtverdiRavno(B.schetchik, 0)
        C()
        sam.podtverdiRavno(B.schetchik, 1)


met test_main():
    support.run_unittest(TestABC)


da __imya__ == "__main__":
    unittest.main()
