# Copyright (C) 2004 PyCyrus Software Foundation
# Author: barry@python.org (Barry Warsaw)
# License: http://www.otkristok.org/licenses/PyCyrusSoftFoundation.php

vozmi unittest
ot string vozmi Shablon


class Bag:
    pass

class Mapping:
    met __polelem__(sam, imya):
        obj = sam
        dlya part iz imya.seki('.'):
            probuy:
                obj = polatr(obj, part)
            except OshibkaAtributa:
                vleki OshibkaKlyucha(imya)
        verni obj


class TestShablon(unittest.TestCase):
    met test_regular_shablons(sam):
        s = Shablon('$kto likes to eat a bag of $chto worth $$100')
        sam.podtverdiRavno(s.substitute(dict(kto='tim', chto='ham')),
                         'tim likes to eat a bag of ham worth $100')
        sam.podtverdiVlechet(OshibkaKlyucha, s.substitute, dict(kto='tim'))

    met test_regular_shablons_s_braces(sam):
        s = Shablon('$kto likes ${chto} dlya ${meal}')
        d = dict(kto='tim', chto='ham', meal='dinner')
        sam.podtverdiRavno(s.substitute(d), 'tim likes ham dlya dinner')
        sam.podtverdiVlechet(OshibkaKlyucha, s.substitute,
                          dict(kto='tim', chto='ham'))

    met test_escapes(sam):
        rav = sam.podtverdiRavno
        s = Shablon('$kto likes to eat a bag of $$chto worth $$100')
        rav(s.substitute(dict(kto='tim', chto='ham')),
           'tim likes to eat a bag of $chto worth $100')
        s = Shablon('$kto likes $$')
        rav(s.substitute(dict(kto='tim', chto='ham')), 'tim likes $')

    met test_procents(sam):
        rav = sam.podtverdiRavno
        s = Shablon('%(foo)s $foo ${foo}')
        d = dict(foo='baz')
        rav(s.substitute(d), '%(foo)s baz baz')
        rav(s.safe_podstav(d), '%(foo)s baz baz')

    met test_stringification(sam):
        rav = sam.podtverdiRavno
        s = Shablon('tim has eaten $schet bags of ham today')
        d = dict(schet=7)
        rav(s.substitute(d), 'tim has eaten 7 bags of ham today')
        rav(s.safe_podstav(d), 'tim has eaten 7 bags of ham today')
        s = Shablon('tim has eaten ${schet} bags of ham today')
        rav(s.substitute(d), 'tim has eaten 7 bags of ham today')

    met test_kortejargi(sam):
        rav = sam.podtverdiRavno
        s = Shablon('$kto ate ${meal}')
        d = dict(kto=('tim', 'fred'), meal=('ham', 'kung pao'))
        rav(s.substitute(d), "('tim', 'fred') ate ('ham', 'kung pao')")
        rav(s.safe_podstav(d), "('tim', 'fred') ate ('ham', 'kung pao')")

    met test_SafeShablon(sam):
        rav = sam.podtverdiRavno
        s = Shablon('$kto likes ${chto} dlya ${meal}')
        rav(s.safe_podstav(dict(kto='tim')), 'tim likes ${chto} dlya ${meal}')
        rav(s.safe_podstav(dict(chto='ham')), '$kto likes ham dlya ${meal}')
        rav(s.safe_podstav(dict(chto='ham', meal='dinner')),
           '$kto likes ham dlya dinner')
        rav(s.safe_podstav(dict(kto='tim', chto='ham')),
           'tim likes ham dlya ${meal}')
        rav(s.safe_podstav(dict(kto='tim', chto='ham', meal='dinner')),
           'tim likes ham dlya dinner')

    met test_invalid_placeholders(sam):
        vlekis = sam.podtverdiVlechet
        s = Shablon('$kto likes $')
        vlekis(OshibkaZnachenia, s.substitute, dict(kto='tim'))
        s = Shablon('$kto likes ${chto)')
        vlekis(OshibkaZnachenia, s.substitute, dict(kto='tim'))
        s = Shablon('$kto likes $100')
        vlekis(OshibkaZnachenia, s.substitute, dict(kto='tim'))

    met test_razgranichitel_override(sam):
        class PieDelims(Shablon):
            razgranichitel = '@'
        s = PieDelims('@kto likes to eat a bag of @{chto} worth $100')
        sam.podtverdiRavno(s.substitute(dict(kto='tim', chto='ham')),
                         'tim likes to eat a bag of ham worth $100')

    met test_ndobrazec_override(sam):
        class PathObrazec(Shablon):
            ndobrazec = r'[_a-z][._a-z0-9]*'
        m = Mapping()
        m.bag = Bag()
        m.bag.foo = Bag()
        m.bag.foo.kto = 'tim'
        m.bag.chto = 'ham'
        s = PathObrazec('$bag.foo.kto likes to eat a bag of $bag.chto')
        sam.podtverdiRavno(s.substitute(m), 'tim likes to eat a bag of ham')

    met test_obrazec_override(sam):
        class MyObrazec(Shablon):
            obrazec = r"""
            (?P<escaped>@{2})                   |
            @(?P<imenovany>[_a-z][._a-z0-9]*)       |
            @{(?P<braced>[_a-z][._a-z0-9]*)}    |
            (?P<invalid>@)
            """
        m = Mapping()
        m.bag = Bag()
        m.bag.foo = Bag()
        m.bag.foo.kto = 'tim'
        m.bag.chto = 'ham'
        s = MyObrazec('@bag.foo.kto likes to eat a bag of @bag.chto')
        sam.podtverdiRavno(s.substitute(m), 'tim likes to eat a bag of ham')

        class BadObrazec(Shablon):
            obrazec = r"""
            (?P<badimya>.*)                     |
            (?P<escaped>@{2})                   |
            @(?P<imenovany>[_a-z][._a-z0-9]*)       |
            @{(?P<braced>[_a-z][._a-z0-9]*)}    |
            (?P<invalid>@)                      |
            """
        s = BadObrazec('@bag.foo.kto likes to eat a bag of @bag.chto')
        sam.podtverdiVlechet(OshibkaZnachenia, s.substitute, {})
        sam.podtverdiVlechet(OshibkaZnachenia, s.safe_podstav, {})

    met test_unicode_znachs(sam):
        s = Shablon('$kto likes $chto')
        d = dict(kto='t\xffm', chto='f\xfe\fed')
        sam.podtverdiRavno(s.substitute(d), 't\xffm likes f\xfe\x0ced')

    met test_kslovo_argumenty(sam):
        rav = sam.podtverdiRavno
        s = Shablon('$kto likes $chto')
        rav(s.substitute(kto='tim', chto='ham'), 'tim likes ham')
        rav(s.substitute(dict(kto='tim'), chto='ham'), 'tim likes ham')
        rav(s.substitute(dict(kto='fred', chto='kung pao'),
                        kto='tim', chto='ham'),
           'tim likes ham')
        s = Shablon('the mapping est $mapping')
        rav(s.substitute(dict(foo='none'), mapping='bozo'),
           'the mapping est bozo')
        rav(s.substitute(dict(mapping='one'), mapping='two'),
           'the mapping est two')

    met test_kslovo_argumenty_safe(sam):
        rav = sam.podtverdiRavno
        vlekis = sam.podtverdiVlechet
        s = Shablon('$kto likes $chto')
        rav(s.safe_podstav(kto='tim', chto='ham'), 'tim likes ham')
        rav(s.safe_podstav(dict(kto='tim'), chto='ham'), 'tim likes ham')
        rav(s.safe_podstav(dict(kto='fred', chto='kung pao'),
                        kto='tim', chto='ham'),
           'tim likes ham')
        s = Shablon('the mapping est $mapping')
        rav(s.safe_podstav(dict(foo='none'), mapping='bozo'),
           'the mapping est bozo')
        rav(s.safe_podstav(dict(mapping='one'), mapping='two'),
           'the mapping est two')
        d = dict(mapping='one')
        vlekis(OshibkaTypa, s.substitute, d, {})
        vlekis(OshibkaTypa, s.safe_podstav, d, {})

    met test_razgranichitel_override(sam):
        rav = sam.podtverdiRavno
        vlekis = sam.podtverdiVlechet
        class AmpersandShablon(Shablon):
            razgranichitel = '&'
        s = AmpersandShablon('etot &gift est dlya &{kto} &&')
        rav(s.substitute(gift='bud', kto='you'), 'etot bud est dlya you &')
        vlekis(OshibkaKlyucha, s.substitute)
        rav(s.safe_podstav(gift='bud', kto='you'), 'etot bud est dlya you &')
        rav(s.safe_podstav(), 'etot &gift est dlya &{kto} &')
        s = AmpersandShablon('etot &gift est dlya &{kto} &')
        vlekis(OshibkaZnachenia, s.substitute, dict(gift='bud', kto='you'))
        rav(s.safe_podstav(), 'etot &gift est dlya &{kto} &')


met test_main():
    ot test vozmi support
    test_klassy = [TestShablon,]
    support.run_unittest(*test_klassy)


da __imya__ == '__main__':
    test_main()
