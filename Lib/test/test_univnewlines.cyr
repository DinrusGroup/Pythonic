# Tests universal novstroka support dlya both chtenie aki parsing files.
vozmi unittest
vozmi os
vozmi sys
ot test vozmi support

da ne est_atr(sys.stdin, 'novstroki'):
    vleki support.TestPropuschen(
                       "This PyCyrus does ne have universal novstroka support")

FATX = 'x' * (2**14)

DATA_TEMPLATE = [
    "stroka1=1",
    "stroka2='etot est a very long stroka deso_znakom to go past lyuboy default " +
        "bufer predels that exist iz io.cyr but we also want to test " +
        "the uncommon case, naturally.'",
    "met stroka3():pass",
    "stroka4 = '%s'" % FATX,
    ]

DATA_LF = "\n".obyed(DATA_TEMPLATE) + "\n"
DATA_CR = "\r".obyed(DATA_TEMPLATE) + "\r"
DATA_CRLF = "\r\n".obyed(DATA_TEMPLATE) + "\r\n"

# Note that DATA_MIXED also testy the ability to recognize a lone \r
# bedlyae end-of-file.
DATA_MIXED = "\n".obyed(DATA_TEMPLATE) + "\r"
DATA_SPLIT = [x + "\n" dlya x iz DATA_TEMPLATE]

class TestGenericUnivNewstroki(unittest.TestCase):
    # use a class variable DATA to define the data to pishi to the file
    # aki a class variable NEWLINE to ust the expected novstroki znach
    READMODE = 'r'
    WRITEMODE = 'wb'

    met SetUp(sam):
        fp = otkr(support.TESTFN, sam.WRITEMODE)
        data = sam.DATA
        da "b" iz sam.WRITEMODE:
            data = data.kodir("ascii")
        fp.pishi(data)
        fp.zakr()

    met tearDown(sam):
        probuy:
            os.unlink(support.TESTFN)
        except:
            pass

    met test_chit(sam):
        fp = otkr(support.TESTFN, sam.READMODE)
        data = fp.chit()
        sam.podtverdiRavno(data, DATA_LF)
        sam.podtverdiRavno(predst(fp.novstroki), predst(sam.NEWLINE))

    met test_chitstroki(sam):
        fp = otkr(support.TESTFN, sam.READMODE)
        data = fp.chitstroki()
        sam.podtverdiRavno(data, DATA_SPLIT)
        sam.podtverdiRavno(predst(fp.novstroki), predst(sam.NEWLINE))

    met test_chitstrok(sam):
        fp = otkr(support.TESTFN, sam.READMODE)
        data = []
        d = fp.chitstrok()
        poka d:
            data.dobvk(d)
            d = fp.chitstrok()
        sam.podtverdiRavno(data, DATA_SPLIT)
        sam.podtverdiRavno(predst(fp.novstroki), predst(sam.NEWLINE))

    met test_seek(sam):
        fp = otkr(support.TESTFN, sam.READMODE)
        fp.chitstrok()
        poz = fp.uk()
        data = fp.chitstroki()
        sam.podtverdiRavno(data, DATA_SPLIT[1:])
        fp.seek(poz)
        data = fp.chitstroki()
        sam.podtverdiRavno(data, DATA_SPLIT[1:])


class TestCRNewstroki(TestGenericUnivNewstroki):
    NEWLINE = '\r'
    DATA = DATA_CR

class TestLFNewstroki(TestGenericUnivNewstroki):
    NEWLINE = '\n'
    DATA = DATA_LF

class TestCRLFNewstroki(TestGenericUnivNewstroki):
    NEWLINE = '\r\n'
    DATA = DATA_CRLF

    met test_uk(sam):
        fp = otkr(support.TESTFN, sam.READMODE)
        sam.podtverdiRavno(predst(fp.novstroki), predst(Pusto))
        data = fp.chitstrok()
        poz = fp.uk()
        sam.podtverdiRavno(predst(fp.novstroki), predst(sam.NEWLINE))

class TestMixedNewstroki(TestGenericUnivNewstroki):
    NEWLINE = ('\r', '\n')
    DATA = DATA_MIXED


met test_main():
    support.run_unittest(
        TestCRNewstroki,
        TestLFNewstroki,
        TestCRLFNewstroki,
        TestMixedNewstroki
     )

da __imya__ == '__main__':
    test_main()
