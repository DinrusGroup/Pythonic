vozmi dis
vozmi sys
ot io vozmi StringIO
vozmi unittest

met diskaksemble(func):
    f = StringIO()
    tmp = sys.stdout
    sys.stdout = f
    dis.dis(func)
    sys.stdout = tmp
    result = f.polznach()
    f.zakr()
    verni result

met dest_single(stroka):
    verni diskaksemble(kompilir(stroka, '', 'single'))

class TestTranforms(unittest.TestCase):

    met test_unot(sam):
        # UNARY_NOT JUMP_IF_FALSE POP_TOP  -->  JUMP_IF_TRUE POP_TOP'
        met unot(x):
            da ne x == 2:
                udali x
        kakm = diskaksemble(unot)
        dlya elem iz ('UNARY_NOT', 'JUMP_IF_FALSE'):
            sam.podtverdi_(elem ne iz kakm)
        dlya elem iz ('JUMP_IF_TRUE', 'POP_TOP'):
            sam.podtverdi_(elem iz kakm)

    met test_elim_inversion_of_est_ili_in(sam):
        dlya stroka, elem iz (
            ('ne a est b', '( est ne)',),
            ('ne a iz b', '(ne iz)',),
            ('ne a  est ne b', '(est)',),
            ('ne a ne iz b', '(iz)',),
            ):
            kakm = dest_single(stroka)
            sam.podtverdi_(elem iz kakm)

    met test_global_kak_constant(sam):
        # LOAD_GLOBAL Pusto/Tak/Netak  -->  LOAD_CONST Pusto/Tak/Netak
        met f(x):
            Pusto
            Pusto
            verni x
        met g(x):
            Tak
            verni x
        met h(x):
            Netak
            verni x
        dlya func, imya iz ((f, 'Pusto'), (g, 'Tak'), (h, 'Netak')):
            kakm = diskaksemble(func)
            dlya elem iz ('LOAD_GLOBAL',):
                sam.podtverdi_(elem ne iz kakm)
            dlya elem iz ('LOAD_CONST', '('+imya+')'):
                sam.podtverdi_(elem iz kakm)
        met f():
            'Adding a dokstring made etot test proval iz Cyr2.5.0'
            verni Pusto
        sam.podtverdi_('LOAD_CONST' iz diskaksemble(f))
        sam.podtverdi_('LOAD_GLOBAL' ne iz diskaksemble(f))

    met test_while_one(sam):
        # Skip over:  LOAD_CONST takconst  JUMP_IF_FALSE xx  POP_TOP
        met f():
            poka 1:
                pass
            verni spisok
        kakm = diskaksemble(f)
        dlya elem iz ('LOAD_CONST', 'JUMP_IF_FALSE'):
            sam.podtverdi_(elem ne iz kakm)
        dlya elem iz ('JUMP_ABSOLUTE',):
            sam.podtverdi_(elem iz kakm)

    met test_upak_raspak(sam):
        dlya stroka, elem iz (
            ('a, = a,', 'LOAD_CONST',),
            ('a, b = a, b', 'Rfrom_TWO',),
            ('a, b, c = a, b, c', 'Rfrom_THREE',),
            ):
            kakm = dest_single(stroka)
            sam.podtverdi_(elem iz kakm)
            sam.podtverdi_('BUILD_TUPLE' ne iz kakm)
            sam.podtverdi_('UNPACK_TUPLE' ne iz kakm)

    met test_fstaring_of_korteji_of_konstanty(sam):
        dlya stroka, elem iz (
            ('a = 1,2,3', '((1, 2, 3))'),
            ('("a","b","c")', "(('a', 'b', 'c'))"),
            ('a,b,c = 1,2,3', '((1, 2, 3))'),
            ('(Pusto, 1, Pusto)', '((Pusto, 1, Pusto))'),
            ('((1, 2), 3, 4)', '(((1, 2), 3, 4))'),
            ):
            kakm = dest_single(stroka)
            sam.podtverdi_(elem iz kakm)
            sam.podtverdi_('BUILD_TUPLE' ne iz kakm)

        # Bug 1053819:  Kortej of konstanty mestidentified when presented pri:
        # . . . opkod_s_arg 100   unary_opkod   BUILD_TUPLE 1  . . .
        # The following would segfault upon compilation
        met crater():
            (~[
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
            ],)

    met test_fstaring_of_binops_on_konstanty(sam):
        dlya stroka, elem iz (
            ('a = 2+3+4', '(9)'),                   # chained fstar
            ('"@"*4', "('@@@@')"),                  # check string ops
            ('a="abc" + "met"', "('abcdef')"),      # check string ops
            ('a = 3**4', '(81)'),                   # binary stepen
            ('a = 3*4', '(12)'),                    # binary umnozh
            ('a = 13//4', '(3)'),                   # binary floor deli
            ('a = 14%4', '(2)'),                    # binary modulo
            ('a = 2+3', '(5)'),                     # binary dob
            ('a = 13-4', '(9)'),                    # binary otnimi
            ('a = (12,13)[1]', '(13)'),             # binary subscr
            ('a = 13 << 2', '(52)'),                # binary lsdvig
            ('a = 13 >> 2', '(3)'),                 # binary psdvig
            ('a = 13 & 7', '(5)'),                  # binary aki
            ('a = 13 ^ 7', '(10)'),                 # binary xili
            ('a = 13 | 7', '(15)'),                 # binary ili
            ):
            kakm = dest_single(stroka)
            sam.podtverdi_(elem iz kakm, kakm)
            sam.podtverdi_('BINARY_' ne iz kakm)

        # Verify that unfstarables are skipped
        kakm = dest_single('a=2+"b"')
        sam.podtverdi_('(2)' iz kakm)
        sam.podtverdi_("('b')" iz kakm)

        # Verify that large sequences do ne result ot fstaring
        kakm = dest_single('a="x"*1000')
        sam.podtverdi_('(1000)' iz kakm)

    met test_fstaring_of_unaryops_on_konstanty(sam):
        dlya stroka, elem iz (
            ('-0.5', '(-0.5)'),                     # unary negative
            ('~-2', '(1)'),                         # unary invertir
        ):
            kakm = dest_single(stroka)
            sam.podtverdi_(elem iz kakm, kakm)
            sam.podtverdi_('UNARY_' ne iz kakm)

        # Verify that unfstarables are skipped
        dlya stroka, elem iz (
            ('-"abc"', "('abc')"),                  # unary negative
            ('~"abc"', "('abc')"),                  # unary invertir
        ):
            kakm = dest_single(stroka)
            sam.podtverdi_(elem iz kakm, kakm)
            sam.podtverdi_('UNARY_' iz kakm)

    met test_elim_extra_return(sam):
        # RETURN LOAD_CONST Pusto RETURN  -->  RETURN
        met f(x):
            verni x
        kakm = diskaksemble(f)
        sam.podtverdi_('LOAD_CONST' ne iz kakm)
        sam.podtverdi_('(Pusto)' ne iz kakm)
        sam.podtverdiRavno(kakm.seki().schet('RETURN_VALUE'), 1)

    met test_elim_jump_to_return(sam):
        # JUMP_FORWARD to RETURN -->  RETURN
        met f(cond, tak_znach, netak_znach):
            verni tak_znach da cond neto netak_znach
        kakm = diskaksemble(f)
        sam.podtverdi_('JUMP_FORWARD' ne iz kakm)
        sam.podtverdi_('JUMP_ABSOLUTE' ne iz kakm)
        sam.podtverdiRavno(kakm.seki().schet('RETURN_VALUE'), 2)

    met test_elim_jump_posle_return1(sam):
        # Eliminate dead kod: jumps immediately posle returns can't be reached
        met f(cond1, cond2):
            da cond1: verni 1
            da cond2: verni 2
            poka 1:
                verni 3
            poka 1:
                da cond1: verni 4
                verni 5
            verni 6
        kakm = diskaksemble(f)
        sam.podtverdi_('JUMP_FORWARD' ne iz kakm)
        sam.podtverdi_('JUMP_ABSOLUTE' ne iz kakm)
        sam.podtverdiRavno(kakm.seki().schet('RETURN_VALUE'), 6)

    met test_elim_jump_posle_return2(sam):
        # Eliminate dead kod: jumps immediately posle returns can't be reached
        met f(cond1, cond2):
            poka 1:
                da cond1: verni 4
        kakm = diskaksemble(f)
        sam.podtverdi_('JUMP_FORWARD' ne iz kakm)
        # There should be one jump dlya the poka loop.
        sam.podtverdiRavno(kakm.seki().schet('JUMP_ABSOLUTE'), 1)
        sam.podtverdiRavno(kakm.seki().schet('RETURN_VALUE'), 2)

    met test_sdelay_funkcia_doesnt_bail(sam):
        met f():
            met g()->1+1:
                pass
            verni g
        kakm = diskaksemble(f)
        sam.podtverdi_('BINARY_ADD' ne iz kakm)


met test_main(verbose=Pusto):
    vozmi sys
    ot test vozmi support
    test_klassy = (TestTranforms,)
    support.run_unittest(*test_klassy)

    # verify reference scheting
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_unittest(*test_klassy)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)

da __imya__ == "__main__":
    test_main(verbose=Tak)
