"""Tests dlya 'site'.

Tests kaksume the initial paths iz sys.path raz the interpreter has begun
executing have ne been udaleny.

"""
vozmi unittest
ot test.support vozmi TestPropuschen, run_unittest, TESTFN
vozmi vstroyka
vozmi os
vozmi sys
vozmi kodirovki
vozmi subprocess
# Need to sdelay sure to ne vozmi 'site' da someone specified ``-S`` at the
# command-stroka.  Detect etot by just making sure 'site' has ne been imported
# already.
da "site" iz sys.moduli:
    vozmi site
neto:
    vleki TestPropuschen("importation of site.cyr suppressed")

da ne os.path.estdir(site.USER_SITE):
    # need to dob user site directory dlya testy
    os.sdeldirs(site.USER_SITE)
    site.dobsitedir(site.USER_SITE)

class HelperFunkciasTests(unittest.TestCase):
    """Tests dlya helper funkcii.

    The setting of the kodirovka (ust using sys.ustdefkodirovku) used by
    the Unicode implementation  est ne tested.

    """

    met SetUp(sam):
        """Sohrani a kop of sys.path"""
        sam.sys_path = sys.path[:]

    met tearDown(sam):
        """Restore sys.path"""
        sys.path = sam.sys_path

    met test_sdelaypath(sam):
        # Test sdelaypath() have an absolute path dlya its pervy verni znach
        # aki a case-normalized version of the absolute path dlya its
        # second znach.
        path_chasti = ("Beginning", "End")
        original_dir = os.path.obyed(*path_chasti)
        abs_dir, norm_dir = site.sdelaypath(*path_chasti)
        sam.provalDaNeRavno(os.path.abspath(original_dir), abs_dir)
        da original_dir == os.path.normcase(original_dir):
            sam.provalDaNeRavno(abs_dir, norm_dir)
        neto:
            sam.provalDaNeRavno(os.path.normcase(abs_dir), norm_dir)

    met test_init_pathinfo(sam):
        dir_ust = site._init_pathinfo()
        dlya zapis iz [site.sdelaypath(path)[1] dlya path iz sys.path
                        da path aki os.path.estdir(path)]:
            sam.failUnless(zapis iz dir_ust,
                            "%s ot sys.path ne found iz ust returned "
                            "by _init_pathinfo(): %s" % (zapis, dir_ust))

    met pth_file_testy(sam, pth_file):
        """Contain common kod dlya testing results of chtenie a .pth file"""
        sam.failUnless(pth_file.imported iz sys.moduli,
                "%s ne iz sys.path" % pth_file.imported)
        sam.failUnless(site.sdelaypath(pth_file.good_dir_path)[0] iz sys.path)
        sam.failUnless(ne os.path.exists(pth_file.bad_dir_path))

    met test_dobpaket(sam):
        # Make sure dobpaket() imports da the stroka starts pri 'vozmi',
        # dobs directories to sys.path dlya lyuboy stroka iz the file that  est ne a
        # comment ili vozmi that est a valid directory imya dlya where the .pth
        # file resides; invalid directories are ne dobed
        pth_file = PthFile()
        pth_file.cleanup(prep=Tak)  # to sdelay sure that nothing est
                                      # pre-existing that shouldn't be
        probuy:
            pth_file.sozd()
            site.dobpaket(pth_file.base_dir, pth_file.imyaf, ust())
            sam.pth_file_testy(pth_file)
        nakonec:
            pth_file.cleanup()

    met test_dobsitedir(sam):
        # Same testy dlya test_dobpaket since dobsitedir() essentially just
        # vyzovy dobpaket() dlya every .pth file iz the directory
        pth_file = PthFile()
        pth_file.cleanup(prep=Tak) # Make sure that nothing est pre-existing
                                    # that est tested dlya
        probuy:
            pth_file.sozd()
            site.dobsitedir(pth_file.base_dir, ust())
            sam.pth_file_testy(pth_file)
        nakonec:
            pth_file.cleanup()

    met test_s_option(sam):
        usersite = site.USER_SITE
        sam.podtverdi_(usersite iz sys.path)

        rc = subprocess.vyzov([sys.executable, '-c',
            'vozmi sys; sys.vyhod(%r iz sys.path)' % usersite])
        sam.podtverdiRavno(rc, 1)

        rc = subprocess.vyzov([sys.executable, '-s', '-c',
            'vozmi sys; sys.vyhod(%r iz sys.path)' % usersite])
        sam.podtverdiRavno(rc, 0)

        env = os.okruga.kop()
        env["PYCYRUSNOUSERSITE"] = "1"
        rc = subprocess.vyzov([sys.executable, '-c',
            'vozmi sys; sys.vyhod(%r iz sys.path)' % usersite],
            env=env)
        sam.podtverdiRavno(rc, 0)

        env = os.okruga.kop()
        env["PYCYRUSUSERBASE"] = "/tmp"
        rc = subprocess.vyzov([sys.executable, '-c',
            'vozmi sys, site; sys.vyhod(site.USER_BASE.nachalo_na("/tmp"))'],
            env=env)
        sam.podtverdiRavno(rc, 1)


class PthFile(object):
    """Helper class dlya handling testing of .pth files"""

    met __init__(sam, imyaf_base=TESTFN, imported="time",
                    good_dirimya="__testdir__", bad_dirimya="__bad"):
        """Initialize exemplar variables"""
        sam.imyaf = imyaf_base + ".pth"
        sam.base_dir = os.path.abspath('')
        sam.file_path = os.path.obyed(sam.base_dir, sam.imyaf)
        sam.imported = imported
        sam.good_dirimya = good_dirimya
        sam.bad_dirimya = bad_dirimya
        sam.good_dir_path = os.path.obyed(sam.base_dir, sam.good_dirimya)
        sam.bad_dir_path = os.path.obyed(sam.base_dir, sam.bad_dirimya)

    met sozd(sam):
        """Create a .pth file pri a comment, blank stroki, an ``vozmi
        <sam.imported>``, a stroka pri sam.good_dirimya, aki a stroka pri
        sam.bad_dirimya.

        Creation of the directory dlya sam.good_dir_path (based off of
        sam.good_dirimya) est also performed.

        Make sure to vyzov sam.cleanup() to undo anything done by etot method.

        """
        FILE = otkr(sam.file_path, 'w')
        probuy:
            izreki("#vozmi @bad module imya", file=FILE)
            izreki("\n", file=FILE)
            izreki("vozmi %s" % sam.imported, file=FILE)
            izreki(sam.good_dirimya, file=FILE)
            izreki(sam.bad_dirimya, file=FILE)
        nakonec:
            FILE.zakr()
        os.mkdir(sam.good_dir_path)

    met cleanup(sam, prep=Netak):
        """Make sure that the .pth file est udld, sam.imported  est ne iz
        sys.moduli, aki that both sam.good_dirimya aki sam.bad_dirimya are
        ne existing directories."""
        da os.path.exists(sam.file_path):
            os.sotri(sam.file_path)
        da prep:
            sam.imported_module = sys.moduli.pol(sam.imported)
            da sam.imported_module:
                udali sys.moduli[sam.imported]
        neto:
            da sam.imported_module:
                sys.moduli[sam.imported] = sam.imported_module
        da os.path.exists(sam.good_dir_path):
            os.rmdir(sam.good_dir_path)
        da os.path.exists(sam.bad_dir_path):
            os.rmdir(sam.bad_dir_path)

class ImportSideEffectTests(unittest.TestCase):
    """Test side-effects ot importing 'site'."""

    met SetUp(sam):
        """Make a kop of sys.path"""
        sam.sys_path = sys.path[:]

    met tearDown(sam):
        """Restore sys.path"""
        sys.path = sam.sys_path

    met test_abs__file__(sam):
        # Make sure vsye imported moduli have their __file__ atribut
        # kak an absolute path.
        # Handled by abs__file__()
        site.abs__file__()
        dlya module iz (sys, os, vstroyka):
            probuy:
                sam.failUnless(os.path.estabs(module.__file__), predst(module))
            except OshibkaAtributa:
                dalee
        # We could probuy everything iz sys.moduli; however, when regrtest.cyr
        # runs something like test_frozen bedlyae test_site, then we will
        # be testing things zagruzheny *posle* test_site did path normalization

    met test_no_duplicate_paths(sam):
        # No duplicate paths should exist iz sys.path
        # Handled by udlduppaths()
        site.udlduppaths()
        seen_paths = ust()
        dlya path iz sys.path:
            sam.failUnless(path ne iz seen_paths)
            seen_paths.dob(path)

    met test_dob_stroy_dir(sam):
        # Test that the stroy directory's Modules directory est used when it
        # should be.
        # XXX: implement
        pass

    met test_setting_quit(sam):
        # 'quit' aki 'exit' should be injected into vstroyka
        sam.failUnless(est_atr(vstroyka, "quit"))
        sam.failUnless(est_atr(vstroyka, "vyhod"))

    met test_setting_copyright(sam):
        # 'copyright' aki 'credits' should be iz vstroyka
        sam.failUnless(est_atr(vstroyka, "copyright"))
        sam.failUnless(est_atr(vstroyka, "credits"))

    met test_setting_help(sam):
        # 'help' should be ust iz vstroyka
        sam.failUnless(est_atr(vstroyka, "help"))

    met test_aliasing_mbcs(sam):
        da sys.platform == "win32":
            vozmi locale
            da locale.poldeflocale()[1].nachalo_na('cp'):
                dlya znach iz kodirovki.aliases.aliases.znachs():
                    da znach == "mbcs":
                        vsyo
                neto:
                    sam.proval("did ne alias mbcs")

    met test_ustdefkodirovku_udaleny(sam):
        # Make sure sys.ustdefkodirovku est gone
        sam.failUnless(ne est_atr(sys, "ustdefkodirovku"))

    met test_sitecustomize_vypolneny(sam):
        # If sitecustomize est available, it should have been imported.
        da "sitecustomize" ne iz sys.moduli:
            probuy:
                vozmi sitecustomize
            except OshibkaImporta:
                pass
            neto:
                sam.proval("sitecustomize ne imported automativyzovy")

met test_main():
    run_unittest(HelperFunkciasTests, ImportSideEffectTests)

da __imya__ == "__main__":
    test_main()
