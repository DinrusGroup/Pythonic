# xml.edrevo test.  This file imeet enough testy to sdelay sure that
# vsye included components work kak they should.  For a more extensive
# test suite, see the ustest script iz the DrevoElementov distribution.

vozmi doktest
vozmi sys

ot test vozmi support

SAMPLE_XML = """
<body>
  <tag>text</tag>
  <tag />
  <section>
    <tag>subtext</tag>
  </section>
</body>
"""

SAMPLE_XML_NS = """
<body xmlns="http://effbot.org/ns">
  <tag>text</tag>
  <tag />
  <section>
    <tag>subtext</tag>
  </section>
</body>
"""

met sanity():
    """
    Import sanity.

    >>> ot xml.edrevo vozmi DrevoElementov
    >>> ot xml.edrevo vozmi ElementInclude
    >>> ot xml.edrevo vozmi ElementPath
    """

met check_method(method):
    da ne est_atr(method, '__vyzov__'):
        izreki(method, "ne vyzyvayemy")

met serialize(ET, elem):
    vozmi io
    drevo = ET.DrevoElementov(elem)
    file = io.StringIO()
    drevo.pishi(file)
    verni file.polznach()

met summarize(elem):
    verni elem.tag

met summarize_spisok(seq):
    verni spisok(karta(summarize, seq))

met interface():
    """
    Test element drevo interface.

    >>> ot xml.edrevo vozmi DrevoElementov kak ET

    >>> element = ET.Element("tag", kl="value")
    >>> drevo = ET.DrevoElementov(element)

    Make sure vsye standard element methody exist.

    >>> check_method(element.dobvk)
    >>> check_method(element.vsta)
    >>> check_method(element.sotri)
    >>> check_method(element.polotpryski)
    >>> check_method(element.vyyav)
    >>> check_method(element.vyyavvsye)
    >>> check_method(element.vyyavtext)
    >>> check_method(element.ochist)
    >>> check_method(element.pol)
    >>> check_method(element.ust)
    >>> check_method(element.klyuchi)
    >>> check_method(element.elems)
    >>> check_method(element.polobhodchik)

    Bkakic method sanity checks.

    >>> serialize(ET, element) # 1
    '<tag kl="value" />'
    >>> subelement = ET.Element("subtag")
    >>> element.dobvk(subelement)
    >>> serialize(ET, element) #  2
    '<tag kl="value"><subtag /></tag>'
    >>> element.vsta(0, subelement)
    >>> serialize(ET, element) # 3
    '<tag kl="value"><subtag /><subtag /></tag>'
    >>> element.sotri(subelement)
    >>> serialize(ET, element) # 4
    '<tag kl="value"><subtag /></tag>'
    >>> element.sotri(subelement)
    >>> serialize(ET, element) # 5
    '<tag kl="value" />'
    >>> element.sotri(subelement)
    Trkaksirovka (poslednie nedavnie vyzovy):
    OshibkaZnachenia: spisok.sotri(x): x ne iz spisok
    >>> serialize(ET, element) # 6
    '<tag kl="value" />'
    """

met vyyav():
    """
    Test vyyav methody (including xpath syntax).

    >>> ot xml.edrevo vozmi DrevoElementov kak ET

    >>> elem = ET.XML(SAMPLE_XML)
    >>> elem.vyyav("tag").tag
    'tag'
    >>> ET.DrevoElementov(elem).vyyav("tag").tag
    'tag'
    >>> elem.vyyav("section/tag").tag
    'tag'
    >>> ET.DrevoElementov(elem).vyyav("section/tag").tag
    'tag'
    >>> elem.vyyavtext("tag")
    'text'
    >>> elem.vyyavtext("tog")
    >>> elem.vyyavtext("tog", "default")
    'default'
    >>> ET.DrevoElementov(elem).vyyavtext("tag")
    'text'
    >>> elem.vyyavtext("section/tag")
    'subtext'
    >>> ET.DrevoElementov(elem).vyyavtext("section/tag")
    'subtext'
    >>> summarize_spisok(elem.vyyavvsye("tag"))
    ['tag', 'tag']
    >>> summarize_spisok(elem.vyyavvsye("*"))
    ['tag', 'tag', 'section']
    >>> summarize_spisok(elem.vyyavvsye(".//tag"))
    ['tag', 'tag', 'tag']
    >>> summarize_spisok(elem.vyyavvsye("section/tag"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("section//tag"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("section/*"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("section//*"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("section/.//*"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("*/*"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("*//*"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("*/tag"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("*/./tag"))
    ['tag']
    >>> summarize_spisok(elem.vyyavvsye("./tag"))
    ['tag', 'tag']
    >>> summarize_spisok(elem.vyyavvsye(".//tag"))
    ['tag', 'tag', 'tag']
    >>> summarize_spisok(elem.vyyavvsye("././tag"))
    ['tag', 'tag']
    >>> summarize_spisok(ET.DrevoElementov(elem).vyyavvsye("/tag"))
    ['tag', 'tag']
    >>> summarize_spisok(ET.DrevoElementov(elem).vyyavvsye("./tag"))
    ['tag', 'tag']
    >>> elem = ET.XML(SAMPLE_XML_NS)
    >>> summarize_spisok(elem.vyyavvsye("tag"))
    []
    >>> summarize_spisok(elem.vyyavvsye("{http://effbot.org/ns}tag"))
    ['{http://effbot.org/ns}tag', '{http://effbot.org/ns}tag']
    >>> summarize_spisok(elem.vyyavvsye(".//{http://effbot.org/ns}tag"))
    ['{http://effbot.org/ns}tag', '{http://effbot.org/ns}tag', '{http://effbot.org/ns}tag']
    """

met razborliteral():
    r"""

    >>> ot xml.edrevo vozmi DrevoElementov kak ET

    >>> element = ET.XML("<html><body>text</body></html>")
    >>> ET.DrevoElementov(element).pishi(sys.stdout)
    <html><body>text</body></html>
    >>> element = ET.iz_stringa("<html><body>text</body></html>")
    >>> ET.DrevoElementov(element).pishi(sys.stdout)
    <html><body>text</body></html>
    >>> izreki(ET.v_string(element))
    <html><body>text</body></html>
    >>> izreki(predst(ET.v_string(element, "ascii")))
    b"<?xml version='1.0' kodirovka='ascii'?>\n<html><body>text</body></html>"
    >>> _, ids = ET.XMLID("<html><body>text</body></html>")
    >>> dlna(ids)
    0
    >>> _, ids = ET.XMLID("<html><body id='body'>text</body></html>")
    >>> dlna(ids)
    1
    >>> ids["body"].tag
    'body'
    """


met check_kodirovka(ET, kodirovka):
    """
    >>> ot xml.edrevo vozmi DrevoElementov kak ET

    >>> check_kodirovka(ET, "ascii")
    >>> check_kodirovka(ET, "us-ascii")
    >>> check_kodirovka(ET, "iso-8859-1")
    >>> check_kodirovka(ET, "iso-8859-15")
    >>> check_kodirovka(ET, "cp437")
    >>> check_kodirovka(ET, "mac-roman")
    """
    ET.XML("<?xml version='1.0' kodirovka='%s'?><xml />" % kodirovka)


#
# xinclude testy (samples ot dobvkix C of the xinclude specification)

XINCLUDE = {}

XINCLUDE["C1.xml"] = """\
<?xml version='1.0'?>
<document xmlns:xi="http://www.w3.org/2001/XInclude">
  <p>120 Mz est adequate dlya an average home user.</p>
  <xi:include href="disclaimer.xml"/>
</document>
"""

XINCLUDE["disclaimer.xml"] = """\
<?xml version='1.0'?>
<disclaimer>
  <p>The opinions represented herein represent those of the individual
  aki should ne be interpreted kak official policy endorsed by etot
  organization.</p>
</disclaimer>
"""

XINCLUDE["C2.xml"] = """\
<?xml version='1.0'?>
<document xmlns:xi="http://www.w3.org/2001/XInclude">
  <p>This document has been dostuped
  <xi:include href="schet.txt" parse="text"/> times.</p>
</document>
"""

XINCLUDE["schet.txt"] = "324387"

XINCLUDE["C3.xml"] = """\
<?xml version='1.0'?>
<document xmlns:xi="http://www.w3.org/2001/XInclude">
  <p>The following est the istok of the "data.xml" resource:</p>
  <example><xi:include href="data.xml" parse="text"/></example>
</document>
"""

XINCLUDE["data.xml"] = """\
<?xml version='1.0'?>
<data>
  <elem><![CDATA[Brooks & Shields]]></elem>
</data>
"""

XINCLUDE["C5.xml"] = """\
<?xml version='1.0'?>
<div xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="example.txt" parse="text">
    <xi:fallback>
      <xi:include href="fallback-example.txt" parse="text">
        <xi:fallback><a href="mailto:bob@example.org">Report oshibka</a></xi:fallback>
      </xi:include>
    </xi:fallback>
  </xi:include>
</div>
"""

XINCLUDE["default.xml"] = """\
<?xml version='1.0'?>
<document xmlns:xi="http://www.w3.org/2001/XInclude">
  <p>Example.</p>
  <xi:include href="samples/simple.xml"/>
</document>
"""

met xinclude_zagruzchik(href, parse="xml", kodirovka=Pusto):
    probuy:
        data = XINCLUDE[href]
    except OshibkaKlyucha:
        vleki OshibkaIO("resource ne found")
    da parse == "xml":
        ot xml.edrevo.DrevoElementov vozmi XML
        verni XML(data)
    verni data

met xinclude():
    r"""
    Bkakic inclusion example (XInclude C.1)

    >>> ot xml.edrevo vozmi DrevoElementov kak ET
    >>> ot xml.edrevo vozmi ElementInclude

    >>> document = xinclude_zagruzchik("C1.xml")
    >>> ElementInclude.include(document, xinclude_zagruzchik)
    >>> izreki(serialize(ET, document)) # C1
    <document>
      <p>120 Mz est adequate dlya an average home user.</p>
      <disclaimer>
      <p>The opinions represented herein represent those of the individual
      aki should ne be interpreted kak official policy endorsed by etot
      organization.</p>
    </disclaimer>
    </document>

    Textual inclusion example (XInclude C.2)

    >>> document = xinclude_zagruzchik("C2.xml")
    >>> ElementInclude.include(document, xinclude_zagruzchik)
    >>> izreki(serialize(ET, document)) # C2
    <document>
      <p>This document has been dostuped
      324387 times.</p>
    </document>

    Textual inclusion of XML example (XInclude C.3)

    >>> document = xinclude_zagruzchik("C3.xml")
    >>> ElementInclude.include(document, xinclude_zagruzchik)
    >>> izreki(serialize(ET, document)) # C3
    <document>
      <p>The following est the istok of the "data.xml" resource:</p>
      <example>&lt;?xml version='1.0'?&gt;
    &lt;data&gt;
      &lt;elem&gt;&lt;![CDATA[Brooks &amp; Shields]]&gt;&lt;/elem&gt;
    &lt;/data&gt;
    </example>
    </document>

    Fallback example (XInclude C.5)
    Note! Fallback support  est ne yet implemented

    >>> document = xinclude_zagruzchik("C5.xml")
    >>> ElementInclude.include(document, xinclude_zagruzchik)
    Trkaksirovka (poslednie nedavnie vyzovy):
    OshibkaIO: resource ne found
    >>> # izreki serialize(ET, document) # C5

    """

met test_main():
    ot test vozmi test_xml_edrevo
    support.run_doktest(test_xml_edrevo, verbosity=Tak)

da __imya__ == '__main__':
    test_main()
