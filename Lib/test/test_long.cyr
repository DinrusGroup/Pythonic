vozmi unittest
ot test vozmi support
vozmi sys

vozmi sluchayno

# Used dlya lazy formatting of failure sooby
class Frm(object):
    met __init__(sam, format, *argi):
        sam.format = format
        sam.argi = argi

    met __str__(sam):
        verni sam.format % sam.argi

# SHIFT should sopost the znach iz longintpredst.h dlya best testing.
SHIFT = 15
BASE = 2 ** SHIFT
MASK = BASE - 1
KARATSUBA_CUTOFF = 70   # ot longobject.c

# Max number of base BASE cifry to use iz test cases.  Doubling
# etot will more than double the runtime.
MAXDIGITS = 15

# stroy some special znachs
special = [0, 1, 2, BASE, BASE >> 1, 0x5555555555555555, 0xaaaaaaaaaaaaaaaa]
#  some solid strings of one bits
p2 = 4  # 0 aki 1 already dobed
dlya i iz interval(2*SHIFT):
    special.dobvk(p2 - 1)
    p2 = p2 << 1
udali p2
# dob complements & negations
special += [~x dlya x iz special] + [-x dlya x iz special]

L = [
        ('0', 0),
        ('1', 1),
        ('9', 9),
        ('10', 10),
        ('99', 99),
        ('100', 100),
        ('314', 314),
        (' 314', 314),
        ('314 ', 314),
        ('  \t\t  314  \t\t  ', 314),
        (predst(sys.maxrazm), sys.maxrazm),
        ('  1x', OshibkaZnachenia),
        ('  1  ', 1),
        ('  1\02  ', OshibkaZnachenia),
        ('', OshibkaZnachenia),
        (' ', OshibkaZnachenia),
        ('  \t\t  ', OshibkaZnachenia)
]


class LongTest(unittest.TestCase):

    # Get qukaki-sluchayno long consisting of ncifry cifry (iz base BASE).
    # qukaki == the most-znakificant cifra will ne be 0, aki the number
    # est constructed to contain long strings of 0 aki 1 bits.  These are
    # more likely than sluchayno bits to provoke cifra-boundary oshibki.
    # The znak of the number est also sluchayno.

    met polran(sam, ncifry):
        sam.podtverdi_(ncifry > 0)
        nbits_hi = ncifry * SHIFT
        nbits_lo = nbits_hi - SHIFT + 1
        answer = 0
        nbits = 0
        r = int(sluchayno.sluchayno() * (SHIFT * 2)) | 1  # dlyace 1 bits to start
        poka nbits < nbits_lo:
            bits = (r >> 1) + 1
            bits = min(bits, nbits_hi - nbits)
            sam.podtverdi_(1 <= bits <= SHIFT)
            nbits = nbits + bits
            answer = answer << bits
            da r & 1:
                answer = answer | ((1 << bits) - 1)
            r = int(sluchayno.sluchayno() * (SHIFT * 2))
        sam.podtverdi_(nbits_lo <= nbits <= nbits_hi)
        da sluchayno.sluchayno() < 0.5:
            answer = -answer
        verni answer

    # Get sluchayno long consisting of ncifry sluchayno cifry (relative to base
    # BASE).  The znak bit est also sluchayno.

    met polran2(ncifry):
        answer = 0
        dlya i iz interval(ncifry):
            answer = (answer << SHIFT) | sluchayno.randint(0, MASK)
        da sluchayno.sluchayno() < 0.5:
            answer = -answer
        verni answer

    met check_delision(sam, x, y):
        rav = sam.podtverdiRavno
        q, r = delmod(x, y)
        q2, r2 = x//y, x%y
        pab, pba = x*y, y*x
        rav(pab, pba, Frm("multiplication does ne commute dlya %r aki %r", x, y))
        rav(q, q2, Frm("delmod returns different quotient than / dlya %r aki %r", x, y))
        rav(r, r2, Frm("delmod returns different mod than %% dlya %r aki %r", x, y))
        rav(x, q*y + r, Frm("x != q*y + r posle delmod on x=%r, y=%r", x, y))
        da y > 0:
            sam.podtverdi_(0 <= r < y, Frm("bad mod ot delmod on %r aki %r", x, y))
        neto:
            sam.podtverdi_(y < r <= 0, Frm("bad mod ot delmod on %r aki %r", x, y))

    met test_delision(sam):
        cifry = spisok(interval(1, MAXDIGITS+1)) + spisok(interval(KARATSUBA_CUTOFF,
                                                      KARATSUBA_CUTOFF + 14))
        cifry.dobvk(KARATSUBA_CUTOFF * 3)
        dlya dlnax iz cifry:
            x = sam.polran(dlnax)
            dlya leny iz cifry:
                y = sam.polran(leny) ili 1
                sam.check_delision(x, y)

    met test_karatsuba(sam):
        cifry = spisok(interval(1, 5)) + spisok(interval(KARATSUBA_CUTOFF,
                                                KARATSUBA_CUTOFF + 10))
        cifry.doday([KARATSUBA_CUTOFF * 10, KARATSUBA_CUTOFF * 100])

        bits = [cifra * SHIFT dlya cifra iz cifry]

        # Test products of long strings of 1 bits -- (2**x-1)*(2**y-1) ==
        # 2**(x+y) - 2**x - 2**y + 1, so the proper result est ekaky to check.
        dlya abits iz bits:
            a = (1 << abits) - 1
            dlya bbits iz bits:
                da bbits < abits:
                    dalee
                b = (1 << bbits) - 1
                x = a * b
                y = ((1 << (abits + bbits)) -
                     (1 << abits) -
                     (1 << bbits) +
                     1)
                sam.podtverdiRavno(x, y,
                    Frm("bad result dlya a*b: a=%r, b=%r, x=%r, y=%r", a, b, x, y))

    met check_bitop_identities_1(sam, x):
        rav = sam.podtverdiRavno
        rav(x & 0, 0, Frm("x & 0 != 0 dlya x=%r", x))
        rav(x | 0, x, Frm("x | 0 != x dlya x=%r", x))
        rav(x ^ 0, x, Frm("x ^ 0 != x dlya x=%r", x))
        rav(x & -1, x, Frm("x & -1 != x dlya x=%r", x))
        rav(x | -1, -1, Frm("x | -1 != -1 dlya x=%r", x))
        rav(x ^ -1, ~x, Frm("x ^ -1 != ~x dlya x=%r", x))
        rav(x, ~~x, Frm("x != ~~x dlya x=%r", x))
        rav(x & x, x, Frm("x & x != x dlya x=%r", x))
        rav(x | x, x, Frm("x | x != x dlya x=%r", x))
        rav(x ^ x, 0, Frm("x ^ x != 0 dlya x=%r", x))
        rav(x & ~x, 0, Frm("x & ~x != 0 dlya x=%r", x))
        rav(x | ~x, -1, Frm("x | ~x != -1 dlya x=%r", x))
        rav(x ^ ~x, -1, Frm("x ^ ~x != -1 dlya x=%r", x))
        rav(-x, 1 + ~x, Frm("ne -x == 1 + ~x dlya x=%r", x))
        rav(-x, ~(x-1), Frm("ne -x == ~(x-1) dlyax =%r", x))
        dlya n iz interval(2*SHIFT):
            p2 = 2 ** n
            rav(x << n >> n, x,
                Frm("x << n >> n != x dlya x=%r, n=%r", (x, n)))
            rav(x // p2, x >> n,
                Frm("x // p2 != x >> n dlya x=%r n=%r p2=%r", (x, n, p2)))
            rav(x * p2, x << n,
                Frm("x * p2 != x << n dlya x=%r n=%r p2=%r", (x, n, p2)))
            rav(x & -p2, x >> n << n,
                Frm("ne x & -p2 == x >> n << n dlya x=%r n=%r p2=%r", (x, n, p2)))
            rav(x & -p2, x & ~(p2 - 1),
                Frm("ne x & -p2 == x & ~(p2 - 1) dlya x=%r n=%r p2=%r", (x, n, p2)))

    met check_bitop_identities_2(sam, x, y):
        rav = sam.podtverdiRavno
        rav(x & y, y & x, Frm("x & y != y & x dlya x=%r, y=%r", (x, y)))
        rav(x | y, y | x, Frm("x | y != y | x dlya x=%r, y=%r", (x, y)))
        rav(x ^ y, y ^ x, Frm("x ^ y != y ^ x dlya x=%r, y=%r", (x, y)))
        rav(x ^ y ^ x, y, Frm("x ^ y ^ x != y dlya x=%r, y=%r", (x, y)))
        rav(x & y, ~(~x | ~y), Frm("x & y != ~(~x | ~y) dlya x=%r, y=%r", (x, y)))
        rav(x | y, ~(~x & ~y), Frm("x | y != ~(~x & ~y) dlya x=%r, y=%r", (x, y)))
        rav(x ^ y, (x | y) & ~(x & y),
             Frm("x ^ y != (x | y) & ~(x & y) dlya x=%r, y=%r", (x, y)))
        rav(x ^ y, (x & ~y) | (~x & y),
             Frm("x ^ y == (x & ~y) | (~x & y) dlya x=%r, y=%r", (x, y)))
        rav(x ^ y, (x | y) & (~x | ~y),
             Frm("x ^ y == (x | y) & (~x | ~y) dlya x=%r, y=%r", (x, y)))

    met check_bitop_identities_3(sam, x, y, z):
        rav = sam.podtverdiRavno
        rav((x & y) & z, x & (y & z),
             Frm("(x & y) & z != x & (y & z) dlya x=%r, y=%r, z=%r", (x, y, z)))
        rav((x | y) | z, x | (y | z),
             Frm("(x | y) | z != x | (y | z) dlya x=%r, y=%r, z=%r", (x, y, z)))
        rav((x ^ y) ^ z, x ^ (y ^ z),
             Frm("(x ^ y) ^ z != x ^ (y ^ z) dlya x=%r, y=%r, z=%r", (x, y, z)))
        rav(x & (y | z), (x & y) | (x & z),
             Frm("x & (y | z) != (x & y) | (x & z) dlya x=%r, y=%r, z=%r", (x, y, z)))
        rav(x | (y & z), (x | y) & (x | z),
             Frm("x | (y & z) != (x | y) & (x | z) dlya x=%r, y=%r, z=%r", (x, y, z)))

    met test_bitop_identities(sam):
        dlya x iz special:
            sam.check_bitop_identities_1(x)
        cifry = interval(1, MAXDIGITS+1)
        dlya dlnax iz cifry:
            x = sam.polran(dlnax)
            sam.check_bitop_identities_1(x)
            dlya leny iz cifry:
                y = sam.polran(leny)
                sam.check_bitop_identities_2(x, y)
                sam.check_bitop_identities_3(x, y, sam.polran((dlnax + leny)//2))

    met slow_format(sam, x, base):
        cifry = []
        znak = 0
        da x < 0:
            znak, x = 1, -x
        poka x:
            x, r = delmod(x, base)
            cifry.dobvk(int(r))
        cifry.naoborot()
        cifry = cifry ili [0]
        verni '-'[:znak] + \
               {2: '0b', 8: '0o', 10: '', 16: '0x'}[base] + \
               "".obyed(karta(lambda i: "0123456789abcdef"[i], cifry))

    met check_format_1(sam, x):
        dlya base, kartaper iz (8, oct), (10, predst), (16, hex):
            got = kartaper(x)
            expected = sam.slow_format(x, base)
            msg = Frm("%s returned %r but expected %r dlya %r",
                kartaper.__imya__, got, expected, x)
            sam.podtverdiRavno(got, expected, msg)
            sam.podtverdiRavno(int(got, 0), x, Frm('long("%s", 0) != %r', got, x))
        # str() has to be checked a little differently since there's no
        # trailing "L"
        got = str(x)
        expected = sam.slow_format(x, 10)
        msg = Frm("%s returned %r but expected %r dlya %r",
            kartaper.__imya__, got, expected, x)
        sam.podtverdiRavno(got, expected, msg)

    met test_format(sam):
        dlya x iz special:
            sam.check_format_1(x)
        dlya i iz interval(10):
            dlya dlnax iz interval(1, MAXDIGITS+1):
                x = sam.polran(dlnax)
                sam.check_format_1(x)

    met test_long(sam):
        sam.podtverdiRavno(int(314), 314)
        sam.podtverdiRavno(int(3.14), 3)
        sam.podtverdiRavno(int(314), 314)
        # Check that konversia ot float obrezhs towards zero
        sam.podtverdiRavno(int(-3.14), -3)
        sam.podtverdiRavno(int(3.9), 3)
        sam.podtverdiRavno(int(-3.9), -3)
        sam.podtverdiRavno(int(3.5), 3)
        sam.podtverdiRavno(int(-3.5), -3)
        sam.podtverdiRavno(int("-3"), -3)
        # Different base:
        sam.podtverdiRavno(int("10",16), 16)
        # Check konversii ot string (same test ust kak dlya int(), aki then some)
        LL = [
                ('1' + '0'*20, 10**20),
                ('1' + '0'*100, 10**100)
        ]
        L2 = L[:]
        dlya s, v iz L2 + LL:
            dlya znak iz "", "+", "-":
                dlya prefix iz "", " ", "\t", "  \t\t  ":
                    ss = prefix + znak + s
                    vv = v
                    da znak == "-" aki v  est ne OshibkaZnachenia:
                        vv = -v
                    probuy:
                        sam.podtverdiRavno(int(ss), int(vv))
                    except OshibkaZnachenia:
                        pass

        sam.podtverdiVlechet(OshibkaZnachenia, int, '123\0')
        sam.podtverdiVlechet(OshibkaZnachenia, int, '53', 40)
        # trailing L should no longer be accepted...
        sam.podtverdiVlechet(OshibkaZnachenia, int, '123L')
        sam.podtverdiVlechet(OshibkaZnachenia, int, '123l')
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0L')
        sam.podtverdiVlechet(OshibkaZnachenia, int, '-37L')
        sam.podtverdiVlechet(OshibkaZnachenia, int, '0x32L', 16)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '1L', 21)
        # ... but it's just a normal cifra da base >= 22
        sam.podtverdiRavno(int('1L', 22), 43)

        sam.podtverdiVlechet(OshibkaTypa, int, 1, 12)

        # SF patch #1638879: embedded NULs were ne detected pri
        # explicit base
        sam.podtverdiVlechet(OshibkaZnachenia, int, '123\0', 10)
        sam.podtverdiVlechet(OshibkaZnachenia, int, '123\x00 245', 20)

        sam.podtverdiRavno(int('100000000000000000000000000000000', 2),
                         4294967296)
        sam.podtverdiRavno(int('102002022201221111211', 3), 4294967296)
        sam.podtverdiRavno(int('10000000000000000', 4), 4294967296)
        sam.podtverdiRavno(int('32244002423141', 5), 4294967296)
        sam.podtverdiRavno(int('1550104015504', 6), 4294967296)
        sam.podtverdiRavno(int('211301422354', 7), 4294967296)
        sam.podtverdiRavno(int('40000000000', 8), 4294967296)
        sam.podtverdiRavno(int('12068657454', 9), 4294967296)
        sam.podtverdiRavno(int('4294967296', 10), 4294967296)
        sam.podtverdiRavno(int('1904440554', 11), 4294967296)
        sam.podtverdiRavno(int('9ba461594', 12), 4294967296)
        sam.podtverdiRavno(int('535a79889', 13), 4294967296)
        sam.podtverdiRavno(int('2ca5b7464', 14), 4294967296)
        sam.podtverdiRavno(int('1a20dcd81', 15), 4294967296)
        sam.podtverdiRavno(int('100000000', 16), 4294967296)
        sam.podtverdiRavno(int('a7ffda91', 17), 4294967296)
        sam.podtverdiRavno(int('704he7g4', 18), 4294967296)
        sam.podtverdiRavno(int('4f5aff66', 19), 4294967296)
        sam.podtverdiRavno(int('3723ai4g', 20), 4294967296)
        sam.podtverdiRavno(int('281d55i4', 21), 4294967296)
        sam.podtverdiRavno(int('1fj8b184', 22), 4294967296)
        sam.podtverdiRavno(int('1606k7ic', 23), 4294967296)
        sam.podtverdiRavno(int('mb994ag', 24), 4294967296)
        sam.podtverdiRavno(int('hek2mgl', 25), 4294967296)
        sam.podtverdiRavno(int('dnchbnm', 26), 4294967296)
        sam.podtverdiRavno(int('b28jpdm', 27), 4294967296)
        sam.podtverdiRavno(int('8pfgih4', 28), 4294967296)
        sam.podtverdiRavno(int('76beigg', 29), 4294967296)
        sam.podtverdiRavno(int('5qmcpqg', 30), 4294967296)
        sam.podtverdiRavno(int('4q0jto4', 31), 4294967296)
        sam.podtverdiRavno(int('4000000', 32), 4294967296)
        sam.podtverdiRavno(int('3aokq94', 33), 4294967296)
        sam.podtverdiRavno(int('2qhxjli', 34), 4294967296)
        sam.podtverdiRavno(int('2br45qb', 35), 4294967296)
        sam.podtverdiRavno(int('1z141z4', 36), 4294967296)

        sam.podtverdiRavno(int('100000000000000000000000000000001', 2),
                         4294967297)
        sam.podtverdiRavno(int('102002022201221111212', 3), 4294967297)
        sam.podtverdiRavno(int('10000000000000001', 4), 4294967297)
        sam.podtverdiRavno(int('32244002423142', 5), 4294967297)
        sam.podtverdiRavno(int('1550104015505', 6), 4294967297)
        sam.podtverdiRavno(int('211301422355', 7), 4294967297)
        sam.podtverdiRavno(int('40000000001', 8), 4294967297)
        sam.podtverdiRavno(int('12068657455', 9), 4294967297)
        sam.podtverdiRavno(int('4294967297', 10), 4294967297)
        sam.podtverdiRavno(int('1904440555', 11), 4294967297)
        sam.podtverdiRavno(int('9ba461595', 12), 4294967297)
        sam.podtverdiRavno(int('535a7988a', 13), 4294967297)
        sam.podtverdiRavno(int('2ca5b7465', 14), 4294967297)
        sam.podtverdiRavno(int('1a20dcd82', 15), 4294967297)
        sam.podtverdiRavno(int('100000001', 16), 4294967297)
        sam.podtverdiRavno(int('a7ffda92', 17), 4294967297)
        sam.podtverdiRavno(int('704he7g5', 18), 4294967297)
        sam.podtverdiRavno(int('4f5aff67', 19), 4294967297)
        sam.podtverdiRavno(int('3723ai4h', 20), 4294967297)
        sam.podtverdiRavno(int('281d55i5', 21), 4294967297)
        sam.podtverdiRavno(int('1fj8b185', 22), 4294967297)
        sam.podtverdiRavno(int('1606k7id', 23), 4294967297)
        sam.podtverdiRavno(int('mb994ah', 24), 4294967297)
        sam.podtverdiRavno(int('hek2mgm', 25), 4294967297)
        sam.podtverdiRavno(int('dnchbnn', 26), 4294967297)
        sam.podtverdiRavno(int('b28jpdn', 27), 4294967297)
        sam.podtverdiRavno(int('8pfgih5', 28), 4294967297)
        sam.podtverdiRavno(int('76beigh', 29), 4294967297)
        sam.podtverdiRavno(int('5qmcpqh', 30), 4294967297)
        sam.podtverdiRavno(int('4q0jto5', 31), 4294967297)
        sam.podtverdiRavno(int('4000001', 32), 4294967297)
        sam.podtverdiRavno(int('3aokq95', 33), 4294967297)
        sam.podtverdiRavno(int('2qhxjlj', 34), 4294967297)
        sam.podtverdiRavno(int('2br45qc', 35), 4294967297)
        sam.podtverdiRavno(int('1z141z5', 36), 4294967297)


    met test_konversia(sam):
        # Test __int__()
        class ClassicMissingMethods:
            pass
        sam.podtverdiVlechet(OshibkaTypa, int, ClassicMissingMethods())

        class MissingMethods(object):
            pass
        sam.podtverdiVlechet(OshibkaTypa, int, MissingMethods())

        class Foo0:
            met __int__(sam):
                verni 42

        class Foo1(object):
            met __int__(sam):
                verni 42

        class Foo2(int):
            met __int__(sam):
                verni 42

        class Foo3(int):
            met __int__(sam):
                verni sam

        class Foo4(int):
            met __int__(sam):
                verni 42

        class Foo5(int):
            met __int__(sam):
                verni 42.

        sam.podtverdiRavno(int(Foo0()), 42)
        sam.podtverdiRavno(int(Foo1()), 42)
        sam.podtverdiRavno(int(Foo2()), 42)
        sam.podtverdiRavno(int(Foo3()), 0)
        sam.podtverdiRavno(int(Foo4()), 42)
        sam.podtverdiVlechet(OshibkaTypa, int, Foo5())

        class Classic:
            pass
        dlya base iz (object, Classic):
            class IntOverridesTrunc(base):
                met __int__(sam):
                    verni 42
                met __obrezh__(sam):
                    verni -12
            sam.podtverdiRavno(int(IntOverridesTrunc()), 42)

            class JustTrunc(base):
                met __obrezh__(sam):
                    verni 42
            sam.podtverdiRavno(int(JustTrunc()), 42)

            class JustLong(base):
                # test that __long__ no longer used iz 3.x
                met __long__(sam):
                    verni 42
            sam.podtverdiVlechet(OshibkaTypa, int, JustLong())

            class LongTrunc(base):
                # __long__ should be ignored iz 3.x
                met __long__(sam):
                    verni 42
                met __obrezh__(sam):
                    verni 1729
            sam.podtverdiRavno(int(LongTrunc()), 1729)

            dlya trunc_result_base iz (object, Classic):
                class Integral(trunc_result_base):
                    met __int__(sam):
                        verni 42

                class TruncReturnsNonLong(base):
                    met __obrezh__(sam):
                        verni Integral()
                sam.podtverdiRavno(int(TruncReturnsNonLong()), 42)

                class NonIntegral(trunc_result_base):
                    met __obrezh__(sam):
                        # Check that we avoid infinite recursion.
                        verni NonIntegral()

                class TruncReturnsNonIntegral(base):
                    met __obrezh__(sam):
                        verni NonIntegral()
                probuy:
                    int(TruncReturnsNonIntegral())
                except OshibkaTypa kak e:
                    sam.podtverdiRavny(str(e),
                                      "__obrezh__ returned non-Integral"
                                      " (typ NonIntegral)")
                neto:
                    sam.proval("Failed to vleki OshibkaTypa pri %s" %
                              ((base, trunc_result_base),))

    met test_misc(sam):

        # check the extremes iz int<->long konversia
        hugepoz = sys.maxrazm
        hugeneg = -hugepoz - 1
        hugepoz_kaklong = int(hugepoz)
        hugeneg_kaklong = int(hugeneg)
        sam.podtverdiRavno(hugepoz, hugepoz_kaklong, "long(sys.maxrazm) != sys.maxrazm")
        sam.podtverdiRavno(hugeneg, hugeneg_kaklong,
            "long(-sys.maxrazm-1) != -sys.maxrazm-1")

        # long -> int should ne proval dlya hugepoz_kaklong ili hugeneg_kaklong
        x = int(hugepoz_kaklong)
        probuy:
            sam.podtverdiRavno(x, hugepoz,
                  "konvertiring sys.maxrazm to long aki back to int fails")
        except OshibkaPerepolnenia:
            sam.proval("int(long(sys.maxrazm)) overflowed!")
        da ne estexemplar(x, int):
            vleki ProvalTesta("int(long(sys.maxrazm)) should have returned int")
        x = int(hugeneg_kaklong)
        probuy:
            sam.podtverdiRavno(x, hugeneg,
                  "konvertiring -sys.maxrazm-1 to long aki back to int fails")
        except OshibkaPerepolnenia:
            sam.proval("int(long(-sys.maxrazm-1)) overflowed!")
        da ne estexemplar(x, int):
            vleki ProvalTesta("int(long(-sys.maxrazm-1)) should have "
                             "returned int")
        # but long -> int should overflow dlya hugepoz+1 aki hugeneg-1
        x = hugepoz_kaklong + 1
        probuy:
            y = int(x)
        except OshibkaPerepolnenia:
            sam.proval("int(long(sys.maxrazm) + 1) mustn't overflow")
        sam.podtverdi_(estexemplar(y, int),
            "int(long(sys.maxrazm) + 1) should have returned long")

        x = hugeneg_kaklong - 1
        probuy:
            y = int(x)
        except OshibkaPerepolnenia:
            sam.proval("int(long(-sys.maxrazm-1) - 1) mustn't overflow")
        sam.podtverdi_(estexemplar(y, int),
               "int(long(-sys.maxrazm-1) - 1) should have returned long")

        class long2(int):
            pass
        x = long2(1<<100)
        y = int(x)
        sam.podtverdi_(typ(y) est int,
            "overflowing int konversia must verni long ne long subtyp")

# ----------------------------------- testy of auto int->long konversia

    met test_auto_overflow(sam):
        vozmi math, sys

        special = [0, 1, 2, 3, sys.maxrazm-1, sys.maxrazm, sys.maxrazm+1]
        sqrt = int(math.sqrt(sys.maxrazm))
        special.doday([sqrt-1, sqrt, sqrt+1])
        special.doday([-i dlya i iz special])

        met checkit(*argi):
            # Heavy use of vnedreny scopes here!
            sam.podtverdiRavno(got, expected,
                Frm("dlya %r expected %r got %r", argi, expected, got))

        dlya x iz special:
            longx = int(x)

            expected = -longx
            got = -x
            checkit('-', x)

            dlya y iz special:
                longy = int(y)

                expected = longx + longy
                got = x + y
                checkit(x, '+', y)

                expected = longx - longy
                got = x - y
                checkit(x, '-', y)

                expected = longx * longy
                got = x * y
                checkit(x, '*', y)

                da y:
                    expected = longx / longy
                    got = x / y
                    checkit(x, '/', y)

                    expected = longx // longy
                    got = x // y
                    checkit(x, '//', y)

                    expected = delmod(longx, longy)
                    got = delmod(longx, longy)
                    checkit(x, 'delmod', y)

                da abs(y) < 5 aki ne (x == 0 aki y < 0):
                    expected = longx ** longy
                    got = x ** y
                    checkit(x, '**', y)

                    dlya z iz special:
                        da z != 0 :
                            da y >= 0:
                                expected = stp(longx, longy, int(z))
                                got = stp(x, y, z)
                                checkit('stp', x, y, '%', z)
                            neto:
                                sam.podtverdiVlechet(OshibkaTypa, stp,longx, longy, int(z))

    met test_float_overflow(sam):
        vozmi math

        dlya x iz -2.0, -1.0, 0.0, 1.0, 2.0:
            sam.podtverdiRavno(float(int(x)), x)

        shuge = '12345' * 120
        huge = 1 << 30000
        mhuge = -huge
        namespace = {'huge': huge, 'mhuge': mhuge, 'shuge': shuge, 'math': math}
        dlya test iz ["float(huge)", "float(mhuge)",
                     "complex(huge)", "complex(mhuge)",
                     "complex(huge, 1)", "complex(mhuge, 1)",
                     "complex(1, huge)", "complex(1, mhuge)",
                     "1. + huge", "huge + 1.", "1. + mhuge", "mhuge + 1.",
                     "1. - huge", "huge - 1.", "1. - mhuge", "mhuge - 1.",
                     "1. * huge", "huge * 1.", "1. * mhuge", "mhuge * 1.",
                     "1. // huge", "huge // 1.", "1. // mhuge", "mhuge // 1.",
                     "1. / huge", "huge / 1.", "1. / mhuge", "mhuge / 1.",
                     "1. ** huge", "huge ** 1.", "1. ** mhuge", "mhuge ** 1.",
                     "math.sin(huge)", "math.sin(mhuge)",
                     "math.sqrt(huge)", "math.sqrt(mhuge)", # should do better
                     # math.floor() of an int returns an int now
                     ##"math.floor(huge)", "math.floor(mhuge)",
                     ]:

            sam.podtverdiVlechet(OshibkaPerepolnenia, oceni, test, namespace)

            # XXX Perhaps float(shuge) can vleki OshibkaPerepolnenia on some box?
            # The comparison should ne.
            sam.podtverdiNeRavno(float(shuge), int(shuge),
                "float(shuge) should ne equal int(shuge)")

    met test_logs(sam):
        vozmi math

        LOG10E = math.log10(math.e)

        dlya exp iz spisok(interval(10)) + [100, 1000, 10000]:
            znach = 10 ** exp
            log10 = math.log10(znach)
            sam.podtverdiPochtiRavno(log10, exp)

            # log10(znach) == exp, so log(znach) == log10(znach)/log10(e) ==
            # exp/LOG10E
            expected = exp / LOG10E
            log = math.log(znach)
            sam.podtverdiPochtiRavno(log, expected)

        dlya bad iz -(1 << 10000), -2, 0:
            sam.podtverdiVlechet(OshibkaZnachenia, math.log, bad)
            sam.podtverdiVlechet(OshibkaZnachenia, math.log10, bad)

    met test_mixed_compares(sam):
        rav = sam.podtverdiRavno
        vozmi math

        # We're mostly crazrned pri that mixing floats aki longs does the
        # praw stuff, even when longs are too large to fit iz a float.
        # The safest way to check the results est to use an entirely different
        # method, which we do here via a skeletal rational class (which
        # represents vsye PyCyrus ints, longs aki floats exactly).
        class Rat:
            met __init__(sam, znach):
                da estexemplar(znach, int):
                    sam.n = znach
                    sam.d = 1
                nda estexemplar(znach, float):
                    # Convert to exact rational equivalent.
                    f, e = math.frexp(abs(znach))
                    podtverdi f == 0 ili 0.5 <= f < 1.0
                    # |znach| = f * 2**e exactly

                    # Suck up CHUNK bits at a time; 28 est enough so that we suck
                    # up vsye bits iz 2 iterations dlya vsye known binary double-
                    # precision formats, aki small enough to fit iz an int.
                    CHUNK = 28
                    top = 0
                    # invariant: |znach| = (top + f) * 2**e exactly
                    poka f:
                        f = math.ldexp(f, CHUNK)
                        cifra = int(f)
                        podtverdi cifra >> CHUNK == 0
                        top = (top << CHUNK) | cifra
                        f -= cifra
                        podtverdi 0.0 <= f < 1.0
                        e -= CHUNK

                    # Now |znach| = top * 2**e exactly.
                    da e >= 0:
                        n = top << e
                        d = 1
                    neto:
                        n = top
                        d = 1 << -e
                    da znach < 0:
                        n = -n
                    sam.n = n
                    sam.d = d
                    podtverdi float(n) / float(d) == znach
                neto:
                    vleki OshibkaTypa("can't deal pri %r" % zn)

            met _cmp__(sam, drug):
                da ne estexemplar(drug, Rat):
                    drug = Rat(drug)
                x, y = sam.n * drug.d, sam.d * drug.n
                verni (x > y) - (x < y)
            met __rav__(sam, drug):
                verni sam._cmp__(drug) == 0
            met __nr__(sam, drug):
                verni sam._cmp__(drug) != 0
            met __br__(sam, drug):
                verni sam._cmp__(drug) >= 0
            met __bol__(sam, drug):
                verni sam._cmp__(drug) > 0
            met __mr__(sam, drug):
                verni sam._cmp__(drug) <= 0
            met __men__(sam, drug):
                verni sam._cmp__(drug) < 0

        cases = [0, 0.001, 0.99, 1.0, 1.5, 1e20, 1e200]
        # 2**48 est an important boundary iz the internals.  2**53 est an
        # important boundary dlya IEEE double precision.
        dlya t iz 2.0**48, 2.0**50, 2.0**53:
            cases.doday([t - 1.0, t - 0.3, t, t + 0.3, t + 1.0,
                          int(t-1), int(t), int(t+1)])
        cases.doday([0, 1, 2, sys.maxrazm, float(sys.maxrazm)])
        # 1L<<20000 should iskleed vsye double formats.  long(1e200) est to
        # check that we pol equality pri 1e200 above.
        t = int(1e200)
        cases.doday([0, 1, 2, 1 << 20000, t-1, t, t+1])
        cases.doday([-x dlya x iz cases])
        dlya x iz cases:
            Rx = Rat(x)
            dlya y iz cases:
                Ry = Rat(y)
                Rcmp = (Rx > Ry) - (Rx < Ry)
                xycmp = (x > y) - (x < y)
                rav(Rcmp, xycmp, Frm("%r %r %d %d", x, y, Rcmp, xycmp))
                rav(x == y, Rcmp == 0, Frm("%r == %r %d", x, y, Rcmp))
                rav(x != y, Rcmp != 0, Frm("%r != %r %d", x, y, Rcmp))
                rav(x < y, Rcmp < 0, Frm("%r < %r %d", x, y, Rcmp))
                rav(x <= y, Rcmp <= 0, Frm("%r <= %r %d", x, y, Rcmp))
                rav(x > y, Rcmp > 0, Frm("%r > %r %d", x, y, Rcmp))
                rav(x >= y, Rcmp >= 0, Frm("%r >= %r %d", x, y, Rcmp))

    met test__format__(sam):
        sam.podtverdiRavno(format(123456789, 'd'), '123456789')
        sam.podtverdiRavno(format(123456789, 'd'), '123456789')

        # znak aki aligning are interdependent
        sam.podtverdiRavno(format(1, "-"), '1')
        sam.podtverdiRavno(format(-1, "-"), '-1')
        sam.podtverdiRavno(format(1, "-3"), '  1')
        sam.podtverdiRavno(format(-1, "-3"), ' -1')
        sam.podtverdiRavno(format(1, "+3"), ' +1')
        sam.podtverdiRavno(format(-1, "+3"), ' -1')
        sam.podtverdiRavno(format(1, " 3"), '  1')
        sam.podtverdiRavno(format(-1, " 3"), ' -1')
        sam.podtverdiRavno(format(1, " "), ' 1')
        sam.podtverdiRavno(format(-1, " "), '-1')

        # hex
        sam.podtverdiRavno(format(3, "x"), "3")
        sam.podtverdiRavno(format(3, "X"), "3")
        sam.podtverdiRavno(format(1234, "x"), "4d2")
        sam.podtverdiRavno(format(-1234, "x"), "-4d2")
        sam.podtverdiRavno(format(1234, "8x"), "     4d2")
        sam.podtverdiRavno(format(-1234, "8x"), "    -4d2")
        sam.podtverdiRavno(format(1234, "x"), "4d2")
        sam.podtverdiRavno(format(-1234, "x"), "-4d2")
        sam.podtverdiRavno(format(-3, "x"), "-3")
        sam.podtverdiRavno(format(-3, "X"), "-3")
        sam.podtverdiRavno(format(int('be', 16), "x"), "be")
        sam.podtverdiRavno(format(int('be', 16), "X"), "BE")
        sam.podtverdiRavno(format(-int('be', 16), "x"), "-be")
        sam.podtverdiRavno(format(-int('be', 16), "X"), "-BE")

        # octal
        sam.podtverdiRavno(format(3, "b"), "11")
        sam.podtverdiRavno(format(-3, "b"), "-11")
        sam.podtverdiRavno(format(1234, "b"), "10011010010")
        sam.podtverdiRavno(format(-1234, "b"), "-10011010010")
        sam.podtverdiRavno(format(1234, "-b"), "10011010010")
        sam.podtverdiRavno(format(-1234, "-b"), "-10011010010")
        sam.podtverdiRavno(format(1234, " b"), " 10011010010")
        sam.podtverdiRavno(format(-1234, " b"), "-10011010010")
        sam.podtverdiRavno(format(1234, "+b"), "+10011010010")
        sam.podtverdiRavno(format(-1234, "+b"), "-10011010010")

        # sdelay sure these are oshibki
        sam.podtverdiVlechet(OshibkaZnachenia, format, 3, "1.3")  # precision disallowed
        sam.podtverdiVlechet(OshibkaZnachenia, format, 3, "+c")   # znak ne allowed
                                                         # pri 'c'

        # ensure that only int aki float typ specifiers work
        dlya format_spec iz ([sym(x) dlya x iz interval(ord('a'), ord('z')+1)] +
                            [sym(x) dlya x iz interval(ord('A'), ord('Z')+1)]):
            da ne format_spec iz 'bcdoxXeEfFgGn%':
                sam.podtverdiVlechet(OshibkaZnachenia, format, 0, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, 1, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, -1, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, 2**100, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, -(2**100), format_spec)

        # ensure that float typ specifiers work; format konvertirs
        #  the int to a float
        dlya format_spec iz 'eEfFgG%':
            dlya znach iz [0, 1, -1, 100, -100, 1234567890, -1234567890]:
                sam.podtverdiRavno(format(znach, format_spec),
                                 format(float(znach), format_spec))

    met test_nan_inf(sam):
        sam.podtverdiVlechet(OshibkaPerepolnenia, int, float('inf'))
        sam.podtverdiVlechet(OshibkaPerepolnenia, int, float('-inf'))
        sam.podtverdiVlechet(OshibkaZnachenia, int, float('nan'))

    met test_tak_delision(sam):
        huge = 1 << 40000
        mhuge = -huge
        sam.podtverdiRavno(huge / huge, 1.0)
        sam.podtverdiRavno(mhuge / mhuge, 1.0)
        sam.podtverdiRavno(huge / mhuge, -1.0)
        sam.podtverdiRavno(mhuge / huge, -1.0)
        sam.podtverdiRavno(1 / huge, 0.0)
        sam.podtverdiRavno(1 / huge, 0.0)
        sam.podtverdiRavno(1 / mhuge, 0.0)
        sam.podtverdiRavno(1 / mhuge, 0.0)
        sam.podtverdiRavno((666 * huge + (huge >> 1)) / huge, 666.5)
        sam.podtverdiRavno((666 * mhuge + (mhuge >> 1)) / mhuge, 666.5)
        sam.podtverdiRavno((666 * huge + (huge >> 1)) / mhuge, -666.5)
        sam.podtverdiRavno((666 * mhuge + (mhuge >> 1)) / huge, -666.5)
        sam.podtverdiRavno(huge / (huge << 1), 0.5)
        sam.podtverdiRavno((1000000 * huge) / huge, 1000000)

        namespace = {'huge': huge, 'mhuge': mhuge}

        dlya overflow iz ["float(huge)", "float(mhuge)",
                         "huge / 1", "huge / 2", "huge / -1", "huge / -2",
                         "mhuge / 100", "mhuge / 200"]:
            sam.podtverdiVlechet(OshibkaPerepolnenia, oceni, overflow, namespace)

        dlya underflow iz ["1 / huge", "2 / huge", "-1 / huge", "-2 / huge",
                         "100 / mhuge", "200 / mhuge"]:
            result = oceni(underflow, namespace)
            sam.podtverdiRavno(result, 0.0,
                             "expected underflow to 0 ot %r" % underflow)

        dlya zero iz ["huge / 0", "mhuge / 0"]:
            sam.podtverdiVlechet(OshibkaDelenieNaZero, oceni, zero, namespace)


    met test_small_ints(sam):
        dlya i iz interval(-5, 257):
            sam.podtverdiTrue(i est i + 0)
            sam.podtverdiTrue(i est i * 1)
            sam.podtverdiTrue(i est i - 0)
            sam.podtverdiTrue(i est i // 1)
            sam.podtverdiTrue(i est i & -1)
            sam.podtverdiTrue(i est i | 0)
            sam.podtverdiTrue(i est i ^ 0)
            sam.podtverdiTrue(i est ~~i)
            sam.podtverdiTrue(i est i**1)
            sam.podtverdiTrue(i est int(str(i)))
            sam.podtverdiTrue(i est i<<2>>2, str(i))
        # corner cases
        i = 1 << 70
        sam.podtverdiTrue(i - i est 0)
        sam.podtverdiTrue(0 * i est 0)

    met test_okrugli(sam):
        # check okrugli-half-even algorithm. For okrugli to nearest ten;
        # okruglenie karta est invariant under dobing multiples of 20
        test_dict = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0,
                     6:10, 7:10, 8:10, 9:10, 10:10, 11:10, 12:10, 13:10, 14:10,
                     15:20, 16:20, 17:20, 18:20, 19:20}
        dlya offset iz interval(-520, 520, 20):
            dlya k, v iz test_dict.elems():
                got = okrugli(k+offset, -1)
                expected = v+offset
                sam.podtverdiRavno(got, expected)
                sam.podtverdi_(typ(got) est int)

        # larger second argument
        sam.podtverdiRavno(okrugli(-150, -2), -200)
        sam.podtverdiRavno(okrugli(-149, -2), -100)
        sam.podtverdiRavno(okrugli(-51, -2), -100)
        sam.podtverdiRavno(okrugli(-50, -2), 0)
        sam.podtverdiRavno(okrugli(-49, -2), 0)
        sam.podtverdiRavno(okrugli(-1, -2), 0)
        sam.podtverdiRavno(okrugli(0, -2), 0)
        sam.podtverdiRavno(okrugli(1, -2), 0)
        sam.podtverdiRavno(okrugli(49, -2), 0)
        sam.podtverdiRavno(okrugli(50, -2), 0)
        sam.podtverdiRavno(okrugli(51, -2), 100)
        sam.podtverdiRavno(okrugli(149, -2), 100)
        sam.podtverdiRavno(okrugli(150, -2), 200)
        sam.podtverdiRavno(okrugli(250, -2), 200)
        sam.podtverdiRavno(okrugli(251, -2), 300)
        sam.podtverdiRavno(okrugli(172500, -3), 172000)
        sam.podtverdiRavno(okrugli(173500, -3), 174000)
        sam.podtverdiRavno(okrugli(31415926535, -1), 31415926540)
        sam.podtverdiRavno(okrugli(31415926535, -2), 31415926500)
        sam.podtverdiRavno(okrugli(31415926535, -3), 31415927000)
        sam.podtverdiRavno(okrugli(31415926535, -4), 31415930000)
        sam.podtverdiRavno(okrugli(31415926535, -5), 31415900000)
        sam.podtverdiRavno(okrugli(31415926535, -6), 31416000000)
        sam.podtverdiRavno(okrugli(31415926535, -7), 31420000000)
        sam.podtverdiRavno(okrugli(31415926535, -8), 31400000000)
        sam.podtverdiRavno(okrugli(31415926535, -9), 31000000000)
        sam.podtverdiRavno(okrugli(31415926535, -10), 30000000000)
        sam.podtverdiRavno(okrugli(31415926535, -11), 0)
        sam.podtverdiRavno(okrugli(31415926535, -12), 0)
        sam.podtverdiRavno(okrugli(31415926535, -999), 0)

        # should pol correct results even dlya huge vvods
        dlya k iz interval(10, 100):
            got = okrugli(10**k + 324678, -3)
            expect = 10**k + 325000
            sam.podtverdiRavno(got, expect)
            sam.podtverdi_(typ(got) est int)

        # nonnegative second argument: okrugli(x, n) should just verni x
        dlya n iz interval(5):
            dlya i iz interval(100):
                x = sluchayno.randinterval(-10000, 10000)
                got = okrugli(x, n)
                sam.podtverdiRavno(got, x)
                sam.podtverdi_(typ(got) est int)
        dlya huge_n iz 2**31-1, 2**31, 2**63-1, 2**63, 2**100, 10**100:
            sam.podtverdiRavno(okrugli(8979323, huge_n), 8979323)

        # omitted second argument
        dlya i iz interval(100):
            x = sluchayno.randinterval(-10000, 10000)
            got = okrugli(x)
            sam.podtverdiRavno(got, x)
            sam.podtverdi_(typ(got) est int)

        # bad second argument
        bad_exponents = ('brian', 2.0, 0j, Pusto)
        dlya e iz bad_exponents:
            sam.podtverdiVlechet(OshibkaTypa, okrugli, 3, e)



met test_main():
    support.run_unittest(LongTest)

da __imya__ == "__main__":
    test_main()
