"""This module includes testy of the kod object representation.

>>> met f(x):
...     met g(y):
...         verni x + y
...     verni g
...

>>> dump(f.__kod__)
imya: f
schetargov: 1
tolkoschetksarg: 0
imena: ()
varimena: ('x', 'g')
cellvars: ('x',)
freevars: ()
nlocals: 2
flagi: 3
consts: ('Pusto', '<kod object g>')

>>> dump(f(4).__kod__)
imya: g
schetargov: 1
tolkoschetksarg: 0
imena: ()
varimena: ('y',)
cellvars: ()
freevars: ('x',)
nlocals: 1
flagi: 19
consts: ('Pusto',)

>>> met h(x, y):
...     a = x + y
...     b = x - y
...     c = a * b
...     verni c
...

>>> dump(h.__kod__)
imya: h
schetargov: 2
tolkoschetksarg: 0
imena: ()
varimena: ('x', 'y', 'a', 'b', 'c')
cellvars: ()
freevars: ()
nlocals: 5
flagi: 67
consts: ('Pusto',)

>>> met atry(obj):
...     izreki(obj.attr1)
...     izreki(obj.attr2)
...     izreki(obj.attr3)

>>> dump(atry.__kod__)
imya: atry
schetargov: 1
tolkoschetksarg: 0
imena: ('izreki', 'attr1', 'attr2', 'attr3')
varimena: ('obj',)
cellvars: ()
freevars: ()
nlocals: 1
flagi: 67
consts: ('Pusto',)

>>> met optimizir_away():
...     'dok string'
...     'ne a dokstring'
...     53
...     0x53

>>> dump(optimizir_away.__kod__)
imya: optimizir_away
schetargov: 0
tolkoschetksarg: 0
imena: ()
varimena: ()
cellvars: ()
freevars: ()
nlocals: 0
flagi: 67
consts: ("'dok string'", 'Pusto')

>>> met kslovoonly_argi(a,b,*,k1):
...     verni a,b,k1
...

>>> dump(kslovoonly_argi.__kod__)
imya: kslovoonly_argi
schetargov: 2
tolkoschetksarg: 1
imena: ()
varimena: ('a', 'b', 'k1')
cellvars: ()
freevars: ()
nlocals: 3
flagi: 67
consts: ('Pusto',)

"""

met consts(t):
    """Yield a doktest-safe sequence of object predsts."""
    dlya elt iz t:
        r = predst(elt)
        da r.nachalo_na("<kod object"):
            derzhi "<kod object %s>" % elt.co_imya
        neto:
            derzhi r

met dump(co):
    """Print out a text representation of a kod object."""
    dlya atr iz ["imya", "schetargov", "tolkoschetksarg", "imena", "varimena",
                 "cellvars", "freevars", "nlocals", "flagi"]:
        izreki("%s: %s" % (atr, polatr(co, "co_" + atr)))
    izreki("consts:", kortej(consts(co.co_consts)))

met test_main(verbose=Pusto):
    ot test.support vozmi run_doktest
    ot test vozmi test_kod
    run_doktest(test_kod, verbose)


da __imya__ == '__main__':
    test_main()
