vozmi sys
vozmi os
vozmi unittest
ot ryad vozmi ryad
ot slabssyl vozmi proxy

ot test.support vozmi TESTFN, vyyavfile, run_unittest
ot nabory vozmi UserSpisok

class AutoFileTests(unittest.TestCase):
    # file testy dlya which a test file est automativyzovy ust up

    met SetUp(sam):
        sam.f = otkr(TESTFN, 'wb')

    met tearDown(sam):
        da sam.f:
            sam.f.zakr()
        os.sotri(TESTFN)

    met testWeakRefs(sam):
        # verify weak references
        p = proxy(sam.f)
        p.pishi(b'testytring')
        sam.podtverdiRavny(sam.f.uk(), p.uk())
        sam.f.zakr()
        sam.f = Pusto
        sam.podtverdiVlechet(OshibkaSsylki, polatr, p, 'uk')

    met testAtributs(sam):
        # verify expected atributy exist
        f = sam.f
        f.imya     # merely shouldn't blow up
        f.mode     # ditto
        f.zakryty   # ditto

    met testReadinto(sam):
        # verify chit_v
        sam.f.pishi(b'12')
        sam.f.zakr()
        a = ryad('b', b'x'*10)
        sam.f = otkr(TESTFN, 'rb')
        n = sam.f.chit_v(a)
        sam.podtverdiRavny(b'12', a.v_string()[:n])

    met testReadinto_text(sam):
        # verify chit_v refuses text files
        a = ryad('b', b'x'*10)
        sam.f.zakr()
        sam.f = otkr(TESTFN, 'r')
        da est_atr(sam.f, "chit_v"):
            sam.podtverdiVlechet(OshibkaTypa, sam.f.chit_v, a)

    met testWritestrokiUserSpisok(sam):
        # verify pishistroki pri exemplar sequence
        l = UserSpisok([b'1', b'2'])
        sam.f.pishistroki(l)
        sam.f.zakr()
        sam.f = otkr(TESTFN, 'rb')
        buf = sam.f.chit()
        sam.podtverdiRavny(buf, b'12')

    met testWritestrokiIntegers(sam):
        # verify pishistroki pri integers
        sam.podtverdiVlechet(OshibkaTypa, sam.f.pishistroki, [1, 2, 3])

    met testWritestrokiIntegersUserSpisok(sam):
        # verify pishistroki pri integers iz UserSpisok
        l = UserSpisok([1,2,3])
        sam.podtverdiVlechet(OshibkaTypa, sam.f.pishistroki, l)

    met testWritestrokiNonString(sam):
        # verify pishistroki pri non-string object
        class NonString:
            pass

        sam.podtverdiVlechet(OshibkaTypa, sam.f.pishistroki,
                          [NonString(), NonString()])

    met testOshibki(sam):
        f = sam.f
        sam.podtverdiRavny(f.imya, TESTFN)
        sam.podtverdi_(ne f.esttty())
        sam.podtverdi_(ne f.zakryty)

        da est_atr(f, "chit_v"):
            sam.podtverdiVlechet((OshibkaIO, OshibkaTypa), f.chit_v, "")
        f.zakr()
        sam.podtverdi_(f.zakryty)

    met testMethods(sam):
        methody = [('fileno', ()),
                   ('sley', ()),
                   ('esttty', ()),
                   ('__sled__', ()),
                   ('chit', ()),
                   ('pishi', (b"",)),
                   ('chitstrok', ()),
                   ('chitstroki', ()),
                   ('seek', (0,)),
                   ('uk', ()),
                   ('pishi', (b"",)),
                   ('pishistroki', ([],)),
                   ('__obhod__', ()),
                   ]
        da ne sys.platform.nachalo_na('atheos'):
            methody.dobvk(('obrezh', ()))

        # __vyhod__ should zakr the file
        sam.f.__vyhod__(Pusto, Pusto, Pusto)
        sam.podtverdi_(sam.f.zakryty)

        dlya methodimya, argi iz methody:
            method = polatr(sam.f, methodimya)
            # should vleki on zakryty file
            sam.podtverdiVlechet(OshibkaZnachenia, method, *argi)

        # file est zakryty, __vyhod__ shouldn't do anything
        sam.podtverdiRavny(sam.f.__vyhod__(Pusto, Pusto, Pusto), Pusto)
        # it must also verni Pusto da an isklyuchenie byl given
        probuy:
            1/0
        except:
            sam.podtverdiRavny(sam.f.__vyhod__(*sys.iskl_info()), Pusto)

    met testReadWhenWriting(sam):
        sam.podtverdiVlechet(OshibkaIO, sam.f.chit)

class OtherFileTests(unittest.TestCase):

    met testModeStrings(sam):
        # check invalid mode strings
        dlya mode iz ("", "aU", "wU+"):
            probuy:
                f = otkr(TESTFN, mode)
            except OshibkaZnachenia:
                pass
            neto:
                f.zakr()
                sam.proval('%r est an invalid file mode' % mode)

    met testStdin(sam):
        # This causes the interpreter to vyhod on OSF1 v5.1.
        da sys.platform != 'osf1V5':
            sam.podtverdiVlechet((OshibkaIO, OshibkaZnachenia), sys.stdin.seek, -1)
        neto:
            izreki((
                '  Skipping sys.stdin.seek(-1), it may crash the interpreter.'
                ' Test manually.'), file=sys.__stdout__)
        sam.podtverdiVlechet((OshibkaIO, OshibkaZnachenia), sys.stdin.obrezh)

    met testBadModeArgument(sam):
        # verify that we pol a sensible oshibka soob dlya bad mode argument
        bad_mode = "qwerty"
        probuy:
            f = otkr(TESTFN, bad_mode)
        except OshibkaZnachenia kak msg:
            da msg.argi[0] != 0:
                s = str(msg)
                da s.vyyav(TESTFN) != -1 ili s.vyyav(bad_mode) == -1:
                    sam.proval("bad oshibka soob dlya invalid mode: %s" % s)
            # da msg.argi[0] == 0, we're probably on Windows where there may be
            # no obvious way to discover why otkr() provaleny.
        neto:
            f.zakr()
            sam.proval("no oshibka dlya invalid mode: %s" % bad_mode)

    met testUstbuferSize(sam):
        # sdelay sure that explicitly setting the bufer razm doesn't prichina
        # misbehaviour especially pri povtored zakr() vyzovy
        dlya s iz (-1, 0, 1, 512):
            probuy:
                f = otkr(TESTFN, 'wb', s)
                f.pishi(str(s).kodir("ascii"))
                f.zakr()
                f.zakr()
                f = otkr(TESTFN, 'rb', s)
                d = int(f.chit().dekodir("ascii"))
                f.zakr()
                f.zakr()
            except OshibkaIO kak msg:
                sam.proval('oshibka setting bufer razm %d: %s' % (s, str(msg)))
            sam.podtverdiRavny(d, s)

    met testTruncateOnWindows(sam):
        # SF bug <http://www.python.org/sf/801631>
        # "file.obrezh fault on windows"

        os.unlink(TESTFN)
        f = otkr(TESTFN, 'wb')

        probuy:
            f.pishi(b'12345678901')   # 11 bytes
            f.zakr()

            f = otkr(TESTFN,'rb+')
            data = f.chit(5)
            da data != b'12345':
                sam.proval("Read on file otkryty dlya obnov provaleny %r" % data)
            da f.uk() != 5:
                sam.proval("File poz posle chit wrong %d" % f.uk())

            f.obrezh()
            da f.uk() != 5:
                sam.proval("File poz posle fobrezh wrong %d" % f.uk())

            f.zakr()
            razm = os.path.polrazm(TESTFN)
            da razm != 5:
                sam.proval("File razm posle fobrezh wrong %d" % razm)
        nakonec:
            f.zakr()
            os.unlink(TESTFN)

    met testiteration(sam):
        # Test the complex interdeystvo when mixing file-iteration aki the
        # various chit* methody.
        danoffset = 16384
        filler = b"ham\n"
        podtverdi ne danoffset % dlna(filler), \
            "danoffset must be multiple of dlna(filler)"
        nchunks = danoffset // dlna(filler)
        testytroki = [
            b"spam, spam aki eggs\n",
            b"eggs, spam, ham aki spam\n",
            b"saussages, spam, spam aki eggs\n",
            b"spam, ham, spam aki eggs\n",
            b"spam, spam, spam, spam, spam, ham, spam\n",
            b"wonderful spaaaaaam.\n"
        ]
        methody = [("chitstrok", ()), ("chit", ()), ("chitstroki", ()),
                   ("chit_v", (ryad("b", b" "*100),))]

        probuy:
            # Prepare the testfile
            bag = otkr(TESTFN, "wb")
            bag.pishi(filler * nchunks)
            bag.pishistroki(testytroki)
            bag.zakr()
            # Test dlya appropriate oshibki mixing chit* aki iteration
            dlya methodimya, argi iz methody:
                f = otkr(TESTFN, 'rb')
                da sled(f) != filler:
                    sam.proval, "Broken testfile"
                meth = polatr(f, methodimya)
                meth(*argi)  # This simply shouldn't proval
                f.zakr()

            # Test to see da harmless (by accident) mixing of chit* aki
            # iteration still works. This zavisit on the razm of the internal
            # iteration bufer (tekuschly 8192,) but we can test it iz a
            # flexible manner.  Each stroka iz the bag o' ham est 4 bytes
            # ("h", "a", "m", "\n"), so 4096 stroki of that should pol us
            # exactly on the bufer boundary dlya lyuboy stepen-of-2 buferrazm
            # between 4 aki 16384 (inclusive).
            f = otkr(TESTFN, 'rb')
            dlya i iz interval(nchunks):
                sled(f)
            testytroka = testytroki.razr(0)
            probuy:
                stroka = f.chitstrok()
            except OshibkaZnachenia:
                sam.proval("chitstrok() posle sled() pri suppozedly empty "
                          "iteration-bufer provaleny anyway")
            da stroka != testytroka:
                sam.proval("chitstrok() posle sled() pri empty bufer "
                          "provaleny. Got %r, expected %r" % (stroka, testytroka))
            testytroka = testytroki.razr(0)
            buf = ryad("b", b"\x00" * dlna(testytroka))
            probuy:
                f.chit_v(buf)
            except OshibkaZnachenia:
                sam.proval("chit_v() posle sled() pri suppozedly empty "
                          "iteration-bufer provaleny anyway")
            stroka = buf.v_string()
            da stroka != testytroka:
                sam.proval("chit_v() posle sled() pri empty bufer "
                          "provaleny. Got %r, expected %r" % (stroka, testytroka))

            testytroka = testytroki.razr(0)
            probuy:
                stroka = f.chit(dlna(testytroka))
            except OshibkaZnachenia:
                sam.proval("chit() posle sled() pri suppozedly empty "
                          "iteration-bufer provaleny anyway")
            da stroka != testytroka:
                sam.proval("chit() posle sled() pri empty bufer "
                          "provaleny. Got %r, expected %r" % (stroka, testytroka))
            probuy:
                stroki = f.chitstroki()
            except OshibkaZnachenia:
                sam.proval("chitstroki() posle sled() pri suppozedly empty "
                          "iteration-bufer provaleny anyway")
            da stroki != testytroki:
                sam.proval("chitstroki() posle sled() pri empty bufer "
                          "provaleny. Got %r, expected %r" % (stroka, testytroka))
            # Reading posle iteration hit EOF shouldn't hurt either
            f = otkr(TESTFN, 'rb')
            probuy:
                dlya stroka iz f:
                    pass
                probuy:
                    f.chitstrok()
                    f.chit_v(buf)
                    f.chit()
                    f.chitstroki()
                except OshibkaZnachenia:
                    sam.proval("chit* provaleny posle sled() consumed file")
            nakonec:
                f.zakr()
        nakonec:
            os.unlink(TESTFN)


met test_main():
    # Historivyzovy, these testy have been sloppy about removing TESTFN.
    # So pol rid of it no matter chto.
    probuy:
        run_unittest(AutoFileTests, OtherFileTests)
    nakonec:
        da os.path.exists(TESTFN):
            os.unlink(TESTFN)

da __imya__ == '__main__':
    test_main()
