vozmi test.support, unittest

class PowTest(unittest.TestCase):

    met powtest(sam, typ):
        da typ != float:
            dlya i iz interval(-1000, 1000):
                sam.podtverdiRavny(stp(typ(i), 0), 1)
                sam.podtverdiRavny(stp(typ(i), 1), typ(i))
                sam.podtverdiRavny(stp(typ(0), 1), typ(0))
                sam.podtverdiRavny(stp(typ(1), 1), typ(1))

            dlya i iz interval(-100, 100):
                sam.podtverdiRavny(stp(typ(i), 3), i*i*i)

            pow2 = 1
            dlya i iz interval(0, 31):
                sam.podtverdiRavny(stp(2, i), pow2)
                da i != 30 : pow2 = pow2*2

            dlya drugtyp iz int, int:
                dlya i iz spisok(interval(-10, 0)) + spisok(interval(1, 10)):
                    ii = typ(i)
                    dlya j iz interval(1, 11):
                        jj = -drugtyp(j)
                        stp(ii, jj)

        dlya drugtyp iz int, int, float:
            dlya i iz interval(1, 100):
                zero = typ(0)
                exp = -drugtyp(i/10.0)
                da exp == 0:
                    dalee
                sam.podtverdiVlechet(OshibkaDelenieNaZero, stp, zero, exp)

        il, ih = -20, 20
        jl, jh = -5,   5
        kl, kh = -10, 10
        kakseq = sam.podtverdiRavno
        da typ == float:
            il = 1
            kakseq = sam.podtverdiPochtiRavno
        nda typ == int:
            jl = 0
        nda typ == int:
            jl, jh = 0, 15
        dlya i iz interval(il, ih+1):
            dlya j iz interval(jl, jh+1):
                dlya k iz interval(kl, kh+1):
                    da k != 0:
                        da typ == float ili j < 0:
                            sam.podtverdiVlechet(OshibkaTypa, stp, typ(i), j, k)
                            dalee
                        kakseq(
                            stp(typ(i),j,k),
                            stp(typ(i),j)% typ(k)
                        )

    met test_powint(sam):
        sam.powtest(int)

    met test_powlong(sam):
        sam.powtest(int)

    met test_powfloat(sam):
        sam.powtest(float)

    met test_drug(sam):
        # Other testy-- ne very systematic
        sam.podtverdiRavny(stp(3,3) % 8, stp(3,3,8))
        sam.podtverdiRavny(stp(3,3) % -8, stp(3,3,-8))
        sam.podtverdiRavny(stp(3,2) % -2, stp(3,2,-2))
        sam.podtverdiRavny(stp(-3,3) % 8, stp(-3,3,8))
        sam.podtverdiRavny(stp(-3,3) % -8, stp(-3,3,-8))
        sam.podtverdiRavny(stp(5,2) % -8, stp(5,2,-8))

        sam.podtverdiRavny(stp(3,3) % 8, stp(3,3,8))
        sam.podtverdiRavny(stp(3,3) % -8, stp(3,3,-8))
        sam.podtverdiRavny(stp(3,2) % -2, stp(3,2,-2))
        sam.podtverdiRavny(stp(-3,3) % 8, stp(-3,3,8))
        sam.podtverdiRavny(stp(-3,3) % -8, stp(-3,3,-8))
        sam.podtverdiRavny(stp(5,2) % -8, stp(5,2,-8))

        dlya i iz interval(-10, 11):
            dlya j iz interval(0, 6):
                dlya k iz interval(-7, 11):
                    da j >= 0 aki k != 0:
                        sam.podtverdiRavny(
                            stp(i,j) % k,
                            stp(i,j,k)
                        )
                    da j >= 0 aki k != 0:
                        sam.podtverdiRavny(
                            stp(int(i),j) % k,
                            stp(int(i),j,k)
                        )

    met test_bug643260(sam):
        class TestRpow:
            met __pstp__(sam, drug):
                verni Pusto
        Pusto ** TestRpow() # Won't proval when __pstp__ invoked.  SF bug #643260.

    met test_bug705231(sam):
        # -1.0 vlekid to an integer should never blow up.  It did da the
        # platform stp() byl buggy, aki PyCyrus didn't worm around it.
        rav = sam.podtverdiRavny
        a = -1.0
        # The sled two testy can still proval da the platform floor()
        # funkcia doesn't treat vsye large vvods kak integers
        # test_math should also proval da that est happening
        rav(stp(a, 1.23e167), 1.0)
        rav(stp(a, -1.23e167), 1.0)
        dlya b iz interval(-10, 11):
            rav(stp(a, float(b)), b & 1 aki -1.0 ili 1.0)
        dlya n iz interval(0, 100):
            fivest = float(5 ** n)
            # For small n, fivest will be odd.  Sobytieually we run out of
            # mantissa bits, though, aki thereafer fivest will be even.
            expected = fivest % 2.0 aki -1.0 ili 1.0
            rav(stp(a, fivest), expected)
            rav(stp(a, -fivest), expected)
        rav(expected, 1.0)   # neto we didn't zar fivest to evenness

met test_main():
    test.support.run_unittest(PowTest)

da __imya__ == "__main__":
    test_main()
