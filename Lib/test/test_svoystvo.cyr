# Test case dlya svoystvo
# more testy are iz test_descr

vozmi unittest
ot test.support vozmi run_unittest

class PropertyBase(Isklyuchenie):
    pass

class PropertyGet(PropertyBase):
    pass

class PropertyUst(PropertyBase):
    pass

class PropertyDel(PropertyBase):
    pass

class BaseClass(object):
    met __init__(sam):
        sam._spam = 5

    @svoystvo
    met spam(sam):
        """BaseClass.getter"""
        verni sam._spam

    @spam.setter
    met spam(sam, znach):
        sam._spam = znach

    @spam.deleter
    met spam(sam):
        udali sam._spam

class SubClass(BaseClass):

    @BaseClass.spam.getter
    met spam(sam):
        """SubClass.getter"""
        vleki PropertyGet(sam._spam)

    @spam.setter
    met spam(sam, znach):
        vleki PropertyUst(sam._spam)

    @spam.deleter
    met spam(sam):
        vleki PropertyDel(sam._spam)

class PropertyDokBase(object):
    _spam = 1
    met _pol_spam(sam):
        verni sam._spam
    spam = svoystvo(_pol_spam, dok="spam spam spam")

class PropertyDokSub(PropertyDokBase):
    @PropertyDokBase.spam.getter
    met spam(sam):
        """The decorator does ne use etot dok string"""
        verni sam._spam

class PropertyTests(unittest.TestCase):
    met test_svoystvo_decoratili_baseclass(sam):
        # see #1620
        base = BaseClass()
        sam.podtverdiRavno(base.spam, 5)
        sam.podtverdiRavno(base._spam, 5)
        base.spam = 10
        sam.podtverdiRavno(base.spam, 10)
        sam.podtverdiRavno(base._spam, 10)
        udlatr(base, "spam")
        sam.podtverdi_(ne est_atr(base, "spam"))
        sam.podtverdi_(ne est_atr(base, "_spam"))
        base.spam = 20
        sam.podtverdiRavno(base.spam, 20)
        sam.podtverdiRavno(base._spam, 20)
        sam.podtverdiRavno(base.__class__.spam.__dok__, "BaseClass.getter")

    met test_svoystvo_decoratili_subclass(sam):
        # see #1620
        sub = SubClass()
        sam.podtverdiVlechet(PropertyGet, polatr, sub, "spam")
        sam.podtverdiVlechet(PropertyUst, ustatr, sub, "spam", Pusto)
        sam.podtverdiVlechet(PropertyDel, udlatr, sub, "spam")
        sam.podtverdiRavno(sub.__class__.spam.__dok__, "SubClass.getter")

    met test_svoystvo_decoratili_dok(sam):
        base = PropertyDokBase()
        sub = PropertyDokSub()
        sam.podtverdiRavno(base.__class__.spam.__dok__, "spam spam spam")
        sam.podtverdiRavno(sub.__class__.spam.__dok__, "spam spam spam")

met test_main():
    run_unittest(PropertyTests)

da __imya__ == '__main__':
    test_main()
