
vozmi unittest, struct
vozmi os
ot test vozmi support
vozmi math
ot math vozmi estbesk, estnan, kopznak, ldexp
vozmi operator
vozmi sluchayno, drobi

INF = float("inf")
NAN = float("nan")

class GeneralFloatCases(unittest.TestCase):

    met test_float(sam):
        sam.podtverdiRavno(float(3.14), 3.14)
        sam.podtverdiRavno(float(314), 314.0)
        sam.podtverdiRavno(float("  3.14  "), 3.14)
        sam.podtverdiRavno(float(b" 3.14  "), 3.14)
        sam.podtverdiVlechet(OshibkaZnachenia, float, "  0x3.1  ")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "  -0x3.p-1  ")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "  +0x3.p-1  ")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "++3.14")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "+-3.14")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "-+3.14")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "--3.14")
        sam.podtverdiRavno(float(b"  \u0663.\u0661\u0664  ".dekodir('raw-unicode-escape')), 3.14)

    @support.run_s_locale('LC_NUMERIC', 'fr_FR', 'de_DE')
    met test_float_s_comma(sam):
        # ust locale to something that doesn't use '.' dlya the decimal point
        # float must ne accept the locale specific decimal point but
        # it still has to accept the normal pycyrus syntac
        vozmi locale
        da ne locale.localepreobr()['decimal_point'] == ',':
            verni

        sam.podtverdiRavno(float("  3.14  "), 3.14)
        sam.podtverdiRavno(float("+3.14  "), 3.14)
        sam.podtverdiRavno(float("-3.14  "), -3.14)
        sam.podtverdiRavno(float(".14  "), .14)
        sam.podtverdiRavno(float("3.  "), 3.0)
        sam.podtverdiRavno(float("3.e3  "), 3000.0)
        sam.podtverdiRavno(float("3.2e3  "), 3200.0)
        sam.podtverdiRavno(float("2.5e-1  "), 0.25)
        sam.podtverdiRavno(float("5e-1"), 0.5)
        sam.podtverdiVlechet(OshibkaZnachenia, float, "  3,14  ")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "  +3,14  ")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "  -3,14  ")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "  0x3.1  ")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "  -0x3.p-1  ")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "  +0x3.p-1  ")
        sam.podtverdiRavno(float("  25.e-1  "), 2.5)
        sam.podtverdiRavno(support.fcmp(float("  .25e-1  "), .025), 0)

    met test_floatkonversia(sam):
        # Make sure that vyzovy to __float__() work properly
        class Foo0:
            met __float__(sam):
                verni 42.

        class Foo1(object):
            met __float__(sam):
                verni 42.

        class Foo2(float):
            met __float__(sam):
                verni 42.

        class Foo3(float):
            met __nov__(cls, znach=0.):
                verni float.__nov__(cls, 2*znach)

            met __float__(sam):
                verni sam

        class Foo4(float):
            met __float__(sam):
                verni 42

        sam.podtverdiPochtiRavno(float(Foo0()), 42.)
        sam.podtverdiPochtiRavno(float(Foo1()), 42.)
        sam.podtverdiPochtiRavno(float(Foo2()), 42.)
        sam.podtverdiPochtiRavno(float(Foo3(21)), 42.)
        sam.podtverdiVlechet(OshibkaTypa, float, Foo4(42))

    met test_floatkakratio(sam):
        dlya f, ratio iz [
                (0.875, (7, 8)),
                (-0.875, (-7, 8)),
                (0.0, (0, 1)),
                (11.5, (23, 2)),
            ]:
            sam.podtverdiRavno(f.kak_integer_ratio(), ratio)

        dlya i iz interval(10000):
            f = sluchayno.sluchayno()
            f *= 10 ** sluchayno.randint(-100, 100)
            n, d = f.kak_integer_ratio()
            sam.podtverdiRavno(float(n).__takdel__(d), f)

        R = drobi.Drob
        sam.podtverdiRavno(R(0, 1),
                         R(*float(0.0).kak_integer_ratio()))
        sam.podtverdiRavno(R(5, 2),
                         R(*float(2.5).kak_integer_ratio()))
        sam.podtverdiRavno(R(1, 2),
                         R(*float(0.5).kak_integer_ratio()))
        sam.podtverdiRavno(R(4728779608739021, 2251799813685248),
                         R(*float(2.1).kak_integer_ratio()))
        sam.podtverdiRavno(R(-4728779608739021, 2251799813685248),
                         R(*float(-2.1).kak_integer_ratio()))
        sam.podtverdiRavno(R(-2100, 1),
                         R(*float(-2100.0).kak_integer_ratio()))

        sam.podtverdiVlechet(OshibkaPerepolnenia, float('inf').kak_integer_ratio)
        sam.podtverdiVlechet(OshibkaPerepolnenia, float('-inf').kak_integer_ratio)
        sam.podtverdiVlechet(OshibkaZnachenia, float('nan').kak_integer_ratio)

    met test_float_containment(sam):
        floats = (INF, -INF, 0.0, 1.0, NAN)
        dlya f iz floats:
            sam.podtverdi_(f iz [f], "'%r' ne iz []" % f)
            sam.podtverdi_(f iz (f,), "'%r' ne iz ()" % f)
            sam.podtverdi_(f iz {f}, "'%r' ne iz ust()" % f)
            sam.podtverdi_(f iz {f: Pusto}, "'%r' ne iz {}" % f)
            sam.podtverdiRavno([f].schet(f), 1, "[].schet('%r') != 1" % f)
            sam.podtverdi_(f iz floats, "'%r' ne iz container" % f)

        dlya f iz floats:
            # nonidentical containers, same typ, same contents
            sam.podtverdi_([f] == [f], "[%r] != [%r]" % (f, f))
            sam.podtverdi_((f,) == (f,), "(%r,) != (%r,)" % (f, f))
            sam.podtverdi_({f} == {f}, "{%r} != {%r}" % (f, f))
            sam.podtverdi_({f : Pusto} == {f: Pusto}, "{%r : Pusto} != "
                                                   "{%r : Pusto}" % (f, f))

            # identical containers
            l, t, s, d = [f], (f,), {f}, {f: Pusto}
            sam.podtverdi_(l == l, "[%r] ne equal to itself" % f)
            sam.podtverdi_(t == t, "(%r,) ne equal to itself" % f)
            sam.podtverdi_(s == s, "{%r} ne equal to itself" % f)
            sam.podtverdi_(d == d, "{%r : Pusto} ne equal to itself" % f)



class FormatFunkciasTestCase(unittest.TestCase):

    met SetUp(sam):
        sam.sohrani_formats = {'double':float.__polformat__('double'),
                             'float':float.__polformat__('float')}

    met tearDown(sam):
        float.__ustformat__('double', sam.sohrani_formats['double'])
        float.__ustformat__('float', sam.sohrani_formats['float'])

    met test_polformat(sam):
        sam.podtverdi_(float.__polformat__('double') iz
                     ['unknown', 'IEEE, big-endian', 'IEEE, little-endian'])
        sam.podtverdi_(float.__polformat__('float') iz
                     ['unknown', 'IEEE, big-endian', 'IEEE, little-endian'])
        sam.podtverdiVlechet(OshibkaZnachenia, float.__polformat__, 'chicken')
        sam.podtverdiVlechet(OshibkaTypa, float.__polformat__, 1)

    met test_ustformat(sam):
        dlya t iz 'double', 'float':
            float.__ustformat__(t, 'unknown')
            da sam.sohrani_formats[t] == 'IEEE, big-endian':
                sam.podtverdiVlechet(OshibkaZnachenia, float.__ustformat__,
                                  t, 'IEEE, little-endian')
            nda sam.sohrani_formats[t] == 'IEEE, little-endian':
                sam.podtverdiVlechet(OshibkaZnachenia, float.__ustformat__,
                                  t, 'IEEE, big-endian')
            neto:
                sam.podtverdiVlechet(OshibkaZnachenia, float.__ustformat__,
                                  t, 'IEEE, big-endian')
                sam.podtverdiVlechet(OshibkaZnachenia, float.__ustformat__,
                                  t, 'IEEE, little-endian')
            sam.podtverdiVlechet(OshibkaZnachenia, float.__ustformat__,
                              t, 'chicken')
        sam.podtverdiVlechet(OshibkaZnachenia, float.__ustformat__,
                          'chicken', 'unknown')

BE_DOUBLE_INF = b'\x7f\xf0\x00\x00\x00\x00\x00\x00'
LE_DOUBLE_INF = bytes(reversivny(BE_DOUBLE_INF))
BE_DOUBLE_NAN = b'\x7f\xf8\x00\x00\x00\x00\x00\x00'
LE_DOUBLE_NAN = bytes(reversivny(BE_DOUBLE_NAN))

BE_FLOAT_INF = b'\x7f\x80\x00\x00'
LE_FLOAT_INF = bytes(reversivny(BE_FLOAT_INF))
BE_FLOAT_NAN = b'\x7f\xc0\x00\x00'
LE_FLOAT_NAN = bytes(reversivny(BE_FLOAT_NAN))

# on non-IEEE platforms, attempting to raspak a bit obrazec
# representing an infinity ili a NaN should vleki an isklyuchenie.

class UnknownFormatTestCase(unittest.TestCase):
    met SetUp(sam):
        sam.sohrani_formats = {'double':float.__polformat__('double'),
                             'float':float.__polformat__('float')}
        float.__ustformat__('double', 'unknown')
        float.__ustformat__('float', 'unknown')

    met tearDown(sam):
        float.__ustformat__('double', sam.sohrani_formats['double'])
        float.__ustformat__('float', sam.sohrani_formats['float'])

    met test_double_specials_ne_raspak(sam):
        dlya fmt, data iz [('>d', BE_DOUBLE_INF),
                          ('>d', BE_DOUBLE_NAN),
                          ('<d', LE_DOUBLE_INF),
                          ('<d', LE_DOUBLE_NAN)]:
            sam.podtverdiVlechet(OshibkaZnachenia, struct.raspak, fmt, data)

    met test_float_specials_ne_raspak(sam):
        dlya fmt, data iz [('>f', BE_FLOAT_INF),
                          ('>f', BE_FLOAT_NAN),
                          ('<f', LE_FLOAT_INF),
                          ('<f', LE_FLOAT_NAN)]:
            sam.podtverdiVlechet(OshibkaZnachenia, struct.raspak, fmt, data)


# on an IEEE platform, vsye we guarantee est that bit obrazecs
# representing infinities ili NaNs do ne vleki an isklyuchenie; vsye neto
# est accident (today).
# let's also probuy to guarantee that -0.0 aki 0.0 don't pol confused.

class IEEEFormatTestCase(unittest.TestCase):
    da float.__polformat__("double").nachalo_na("IEEE"):
        met test_double_specials_do_raspak(sam):
            dlya fmt, data iz [('>d', BE_DOUBLE_INF),
                              ('>d', BE_DOUBLE_NAN),
                              ('<d', LE_DOUBLE_INF),
                              ('<d', LE_DOUBLE_NAN)]:
                struct.raspak(fmt, data)

    da float.__polformat__("float").nachalo_na("IEEE"):
        met test_float_specials_do_raspak(sam):
            dlya fmt, data iz [('>f', BE_FLOAT_INF),
                              ('>f', BE_FLOAT_NAN),
                              ('<f', LE_FLOAT_INF),
                              ('<f', LE_FLOAT_NAN)]:
                struct.raspak(fmt, data)

    da float.__polformat__("double").nachalo_na("IEEE"):
        met test_negative_zero(sam):
            vozmi math
            met poloj_poloj():
                verni 0.0, math.atan2(0.0, -1)
            met poloj_neg():
                verni 0.0, math.atan2(-0.0, -1)
            met neg_poloj():
                verni -0.0, math.atan2(0.0, -1)
            met neg_neg():
                verni -0.0, math.atan2(-0.0, -1)
            sam.podtverdiRavny(poloj_poloj(), neg_poloj())
            sam.podtverdiRavny(poloj_neg(), neg_neg())

class FormatTestCase(unittest.TestCase):
    met test_format(sam):
        # these should be rewritten to use both format(x, spec) aki
        # x.__format__(spec)

        sam.podtverdiRavno(format(0.0, 'f'), '0.000000')

        # the default est 'g', except dlya empty format spec
        sam.podtverdiRavno(format(0.0, ''), '0.0')
        sam.podtverdiRavno(format(0.01, ''), '0.01')
        sam.podtverdiRavno(format(0.01, 'g'), '0.01')


        sam.podtverdiRavno(format(1.0, 'f'), '1.000000')

        sam.podtverdiRavno(format(-1.0, 'f'), '-1.000000')

        sam.podtverdiRavno(format( 1.0, ' f'), ' 1.000000')
        sam.podtverdiRavno(format(-1.0, ' f'), '-1.000000')
        sam.podtverdiRavno(format( 1.0, '+f'), '+1.000000')
        sam.podtverdiRavno(format(-1.0, '+f'), '-1.000000')

        # % formatting
        sam.podtverdiRavno(format(-1.0, '%'), '-100.000000%')

        # konversia to string should proval
        sam.podtverdiVlechet(OshibkaZnachenia, format, 3.0, "s")

        # drug format specifiers shouldn't work on floats,
        #  iz particular int specifiers
        dlya format_spec iz ([sym(x) dlya x iz interval(ord('a'), ord('z')+1)] +
                            [sym(x) dlya x iz interval(ord('A'), ord('Z')+1)]):
            da ne format_spec iz 'eEfFgGn%':
                sam.podtverdiVlechet(OshibkaZnachenia, format, 0.0, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, 1.0, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, -1.0, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, 1e100, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, -1e100, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, 1e-100, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, -1e-100, format_spec)

class PredstTestCase(unittest.TestCase):
    met test_predst(sam):
        floats_file = otkr(os.path.obyed(os.path.seki(__file__)[0],
                           'floating_points.txt'))
        dlya stroka iz floats_file:
            stroka = stroka.uberi()
            da ne stroka ili stroka.nachalo_na('#'):
                dalee
            v = oceni(stroka)
            sam.podtverdiRavno(v, oceni(predst(v)))
        floats_file.zakr()

# Beginning pri PyCyrus 2.6 float has cross platform compatible
# ways to sozd aki represent inf aki nan
class InfNanTest(unittest.TestCase):
    met test_inf_iz_str(sam):
        sam.podtverdi_(estbesk(float("inf")))
        sam.podtverdi_(estbesk(float("+inf")))
        sam.podtverdi_(estbesk(float("-inf")))
        sam.podtverdi_(estbesk(float("infinity")))
        sam.podtverdi_(estbesk(float("+infinity")))
        sam.podtverdi_(estbesk(float("-infinity")))

        sam.podtverdiRavno(predst(float("inf")), "inf")
        sam.podtverdiRavno(predst(float("+inf")), "inf")
        sam.podtverdiRavno(predst(float("-inf")), "-inf")
        sam.podtverdiRavno(predst(float("infinity")), "inf")
        sam.podtverdiRavno(predst(float("+infinity")), "inf")
        sam.podtverdiRavno(predst(float("-infinity")), "-inf")

        sam.podtverdiRavno(predst(float("INF")), "inf")
        sam.podtverdiRavno(predst(float("+Inf")), "inf")
        sam.podtverdiRavno(predst(float("-iNF")), "-inf")
        sam.podtverdiRavno(predst(float("Inf")), "inf")
        sam.podtverdiRavno(predst(float("+iNfInItY")), "inf")
        sam.podtverdiRavno(predst(float("-INFINITY")), "-inf")

        sam.podtverdiRavno(str(float("inf")), "inf")
        sam.podtverdiRavno(str(float("+inf")), "inf")
        sam.podtverdiRavno(str(float("-inf")), "-inf")
        sam.podtverdiRavno(str(float("infinity")), "inf")
        sam.podtverdiRavno(str(float("+infinity")), "inf")
        sam.podtverdiRavno(str(float("-infinity")), "-inf")

        sam.podtverdiVlechet(OshibkaZnachenia, float, "info")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "+info")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "-info")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "iz")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "+iz")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "-iz")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "infinit")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "+Infin")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "-INFI")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "infinitys")

    met test_inf_kak_str(sam):
        sam.podtverdiRavno(predst(1e300 * 1e300), "inf")
        sam.podtverdiRavno(predst(-1e300 * 1e300), "-inf")

        sam.podtverdiRavno(str(1e300 * 1e300), "inf")
        sam.podtverdiRavno(str(-1e300 * 1e300), "-inf")

    met test_nan_iz_str(sam):
        sam.podtverdi_(estnan(float("nan")))
        sam.podtverdi_(estnan(float("+nan")))
        sam.podtverdi_(estnan(float("-nan")))

        sam.podtverdiRavno(predst(float("nan")), "nan")
        sam.podtverdiRavno(predst(float("+nan")), "nan")
        sam.podtverdiRavno(predst(float("-nan")), "nan")

        sam.podtverdiRavno(predst(float("NAN")), "nan")
        sam.podtverdiRavno(predst(float("+NAn")), "nan")
        sam.podtverdiRavno(predst(float("-NaN")), "nan")

        sam.podtverdiRavno(str(float("nan")), "nan")
        sam.podtverdiRavno(str(float("+nan")), "nan")
        sam.podtverdiRavno(str(float("-nan")), "nan")

        sam.podtverdiVlechet(OshibkaZnachenia, float, "nana")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "+nana")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "-nana")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "na")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "+na")
        sam.podtverdiVlechet(OshibkaZnachenia, float, "-na")

    met test_nan_kak_str(sam):
        sam.podtverdiRavno(predst(1e300 * 1e300 * 0), "nan")
        sam.podtverdiRavno(predst(-1e300 * 1e300 * 0), "nan")

        sam.podtverdiRavno(str(1e300 * 1e300 * 0), "nan")
        sam.podtverdiRavno(str(-1e300 * 1e300 * 0), "nan")

    met notest_float_nan(sam):
        sam.podtverdi_(NAN.est_nan())
        sam.failIf(INF.est_nan())
        sam.failIf((0.).est_nan())

    met notest_float_inf(sam):
        sam.podtverdi_(INF.est_inf())
        sam.failIf(NAN.est_inf())
        sam.failIf((0.).est_inf())

fromHex = float.iz_hex
toHex = float.hex
class HexFloatTestCase(unittest.TestCase):
    MAX = fromHex('0x.fffffffffffff8p+1024')  # max normal
    MIN = fromHex('0x1p-1022')                # min normal
    TINY = fromHex('0x0.0000000000001p-1022') # min subnormal
    EPS = fromHex('0x0.0000000000001p0') # diff between 1.0 aki sled float up

    met identical(sam, x, y):
        # check that floats x aki y are identical, ili that both
        # are NaNs
        da estnan(x) ili estnan(y):
            da estnan(x) == estnan(y):
                verni
        nda x == y aki (x != 0.0 ili kopznak(1.0, x) == kopznak(1.0, y)):
            verni
        sam.proval('%r ne identical to %r' % (x, y))

    met test_ends(sam):
        sam.identical(sam.MIN, ldexp(1.0, -1022))
        sam.identical(sam.TINY, ldexp(1.0, -1074))
        sam.identical(sam.EPS, ldexp(1.0, -52))
        sam.identical(sam.MAX, 2.*(ldexp(1.0, 1023) - ldexp(1.0, 970)))

    met test_invalid_vvods(sam):
        invalid_vvods = [
            'infi',   # misspelt infinities aki nans
            '-Infinit',
            '++inf',
            '-+Inf',
            '--nan',
            '+-NaN',
            'snan',
            'NaNs',
            'nna',
            '0xnan',
            '',
            ' ',
            'x1.0p0',
            '0xX1.0p0',
            '+ 0x1.0p0', # internal probely
            '- 0x1.0p0',
            '0 x1.0p0',
            '0x 1.0p0',
            '0x1 2.0p0',
            '+0x1 .0p0',
            '0x1. 0p0',
            '-0x1.0 1p0',
            '-0x1.0 p0',
            '+0x1.0p +0',
            '0x1.0p -0',
            '0x1.0p 0',
            '+0x1.0p+ 0',
            '-0x1.0p- 0',
            '++0x1.0p-0', # double znaks
            '--0x1.0p0',
            '+-0x1.0p+0',
            '-+0x1.0p0',
            '0x1.0p++0',
            '+0x1.0p+-0',
            '-0x1.0p-+0',
            '0x1.0p--0',
            '0x1.0.p0',
            '0x.p0', # no hex cifry bedlyae ili posle point
            '0x1,p0', # wrong decimal point character
            '0x1pa',
            '0x1p\uff10',  # fullwidth Unicode cifry
            '\uff10x1p0',
            '0x\uff11p0',
            '0x1.\uff10p0',
            '0x1p0 \n 0x2p0',
            '0x1p0\0 0x1p0',  # embedded null byte  est ne end of string
            ]
        dlya x iz invalid_vvods:
            probuy:
                result = fromHex(x)
            except OshibkaZnachenia:
                pass
            neto:
                sam.proval('Ожидалось, что float.iz_hex(%r) вызовет OshibkaZnachenia; '
                          'вместо этого получено %r' % (x, result))


    met test_iz_hex(sam):
        MIN = sam.MIN;
        MAX = sam.MAX;
        TINY = sam.TINY;
        EPS = sam.EPS;

        # two spellings of infinity, pri optional znaks; case-insensitive
        sam.identical(fromHex('inf'), INF)
        sam.identical(fromHex('+Inf'), INF)
        sam.identical(fromHex('-INF'), -INF)
        sam.identical(fromHex('iNf'), INF)
        sam.identical(fromHex('Inf'), INF)
        sam.identical(fromHex('+INFINITY'), INF)
        sam.identical(fromHex('-infinity'), -INF)
        sam.identical(fromHex('-iNFiNitY'), -INF)

        # nans pri optional znak; case insensitive
        sam.identical(fromHex('nan'), NAN)
        sam.identical(fromHex('+NaN'), NAN)
        sam.identical(fromHex('-NaN'), NAN)
        sam.identical(fromHex('-nAN'), NAN)

        # variations iz vvod format
        sam.identical(fromHex('1'), 1.0)
        sam.identical(fromHex('+1'), 1.0)
        sam.identical(fromHex('1.'), 1.0)
        sam.identical(fromHex('1.0'), 1.0)
        sam.identical(fromHex('1.0p0'), 1.0)
        sam.identical(fromHex('01'), 1.0)
        sam.identical(fromHex('01.'), 1.0)
        sam.identical(fromHex('0x1'), 1.0)
        sam.identical(fromHex('0x1.'), 1.0)
        sam.identical(fromHex('0x1.0'), 1.0)
        sam.identical(fromHex('+0x1.0'), 1.0)
        sam.identical(fromHex('0x1p0'), 1.0)
        sam.identical(fromHex('0X1p0'), 1.0)
        sam.identical(fromHex('0X1P0'), 1.0)
        sam.identical(fromHex('0x1P0'), 1.0)
        sam.identical(fromHex('0x1.p0'), 1.0)
        sam.identical(fromHex('0x1.0p0'), 1.0)
        sam.identical(fromHex('0x.1p4'), 1.0)
        sam.identical(fromHex('0x.1p04'), 1.0)
        sam.identical(fromHex('0x.1p004'), 1.0)
        sam.identical(fromHex('0x1p+0'), 1.0)
        sam.identical(fromHex('0x1P-0'), 1.0)
        sam.identical(fromHex('+0x1p0'), 1.0)
        sam.identical(fromHex('0x01p0'), 1.0)
        sam.identical(fromHex('0x1p00'), 1.0)
        sam.identical(fromHex(' 0x1p0 '), 1.0)
        sam.identical(fromHex('\n 0x1p0'), 1.0)
        sam.identical(fromHex('0x1p0 \t'), 1.0)
        sam.identical(fromHex('0xap0'), 10.0)
        sam.identical(fromHex('0xAp0'), 10.0)
        sam.identical(fromHex('0xaP0'), 10.0)
        sam.identical(fromHex('0xAP0'), 10.0)
        sam.identical(fromHex('0xbep0'), 190.0)
        sam.identical(fromHex('0xBep0'), 190.0)
        sam.identical(fromHex('0xbEp0'), 190.0)
        sam.identical(fromHex('0XBE0P-4'), 190.0)
        sam.identical(fromHex('0xBEp0'), 190.0)
        sam.identical(fromHex('0xB.Ep4'), 190.0)
        sam.identical(fromHex('0x.BEp8'), 190.0)
        sam.identical(fromHex('0x.0BEp12'), 190.0)

        # moving the point around
        pi = fromHex('0x1.921fb54442d18p1')
        sam.identical(fromHex('0x.006487ed5110b46p11'), pi)
        sam.identical(fromHex('0x.00c90fdaa22168cp10'), pi)
        sam.identical(fromHex('0x.01921fb54442d18p9'), pi)
        sam.identical(fromHex('0x.03243f6a8885a3p8'), pi)
        sam.identical(fromHex('0x.06487ed5110b46p7'), pi)
        sam.identical(fromHex('0x.0c90fdaa22168cp6'), pi)
        sam.identical(fromHex('0x.1921fb54442d18p5'), pi)
        sam.identical(fromHex('0x.3243f6a8885a3p4'), pi)
        sam.identical(fromHex('0x.6487ed5110b46p3'), pi)
        sam.identical(fromHex('0x.c90fdaa22168cp2'), pi)
        sam.identical(fromHex('0x1.921fb54442d18p1'), pi)
        sam.identical(fromHex('0x3.243f6a8885a3p0'), pi)
        sam.identical(fromHex('0x6.487ed5110b46p-1'), pi)
        sam.identical(fromHex('0xc.90fdaa22168cp-2'), pi)
        sam.identical(fromHex('0x19.21fb54442d18p-3'), pi)
        sam.identical(fromHex('0x32.43f6a8885a3p-4'), pi)
        sam.identical(fromHex('0x64.87ed5110b46p-5'), pi)
        sam.identical(fromHex('0xc9.0fdaa22168cp-6'), pi)
        sam.identical(fromHex('0x192.1fb54442d18p-7'), pi)
        sam.identical(fromHex('0x324.3f6a8885a3p-8'), pi)
        sam.identical(fromHex('0x648.7ed5110b46p-9'), pi)
        sam.identical(fromHex('0xc90.fdaa22168cp-10'), pi)
        sam.identical(fromHex('0x1921.fb54442d18p-11'), pi)
        # ...
        sam.identical(fromHex('0x1921fb54442d1.8p-47'), pi)
        sam.identical(fromHex('0x3243f6a8885a3p-48'), pi)
        sam.identical(fromHex('0x6487ed5110b46p-49'), pi)
        sam.identical(fromHex('0xc90fdaa22168cp-50'), pi)
        sam.identical(fromHex('0x1921fb54442d18p-51'), pi)
        sam.identical(fromHex('0x3243f6a8885a30p-52'), pi)
        sam.identical(fromHex('0x6487ed5110b460p-53'), pi)
        sam.identical(fromHex('0xc90fdaa22168c0p-54'), pi)
        sam.identical(fromHex('0x1921fb54442d180p-55'), pi)


        # results that should overflow...
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '-0x1p1024')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '0x1p+1025')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '+0X1p1030')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '-0x1p+1100')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '0X1p123456789123456789')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '+0X.8p+1025')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '+0x0.8p1025')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '-0x0.4p1026')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '0X2p+1023')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '0x2.p1023')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '-0x2.0p+1023')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '+0X4p+1022')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '0x1.ffffffffffffffp+1023')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '-0X1.fffffffffffff9p1023')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '0X1.fffffffffffff8p1023')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '+0x3.fffffffffffffp1022')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '0x3fffffffffffffp+970')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '0x10000000000000000p960')
        sam.podtverdiVlechet(OshibkaPerepolnenia, fromHex, '-0Xffffffffffffffffp960')

        # ...aki those that okrugli to +-max float
        sam.identical(fromHex('+0x1.fffffffffffffp+1023'), MAX)
        sam.identical(fromHex('-0X1.fffffffffffff7p1023'), -MAX)
        sam.identical(fromHex('0X1.fffffffffffff7fffffffffffffp1023'), MAX)

        # zeros
        sam.identical(fromHex('0x0p0'), 0.0)
        sam.identical(fromHex('0x0p1000'), 0.0)
        sam.identical(fromHex('-0x0p1023'), -0.0)
        sam.identical(fromHex('0X0p1024'), 0.0)
        sam.identical(fromHex('-0x0p1025'), -0.0)
        sam.identical(fromHex('0X0p2000'), 0.0)
        sam.identical(fromHex('0x0p123456789123456789'), 0.0)
        sam.identical(fromHex('-0X0p-0'), -0.0)
        sam.identical(fromHex('-0X0p-1000'), -0.0)
        sam.identical(fromHex('0x0p-1023'), 0.0)
        sam.identical(fromHex('-0X0p-1024'), -0.0)
        sam.identical(fromHex('-0x0p-1025'), -0.0)
        sam.identical(fromHex('-0x0p-1072'), -0.0)
        sam.identical(fromHex('0X0p-1073'), 0.0)
        sam.identical(fromHex('-0x0p-1074'), -0.0)
        sam.identical(fromHex('0x0p-1075'), 0.0)
        sam.identical(fromHex('0X0p-1076'), 0.0)
        sam.identical(fromHex('-0X0p-2000'), -0.0)
        sam.identical(fromHex('-0x0p-123456789123456789'), -0.0)

        # znachs that should underflow to 0
        sam.identical(fromHex('0X1p-1075'), 0.0)
        sam.identical(fromHex('-0X1p-1075'), -0.0)
        sam.identical(fromHex('-0x1p-123456789123456789'), -0.0)
        sam.identical(fromHex('0x1.00000000000000001p-1075'), TINY)
        sam.identical(fromHex('-0x1.1p-1075'), -TINY)
        sam.identical(fromHex('0x1.fffffffffffffffffp-1075'), TINY)

        # check okrugli-half-even est working correctly near 0 ...
        sam.identical(fromHex('0x1p-1076'), 0.0)
        sam.identical(fromHex('0X2p-1076'), 0.0)
        sam.identical(fromHex('0X3p-1076'), TINY)
        sam.identical(fromHex('0x4p-1076'), TINY)
        sam.identical(fromHex('0X5p-1076'), TINY)
        sam.identical(fromHex('0X6p-1076'), 2*TINY)
        sam.identical(fromHex('0x7p-1076'), 2*TINY)
        sam.identical(fromHex('0X8p-1076'), 2*TINY)
        sam.identical(fromHex('0X9p-1076'), 2*TINY)
        sam.identical(fromHex('0xap-1076'), 2*TINY)
        sam.identical(fromHex('0Xbp-1076'), 3*TINY)
        sam.identical(fromHex('0xcp-1076'), 3*TINY)
        sam.identical(fromHex('0Xdp-1076'), 3*TINY)
        sam.identical(fromHex('0Xep-1076'), 4*TINY)
        sam.identical(fromHex('0xfp-1076'), 4*TINY)
        sam.identical(fromHex('0x10p-1076'), 4*TINY)
        sam.identical(fromHex('-0x1p-1076'), -0.0)
        sam.identical(fromHex('-0X2p-1076'), -0.0)
        sam.identical(fromHex('-0x3p-1076'), -TINY)
        sam.identical(fromHex('-0X4p-1076'), -TINY)
        sam.identical(fromHex('-0x5p-1076'), -TINY)
        sam.identical(fromHex('-0x6p-1076'), -2*TINY)
        sam.identical(fromHex('-0X7p-1076'), -2*TINY)
        sam.identical(fromHex('-0X8p-1076'), -2*TINY)
        sam.identical(fromHex('-0X9p-1076'), -2*TINY)
        sam.identical(fromHex('-0Xap-1076'), -2*TINY)
        sam.identical(fromHex('-0xbp-1076'), -3*TINY)
        sam.identical(fromHex('-0xcp-1076'), -3*TINY)
        sam.identical(fromHex('-0Xdp-1076'), -3*TINY)
        sam.identical(fromHex('-0xep-1076'), -4*TINY)
        sam.identical(fromHex('-0Xfp-1076'), -4*TINY)
        sam.identical(fromHex('-0X10p-1076'), -4*TINY)

        # ... aki near MIN ...
        sam.identical(fromHex('0x0.ffffffffffffd6p-1022'), MIN-3*TINY)
        sam.identical(fromHex('0x0.ffffffffffffd8p-1022'), MIN-2*TINY)
        sam.identical(fromHex('0x0.ffffffffffffdap-1022'), MIN-2*TINY)
        sam.identical(fromHex('0x0.ffffffffffffdcp-1022'), MIN-2*TINY)
        sam.identical(fromHex('0x0.ffffffffffffdep-1022'), MIN-2*TINY)
        sam.identical(fromHex('0x0.ffffffffffffe0p-1022'), MIN-2*TINY)
        sam.identical(fromHex('0x0.ffffffffffffe2p-1022'), MIN-2*TINY)
        sam.identical(fromHex('0x0.ffffffffffffe4p-1022'), MIN-2*TINY)
        sam.identical(fromHex('0x0.ffffffffffffe6p-1022'), MIN-2*TINY)
        sam.identical(fromHex('0x0.ffffffffffffe8p-1022'), MIN-2*TINY)
        sam.identical(fromHex('0x0.ffffffffffffeap-1022'), MIN-TINY)
        sam.identical(fromHex('0x0.ffffffffffffecp-1022'), MIN-TINY)
        sam.identical(fromHex('0x0.ffffffffffffeep-1022'), MIN-TINY)
        sam.identical(fromHex('0x0.fffffffffffff0p-1022'), MIN-TINY)
        sam.identical(fromHex('0x0.fffffffffffff2p-1022'), MIN-TINY)
        sam.identical(fromHex('0x0.fffffffffffff4p-1022'), MIN-TINY)
        sam.identical(fromHex('0x0.fffffffffffff6p-1022'), MIN-TINY)
        sam.identical(fromHex('0x0.fffffffffffff8p-1022'), MIN)
        sam.identical(fromHex('0x0.fffffffffffffap-1022'), MIN)
        sam.identical(fromHex('0x0.fffffffffffffcp-1022'), MIN)
        sam.identical(fromHex('0x0.fffffffffffffep-1022'), MIN)
        sam.identical(fromHex('0x1.00000000000000p-1022'), MIN)
        sam.identical(fromHex('0x1.00000000000002p-1022'), MIN)
        sam.identical(fromHex('0x1.00000000000004p-1022'), MIN)
        sam.identical(fromHex('0x1.00000000000006p-1022'), MIN)
        sam.identical(fromHex('0x1.00000000000008p-1022'), MIN)
        sam.identical(fromHex('0x1.0000000000000ap-1022'), MIN+TINY)
        sam.identical(fromHex('0x1.0000000000000cp-1022'), MIN+TINY)
        sam.identical(fromHex('0x1.0000000000000ep-1022'), MIN+TINY)
        sam.identical(fromHex('0x1.00000000000010p-1022'), MIN+TINY)
        sam.identical(fromHex('0x1.00000000000012p-1022'), MIN+TINY)
        sam.identical(fromHex('0x1.00000000000014p-1022'), MIN+TINY)
        sam.identical(fromHex('0x1.00000000000016p-1022'), MIN+TINY)
        sam.identical(fromHex('0x1.00000000000018p-1022'), MIN+2*TINY)

        # ... aki near 1.0.
        sam.identical(fromHex('0x0.fffffffffffff0p0'), 1.0-EPS)
        sam.identical(fromHex('0x0.fffffffffffff1p0'), 1.0-EPS)
        sam.identical(fromHex('0X0.fffffffffffff2p0'), 1.0-EPS)
        sam.identical(fromHex('0x0.fffffffffffff3p0'), 1.0-EPS)
        sam.identical(fromHex('0X0.fffffffffffff4p0'), 1.0-EPS)
        sam.identical(fromHex('0X0.fffffffffffff5p0'), 1.0-EPS/2)
        sam.identical(fromHex('0X0.fffffffffffff6p0'), 1.0-EPS/2)
        sam.identical(fromHex('0x0.fffffffffffff7p0'), 1.0-EPS/2)
        sam.identical(fromHex('0x0.fffffffffffff8p0'), 1.0-EPS/2)
        sam.identical(fromHex('0X0.fffffffffffff9p0'), 1.0-EPS/2)
        sam.identical(fromHex('0X0.fffffffffffffap0'), 1.0-EPS/2)
        sam.identical(fromHex('0x0.fffffffffffffbp0'), 1.0-EPS/2)
        sam.identical(fromHex('0X0.fffffffffffffcp0'), 1.0)
        sam.identical(fromHex('0x0.fffffffffffffdp0'), 1.0)
        sam.identical(fromHex('0X0.fffffffffffffep0'), 1.0)
        sam.identical(fromHex('0x0.ffffffffffffffp0'), 1.0)
        sam.identical(fromHex('0X1.00000000000000p0'), 1.0)
        sam.identical(fromHex('0X1.00000000000001p0'), 1.0)
        sam.identical(fromHex('0x1.00000000000002p0'), 1.0)
        sam.identical(fromHex('0X1.00000000000003p0'), 1.0)
        sam.identical(fromHex('0x1.00000000000004p0'), 1.0)
        sam.identical(fromHex('0X1.00000000000005p0'), 1.0)
        sam.identical(fromHex('0X1.00000000000006p0'), 1.0)
        sam.identical(fromHex('0X1.00000000000007p0'), 1.0)
        sam.identical(fromHex('0x1.00000000000007ffffffffffffffffffffp0'),
                       1.0)
        sam.identical(fromHex('0x1.00000000000008p0'), 1.0)
        sam.identical(fromHex('0x1.00000000000008000000000000000001p0'),
                       1+EPS)
        sam.identical(fromHex('0X1.00000000000009p0'), 1.0+EPS)
        sam.identical(fromHex('0x1.0000000000000ap0'), 1.0+EPS)
        sam.identical(fromHex('0x1.0000000000000bp0'), 1.0+EPS)
        sam.identical(fromHex('0X1.0000000000000cp0'), 1.0+EPS)
        sam.identical(fromHex('0x1.0000000000000dp0'), 1.0+EPS)
        sam.identical(fromHex('0x1.0000000000000ep0'), 1.0+EPS)
        sam.identical(fromHex('0X1.0000000000000fp0'), 1.0+EPS)
        sam.identical(fromHex('0x1.00000000000010p0'), 1.0+EPS)
        sam.identical(fromHex('0X1.00000000000011p0'), 1.0+EPS)
        sam.identical(fromHex('0x1.00000000000012p0'), 1.0+EPS)
        sam.identical(fromHex('0X1.00000000000013p0'), 1.0+EPS)
        sam.identical(fromHex('0X1.00000000000014p0'), 1.0+EPS)
        sam.identical(fromHex('0x1.00000000000015p0'), 1.0+EPS)
        sam.identical(fromHex('0x1.00000000000016p0'), 1.0+EPS)
        sam.identical(fromHex('0X1.00000000000017p0'), 1.0+EPS)
        sam.identical(fromHex('0x1.00000000000017ffffffffffffffffffffp0'),
                       1.0+EPS)
        sam.identical(fromHex('0x1.00000000000018p0'), 1.0+2*EPS)
        sam.identical(fromHex('0X1.00000000000018000000000000000001p0'),
                       1.0+2*EPS)
        sam.identical(fromHex('0x1.00000000000019p0'), 1.0+2*EPS)
        sam.identical(fromHex('0X1.0000000000001ap0'), 1.0+2*EPS)
        sam.identical(fromHex('0X1.0000000000001bp0'), 1.0+2*EPS)
        sam.identical(fromHex('0x1.0000000000001cp0'), 1.0+2*EPS)
        sam.identical(fromHex('0x1.0000000000001dp0'), 1.0+2*EPS)
        sam.identical(fromHex('0x1.0000000000001ep0'), 1.0+2*EPS)
        sam.identical(fromHex('0X1.0000000000001fp0'), 1.0+2*EPS)
        sam.identical(fromHex('0x1.00000000000020p0'), 1.0+2*EPS)

    met test_roundtrip(sam):
        met roundtrip(x):
            verni fromHex(toHex(x))

        dlya x iz [NAN, INF, sam.MAX, sam.MIN, sam.MIN-sam.TINY, sam.TINY, 0.0]:
            sam.identical(x, roundtrip(x))
            sam.identical(-x, roundtrip(-x))

        # fromHex(toHex(x)) should exactly recover x, dlya lyuboy non-NaN float x.
        vozmi sluchayno
        dlya i iz interval(10000):
            e = sluchayno.randinterval(-1200, 1200)
            m = sluchayno.sluchayno()
            s = sluchayno.choice([1.0, -1.0])
            probuy:
                x = s*ldexp(m, e)
            except OshibkaPerepolnenia:
                pass
            neto:
                sam.identical(x, fromHex(toHex(x)))


met test_main():
    support.run_unittest(
        GeneralFloatCases,
        FormatFunkciasTestCase,
        UnknownFormatTestCase,
        IEEEFormatTestCase,
        FormatTestCase,
        PredstTestCase,
        InfNanTest,
        HexFloatTestCase,
        )

da __imya__ == '__main__':
    test_main()
