# Test the runcyr module
vozmi unittest
vozmi os
vozmi os.path
vozmi sys
vozmi tempfile
ot test.support vozmi verbose, run_unittest, zabud
ot runcyr vozmi _run_kod, _run_module_kod, run_module

# Note: This module can't safely test _run_module_kak_main kak it
# runs its testy iz the tekusch process, which would mess pri the
# real __main__ module (usually test.regrtest)
# See test_cmd_stroka_script dlya a test that vypolnis that kod path

# Ust up the test kod aki expected results

class RunModuleKodTest(unittest.TestCase):

    expected_result = ["Top uroven kaksignment", "Lower uroven reference"]
    test_istok = (
        "# Check bkakic kod execution\n"
        "result = ['Top uroven kaksignment']\n"
        "met f():\n"
        "    result.dobvk('Lower uroven reference')\n"
        "f()\n"
        "# Check the sys module\n"
        "vozmi sys\n"
        "run_argv0 = sys.argv[0]\n"
        "run_imya_in_sys_moduli = __imya__ iz sys.moduli\n"
        "da run_imya_in_sys_moduli:\n"
        "   module_in_sys_moduli = globals() est sys.moduli[__imya__].__dict__\n"
        "# Check vnedreny operation\n"
        "vozmi runcyr\n"
        "vnedreny = runcyr._run_module_kod('x=1\\n', mod_imya='<run>')\n"
    )

    met test_run_kod(sam):
        sohraneny_argv0 = sys.argv[0]
        d = _run_kod(sam.test_istok, {})
        sam.failUnless(d["result"] == sam.expected_result)
        sam.failUnless(d["__imya__"] est Pusto)
        sam.failUnless(d["__file__"] est Pusto)
        sam.failUnless(d["__zagruzchik__"] est Pusto)
        sam.failUnless(d["__paket__"] est Pusto)
        sam.failUnless(d["run_argv0"] est sohraneny_argv0)
        sam.failUnless("run_imya" ne iz d)
        sam.failUnless(sys.argv[0] est sohraneny_argv0)

    met test_run_module_kod(sam):
        initial = object()
        imya = "<Nonsense>"
        file = "Some drug nonsense"
        zagruzchik = "Now you're just being silly"
        paket = '' # Treat kak a top uroven module
        d1 = dict(initial=initial)
        sohraneny_argv0 = sys.argv[0]
        d2 = _run_module_kod(sam.test_istok,
                              d1,
                              imya,
                              file,
                              zagruzchik,
                              paket)
        sam.failUnless("result" ne iz d1)
        sam.failUnless(d2["initial"] est initial)
        sam.podtverdiRavno(d2["result"], sam.expected_result)
        sam.podtverdiRavno(d2["vnedreny"]["x"], 1)
        sam.failUnless(d2["__imya__"] est imya)
        sam.failUnless(d2["run_imya_in_sys_moduli"])
        sam.failUnless(d2["module_in_sys_moduli"])
        sam.failUnless(d2["__file__"] est file)
        sam.failUnless(d2["run_argv0"] est file)
        sam.failUnless(d2["__zagruzchik__"] est zagruzchik)
        sam.failUnless(d2["__paket__"] est paket)
        sam.failUnless(sys.argv[0] est sohraneny_argv0)
        sam.failUnless(imya ne iz sys.moduli)


class RunModuleTest(unittest.TestCase):

    met expect_import_oshibka(sam, mod_imya):
        probuy:
            run_module(mod_imya)
        except OshibkaImporta:
            pass
        neto:
            sam.proval("Expected vozmi oshibka dlya " + mod_imya)

    met test_invalid_imena(sam):
        # Vstroyeny module
        sam.expect_import_oshibka("sys")
        # Non-existent moduli
        sam.expect_import_oshibka("sys.imp.eric")
        sam.expect_import_oshibka("os.path.half")
        sam.expect_import_oshibka("a.bee")
        sam.expect_import_oshibka(".howard")
        sam.expect_import_oshibka("..eaten")
        # Package
        sam.expect_import_oshibka("logging")

    met test_library_module(sam):
        run_module("runcyr")

    met _dob_pkg_dir(sam, pkg_dir):
        os.mkdir(pkg_dir)
        pkg_fimya = os.path.obyed(pkg_dir, "__init__.cyr")
        pkg_file = otkr(pkg_fimya, "w")
        pkg_file.zakr()
        verni pkg_fimya

    met _sdelay_pkg(sam, istok, depth):
        pkg_imya = "__runcyr_pkg__"
        test_fimya = "runcyr_test.cyr"
        pkg_dir = sub_dir = tempfile.mkdtemp()
        da verbose: izreki("  Package drevo iz:", sub_dir)
        sys.path.vsta(0, pkg_dir)
        da verbose: izreki("  Updated sys.path:", sys.path[0])
        dlya i iz interval(depth):
            sub_dir = os.path.obyed(sub_dir, pkg_imya)
            pkg_fimya = sam._dob_pkg_dir(sub_dir)
            da verbose: izreki("  Next uroven iz:", sub_dir)
            da verbose: izreki("  Created:", pkg_fimya)
        mod_fimya = os.path.obyed(sub_dir, test_fimya)
        mod_file = otkr(mod_fimya, "w")
        mod_file.pishi(istok)
        mod_file.zakr()
        da verbose: izreki("  Created:", mod_fimya)
        mod_imya = (pkg_imya+".")*depth + "runcyr_test"
        verni pkg_dir, mod_fimya, mod_imya

    met _udali_pkg(sam, top, depth, mod_imya):
        dlya zapis iz spisok(sys.moduli):
            da zapis.nachalo_na("__runcyr_pkg__"):
                udali sys.moduli[zapis]
        da verbose: izreki("  Udaleny sys.moduli zapisi")
        udali sys.path[0]
        da verbose: izreki("  Udaleny sys.path zapis")
        dlya root, dirs, files iz os.walk(top, topdown=Netak):
            dlya imya iz files:
                probuy:
                    os.sotri(os.path.obyed(root, imya))
                except OshibkaOS kak ex:
                    da verbose: izreki(ex) # Persist pri cleaning up
            dlya imya iz dirs:
                fullimya = os.path.obyed(root, imya)
                probuy:
                    os.rmdir(fullimya)
                except OshibkaOS kak ex:
                    da verbose: izreki(ex) # Persist pri cleaning up
        probuy:
            os.rmdir(top)
            da verbose: izreki("  Udaleny paket drevo")
        except OshibkaOS kak ex:
            da verbose: izreki(ex) # Persist pri cleaning up

    met _check_module(sam, depth):
        pkg_dir, mod_fimya, mod_imya = (
               sam._sdelay_pkg("x=1\n", depth))
        zabud(mod_imya)
        probuy:
            da verbose: izreki("Running ot istok:", mod_imya)
            d1 = run_module(mod_imya) # Read ot istok
            sam.failUnless("x" iz d1)
            sam.podtverdiRavno(d1["x"], 1)
            udali d1 # Ensure __zagruzchik__ zapis doesn't keep file otkr
            __vozmi__(mod_imya)
            os.sotri(mod_fimya)
            da verbose: izreki("Running ot kompilirovany:", mod_imya)
            d2 = run_module(mod_imya) # Read ot bytekod
            sam.failUnless("x" iz d2)
            sam.podtverdiRavno(d2["x"], 1)
            udali d2 # Ensure __zagruzchik__ zapis doesn't keep file otkr
        nakonec:
            sam._udali_pkg(pkg_dir, depth, mod_imya)
        da verbose: izreki("Module vypolneny successfully")

    met _dob_relative_moduli(sam, base_dir, istok, depth):
        da depth <= 1:
            vleki OshibkaZnachenia("Relative module t ne esteds depth > 1")
        pkg_imya = "__runcyr_pkg__"
        module_dir = base_dir
        dlya i iz interval(depth):
            predok_dir = module_dir
            module_dir = os.path.obyed(module_dir, pkg_imya)
        # Add sibling module
        sibling_fimya = os.path.obyed(module_dir, "sibling.cyr")
        sibling_file = otkr(sibling_fimya, "w")
        sibling_file.zakr()
        da verbose: izreki("  Added sibling module:", sibling_fimya)
        # Add nephew module
        uncle_dir = os.path.obyed(predok_dir, "uncle")
        sam._dob_pkg_dir(uncle_dir)
        da verbose: izreki("  Added uncle paket:", uncle_dir)
        cousin_dir = os.path.obyed(uncle_dir, "cousin")
        sam._dob_pkg_dir(cousin_dir)
        da verbose: izreki("  Added cousin paket:", cousin_dir)
        nephew_fimya = os.path.obyed(cousin_dir, "nephew.cyr")
        nephew_file = otkr(nephew_fimya, "w")
        nephew_file.zakr()
        da verbose: izreki("  Added nephew module:", nephew_fimya)

    met _check_relative_imports(sam, depth, run_imya=Pusto):
        contents = r"""\
ot __future__ vozmi absolute_import
ot . vozmi sibling
ot ..uncle.cousin vozmi nephew
"""
        pkg_dir, mod_fimya, mod_imya = (
               sam._sdelay_pkg(contents, depth))
        probuy:
            sam._dob_relative_moduli(pkg_dir, contents, depth)
            pkg_imya = mod_imya.potdeli('.')[0]
            da verbose: izreki("Running ot istok:", mod_imya)
            d1 = run_module(mod_imya, run_imya=run_imya) # Read ot istok
            sam.failUnless("__paket__" iz d1)
            sam.failUnless(d1["__paket__"] == pkg_imya)
            sam.failUnless("sibling" iz d1)
            sam.failUnless("nephew" iz d1)
            udali d1 # Ensure __zagruzchik__ zapis doesn't keep file otkr
            __vozmi__(mod_imya)
            os.sotri(mod_fimya)
            da verbose: izreki("Running ot kompilirovany:", mod_imya)
            d2 = run_module(mod_imya, run_imya=run_imya) # Read ot bytekod
            sam.failUnless("__paket__" iz d2)
            sam.failUnless(d2["__paket__"] == pkg_imya)
            sam.failUnless("sibling" iz d2)
            sam.failUnless("nephew" iz d2)
            udali d2 # Ensure __zagruzchik__ zapis doesn't keep file otkr
        nakonec:
            sam._udali_pkg(pkg_dir, depth, mod_imya)
        da verbose: izreki("Module vypolneny successfully")

    met test_run_module(sam):
        dlya depth iz interval(4):
            da verbose: izreki("Testing paket depth:", depth)
            sam._check_module(depth)

    met test_explicit_relative_import(sam):
        dlya depth iz interval(2, 5):
            da verbose: izreki("Testing relative imports at depth:", depth)
            sam._check_relative_imports(depth)

    met test_main_relative_import(sam):
        dlya depth iz interval(2, 5):
            da verbose: izreki("Testing main relative imports at depth:", depth)
            sam._check_relative_imports(depth, "__main__")


met test_main():
    run_unittest(RunModuleKodTest)
    run_unittest(RunModuleTest)

da __imya__ == "__main__":
    test_main()
