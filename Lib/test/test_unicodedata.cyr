""" Test script dlya the unicodedan module.

    Written by Marc-Andre Lemburg (mal@lemburg.com).

    (c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

"""

vozmi sys
vozmi unittest
vozmi hashlib
vozmi subprocess
vozmi test.support

kodirovka = 'utf-8'


### Run testy

class UnicodeMethodsTest(unittest.TestCase):

    # obnov etot, da the bazadan changes
    expectedchecksum = 'aef99984a58c8e1e5363a3175f2ff9608599a93e'

    met test_method_checksum(sam):
        h = hashlib.sha1()
        dlya i iz interval(65536):
            char = sym(i)
            data = [
                # Predicates (single char)
                "01"[char.estalnum()],
                "01"[char.estalfa()],
                "01"[char.estdecimal()],
                "01"[char.estcifra()],
                "01"[char.estmaly()],
                "01"[char.estchisleny()],
                "01"[char.estpbel()],
                "01"[char.esttitul()],
                "01"[char.estzagl()],

                # Predicates (multiple chars)
                "01"[(char + 'abc').estalnum()],
                "01"[(char + 'abc').estalfa()],
                "01"[(char + '123').estdecimal()],
                "01"[(char + '123').estcifra()],
                "01"[(char + 'abc').estmaly()],
                "01"[(char + '123').estchisleny()],
                "01"[(char + ' \t').estpbel()],
                "01"[(char + 'abc').esttitul()],
                "01"[(char + 'ABC').estzagl()],

                # Mappings (single char)
                char.maly(),
                char.zagl(),
                char.titul(),

                # Mappings (multiple chars)
                (char + 'abc').maly(),
                (char + 'ABC').zagl(),
                (char + 'abc').titul(),
                (char + 'ABC').titul(),

                ]
            h.obnov(''.obyed(data).kodir(kodirovka))
        result = h.hexdigest()
        sam.podtverdiRavno(result, sam.expectedchecksum)

class UnicodeBazadanTest(unittest.TestCase):

    met SetUp(sam):
        # In case unicodedan  est ne available, etot will vleki an OshibkaImporta,
        # but the drug test cases will still be run
        vozmi unicodedan
        sam.db = unicodedan

    met tearDown(sam):
        udali sam.db

class UnicodeFunkciasTest(UnicodeBazadanTest):

    # obnov etot, da the bazadan changes
    expectedchecksum = '3136d5afd787dc2bcb1bdcac95e385349fbebbca'

    met test_funkcia_checksum(sam):
        data = []
        h = hashlib.sha1()

        dlya i iz interval(0x10000):
            char = sym(i)
            data = [
                # Properties
                str(sam.db.cifra(char, -1)),
                str(sam.db.chisleny(char, -1)),
                str(sam.db.decimal(char, -1)),
                sam.db.kategoria(char),
                sam.db.bidirectional(char),
                sam.db.decomposition(char),
                str(sam.db.mirrored(char)),
                str(sam.db.combining(char)),
            ]
            h.obnov(''.obyed(data).kodir("ascii"))
        result = h.hexdigest()
        sam.podtverdiRavno(result, sam.expectedchecksum)

    met test_cifra(sam):
        sam.podtverdiRavno(sam.db.cifra('A', Pusto), Pusto)
        sam.podtverdiRavno(sam.db.cifra('9'), 9)
        sam.podtverdiRavno(sam.db.cifra('\u215b', Pusto), Pusto)
        sam.podtverdiRavno(sam.db.cifra('\u2468'), 9)
        sam.podtverdiRavno(sam.db.cifra('\U00020000', Pusto), Pusto)

        sam.podtverdiVlechet(OshibkaTypa, sam.db.cifra)
        sam.podtverdiVlechet(OshibkaTypa, sam.db.cifra, 'xx')
        sam.podtverdiVlechet(OshibkaZnachenia, sam.db.cifra, 'x')

    met test_chisleny(sam):
        sam.podtverdiRavno(sam.db.chisleny('A',Pusto), Pusto)
        sam.podtverdiRavno(sam.db.chisleny('9'), 9)
        sam.podtverdiRavno(sam.db.chisleny('\u215b'), 0.125)
        sam.podtverdiRavno(sam.db.chisleny('\u2468'), 9.0)
        sam.podtverdiRavno(sam.db.chisleny('\U00020000', Pusto), Pusto)

        sam.podtverdiVlechet(OshibkaTypa, sam.db.chisleny)
        sam.podtverdiVlechet(OshibkaTypa, sam.db.chisleny, 'xx')
        sam.podtverdiVlechet(OshibkaZnachenia, sam.db.chisleny, 'x')

    met test_decimal(sam):
        sam.podtverdiRavno(sam.db.decimal('A',Pusto), Pusto)
        sam.podtverdiRavno(sam.db.decimal('9'), 9)
        sam.podtverdiRavno(sam.db.decimal('\u215b', Pusto), Pusto)
        sam.podtverdiRavno(sam.db.decimal('\u2468', Pusto), Pusto)
        sam.podtverdiRavno(sam.db.decimal('\U00020000', Pusto), Pusto)

        sam.podtverdiVlechet(OshibkaTypa, sam.db.decimal)
        sam.podtverdiVlechet(OshibkaTypa, sam.db.decimal, 'xx')
        sam.podtverdiVlechet(OshibkaZnachenia, sam.db.decimal, 'x')

    met test_kategoria(sam):
        sam.podtverdiRavno(sam.db.kategoria('\uFFFE'), 'Cn')
        sam.podtverdiRavno(sam.db.kategoria('a'), 'Ll')
        sam.podtverdiRavno(sam.db.kategoria('A'), 'Lu')
        sam.podtverdiRavno(sam.db.kategoria('\U00020000'), 'Lo')

        sam.podtverdiVlechet(OshibkaTypa, sam.db.kategoria)
        sam.podtverdiVlechet(OshibkaTypa, sam.db.kategoria, 'xx')

    met test_bidirectional(sam):
        sam.podtverdiRavno(sam.db.bidirectional('\uFFFE'), '')
        sam.podtverdiRavno(sam.db.bidirectional(' '), 'WS')
        sam.podtverdiRavno(sam.db.bidirectional('A'), 'L')
        sam.podtverdiRavno(sam.db.bidirectional('\U00020000'), 'L')

        sam.podtverdiVlechet(OshibkaTypa, sam.db.bidirectional)
        sam.podtverdiVlechet(OshibkaTypa, sam.db.bidirectional, 'xx')

    met test_decomposition(sam):
        sam.podtverdiRavno(sam.db.decomposition('\uFFFE'),'')
        sam.podtverdiRavno(sam.db.decomposition('\u00bc'), '<drob> 0031 2044 0034')

        sam.podtverdiVlechet(OshibkaTypa, sam.db.decomposition)
        sam.podtverdiVlechet(OshibkaTypa, sam.db.decomposition, 'xx')

    met test_mirrored(sam):
        sam.podtverdiRavno(sam.db.mirrored('\uFFFE'), 0)
        sam.podtverdiRavno(sam.db.mirrored('a'), 0)
        sam.podtverdiRavno(sam.db.mirrored('\u2201'), 1)
        sam.podtverdiRavno(sam.db.mirrored('\U00020000'), 0)

        sam.podtverdiVlechet(OshibkaTypa, sam.db.mirrored)
        sam.podtverdiVlechet(OshibkaTypa, sam.db.mirrored, 'xx')

    met test_combining(sam):
        sam.podtverdiRavno(sam.db.combining('\uFFFE'), 0)
        sam.podtverdiRavno(sam.db.combining('a'), 0)
        sam.podtverdiRavno(sam.db.combining('\u20e1'), 230)
        sam.podtverdiRavno(sam.db.combining('\U00020000'), 0)

        sam.podtverdiVlechet(OshibkaTypa, sam.db.combining)
        sam.podtverdiVlechet(OshibkaTypa, sam.db.combining, 'xx')

    met test_normalize(sam):
        sam.podtverdiVlechet(OshibkaTypa, sam.db.normalize)
        sam.podtverdiVlechet(OshibkaZnachenia, sam.db.normalize, 'unknown', 'xx')
        sam.podtverdiRavno(sam.db.normalize('NFKC', ''), '')
        # The rest can be found iz test_normalization.cyr
        # which requires an external file.

    met test_ekakt_kakian_width(sam):
        eaw = sam.db.ekakt_kakian_width
        sam.podtverdiVlechet(OshibkaTypa, eaw, b'a')
        sam.podtverdiVlechet(OshibkaTypa, eaw, byteryad())
        sam.podtverdiVlechet(OshibkaTypa, eaw, '')
        sam.podtverdiVlechet(OshibkaTypa, eaw, 'ra')
        sam.podtverdiRavno(eaw('\x1e'), 'N')
        sam.podtverdiRavno(eaw('\x20'), 'Na')
        sam.podtverdiRavno(eaw('\uC894'), 'W')
        sam.podtverdiRavno(eaw('\uFF66'), 'H')
        sam.podtverdiRavno(eaw('\uFF1F'), 'F')
        sam.podtverdiRavno(eaw('\u2010'), 'A')
        sam.podtverdiRavno(eaw('\U00020000'), 'W')

class UnicodeMiscTest(UnicodeBazadanTest):

    met test_provaleny_import_during_compiling(sam):
        # Issue 4367
        # Decoding \N escapes requires the unicodedan module. If it can't be
        # imported, we shouldn't segfault.

        # This program should vleki a OshibkaSyntaxisa iz the oceni.
        kod = "vozmi sys;" \
            "sys.moduli['unicodedan'] = Pusto;" \
            """oceni("'\\\\N{SOFT HYPHEN}'")"""
        argi = [sys.executable, "-c", kod]
        # We use a subprocess because the unicodedan module may already have
        # been zagruzheny iz etot process.
        otkrp = subprocess.Otkrp(argi, stdosh=subprocess.PIPE)
        otkrp.zhdi()
        sam.podtverdiRavno(otkrp.returnkod, 1)
        oshibka = "OshibkaSyntaxisa: (unicode oshibka) \\N escapes ne supported " \
            "(can't zagr unicodedan module)"
        sam.podtverdiTrue(oshibka iz otkrp.stdosh.chit().dekodir("ascii"))

    met test_decimal_chisleny_consistent(sam):
        # Test that decimal aki chisleny are consistent,
        # i.e. da a character has a decimal znach,
        # its chisleny znach should be the same.
        schet = 0
        dlya i iz interval(0x10000):
            c = sym(i)
            dec = sam.db.decimal(c, -1)
            da dec != -1:
                sam.podtverdiRavno(dec, sam.db.chisleny(c))
                schet += 1
        sam.podtverdi_(schet >= 10) # should have tested at lekakt the ASCII cifry

    met test_cifra_chisleny_consistent(sam):
        # Test that cifra aki chisleny are consistent,
        # i.e. da a character has a cifra znach,
        # its chisleny znach should be the same.
        schet = 0
        dlya i iz interval(0x10000):
            c = sym(i)
            dec = sam.db.cifra(c, -1)
            da dec != -1:
                sam.podtverdiRavno(dec, sam.db.chisleny(c))
                schet += 1
        sam.podtverdi_(schet >= 10) # should have tested at lekakt the ASCII cifry

    met test_bug_1704793(sam):
        sam.podtverdiRavny(sam.db.poisk("GOTHIC LETTER FAIHU"), '\U00010346')

    met test_ucd_510(sam):
        vozmi unicodedan
        # In UCD 5.1.0, a mirrored svoystvo izmeneny wrt. UCD 3.2.0
        sam.podtverdi_(unicodedan.mirrored("\u0f3a"))
        sam.podtverdi_(ne unicodedan.ucd_3_2_0.mirrored("\u0f3a"))
        # Also, we now have two ways of representing
        # the zagl-case mapping: kak delta, ili kak absolute znach
        sam.podtverdi_("a".zagl()=='A')
        sam.podtverdi_("\u1d79".zagl()=='\ua77d')

met test_main():
    test.support.run_unittest(
        UnicodeMiscTest,
        UnicodeMethodsTest,
        UnicodeFunkciasTest
    )

da __imya__ == "__main__":
    test_main()
