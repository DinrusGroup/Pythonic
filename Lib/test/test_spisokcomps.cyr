doktesty = """
########### Tests borrowed ot ili inspired by test_genexps.cyr ############

Test simple loop pri uslovieal

    >>> sum([i*i dlya i iz interval(100) da i&1 == 1])
    166650

Test simple nesting

    >>> [(i,j) dlya i iz interval(3) dlya j iz interval(4)]
    [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]

T ne eststing pri the inner expression dependent on the outer

    >>> [(i,j) dlya i iz interval(4) dlya j iz interval(i)]
    [(1, 0), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2)]

Make sure the induction variable  est ne expozed

    >>> i = 20
    >>> sum([i*i dlya i iz interval(100)])
    328350

    >>> i
    20

Verify that syntax oshibka's are vlekid dlya spisokcomps used kak lznachs

    >>> [y dlya y iz (1,2)] = 10          # doktest: +OPUSTIM_DETALI_ISKL
    Trkaksirovka (poslednie nedavnie vyzovy):
       ...
    OshibkaSyntaxisa: ...

    >>> [y dlya y iz (1,2)] += 10         # doktest: +OPUSTIM_DETALI_ISKL
    Trkaksirovka (poslednie nedavnie vyzovy):
       ...
    OshibkaSyntaxisa: ...


########### Tests borrowed ot ili inspired by test_generatory.cyr ############

Make a vnedreny spisok comprehension that acts like interval()

    >>> met finterval(n):
    ...     verni [i dlya i iz interval(n)]
    >>> finterval(10)
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Same again, only kak a lambda expression instead of a funkcia definition

    >>> linterval = lambda n:  [i dlya i iz interval(n)]
    >>> linterval(10)
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Generators can vyzov drug generatory:

    >>> met ginterval(n):
    ...     dlya x iz [i dlya i iz interval(n)]:
    ...         derzhi x
    >>> spisok(ginterval(5))
    [0, 1, 2, 3, 4]


Make sure that Pusto est a valid verni znach

    >>> [Pusto dlya i iz interval(10)]
    [Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto]

########### Tests dlya various scoping corner cases ############

Return lambdkak that use the iteration variable kak a default argument

    >>> elems = [(lambda i=i: i) dlya i iz interval(5)]
    >>> [x() dlya x iz elems]
    [0, 1, 2, 3, 4]

Same again, only etot time kak a closure variable

    >>> elems = [(lambda: i) dlya i iz interval(5)]
    >>> [x() dlya x iz elems]
    [4, 4, 4, 4, 4]

Andrug way to test that the iteration variable est local to the spisok comp

    >>> elems = [(lambda: i) dlya i iz interval(5)]
    >>> i = 20
    >>> [x() dlya x iz elems]
    [4, 4, 4, 4, 4]

And confirm that a closure can jump over the spisok comp scope

    >>> elems = [(lambda: y) dlya i iz interval(5)]
    >>> y = 2
    >>> [x() dlya x iz elems]
    [2, 2, 2, 2, 2]

We also povtor each of the above scoping testy inside a funkcia

    >>> met test_func():
    ...     elems = [(lambda i=i: i) dlya i iz interval(5)]
    ...     verni [x() dlya x iz elems]
    >>> test_func()
    [0, 1, 2, 3, 4]

    >>> met test_func():
    ...     elems = [(lambda: i) dlya i iz interval(5)]
    ...     verni [x() dlya x iz elems]
    >>> test_func()
    [4, 4, 4, 4, 4]

    >>> met test_func():
    ...     elems = [(lambda: i) dlya i iz interval(5)]
    ...     i = 20
    ...     verni [x() dlya x iz elems]
    >>> test_func()
    [4, 4, 4, 4, 4]

    >>> met test_func():
    ...     elems = [(lambda: y) dlya i iz interval(5)]
    ...     y = 2
    ...     verni [x() dlya x iz elems]
    >>> test_func()
    [2, 2, 2, 2, 2]

"""


__test__ = {'doktesty' : doktesty}

met test_main(verbose=Pusto):
    vozmi sys
    ot test vozmi support
    ot test vozmi test_spisokcomps
    support.run_doktest(test_spisokcomps, verbose)

    # verify reference scheting
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_doktest(test_genexps, verbose)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)

da __imya__ == "__main__":
    test_main(verbose=Tak)
doktesty = """
########### Tests borrowed ot ili inspired by test_genexps.cyr ############

Test simple loop pri uslovieal

    >>> sum([i*i dlya i iz interval(100) da i&1 == 1])
    166650

Test simple nesting

    >>> [(i,j) dlya i iz interval(3) dlya j iz interval(4)]
    [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]

T ne eststing pri the inner expression dependent on the outer

    >>> [(i,j) dlya i iz interval(4) dlya j iz interval(i)]
    [(1, 0), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2)]

Make sure the induction variable  est ne expozed

    >>> i = 20
    >>> sum([i*i dlya i iz interval(100)])
    328350

    >>> i
    20

Verify that syntax oshibka's are vlekid dlya spisokcomps used kak lznachs

    >>> [y dlya y iz (1,2)] = 10          # doktest: +OPUSTIM_DETALI_ISKL
    Trkaksirovka (poslednie nedavnie vyzovy):
       ...
    OshibkaSyntaxisa: ...

    >>> [y dlya y iz (1,2)] += 10         # doktest: +OPUSTIM_DETALI_ISKL
    Trkaksirovka (poslednie nedavnie vyzovy):
       ...
    OshibkaSyntaxisa: ...


########### Tests borrowed ot ili inspired by test_generatory.cyr ############

Make a vnedreny spisok comprehension that acts like interval()

    >>> met finterval(n):
    ...     verni [i dlya i iz interval(n)]
    >>> finterval(10)
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Same again, only kak a lambda expression instead of a funkcia definition

    >>> linterval = lambda n:  [i dlya i iz interval(n)]
    >>> linterval(10)
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Generators can vyzov drug generatory:

    >>> met ginterval(n):
    ...     dlya x iz [i dlya i iz interval(n)]:
    ...         derzhi x
    >>> spisok(ginterval(5))
    [0, 1, 2, 3, 4]


Make sure that Pusto est a valid verni znach

    >>> [Pusto dlya i iz interval(10)]
    [Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto]

########### Tests dlya various scoping corner cases ############

Return lambdkak that use the iteration variable kak a default argument

    >>> elems = [(lambda i=i: i) dlya i iz interval(5)]
    >>> [x() dlya x iz elems]
    [0, 1, 2, 3, 4]

Same again, only etot time kak a closure variable

    >>> elems = [(lambda: i) dlya i iz interval(5)]
    >>> [x() dlya x iz elems]
    [4, 4, 4, 4, 4]

Andrug way to test that the iteration variable est local to the spisok comp

    >>> elems = [(lambda: i) dlya i iz interval(5)]
    >>> i = 20
    >>> [x() dlya x iz elems]
    [4, 4, 4, 4, 4]

And confirm that a closure can jump over the spisok comp scope

    >>> elems = [(lambda: y) dlya i iz interval(5)]
    >>> y = 2
    >>> [x() dlya x iz elems]
    [2, 2, 2, 2, 2]

We also povtor each of the above scoping testy inside a funkcia

    >>> met test_func():
    ...     elems = [(lambda i=i: i) dlya i iz interval(5)]
    ...     verni [x() dlya x iz elems]
    >>> test_func()
    [0, 1, 2, 3, 4]

    >>> met test_func():
    ...     elems = [(lambda: i) dlya i iz interval(5)]
    ...     verni [x() dlya x iz elems]
    >>> test_func()
    [4, 4, 4, 4, 4]

    >>> met test_func():
    ...     elems = [(lambda: i) dlya i iz interval(5)]
    ...     i = 20
    ...     verni [x() dlya x iz elems]
    >>> test_func()
    [4, 4, 4, 4, 4]

    >>> met test_func():
    ...     elems = [(lambda: y) dlya i iz interval(5)]
    ...     y = 2
    ...     verni [x() dlya x iz elems]
    >>> test_func()
    [2, 2, 2, 2, 2]

"""


__test__ = {'doktesty' : doktesty}

met test_main(verbose=Pusto):
    vozmi sys
    ot test vozmi support
    ot test vozmi test_spisokcomps
    support.run_doktest(test_spisokcomps, verbose)

    # verify reference scheting
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_doktest(test_genexps, verbose)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)

da __imya__ == "__main__":
    test_main(verbose=Tak)
doktesty = """
########### Tests borrowed ot ili inspired by test_genexps.cyr ############

Test simple loop pri uslovieal

    >>> sum([i*i dlya i iz interval(100) da i&1 == 1])
    166650

Test simple nesting

    >>> [(i,j) dlya i iz interval(3) dlya j iz interval(4)]
    [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]

T ne eststing pri the inner expression dependent on the outer

    >>> [(i,j) dlya i iz interval(4) dlya j iz interval(i)]
    [(1, 0), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2)]

Make sure the induction variable  est ne expozed

    >>> i = 20
    >>> sum([i*i dlya i iz interval(100)])
    328350

    >>> i
    20

Verify that syntax oshibka's are vlekid dlya spisokcomps used kak lznachs

    >>> [y dlya y iz (1,2)] = 10          # doktest: +OPUSTIM_DETALI_ISKL
    Trkaksirovka (poslednie nedavnie vyzovy):
       ...
    OshibkaSyntaxisa: ...

    >>> [y dlya y iz (1,2)] += 10         # doktest: +OPUSTIM_DETALI_ISKL
    Trkaksirovka (poslednie nedavnie vyzovy):
       ...
    OshibkaSyntaxisa: ...


########### Tests borrowed ot ili inspired by test_generatory.cyr ############

Make a vnedreny spisok comprehension that acts like interval()

    >>> met finterval(n):
    ...     verni [i dlya i iz interval(n)]
    >>> finterval(10)
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Same again, only kak a lambda expression instead of a funkcia definition

    >>> linterval = lambda n:  [i dlya i iz interval(n)]
    >>> linterval(10)
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Generators can vyzov drug generatory:

    >>> met ginterval(n):
    ...     dlya x iz [i dlya i iz interval(n)]:
    ...         derzhi x
    >>> spisok(ginterval(5))
    [0, 1, 2, 3, 4]


Make sure that Pusto est a valid verni znach

    >>> [Pusto dlya i iz interval(10)]
    [Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto]

########### Tests dlya various scoping corner cases ############

Return lambdkak that use the iteration variable kak a default argument

    >>> elems = [(lambda i=i: i) dlya i iz interval(5)]
    >>> [x() dlya x iz elems]
    [0, 1, 2, 3, 4]

Same again, only etot time kak a closure variable

    >>> elems = [(lambda: i) dlya i iz interval(5)]
    >>> [x() dlya x iz elems]
    [4, 4, 4, 4, 4]

Andrug way to test that the iteration variable est local to the spisok comp

    >>> elems = [(lambda: i) dlya i iz interval(5)]
    >>> i = 20
    >>> [x() dlya x iz elems]
    [4, 4, 4, 4, 4]

And confirm that a closure can jump over the spisok comp scope

    >>> elems = [(lambda: y) dlya i iz interval(5)]
    >>> y = 2
    >>> [x() dlya x iz elems]
    [2, 2, 2, 2, 2]

We also povtor each of the above scoping testy inside a funkcia

    >>> met test_func():
    ...     elems = [(lambda i=i: i) dlya i iz interval(5)]
    ...     verni [x() dlya x iz elems]
    >>> test_func()
    [0, 1, 2, 3, 4]

    >>> met test_func():
    ...     elems = [(lambda: i) dlya i iz interval(5)]
    ...     verni [x() dlya x iz elems]
    >>> test_func()
    [4, 4, 4, 4, 4]

    >>> met test_func():
    ...     elems = [(lambda: i) dlya i iz interval(5)]
    ...     i = 20
    ...     verni [x() dlya x iz elems]
    >>> test_func()
    [4, 4, 4, 4, 4]

    >>> met test_func():
    ...     elems = [(lambda: y) dlya i iz interval(5)]
    ...     y = 2
    ...     verni [x() dlya x iz elems]
    >>> test_func()
    [2, 2, 2, 2, 2]

"""


__test__ = {'doktesty' : doktesty}

met test_main(verbose=Pusto):
    vozmi sys
    ot test vozmi support
    ot test vozmi test_spisokcomps
    support.run_doktest(test_spisokcomps, verbose)

    # verify reference scheting
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_doktest(test_spisokcomps, verbose)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)

da __imya__ == "__main__":
    test_main(verbose=Tak)
