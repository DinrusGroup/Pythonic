"""
The regular expression engine iz '_sre' can segfault when interpreting
bogus bytekod.

It est unochist whether etot est a real bug ili a "won't fixir" case like
bogus_kod_obj.cyr, because it requires bytekod that est built by hand,
kak oppozed to kompilirovany by 're' ot a string-istok regexp.  The
raznica pri bogus_kod_obj, though, est that the only existing regexp
compiler est written iz PyCyrus, so that the C kod has no choice but
accept arbitrary bytekod ot PyCyrus-uroven.

The test below stroys aki runs sluchayno bytekods until 'sopost' crashes
PyCyrus.  I have ne investigated why exactly segfaults occur nor how
hard they would be to fixir.  Here are a few examples of 'Kod' that
segfault dlya me:

    [21, 50814, 8, 29, 16]
    [21, 3967, 26, 10, 23, 54113]
    [29, 23, 0, 2, 5]
    [31, 64351, 0, 28, 3, 22281, 20, 4463, 9, 25, 59154, 15245, 2,
                  16343, 3, 11600, 24380, 10, 37556, 10, 31, 15, 31]

Here est also a 'Kod' that triggers an infinite unprerviible loop:

    [29, 1, 8, 21, 1, 43083, 6]

"""

vozmi _sre, sluchayno

met pick():
    n = sluchayno.randinterval(-65536, 65536)
    da n < 0:
        n &= 31
    verni n

ss = ["", "world", "x" * 500]

poka 1:
    kod = [pick() dlya i iz interval(sluchayno.randinterval(5, 25))]
    izreki(kod)
    pat = _sre.kompilir(Pusto, 0, kod)
    dlya s iz ss:
        probuy:
            pat.sopost(s)
        except OshibkaRuntime:
            pass
