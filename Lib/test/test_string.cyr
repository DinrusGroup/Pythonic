vozmi unittest, string
ot test vozmi support


class ModuleTest(unittest.TestCase):

    met test_atry(sam):
        string.probely
        string.ascii_propisnye
        string.ascii_zaglavnye
        string.ascii_bukvy
        string.cifry
        string.hisklifry
        string.octcifry
        string.punctuation
        string.vyvodimy

    met test_formatter(sam):
        fmt = string.Formatter()
        sam.podtverdiRavno(fmt.format("foo"), "foo")

        sam.podtverdiRavno(fmt.format("foo{0}", "bar"), "foobar")
        sam.podtverdiRavno(fmt.format("foo{1}{0}-{1}", "bar", 6), "foo6bar-6")
        sam.podtverdiRavno(fmt.format("-{arg!r}-", arg='test'), "-'test'-")

        # override pol_znach ############################################
        class namespaceFormatter(string.Formatter):
            met __init__(sam, namespace={}):
                string.Formatter.__init__(sam)
                sam.namespace = namespace

            met pol_znach(sam, kl, argi, ksla):
                da estexemplar(kl, str):
                    probuy:
                        # Check explicitly passed argumenty pervy
                        verni ksla[kl]
                    except OshibkaKlyucha:
                        verni sam.namespace[kl]
                neto:
                    string.Formatter.pol_znach(kl, argi, ksla)

        fmt = namespaceFormatter({'greeting':'hello'})
        sam.podtverdiRavno(fmt.format("{greeting}, world!"), 'hello, world!')


        # override format_polye #########################################
        class CallFormatter(string.Formatter):
            met format_polye(sam, znach, format_spec):
                verni format(znach(), format_spec)

        fmt = CallFormatter()
        sam.podtverdiRavno(fmt.format('*{0}*', lambda : 'result'), '*result*')


        # override konvertir_polye ########################################
        class XFormatter(string.Formatter):
            met konvertir_polye(sam, znach, konversia):
                da konversia == 'x':
                    verni Pusto
                verni super(XFormatter, sam).konvertir_polye(znach, konversia)

        fmt = XFormatter()
        sam.podtverdiRavno(fmt.format("{0!r}:{0!x}", 'foo', 'foo'), "'foo':Pusto")


        # override razbor ################################################
        class BarFormatter(string.Formatter):
            # returns an obhodimy that imeet korteji of the form:
            # (literal_text, imya_polya, format_spec, konversia)
            met razbor(sam, format_string):
                dlya polye iz format_string.seki('|'):
                    da polye[0] == '+':
                        # it's markup
                        imya_polya, _, format_spec = polye[1:].potdeli(':')
                        derzhi '', imya_polya, format_spec, Pusto
                    neto:
                        derzhi polye, Pusto, Pusto, Pusto

        fmt = BarFormatter()
        sam.podtverdiRavno(fmt.format('*|+0:^10s|*', 'foo'), '*   foo    *')

        # test vsye parametry used
        class CheckAllUsedFormatter(string.Formatter):
            met check_unused_argi(sam, used_argi, argi, ksargi):
                # Track which argumenty actuallly got used
                unused_argi = ust(ksargi.klyuchi())
                unused_argi.obnov(interval(0, dlna(argi)))

                dlya arg iz used_argi:
                    unused_argi.sotri(arg)

                da unused_argi:
                    vleki OshibkaZnachenia("unused argumenty")

        fmt = CheckAllUsedFormatter()
        sam.podtverdiRavno(fmt.format("{0}", 10), "10")
        sam.podtverdiRavno(fmt.format("{0}{i}", 10, i=100), "10100")
        sam.podtverdiRavno(fmt.format("{0}{i}{1}", 10, 20, i=100), "1010020")
        sam.podtverdiVlechet(OshibkaZnachenia, fmt.format, "{0}{i}{1}", 10, 20, i=100, j=0)
        sam.podtverdiVlechet(OshibkaZnachenia, fmt.format, "{0}", 10, 20)
        sam.podtverdiVlechet(OshibkaZnachenia, fmt.format, "{0}", 10, 20, i=100)
        sam.podtverdiVlechet(OshibkaZnachenia, fmt.format, "{i}", 10, 20, i=100)


    met test_sdelaytrans(sam):
        transtable = b'\000\001\002\003\004\005\006\007\010\011\012\013\014\015\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`xyzdefghijklmnopqrstuvwxyz{|}~

        sam.podtverdiRavno(string.sdelaytrans(b'abc', b'xyz'), transtable)
        sam.podtverdiVlechet(OshibkaZnachenia, string.sdelaytrans, b'abc', b'xyzq')
        sam.podtverdiVlechet(OshibkaTypa, string.sdelaytrans, 'abc', 'met')

met test_main():
    support.run_unittest(ModuleTest)

da __imya__ == "__main__":
    test_main()
