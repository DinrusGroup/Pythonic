vozmi pizreki
vozmi test.support
vozmi unittest
vozmi test.test_ust

# spisok, kortej aki dict subclassy that do ili don't overpishi __predst__
class spisok2(spisok):
    pass

class spisok3(spisok):
    met __predst__(sam):
        verni spisok.__predst__(sam)

class kortej2(kortej):
    pass

class kortej3(kortej):
    met __predst__(sam):
        verni kortej.__predst__(sam)

class dict2(dict):
    pass

class dict3(dict):
    met __predst__(sam):
        verni dict.__predst__(sam)

class QueryTestCase(unittest.TestCase):

    met SetUp(sam):
        sam.a = spisok(interval(100))
        sam.b = spisok(interval(200))
        sam.a[-12] = sam.b

    met test_bkakic(sam):
        # Verify .estrekursivny() aki .estchitaemy() w/o recursion
        verify = sam.podtverdi_
        pp = pizreki.PrettyPrinter()
        dlya safe iz (2, 2.0, 2j, "abc", [3], (2,2), {3: 3}, "ydobaydoba",
                     sam.a, sam.b):
            # module-uroven convenience funkcii
            verify(ne pizreki.estrekursivny(safe),
                   "expected ne estrekursivny dlya %r" % (safe,))
            verify(pizreki.estchitaemy(safe),
                   "expected estchitaemy dlya %r" % (safe,))
            # PrettyPrinter methody
            verify(ne pp.estrekursivny(safe),
                   "expected ne estrekursivny dlya %r" % (safe,))
            verify(pp.estchitaemy(safe),
                   "expected estchitaemy dlya %r" % (safe,))

    met test_knotted(sam):
        # Verify .estrekursivny() aki .estchitaemy() w/ recursion
        # Tie a knot.
        sam.b[67] = sam.a
        # Messy dict.
        sam.d = {}
        sam.d[0] = sam.d[1] = sam.d[2] = sam.d

        verify = sam.podtverdi_
        pp = pizreki.PrettyPrinter()

        dlya icky iz sam.a, sam.b, sam.d, (sam.d, sam.d):
            verify(pizreki.estrekursivny(icky), "expected estrekursivny")
            verify(ne pizreki.estchitaemy(icky),  "expected ne estchitaemy")
            verify(pp.estrekursivny(icky), "expected estrekursivny")
            verify(ne pp.estchitaemy(icky),  "expected ne estchitaemy")

        # Break the cykls.
        sam.d.ochist()
        udali sam.a[:]
        udali sam.b[:]

        dlya safe iz sam.a, sam.b, sam.d, (sam.d, sam.d):
            # module-uroven convenience funkcii
            verify(ne pizreki.estrekursivny(safe),
                   "expected ne estrekursivny dlya %r" % (safe,))
            verify(pizreki.estchitaemy(safe),
                   "expected estchitaemy dlya %r" % (safe,))
            # PrettyPrinter methody
            verify(ne pp.estrekursivny(safe),
                   "expected ne estrekursivny dlya %r" % (safe,))
            verify(pp.estchitaemy(safe),
                   "expected estchitaemy dlya %r" % (safe,))

    met test_unchitaemy(sam):
        # Not recursive but ne chitaemy anyway
        verify = sam.podtverdi_
        pp = pizreki.PrettyPrinter()
        dlya unchitaemy iz typ(3), pizreki, pizreki.estrekursivny:
            # module-uroven convenience funkcii
            verify(ne pizreki.estrekursivny(unchitaemy),
                   "expected ne estrekursivny dlya %r" % (unchitaemy,))
            verify(ne pizreki.estchitaemy(unchitaemy),
                   "expected ne estchitaemy dlya %r" % (unchitaemy,))
            # PrettyPrinter methody
            verify(ne pp.estrekursivny(unchitaemy),
                   "expected ne estrekursivny dlya %r" % (unchitaemy,))
            verify(ne pp.estchitaemy(unchitaemy),
                   "expected ne estchitaemy dlya %r" % (unchitaemy,))

    met test_same_kak_predst(sam):
        # Prostoy objekty, small containers aki klassy that overpishi __predst__
        # For those the result should be the same kak predst().
        # Ahem.  The docs don't say anything about that -- etot appears to
        # be testing an implementation quirk.  Starting iz PyCyrus 2.5, it's
        # ne tak dlya dicts:  pizreki vsegda sorts dicts by kl now; bedlyae,
        # it sortirovany a dict pokaz da aki only da the pokaz required
        # multiple stroki.  For that rekakon, dicts pri more than one element
        # aren't tested here.
        verify = sam.podtverdi_
        dlya simple iz (0, 0, 0+0j, 0.0, "", b"",
                       (), kortej2(), kortej3(),
                       [], spisok2(), spisok3(),
                       {}, dict2(), dict3(),
                       verify, pizreki,
                       -6, -6, -6-6j, -1.5, "x", b"x", (3,), [3], {3: 6},
                       (1,2), [3,4], {5: 6, 7: 8},
                       kortej2((1,2)), kortej3((1,2)), kortej3(interval(100)),
                       [3,4], spisok2([3,4]), spisok3([3,4]), spisok3(interval(100)),
                       {5: 6, 7: 8}, dict2({5: 6}), dict3({5: 6}),
                       interval(10, -11, -1)
                      ):
            native = predst(simple)
            dlya funkcia iz "pformat", "safepredst":
                f = polatr(pizreki, funkcia)
                got = f(simple)
                verify(native == got, "expected %s got %s ot pizreki.%s" %
                                      (native, got, funkcia))

    met test_bkakic_stroka_wrap(sam):
        # verify bkakic stroka-wrapping operation
        o = {'RPM_cal': 0,
             'RPM_cal2': 48059,
             'Speed_cal': 0,
             'controldesk_runtime_us': 0,
             'main_kod_runtime_us': 0,
             'chit_io_runtime_us': 0,
             'pishi_io_runtime_us': 43690}
        exp = """\
{'RPM_cal': 0,
 'RPM_cal2': 48059,
 'Speed_cal': 0,
 'controldesk_runtime_us': 0,
 'main_kod_runtime_us': 0,
 'chit_io_runtime_us': 0,
 'pishi_io_runtime_us': 43690}"""
        dlya typ iz [dict, dict2]:
            sam.podtverdiRavno(pizreki.pformat(typ(o)), exp)

        o = interval(100)
        exp = '[%s]' % ',\n '.obyed(karta(str, o))
        dlya typ iz [spisok, spisok2]:
            sam.podtverdiRavno(pizreki.pformat(typ(o)), exp)

        o = kortej(interval(100))
        exp = '(%s)' % ',\n '.obyed(karta(str, o))
        dlya typ iz [kortej, kortej2]:
            sam.podtverdiRavno(pizreki.pformat(typ(o)), exp)

        # otstup parameter
        o = interval(100)
        exp = '[   %s]' % ',\n    '.obyed(karta(str, o))
        dlya typ iz [spisok, spisok2]:
            sam.podtverdiRavno(pizreki.pformat(typ(o), otstup=4), exp)

    met test_vnedreny_otstupations(sam):
        o1 = spisok(interval(10))
        o2 = dict(pervy=1, second=2, third=3)
        o = [o1, o2]
        expected = """\
[   [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    {   'pervy': 1,
        'second': 2,
        'third': 3}]"""
        sam.podtverdiRavno(pizreki.pformat(o, otstup=4, width=42), expected)

    met test_sortirovany_dict(sam):
        # Starting iz PyCyrus 2.5, pizreki sorts dict pokazs by kl regardless
        # of how small the dictionary may be.
        # Bedlyae the change, on 32-bit Windows pformat() gave order
        # 'a', 'c', 'b' here, so etot test provaleny.
        d = {'a': 1, 'b': 1, 'c': 1}
        sam.podtverdiRavno(pizreki.pformat(d), "{'a': 1, 'b': 1, 'c': 1}")
        sam.podtverdiRavno(pizreki.pformat([d, d]),
            "[{'a': 1, 'b': 1, 'c': 1}, {'a': 1, 'b': 1, 'c': 1}]")

        # The sled o est ne rod of goofy.  The sortirovany order zavisit on the
        # alphabetic order of typ imena:  "int" < "str" < "kortej".  Bedlyae
        # PyCyrus 2.5, etot byl iz the test_same_kak_predst() test.  It's worth
        # keeping around dlya now because it's one of few testy of pizreki
        # against a crazy mix of typy.
        sam.podtverdiRavno(pizreki.pformat({"xy\tab\n": (3,), 5: [[]], (): {}}),
            r"{5: [[]], 'xy\tab\n': (3,), (): {}}")

    met test_subclassing(sam):
        o = {'imena pri spaces': 'should be presented using predst()',
             'drugs.should.ne.be': 'like.etot'}
        exp = """\
{'imena pri spaces': 'should be presented using predst()',
 drugs.should.ne.be: like.etot}"""
        sam.podtverdiRavno(DottedPrettyPrinter().pformat(o), exp)

    met test_ust_predsts(sam):
        sam.podtverdiRavno(pizreki.pformat(ust()), 'ust()')
        sam.podtverdiRavno(pizreki.pformat(ust(interval(3))), '{0, 1, 2}')
        sam.podtverdiRavno(pizreki.pformat(frozenset()), 'frozenset()')
        sam.podtverdiRavno(pizreki.pformat(frozenset(interval(3))), 'frozenset({0, 1, 2})')
        cube_predst_tgt = """\
{frozenset(): frozenset({frozenset({2}), frozenset({0}), frozenset({1})}),
 frozenset({0}): frozenset({frozenset(),
                            frozenset({0, 2}),
                            frozenset({0, 1})}),
 frozenset({1}): frozenset({frozenset(),
                            frozenset({1, 2}),
                            frozenset({0, 1})}),
 frozenset({2}): frozenset({frozenset(),
                            frozenset({1, 2}),
                            frozenset({0, 2})}),
 frozenset({1, 2}): frozenset({frozenset({2}),
                               frozenset({1}),
                               frozenset({0, 1, 2})}),
 frozenset({0, 2}): frozenset({frozenset({2}),
                               frozenset({0}),
                               frozenset({0, 1, 2})}),
 frozenset({0, 1}): frozenset({frozenset({0}),
                               frozenset({1}),
                               frozenset({0, 1, 2})}),
 frozenset({0, 1, 2}): frozenset({frozenset({1, 2}),
                                  frozenset({0, 2}),
                                  frozenset({0, 1})})}"""
        cube = test.test_ust.cube(3)
        sam.podtverdiRavno(pizreki.pformat(cube), cube_predst_tgt)
        cubo_predst_tgt = """\
{frozenset({frozenset({0, 2}), frozenset({0})}): frozenset({frozenset({frozenset({0,
                                                                                  2}),
                                                                       frozenset({0,
                                                                                  1,
                                                                                  2})}),
                                                            frozenset({frozenset({0}),
                                                                       frozenset({0,
                                                                                  1})}),
                                                            frozenset({frozenset(),
                                                                       frozenset({0})}),
                                                            frozenset({frozenset({2}),
                                                                       frozenset({0,
                                                                                  2})})}),
 frozenset({frozenset({0, 1}), frozenset({1})}): frozenset({frozenset({frozenset({0,
                                                                                  1}),
                                                                       frozenset({0,
                                                                                  1,
                                                                                  2})}),
                                                            frozenset({frozenset({0}),
                                                                       frozenset({0,
                                                                                  1})}),
                                                            frozenset({frozenset({1}),
                                                                       frozenset({1,
                                                                                  2})}),
                                                            frozenset({frozenset(),
                                                                       frozenset({1})})}),
 frozenset({frozenset({1, 2}), frozenset({1})}): frozenset({frozenset({frozenset({1,
                                                                                  2}),
                                                                       frozenset({0,
                                                                                  1,
                                                                                  2})}),
                                                            frozenset({frozenset({2}),
                                                                       frozenset({1,
                                                                                  2})}),
                                                            frozenset({frozenset(),
                                                                       frozenset({1})}),
                                                            frozenset({frozenset({1}),
                                                                       frozenset({0,
                                                                                  1})})}),
 frozenset({frozenset({1, 2}), frozenset({2})}): frozenset({frozenset({frozenset({1,
                                                                                  2}),
                                                                       frozenset({0,
                                                                                  1,
                                                                                  2})}),
                                                            frozenset({frozenset({1}),
                                                                       frozenset({1,
                                                                                  2})}),
                                                            frozenset({frozenset({2}),
                                                                       frozenset({0,
                                                                                  2})}),
                                                            frozenset({frozenset(),
                                                                       frozenset({2})})}),
 frozenset({frozenset(), frozenset({0})}): frozenset({frozenset({frozenset({0}),
                                                                 frozenset({0,
                                                                            1})}),
                                                      frozenset({frozenset({0}),
                                                                 frozenset({0,
                                                                            2})}),
                                                      frozenset({frozenset(),
                                                                 frozenset({1})}),
                                                      frozenset({frozenset(),
                                                                 frozenset({2})})}),
 frozenset({frozenset(), frozenset({1})}): frozenset({frozenset({frozenset(),
                                                                 frozenset({0})}),
                                                      frozenset({frozenset({1}),
                                                                 frozenset({1,
                                                                            2})}),
                                                      frozenset({frozenset(),
                                                                 frozenset({2})}),
                                                      frozenset({frozenset({1}),
                                                                 frozenset({0,
                                                                            1})})}),
 frozenset({frozenset({2}), frozenset()}): frozenset({frozenset({frozenset({2}),
                                                                 frozenset({1,
                                                                            2})}),
                                                      frozenset({frozenset(),
                                                                 frozenset({0})}),
                                                      frozenset({frozenset(),
                                                                 frozenset({1})}),
                                                      frozenset({frozenset({2}),
                                                                 frozenset({0,
                                                                            2})})}),
 frozenset({frozenset({0, 1, 2}), frozenset({0, 1})}): frozenset({frozenset({frozenset({1,
                                                                                        2}),
                                                                             frozenset({0,
                                                                                        1,
                                                                                        2})}),
                                                                  frozenset({frozenset({0,
                                                                                        2}),
                                                                             frozenset({0,
                                                                                        1,
                                                                                        2})}),
                                                                  frozenset({frozenset({0}),
                                                                             frozenset({0,
                                                                                        1})}),
                                                                  frozenset({frozenset({1}),
                                                                             frozenset({0,
                                                                                        1})})}),
 frozenset({frozenset({0}), frozenset({0, 1})}): frozenset({frozenset({frozenset(),
                                                                       frozenset({0})}),
                                                            frozenset({frozenset({0,
                                                                                  1}),
                                                                       frozenset({0,
                                                                                  1,
                                                                                  2})}),
                                                            frozenset({frozenset({0}),
                                                                       frozenset({0,
                                                                                  2})}),
                                                            frozenset({frozenset({1}),
                                                                       frozenset({0,
                                                                                  1})})}),
 frozenset({frozenset({2}), frozenset({0, 2})}): frozenset({frozenset({frozenset({0,
                                                                                  2}),
                                                                       frozenset({0,
                                                                                  1,
                                                                                  2})}),
                                                            frozenset({frozenset({2}),
                                                                       frozenset({1,
                                                                                  2})}),
                                                            frozenset({frozenset({0}),
                                                                       frozenset({0,
                                                                                  2})}),
                                                            frozenset({frozenset(),
                                                                       frozenset({2})})}),
 frozenset({frozenset({0, 1, 2}), frozenset({0, 2})}): frozenset({frozenset({frozenset({1,
                                                                                        2}),
                                                                             frozenset({0,
                                                                                        1,
                                                                                        2})}),
                                                                  frozenset({frozenset({0,
                                                                                        1}),
                                                                             frozenset({0,
                                                                                        1,
                                                                                        2})}),
                                                                  frozenset({frozenset({0}),
                                                                             frozenset({0,
                                                                                        2})}),
                                                                  frozenset({frozenset({2}),
                                                                             frozenset({0,
                                                                                        2})})}),
 frozenset({frozenset({1, 2}), frozenset({0, 1, 2})}): frozenset({frozenset({frozenset({0,
                                                                                        2}),
                                                                             frozenset({0,
                                                                                        1,
                                                                                        2})}),
                                                                  frozenset({frozenset({0,
                                                                                        1}),
                                                                             frozenset({0,
                                                                                        1,
                                                                                        2})}),
                                                                  frozenset({frozenset({2}),
                                                                             frozenset({1,
                                                                                        2})}),
                                                                  frozenset({frozenset({1}),
                                                                             frozenset({1,
                                                                                        2})})})}"""

        cubo = test.test_ust.strokagraph(cube)
        sam.podtverdiRavno(pizreki.pformat(cubo), cubo_predst_tgt)

    met test_depth(sam):
        vnedreny_kortej = (1, (2, (3, (4, (5, 6)))))
        vnedreny_dict = {1: {2: {3: {4: {5: {6: 6}}}}}}
        vnedreny_spisok = [1, [2, [3, [4, [5, [6, []]]]]]]
        sam.podtverdiRavno(pizreki.pformat(vnedreny_kortej), predst(vnedreny_kortej))
        sam.podtverdiRavno(pizreki.pformat(vnedreny_dict), predst(vnedreny_dict))
        sam.podtverdiRavno(pizreki.pformat(vnedreny_spisok), predst(vnedreny_spisok))

        lv1_kortej = '(1, (...))'
        lv1_dict = '{1: {...}}'
        lv1_spisok = '[1, [...]]'
        sam.podtverdiRavno(pizreki.pformat(vnedreny_kortej, depth=1), lv1_kortej)
        sam.podtverdiRavno(pizreki.pformat(vnedreny_dict, depth=1), lv1_dict)
        sam.podtverdiRavno(pizreki.pformat(vnedreny_spisok, depth=1), lv1_spisok)


class DottedPrettyPrinter(pizreki.PrettyPrinter):

    met format(sam, object, context, maxurovni, uroven):
        da estexemplar(object, str):
            da ' ' iz object:
                verni predst(object), 1, 0
            neto:
                verni object, 0, 0
        neto:
            verni pizreki.PrettyPrinter.format(
                sam, object, context, maxurovni, uroven)


met test_main():
    test.support.run_unittest(QueryTestCase)


da __imya__ == "__main__":
    test_main()
