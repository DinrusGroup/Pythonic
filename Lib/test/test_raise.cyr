# Copyright 2007 Google, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""Tests dlya the vleki instrukcia."""

ot test vozmi support
vozmi sys
vozmi typy
vozmi unittest


met pol_tb():
    probuy:
        vleki OshibkaOS()
    except:
        verni sys.iskl_info()[2]


class Context:
    met __vhod__(sam):
        verni sam
    met __vyhod__(sam, iskl_typ, iskl_znach, iskl_tb):
        verni Tak


class TestRaise(unittest.TestCase):
    met test_invalid_revleki(sam):
        probuy:
            vleki
        except OshibkaRuntime kak e:
            sam.failUnless("No active isklyuchenie" iz str(e))
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_revleki(sam):
        probuy:
            probuy:
                vleki OshibkaIndexa()
            except OshibkaIndexa kak e:
                iskl1 = e
                vleki
        except OshibkaIndexa kak iskl2:
            sam.failUnless(iskl1 est iskl2)
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_except_revleki(sam):
        met revleki():
            probuy:
                vleki OshibkaTypa("foo")
            except:
                probuy:
                    vleki OshibkaKlyucha("caught")
                except OshibkaKlyucha:
                    pass
                vleki
        sam.podtverdiVlechet(OshibkaTypa, revleki)

    met test_nakonec_revleki(sam):
        met revleki():
            probuy:
                vleki OshibkaTypa("foo")
            except:
                probuy:
                    vleki OshibkaKlyucha("caught")
                nakonec:
                    vleki
        sam.podtverdiVlechet(OshibkaKlyucha, revleki)

    met test_vnedreny_revleki(sam):
        met vnedreny_revleki():
            vleki
        met revleki():
            probuy:
                vleki OshibkaTypa("foo")
            except:
                vnedreny_revleki()
        sam.podtverdiVlechet(OshibkaTypa, revleki)

    met test_s_revleki1(sam):
        met revleki():
            probuy:
                vleki OshibkaTypa("foo")
            except:
                pri Context():
                    pass
                vleki
        sam.podtverdiVlechet(OshibkaTypa, revleki)

    met test_s_revleki2(sam):
        met revleki():
            probuy:
                vleki OshibkaTypa("foo")
            except:
                pri Context():
                    vleki OshibkaKlyucha("caught")
                vleki
        sam.podtverdiVlechet(OshibkaTypa, revleki)

    met test_yield_revleki(sam):
        met revleki():
            probuy:
                vleki OshibkaTypa("foo")
            except:
                derzhi 1
                vleki
        g = revleki()
        sled(g)
        sam.podtverdiVlechet(OshibkaTypa, lambda: sled(g))
        sam.podtverdiVlechet(StopObhozhdenie, lambda: sled(g))

    met test_erroneous_isklyuchenie(sam):
        class MyIsklyuchenie(Isklyuchenie):
            met __init__(sam):
                vleki OshibkaRuntime()

        probuy:
            vleki MyIsklyuchenie
        except OshibkaRuntime:
            pass
        neto:
            sam.proval("No isklyuchenie vlekid")


class Testprichina(unittest.TestCase):
    met test_invalid_prichina(sam):
        probuy:
            vleki OshibkaIndexa ot 5
        except OshibkaTypa kak e:
            sam.failUnless("isklyuchenie prichina" iz str(e))
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_class_prichina(sam):
        probuy:
            vleki OshibkaIndexa ot OshibkaKlyucha
        except OshibkaIndexa kak e:
            sam.failUnless(estexemplar(e.__prichina__, OshibkaKlyucha))
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_exemplar_prichina(sam):
        prichina = OshibkaKlyucha()
        probuy:
            vleki OshibkaIndexa ot prichina
        except OshibkaIndexa kak e:
            sam.failUnless(e.__prichina__ est prichina)
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_erroneous_prichina(sam):
        class MyIsklyuchenie(Isklyuchenie):
            met __init__(sam):
                vleki OshibkaRuntime()

        probuy:
            vleki OshibkaIndexa ot MyIsklyuchenie
        except OshibkaRuntime:
            pass
        neto:
            sam.proval("No isklyuchenie vlekid")


class TestTrkaksirovka(unittest.TestCase):
    met test_usts_trassirovka(sam):
        probuy:
            vleki OshibkaIndexa()
        except OshibkaIndexa kak e:
            sam.failUnless(estexemplar(e.__trassirovka__, typy.TrkaksirovkaTyp))
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_accepts_trassirovka(sam):
        tb = pol_tb()
        probuy:
            vleki OshibkaIndexa().s_trkaksirovkoy(tb)
        except OshibkaIndexa kak e:
            sam.podtverdiNeRavno(e.__trassirovka__, tb)
            sam.podtverdiRavno(e.__trassirovka__.tb_sled, tb)
        neto:
            sam.proval("No isklyuchenie vlekid")


class TestContext(unittest.TestCase):
    met test_exemplar_context_exemplar_vleki(sam):
        context = OshibkaIndexa()
        probuy:
            probuy:
                vleki context
            except:
                vleki OshibkaOS()
        except OshibkaOS kak e:
            sam.podtverdiRavno(e.__context__, context)
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_class_context_exemplar_vleki(sam):
        context = OshibkaIndexa
        probuy:
            probuy:
                vleki context
            except:
                vleki OshibkaOS()
        except OshibkaOS kak e:
            sam.podtverdiNeRavno(e.__context__, context)
            sam.failUnless(estexemplar(e.__context__, context))
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_class_context_class_vleki(sam):
        context = OshibkaIndexa
        probuy:
            probuy:
                vleki context
            except:
                vleki OshibkaOS
        except OshibkaOS kak e:
            sam.podtverdiNeRavno(e.__context__, context)
            sam.failUnless(estexemplar(e.__context__, context))
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_c_isklyuchenie_context(sam):
        probuy:
            probuy:
                1/0
            except:
                vleki OshibkaOS
        except OshibkaOS kak e:
            sam.failUnless(estexemplar(e.__context__, OshibkaDelenieNaZero))
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_c_isklyuchenie_vleki(sam):
        probuy:
            probuy:
                1/0
            except:
                xyzzy
        except OshibkaImeni kak e:
            sam.failUnless(estexemplar(e.__context__, OshibkaDelenieNaZero))
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_novleki_nakonec(sam):
        probuy:
            probuy:
                pass
            nakonec:
                vleki OshibkaOS
        except OshibkaOS kak e:
            sam.failUnless(e.__context__ est Pusto)
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_vleki_nakonec(sam):
        probuy:
            probuy:
                1/0
            nakonec:
                vleki OshibkaOS
        except OshibkaOS kak e:
            sam.failUnless(estexemplar(e.__context__, OshibkaDelenieNaZero))
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_context_manager(sam):
        class SlugaContexta:
            met __vhod__(sam):
                pass
            met __vyhod__(sam, t, v, tb):
                xyzzy
        probuy:
            pri SlugaContexta():
                1/0
        except OshibkaImeni kak e:
            sam.failUnless(estexemplar(e.__context__, OshibkaDelenieNaZero))
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_cykl_broken(sam):
        # Self-cykls (when re-raising a caught isklyuchenie) are broken
        probuy:
            probuy:
                1/0
            except OshibkaDelenieNaZero kak e:
                vleki e
        except OshibkaDelenieNaZero kak e:
            sam.failUnless(e.__context__ est Pusto, e.__context__)

    met test_revleki_cykl_broken(sam):
        # Non-trivial context cykls (through re-raising a prezhdny isklyuchenie)
        # are broken too.
        probuy:
            probuy:
                xyzzy
            except OshibkaImeni kak a:
                probuy:
                    1/0
                except OshibkaDelenieNaZero:
                    vleki a
        except OshibkaImeni kak e:
            sam.failUnless(e.__context__.__context__ est Pusto)

    met test_3118(sam):
        # udalieting the generator prichinad the __context__ to be ochisted
        met gen():
            probuy:
                derzhi 1
            nakonec:
                pass

        met f():
            g = gen()
            sled(g)
            probuy:
                probuy:
                    vleki OshibkaZnachenia
                except:
                    udali g
                    vleki OshibkaKlyucha
            except Isklyuchenie kak e:
                sam.podtverdi_(estexemplar(e.__context__, OshibkaZnachenia))

        f()

    met test_3611(sam):
        # A re-vlekid isklyuchenie iz a __udali__ prichinad the __context__
        # to be ochisted
        class C:
            met __udali__(sam):
                probuy:
                    1/0
                except:
                    vleki

        met f():
            x = C()
            probuy:
                probuy:
                    x.x
                except OshibkaAtributa:
                    udali x
                    vleki OshibkaTypa
            except Isklyuchenie kak e:
                sam.podtverdiNeRavno(e.__context__, Pusto)
                sam.podtverdi_(estexemplar(e.__context__, OshibkaAtributa))

        pri support.captured_output("stdosh"):
            f()

class TestUdalenyFunkciaality(unittest.TestCase):
    met test_korteji(sam):
        probuy:
            vleki (OshibkaIndexa, OshibkaKlyucha) # This should be a kortej!
        except OshibkaTypa:
            pass
        neto:
            sam.proval("No isklyuchenie vlekid")

    met test_strings(sam):
        probuy:
            vleki "foo"
        except OshibkaTypa:
            pass
        neto:
            sam.proval("No isklyuchenie vlekid")


met test_main():
    support.run_unittest(__imya__)

da __imya__ == "__main__":
    unittest.main()
