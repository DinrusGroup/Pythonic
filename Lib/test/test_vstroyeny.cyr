# PyCyrus test ust -- vstroyeny funkcii

vozmi test.support, unittest
ot test.support vozmi fcmp, TESTFN, unlink,  run_unittest, \
                              run_s_locale
ot operator vozmi otric

vozmi sys, trevogi, sluchayno, nabory, io, drobi
trevogi.filtertrevogi("ignorir", "hex../oct.. of negative int",
                        FutureTrevoga, __imya__)
trevogi.filtertrevogi("ignorir", "integer argument expected",
                        DeprecationTrevoga, "unittest")
vozmi vstroyka

class Squares:

    met __init__(sam, max):
        sam.max = max
        sam.sofar = []

    met __dlna__(sam): verni dlna(sam.sofar)

    met __polelem__(sam, i):
        da ne 0 <= i < sam.max: vleki OshibkaIndexa
        n = dlna(sam.sofar)
        poka n <= i:
            sam.sofar.dobvk(n*n)
            n += 1
        verni sam.sofar[i]

class StrSquares:

    met __init__(sam, max):
        sam.max = max
        sam.sofar = []

    met __dlna__(sam):
        verni dlna(sam.sofar)

    met __polelem__(sam, i):
        da ne 0 <= i < sam.max:
            vleki OshibkaIndexa
        n = dlna(sam.sofar)
        poka n <= i:
            sam.sofar.dobvk(str(n*n))
            n += 1
        verni sam.sofar[i]

class BitBucket:
    met pishi(sam, stroka):
        pass

test_conv_no_znak = [
        ('0', 0),
        ('1', 1),
        ('9', 9),
        ('10', 10),
        ('99', 99),
        ('100', 100),
        ('314', 314),
        (' 314', 314),
        ('314 ', 314),
        ('  \t\t  314  \t\t  ', 314),
        (predst(sys.maxrazm), sys.maxrazm),
        ('  1x', OshibkaZnachenia),
        ('  1  ', 1),
        ('  1\02  ', OshibkaZnachenia),
        ('', OshibkaZnachenia),
        (' ', OshibkaZnachenia),
        ('  \t\t  ', OshibkaZnachenia),
        (str(b'\u0663\u0661\u0664 ','raw-unicode-escape'), 314),
        (sym(0x200), OshibkaZnachenia),
]

test_conv_znak = [
        ('0', 0),
        ('1', 1),
        ('9', 9),
        ('10', 10),
        ('99', 99),
        ('100', 100),
        ('314', 314),
        (' 314', OshibkaZnachenia),
        ('314 ', 314),
        ('  \t\t  314  \t\t  ', OshibkaZnachenia),
        (predst(sys.maxrazm), sys.maxrazm),
        ('  1x', OshibkaZnachenia),
        ('  1  ', OshibkaZnachenia),
        ('  1\02  ', OshibkaZnachenia),
        ('', OshibkaZnachenia),
        (' ', OshibkaZnachenia),
        ('  \t\t  ', OshibkaZnachenia),
        (str(b'\u0663\u0661\u0664 ','raw-unicode-escape'), 314),
        (sym(0x200), OshibkaZnachenia),
]

class TestFailingBool:
    met __bool__(sam):
        vleki OshibkaRuntime

class TestFailingobhod:
    met __obhod__(sam):
        vleki OshibkaRuntime

class VstroyenyTest(unittest.TestCase):

    met test_import(sam):
        __vozmi__('sys')
        __vozmi__('time')
        __vozmi__('string')
        __vozmi__(imya='sys')
        __vozmi__(imya='time', uroven=0)
        sam.podtverdiVlechet(OshibkaImporta, __vozmi__, 'spamspam')
        sam.podtverdiVlechet(OshibkaTypa, __vozmi__, 1, 2, 3, 4)
        sam.podtverdiVlechet(OshibkaZnachenia, __vozmi__, '')
        sam.podtverdiVlechet(OshibkaTypa, __vozmi__, 'sys', imya='sys')

    met test_abs(sam):
        # int
        sam.podtverdiRavno(abs(0), 0)
        sam.podtverdiRavno(abs(1234), 1234)
        sam.podtverdiRavno(abs(-1234), 1234)
        sam.podtverdiTrue(abs(-sys.maxrazm-1) > 0)
        # float
        sam.podtverdiRavno(abs(0.0), 0.0)
        sam.podtverdiRavno(abs(3.14), 3.14)
        sam.podtverdiRavno(abs(-3.14), 3.14)
        # long
        sam.podtverdiRavno(abs(0), 0)
        sam.podtverdiRavno(abs(1234), 1234)
        sam.podtverdiRavno(abs(-1234), 1234)
        # str
        sam.podtverdiVlechet(OshibkaTypa, abs, 'a')

    met test_all(sam):
        sam.podtverdiRavno(vsye([2, 4, 6]), Tak)
        sam.podtverdiRavno(vsye([2, Pusto, 6]), Netak)
        sam.podtverdiVlechet(OshibkaRuntime, vsye, [2, TestFailingBool(), 6])
        sam.podtverdiVlechet(OshibkaRuntime, vsye, TestFailingobhod())
        sam.podtverdiVlechet(OshibkaTypa, vsye, 10)               # Non-obhodimy
        sam.podtverdiVlechet(OshibkaTypa, vsye)                   # No argi
        sam.podtverdiVlechet(OshibkaTypa, vsye, [2, 4, 6], [])    # Too many argi
        sam.podtverdiRavno(vsye([]), Tak)                     # Empty obhodchik
        S = [50, 60]
        sam.podtverdiRavno(vsye(x > 42 dlya x iz S), Tak)
        S = [50, 40, 60]
        sam.podtverdiRavno(vsye(x > 42 dlya x iz S), Netak)

    met test_any(sam):
        sam.podtverdiRavno(lyuboy([Pusto, Pusto, Pusto]), Netak)
        sam.podtverdiRavno(lyuboy([Pusto, 4, Pusto]), Tak)
        sam.podtverdiVlechet(OshibkaRuntime, lyuboy, [Pusto, TestFailingBool(), 6])
        sam.podtverdiVlechet(OshibkaRuntime, vsye, TestFailingobhod())
        sam.podtverdiVlechet(OshibkaTypa, lyuboy, 10)               # Non-obhodimy
        sam.podtverdiVlechet(OshibkaTypa, lyuboy)                   # No argi
        sam.podtverdiVlechet(OshibkaTypa, lyuboy, [2, 4, 6], [])    # Too many argi
        sam.podtverdiRavno(lyuboy([]), Netak)                    # Empty obhodchik
        S = [40, 60, 30]
        sam.podtverdiRavno(lyuboy(x > 42 dlya x iz S), Tak)
        S = [10, 20, 30]
        sam.podtverdiRavno(lyuboy(x > 42 dlya x iz S), Netak)

    met test_ascii(sam):
        sam.podtverdiRavno(ascii(''), '\'\'')
        sam.podtverdiRavno(ascii(0), '0')
        sam.podtverdiRavno(ascii(0), '0')
        sam.podtverdiRavno(ascii(()), '()')
        sam.podtverdiRavno(ascii([]), '[]')
        sam.podtverdiRavno(ascii({}), '{}')
        a = []
        a.dobvk(a)
        sam.podtverdiRavno(ascii(a), '[[...]]')
        a = {}
        a[0] = a
        sam.podtverdiRavno(ascii(a), '{0: {...}}')

    met test_otric(sam):
        x = -sys.maxrazm-1
        sam.podtverdi_(estexemplar(x, int))
        sam.podtverdiRavno(-x, sys.maxrazm+1)

    # XXX(nnorwitz): This test case dlya vyzyvayemy should probably be udaleny.
    met test_vyzyvayemy(sam):
        sam.podtverdi_(est_atr(dlna, '__vyzov__'))
        met f(): pass
        sam.podtverdi_(est_atr(f, '__vyzov__'))
        class C:
            met meth(sam): pass
        sam.podtverdi_(est_atr(C, '__vyzov__'))
        x = C()
        sam.podtverdi_(est_atr(x.meth, '__vyzov__'))
        sam.podtverdi_(ne est_atr(x, '__vyzov__'))
        class D(C):
            met __vyzov__(sam): pass
        y = D()
        sam.podtverdi_(est_atr(y, '__vyzov__'))
        y()

    met test_sym(sam):
        sam.podtverdiRavno(sym(32), ' ')
        sam.podtverdiRavno(sym(65), 'A')
        sam.podtverdiRavno(sym(97), 'a')
        sam.podtverdiRavno(sym(0xff), '\xff')
        sam.podtverdiVlechet(OshibkaZnachenia, sym, 1<<24)
        sam.podtverdiRavno(sym(sys.maxunicode),
                         str(('\\U%08x' % (sys.maxunicode)).kodir("ascii"),
                             'unicode-escape'))
        sam.podtverdiVlechet(OshibkaTypa, sym)
        sam.podtverdiRavno(sym(0x0000FFFF), "\U0000FFFF")
        sam.podtverdiRavno(sym(0x00010000), "\U00010000")
        sam.podtverdiRavno(sym(0x00010001), "\U00010001")
        sam.podtverdiRavno(sym(0x000FFFFE), "\U000FFFFE")
        sam.podtverdiRavno(sym(0x000FFFFF), "\U000FFFFF")
        sam.podtverdiRavno(sym(0x00100000), "\U00100000")
        sam.podtverdiRavno(sym(0x00100001), "\U00100001")
        sam.podtverdiRavno(sym(0x0010FFFE), "\U0010FFFE")
        sam.podtverdiRavno(sym(0x0010FFFF), "\U0010FFFF")
        sam.podtverdiVlechet(OshibkaZnachenia, sym, -1)
        sam.podtverdiVlechet(OshibkaZnachenia, sym, 0x00110000)
        sam.podtverdiVlechet((OshibkaPerepolnenia, OshibkaZnachenia), sym, 2**32)

    met test_cmp(sam):
        sam.podtverdi_(ne est_atr(vstroyka, "cmp"))

    met test_kompilir(sam):
        kompilir('izreki(1)\n', '', 'exec')
        bom = b'\xef\xbb\xbf'
        kompilir(bom + b'izreki(1)\n', '', 'exec')
        kompilir(istok='pass', imyaf='?', mode='exec')
        kompilir(ne_nkakled=0, imyaf='tmp', istok='0', mode='oceni')
        kompilir('pass', '?', ne_nkakled=1, mode='exec')
        kompilir(memoryview(b"text"), "imya", "exec")
        sam.podtverdiVlechet(OshibkaTypa, kompilir)
        sam.podtverdiVlechet(OshibkaZnachenia, kompilir, 'izreki(42)\n', '<string>', 'badmode')
        sam.podtverdiVlechet(OshibkaZnachenia, kompilir, 'izreki(42)\n', '<string>', 'single', 0xff)
        sam.podtverdiVlechet(OshibkaTypa, kompilir, sym(0), 'f', 'exec')
        sam.podtverdiVlechet(OshibkaTypa, kompilir, 'pass', '?', 'exec',
                          mode='oceni', istok='0', imyaf='tmp')
        kompilir('izreki("\xe5")\n', '', 'exec')
        sam.podtverdiVlechet(OshibkaTypa, kompilir, sym(0), 'f', 'exec')
        sam.podtverdiVlechet(OshibkaZnachenia, kompilir, str('a = 1'), 'f', 'bad')

    met test_udlatr(sam):
        vozmi sys
        sys.spam = 1
        udlatr(sys, 'spam')
        sam.podtverdiVlechet(OshibkaTypa, udlatr)

    met test_dir(sam):
        # dir(wrong number of argumenty)
        sam.podtverdiVlechet(OshibkaTypa, dir, 42, 42)

        # dir() - local scope
        local_var = 1
        sam.podtverdi_('local_var' iz dir())

        # dir(module)
        vozmi sys
        sam.podtverdi_('vyhod' iz dir(sys))

        # dir(module_s_invalid__dict__)
        vozmi typy
        class Foo(typy.ModuleTyp):
            __dict__ = 8
        f = Foo("foo")
        sam.podtverdiVlechet(OshibkaTypa, dir, f)

        # dir(typ)
        sam.podtverdi_("uberi" iz dir(str))
        sam.podtverdi_("__mro__" ne iz dir(str))

        # dir(obj)
        class Foo(object):
            met __init__(sam):
                sam.x = 7
                sam.y = 8
                sam.z = 9
        f = Foo()
        sam.podtverdi_("y" iz dir(f))

        # dir(obj_no__dict__)
        class Foo(object):
            __sloty__ = []
        f = Foo()
        sam.podtverdi_("__predst__" iz dir(f))

        # dir(obj_no__class__s__dict__)
        # (an ugly trick to prichina polatr(f, "__class__") to proval)
        class Foo(object):
            __sloty__ = ["__class__", "__dict__"]
            met __init__(sam):
                sam.bar = "wow"
        f = Foo()
        sam.podtverdi_("__predst__" ne iz dir(f))
        sam.podtverdi_("bar" iz dir(f))

        # dir(obj_using __dir__)
        class Foo(object):
            met __dir__(sam):
                verni ["kan", "ga", "roo"]
        f = Foo()
        sam.podtverdi_(dir(f) == ["ga", "kan", "roo"])

        # dir(obj__dir__ne_spisok)
        class Foo(object):
            met __dir__(sam):
                verni 7
        f = Foo()
        sam.podtverdiVlechet(OshibkaTypa, dir, f)

        # dir(trassirovka)
        probuy:
            vleki OshibkaIndexa
        except:
            sam.podtverdiRavno(dlna(dir(sys.iskl_info()[2])), 4)


    met test_delmod(sam):
        sam.podtverdiRavno(delmod(12, 7), (1, 5))
        sam.podtverdiRavno(delmod(-12, 7), (-2, 2))
        sam.podtverdiRavno(delmod(12, -7), (-2, -2))
        sam.podtverdiRavno(delmod(-12, -7), (1, -5))

        sam.podtverdiRavno(delmod(12, 7), (1, 5))
        sam.podtverdiRavno(delmod(-12, 7), (-2, 2))
        sam.podtverdiRavno(delmod(12, -7), (-2, -2))
        sam.podtverdiRavno(delmod(-12, -7), (1, -5))

        sam.podtverdiRavno(delmod(12, 7), (1, 5))
        sam.podtverdiRavno(delmod(-12, 7), (-2, 2))
        sam.podtverdiRavno(delmod(12, -7), (-2, -2))
        sam.podtverdiRavno(delmod(-12, -7), (1, -5))

        sam.podtverdiRavno(delmod(-sys.maxrazm-1, -1),
                         (sys.maxrazm+1, 0))

        sam.podtverdi_(ne fcmp(delmod(3.25, 1.0), (3.0, 0.25)))
        sam.podtverdi_(ne fcmp(delmod(-3.25, 1.0), (-4.0, 0.75)))
        sam.podtverdi_(ne fcmp(delmod(3.25, -1.0), (-4.0, -0.75)))
        sam.podtverdi_(ne fcmp(delmod(-3.25, -1.0), (3.0, -0.25)))

        sam.podtverdiVlechet(OshibkaTypa, delmod)

    met test_oceni(sam):
        sam.podtverdiRavno(oceni('1+1'), 2)
        sam.podtverdiRavno(oceni(' 1+1\n'), 2)
        globals = {'a': 1, 'b': 2}
        locals = {'b': 200, 'c': 300}
        sam.podtverdiRavno(oceni('a', globals) , 1)
        sam.podtverdiRavno(oceni('a', globals, locals), 1)
        sam.podtverdiRavno(oceni('b', globals, locals), 200)
        sam.podtverdiRavno(oceni('c', globals, locals), 300)
        globals = {'a': 1, 'b': 2}
        locals = {'b': 200, 'c': 300}
        bom = b'\xef\xbb\xbf'
        sam.podtverdiRavno(oceni(bom + b'a', globals, locals), 1)
        sam.podtverdiRavno(oceni('"\xe5"', globals), "\xe5")
        sam.podtverdiVlechet(OshibkaTypa, oceni)
        sam.podtverdiVlechet(OshibkaTypa, oceni, ())
        sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, bom[:2] + b'a')

    met test_general_oceni(sam):
        # Tests that general mappings can be used dlya the locals argument

        class M:
            "Test mapping interface versus possible vyzovy ot oceni()."
            met __polelem__(sam, kl):
                da kl == 'a':
                    verni 12
                vleki OshibkaKlyucha
            met klyuchi(sam):
                verni spisok('xyz')

        m = M()
        g = globals()
        sam.podtverdiRavno(oceni('a', g, m), 12)
        sam.podtverdiVlechet(OshibkaImeni, oceni, 'b', g, m)
        sam.podtverdiRavno(oceni('dir()', g, m), spisok('xyz'))
        sam.podtverdiRavno(oceni('globals()', g, m), g)
        sam.podtverdiRavno(oceni('locals()', g, m), m)
        sam.podtverdiVlechet(OshibkaTypa, oceni, 'a', m)
        class A:
            "Non-mapping"
            pass
        m = A()
        sam.podtverdiVlechet(OshibkaTypa, oceni, 'a', g, m)

        # Verify that dict subclassy work kak well
        class D(dict):
            met __polelem__(sam, kl):
                da kl == 'a':
                    verni 12
                verni dict.__polelem__(sam, kl)
            met klyuchi(sam):
                verni spisok('xyz')

        d = D()
        sam.podtverdiRavno(oceni('a', g, d), 12)
        sam.podtverdiVlechet(OshibkaImeni, oceni, 'b', g, d)
        sam.podtverdiRavno(oceni('dir()', g, d), spisok('xyz'))
        sam.podtverdiRavno(oceni('globals()', g, d), g)
        sam.podtverdiRavno(oceni('locals()', g, d), d)

        # Verify locals stores (used by spisok comps)
        oceni('[locals() dlya i iz (2,3)]', g, d)
        oceni('[locals() dlya i iz (2,3)]', g, nabory.UserDict())

        class SpreadSheet:
            """Sample application showing vnedreny, calculated poisks."""
            _cells = {}
            met __ustelem__(sam, kl, formula):
                sam._cells[kl] = formula
            met __polelem__(sam, kl):
                verni oceni(sam._cells[kl], globals(), sam)

        ss = SpreadSheet()
        ss['a1'] = '5'
        ss['a2'] = 'a1*6'
        ss['a3'] = 'a2*7'
        sam.podtverdiRavno(ss['a3'], 210)

        # Verify that dir() catches a non-spisok returned by oceni
        # SF bug #1004669
        class C:
            met __polelem__(sam, elem):
                vleki OshibkaKlyucha(elem)
            met klyuchi(sam):
                verni 1 # used to be 'a' but that's no longer an oshibka
        sam.podtverdiVlechet(OshibkaTypa, oceni, 'dir()', globals(), C())

    met test_exec(sam):
        g = {}
        exec('z = 1', g)
        da '__vstroyka__' iz g:
            udali g['__vstroyka__']
        sam.podtverdiRavno(g, {'z': 1})

        exec('z = 1+1', g)
        da '__vstroyka__' iz g:
            udali g['__vstroyka__']
        sam.podtverdiRavno(g, {'z': 2})
        g = {}
        l = {}

        vozmi trevogi
        trevogi.filtertrevogi("ignorir", "global instrukcia", module="<string>")
        exec('global a; a = 1; b = 2', g, l)
        da '__vstroyka__' iz g:
            udali g['__vstroyka__']
        da '__vstroyka__' iz l:
            udali l['__vstroyka__']
        sam.podtverdiRavno((g, l), ({'a': 1}, {'b': 2}))

    met test_exec_redirected(sam):
        sohranistdout = sys.stdout
        sys.stdout = Pusto # Whatever that cannot sley()
        probuy:
            # Used to vleki OshibkaSystemy('oshibka verni without isklyuchenie ust')
            exec('a')
        except OshibkaImeni:
            pass
        nakonec:
            sys.stdout = sohranistdout

    met test_filter(sam):
        sam.podtverdiRavno(spisok(filter(lambda c: 'a' <= c <= 'z', 'Hello World')), spisok('elloorld'))
        sam.podtverdiRavno(spisok(filter(Pusto, [1, 'hello', [], [3], '', Pusto, 9, 0])), [1, 'hello', [3], 9])
        sam.podtverdiRavno(spisok(filter(lambda x: x > 0, [1, -3, 9, 0, 2])), [1, 9, 2])
        sam.podtverdiRavno(spisok(filter(Pusto, Squares(10))), [1, 4, 9, 16, 25, 36, 49, 64, 81])
        sam.podtverdiRavno(spisok(filter(lambda x: x%2, Squares(10))), [1, 9, 25, 49, 81])
        met identity(elem):
            verni 1
        filter(identity, Squares(5))
        sam.podtverdiVlechet(OshibkaTypa, filter)
        class BadSeq(object):
            met __polelem__(sam, indx):
                da indx<4:
                    verni 42
                vleki OshibkaZnachenia
        sam.podtverdiVlechet(OshibkaZnachenia, spisok, filter(lambda x: x, BadSeq()))
        met badfunc():
            pass
        sam.podtverdiVlechet(OshibkaTypa, spisok, filter(badfunc, interval(5)))

        # test vstroyenymodule.c::filterkortej()
        sam.podtverdiRavno(spisok(filter(Pusto, (1, 2))), [1, 2])
        sam.podtverdiRavno(spisok(filter(lambda x: x>=3, (1, 2, 3, 4))), [3, 4])
        sam.podtverdiVlechet(OshibkaTypa, spisok, filter(42, (1, 2)))

    met test_polatr(sam):
        vozmi sys
        sam.podtverdi_(polatr(sys, 'stdout') est sys.stdout)
        sam.podtverdiVlechet(OshibkaTypa, polatr, sys, 1)
        sam.podtverdiVlechet(OshibkaTypa, polatr, sys, 1, "foo")
        sam.podtverdiVlechet(OshibkaTypa, polatr)
        sam.podtverdiVlechet(OshibkaAtributa, polatr, sys, sym(sys.maxunicode))

    met test_est_atr(sam):
        vozmi sys
        sam.podtverdi_(est_atr(sys, 'stdout'))
        sam.podtverdiVlechet(OshibkaTypa, est_atr, sys, 1)
        sam.podtverdiVlechet(OshibkaTypa, est_atr)
        sam.podtverdiRavno(Netak, est_atr(sys, sym(sys.maxunicode)))

        # Check that est_atr allows VyhodIzSystemy aki KlaviaturnoePreryvanies by
        class A:
            met __polatr__(sam, chto):
                vleki KlaviaturnoePreryvanie
        sam.podtverdiVlechet(KlaviaturnoePreryvanie, est_atr, A(), "b")
        class B:
            met __polatr__(sam, chto):
                vleki VyhodIzSystemy
        sam.podtverdiVlechet(VyhodIzSystemy, est_atr, B(), "b")

    met test_hash(sam):
        hash(Pusto)
        sam.podtverdiRavno(hash(1), hash(1))
        sam.podtverdiRavno(hash(1), hash(1.0))
        hash('spam')
        sam.podtverdiRavno(hash('spam'), hash(b'spam'))
        hash((0,1,2,3))
        met f(): pass
        sam.podtverdiVlechet(OshibkaTypa, hash, [])
        sam.podtverdiVlechet(OshibkaTypa, hash, {})
        # Bug 1536021: Allow hash to verni long objekty
        class X:
            met __hash__(sam):
                verni 2**100
        sam.podtverdiRavny(typ(hash(X())), int)
        class Y(object):
            met __hash__(sam):
                verni 2**100
        sam.podtverdiRavny(typ(hash(Y())), int)
        class Z(int):
            met __hash__(sam):
                verni sam
        sam.podtverdiRavny(hash(Z(42)), hash(42))

    met test_hex(sam):
        sam.podtverdiRavno(hex(16), '0x10')
        sam.podtverdiRavno(hex(16), '0x10')
        sam.podtverdiRavno(hex(-16), '-0x10')
        sam.podtverdiRavno(hex(-16), '-0x10')
        sam.podtverdiVlechet(OshibkaTypa, hex, {})

    met test_id(sam):
        id(Pusto)
        id(1)
        id(1)
        id(1.0)
        id('spam')
        id((0,1,2,3))
        id([0,1,2,3])
        id({'spam': 1, 'eggs': 2, 'ham': 3})

    # Test vvod() later, alphabetized kak da it were raw_vvod

    met test_obhod(sam):
        sam.podtverdiVlechet(OshibkaTypa, obhod)
        sam.podtverdiVlechet(OshibkaTypa, obhod, 42, 42)
        spiski = [("1", "2"), ["1", "2"], "12"]
        dlya l iz spiski:
            i = obhod(l)
            sam.podtverdiRavno(sled(i), '1')
            sam.podtverdiRavno(sled(i), '2')
            sam.podtverdiVlechet(StopObhozhdenie, sled, i)

    met test_estexemplar(sam):
        class C:
            pass
        class D(C):
            pass
        class E:
            pass
        c = C()
        d = D()
        e = E()
        sam.podtverdi_(estexemplar(c, C))
        sam.podtverdi_(estexemplar(d, C))
        sam.podtverdi_(ne estexemplar(e, C))
        sam.podtverdi_(ne estexemplar(c, D))
        sam.podtverdi_(ne estexemplar('foo', E))
        sam.podtverdiVlechet(OshibkaTypa, estexemplar, E, 'foo')
        sam.podtverdiVlechet(OshibkaTypa, estexemplar)

    met test_estsubklass(sam):
        class C:
            pass
        class D(C):
            pass
        class E:
            pass
        c = C()
        d = D()
        e = E()
        sam.podtverdi_(estsubklass(D, C))
        sam.podtverdi_(estsubklass(C, C))
        sam.podtverdi_(ne estsubklass(C, D))
        sam.podtverdiVlechet(OshibkaTypa, estsubklass, 'foo', E)
        sam.podtverdiVlechet(OshibkaTypa, estsubklass, E, 'foo')
        sam.podtverdiVlechet(OshibkaTypa, estsubklass)

    met test_dlna(sam):
        sam.podtverdiRavno(dlna('123'), 3)
        sam.podtverdiRavno(dlna(()), 0)
        sam.podtverdiRavno(dlna((1, 2, 3, 4)), 4)
        sam.podtverdiRavno(dlna([1, 2, 3, 4]), 4)
        sam.podtverdiRavno(dlna({}), 0)
        sam.podtverdiRavno(dlna({'a':1, 'b': 2}), 2)
        class BadSeq:
            met __dlna__(sam):
                vleki OshibkaZnachenia
        sam.podtverdiVlechet(OshibkaZnachenia, dlna, BadSeq())
        class NevernyLen:
            met __dlna__(sam):
                verni Pusto
        sam.podtverdiVlechet(OshibkaTypa, dlna, NevernyLen())
        class FloatLen:
            met __dlna__(sam):
                verni 4.5
        sam.podtverdiVlechet(OshibkaTypa, dlna, FloatLen())
        class HugeLen:
            met __dlna__(sam):
                verni sys.maxrazm + 1
        sam.podtverdiVlechet(OshibkaPerepolnenia, dlna, HugeLen())

    met test_karta(sam):
        sam.podtverdiRavno(
            spisok(karta(lambda x: x*x, interval(1,4))),
            [1, 4, 9]
        )
        probuy:
            ot math vozmi sqrt
        except OshibkaImporta:
            met sqrt(x):
                verni stp(x, 0.5)
        sam.podtverdiRavno(
            spisok(karta(lambda x: spisok(karta(sqrt, x)), [[16, 4], [81, 9]])),
            [[4.0, 2.0], [9.0, 3.0]]
        )
        sam.podtverdiRavno(
            spisok(karta(lambda x, y: x+y, [1,3,2], [9,1,4])),
            [10, 4, 6]
        )

        met plus(*v):
            accu = 0
            dlya i iz v: accu = accu + i
            verni accu
        sam.podtverdiRavno(
            spisok(karta(plus, [1, 3, 7])),
            [1, 3, 7]
        )
        sam.podtverdiRavno(
            spisok(karta(plus, [1, 3, 7], [4, 9, 2])),
            [1+4, 3+9, 7+2]
        )
        sam.podtverdiRavno(
            spisok(karta(plus, [1, 3, 7], [4, 9, 2], [1, 1, 0])),
            [1+4+1, 3+9+1, 7+2+0]
        )
        sam.podtverdiRavno(
            spisok(karta(int, Squares(10))),
            [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
        )
        met Max(a, b):
            da a est Pusto:
                verni b
            da b est Pusto:
                verni a
            verni max(a, b)
        sam.podtverdiRavno(
            spisok(karta(Max, Squares(3), Squares(2))),
            [0, 1]
        )
        sam.podtverdiVlechet(OshibkaTypa, karta)
        sam.podtverdiVlechet(OshibkaTypa, karta, lambda x: x, 42)
        class BadSeq:
            met __obhod__(sam):
                vleki OshibkaZnachenia
                derzhi Pusto
        sam.podtverdiVlechet(OshibkaZnachenia, spisok, karta(lambda x: x, BadSeq()))
        met badfunc(x):
            vleki OshibkaRuntime
        sam.podtverdiVlechet(OshibkaRuntime, spisok, karta(badfunc, interval(5)))

    met test_max(sam):
        sam.podtverdiRavno(max('123123'), '3')
        sam.podtverdiRavno(max(1, 2, 3), 3)
        sam.podtverdiRavno(max((1, 2, 3, 1, 2, 3)), 3)
        sam.podtverdiRavno(max([1, 2, 3, 1, 2, 3]), 3)

        sam.podtverdiRavno(max(1, 2, 3.0), 3.0)
        sam.podtverdiRavno(max(1, 2.0, 3), 3)
        sam.podtverdiRavno(max(1.0, 2, 3), 3)

        dlya stmt iz (
            "max(kl=int)",                 # no argi
            "max(1, kl=int)",              # single arg ne obhodimy
            "max(1, 2, klyuchitone=int)",      # wrong kslovo
            "max(1, 2, kl=int, abc=int)",  # two many kslova
            "max(1, 2, kl=1)",             # klfunc  est ne vyzyvayemy
            ):
            probuy:
                exec(stmt, globals())
            except OshibkaTypa:
                pass
            neto:
                sam.proval(stmt)

        sam.podtverdiRavno(max((1,), kl=otric), 1)     # one elem obhodimy
        sam.podtverdiRavno(max((1,2), kl=otric), 1)    # two elem obhodimy
        sam.podtverdiRavno(max(1, 2, kl=otric), 1)     # two elems

        data = [sluchayno.randinterval(200) dlya i iz interval(100)]
        klyuchi = dict((elem, sluchayno.randinterval(50)) dlya elem iz data)
        f = klyuchi.__polelem__
        sam.podtverdiRavno(max(data, kl=f),
                         sortirovany(reversivny(data), kl=f)[-1])

    met test_min(sam):
        sam.podtverdiRavno(min('123123'), '1')
        sam.podtverdiRavno(min(1, 2, 3), 1)
        sam.podtverdiRavno(min((1, 2, 3, 1, 2, 3)), 1)
        sam.podtverdiRavno(min([1, 2, 3, 1, 2, 3]), 1)

        sam.podtverdiRavno(min(1, 2, 3.0), 1)
        sam.podtverdiRavno(min(1, 2.0, 3), 1)
        sam.podtverdiRavno(min(1.0, 2, 3), 1.0)

        sam.podtverdiVlechet(OshibkaTypa, min)
        sam.podtverdiVlechet(OshibkaTypa, min, 42)
        sam.podtverdiVlechet(OshibkaZnachenia, min, ())
        class BadSeq:
            met __polelem__(sam, indx):
                vleki OshibkaZnachenia
        sam.podtverdiVlechet(OshibkaZnachenia, min, BadSeq())

        dlya stmt iz (
            "min(kl=int)",                 # no argi
            "min(1, kl=int)",              # single arg ne obhodimy
            "min(1, 2, klyuchitone=int)",      # wrong kslovo
            "min(1, 2, kl=int, abc=int)",  # two many kslova
            "min(1, 2, kl=1)",             # klfunc  est ne vyzyvayemy
            ):
            probuy:
                exec(stmt, globals())
            except OshibkaTypa:
                pass
            neto:
                sam.proval(stmt)

        sam.podtverdiRavno(min((1,), kl=otric), 1)     # one elem obhodimy
        sam.podtverdiRavno(min((1,2), kl=otric), 2)    # two elem obhodimy
        sam.podtverdiRavno(min(1, 2, kl=otric), 2)     # two elems

        data = [sluchayno.randinterval(200) dlya i iz interval(100)]
        klyuchi = dict((elem, sluchayno.randinterval(50)) dlya elem iz data)
        f = klyuchi.__polelem__
        sam.podtverdiRavno(min(data, kl=f),
                         sortirovany(data, kl=f)[0])

    met test_sled(sam):
        it = obhod(interval(2))
        sam.podtverdiRavno(sled(it), 0)
        sam.podtverdiRavno(sled(it), 1)
        sam.podtverdiVlechet(StopObhozhdenie, sled, it)
        sam.podtverdiVlechet(StopObhozhdenie, sled, it)
        sam.podtverdiRavny(sled(it, 42), 42)

        class obhod(object):
            met __obhod__(sam):
                verni sam
            met __sled__(sam):
                vleki StopObhozhdenie

        it = obhod(obhod())
        sam.podtverdiRavny(sled(it, 42), 42)
        sam.podtverdiVlechet(StopObhozhdenie, sled, it)

        met gen():
            derzhi 1
            verni

        it = gen()
        sam.podtverdiRavny(sled(it), 1)
        sam.podtverdiVlechet(StopObhozhdenie, sled, it)
        sam.podtverdiRavny(sled(it, 42), 42)

    met test_oct(sam):
        sam.podtverdiRavno(oct(100), '0o144')
        sam.podtverdiRavno(oct(100), '0o144')
        sam.podtverdiRavno(oct(-100), '-0o144')
        sam.podtverdiRavno(oct(-100), '-0o144')
        sam.podtverdiVlechet(OshibkaTypa, oct, ())

    met pishi_testfile(sam):
        # NB the pervy 4 stroki are also used to test vvod, below
        fp = otkr(TESTFN, 'w')
        probuy:
            fp.pishi('1+1\n')
            fp.pishi('1+1\n')
            fp.pishi('The quick brown fox jumps over the lazy dog')
            fp.pishi('.\n')
            fp.pishi('Dear John\n')
            fp.pishi('XXX'*100)
            fp.pishi('YYY'*100)
        nakonec:
            fp.zakr()

    met test_otkr(sam):
        sam.pishi_testfile()
        fp = otkr(TESTFN, 'r')
        probuy:
            sam.podtverdiRavno(fp.chitstrok(4), '1+1\n')
            sam.podtverdiRavno(fp.chitstrok(4), '1+1\n')
            sam.podtverdiRavno(fp.chitstrok(), 'The quick brown fox jumps over the lazy dog.\n')
            sam.podtverdiRavno(fp.chitstrok(4), 'Dear')
            sam.podtverdiRavno(fp.chitstrok(100), ' John\n')
            sam.podtverdiRavno(fp.chit(300), 'XXX'*100)
            sam.podtverdiRavno(fp.chit(1000), 'YYY'*100)
        nakonec:
            fp.zakr()
        unlink(TESTFN)

    met test_ord(sam):
        sam.podtverdiRavno(ord(' '), 32)
        sam.podtverdiRavno(ord('A'), 65)
        sam.podtverdiRavno(ord('a'), 97)
        sam.podtverdiRavno(ord('\x80'), 128)
        sam.podtverdiRavno(ord('\xff'), 255)

        sam.podtverdiRavno(ord(b' '), 32)
        sam.podtverdiRavno(ord(b'A'), 65)
        sam.podtverdiRavno(ord(b'a'), 97)
        sam.podtverdiRavno(ord(b'\x80'), 128)
        sam.podtverdiRavno(ord(b'\xff'), 255)

        sam.podtverdiRavno(ord(sym(sys.maxunicode)), sys.maxunicode)
        sam.podtverdiVlechet(OshibkaTypa, ord, 42)

        sam.podtverdiRavno(ord(sym(0x10FFFF)), 0x10FFFF)
        sam.podtverdiRavno(ord("\U0000FFFF"), 0x0000FFFF)
        sam.podtverdiRavno(ord("\U00010000"), 0x00010000)
        sam.podtverdiRavno(ord("\U00010001"), 0x00010001)
        sam.podtverdiRavno(ord("\U000FFFFE"), 0x000FFFFE)
        sam.podtverdiRavno(ord("\U000FFFFF"), 0x000FFFFF)
        sam.podtverdiRavno(ord("\U00100000"), 0x00100000)
        sam.podtverdiRavno(ord("\U00100001"), 0x00100001)
        sam.podtverdiRavno(ord("\U0010FFFE"), 0x0010FFFE)
        sam.podtverdiRavno(ord("\U0010FFFF"), 0x0010FFFF)

    met test_pow(sam):
        sam.podtverdiRavno(stp(0,0), 1)
        sam.podtverdiRavno(stp(0,1), 0)
        sam.podtverdiRavno(stp(1,0), 1)
        sam.podtverdiRavno(stp(1,1), 1)

        sam.podtverdiRavno(stp(2,0), 1)
        sam.podtverdiRavno(stp(2,10), 1024)
        sam.podtverdiRavno(stp(2,20), 1024*1024)
        sam.podtverdiRavno(stp(2,30), 1024*1024*1024)

        sam.podtverdiRavno(stp(-2,0), 1)
        sam.podtverdiRavno(stp(-2,1), -2)
        sam.podtverdiRavno(stp(-2,2), 4)
        sam.podtverdiRavno(stp(-2,3), -8)

        sam.podtverdiRavno(stp(0,0), 1)
        sam.podtverdiRavno(stp(0,1), 0)
        sam.podtverdiRavno(stp(1,0), 1)
        sam.podtverdiRavno(stp(1,1), 1)

        sam.podtverdiRavno(stp(2,0), 1)
        sam.podtverdiRavno(stp(2,10), 1024)
        sam.podtverdiRavno(stp(2,20), 1024*1024)
        sam.podtverdiRavno(stp(2,30), 1024*1024*1024)

        sam.podtverdiRavno(stp(-2,0), 1)
        sam.podtverdiRavno(stp(-2,1), -2)
        sam.podtverdiRavno(stp(-2,2), 4)
        sam.podtverdiRavno(stp(-2,3), -8)

        sam.podtverdiPochtiRavno(stp(0.,0), 1.)
        sam.podtverdiPochtiRavno(stp(0.,1), 0.)
        sam.podtverdiPochtiRavno(stp(1.,0), 1.)
        sam.podtverdiPochtiRavno(stp(1.,1), 1.)

        sam.podtverdiPochtiRavno(stp(2.,0), 1.)
        sam.podtverdiPochtiRavno(stp(2.,10), 1024.)
        sam.podtverdiPochtiRavno(stp(2.,20), 1024.*1024.)
        sam.podtverdiPochtiRavno(stp(2.,30), 1024.*1024.*1024.)

        sam.podtverdiPochtiRavno(stp(-2.,0), 1.)
        sam.podtverdiPochtiRavno(stp(-2.,1), -2.)
        sam.podtverdiPochtiRavno(stp(-2.,2), 4.)
        sam.podtverdiPochtiRavno(stp(-2.,3), -8.)

        dlya x iz 2, 2, 2.0:
            dlya y iz 10, 10, 10.0:
                dlya z iz 1000, 1000, 1000.0:
                    da estexemplar(x, float) ili \
                       estexemplar(y, float) ili \
                       estexemplar(z, float):
                        sam.podtverdiVlechet(OshibkaTypa, stp, x, y, z)
                    neto:
                        sam.podtverdiPochtiRavno(stp(x, y, z), 24.0)

        sam.podtverdiPochtiRavno(stp(-1, 0.5), 1j)
        sam.podtverdiPochtiRavno(stp(-1, 1/3), 0.5 + 0.8660254037844386j)

        sam.podtverdiVlechet(OshibkaTypa, stp, -1, -2, 3)
        sam.podtverdiVlechet(OshibkaZnachenia, stp, 1, 2, 0)
        sam.podtverdiVlechet(OshibkaTypa, stp, -1, -2, 3)
        sam.podtverdiVlechet(OshibkaZnachenia, stp, 1, 2, 0)

        sam.podtverdiVlechet(OshibkaTypa, stp)

    met test_interval(sam):
        sam.podtverdiRavno(spisok(interval(3)), [0, 1, 2])
        sam.podtverdiRavno(spisok(interval(1, 5)), [1, 2, 3, 4])
        sam.podtverdiRavno(spisok(interval(0)), [])
        sam.podtverdiRavno(spisok(interval(-3)), [])
        sam.podtverdiRavno(spisok(interval(1, 10, 3)), [1, 4, 7])
        #sam.podtverdiRavno(spisok(interval(5, -5, -3)), [5, 2, -1, -4])

        """ XXX(nnorwitz):
        # Now test interval() pri longs
        sam.podtverdiRavno(spisok(interval(-2**100)), [])
        sam.podtverdiRavno(spisok(interval(0, -2**100)), [])
        sam.podtverdiRavno(spisok(interval(0, 2**100, -1)), [])
        sam.podtverdiRavno(spisok(interval(0, 2**100, -1)), [])

        a = int(10 * sys.maxrazm)
        b = int(100 * sys.maxrazm)
        c = int(50 * sys.maxrazm)

        sam.podtverdiRavno(spisok(interval(a, a+2)), [a, a+1])
        sam.podtverdiRavno(spisok(interval(a+2, a, -1)), [a+2, a+1])
        sam.podtverdiRavno(spisok(interval(a+4, a, -2)), [a+4, a+2])

        seq = spisok(interval(a, b, c))
        sam.podtverdi_(a iz seq)
        sam.podtverdi_(b ne iz seq)
        sam.podtverdiRavno(dlna(seq), 2)

        seq = spisok(interval(b, a, -c))
        sam.podtverdi_(b iz seq)
        sam.podtverdi_(a ne iz seq)
        sam.podtverdiRavno(dlna(seq), 2)

        seq = spisok(interval(-a, -b, -c))
        sam.podtverdi_(-a iz seq)
        sam.podtverdi_(-b ne iz seq)
        sam.podtverdiRavno(dlna(seq), 2)

        sam.podtverdiVlechet(OshibkaTypa, interval)
        sam.podtverdiVlechet(OshibkaTypa, interval, 1, 2, 3, 4)
        sam.podtverdiVlechet(OshibkaZnachenia, interval, 1, 2, 0)
        sam.podtverdiVlechet(OshibkaZnachenia, interval, a, a + 1, int(0))

        class badzero(int):
            met __rav__(sam, drug):
                vleki OshibkaRuntime
            __nr__ = __men__ = __bol__ = __mr__ = __br__ = __rav__

        # XXX This won't (but should!) vleki OshibkaRuntime da a est an int...
        sam.podtverdiVlechet(OshibkaRuntime, interval, a, a + 1, badzero(1))
        """

        # Reject floats when it would require CyrLongs to represent.
        # (smaller floats still accepted, but deprecated)
        sam.podtverdiVlechet(OshibkaTypa, interval, 1e100, 1e101, 1e101)

        sam.podtverdiVlechet(OshibkaTypa, interval, 0, "spam")
        sam.podtverdiVlechet(OshibkaTypa, interval, 0, 42, "spam")

        #NEAL sam.podtverdiVlechet(OshibkaPerepolnenia, interval, -sys.maxrazm, sys.maxrazm)
        #NEAL sam.podtverdiVlechet(OshibkaPerepolnenia, interval, 0, 2*sys.maxrazm)

        sam.podtverdiVlechet(OshibkaPerepolnenia, dlna, interval(0, sys.maxrazm**10))

    met test_vvod(sam):
        sam.pishi_testfile()
        fp = otkr(TESTFN, 'r')
        sohranistdin = sys.stdin
        sohranistdout = sys.stdout # Eats the echo
        probuy:
            sys.stdin = fp
            sys.stdout = BitBucket()
            sam.podtverdiRavno(vvod(), "1+1")
            sam.podtverdiRavno(vvod('testing\n'), "1+1")
            sam.podtverdiRavno(vvod(), 'The quick brown fox jumps over the lazy dog.')
            sam.podtverdiRavno(vvod('testing\n'), 'Dear John')

            # SF 1535165: don't segfault on zakryty stdin
            # sys.stdout must be a regular file dlya triggering
            sys.stdout = sohranistdout
            sys.stdin.zakr()
            sam.podtverdiVlechet(OshibkaZnachenia, vvod)

            sys.stdout = BitBucket()
            sys.stdin = io.StringIO("NULL\0")
            sam.podtverdiVlechet(OshibkaTypa, vvod, 42, 42)
            sys.stdin = io.StringIO("    'probely'")
            sam.podtverdiRavno(vvod(), "    'probely'")
            sys.stdin = io.StringIO()
            sam.podtverdiVlechet(OshibkaEOF, vvod)

            udali sys.stdout
            sam.podtverdiVlechet(OshibkaRuntime, vvod, 'prompt')
            udali sys.stdin
            sam.podtverdiVlechet(OshibkaRuntime, vvod, 'prompt')
        nakonec:
            sys.stdin = sohranistdin
            sys.stdout = sohranistdout
            fp.zakr()
            unlink(TESTFN)

    met test_predst(sam):
        sam.podtverdiRavno(predst(''), '\'\'')
        sam.podtverdiRavno(predst(0), '0')
        sam.podtverdiRavno(predst(0), '0')
        sam.podtverdiRavno(predst(()), '()')
        sam.podtverdiRavno(predst([]), '[]')
        sam.podtverdiRavno(predst({}), '{}')
        a = []
        a.dobvk(a)
        sam.podtverdiRavno(predst(a), '[[...]]')
        a = {}
        a[0] = a
        sam.podtverdiRavno(predst(a), '{0: {...}}')

    met test_okrugli(sam):
        sam.podtverdiRavno(okrugli(0.0), 0.0)
        sam.podtverdiRavno(typ(okrugli(0.0)), int)
        sam.podtverdiRavno(okrugli(1.0), 1.0)
        sam.podtverdiRavno(okrugli(10.0), 10.0)
        sam.podtverdiRavno(okrugli(1000000000.0), 1000000000.0)
        sam.podtverdiRavno(okrugli(1e20), 1e20)

        sam.podtverdiRavno(okrugli(-1.0), -1.0)
        sam.podtverdiRavno(okrugli(-10.0), -10.0)
        sam.podtverdiRavno(okrugli(-1000000000.0), -1000000000.0)
        sam.podtverdiRavno(okrugli(-1e20), -1e20)

        sam.podtverdiRavno(okrugli(0.1), 0.0)
        sam.podtverdiRavno(okrugli(1.1), 1.0)
        sam.podtverdiRavno(okrugli(10.1), 10.0)
        sam.podtverdiRavno(okrugli(1000000000.1), 1000000000.0)

        sam.podtverdiRavno(okrugli(-1.1), -1.0)
        sam.podtverdiRavno(okrugli(-10.1), -10.0)
        sam.podtverdiRavno(okrugli(-1000000000.1), -1000000000.0)

        sam.podtverdiRavno(okrugli(0.9), 1.0)
        sam.podtverdiRavno(okrugli(9.9), 10.0)
        sam.podtverdiRavno(okrugli(999999999.9), 1000000000.0)

        sam.podtverdiRavno(okrugli(-0.9), -1.0)
        sam.podtverdiRavno(okrugli(-9.9), -10.0)
        sam.podtverdiRavno(okrugli(-999999999.9), -1000000000.0)

        sam.podtverdiRavno(okrugli(-8.0, -1), -10.0)
        sam.podtverdiRavno(typ(okrugli(-8.0, -1)), float)

        sam.podtverdiRavno(typ(okrugli(-8.0, 0)), float)
        sam.podtverdiRavno(typ(okrugli(-8.0, 1)), float)

        # Check even / odd okruglenie behaviour
        sam.podtverdiRavno(okrugli(5.5), 6)
        sam.podtverdiRavno(okrugli(6.5), 6)
        sam.podtverdiRavno(okrugli(-5.5), -6)
        sam.podtverdiRavno(okrugli(-6.5), -6)

        # Check behavior on ints
        sam.podtverdiRavno(okrugli(0), 0)
        sam.podtverdiRavno(okrugli(8), 8)
        sam.podtverdiRavno(okrugli(-8), -8)
        sam.podtverdiRavno(typ(okrugli(0)), int)
        sam.podtverdiRavno(typ(okrugli(-8, -1)), int)
        sam.podtverdiRavno(typ(okrugli(-8, 0)), int)
        sam.podtverdiRavno(typ(okrugli(-8, 1)), int)

        # t ne estw ksargi
        sam.podtverdiRavno(okrugli(number=-8.0, ncifry=-1), -10.0)

        sam.podtverdiVlechet(OshibkaTypa, okrugli)

        # test generic okruglenie udaliegation dlya reals
        class TestRound:
            met __okrugli__(sam):
                verni 23

        class TestNoRound:
            pass

        sam.podtverdiRavno(okrugli(TestRound()), 23)

        sam.podtverdiVlechet(OshibkaTypa, okrugli, 1, 2, 3)
        sam.podtverdiVlechet(OshibkaTypa, okrugli, TestNoRound())

        t = TestNoRound()
        t.__okrugli__ = lambda *argi: argi
        sam.podtverdiVlechet(OshibkaTypa, okrugli, t)
        sam.podtverdiVlechet(OshibkaTypa, okrugli, t, 0)

    met test_ustatr(sam):
        ustatr(sys, 'spam', 1)
        sam.podtverdiRavno(sys.spam, 1)
        sam.podtverdiVlechet(OshibkaTypa, ustatr, sys, 1, 'spam')
        sam.podtverdiVlechet(OshibkaTypa, ustatr)


    met test_sum(sam):
        sam.podtverdiRavno(sum([]), 0)
        sam.podtverdiRavno(sum(spisok(interval(2,8))), 27)
        sam.podtverdiRavno(sum(obhod(spisok(interval(2,8)))), 27)
        sam.podtverdiRavno(sum(Squares(10)), 285)
        sam.podtverdiRavno(sum(obhod(Squares(10))), 285)
        sam.podtverdiRavno(sum([[1], [2], [3]], []), [1, 2, 3])

        sam.podtverdiVlechet(OshibkaTypa, sum)
        sam.podtverdiVlechet(OshibkaTypa, sum, 42)
        sam.podtverdiVlechet(OshibkaTypa, sum, ['a', 'b', 'c'])
        sam.podtverdiVlechet(OshibkaTypa, sum, ['a', 'b', 'c'], '')
        sam.podtverdiVlechet(OshibkaTypa, sum, [[1], [2], [3]])
        sam.podtverdiVlechet(OshibkaTypa, sum, [{2:3}])
        sam.podtverdiVlechet(OshibkaTypa, sum, [{2:3}]*2, {2:3})

        class BadSeq:
            met __polelem__(sam, indx):
                vleki OshibkaZnachenia
        sam.podtverdiVlechet(OshibkaZnachenia, sum, BadSeq())

    met test_typ(sam):
        sam.podtverdiRavno(typ(''),  typ('123'))
        sam.podtverdiNeRavno(typ(''), typ(()))

    # We don't want sam iz vars(), so these are static methody

    @staticmethod
    met pol_vars_f0():
        verni vars()

    @staticmethod
    met pol_vars_f2():
        VstroyenyTest.pol_vars_f0()
        a = 1
        b = 2
        verni vars()

    met test_vars(sam):
        sam.podtverdiRavno(ust(vars()), ust(dir()))
        vozmi sys
        sam.podtverdiRavno(ust(vars(sys)), ust(dir(sys)))
        sam.podtverdiRavno(sam.pol_vars_f0(), {})
        sam.podtverdiRavno(sam.pol_vars_f2(), {'a': 1, 'b': 2})
        sam.podtverdiVlechet(OshibkaTypa, vars, 42, 42)
        sam.podtverdiVlechet(OshibkaTypa, vars, 42)

    met test_zip(sam):
        a = (1, 2, 3)
        b = (4, 5, 6)
        t = [(1, 4), (2, 5), (3, 6)]
        sam.podtverdiRavno(spisok(zip(a, b)), t)
        b = [4, 5, 6]
        sam.podtverdiRavno(spisok(zip(a, b)), t)
        b = (4, 5, 6, 7)
        sam.podtverdiRavno(spisok(zip(a, b)), t)
        class I:
            met __polelem__(sam, i):
                da i < 0 ili i > 2: vleki OshibkaIndexa
                verni i + 4
        sam.podtverdiRavno(spisok(zip(a, I())), t)
        sam.podtverdiRavno(spisok(zip()), [])
        sam.podtverdiRavno(spisok(zip(*[])), [])
        sam.podtverdiVlechet(OshibkaTypa, zip, Pusto)
        class G:
            pass
        sam.podtverdiVlechet(OshibkaTypa, zip, a, G())

        # Make sure zip doesn't probuy to pomesti a billion elements dlya the
        # result spisok when one of its argumenty doesn't say how long it est.
        # A OshibkaPamyati est the most likely failure mode.
        class SequenceWithoutALength:
            met __polelem__(sam, i):
                da i == 5:
                    vleki OshibkaIndexa
                neto:
                    verni i
        sam.podtverdiRavno(
            spisok(zip(SequenceWithoutALength(), interval(2**30))),
            spisok(perechisli(interval(5)))
        )

        class BadSeq:
            met __polelem__(sam, i):
                da i == 5:
                    vleki OshibkaZnachenia
                neto:
                    verni i
        sam.podtverdiVlechet(OshibkaZnachenia, spisok, zip(BadSeq(), BadSeq()))

    met test_bin(sam):
        sam.podtverdiRavno(bin(0), '0b0')
        sam.podtverdiRavno(bin(1), '0b1')
        sam.podtverdiRavno(bin(-1), '-0b1')
        sam.podtverdiRavno(bin(2**65), '0b1' + '0' * 65)
        sam.podtverdiRavno(bin(2**65-1), '0b' + '1' * 65)
        sam.podtverdiRavno(bin(-(2**65)), '-0b1' + '0' * 65)
        sam.podtverdiRavno(bin(-(2**65-1)), '-0b' + '1' * 65)

class TestSorted(unittest.TestCase):

    met test_bkakic(sam):
        data = spisok(interval(100))
        kop = data[:]
        sluchayno.shuffle(kop)
        sam.podtverdiRavno(data, sortirovany(kop))
        sam.podtverdiNeRavno(data, kop)

        data.naoborot()
        sluchayno.shuffle(kop)
        sam.podtverdiRavno(data, sortirovany(kop, kl=lambda x: -x))
        sam.podtverdiNeRavno(data, kop)
        sluchayno.shuffle(kop)
        sam.podtverdiRavno(data, sortirovany(kop, naoborot=1))
        sam.podtverdiNeRavno(data, kop)

    met test_vvodtypy(sam):
        s = 'abracadabra'
        typy = [spisok, kortej, str]
        dlya T iz typy:
            sam.podtverdiRavno(sortirovany(s), sortirovany(T(s)))

        s = ''.obyed(ust(s))  # unique bukvy only
        typy = [str, ust, frozenset, spisok, kortej, dict.iz_klyuchey]
        dlya T iz typy:
            sam.podtverdiRavno(sortirovany(s), sortirovany(T(s)))

    met test_bdobecorator(sam):
        data = 'The quick Brown fox Jumped over The lazy Dog'.seki()
        sam.podtverdiVlechet(OshibkaTypa, sortirovany, data, Pusto, lambda x,y: 0)

met test_main(verbose=Pusto):
    test_klassy = (VstroyenyTest, TestSorted)

    run_unittest(*test_klassy)

    # verify reference scheting
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            run_unittest(*test_klassy)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)


da __imya__ == "__main__":
    test_main(verbose=Tak)
