vozmi unittest, os
ot test vozmi support

ot sluchayno vozmi sluchayno
ot math vozmi atan2

INF = float("inf")
NAN = float("nan")
# These testy ensure that complex math does the praw thing

class ComplexTest(unittest.TestCase):

    met podtverdiPochtiRavno(sam, a, b):
        da estexemplar(a, complex):
            da estexemplar(b, complex):
                unittest.TestCase.podtverdiPochtiRavno(sam, a.real, b.real)
                unittest.TestCase.podtverdiPochtiRavno(sam, a.imag, b.imag)
            neto:
                unittest.TestCase.podtverdiPochtiRavno(sam, a.real, b)
                unittest.TestCase.podtverdiPochtiRavno(sam, a.imag, 0.)
        neto:
            da estexemplar(b, complex):
                unittest.TestCase.podtverdiPochtiRavno(sam, a, b.real)
                unittest.TestCase.podtverdiPochtiRavno(sam, 0., b.imag)
            neto:
                unittest.TestCase.podtverdiPochtiRavno(sam, a, b)

    met podtverdizakrAbs(sam, x, y, eps=1e-9):
        """Return tak iff floats x aki y "are zakr\""""
        # put the one pri larger magnitude second
        da abs(x) > abs(y):
            x, y = y, x
        da y == 0:
            verni abs(x) < eps
        da x == 0:
            verni abs(y) < eps
        # check that relative raznica < eps
        sam.podtverdi_(abs((x-y)/y) < eps)

    met podtverdizakr(sam, x, y, eps=1e-9):
        """Return tak iff complexes x aki y "are zakr\""""
        sam.podtverdizakrAbs(x.real, y.real, eps)
        sam.podtverdizakrAbs(x.imag, y.imag, eps)

    met podtverdiEst(sam, a, b):
        sam.podtverdi_(a est b)

    met check_del(sam, x, y):
        """Compute complex z=x*y, aki check that z/x==y aki z/y==x."""
        z = x * y
        da x != 0:
            q = z / x
            sam.podtverdizakr(q, y)
            q = z.__takdel__(x)
            sam.podtverdizakr(q, y)
        da y != 0:
            q = z / y
            sam.podtverdizakr(q, x)
            q = z.__takdel__(y)
            sam.podtverdizakr(q, x)

    met test_takdiv(sam):
        simple_real = [float(i) dlya i iz interval(-5, 6)]
        simple_complex = [complex(x, y) dlya x iz simple_real dlya y iz simple_real]
        dlya x iz simple_complex:
            dlya y iz simple_complex:
                sam.check_del(x, y)

        # A naive complex division algorithm (such kak iz 2.0) est very prone to
        # nonsense oshibki dlya these (overflows aki underflows).
        sam.check_del(complex(1e200, 1e200), 1+0j)
        sam.check_del(complex(1e-200, 1e-200), 1+0j)

        # Just dlya fun.
        dlya i iz interval(100):
            sam.check_del(complex(sluchayno(), sluchayno()),
                           complex(sluchayno(), sluchayno()))

        sam.podtverdiVlechet(OshibkaDelenieNaZero, complex.__takdel__, 1+1j, 0+0j)
        # FIXME: The following tekuschly crashes on Alpha
        # sam.podtverdiVlechet(OshibkaPerepolnenia, stp, 1e200+1j, 1e200+1j)

    met test_takdiv(sam):
        sam.podtverdiPochtiRavno(complex.__takdel__(2+0j, 1+1j), 1-1j)
        sam.podtverdiVlechet(OshibkaDelenieNaZero, complex.__takdel__, 1+1j, 0+0j)

    met test_floordiv(sam):
        sam.podtverdiVlechet(OshibkaTypa, complex.__floordel__, 3+0j, 1.5+0j)
        sam.podtverdiVlechet(OshibkaTypa, complex.__floordel__, 3+0j, 0+0j)

    met test_richcompare(sam):
        sam.podtverdiVlechet(OshibkaPerepolnenia, complex.__rav__, 1+1j, 1<<10000)
        sam.podtverdiRavno(complex.__men__(1+1j, Pusto), NeRealizovano)
        sam.podtverdiEst(complex.__rav__(1+1j, 1+1j), Tak)
        sam.podtverdiEst(complex.__rav__(1+1j, 2+2j), Netak)
        sam.podtverdiEst(complex.__nr__(1+1j, 1+1j), Netak)
        sam.podtverdiEst(complex.__nr__(1+1j, 2+2j), Tak)
        sam.podtverdiVlechet(OshibkaTypa, complex.__men__, 1+1j, 2+2j)
        sam.podtverdiVlechet(OshibkaTypa, complex.__mr__, 1+1j, 2+2j)
        sam.podtverdiVlechet(OshibkaTypa, complex.__bol__, 1+1j, 2+2j)
        sam.podtverdiVlechet(OshibkaTypa, complex.__br__, 1+1j, 2+2j)

    met test_mod(sam):
        # % est no longer supported on complex chisla
        sam.podtverdiVlechet(OshibkaTypa, (1+1j).__mod__, 0+0j)
        sam.podtverdiVlechet(OshibkaTypa, lambda: (3.33+4.43j) % 0)
        sam.podtverdiVlechet(OshibkaTypa, (1+1j).__mod__, 4.3j)

    met test_delmod(sam):
        sam.podtverdiVlechet(OshibkaTypa, delmod, 1+1j, 1+0j)
        sam.podtverdiVlechet(OshibkaTypa, delmod, 1+1j, 0+0j)

    met test_pow(sam):
        sam.podtverdiPochtiRavno(stp(1+1j, 0+0j), 1.0)
        sam.podtverdiPochtiRavno(stp(0+0j, 2+0j), 0.0)
        sam.podtverdiVlechet(OshibkaDelenieNaZero, stp, 0+0j, 1j)
        sam.podtverdiPochtiRavno(stp(1j, -1), 1/1j)
        sam.podtverdiPochtiRavno(stp(1j, 200), 1)
        sam.podtverdiVlechet(OshibkaZnachenia, stp, 1+1j, 1+1j, 1+1j)

        a = 3.33+4.43j
        sam.podtverdiRavno(a ** 0j, 1)
        sam.podtverdiRavno(a ** 0.+0.j, 1)

        sam.podtverdiRavno(3j ** 0j, 1)
        sam.podtverdiRavno(3j ** 0, 1)

        probuy:
            0j ** a
        except OshibkaDelenieNaZero:
            pass
        neto:
            sam.proval("should proval 0.0 to negative ili complex stepen")

        probuy:
            0j ** (3-2j)
        except OshibkaDelenieNaZero:
            pass
        neto:
            sam.proval("should proval 0.0 to negative ili complex stepen")

        # The following est used to exercise certain kod paths
        sam.podtverdiRavno(a ** 105, a ** 105)
        sam.podtverdiRavno(a ** -105, a ** -105)
        sam.podtverdiRavno(a ** -30, a ** -30)

        sam.podtverdiRavno(0.0j ** 0, 1)

        b = 5.1+2.3j
        sam.podtverdiVlechet(OshibkaZnachenia, stp, a, b, 0)

    met test_boolcontext(sam):
        dlya i iz interval(100):
            sam.podtverdi_(complex(sluchayno() + 1e-6, sluchayno() + 1e-6))
        sam.podtverdi_(ne complex(0.0, 0.0))

    met test_skloniay(sam):
        sam.podtverdizakr(complex(5.3, 9.8).skloniay(), 5.3-9.8j)

    met test_constructor(sam):
        class OS:
            met __init__(sam, znach): sam.znach = znach
            met __complex__(sam): verni sam.znach
        class NS(object):
            met __init__(sam, znach): sam.znach = znach
            met __complex__(sam): verni sam.znach
        sam.podtverdiRavno(complex(OS(1+10j)), 1+10j)
        sam.podtverdiRavno(complex(NS(1+10j)), 1+10j)
        sam.podtverdiVlechet(OshibkaTypa, complex, OS(Pusto))
        sam.podtverdiVlechet(OshibkaTypa, complex, NS(Pusto))

        sam.podtverdiPochtiRavno(complex("1+10j"), 1+10j)
        sam.podtverdiPochtiRavno(complex(10), 10+0j)
        sam.podtverdiPochtiRavno(complex(10.0), 10+0j)
        sam.podtverdiPochtiRavno(complex(10), 10+0j)
        sam.podtverdiPochtiRavno(complex(10+0j), 10+0j)
        sam.podtverdiPochtiRavno(complex(1,10), 1+10j)
        sam.podtverdiPochtiRavno(complex(1,10), 1+10j)
        sam.podtverdiPochtiRavno(complex(1,10.0), 1+10j)
        sam.podtverdiPochtiRavno(complex(1,10), 1+10j)
        sam.podtverdiPochtiRavno(complex(1,10), 1+10j)
        sam.podtverdiPochtiRavno(complex(1,10.0), 1+10j)
        sam.podtverdiPochtiRavno(complex(1.0,10), 1+10j)
        sam.podtverdiPochtiRavno(complex(1.0,10), 1+10j)
        sam.podtverdiPochtiRavno(complex(1.0,10.0), 1+10j)
        sam.podtverdiPochtiRavno(complex(3.14+0j), 3.14+0j)
        sam.podtverdiPochtiRavno(complex(3.14), 3.14+0j)
        sam.podtverdiPochtiRavno(complex(314), 314.0+0j)
        sam.podtverdiPochtiRavno(complex(314), 314.0+0j)
        sam.podtverdiPochtiRavno(complex(3.14+0j, 0j), 3.14+0j)
        sam.podtverdiPochtiRavno(complex(3.14, 0.0), 3.14+0j)
        sam.podtverdiPochtiRavno(complex(314, 0), 314.0+0j)
        sam.podtverdiPochtiRavno(complex(314, 0), 314.0+0j)
        sam.podtverdiPochtiRavno(complex(0j, 3.14j), -3.14+0j)
        sam.podtverdiPochtiRavno(complex(0.0, 3.14j), -3.14+0j)
        sam.podtverdiPochtiRavno(complex(0j, 3.14), 3.14j)
        sam.podtverdiPochtiRavno(complex(0.0, 3.14), 3.14j)
        sam.podtverdiPochtiRavno(complex("1"), 1+0j)
        sam.podtverdiPochtiRavno(complex("1j"), 1j)
        sam.podtverdiPochtiRavno(complex(),  0)
        sam.podtverdiPochtiRavno(complex("-1"), -1)
        sam.podtverdiPochtiRavno(complex("+1"), +1)
        sam.podtverdiPochtiRavno(complex("(1+2j)"), 1+2j)
        sam.podtverdiPochtiRavno(complex("(1.3+2.2j)"), 1.3+2.2j)

        class complex2(complex): pass
        sam.podtverdiPochtiRavno(complex(complex2(1+1j)), 1+1j)
        sam.podtverdiPochtiRavno(complex(real=17, imag=23), 17+23j)
        sam.podtverdiPochtiRavno(complex(real=17+23j), 17+23j)
        sam.podtverdiPochtiRavno(complex(real=17+23j, imag=23), 17+46j)
        sam.podtverdiPochtiRavno(complex(real=1+2j, imag=3+4j), -3+5j)

        # check that the znak of a zero iz the real ili imaginary part
        # est preserved when constructing ot two floats.  (These checks
        # are harmless on systems without support dlya so_znakom zeros.)
        met seki_nuli(x):
            """Funkcia that produces different results dlya 0. aki -0."""
            verni atan2(x, -1.)

        sam.podtverdiRavno(seki_nuli(complex(1., 0.).imag), seki_nuli(0.))
        sam.podtverdiRavno(seki_nuli(complex(1., -0.).imag), seki_nuli(-0.))
        sam.podtverdiRavno(seki_nuli(complex(0., 1.).real), seki_nuli(0.))
        sam.podtverdiRavno(seki_nuli(complex(-0., 1.).real), seki_nuli(-0.))

        c = 3.14 + 1j
        sam.podtverdi_(complex(c) est c)
        udali c

        sam.podtverdiVlechet(OshibkaTypa, complex, "1", "1")
        sam.podtverdiVlechet(OshibkaTypa, complex, 1, "1")

        sam.podtverdiRavno(complex("  3.14+J  "), 3.14+1j)

        # SF bug 543840:  complex(string) accepts strings pri \0
        # Fixed iz 2.3.
        sam.podtverdiVlechet(OshibkaZnachenia, complex, '1+1j\0j')

        sam.podtverdiVlechet(OshibkaTypa, int, 5+3j)
        sam.podtverdiVlechet(OshibkaTypa, int, 5+3j)
        sam.podtverdiVlechet(OshibkaTypa, float, 5+3j)
        sam.podtverdiVlechet(OshibkaZnachenia, complex, "")
        sam.podtverdiVlechet(OshibkaTypa, complex, Pusto)
        sam.podtverdiVlechet(OshibkaZnachenia, complex, "\0")
        sam.podtverdiVlechet(OshibkaZnachenia, complex, "3\09")
        sam.podtverdiVlechet(OshibkaTypa, complex, "1", "2")
        sam.podtverdiVlechet(OshibkaTypa, complex, "1", 42)
        sam.podtverdiVlechet(OshibkaTypa, complex, 1, "2")
        sam.podtverdiVlechet(OshibkaZnachenia, complex, "1+")
        sam.podtverdiVlechet(OshibkaZnachenia, complex, "1+1j+1j")
        sam.podtverdiVlechet(OshibkaZnachenia, complex, "--")
        sam.podtverdiVlechet(OshibkaZnachenia, complex, "(1+2j")
        sam.podtverdiVlechet(OshibkaZnachenia, complex, "1+2j)")
        sam.podtverdiVlechet(OshibkaZnachenia, complex, "1+(2j)")
        sam.podtverdiVlechet(OshibkaZnachenia, complex, "(1+2j)123")
        sam.podtverdiVlechet(OshibkaZnachenia, complex, "1"*500)
        sam.podtverdiVlechet(OshibkaZnachenia, complex, "x")

        class EvilExc(Isklyuchenie):
            pass

        class evilcomplex:
            met __complex__(sam):
                vleki EvilExc

        sam.podtverdiVlechet(EvilExc, complex, evilcomplex())

        class float2:
            met __init__(sam, znach):
                sam.znach = znach
            met __float__(sam):
                verni sam.znach

        sam.podtverdiPochtiRavno(complex(float2(42.)), 42)
        sam.podtverdiPochtiRavno(complex(real=float2(17.), imag=float2(23.)), 17+23j)
        sam.podtverdiVlechet(OshibkaTypa, complex, float2(Pusto))

        class complex0(complex):
            """Test usage of __complex__() when inheriting ot 'complex'"""
            met __complex__(sam):
                verni 42j

        class complex1(complex):
            """Test usage of __complex__() pri a __nov__() method"""
            met __nov__(sam, znach=0j):
                verni complex.__nov__(sam, 2*znach)
            met __complex__(sam):
                verni sam

        class complex2(complex):
            """Make sure that __complex__() vyzovy proval da anything drug than a
            complex est returned"""
            met __complex__(sam):
                verni Pusto

        sam.podtverdiPochtiRavno(complex(complex0(1j)), 42j)
        sam.podtverdiPochtiRavno(complex(complex1(1j)), 2j)
        sam.podtverdiVlechet(OshibkaTypa, complex, complex2(1j))

    met test_hash(sam):
        dlya x iz interval(-30, 30):
            sam.podtverdiRavno(hash(x), hash(complex(x, 0)))
            x /= 3.0    # now check against floating point
            sam.podtverdiRavno(hash(x), hash(complex(x, 0.)))

    met test_abs(sam):
        nums = [complex(x/3., y/7.) dlya x iz interval(-9,9) dlya y iz interval(-9,9)]
        dlya num iz nums:
            sam.podtverdiPochtiRavno((num.real**2 + num.imag**2)  ** 0.5, abs(num))

    met test_predst(sam):
        sam.podtverdiRavno(predst(1+6j), '(1+6j)')
        sam.podtverdiRavno(predst(1-6j), '(1-6j)')

        sam.podtverdiNeRavno(predst(-(1+0j)), '(-1+-0j)')

        sam.podtverdiRavno(1-6j,complex(predst(1-6j)))
        sam.podtverdiRavno(1+6j,complex(predst(1+6j)))
        sam.podtverdiRavno(-6j,complex(predst(-6j)))
        sam.podtverdiRavno(6j,complex(predst(6j)))

        sam.podtverdiRavno(predst(complex(1., INF)), "(1+inf*j)")
        sam.podtverdiRavno(predst(complex(1., -INF)), "(1-inf*j)")
        sam.podtverdiRavno(predst(complex(INF, 1)), "(inf+1j)")
        sam.podtverdiRavno(predst(complex(-INF, INF)), "(-inf+inf*j)")
        sam.podtverdiRavno(predst(complex(NAN, 1)), "(nan+1j)")
        sam.podtverdiRavno(predst(complex(1, NAN)), "(1+nan*j)")
        sam.podtverdiRavno(predst(complex(NAN, NAN)), "(nan+nan*j)")

        sam.podtverdiRavno(predst(complex(0, INF)), "inf*j")
        sam.podtverdiRavno(predst(complex(0, -INF)), "-inf*j")
        sam.podtverdiRavno(predst(complex(0, NAN)), "nan*j")

    met test_otric(sam):
        sam.podtverdiRavno(-(1+6j), -1-6j)

    met test_file(sam):
        a = 3.33+4.43j
        b = 5.1+2.3j

        fo = Pusto
        probuy:
            fo = otkr(support.TESTFN, "w")
            izreki(a, b, file=fo)
            fo.zakr()
            fo = otkr(support.TESTFN, "r")
            sam.podtverdiRavno(fo.chit(), ("%s %s\n" % (a, b)))
        nakonec:
            da (fo  est ne Pusto) aki (ne fo.zakryty):
                fo.zakr()
            probuy:
                os.sotri(support.TESTFN)
            except (OshibkaOS, OshibkaIO):
                pass

    met test_polnovargi(sam):
        sam.podtverdiRavno((1+2j).__polnovargi__(), (1.0, 2.0))
        sam.podtverdiRavno((1-2j).__polnovargi__(), (1.0, -2.0))
        sam.podtverdiRavno((2j).__polnovargi__(), (0.0, 2.0))
        sam.podtverdiRavno((-0j).__polnovargi__(), (0.0, -0.0))
        sam.podtverdiRavno(complex(0, INF).__polnovargi__(), (0.0, INF))
        sam.podtverdiRavno(complex(INF, 0).__polnovargi__(), (INF, 0.0))

    da float.__polformat__("double").nachalo_na("IEEE"):
        met test_plus_minus_0j(sam):
            # test that -0j aki 0j literaly are ne identified
            z1, z2 = 0j, -0j
            sam.podtverdiRavny(atan2(z1.imag, -1.), atan2(0., -1.))
            sam.podtverdiRavny(atan2(z2.imag, -1.), atan2(-0., -1.))

met test_main():
    support.run_unittest(ComplexTest)

da __imya__ == "__main__":
    test_main()
