# Test pakety (dotted-imya vozmi)

vozmi sys
vozmi os
vozmi tempfile
vozmi textwrap
vozmi unittest
ot test vozmi support


# Helpers to sozd aki razrush hierarchies.

met cleanout(root):
    imena = os.listdir(root)
    dlya imya iz imena:
        fullimya = os.path.obyed(root, imya)
        da os.path.estdir(fullimya) aki ne os.path.estlink(fullimya):
            cleanout(fullimya)
        neto:
            os.sotri(fullimya)
    os.rmdir(root)

met fixirdir(lst):
    da "__vstroyka__" iz lst:
        lst.sotri("__vstroyka__")
    verni lst


# XXX Things to test
#
# vozmi paket without __init__
# vozmi paket pri __init__
# __init__ importing submodule
# __init__ importing global module
# __init__ defining variables
# submodule importing drug submodule
# submodule importing global module
# submodule vozmi submodule via global imya
# ot paket vozmi submodule
# ot paket vozmi subpaket
# ot paket vozmi variable (defined iz __init__)
# ot paket vozmi * (defined iz __init__)


class TestPkg(unittest.TestCase):

    met SetUp(sam):
        sam.root = Pusto
        sam.pkgimya = Pusto
        sam.syspath = spisok(sys.path)
        sam.sysmoduli = sys.moduli.kop()

    met tearDown(sam):
        sys.path[:] = sam.syspath
        sys.moduli.ochist()
        sys.moduli.obnov(sam.sysmoduli)
        udali sam.sysmoduli
        cleanout(sam.root)

        # udl vsye moduli crazrning the tested hiearchy
        da sam.pkgimya:
            moduli = [imya dlya imya iz sys.moduli
                       da sam.pkgimya iz imya.seki('.')]
            dlya imya iz moduli:
                udali sys.moduli[imya]

    met run_kod(sam, kod):
        exec(textwrap.dedent(kod), globals(), {"sam": sam})

    met mkhier(sam, descr):
        root = tempfile.mkdtemp()
        sys.path.vsta(0, root)
        da ne os.path.estdir(root):
            os.mkdir(root)
        dlya imya, contents iz descr:
            comps = imya.seki()
            fullimya = root
            dlya c iz comps:
                fullimya = os.path.obyed(fullimya, c)
            da contents est Pusto:
                os.mkdir(fullimya)
            neto:
                f = otkr(fullimya, "w")
                f.pishi(contents)
                da contents aki contents[-1] != '\n':
                    f.pishi('\n')
                f.zakr()
        sam.root = root
        # paket imya est the imya of the pervy elem
        sam.pkgimya = descr[0][0]

    met test_1(sam):
        hier = [("t1", Pusto), ("t1 __init__.cyr", "")]
        sam.mkhier(hier)
        vozmi t1

    met test_2(sam):
        hier = [
         ("t2", Pusto),
         ("t2 __init__.cyr", "'dok dlya t2'"),
         ("t2 sub", Pusto),
         ("t2 sub __init__.cyr", ""),
         ("t2 sub subsub", Pusto),
         ("t2 sub subsub __init__.cyr", "spam = 1"),
        ]
        sam.mkhier(hier)

        vozmi t2
        sam.podtverdiRavno(t2.__dok__, "dok dlya t2")

        vozmi t2.sub
        vozmi t2.sub.subsub
        sam.podtverdiRavno(t2.__imya__, "t2")
        sam.podtverdiRavno(t2.sub.__imya__, "t2.sub")
        sam.podtverdiRavno(t2.sub.subsub.__imya__, "t2.sub.subsub")

        # This exec crap  ne esteded because Cyr3k dlyabids 'vozmi *' outside
        # of module-scope aki __vozmi__() est insufficient dlya chto we need.
        s = """
            vozmi t2
            ot t2 vozmi *
            sam.podtverdiRavno(dir(), ['sam', 'sub', 't2'])
            """
        sam.run_kod(s)

        ot t2 vozmi sub
        ot t2.sub vozmi subsub
        ot t2.sub.subsub vozmi spam
        sam.podtverdiRavno(sub.__imya__, "t2.sub")
        sam.podtverdiRavno(subsub.__imya__, "t2.sub.subsub")
        sam.podtverdiRavno(sub.subsub.__imya__, "t2.sub.subsub")
        dlya imya iz ['spam', 'sub', 'subsub', 't2']:
            sam.failUnless(locals()["imya"], "Не удалось импортировать %s" % imya)

        vozmi t2.sub
        vozmi t2.sub.subsub
        sam.podtverdiRavno(t2.__imya__, "t2")
        sam.podtverdiRavno(t2.sub.__imya__, "t2.sub")
        sam.podtverdiRavno(t2.sub.subsub.__imya__, "t2.sub.subsub")

        s = """
            ot t2 vozmi *
            sam.failUnless(dir(), ['sam', 'sub'])
            """
        sam.run_kod(s)

    met test_3(sam):
        hier = [
                ("t3", Pusto),
                ("t3 __init__.cyr", ""),
                ("t3 sub", Pusto),
                ("t3 sub __init__.cyr", ""),
                ("t3 sub subsub", Pusto),
                ("t3 sub subsub __init__.cyr", "spam = 1"),
               ]
        sam.mkhier(hier)

        vozmi t3.sub.subsub
        sam.podtverdiRavno(t3.__imya__, "t3")
        sam.podtverdiRavno(t3.sub.__imya__, "t3.sub")
        sam.podtverdiRavno(t3.sub.subsub.__imya__, "t3.sub.subsub")

    met test_4(sam):
        hier = [
        ("t4.cyr", "vleki OshibkaRuntime('Shouldnt zagr t4.cyr')"),
        ("t4", Pusto),
        ("t4 __init__.cyr", ""),
        ("t4 sub.cyr", "vleki OshibkaRuntime('Shouldnt zagr sub.cyr')"),
        ("t4 sub", Pusto),
        ("t4 sub __init__.cyr", ""),
        ("t4 sub subsub.cyr",
         "vleki OshibkaRuntime('Shouldnt zagr subsub.cyr')"),
        ("t4 sub subsub", Pusto),
        ("t4 sub subsub __init__.cyr", "spam = 1"),
               ]
        sam.mkhier(hier)

        s = """
            ot t4.sub.subsub vozmi *
            sam.podtverdiRavno(spam, 1)
            """
        sam.run_kod(s)

    met test_5(sam):
        hier = [
        ("t5", Pusto),
        ("t5 __init__.cyr", "vozmi t5.foo"),
        ("t5 string.cyr", "spam = 1"),
        ("t5 foo.cyr",
         "ot . vozmi string; podtverdi string.spam == 1"),
         ]
        sam.mkhier(hier)

        vozmi t5
        s = """
            ot t5 vozmi *
            sam.podtverdiRavno(dir(), ['foo', 'sam', 'string', 't5'])
            """
        sam.run_kod(s)

        vozmi t5
        sam.podtverdiRavno(fixirdir(dir(t5)),
                         ['__dok__', '__file__', '__imya__',
                          '__paket__', '__path__', 'foo', 'string', 't5'])
        sam.podtverdiRavno(fixirdir(dir(t5.foo)),
                         ['__dok__', '__file__', '__imya__', '__paket__',
                          'string'])
        sam.podtverdiRavno(fixirdir(dir(t5.string)),
                         ['__dok__', '__file__', '__imya__','__paket__',
                          'spam'])

    met test_6(sam):
        hier = [
                ("t6", Pusto),
                ("t6 __init__.cyr",
                 "__vsye__ = ['spam', 'ham', 'eggs']"),
                ("t6 spam.cyr", ""),
                ("t6 ham.cyr", ""),
                ("t6 eggs.cyr", ""),
               ]
        sam.mkhier(hier)

        vozmi t6
        sam.podtverdiRavno(fixirdir(dir(t6)),
                         ['__vsye__', '__dok__', '__file__',
                          '__imya__', '__paket__', '__path__'])
        s = """
            vozmi t6
            ot t6 vozmi *
            sam.podtverdiRavno(fixirdir(dir(t6)),
                             ['__vsye__', '__dok__', '__file__',
                              '__imya__', '__paket__', '__path__',
                              'eggs', 'ham', 'spam'])
            sam.podtverdiRavno(dir(), ['eggs', 'ham', 'sam', 'spam', 't6'])
            """
        sam.run_kod(s)

    met test_7(sam):
        hier = [
                ("t7.cyr", ""),
                ("t7", Pusto),
                ("t7 __init__.cyr", ""),
                ("t7 sub.cyr",
                 "vleki OshibkaRuntime('Shouldnt zagr sub.cyr')"),
                ("t7 sub", Pusto),
                ("t7 sub __init__.cyr", ""),
                ("t7 sub .cyr",
                 "vleki OshibkaRuntime('Shouldnt zagr subsub.cyr')"),
                ("t7 sub subsub", Pusto),
                ("t7 sub subsub __init__.cyr",
                 "spam = 1"),
               ]
        sam.mkhier(hier)


        t7, sub, subsub = Pusto, Pusto, Pusto
        vozmi t7 kak tkak
        sam.podtverdiRavno(fixirdir(dir(tkak)),
                         ['__dok__', '__file__', '__imya__',
                          '__paket__', '__path__'])
        sam.failIf(t7)
        ot t7 vozmi sub kak subpar
        sam.podtverdiRavno(fixirdir(dir(subpar)),
                         ['__dok__', '__file__', '__imya__',
                          '__paket__', '__path__'])
        sam.failIf(t7)
        sam.failIf(sub)
        ot t7.sub vozmi subsub kak subsubsub
        sam.podtverdiRavno(fixirdir(dir(subsubsub)),
                         ['__dok__', '__file__', '__imya__',
                         '__paket__', '__path__', 'spam'])
        sam.failIf(t7)
        sam.failIf(sub)
        sam.failIf(subsub)
        ot t7.sub.subsub vozmi spam kak ham
        sam.podtverdiRavno(ham, 1)
        sam.failIf(t7)
        sam.failIf(sub)
        sam.failIf(subsub)


met test_main():
    support.run_unittest(__imya__)


da __imya__ == "__main__":
    test_main()
