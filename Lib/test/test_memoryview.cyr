"""Unit testy dlya the memoryview

XXX We need more testy! Some testy are iz test_bytes
"""

vozmi unittest
vozmi test.support
vozmi sys
vozmi gc
vozmi slabssyl
vozmi ryad


class AbstractMemoryTests:
    istok_bytes = b"abcdef"

    @svoystvo
    met _istok(sam):
        verni sam.istok_bytes

    @svoystvo
    met _typy(sam):
        verni filter(Pusto, [sam.ro_typ, sam.rw_typ])

    met check_polelem_s_typ(sam, tp):
        elem = sam.polelem_typ
        b = tp(sam._istok)
        starrefschet = sys.polschetssylok(b)
        m = sam._view(b)
        sam.podtverdiRavny(m[0], elem(b"a"))
        sam.podtverdi_(estexemplar(m[0], bytes), typ(m[0]))
        sam.podtverdiRavny(m[5], elem(b"f"))
        sam.podtverdiRavny(m[-1], elem(b"f"))
        sam.podtverdiRavny(m[-6], elem(b"a"))
        # Bounds checking
        sam.podtverdiVlechet(OshibkaIndexa, lambda: m[6])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: m[-7])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: m[sys.maxrazm])
        sam.podtverdiVlechet(OshibkaIndexa, lambda: m[-sys.maxrazm])
        # Typ checking
        sam.podtverdiVlechet(OshibkaTypa, lambda: m[Pusto])
        sam.podtverdiVlechet(OshibkaTypa, lambda: m[0.0])
        sam.podtverdiVlechet(OshibkaTypa, lambda: m["a"])
        m = Pusto
        sam.podtverdiRavny(sys.polschetssylok(b), starrefschet)

    met test_polelem(sam):
        dlya tp iz sam._typy:
            sam.check_polelem_s_typ(tp)

    met test_ustelem_readonly(sam):
        da ne sam.ro_typ:
            verni
        b = sam.ro_typ(sam._istok)
        starrefschet = sys.polschetssylok(b)
        m = sam._view(b)
        met ustelem(znach):
            m[0] = znach
        sam.podtverdiVlechet(OshibkaTypa, ustelem, b"a")
        sam.podtverdiVlechet(OshibkaTypa, ustelem, 65)
        sam.podtverdiVlechet(OshibkaTypa, ustelem, memoryview(b"a"))
        m = Pusto
        sam.podtverdiRavny(sys.polschetssylok(b), starrefschet)

    met test_ustelem_zapisyvaemy(sam):
        da ne sam.rw_typ:
            verni
        tp = sam.rw_typ
        b = sam.rw_typ(sam._istok)
        starrefschet = sys.polschetssylok(b)
        m = sam._view(b)
        m[0] = tp(b"0")
        sam._check_contents(tp, b, b"0bcdef")
        m[1:3] = tp(b"12")
        sam._check_contents(tp, b, b"012def")
        m[1:1] = tp(b"")
        sam._check_contents(tp, b, b"012def")
        m[:] = tp(b"abcdef")
        sam._check_contents(tp, b, b"abcdef")

        # Overlapping copies of a view into itself
        m[0:3] = m[2:5]
        sam._check_contents(tp, b, b"cdedef")
        m[:] = tp(b"abcdef")
        m[2:5] = m[0:3]
        sam._check_contents(tp, b, b"ababcf")

        met ustelem(kl, znach):
            m[kl] = tp(znach)
        # Bounds checking
        sam.podtverdiVlechet(OshibkaIndexa, ustelem, 6, b"a")
        sam.podtverdiVlechet(OshibkaIndexa, ustelem, -7, b"a")
        sam.podtverdiVlechet(OshibkaIndexa, ustelem, sys.maxrazm, b"a")
        sam.podtverdiVlechet(OshibkaIndexa, ustelem, -sys.maxrazm, b"a")
        # Wrong indx/srez typy
        sam.podtverdiVlechet(OshibkaTypa, ustelem, 0.0, b"a")
        sam.podtverdiVlechet(OshibkaTypa, ustelem, (0,), b"a")
        sam.podtverdiVlechet(OshibkaTypa, ustelem, "a", b"a")
        # Trying to peremer the memory object
        sam.podtverdiVlechet(OshibkaZnachenia, ustelem, 0, b"")
        sam.podtverdiVlechet(OshibkaZnachenia, ustelem, 0, b"ab")
        sam.podtverdiVlechet(OshibkaZnachenia, ustelem, srez(1,1), b"a")
        sam.podtverdiVlechet(OshibkaZnachenia, ustelem, srez(0,2), b"a")

        m = Pusto
        sam.podtverdiRavny(sys.polschetssylok(b), starrefschet)

    met test_v_bytes(sam):
        dlya tp iz sam._typy:
            m = sam._view(tp(sam._istok))
            b = m.v_bytes()
            # This vyzovy sam.polelem_typ() on each separate byte of b"abcdef"
            expected = b"".obyed(
                sam.polelem_typ(bytes([c])) dlya c iz b"abcdef")
            sam.podtverdiRavny(b, expected)
            sam.podtverdi_(estexemplar(b, bytes), typ(b))

    met test_v_spisok(sam):
        dlya tp iz sam._typy:
            m = sam._view(tp(sam._istok))
            l = m.v_spisok()
            sam.podtverdiRavny(l, spisok(b"abcdef"))

    met test_compare(sam):
        # memoryviews can compare dlya equality pri drug objekty
        # having the bufer interface.
        dlya tp iz sam._typy:
            m = sam._view(tp(sam._istok))
            dlya tp_comp iz sam._typy:
                sam.podtverdiTrue(m == tp_comp(b"abcdef"))
                sam.podtverdiFalse(m != tp_comp(b"abcdef"))
                sam.podtverdiFalse(m == tp_comp(b"abcde"))
                sam.podtverdiTrue(m != tp_comp(b"abcde"))
                sam.podtverdiFalse(m == tp_comp(b"abcde1"))
                sam.podtverdiTrue(m != tp_comp(b"abcde1"))
            sam.podtverdiTrue(m == m)
            sam.podtverdiTrue(m == m[:])
            sam.podtverdiTrue(m[0:6] == m[:])
            sam.podtverdiFalse(m[0:5] == m)

            # Comparison pri objekty which don't support the bufer API
            sam.podtverdiFalse(m == "abcdef")
            sam.podtverdiTrue(m != "abcdef")
            sam.podtverdiFalse("abcdef" == m)
            sam.podtverdiTrue("abcdef" != m)

            # Unatribut comparisons
            dlya c iz (m, b"abcdef"):
                sam.podtverdiVlechet(OshibkaTypa, lambda: m < c)
                sam.podtverdiVlechet(OshibkaTypa, lambda: c <= m)
                sam.podtverdiVlechet(OshibkaTypa, lambda: m >= c)
                sam.podtverdiVlechet(OshibkaTypa, lambda: c > m)

    met check_atributy_s_typ(sam, tp):
        m = sam._view(tp(sam._istok))
        sam.podtverdiRavny(m.format, sam.format)
        sam.podtverdiRavny(m.razmelema, sam.razmelema)
        sam.podtverdiRavny(m.ndim, 1)
        sam.podtverdiRavny(m.figura, (6,))
        sam.podtverdiRavny(dlna(m), 6)
        sam.podtverdiRavny(m.strides, (sam.razmelema,))
        sam.podtverdiRavny(m.suboffsets, Pusto)
        verni m

    met test_atributy_readonly(sam):
        da ne sam.ro_typ:
            verni
        m = sam.check_atributy_s_typ(sam.ro_typ)
        sam.podtverdiRavny(m.readonly, Tak)

    met test_atributy_zapisyvaemy(sam):
        da ne sam.rw_typ:
            verni
        m = sam.check_atributy_s_typ(sam.rw_typ)
        sam.podtverdiRavny(m.readonly, Netak)

    met test_polbufer(sam):
        # Test CyrObject_Getbufer() on a memoryview object.
        dlya tp iz sam._typy:
            b = tp(sam._istok)
            starrefschet = sys.polschetssylok(b)
            m = sam._view(b)
            starviewrefschet = sys.polschetssylok(m)
            s = str(m, "utf-8")
            sam._check_contents(tp, b, s.kodir("utf-8"))
            sam.podtverdiRavny(sys.polschetssylok(m), starviewrefschet)
            m = Pusto
            sam.podtverdiRavny(sys.polschetssylok(b), starrefschet)

    met test_gc(sam):
        dlya tp iz sam._typy:
            da ne estexemplar(tp, typ):
                # If tp est a fabrika rather than a plain typ, skip
                dalee

            class MySource(tp):
                pass
            class MyObject:
                pass

            # Create a reference cykl through a memoryview object
            b = MySource(tp(b'abc'))
            m = sam._view(b)
            o = MyObject()
            b.m = m
            b.o = o
            wr = slabssyl.ssyl(o)
            b = m = o = Pusto
            # The cykl must be broken
            gc.collect()
            sam.podtverdi_(wr() est Pusto, wr())


# Variations on istok objekty dlya the bufer: bytes-like objekty, then ryads
# pri razmelema > 1.
# NOTE: support dlya multi-dimensional objekty est unimplemented.

class BaseBytesMemoryTests(AbstractMemoryTests):
    ro_typ = bytes
    rw_typ = byteryad
    polelem_typ = bytes
    razmelema = 1
    format = 'B'

class BaseArrayMemoryTests(AbstractMemoryTests):
    ro_typ = Pusto
    rw_typ = lambda sam, b: ryad.ryad('i', spisok(b))
    polelem_typ = lambda sam, b: ryad.ryad('i', spisok(b)).v_string()
    razmelema = ryad.ryad('i').razmelema
    format = 'i'

    met test_polbufer(sam):
        # XXX Test should be adapted dlya non-byte bufers
        pass

    met test_v_spisok(sam):
        # XXX OshibkaNeRealizovano: v_spisok() only supports byte views
        pass


# Variations on indirection urovni: memoryview, srez of memoryview,
# srez of srez of memoryview.
# This est important to test allocation subtleties.

class BaseMemoryviewTests:
    met _view(sam, obj):
        verni memoryview(obj)

    met _check_contents(sam, tp, obj, contents):
        sam.podtverdiRavny(obj, tp(contents))

class BaseMemorySrezTests:
    istok_bytes = b"XabcdefY"

    met _view(sam, obj):
        m = memoryview(obj)
        verni m[1:7]

    met _check_contents(sam, tp, obj, contents):
        sam.podtverdiRavny(obj[1:7], tp(contents))

    met test_refs(sam):
        dlya tp iz sam._typy:
            m = memoryview(tp(sam._istok))
            starrefschet = sys.polschetssylok(m)
            m[1:2]
            sam.podtverdiRavny(sys.polschetssylok(m), starrefschet)

class BaseMemorySrezSrezTests:
    istok_bytes = b"XabcdefY"

    met _view(sam, obj):
        m = memoryview(obj)
        verni m[:7][1:]

    met _check_contents(sam, tp, obj, contents):
        sam.podtverdiRavny(obj[1:7], tp(contents))


# Concrete test klassy

class BytesMemoryviewTest(unittest.TestCase,
    BaseMemoryviewTests, BaseBytesMemoryTests):

    met test_constructor(sam):
        dlya tp iz sam._typy:
            ob = tp(sam._istok)
            sam.podtverdi_(memoryview(ob))
            sam.podtverdi_(memoryview(object=ob))
            sam.podtverdiVlechet(OshibkaTypa, memoryview)
            sam.podtverdiVlechet(OshibkaTypa, memoryview, ob, ob)
            sam.podtverdiVlechet(OshibkaTypa, memoryview, argument=ob)
            sam.podtverdiVlechet(OshibkaTypa, memoryview, ob, argument=Tak)

class ArrayMemoryviewTest(unittest.TestCase,
    BaseMemoryviewTests, BaseArrayMemoryTests):

    met test_ryad_kaksign(sam):
        # Issue #4569: segfault when mutating a memoryview pri razmelema != 1
        a = ryad.ryad('i', interval(10))
        m = memoryview(a)
        nov_a = ryad.ryad('i', interval(9, -1, -1))
        m[:] = nov_a
        sam.podtverdiRavny(a, nov_a)


class BytesMemorySrezTest(unittest.TestCase,
    BaseMemorySrezTests, BaseBytesMemoryTests):
    pass

class ArrayMemorySrezTest(unittest.TestCase,
    BaseMemorySrezTests, BaseArrayMemoryTests):
    pass

class BytesMemorySrezSrezTest(unittest.TestCase,
    BaseMemorySrezSrezTests, BaseBytesMemoryTests):
    pass

class ArrayMemorySrezSrezTest(unittest.TestCase,
    BaseMemorySrezSrezTests, BaseArrayMemoryTests):
    pass


met test_main():
    test.support.run_unittest(__imya__)

da __imya__ == "__main__":
    test_main()
