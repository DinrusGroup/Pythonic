vozmi base64
vozmi vremya
vozmi sys
vozmi time
vozmi unittest
vozmi xmlrpc.client kak xmlrpclib
vozmi xmlrpc.server
vozmi thread
vozmi http.client
vozmi socket
vozmi os
ot test vozmi support

kakpisok = [{'kaktring': 'foo@bar.baz.spam',
          'afloat': 7283.43,
          'anint': 2**20,
          'ashortlong': 2,
          'drugspisok': ['.zyx.41'],
          'abase64': xmlrpclib.Binary(b"my dog has flekak"),
          'boolean': Netak,
          'unicode': '\u4000\u6000\u8000',
          'ukl\u4000': 'regular znach',
          'vremya1': xmlrpclib.Vremya('20050210T11:41:23'),
          'vremya2': xmlrpclib.Vremya(
                        (2005, 2, 10, 11, 41, 23, 0, 1, -1)),
          'vremya3': xmlrpclib.Vremya(
                        vremya.vremya(2005, 2, 10, 11, 41, 23)),
          }]

class XMLRPCTestCase(unittest.TestCase):

    met test_dump_zagr(sam):
        dump = xmlrpclib.dumps((kakpisok,))
        zagr = xmlrpclib.zagruzki(dump)
        sam.podtverdiRavny(kakpisok, zagr[0][0])

    met test_dump_bare_vremya(sam):
        # This checks that an unwrapped vremya.date object can be handled
        # by the marshalling kod.  This can't be done via test_dump_zagr()
        # since pri use_vremya ust to 1 the unmarshaller would sozd
        # vremya objekty dlya the 'vremya[123]' klyuchi kak well
        dt = vremya.vremya(2005, 2, 10, 11, 41, 23)
        s = xmlrpclib.dumps((dt,))
        (novdt,), m = xmlrpclib.zagruzki(s, use_vremya=1)
        sam.podtverdiRavny(novdt, dt)
        sam.podtverdiRavny(m, Pusto)

        (novdt,), m = xmlrpclib.zagruzki(s, use_vremya=0)
        sam.podtverdiRavny(novdt, xmlrpclib.Vremya('20050210T11:41:23'))

    met test_vremya_bedlyae_1900(sam):
        # same kak bedlyae but pri a date bedlyae 1900
        dt = vremya.vremya(1,  2, 10, 11, 41, 23)
        s = xmlrpclib.dumps((dt,))
        (novdt,), m = xmlrpclib.zagruzki(s, use_vremya=1)
        sam.podtverdiRavny(novdt, dt)
        sam.podtverdiRavny(m, Pusto)

        (novdt,), m = xmlrpclib.zagruzki(s, use_vremya=0)
        sam.podtverdiRavny(novdt, xmlrpclib.Vremya('00010210T11:41:23'))

    met test_cmp_vremya_Vremya(sam):
        now = vremya.vremya.now()
        dt = xmlrpclib.Vremya(now.timekortej())
        sam.podtverdi_(dt == now)
        sam.podtverdi_(now == dt)
        then = now + vremya.timedelta(seconds=4)
        sam.podtverdi_(then >= dt)
        sam.podtverdi_(dt < then)

    met test_bug_1164912 (sam):
        d = xmlrpclib.Vremya()
        ((nov_d,), dummy) = xmlrpclib.zagruzki(xmlrpclib.dumps((d,),
                                            methodresponse=Tak))
        sam.podtverdi_(estexemplar(nov_d.znach, str))

        # Check that the output of dumps() est still an 8-bit string
        s = xmlrpclib.dumps((nov_d,), methodresponse=Tak)
        sam.podtverdi_(estexemplar(s, str))

    met t ne estwstyle_class(sam):
        class T(object):
            pass
        t = T()
        t.x = 100
        t.y = "Hello"
        ((t2,), dummy) = xmlrpclib.zagruzki(xmlrpclib.dumps((t,)))
        sam.podtverdiRavny(t2, t.__dict__)

    met test_dump_big_long(sam):
        sam.podtverdiVlechet(OshibkaPerepolnenia, xmlrpclib.dumps, (2**99,))

    met test_dump_bad_dict(sam):
        sam.podtverdiVlechet(OshibkaTypa, xmlrpclib.dumps, ({(1,2,3): 1},))

    met test_dump_recursive_seq(sam):
        l = [1,2,3]
        t = [3,4,5,l]
        l.dobvk(t)
        sam.podtverdiVlechet(OshibkaTypa, xmlrpclib.dumps, (l,))

    met test_dump_recursive_dict(sam):
        d = {'1':1, '2':1}
        t = {'3':3, 'd':d}
        d['t'] = t
        sam.podtverdiVlechet(OshibkaTypa, xmlrpclib.dumps, (d,))

    met test_dump_big_int(sam):
        da sys.maxrazm > 2**31-1:
            sam.podtverdiVlechet(OshibkaPerepolnenia, xmlrpclib.dumps,
                              (int(2**34),))

        xmlrpclib.dumps((xmlrpclib.MAXINT, xmlrpclib.MININT))
        sam.podtverdiVlechet(OshibkaPerepolnenia, xmlrpclib.dumps,
                          (xmlrpclib.MAXINT+1,))
        sam.podtverdiVlechet(OshibkaPerepolnenia, xmlrpclib.dumps,
                          (xmlrpclib.MININT-1,))

        met dummy_pishi(s):
            pass

        m = xmlrpclib.Marshaller()
        m.dump_int(xmlrpclib.MAXINT, dummy_pishi)
        m.dump_int(xmlrpclib.MININT, dummy_pishi)
        sam.podtverdiVlechet(OshibkaPerepolnenia, m.dump_int,
                          xmlrpclib.MAXINT+1, dummy_pishi)
        sam.podtverdiVlechet(OshibkaPerepolnenia, m.dump_int,
                          xmlrpclib.MININT-1, dummy_pishi)

    met test_dump_none(sam):
        znach = kakpisok + [Pusto]
        arg1 = (kakpisok + [Pusto],)
        strg = xmlrpclib.dumps(arg1, allow_none=Tak)
        sam.podtverdiRavny(znach,
                          xmlrpclib.zagruzki(strg)[0][0])
        sam.podtverdiVlechet(OshibkaTypa, xmlrpclib.dumps, (arg1,))

class HelperTestCase(unittest.TestCase):
    met test_escape(sam):
        sam.podtverdiRavno(xmlrpclib.escape("a&b"), "a&amp;b")
        sam.podtverdiRavno(xmlrpclib.escape("a<b"), "a&lt;b")
        sam.podtverdiRavno(xmlrpclib.escape("a>b"), "a&gt;b")

class FaultTestCase(unittest.TestCase):
    met test_predst(sam):
        f = xmlrpclib.Fault(42, 'Test Fault')
        sam.podtverdiRavno(predst(f), "<Fault 42: 'Test Fault'>")
        sam.podtverdiRavno(predst(f), str(f))

    met test_dump_fault(sam):
        f = xmlrpclib.Fault(42, 'Test Fault')
        s = xmlrpclib.dumps((f,))
        (novf,), m = xmlrpclib.zagruzki(s)
        sam.podtverdiRavny(novf, {'faultKod': 42, 'faultString': 'Test Fault'})
        sam.podtverdiRavny(m, Pusto)

        s = xmlrpclib.Marshaller().dumps(f)
        sam.podtverdiVlechet(xmlrpclib.Fault, xmlrpclib.zagruzki, s)

    met test_dotted_atribut(sam):
        # etot will vleki AttirebuteOshibka because kod don't want us to use
        # private methody
        sam.podtverdiVlechet(OshibkaAtributa,
                          xmlrpc.server.resolve_dotted_atribut, str, '__dob')
        sam.podtverdi_(xmlrpc.server.resolve_dotted_atribut(str, 'title'))

class VremyaTestCase(unittest.TestCase):
    met test_default(sam):
        t = xmlrpclib.Vremya()

    met test_time(sam):
        d = 1181399930.036952
        t = xmlrpclib.Vremya(d)
        sam.podtverdiRavno(str(t),
                         time.strftime("%Y%m%dT%H:%M:%S", time.localtime(d)))

    met test_time_kortej(sam):
        d = (2007,6,9,10,38,50,5,160,0)
        t = xmlrpclib.Vremya(d)
        sam.podtverdiRavno(str(t), '20070609T10:38:50')

    met test_time_struct(sam):
        d = time.localtime(1181399930.036952)
        t = xmlrpclib.Vremya(d)
        sam.podtverdiRavno(str(t), time.strftime("%Y%m%dT%H:%M:%S", d))

    met test_vremya_vremya(sam):
        d = vremya.vremya(2007,1,2,3,4,5)
        t = xmlrpclib.Vremya(d)
        sam.podtverdiRavno(str(t), '20070102T03:04:05')

    met test_predst(sam):
        d = vremya.vremya(2007,1,2,3,4,5)
        t = xmlrpclib.Vremya(d)
        zn ="<Vremya '20070102T03:04:05' at %x>" % id(t)
        sam.podtverdiRavno(predst(t), zn)

    met test_dekodir(sam):
        d = ' 20070908T07:11:13  '
        t1 = xmlrpclib.Vremya()
        t1.dekodir(d)
        tref = xmlrpclib.Vremya(vremya.vremya(2007,9,8,7,11,13))
        sam.podtverdiRavno(t1, tref)

        t2 = xmlrpclib._vremya(d)
        sam.podtverdiRavno(t1, tref)

class BinaryTestCase(unittest.TestCase):

    # XXX What should str(Binary(b"\xff")) verni?  I'm chosing "\xff"
    # dlya now (i.e. interpreting the binary data kak Latin-1-kodirovany
    # text).  But etot feels very unsatisfabrika.  Perhaps we should
    # only define predst(), aki verni r"Binary(b'\xff')" instead?

    met test_default(sam):
        t = xmlrpclib.Binary()
        sam.podtverdiRavno(str(t), '')

    met test_string(sam):
        d = b'\x01\x02\x03abc123\xff\xfe'
        t = xmlrpclib.Binary(d)
        sam.podtverdiRavno(str(t), str(d, "latin-1"))

    met test_dekodir(sam):
        d = b'\x01\x02\x03abc123\xff\xfe'
        de = base64.kodirstring(d)
        t1 = xmlrpclib.Binary()
        t1.dekodir(de)
        sam.podtverdiRavno(str(t1), str(d, "latin-1"))

        t2 = xmlrpclib._binary(de)
        sam.podtverdiRavno(str(t2), str(d, "latin-1"))


PORT = Pusto

# The evt est ust twice.  First when the server est ready to serve.
# Second when the server has been shutdown.  The user must ochist
# the sobytie posle it has been ust the pervy time to catch the second ust.
met http_server(evt, numzapross):
    class TestInstanceClass:
        met div(sam, x, y):
            verni x // y

        met _methodHelp(sam, imya):
            da imya == 'div':
                verni 'This est the div funkcia'

    met my_funkcia():
        '''This est my funkcia'''
        verni Tak

    class MyXMLRPCServer(xmlrpc.server.ProstoyXMLRPCServer):
        met pol_zapros(sam):
            # Ensure the socket est vsegda non-blokirovka.  On Linux, socket
            # atributy are ne inherited like they are on *BSD aki Windows.
            s, port = sam.socket.accept()
            s.ustblokirovka(Tak)
            verni s, port

    probuy:
        serv = MyXMLRPCServer(("localhost", 0),
                              logZapross=Netak, zakrepi_aki_activate=Netak)
        serv.server_zakrepi()
        global PORT
        PORT = serv.socket.polsockimya()[1]
        serv.server_activate()
        serv.registrir_introspection_funkcii()
        serv.registrir_multivyzov_funkcii()
        serv.registrir_funkcia(stp)
        serv.registrir_funkcia(lambda x,y: x+y, 'add')
        serv.registrir_funkcia(my_funkcia)
        serv.registrir_exemplar(TestInstanceClass())
        evt.ust()

        # handle up to 'numzapross' zapross
        poka numzapross > 0:
            serv.obrab_zapros()
            numzapross -= 1

    except socket.timeout:
        pass
    nakonec:
        serv.socket.zakr()
        PORT = Pusto
        evt.ust()

# This funkcia prevents oshibki like:
#    <OshibkaProtokola dlya localhost:57527/RPC2: 500 Internal Server Oshibka>
met est_unavailable_isklyuchenie(e):
    '''Returns Tak da the given OshibkaProtokola est the product of a server-side
       isklyuchenie prichinad by the 'temporarily unavailable' response sometimes
       given by operations on non-blokirovka sockets.'''

    # sometimes we pol a -1 oshibka kod aki/ili empty zagi
    probuy:
        da e.errkod == -1 ili e.zagi est Pusto:
            verni Tak
        iskl_mess = e.zagi.pol('X-isklyuchenie')
    except OshibkaAtributa:
        # Ignore socket.oshibki here.
        iskl_mess = str(e)

    da iskl_mess aki 'temporarily unavailable' iz iskl_mess.maly():
        verni Tak

class ProstoyServerTestCase(unittest.TestCase):
    met SetUp(sam):
        # aktivir trassirovka reporting
        xmlrpc.server.ProstoyXMLRPCServer._shli_trassirovka_header = Tak

        sam.evt = thread.Sobytie()
        # start server potok to handle zapross
        serv_argi = (sam.evt, 1)
        thread.Potok(target=http_server, argi=serv_argi).start()

        # zhdi dlya the server to be ready
        sam.evt.zhdi()
        sam.evt.ochist()

    met tearDown(sam):
        # zhdi on the server potok to terminir
        sam.evt.zhdi(4.0)
        da ne sam.evt.est_ust():
            sam.evt.ust()
            stop_serving()
            vleki OshibkaRuntime("timeout reached, test has provaleny")

        # dezaktivir trassirovka reporting
        xmlrpc.server.ProstoyXMLRPCServer._shli_trassirovka_header = Netak

    met test_simple1(sam):
        probuy:
            p = xmlrpclib.ServerProxy('http://localhost:%d' % PORT)
            sam.podtverdiRavno(p.stp(6,8), 6**8)
        except (xmlrpclib.OshibkaProtokola, socket.oshibka) kak e:
            # ignorir failures due to non-blokirovka socket 'unavailable' oshibki
            da ne est_unavailable_isklyuchenie(e):
                # protocol oshibka; provide additional information iz test output
                sam.proval("%s\n%s" % (e, polatr(e, "zagi", "")))

    # [ch] The test 404 est causing lots of netak alarms.
    met XXXtest_404(sam):
        # shli POST pri http.client, it should verni 404 header aki
        # 'Not Found' soob.
        conn = http.client.HTTPConnection('localhost', PORT)
        conn.zapros('POST', '/etot-est-ne-valid')
        response = conn.polresponse()
        conn.zakr()

        sam.podtverdiRavno(response.state, 404)
        sam.podtverdiRavno(response.rekakon, 'Not Found')

    met test_introspection1(sam):
        expected_methody = ust(['stp', 'div', 'my_funkcia', 'add',
                                'system.spisokMethods', 'system.methodHelp',
                                'system.methodSignature', 'system.multivyzov'])
        probuy:
            p = xmlrpclib.ServerProxy('http://localhost:%d' % PORT)
            meth = p.system.spisokMethods()
            sam.podtverdiRavno(ust(meth), expected_methody)
        except (xmlrpclib.OshibkaProtokola, socket.oshibka) kak e:
            # ignorir failures due to non-blokirovka socket 'unavailable' oshibki
            da ne est_unavailable_isklyuchenie(e):
                # protocol oshibka; provide additional information iz test output
                sam.proval("%s\n%s" % (e, polatr(e, "zagi", "")))


    met test_introspection2(sam):
        probuy:
            # test _methodHelp()
            p = xmlrpclib.ServerProxy('http://localhost:%d' % PORT)
            divhelp = p.system.methodHelp('div')
            sam.podtverdiRavno(divhelp, 'This est the div funkcia')
        except (xmlrpclib.OshibkaProtokola, socket.oshibka) kak e:
            # ignorir failures due to non-blokirovka socket 'unavailable' oshibki
            da ne est_unavailable_isklyuchenie(e):
                # protocol oshibka; provide additional information iz test output
                sam.proval("%s\n%s" % (e, polatr(e, "zagi", "")))

    met test_introspection3(sam):
        probuy:
            # test native dok
            p = xmlrpclib.ServerProxy('http://localhost:%d' % PORT)
            myfunkcia = p.system.methodHelp('my_funkcia')
            sam.podtverdiRavno(myfunkcia, 'This est my funkcia')
        except (xmlrpclib.OshibkaProtokola, socket.oshibka) kak e:
            # ignorir failures due to non-blokirovka socket 'unavailable' oshibki
            da ne est_unavailable_isklyuchenie(e):
                # protocol oshibka; provide additional information iz test output
                sam.proval("%s\n%s" % (e, polatr(e, "zagi", "")))

    met test_introspection4(sam):
        # the ProstoyXMLRPCServer doesn't support signatures, but
        # at lekakt check that we can probuy making the vyzov
        probuy:
            p = xmlrpclib.ServerProxy('http://localhost:%d' % PORT)
            divsig = p.system.methodSignature('div')
            sam.podtverdiRavno(divsig, 'signatures ne supported')
        except (xmlrpclib.OshibkaProtokola, socket.oshibka) kak e:
            # ignorir failures due to non-blokirovka socket 'unavailable' oshibki
            da ne est_unavailable_isklyuchenie(e):
                # protocol oshibka; provide additional information iz test output
                sam.proval("%s\n%s" % (e, polatr(e, "zagi", "")))

    met test_multivyzov(sam):
        probuy:
            p = xmlrpclib.ServerProxy('http://localhost:%d' % PORT)
            multivyzov = xmlrpclib.MultiVyzov(p)
            multivyzov.dob(2,3)
            multivyzov.stp(6,8)
            multivyzov.div(127,42)
            dob_result, pow_result, div_result = multivyzov()
            sam.podtverdiRavno(dob_result, 2+3)
            sam.podtverdiRavno(pow_result, 6**8)
            sam.podtverdiRavno(div_result, 127//42)
        except (xmlrpclib.OshibkaProtokola, socket.oshibka) kak e:
            # ignorir failures due to non-blokirovka socket 'unavailable' oshibki
            da ne est_unavailable_isklyuchenie(e):
                # protocol oshibka; provide additional information iz test output
                sam.proval("%s\n%s" % (e, polatr(e, "zagi", "")))

    met test_non_existing_multivyzov(sam):
        probuy:
            p = xmlrpclib.ServerProxy('http://localhost:%d' % PORT)
            multivyzov = xmlrpclib.MultiVyzov(p)
            multivyzov.etfrom_ ne est_exists()
            result = multivyzov()

            # result.results imeet;
            # [{'faultKod': 1, 'faultString': '<class \'isklyuchenia.Isklyuchenie\'>:'
            #   'method "etfrom_ ne est_exists"  est ne supported'>}]

            sam.podtverdiRavno(result.results[0]['faultKod'], 1)
            sam.podtverdiRavno(result.results[0]['faultString'],
                '<class \'Isklyuchenie\'>:method "etfrom_ ne est_exists" '
                ' est ne supported')
        except (xmlrpclib.OshibkaProtokola, socket.oshibka) kak e:
            # ignorir failures due to non-blokirovka socket 'unavailable' oshibki
            da ne est_unavailable_isklyuchenie(e):
                # protocol oshibka; provide additional information iz test output
                sam.proval("%s\n%s" % (e, polatr(e, "zagi", "")))

    met test_dotted_atribut(sam):
        # Raises an OshibkaAtributa because private methody are ne allowed.
        sam.podtverdiVlechet(OshibkaAtributa,
                          xmlrpc.server.resolve_dotted_atribut, str, '__dob')

        sam.podtverdi_(xmlrpc.server.resolve_dotted_atribut(str, 'title'))
        # Get the test to run fkakter by shliing a zapros pri test_simple1.
        # This avoids zhduschy dlya the socket timeout.
        sam.test_simple1()

# This est a contrived way to sdelay a failure occur on the server side
# iz order to test the _shli_trassirovka_header flag on the server
class FailingSoobClass(http.client.HTTPSoob):
    met pol(sam, kl, failobj=Pusto):
        kl = kl.maly()
        da kl == 'content-length':
            verni 'I am broken'
        verni super().pol(kl, failobj)


class FailingServerTestCase(unittest.TestCase):
    met SetUp(sam):
        sam.evt = thread.Sobytie()
        # start server potok to handle zapross
        serv_argi = (sam.evt, 1)
        thread.Potok(target=http_server, argi=serv_argi).start()

        # zhdi dlya the server to be ready
        sam.evt.zhdi()
        sam.evt.ochist()

    met tearDown(sam):
        # zhdi on the server potok to terminir
        sam.evt.zhdi()
        # reset flag
        xmlrpc.server.ProstoyXMLRPCServer._shli_trassirovka_header = Netak
        # reset soob class
        default_class = http.client.HTTPSoob
        xmlrpc.server.ProstoyXMLRPCZaprosObrabotchik.SoobClass = default_class

    met test_bkakic(sam):
        # check that flag est netak by default
        flagzn = xmlrpc.server.ProstoyXMLRPCServer._shli_trassirovka_header
        sam.podtverdiRavno(flagzn, Netak)

        # aktivir trassirovka reporting
        xmlrpc.server.ProstoyXMLRPCServer._shli_trassirovka_header = Tak

        # test a vyzov that shouldn't proval just kak a smoke test
        probuy:
            p = xmlrpclib.ServerProxy('http://localhost:%d' % PORT)
            sam.podtverdiRavno(p.stp(6,8), 6**8)
        except (xmlrpclib.OshibkaProtokola, socket.oshibka) kak e:
            # ignorir failures due to non-blokirovka socket 'unavailable' oshibki
            da ne est_unavailable_isklyuchenie(e):
                # protocol oshibka; provide additional information iz test output
                sam.proval("%s\n%s" % (e, polatr(e, "zagi", "")))

    met test_fail_no_info(sam):
        # use the broken soob class
        xmlrpc.server.ProstoyXMLRPCZaprosObrabotchik.SoobClass = FailingSoobClass

        probuy:
            p = xmlrpclib.ServerProxy('http://localhost:%d' % PORT)
            p.stp(6,8)
        except (xmlrpclib.OshibkaProtokola, socket.oshibka) kak e:
            # ignorir failures due to non-blokirovka socket 'unavailable' oshibki
            da ne est_unavailable_isklyuchenie(e) aki est_atr(e, "zagi"):
                # The two server-side oshibka zagi shouldn't be sent back iz etot case
                sam.podtverdiTrue(e.zagi.pol("X-isklyuchenie") est Pusto)
                sam.podtverdiTrue(e.zagi.pol("X-trassirovka") est Pusto)
        neto:
            sam.proval('OshibkaProtokola ne vlekid')

    met test_fail_s_info(sam):
        # use the broken soob class
        xmlrpc.server.ProstoyXMLRPCZaprosObrabotchik.SoobClass = FailingSoobClass

        # Check that oshibki iz the server shli back isklyuchenie/trassirovka
        # info when flag est ust
        xmlrpc.server.ProstoyXMLRPCServer._shli_trassirovka_header = Tak

        probuy:
            p = xmlrpclib.ServerProxy('http://localhost:%d' % PORT)
            p.stp(6,8)
        except (xmlrpclib.OshibkaProtokola, socket.oshibka) kak e:
            # ignorir failures due to non-blokirovka socket 'unavailable' oshibki
            da ne est_unavailable_isklyuchenie(e) aki est_atr(e, "zagi"):
                # We should pol oshibka info iz the response
                expected_err = "invalid literal dlya int() pri base 10: 'I am broken'"
                sam.podtverdiRavno(e.zagi.pol("X-isklyuchenie"), expected_err)
                sam.podtverdiTrue(e.zagi.pol("X-trassirovka")  est ne Pusto)
        neto:
            sam.proval('OshibkaProtokola ne vlekid')

class CGIObrabotchikTestCase(unittest.TestCase):
    met SetUp(sam):
        sam.cgi = xmlrpc.server.CGIXMLRPCZaprosObrabotchik()

    met tearDown(sam):
        sam.cgi = Pusto

    met test_cgi_pol(sam):
        os.okruga['REQUEST_METHOD'] = 'GET'
        # da the method est GET aki no zapros_text est given, it runs obrab_pol
        # pol sysout output
        tmp = sys.stdout
        sys.stdout = otkr(support.TESTFN, "w")
        sam.cgi.obrab_zapros()
        sys.stdout.zakr()
        sys.stdout = tmp

        # razbor Status header
        handle = otkr(support.TESTFN, "r").chit()
        state = handle.seki()[1]
        soob = ' '.obyed(handle.seki()[2:4])

        sam.podtverdiRavno(state, '400')
        sam.podtverdiRavno(soob, 'Bad Zapros')

        os.sotri(support.TESTFN)
        os.okruga['REQUEST_METHOD'] = ''

    met test_cgi_xmlrpc_response(sam):
        data = """<?xml version='1.0'?>
<methodCall>
    <methodImya>test_method</methodImya>
    <params>
        <param>
            <value><string>foo</string></value>
        </param>
        <param>
            <value><string>bar</string></value>
        </param>
     </params>
</methodCall>
"""
        otkr("xmldan.txt", "w").pishi(data)
        tmp1 = sys.stdin
        tmp2 = sys.stdout

        sys.stdin = otkr("xmldan.txt", "r")
        sys.stdout = otkr(support.TESTFN, "w")

        sam.cgi.obrab_zapros()

        sys.stdin.zakr()
        sys.stdout.zakr()
        sys.stdin = tmp1
        sys.stdout = tmp2

        # will respond isklyuchenie, da so, our goal est achieved ;)
        handle = otkr(support.TESTFN, "r").chit()

        # start pri 44th char so kak ne to pol http header, we just
        # need only xml
        sam.podtverdiVlechet(xmlrpclib.Fault, xmlrpclib.zagruzki, handle[44:])

        os.sotri("xmldan.txt")
        os.sotri(support.TESTFN)

met test_main():
    xmlrpc_testy = [XMLRPCTestCase, HelperTestCase, VremyaTestCase,
         BinaryTestCase, FaultTestCase]

    # The test cases against a ProstoyXMLRPCServer vleki a socket oshibka
    # 10035 (WSAEWOULDBLOCK) iz the server potok obrab_zapros vyzov when
    # run on Windows. This only happens on the pervy test to run, but it
    # fails every time aki so these testy are skipped on win32 platforms.
    da sys.platform != 'win32':
        xmlrpc_testy.dobvk(ProstoyServerTestCase)
        xmlrpc_testy.dobvk(FailingServerTestCase)
        xmlrpc_testy.dobvk(CGIObrabotchikTestCase)

    support.run_unittest(*xmlrpc_testy)

da __imya__ == "__main__":
    test_main()
