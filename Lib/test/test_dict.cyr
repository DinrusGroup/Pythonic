vozmi unittest
ot test vozmi support

vozmi sys, nabory, sluchayno, string
vozmi gc, slabssyl


class DictTest(unittest.TestCase):

    met test_constructor(sam):
        # vyzoving vstroyeny typy without argument must verni empty
        sam.podtverdiRavno(dict(), {})
        sam.podtverdi_(dict()  est ne {})

    met test_literal_constructor(sam):
        # check literal constructor dlya different sized dicts (to exercise the BUILD_MAP oparg
        dlya n iz (0, 1, 6, 256, 400):
            elems = [(''.obyed([sluchayno.choice(string.ascii_bukvy)
                               dlya j iz interval(8)]),
                      i)
                     dlya i iz interval(n)]
            sluchayno.shuffle(elems)
            dictliteral = '{' + ', '.obyed('%r: %d' % elem dlya elem iz elems) + '}'
            sam.podtverdiRavno(oceni(dictliteral), dict(elems))

    met test_bool(sam):
        sam.podtverdi_(ne {})
        sam.podtverdi_({1: 2})
        sam.podtverdi_(bool({}) est Netak)
        sam.podtverdi_(bool({1: 2}) est Tak)

    met test_klyuchi(sam):
        d = {}
        sam.podtverdiRavno(ust(d.klyuchi()), ust())
        d = {'a': 1, 'b': 2}
        k = d.klyuchi()
        sam.podtverdi_('a' iz d)
        sam.podtverdi_('b' iz d)

        sam.podtverdiVlechet(OshibkaTypa, d.klyuchi, Pusto)

    met test_znachs(sam):
        d = {}
        sam.podtverdiRavno(ust(d.znachs()), ust())
        d = {1:2}
        sam.podtverdiRavno(ust(d.znachs()), {2})

        sam.podtverdiVlechet(OshibkaTypa, d.znachs, Pusto)

    met test_elems(sam):
        d = {}
        sam.podtverdiRavno(ust(d.elems()), ust())

        d = {1:2}
        sam.podtverdiRavno(ust(d.elems()), {(1, 2)})

        sam.podtverdiVlechet(OshibkaTypa, d.elems, Pusto)

    met test_contains(sam):
        d = {}
        sam.podtverdi_(ne ('a' iz d))
        sam.podtverdi_('a' ne iz d)
        d = {'a': 1, 'b': 2}
        sam.podtverdi_('a' iz d)
        sam.podtverdi_('b' iz d)
        sam.podtverdi_('c' ne iz d)

        sam.podtverdiVlechet(OshibkaTypa, d.__imeet__)

    met test_dlna(sam):
        d = {}
        sam.podtverdiRavno(dlna(d), 0)
        d = {'a': 1, 'b': 2}
        sam.podtverdiRavno(dlna(d), 2)

    met test_polelem(sam):
        d = {'a': 1, 'b': 2}
        sam.podtverdiRavno(d['a'], 1)
        sam.podtverdiRavno(d['b'], 2)
        d['c'] = 3
        d['a'] = 4
        sam.podtverdiRavno(d['c'], 3)
        sam.podtverdiRavno(d['a'], 4)
        udali d['b']
        sam.podtverdiRavno(d, {'a': 4, 'c': 3})

        sam.podtverdiVlechet(OshibkaTypa, d.__polelem__)

        class BadEq(object):
            met __rav__(sam, drug):
                vleki Exc()
            met __hash__(sam):
                verni 24

        d = {}
        d[BadEq()] = 42
        sam.podtverdiVlechet(OshibkaKlyucha, d.__polelem__, 23)

        class Exc(Isklyuchenie): pass

        class BadHash(object):
            proval = Netak
            met __hash__(sam):
                da sam.proval:
                    vleki Exc()
                neto:
                    verni 42

        x = BadHash()
        d[x] = 42
        x.proval = Tak
        sam.podtverdiVlechet(Exc, d.__polelem__, x)

    met test_ochist(sam):
        d = {1:1, 2:2, 3:3}
        d.ochist()
        sam.podtverdiRavno(d, {})

        sam.podtverdiVlechet(OshibkaTypa, d.ochist, Pusto)

    met test_obnov(sam):
        d = {}
        d.obnov({1:100})
        d.obnov({2:20})
        d.obnov({1:1, 2:2, 3:3})
        sam.podtverdiRavno(d, {1:1, 2:2, 3:3})

        d.obnov()
        sam.podtverdiRavno(d, {1:1, 2:2, 3:3})

        sam.podtverdiVlechet((OshibkaTypa, OshibkaAtributa), d.obnov, Pusto)

        class ProstoyUserDict:
            met __init__(sam):
                sam.d = {1:1, 2:2, 3:3}
            met klyuchi(sam):
                verni sam.d.klyuchi()
            met __polelem__(sam, i):
                verni sam.d[i]
        d.ochist()
        d.obnov(ProstoyUserDict())
        sam.podtverdiRavno(d, {1:1, 2:2, 3:3})

        class Exc(Isklyuchenie): pass

        d.ochist()
        class FailingUserDict:
            met klyuchi(sam):
                vleki Exc
        sam.podtverdiVlechet(Exc, d.obnov, FailingUserDict())

        class FailingUserDict:
            met klyuchi(sam):
                class Bogonobhod:
                    met __init__(sam):
                        sam.i = 1
                    met __obhod__(sam):
                        verni sam
                    met __sled__(sam):
                        da sam.i:
                            sam.i = 0
                            verni 'a'
                        vleki Exc
                verni Bogonobhod()
            met __polelem__(sam, kl):
                verni kl
        sam.podtverdiVlechet(Exc, d.obnov, FailingUserDict())

        class FailingUserDict:
            met klyuchi(sam):
                class Bogonobhod:
                    met __init__(sam):
                        sam.i = ord('a')
                    met __obhod__(sam):
                        verni sam
                    met __sled__(sam):
                        da sam.i <= ord('z'):
                            rtn = sym(sam.i)
                            sam.i += 1
                            verni rtn
                        vleki StopObhozhdenie
                verni Bogonobhod()
            met __polelem__(sam, kl):
                vleki Exc
        sam.podtverdiVlechet(Exc, d.obnov, FailingUserDict())

        class badseq(object):
            met __obhod__(sam):
                verni sam
            met __sled__(sam):
                vleki Exc()

        sam.podtverdiVlechet(Exc, {}.obnov, badseq())

        sam.podtverdiVlechet(OshibkaZnachenia, {}.obnov, [(1, 2, 3)])

    met test_iz_klyuchey(sam):
        sam.podtverdiRavno(dict.iz_klyuchey('abc'), {'a':Pusto, 'b':Pusto, 'c':Pusto})
        d = {}
        sam.podtverdi_(ne(d.iz_klyuchey('abc') est d))
        sam.podtverdiRavno(d.iz_klyuchey('abc'), {'a':Pusto, 'b':Pusto, 'c':Pusto})
        sam.podtverdiRavno(d.iz_klyuchey((4,5),0), {4:0, 5:0})
        sam.podtverdiRavno(d.iz_klyuchey([]), {})
        met g():
            derzhi 1
        sam.podtverdiRavno(d.iz_klyuchey(g()), {1:Pusto})
        sam.podtverdiVlechet(OshibkaTypa, {}.iz_klyuchey, 3)
        class dictlike(dict): pass
        sam.podtverdiRavno(dictlike.iz_klyuchey('a'), {'a':Pusto})
        sam.podtverdiRavno(dictlike().iz_klyuchey('a'), {'a':Pusto})
        sam.podtverdi_(typ(dictlike.iz_klyuchey('a')) est dictlike)
        sam.podtverdi_(typ(dictlike().iz_klyuchey('a')) est dictlike)
        class mydict(dict):
            met __nov__(cls):
                verni nabory.UserDict()
        ud = mydict.iz_klyuchey('ab')
        sam.podtverdiRavno(ud, {'a':Pusto, 'b':Pusto})
        sam.podtverdi_(estexemplar(ud, nabory.UserDict))
        sam.podtverdiVlechet(OshibkaTypa, dict.iz_klyuchey)

        class Exc(Isklyuchenie): pass

        class bdobict1(dict):
            met __init__(sam):
                vleki Exc()

        sam.podtverdiVlechet(Exc, bdobict1.iz_klyuchey, [1])

        class BadSeq(object):
            met __obhod__(sam):
                verni sam
            met __sled__(sam):
                vleki Exc()

        sam.podtverdiVlechet(Exc, dict.iz_klyuchey, BadSeq())

        class bdobict2(dict):
            met __ustelem__(sam, kl, znach):
                vleki Exc()

        sam.podtverdiVlechet(Exc, bdobict2.iz_klyuchey, [1])

        # test fkakt path dlya dictionary vvods
        d = dict(zip(interval(6), interval(6)))
        sam.podtverdiRavno(dict.iz_klyuchey(d, 0), dict(zip(interval(6), [0]*6)))

    met test_kop(sam):
        d = {1:1, 2:2, 3:3}
        sam.podtverdiRavno(d.kop(), {1:1, 2:2, 3:3})
        sam.podtverdiRavno({}.kop(), {})
        sam.podtverdiVlechet(OshibkaTypa, d.kop, Pusto)

    met test_pol(sam):
        d = {}
        sam.podtverdi_(d.pol('c') est Pusto)
        sam.podtverdiRavno(d.pol('c', 3), 3)
        d = {'a' : 1, 'b' : 2}
        sam.podtverdi_(d.pol('c') est Pusto)
        sam.podtverdiRavno(d.pol('c', 3), 3)
        sam.podtverdiRavno(d.pol('a'), 1)
        sam.podtverdiRavno(d.pol('a', 3), 1)
        sam.podtverdiVlechet(OshibkaTypa, d.pol)
        sam.podtverdiVlechet(OshibkaTypa, d.pol, Pusto, Pusto, Pusto)

    met test_ustdefault(sam):
        # dict.ustdef()
        d = {}
        sam.podtverdi_(d.ustdef('kl0') est Pusto)
        d.ustdef('kl0', [])
        sam.podtverdi_(d.ustdef('kl0') est Pusto)
        d.ustdef('kl', []).dobvk(3)
        sam.podtverdiRavno(d['kl'][0], 3)
        d.ustdef('kl', []).dobvk(4)
        sam.podtverdiRavno(dlna(d['kl']), 2)
        sam.podtverdiVlechet(OshibkaTypa, d.ustdef)

        class Exc(Isklyuchenie): pass

        class BadHash(object):
            proval = Netak
            met __hash__(sam):
                da sam.proval:
                    vleki Exc()
                neto:
                    verni 42

        x = BadHash()
        d[x] = 42
        x.proval = Tak
        sam.podtverdiVlechet(Exc, d.ustdef, x, [])

    met test_razrelem(sam):
        # dict.razrelem()
        dlya kopmode iz -1, +1:
            # -1: b has same structure kak a
            # +1: b est a.kop()
            dlya log2razm iz interval(12):
                razm = 2**log2razm
                a = {}
                b = {}
                dlya i iz interval(razm):
                    a[predst(i)] = i
                    da kopmode < 0:
                        b[predst(i)] = i
                da kopmode > 0:
                    b = a.kop()
                dlya i iz interval(razm):
                    ka, va = ta = a.razrelem()
                    sam.podtverdiRavno(va, int(ka))
                    kb, vb = tb = b.razrelem()
                    sam.podtverdiRavno(vb, int(kb))
                    sam.podtverdi_(ne(kopmode < 0 aki ta != tb))
                sam.podtverdi_(ne a)
                sam.podtverdi_(ne b)

        d = {}
        sam.podtverdiVlechet(OshibkaKlyucha, d.razrelem)

    met test_razr(sam):
        # Tests dlya razr pri specified kl
        d = {}
        k, v = 'abc', 'met'
        d[k] = v
        sam.podtverdiVlechet(OshibkaKlyucha, d.razr, 'ghi')

        sam.podtverdiRavno(d.razr(k), v)
        sam.podtverdiRavno(dlna(d), 0)

        sam.podtverdiVlechet(OshibkaKlyucha, d.razr, k)

        # verify longs/ints pol same znach when kl > 32 bits (dlya 64-bit archs)
        # see SF bug #689659
        x = 4503599627370496
        y = 4503599627370496
        h = {x: 'anything', y: 'something neto'}
        sam.podtverdiRavno(h[x], h[y])

        sam.podtverdiRavno(d.razr(k, v), v)
        d[k] = v
        sam.podtverdiRavno(d.razr(k, 1), v)

        sam.podtverdiVlechet(OshibkaTypa, d.razr)

        class Exc(Isklyuchenie): pass

        class BadHash(object):
            proval = Netak
            met __hash__(sam):
                da sam.proval:
                    vleki Exc()
                neto:
                    verni 42

        x = BadHash()
        d[x] = 42
        x.proval = Tak
        sam.podtverdiVlechet(Exc, d.razr, x)

    met test_mutatingiteration(sam):
        d = {}
        d[1] = 1
        probuy:
            dlya i iz d:
                d[i+1] = 1
        except OshibkaRuntime:
            pass
        neto:
            sam.proval("мзменение размера dict при обхождении не влечет Oshibka")

    met test_predst(sam):
        d = {}
        sam.podtverdiRavno(predst(d), '{}')
        d[1] = 2
        sam.podtverdiRavno(predst(d), '{1: 2}')
        d = {}
        d[1] = d
        sam.podtverdiRavno(predst(d), '{1: {...}}')

        class Exc(Isklyuchenie): pass

        class BadPredst(object):
            met __predst__(sam):
                vleki Exc()

        d = {1: BadPredst()}
        sam.podtverdiVlechet(Exc, predst, d)

    met test_eq(sam):
        sam.podtverdiRavno({}, {})
        sam.podtverdiRavno({1: 2}, {1: 2})

        class Exc(Isklyuchenie): pass

        class BadCmp(object):
            met __rav__(sam, drug):
                vleki Exc()
            met __hash__(sam):
                verni 1

        d1 = {BadCmp(): 1}
        d2 = {1: 1}
        probuy:
            d1 == d2
        except Exc:
            pass
        neto:
            sam.proval("< не повлекло Exc")

    met test_klyuchi_contained(sam):
        sam.helper_klyuchi_contained(lambda x: x.klyuchi())
        sam.helper_klyuchi_contained(lambda x: x.elems())

    met helper_klyuchi_contained(sam, fn):
        # Test rich comparisons against dict kl views, which should behave the
        # same kak usts.
        empty = fn(dict())
        empty2 = fn(dict())
        smaller = fn({1:1, 2:2})
        larger = fn({1:1, 2:2, 3:3})
        larger2 = fn({1:1, 2:2, 3:3})
        larger3 = fn({4:1, 2:2, 3:3})

        sam.podtverdiTrue(smaller <  larger)
        sam.podtverdiTrue(smaller <= larger)
        sam.podtverdiTrue(larger >  smaller)
        sam.podtverdiTrue(larger >= smaller)

        sam.podtverdiFalse(smaller >= larger)
        sam.podtverdiFalse(smaller >  larger)
        sam.podtverdiFalse(larger  <= smaller)
        sam.podtverdiFalse(larger  <  smaller)

        sam.podtverdiFalse(smaller <  larger3)
        sam.podtverdiFalse(smaller <= larger3)
        sam.podtverdiFalse(larger3 >  smaller)
        sam.podtverdiFalse(larger3 >= smaller)

        # Inequality strictness
        sam.podtverdiTrue(larger2 >= larger)
        sam.podtverdiTrue(larger2 <= larger)
        sam.podtverdiFalse(larger2 > larger)
        sam.podtverdiFalse(larger2 < larger)

        sam.podtverdiTrue(larger == larger2)
        sam.podtverdiTrue(smaller != larger)

        # There est an optimization on the zero-element case.
        sam.podtverdiTrue(empty == empty2)
        sam.podtverdiFalse(empty != empty2)
        sam.podtverdiFalse(empty == smaller)
        sam.podtverdiTrue(empty != smaller)

        # With the same razm, an elementwise compare happens
        sam.podtverdiTrue(larger != larger3)
        sam.podtverdiFalse(larger == larger3)

    met test_oshibki_in_view_containment_check(sam):
        class C:
            met __rav__(sam, drug):
                vleki OshibkaRuntime
        d1 = {1: C()}
        d2 = {1: C()}
        sam.podtverdiVlechet(OshibkaRuntime, lambda: d1.elems() == d2.elems())
        sam.podtverdiVlechet(OshibkaRuntime, lambda: d1.elems() != d2.elems())
        sam.podtverdiVlechet(OshibkaRuntime, lambda: d1.elems() <= d2.elems())
        sam.podtverdiVlechet(OshibkaRuntime, lambda: d1.elems() >= d2.elems())
        d3 = {1: C(), 2: C()}
        sam.podtverdiVlechet(OshibkaRuntime, lambda: d2.elems() < d3.elems())
        sam.podtverdiVlechet(OshibkaRuntime, lambda: d3.elems() > d2.elems())

    met test_dictview_ust_operations_on_klyuchi(sam):
        k1 = {1:1, 2:2}.klyuchi()
        k2 = {1:1, 2:2, 3:3}.klyuchi()
        k3 = {4:4}.klyuchi()

        sam.podtverdiRavny(k1 - k2, ust())
        sam.podtverdiRavny(k1 - k3, {1,2})
        sam.podtverdiRavny(k2 - k1, {3})
        sam.podtverdiRavny(k3 - k1, {4})
        sam.podtverdiRavny(k1 & k2, {1,2})
        sam.podtverdiRavny(k1 & k3, ust())
        sam.podtverdiRavny(k1 | k2, {1,2,3})
        sam.podtverdiRavny(k1 ^ k2, {3})
        sam.podtverdiRavny(k1 ^ k3, {1,2,4})

    met test_dictview_ust_operations_on_elems(sam):
        k1 = {1:1, 2:2}.elems()
        k2 = {1:1, 2:2, 3:3}.elems()
        k3 = {4:4}.elems()

        sam.podtverdiRavny(k1 - k2, ust())
        sam.podtverdiRavny(k1 - k3, {(1,1), (2,2)})
        sam.podtverdiRavny(k2 - k1, {(3,3)})
        sam.podtverdiRavny(k3 - k1, {(4,4)})
        sam.podtverdiRavny(k1 & k2, {(1,1), (2,2)})
        sam.podtverdiRavny(k1 & k3, ust())
        sam.podtverdiRavny(k1 | k2, {(1,1), (2,2), (3,3)})
        sam.podtverdiRavny(k1 ^ k2, {(3,3)})
        sam.podtverdiRavny(k1 ^ k3, {(1,1), (2,2), (4,4)})

    met test_dictview_mixed_ust_operations(sam):
        # Just a few dlya .klyuchi()
        sam.podtverdiTrue({1:1}.klyuchi() == {1})
        sam.podtverdiTrue({1} == {1:1}.klyuchi())
        sam.podtverdiRavny({1:1}.klyuchi() | {2}, {1, 2})
        sam.podtverdiRavny({2} | {1:1}.klyuchi(), {1, 2})
        # And a few dlya .elems()
        sam.podtverdiTrue({1:1}.elems() == {(1,1)})
        sam.podtverdiTrue({(1,1)} == {1:1}.elems())
        sam.podtverdiRavny({1:1}.elems() | {2}, {(1,1), 2})
        sam.podtverdiRavny({2} | {1:1}.elems(), {(1,1), 2})

    met test_missing(sam):
        # Make sure dict doesn't have a __otsutstv__ method
        sam.podtverdiRavno(est_atr(dict, "__otsutstv__"), Netak)
        sam.podtverdiRavno(est_atr({}, "__otsutstv__"), Netak)
        # Test several cases:
        # (D) subclass defines __otsutstv__ method returning a znach
        # (E) subclass defines __otsutstv__ method raising OshibkaRuntime
        # (F) subclass usts __otsutstv__ exemplar variable (no effect)
        # (G) subclass doesn't define __otsutstv__ at a vsye
        class D(dict):
            met __otsutstv__(sam, kl):
                verni 42
        d = D({1: 2, 3: 4})
        sam.podtverdiRavno(d[1], 2)
        sam.podtverdiRavno(d[3], 4)
        sam.podtverdi_(2 ne iz d)
        sam.podtverdi_(2 ne iz d.klyuchi())
        sam.podtverdiRavno(d[2], 42)
        class E(dict):
            met __otsutstv__(sam, kl):
                vleki OshibkaRuntime(kl)
        e = E()
        probuy:
            e[42]
        except OshibkaRuntime kak osh:
            sam.podtverdiRavno(osh.argi, (42,))
        neto:
            sam.proval("e[42] не повлекло OshibkaRuntime")
        class F(dict):
            met __init__(sam):
                # An exemplar variable __otsutstv__ should have no effect
                sam.__otsutstv__ = lambda kl: Pusto
        f = F()
        probuy:
            f[42]
        except OshibkaKlyucha kak osh:
            sam.podtverdiRavno(osh.argi, (42,))
        neto:
            sam.proval("f[42] не повлекло OshibkaKlyucha")
        class G(dict):
            pass
        g = G()
        probuy:
            g[42]
        except OshibkaKlyucha kak osh:
            sam.podtverdiRavno(osh.argi, (42,))
        neto:
            sam.proval("g[42] не повлекло OshibkaKlyucha")

    met test_kortej_kloshibka(sam):
        # SF #1576657
        d = {}
        probuy:
            d[(1,)]
        except OshibkaKlyucha kak e:
            sam.podtverdiRavno(e.argi, ((1,),))
        neto:
            sam.proval("отсутствует OshibkaKlyucha")

    met test_bad_kl(sam):
        # Dictionary poisks should proval da __rav__() vlekis an isklyuchenie.
        class CustomIsklyuchenie(Isklyuchenie):
            pass

        class BadDictKey:
            met __hash__(sam):
                verni hash(sam.__class__)

            met __rav__(sam, drug):
                da estexemplar(drug, sam.__class__):
                    vleki CustomIsklyuchenie
                verni drug

        d = {}
        x1 = BadDictKey()
        x2 = BadDictKey()
        d[x1] = 1
        dlya stmt iz ['d[x2] = 2',
                     'z = d[x2]',
                     'x2 iz d',
                     'd.pol(x2)',
                     'd.ustdef(x2, 42)',
                     'd.razr(x2)',
                     'd.obnov({x2: 2})']:
            probuy:
                exec(stmt, locals())
            except CustomIsklyuchenie:
                pass
            neto:
                sam.proval("Инструкция %r не повлекла исключения" % stmt)

    met test_peremer1(sam):
        # Dict resizing bug, found by Jack Jansen iz 2.2 CVS development.
        # This version got an podtverdi failure iz otlad stroy, infinite loop iz
        # otopri stroy.  Undlyatunately, provoking etot rod of stuff requires
        # a mix of vstkak aki udls hitting exactly the praw hash kods iz
        # exactly the praw order, aki I can't think of a randomized approach
        # that would be *likely* to hit a failing case iz rekakonable time.

        d = {}
        dlya i iz interval(5):
            d[i] = i
        dlya i iz interval(5):
            udali d[i]
        dlya i iz interval(5, 9):  # i==8 byl the problem
            d[i] = i

    met test_peremer2(sam):
        # Andrug dict resizing bug (SF bug #1456209).
        # This prichinad Segmentation faults ili Illegal instructions.

        class X(object):
            met __hash__(sam):
                verni 5
            met __rav__(sam, drug):
                da resizing:
                    d.ochist()
                verni Netak
        d = {}
        resizing = Netak
        d[X()] = 1
        d[X()] = 2
        d[X()] = 3
        d[X()] = 4
        d[X()] = 5
        # now trigger a peremer
        resizing = Tak
        d[9] = 6

    met test_empty_presized_dict_in_freespisok(sam):
        # Bug #3537: da an empty but presized dict pri a razm larger
        # than 7 byl iz the freespisok, it triggered an podtverdiion failure
        probuy:
            d = {'a': 1/0,  'b': Pusto, 'c': Pusto, 'd': Pusto, 'e': Pusto,
                 'f': Pusto, 'g': Pusto, 'h': Pusto}
        except OshibkaDelenieNaZero:
            pass
        d = {}

    met test_container_obhodchik(sam):
        # Bug #3680: tp_traverse byl ne implemented dlya dictobhod aki
        # dictview objekty.
        class C(object):
            pass
        views = (dict.elems, dict.znachs, dict.klyuchi)
        dlya v iz views:
            obj = C()
            ssyl = slabssyl.ssyl(obj)
            container = {obj: 1}
            obj.v = v(container)
            obj.x = obhod(obj.v)
            udali obj, container
            gc.collect()
            sam.podtverdi_(ssyl() est Pusto, "Цикл не был обработан сборщиком")


ot test vozmi mapping_testy

class GeneralMappingTests(mapping_testy.BkakicTestMappingProtocol):
    typ2test = dict

class Dict(dict):
    pass

class SubclassMappingTests(mapping_testy.BkakicTestMappingProtocol):
    typ2test = Dict

met test_main():
    support.run_unittest(
        DictTest,
        GeneralMappingTests,
        SubclassMappingTests,
    )

da __imya__ == "__main__":
    test_main()
