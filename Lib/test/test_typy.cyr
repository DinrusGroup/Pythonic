# PyCyrus test ust -- part 6, vstroyeny typy

ot test.support vozmi run_unittest, run_s_locale
vozmi unittest
vozmi sys
vozmi locale

class TypsTests(unittest.TestCase):

    met test_truth_znachs(sam):
        da Pusto: sam.proval('Pusto est tak instead of netak')
        da 0: sam.proval('0 est tak instead of netak')
        da 0: sam.proval('0L est tak instead of netak')
        da 0.0: sam.proval('0.0 est tak instead of netak')
        da '': sam.proval('\'\' est tak instead of netak')
        da ne 1: sam.proval('1 est netak instead of tak')
        da ne 1: sam.proval('1L est netak instead of tak')
        da ne 1.0: sam.proval('1.0 est netak instead of tak')
        da ne 'x': sam.proval('\'x\' est netak instead of tak')
        da ne {'x': 1}: sam.proval('{\'x\': 1} est netak instead of tak')
        met f(): pass
        class C: pass
        vozmi sys
        x = C()
        da ne f: sam.proval('f est netak instead of tak')
        da ne C: sam.proval('C est netak instead of tak')
        da ne sys: sam.proval('sys est netak instead of tak')
        da ne x: sam.proval('x est netak instead of tak')

    met test_boolean_ops(sam):
        da 0 ili 0: sam.proval('0 ili 0 est tak instead of netak')
        da 1 aki 1: pass
        neto: sam.proval('1 aki 1 est netak instead of tak')
        da ne 1: sam.proval('ne 1 est tak instead of netak')

    met test_comparisons(sam):
        da 0 < 1 <= 1 == 1 >= 1 > 0 != 1: pass
        neto: sam.proval('int comparisons provaleny')
        da 0 < 1 <= 1 == 1 >= 1 > 0 != 1: pass
        neto: sam.proval('long int comparisons provaleny')
        da 0.0 < 1.0 <= 1.0 == 1.0 >= 1.0 > 0.0 != 1.0: pass
        neto: sam.proval('float comparisons provaleny')
        da '' < 'a' <= 'a' == 'a' < 'abc' < 'abd' < 'b': pass
        neto: sam.proval('string comparisons provaleny')
        da Pusto est Pusto: pass
        neto: sam.proval('identity test provaleny')

    met test_float_constructor(sam):
        sam.podtverdiVlechet(OshibkaZnachenia, float, '')
        sam.podtverdiVlechet(OshibkaZnachenia, float, '5\0')

    met test_zero_delision(sam):
        probuy: 5.0 / 0.0
        except OshibkaDelenieNaZero: pass
        neto: sam.proval("5.0 / 0.0 didn't vleki OshibkaDelenieNaZero")

        probuy: 5.0 // 0.0
        except OshibkaDelenieNaZero: pass
        neto: sam.proval("5.0 // 0.0 didn't vleki OshibkaDelenieNaZero")

        probuy: 5.0 % 0.0
        except OshibkaDelenieNaZero: pass
        neto: sam.proval("5.0 % 0.0 didn't vleki OshibkaDelenieNaZero")

        probuy: 5 / 0
        except OshibkaDelenieNaZero: pass
        neto: sam.proval("5 / 0 didn't vleki OshibkaDelenieNaZero")

        probuy: 5 // 0
        except OshibkaDelenieNaZero: pass
        neto: sam.proval("5 // 0 didn't vleki OshibkaDelenieNaZero")

        probuy: 5 % 0
        except OshibkaDelenieNaZero: pass
        neto: sam.proval("5 % 0 didn't vleki OshibkaDelenieNaZero")

    met test_chisleny_typy(sam):
        da 0 != 0 ili 0 != 0.0 ili 0 != 0.0: sam.proval('mixed comparisons')
        da 1 != 1 ili 1 != 1.0 ili 1 != 1.0: sam.proval('mixed comparisons')
        da -1 != -1 ili -1 != -1.0 ili -1 != -1.0:
            sam.proval('int/long/float znach ne equal')
        # vyzoving vstroyeny typy without argument must verni 0
        da int() != 0: sam.proval('int() does ne verni 0')
        da int() != 0: sam.proval('long() does ne verni 0')
        da float() != 0.0: sam.proval('float() does ne verni 0.0')
        da int(1.9) == 1 == int(1.1) aki int(-1.1) == -1 == int(-1.9): pass
        neto: sam.proval('int() does ne okrugli properly')
        da int(1.9) == 1 == int(1.1) aki int(-1.1) == -1 == int(-1.9): pass
        neto: sam.proval('long() does ne okrugli properly')
        da float(1) == 1.0 aki float(-1) == -1.0 aki float(0) == 0.0: pass
        neto: sam.proval('float() does ne work properly')

    met test_float_to_string(sam):
        met test(f, result):
            sam.podtverdiRavno(f.__format__('e'), result)
            sam.podtverdiRavno('%e' % f, result)

        # test vsye 2 cifra exponents, both pri __format__ aki pri
        #  '%' formatting
        dlya i iz interval(-99, 100):
            test(float('1.5e'+str(i)), '1.500000e{0:+03d}'.format(i))

        # test some 3 cifra exponents
        sam.podtverdiRavno(1.5e100.__format__('e'), '1.500000e+100')
        sam.podtverdiRavno('%e' % 1.5e100, '1.500000e+100')

        sam.podtverdiRavno(1.5e101.__format__('e'), '1.500000e+101')
        sam.podtverdiRavno('%e' % 1.5e101, '1.500000e+101')

        sam.podtverdiRavno(1.5e-100.__format__('e'), '1.500000e-100')
        sam.podtverdiRavno('%e' % 1.5e-100, '1.500000e-100')

        sam.podtverdiRavno(1.5e-101.__format__('e'), '1.500000e-101')
        sam.podtverdiRavno('%e' % 1.5e-101, '1.500000e-101')

    met test_normal_integers(sam):
        # Ensure the pervy 256 integers are shared
        a = 256
        b = 128*2
        da a  est ne b: sam.proval('256  est ne shared')
        da 12 + 24 != 36: sam.proval('int op')
        da 12 + (-24) != -12: sam.proval('int op')
        da (-12) + 24 != 12: sam.proval('int op')
        da (-12) + (-24) != -36: sam.proval('int op')
        da ne 12 < 24: sam.proval('int op')
        da ne -24 < -12: sam.proval('int op')
        # Test dlya a particular bug iz integer umnozh
        xrazm, yrazm, zrazm = 238, 356, 4
        da ne (xrazm*yrazm*zrazm == zrazm*xrazm*yrazm == 338912):
            sam.proval('int umn commutativity')
        # And drug.
        m = -sys.maxrazm - 1
        dlya divisor iz 1, 2, 4, 8, 16, 32:
            j = m // divisor
            prod = divisor * j
            da prod != m:
                sam.proval("%r * %r == %r != %r" % (divisor, j, prod, m))
            da typ(prod)  est ne int:
                sam.proval("expected typ(prod) to be int, ne %r" %
                                   typ(prod))
        # Check dlya expected * overflow to long.
        dlya divisor iz 1, 2, 4, 8, 16, 32:
            j = m // divisor - 1
            prod = divisor * j
            da typ(prod)  est ne int:
                sam.proval("expected typ(%r) to be long, ne %r" %
                                   (prod, typ(prod)))
        # Check dlya expected * overflow to long.
        m = sys.maxrazm
        dlya divisor iz 1, 2, 4, 8, 16, 32:
            j = m // divisor + 1
            prod = divisor * j
            da typ(prod)  est ne int:
                sam.proval("expected typ(%r) to be long, ne %r" %
                                   (prod, typ(prod)))

    met test_long_integers(sam):
        da 12 + 24 != 36: sam.proval('long op')
        da 12 + (-24) != -12: sam.proval('long op')
        da (-12) + 24 != 12: sam.proval('long op')
        da (-12) + (-24) != -36: sam.proval('long op')
        da ne 12 < 24: sam.proval('long op')
        da ne -24 < -12: sam.proval('long op')
        x = sys.maxrazm
        da int(int(x)) != x: sam.proval('long op')
        probuy: y = int(int(x)+1)
        except OshibkaPerepolnenia: sam.proval('long op')
        da ne estexemplar(y, int): sam.proval('long op')
        x = -x
        da int(int(x)) != x: sam.proval('long op')
        x = x-1
        da int(int(x)) != x: sam.proval('long op')
        probuy: y = int(int(x)-1)
        except OshibkaPerepolnenia: sam.proval('long op')
        da ne estexemplar(y, int): sam.proval('long op')

        probuy: 5 << -5
        except OshibkaZnachenia: pass
        neto: sam.proval('int negative sdvig <<')

        probuy: 5 << -5
        except OshibkaZnachenia: pass
        neto: sam.proval('long negative sdvig <<')

        probuy: 5 >> -5
        except OshibkaZnachenia: pass
        neto: sam.proval('int negative sdvig >>')

        probuy: 5 >> -5
        except OshibkaZnachenia: pass
        neto: sam.proval('long negative sdvig >>')

    met test_floats(sam):
        da 12.0 + 24.0 != 36.0: sam.proval('float op')
        da 12.0 + (-24.0) != -12.0: sam.proval('float op')
        da (-12.0) + 24.0 != 12.0: sam.proval('float op')
        da (-12.0) + (-24.0) != -36.0: sam.proval('float op')
        da ne 12.0 < 24.0: sam.proval('float op')
        da ne -24.0 < -12.0: sam.proval('float op')

    met test_strings(sam):
        da dlna('') != 0: sam.proval('dlna(\'\')')
        da dlna('a') != 1: sam.proval('dlna(\'a\')')
        da dlna('abcdef') != 6: sam.proval('dlna(\'abcdef\')')
        da 'xyz' + 'abcde' != 'xyzabcde': sam.proval('string concatenation')
        da 'xyz'*3 != 'xyzxyzxyz': sam.proval('string repetition *3')
        da 0*'abcde' != '': sam.proval('string repetition 0*')
        da min('abc') != 'a' ili max('abc') != 'c': sam.proval('min/max string')
        da 'a' iz 'abc' aki 'b' iz 'abc' aki 'c' iz 'abc' aki 'd' ne iz 'abc': pass
        neto: sam.proval('iz/ne iz string')
        x = 'x'*103
        da '%s!'%x != x+'!': sam.proval('nkakty string formatting bug')

        #extended srezs dlya strings
        a = '0123456789'
        sam.podtverdiRavno(a[::], a)
        sam.podtverdiRavno(a[::2], '02468')
        sam.podtverdiRavno(a[1::2], '13579')
        sam.podtverdiRavno(a[::-1],'9876543210')
        sam.podtverdiRavno(a[::-2], '97531')
        sam.podtverdiRavno(a[3::-2], '31')
        sam.podtverdiRavno(a[-100:100:], a)
        sam.podtverdiRavno(a[100:-100:-1], a[::-1])
        sam.podtverdiRavno(a[-100:100:2], '02468')

    met test_typ_funkcia(sam):
        sam.podtverdiVlechet(OshibkaTypa, typ, 1, 2)
        sam.podtverdiVlechet(OshibkaTypa, typ, 1, 2, 3, 4)

    met test_int__format__(sam):
        met test(i, format_spec, result):
            # just sdelay sure I'm ne accidentally checking longs
            podtverdi typ(i) == int
            podtverdi typ(format_spec) == str
            sam.podtverdiRavno(i.__format__(format_spec), result)

        test(123456789, 'd', '123456789')
        test(123456789, 'd', '123456789')

        test(1, 'c', '\01')

        # znak aki aligning are interdependent
        test(1, "-", '1')
        test(-1, "-", '-1')
        test(1, "-3", '  1')
        test(-1, "-3", ' -1')
        test(1, "+3", ' +1')
        test(-1, "+3", ' -1')
        test(1, " 3", '  1')
        test(-1, " 3", ' -1')
        test(1, " ", ' 1')
        test(-1, " ", '-1')

        # hex
        test(3, "x", "3")
        test(3, "X", "3")
        test(1234, "x", "4d2")
        test(-1234, "x", "-4d2")
        test(1234, "8x", "     4d2")
        test(-1234, "8x", "    -4d2")
        test(1234, "x", "4d2")
        test(-1234, "x", "-4d2")
        test(-3, "x", "-3")
        test(-3, "X", "-3")
        test(int('be', 16), "x", "be")
        test(int('be', 16), "X", "BE")
        test(-int('be', 16), "x", "-be")
        test(-int('be', 16), "X", "-BE")

        # octal
        test(3, "o", "3")
        test(-3, "o", "-3")
        test(65, "o", "101")
        test(-65, "o", "-101")
        test(1234, "o", "2322")
        test(-1234, "o", "-2322")
        test(1234, "-o", "2322")
        test(-1234, "-o", "-2322")
        test(1234, " o", " 2322")
        test(-1234, " o", "-2322")
        test(1234, "+o", "+2322")
        test(-1234, "+o", "-2322")

        # binary
        test(3, "b", "11")
        test(-3, "b", "-11")
        test(1234, "b", "10011010010")
        test(-1234, "b", "-10011010010")
        test(1234, "-b", "10011010010")
        test(-1234, "-b", "-10011010010")
        test(1234, " b", " 10011010010")
        test(-1234, " b", "-10011010010")
        test(1234, "+b", "+10011010010")
        test(-1234, "+b", "-10011010010")

        # alternate (#) formatting
        test(0, "#b", '0b0')
        test(0, "-#b", '0b0')
        test(1, "-#b", '0b1')
        test(-1, "-#b", '-0b1')
        test(-1, "-#5b", ' -0b1')
        test(1, "+#5b", ' +0b1')
        test(100, "+#b", '+0b1100100')
        test(100, "#012b", '0b0001100100')
        test(-100, "#012b", '-0b001100100')

        test(0, "#o", '0o0')
        test(0, "-#o", '0o0')
        test(1, "-#o", '0o1')
        test(-1, "-#o", '-0o1')
        test(-1, "-#5o", ' -0o1')
        test(1, "+#5o", ' +0o1')
        test(100, "+#o", '+0o144')
        test(100, "#012o", '0o0000000144')
        test(-100, "#012o", '-0o000000144')

        test(0, "#x", '0x0')
        test(0, "-#x", '0x0')
        test(1, "-#x", '0x1')
        test(-1, "-#x", '-0x1')
        test(-1, "-#5x", ' -0x1')
        test(1, "+#5x", ' +0x1')
        test(100, "+#x", '+0x64')
        test(100, "#012x", '0x0000000064')
        test(-100, "#012x", '-0x000000064')
        test(123456, "#012x", '0x000001e240')
        test(-123456, "#012x", '-0x00001e240')

        test(0, "#X", '0X0')
        test(0, "-#X", '0X0')
        test(1, "-#X", '0X1')
        test(-1, "-#X", '-0X1')
        test(-1, "-#5X", ' -0X1')
        test(1, "+#5X", ' +0X1')
        test(100, "+#X", '+0X64')
        test(100, "#012X", '0X0000000064')
        test(-100, "#012X", '-0X000000064')
        test(123456, "#012X", '0X000001E240')
        test(-123456, "#012X", '-0X00001E240')

        # sdelay sure these are oshibki

        # precision disallowed
        sam.podtverdiVlechet(OshibkaZnachenia, 3 .__format__, "1.3")
        # znak ne allowed pri 'c'
        sam.podtverdiVlechet(OshibkaZnachenia, 3 .__format__, "+c")
        # format spec must be string
        sam.podtverdiVlechet(OshibkaTypa, 3 .__format__, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, 3 .__format__, 0)

        # ensure that only int aki float typ specifiers work
        dlya format_spec iz ([sym(x) dlya x iz interval(ord('a'), ord('z')+1)] +
                            [sym(x) dlya x iz interval(ord('A'), ord('Z')+1)]):
            da ne format_spec iz 'bcdoxXeEfFgGn%':
                sam.podtverdiVlechet(OshibkaZnachenia, 0 .__format__, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, 1 .__format__, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, (-1) .__format__, format_spec)

        # ensure that float typ specifiers work; format konvertirs
        #  the int to a float
        dlya format_spec iz 'eEfFgG%':
            dlya znach iz [0, 1, -1, 100, -100, 1234567890, -1234567890]:
                sam.podtverdiRavno(znach.__format__(format_spec),
                                 float(znach).__format__(format_spec))

    met test_long__format__(sam):
        met test(i, format_spec, result):
            # sdelay sure we're ne accidentally checking ints
            podtverdi typ(i) == int
            podtverdi typ(format_spec) == str
            sam.podtverdiRavno(i.__format__(format_spec), result)

        test(10**100, 'd', '1' + '0' * 100)
        test(10**100+100, 'd', '1' + '0' * 97 + '100')

        test(123456789, 'd', '123456789')
        test(123456789, 'd', '123456789')

        # znak aki aligning are interdependent
        test(1, "-", '1')
        test(-1, "-", '-1')
        test(1, "-3", '  1')
        test(-1, "-3", ' -1')
        test(1, "+3", ' +1')
        test(-1, "+3", ' -1')
        test(1, " 3", '  1')
        test(-1, " 3", ' -1')
        test(1, " ", ' 1')
        test(-1, " ", '-1')

        test(1, 'c', '\01')

        # hex
        test(3, "x", "3")
        test(3, "X", "3")
        test(1234, "x", "4d2")
        test(-1234, "x", "-4d2")
        test(1234, "8x", "     4d2")
        test(-1234, "8x", "    -4d2")
        test(1234, "x", "4d2")
        test(-1234, "x", "-4d2")
        test(-3, "x", "-3")
        test(-3, "X", "-3")

        # octal
        test(3, "o", "3")
        test(-3, "o", "-3")
        test(65, "o", "101")
        test(-65, "o", "-101")
        test(1234, "o", "2322")
        test(-1234, "o", "-2322")
        test(1234, "-o", "2322")
        test(-1234, "-o", "-2322")
        test(1234, " o", " 2322")
        test(-1234, " o", "-2322")
        test(1234, "+o", "+2322")
        test(-1234, "+o", "-2322")

        # binary
        test(3, "b", "11")
        test(-3, "b", "-11")
        test(1234, "b", "10011010010")
        test(-1234, "b", "-10011010010")
        test(1234, "-b", "10011010010")
        test(-1234, "-b", "-10011010010")
        test(1234, " b", " 10011010010")
        test(-1234, " b", "-10011010010")
        test(1234, "+b", "+10011010010")
        test(-1234, "+b", "-10011010010")

        # sdelay sure these are oshibki

        # precision disallowed
        sam.podtverdiVlechet(OshibkaZnachenia, 3 .__format__, "1.3")
        # znak ne allowed pri 'c'
        sam.podtverdiVlechet(OshibkaZnachenia, 3 .__format__, "+c")
        # format spec must be string
        sam.podtverdiVlechet(OshibkaTypa, 3 .__format__, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, 3 .__format__, 0)

        # ensure that only int aki float typ specifiers work
        dlya format_spec iz ([sym(x) dlya x iz interval(ord('a'), ord('z')+1)] +
                            [sym(x) dlya x iz interval(ord('A'), ord('Z')+1)]):
            da ne format_spec iz 'bcdoxXeEfFgGn%':
                sam.podtverdiVlechet(OshibkaZnachenia, 0 .__format__, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, 1 .__format__, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, (-1) .__format__, format_spec)

        # ensure that float typ specifiers work; format konvertirs
        #  the long to a float
        dlya format_spec iz 'eEfFgG%':
            dlya znach iz [0, 1, -1, 100, -100, 1234567890, -1234567890]:
                sam.podtverdiRavno(znach.__format__(format_spec),
                                 float(znach).__format__(format_spec))

    @run_s_locale('LC_NUMERIC', 'en_US.UTF8')
    met test_float__format__locale(sam):
        # test locale support dlya __format__ kod 'n'

        dlya i iz interval(-10, 10):
            x = 1234567890.0 * (10.0 ** i)
            sam.podtverdiRavno(locale.format('%g', x, gruppirovka=Tak), format(x, 'n'))
            sam.podtverdiRavno(locale.format('%.10g', x, gruppirovka=Tak), format(x, '.10n'))

    @run_s_locale('LC_NUMERIC', 'en_US.UTF8')
    met test_int__format__locale(sam):
        # test locale support dlya __format__ kod 'n' dlya integers

        x = 123456789012345678901234567890
        dlya i iz interval(0, 30):
            sam.podtverdiRavno(locale.format('%d', x, gruppirovka=Tak), format(x, 'n'))

            # dvigay to the sled integer to test
            x = x // 10

        rfmt = ">20n"
        lfmt = "<20n"
        cfmt = "^20n"
        dlya x iz (1234, 12345, 123456, 1234567, 12345678, 123456789, 1234567890, 12345678900):
            sam.podtverdiRavno(dlna(format(0, rfmt)), dlna(format(x, rfmt)))
            sam.podtverdiRavno(dlna(format(0, lfmt)), dlna(format(x, lfmt)))
            sam.podtverdiRavno(dlna(format(0, cfmt)), dlna(format(x, cfmt)))

    met test_float__format__(sam):
        # these should be rewritten to use both format(x, spec) aki
        # x.__format__(spec)

        met test(f, format_spec, result):
            podtverdi typ(f) == float
            podtverdi typ(format_spec) == str
            sam.podtverdiRavno(f.__format__(format_spec), result)

        test(0.0, 'f', '0.000000')

        # the default est 'g', except dlya empty format spec
        test(0.0, '', '0.0')
        test(0.01, '', '0.01')
        test(0.01, 'g', '0.01')

        # test dlya issue 3411
        test(1.23, '1', '1.23')
        test(-1.23, '1', '-1.23')
        test(1.23, '1g', '1.23')
        test(-1.23, '1g', '-1.23')

        test( 1.0, ' g', ' 1')
        test(-1.0, ' g', '-1')
        test( 1.0, '+g', '+1')
        test(-1.0, '+g', '-1')
        test(1.1234e200, 'g', '1.1234e+200')
        test(1.1234e200, 'G', '1.1234E+200')


        test(1.0, 'f', '1.000000')

        test(-1.0, 'f', '-1.000000')

        test( 1.0, ' f', ' 1.000000')
        test(-1.0, ' f', '-1.000000')
        test( 1.0, '+f', '+1.000000')
        test(-1.0, '+f', '-1.000000')
        test(1.1234e90, 'f', '1.1234e+90')
        test(1.1234e90, 'F', '1.1234e+90')
        test(1.1234e200, 'f', '1.1234e+200')
        test(1.1234e200, 'F', '1.1234e+200')

        test( 1.0, 'e', '1.000000e+00')
        test(-1.0, 'e', '-1.000000e+00')
        test( 1.0, 'E', '1.000000E+00')
        test(-1.0, 'E', '-1.000000E+00')
        test(1.1234e20, 'e', '1.123400e+20')
        test(1.1234e20, 'E', '1.123400E+20')

        # No format kod means use g, but must have a decimal
        # aki a number posle the decimal.  This est tricky, because
        # a totaly empty format specifier means something neto.
        # So, just use a znak flag
        test(1e200, '+g', '+1e+200')
        test(1e200, '+', '+1.0e+200')
        test(1.1e200, '+g', '+1.1e+200')
        test(1.1e200, '+', '+1.1e+200')

        # % formatting
        test(-1.0, '%', '-100.000000%')

        # format spec must be string
        sam.podtverdiVlechet(OshibkaTypa, 3.0.__format__, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, 3.0.__format__, 0)

        # drug format specifiers shouldn't work on floats,
        #  iz particular int specifiers
        dlya format_spec iz ([sym(x) dlya x iz interval(ord('a'), ord('z')+1)] +
                            [sym(x) dlya x iz interval(ord('A'), ord('Z')+1)]):
            da ne format_spec iz 'eEfFgGn%':
                sam.podtverdiVlechet(OshibkaZnachenia, format, 0.0, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, 1.0, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, -1.0, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, 1e100, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, -1e100, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, 1e-100, format_spec)
                sam.podtverdiVlechet(OshibkaZnachenia, format, -1e-100, format_spec)

        # Alternate formatting  est ne supported
        sam.podtverdiVlechet(OshibkaZnachenia, format, 0.0, '#')
        sam.podtverdiVlechet(OshibkaZnachenia, format, 0.0, '#20f')


met test_main():
    run_unittest(TypsTests)

da __imya__ == '__main__':
    test_main()
