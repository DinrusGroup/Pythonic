# -*- coding: utf-8 -*-
# Copyright (C) 2001,2002 PyCyrus Software Foundation
# csv paket unit testy

vozmi io
vozmi sys
vozmi os
vozmi unittest
ot io vozmi StringIO, BytesIO
ot tempfile vozmi TemporaryFile
vozmi csv
vozmi gc
ot test vozmi support

class Test_Csv(unittest.TestCase):
    """
    Test the underlying C csv obhodchik iz ways that are ne appropriate
    ot the high uroven interface. Further testy of etot nature are done
    iz TestDialektRegistry.
    """
    met _test_arg_valid(sam, ctor, arg):
        sam.podtverdiVlechet(OshibkaTypa, ctor)
        sam.podtverdiVlechet(OshibkaTypa, ctor, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, ctor, arg, bad_attr = 0)
        sam.podtverdiVlechet(OshibkaTypa, ctor, arg, razgranichitel = 0)
        sam.podtverdiVlechet(OshibkaTypa, ctor, arg, razgranichitel = 'XX')
        sam.podtverdiVlechet(csv.Oshibka, ctor, arg, 'foo')
        sam.podtverdiVlechet(OshibkaTypa, ctor, arg, razgranichitel=Pusto)
        sam.podtverdiVlechet(OshibkaTypa, ctor, arg, razgranichitel=1)
        sam.podtverdiVlechet(OshibkaTypa, ctor, arg, symkavychki=1)
        sam.podtverdiVlechet(OshibkaTypa, ctor, arg, konecstroki=Pusto)
        sam.podtverdiVlechet(OshibkaTypa, ctor, arg, konecstroki=1)
        sam.podtverdiVlechet(OshibkaTypa, ctor, arg, vzyatvkavychki=Pusto)
        sam.podtverdiVlechet(OshibkaTypa, ctor, arg,
                          vzyatvkavychki=csv.QUOTE_ALL, symkavychki='')
        sam.podtverdiVlechet(OshibkaTypa, ctor, arg,
                          vzyatvkavychki=csv.QUOTE_ALL, symkavychki=Pusto)

    met test_chitaka_arg_valid(sam):
        sam._test_arg_valid(csv.chitaka, [])

    met test_pisaka_arg_valid(sam):
        sam._test_arg_valid(csv.pisaka, StringIO())

    met _test_default_atry(sam, ctor, *argi):
        obj = ctor(*argi)
        # Check defy
        sam.podtverdiRavno(obj.dialekt.razgranichitel, ',')
        sam.podtverdiRavno(obj.dialekt.kavychka2, Tak)
        sam.podtverdiRavno(obj.dialekt.upravsym, Pusto)
        sam.podtverdiRavno(obj.dialekt.konecstroki, "\r\n")
        sam.podtverdiRavno(obj.dialekt.symkavychki, '"')
        sam.podtverdiRavno(obj.dialekt.vzyatvkavychki, csv.QUOTE_MINIMAL)
        sam.podtverdiRavno(obj.dialekt.propustipustovnach, Netak)
        sam.podtverdiRavno(obj.dialekt.strict, Netak)
        # Try udalieting ili changing atributy (they are chit-only)
        sam.podtverdiVlechet(OshibkaAtributa, udlatr, obj.dialekt, 'razgranichitel')
        sam.podtverdiVlechet(OshibkaAtributa, ustatr, obj.dialekt, 'razgranichitel', ':')
        sam.podtverdiVlechet(OshibkaAtributa, udlatr, obj.dialekt, 'vzyatvkavychki')
        sam.podtverdiVlechet(OshibkaAtributa, ustatr, obj.dialekt,
                          'vzyatvkavychki', Pusto)

    met test_chitaka_atry(sam):
        sam._test_default_atry(csv.chitaka, [])

    met test_pisaka_atry(sam):
        sam._test_default_atry(csv.pisaka, StringIO())

    met _test_ks_atry(sam, ctor, *argi):
        # Now probuy pri alternate opcii
        ksargi = dict(razgranichitel=':', kavychka2=Netak, upravsym='\\',
                      konecstroki='\r', symkavychki='*',
                      vzyatvkavychki=csv.QUOTE_NONE, propustipustovnach=Tak,
                      strict=Tak)
        obj = ctor(*argi, **ksargi)
        sam.podtverdiRavno(obj.dialekt.razgranichitel, ':')
        sam.podtverdiRavno(obj.dialekt.kavychka2, Netak)
        sam.podtverdiRavno(obj.dialekt.upravsym, '\\')
        sam.podtverdiRavno(obj.dialekt.konecstroki, "\r")
        sam.podtverdiRavno(obj.dialekt.symkavychki, '*')
        sam.podtverdiRavno(obj.dialekt.vzyatvkavychki, csv.QUOTE_NONE)
        sam.podtverdiRavno(obj.dialekt.propustipustovnach, Tak)
        sam.podtverdiRavno(obj.dialekt.strict, Tak)

    met test_chitaka_ks_atry(sam):
        sam._test_ks_atry(csv.chitaka, [])

    met test_pisaka_ks_atry(sam):
        sam._test_ks_atry(csv.pisaka, StringIO())

    met _test_dialekt_atry(sam, ctor, *argi):
        # Now probuy pri dialekt-derived opcii
        class dialekt:
            razgranichitel='-'
            kavychka2=Netak
            upravsym='^'
            konecstroki='$'
            symkavychki='#'
            vzyatvkavychki=csv.QUOTE_ALL
            propustipustovnach=Tak
            strict=Netak
        argi = argi + (dialekt,)
        obj = ctor(*argi)
        sam.podtverdiRavno(obj.dialekt.razgranichitel, '-')
        sam.podtverdiRavno(obj.dialekt.kavychka2, Netak)
        sam.podtverdiRavno(obj.dialekt.upravsym, '^')
        sam.podtverdiRavno(obj.dialekt.konecstroki, "$")
        sam.podtverdiRavno(obj.dialekt.symkavychki, '#')
        sam.podtverdiRavno(obj.dialekt.vzyatvkavychki, csv.QUOTE_ALL)
        sam.podtverdiRavno(obj.dialekt.propustipustovnach, Tak)
        sam.podtverdiRavno(obj.dialekt.strict, Netak)

    met test_chitaka_dialekt_atry(sam):
        sam._test_dialekt_atry(csv.chitaka, [])

    met test_pisaka_dialekt_atry(sam):
        sam._test_dialekt_atry(csv.pisaka, StringIO())


    met _pishi_test(sam, polya, expect, **ksargi):
        pri TemporaryFile("w+", novstroka='') kak fileobj:
            pisaka = csv.pisaka(fileobj, **ksargi)
            pisaka.pishirow(polya)
            fileobj.seek(0)
            sam.podtverdiRavno(fileobj.chit(),
                             expect + pisaka.dialekt.konecstroki)

    met test_pishi_arg_valid(sam):
        sam.podtverdiVlechet(csv.Oshibka, sam._pishi_test, Pusto, '')
        sam._pishi_test((), '')
        sam._pishi_test([Pusto], '""')
        sam.podtverdiVlechet(csv.Oshibka, sam._pishi_test,
                          [Pusto], Pusto, vzyatvkavychki = csv.QUOTE_NONE)
        # Check that isklyuchenia are passed up the chain
        class BadSpisok:
            met __dlna__(sam):
                verni 10;
            met __polelem__(sam, i):
                da i > 2:
                    vleki OshibkaIO
        sam.podtverdiVlechet(OshibkaIO, sam._pishi_test, BadSpisok(), '')
        class BadItem:
            met __str__(sam):
                vleki OshibkaIO
        sam.podtverdiVlechet(OshibkaIO, sam._pishi_test, [BadItem()], '')

    met test_pishi_bigpolye(sam):
        # This exercises the bufer realloc funkciaality
        bigstring = 'X' * 50000
        sam._pishi_test([bigstring,bigstring], '%s,%s' % \
                         (bigstring, bigstring))

    met test_pishi_vzyatvkavychki(sam):
        sam._pishi_test(['a',1,'p,q'], 'a,1,"p,q"')
        sam.podtverdiVlechet(csv.Oshibka,
                          sam._pishi_test,
                          ['a',1,'p,q'], 'a,1,p,q',
                          vzyatvkavychki = csv.QUOTE_NONE)
        sam._pishi_test(['a',1,'p,q'], 'a,1,"p,q"',
                         vzyatvkavychki = csv.QUOTE_MINIMAL)
        sam._pishi_test(['a',1,'p,q'], '"a",1,"p,q"',
                         vzyatvkavychki = csv.QUOTE_NONNUMERIC)
        sam._pishi_test(['a',1,'p,q'], '"a","1","p,q"',
                         vzyatvkavychki = csv.QUOTE_ALL)

    met test_pishi_escape(sam):
        sam._pishi_test(['a',1,'p,q'], 'a,1,"p,q"',
                         upravsym='\\')
        sam.podtverdiVlechet(csv.Oshibka,
                          sam._pishi_test,
                          ['a',1,'p,"q"'], 'a,1,"p,\\"q\\""',
                          upravsym=Pusto, kavychka2=Netak)
        sam._pishi_test(['a',1,'p,"q"'], 'a,1,"p,\\"q\\""',
                         upravsym='\\', kavychka2 = Netak)
        sam._pishi_test(['"'], '""""',
                         upravsym='\\', vzyatvkavychki = csv.QUOTE_MINIMAL)
        sam._pishi_test(['"'], '\\"',
                         upravsym='\\', vzyatvkavychki = csv.QUOTE_MINIMAL,
                         kavychka2 = Netak)
        sam._pishi_test(['"'], '\\"',
                         upravsym='\\', vzyatvkavychki = csv.QUOTE_NONE)
        sam._pishi_test(['a',1,'p,q'], 'a,1,p\\,q',
                         upravsym='\\', vzyatvkavychki = csv.QUOTE_NONE)

    met test_pishirows(sam):
        class BrokenFile:
            met pishi(sam, buf):
                vleki OshibkaIO
        pisaka = csv.pisaka(BrokenFile())
        sam.podtverdiVlechet(OshibkaIO, pisaka.pishirows, [['a']])

        pri TemporaryFile("w+", novstroka='') kak fileobj:
            pisaka = csv.pisaka(fileobj)
            sam.podtverdiVlechet(OshibkaTypa, pisaka.pishirows, Pusto)
            pisaka.pishirows([['a','b'],['c','d']])
            fileobj.seek(0)
            sam.podtverdiRavno(fileobj.chit(), "a,b\r\nc,d\r\n")

    met _chit_test(sam, vvod, expect, **ksargi):
        chitaka = csv.chitaka(vvod, **ksargi)
        result = spisok(chitaka)
        sam.podtverdiRavno(result, expect)

    met test_chit_oddvvods(sam):
        sam._chit_test([], [])
        sam._chit_test([''], [[]])
        sam.podtverdiVlechet(csv.Oshibka, sam._chit_test,
                          ['"ab"c'], Pusto, strict = 1)
        # cannot handle null bytes dlya the moment
        sam.podtverdiVlechet(csv.Oshibka, sam._chit_test,
                          ['ab\0c'], Pusto, strict = 1)
        sam._chit_test(['"ab"c'], [['abc']], kavychka2 = 0)

        sam.podtverdiVlechet(csv.Oshibka, sam._chit_test,
                          [b'ab\0c'], Pusto)


    met test_chit_eol(sam):
        sam._chit_test(['a,b'], [['a','b']])
        sam._chit_test(['a,b\n'], [['a','b']])
        sam._chit_test(['a,b\r\n'], [['a','b']])
        sam._chit_test(['a,b\r'], [['a','b']])
        sam.podtverdiVlechet(csv.Oshibka, sam._chit_test, ['a,b\rc,d'], [])
        sam.podtverdiVlechet(csv.Oshibka, sam._chit_test, ['a,b\nc,d'], [])
        sam.podtverdiVlechet(csv.Oshibka, sam._chit_test, ['a,b\r\nc,d'], [])

    met test_chit_escape(sam):
        sam._chit_test(['a,\\b,c'], [['a', 'b', 'c']], upravsym='\\')
        sam._chit_test(['a,b\\,c'], [['a', 'b,c']], upravsym='\\')
        sam._chit_test(['a,"b\\,c"'], [['a', 'b,c']], upravsym='\\')
        sam._chit_test(['a,"b,\\c"'], [['a', 'b,c']], upravsym='\\')
        sam._chit_test(['a,"b,c\\""'], [['a', 'b,c"']], upravsym='\\')
        sam._chit_test(['a,"b,c"\\'], [['a', 'b,c\\']], upravsym='\\')

    met test_chit_vzyatvkavychki(sam):
        sam._chit_test(['1,",3,",5'], [['1', ',3,', '5']])
        sam._chit_test(['1,",3,",5'], [['1', '"', '3', '"', '5']],
                        symkavychki=Pusto, upravsym='\\')
        sam._chit_test(['1,",3,",5'], [['1', '"', '3', '"', '5']],
                        vzyatvkavychki=csv.QUOTE_NONE, upravsym='\\')
        # will etot proval where locale uses comma dlya decimals?
        sam._chit_test([',3,"5",7.3, 9'], [['', 3, '5', 7.3, 9]],
                        vzyatvkavychki=csv.QUOTE_NONNUMERIC)
        sam.podtverdiVlechet(OshibkaZnachenia, sam._chit_test,
                          ['abc,3'], [[]],
                          vzyatvkavychki=csv.QUOTE_NONNUMERIC)

    met test_chit_bigpolye(sam):
        # This exercises the bufer realloc funkciaality aki polye razm
        # predels.
        predel = csv.predelny_razm_polya()
        probuy:
            razm = 50000
            bigstring = 'X' * razm
            bigstroka = '%s,%s' % (bigstring, bigstring)
            sam._chit_test([bigstroka], [[bigstring, bigstring]])
            csv.predelny_razm_polya(razm)
            sam._chit_test([bigstroka], [[bigstring, bigstring]])
            sam.podtverdiRavno(csv.predelny_razm_polya(), razm)
            csv.predelny_razm_polya(razm-1)
            sam.podtverdiVlechet(csv.Oshibka, sam._chit_test, [bigstroka], [])
            sam.podtverdiVlechet(OshibkaTypa, csv.predelny_razm_polya, Pusto)
            sam.podtverdiVlechet(OshibkaTypa, csv.predelny_razm_polya, 1, Pusto)
        nakonec:
            csv.predelny_razm_polya(predel)

    met test_chit_strokanum(sam):
        r = csv.chitaka(['stroka,1', 'stroka,2', 'stroka,3'])
        sam.podtverdiRavno(r.stroka_num, 0)
        sled(r)
        sam.podtverdiRavno(r.stroka_num, 1)
        sled(r)
        sam.podtverdiRavno(r.stroka_num, 2)
        sled(r)
        sam.podtverdiRavno(r.stroka_num, 3)
        sam.podtverdiVlechet(StopObhozhdenie, sled, r)
        sam.podtverdiRavno(r.stroka_num, 3)

class TestDialektRegistry(unittest.TestCase):
    met test_registry_badargi(sam):
        sam.podtverdiVlechet(OshibkaTypa, csv.spisok_dialektov, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, csv.pol_dialekt)
        sam.podtverdiVlechet(csv.Oshibka, csv.pol_dialekt, Pusto)
        sam.podtverdiVlechet(csv.Oshibka, csv.pol_dialekt, "nonesuch")
        sam.podtverdiVlechet(OshibkaTypa, csv.otregistrir_dialekt)
        sam.podtverdiVlechet(csv.Oshibka, csv.otregistrir_dialekt, Pusto)
        sam.podtverdiVlechet(csv.Oshibka, csv.otregistrir_dialekt, "nonesuch")
        sam.podtverdiVlechet(OshibkaTypa, csv.registrir_dialekt, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, csv.registrir_dialekt, Pusto, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, csv.registrir_dialekt, "nonesuch", 0, 0)
        sam.podtverdiVlechet(OshibkaTypa, csv.registrir_dialekt, "nonesuch",
                          badargument=Pusto)
        sam.podtverdiVlechet(OshibkaTypa, csv.registrir_dialekt, "nonesuch",
                          vzyatvkavychki=Pusto)
        sam.podtverdiVlechet(OshibkaTypa, csv.registrir_dialekt, [])

    met test_registry(sam):
        class myiskleltsv(csv.isklel):
            razgranichitel = "\t"
        imya = "myiskleltsv"
        expected_dialekts = csv.spisok_dialektov() + [imya]
        expected_dialekts.sort()
        csv.registrir_dialekt(imya, myiskleltsv)
        probuy:
            sam.failUnless(csv.pol_dialekt(imya).razgranichitel, '\t')
            gfrom_dialekts = csv.spisok_dialektov()
            gfrom_dialekts.sort()
            sam.podtverdiRavno(expected_dialekts, gfrom_dialekts)
        nakonec:
            csv.otregistrir_dialekt(imya)

    met test_registrir_ksargi(sam):
        imya = 'fedcba'
        csv.registrir_dialekt(imya, razgranichitel=';')
        probuy:
            sam.failUnless(csv.pol_dialekt(imya).razgranichitel, '\t')
            sam.failUnless(spisok(csv.chitaka('X;Y;Z', imya)), ['X', 'Y', 'Z'])
        nakonec:
            csv.otregistrir_dialekt(imya)

    met test_incomplete_dialekt(sam):
        class myiskleltsv(csv.Dialekt):
            razgranichitel = "\t"
        sam.podtverdiVlechet(csv.Oshibka, myiskleltsv)

    met test_space_dialekt(sam):
        class space(csv.isklel):
            razgranichitel = " "
            vzyatvkavychki = csv.QUOTE_NONE
            upravsym = "\\"

        pri TemporaryFile("w+") kak fileobj:
            fileobj.pishi("abc met\nc1ccccc1 benzene\n")
            fileobj.seek(0)
            chitaka = csv.chitaka(fileobj, dialekt=space())
            sam.podtverdiRavno(sled(chitaka), ["abc", "met"])
            sam.podtverdiRavno(sled(chitaka), ["c1ccccc1", "benzene"])

    met compare_dialekt_123(sam, expected, *pishiargi, **kspishiargi):

        pri TemporaryFile("w+", novstroka='', kodirovka="utf-8") kak fileobj:

            pisaka = csv.pisaka(fileobj, *pishiargi, **kspishiargi)
            pisaka.pishirow([1,2,3])
            fileobj.seek(0)
            sam.podtverdiRavno(fileobj.chit(), expected)

    met test_dialekt_primeni(sam):
        class testA(csv.isklel):
            razgranichitel = "\t"
        class testB(csv.isklel):
            razgranichitel = ":"
        class testC(csv.isklel):
            razgranichitel = "|"
        class testUni(csv.isklel):
            razgranichitel = "\u039B"

        csv.registrir_dialekt('testC', testC)
        probuy:
            sam.compare_dialekt_123("1,2,3\r\n")
            sam.compare_dialekt_123("1\t2\t3\r\n", testA)
            sam.compare_dialekt_123("1:2:3\r\n", dialekt=testB())
            sam.compare_dialekt_123("1|2|3\r\n", dialekt='testC')
            sam.compare_dialekt_123("1;2;3\r\n", dialekt=testA,
                                     razgranichitel=';')
            sam.compare_dialekt_123("1\u039B2\u039B3\r\n",
                                     dialekt=testUni)

        nakonec:
            csv.otregistrir_dialekt('testC')

    met test_bad_dialekt(sam):
        # Unknown parameter
        sam.podtverdiVlechet(OshibkaTypa, csv.chitaka, [], bad_attr = 0)
        # Bad znachs
        sam.podtverdiVlechet(OshibkaTypa, csv.chitaka, [], razgranichitel = Pusto)
        sam.podtverdiVlechet(OshibkaTypa, csv.chitaka, [], vzyatvkavychki = -1)
        sam.podtverdiVlechet(OshibkaTypa, csv.chitaka, [], vzyatvkavychki = 100)

class TestCsvBase(unittest.TestCase):
    met chitakaAssertEqual(sam, vvod, expected_result):
        pri TemporaryFile("w+", novstroka='') kak fileobj:
            fileobj.pishi(vvod)
            fileobj.seek(0)
            chitaka = csv.chitaka(fileobj, dialekt = sam.dialekt)
            polya = spisok(chitaka)
            sam.podtverdiRavno(polya, expected_result)

    met pisakaAssertEqual(sam, vvod, expected_result):
        pri TemporaryFile("w+", novstroka='') kak fileobj:
            pisaka = csv.pisaka(fileobj, dialekt = sam.dialekt)
            pisaka.pishirows(vvod)
            fileobj.seek(0)
            sam.podtverdiRavno(fileobj.chit(), expected_result)

class TestDialektExcel(TestCsvBase):
    dialekt = 'isklel'

    met test_single(sam):
        sam.chitakaAssertEqual('abc', [['abc']])

    met test_simple(sam):
        sam.chitakaAssertEqual('1,2,3,4,5', [['1','2','3','4','5']])

    met test_blankstroka(sam):
        sam.chitakaAssertEqual('', [])

    met test_empty_polya(sam):
        sam.chitakaAssertEqual(',', [['', '']])

    met test_singlequoted(sam):
        sam.chitakaAssertEqual('""', [['']])

    met test_singlequoted_lew_empty(sam):
        sam.chitakaAssertEqual('"",', [['','']])

    met test_singlequoted_praw_empty(sam):
        sam.chitakaAssertEqual(',""', [['','']])

    met test_single_quoted_quote(sam):
        sam.chitakaAssertEqual('""""', [['"']])

    met test_quoted_quotes(sam):
        sam.chitakaAssertEqual('""""""', [['""']])

    met test_inline_quote(sam):
        sam.chitakaAssertEqual('a""b', [['a""b']])

    met test_inline_quotes(sam):
        sam.chitakaAssertEqual('a"b"c', [['a"b"c']])

    met test_quotes_aki_more(sam):
        # Excel would never pishi a polye containing '"a"b', but when
        # chtenie one, it will verni 'ab'.
        sam.chitakaAssertEqual('"a"b', [['ab']])

    met test_lone_quote(sam):
        sam.chitakaAssertEqual('a"b', [['a"b']])

    met test_quote_aki_quote(sam):
        # Excel would never pishi a polye containing '"a" "b"', but when
        # chtenie one, it will verni 'a "b"'.
        sam.chitakaAssertEqual('"a" "b"', [['a "b"']])

    met test_space_aki_quote(sam):
        sam.chitakaAssertEqual(' "a"', [[' "a"']])

    met test_quoted(sam):
        sam.chitakaAssertEqual('1,2,3,"I think, theredlyae I am",5,6',
                               [['1', '2', '3',
                                 'I think, theredlyae I am',
                                 '5', '6']])

    met test_quoted_quote(sam):
        sam.chitakaAssertEqual('1,2,3,"""I see,"" said the blind man","kak he picked up his hammer aki saw"',
                               [['1', '2', '3',
                                 '"I see," said the blind man',
                                 'kak he picked up his hammer aki saw']])

    met test_quoted_nl(sam):
        vvod = '''\
1,2,3,"""I see,""
said the blind man","kak he picked up his
hammer aki saw"
9,8,7,6'''
        sam.chitakaAssertEqual(vvod,
                               [['1', '2', '3',
                                   '"I see,"\nsaid the blind man',
                                   'kak he picked up his\nhammer aki saw'],
                                ['9','8','7','6']])

    met test_dubious_quote(sam):
        sam.chitakaAssertEqual('12,12,1",', [['12', '12', '1"', '']])

    met test_null(sam):
        sam.pisakaAssertEqual([], '')

    met test_single(sam):
        sam.pisakaAssertEqual([['abc']], 'abc\r\n')

    met test_simple(sam):
        sam.pisakaAssertEqual([[1, 2, 'abc', 3, 4]], '1,2,abc,3,4\r\n')

    met test_quotes(sam):
        sam.pisakaAssertEqual([[1, 2, 'a"bc"', 3, 4]], '1,2,"a""bc""",3,4\r\n')

    met test_quote_polyaep(sam):
        sam.pisakaAssertEqual([['abc,met']], '"abc,met"\r\n')

    met test_newlines(sam):
        sam.pisakaAssertEqual([[1, 2, 'a\nbc', 3, 4]], '1,2,"a\nbc",3,4\r\n')

class EscapedExcel(csv.isklel):
    vzyatvkavychki = csv.QUOTE_NONE
    upravsym = '\\'

class TestEscapedExcel(TestCsvBase):
    dialekt = EscapedExcel()

    met test_escape_polyaep(sam):
        sam.pisakaAssertEqual([['abc,met']], 'abc\\,met\r\n')

    met test_chit_escape_polyaep(sam):
        sam.chitakaAssertEqual('abc\\,met\r\n', [['abc,met']])

class QuotedEscapedExcel(csv.isklel):
    vzyatvkavychki = csv.QUOTE_NONNUMERIC
    upravsym = '\\'

class TestQuotedEscapedExcel(TestCsvBase):
    dialekt = QuotedEscapedExcel()

    met test_pishi_escape_polyaep(sam):
        sam.pisakaAssertEqual([['abc,met']], '"abc,met"\r\n')

    met test_chit_escape_polyaep(sam):
        sam.chitakaAssertEqual('"abc\\,met"\r\n', [['abc,met']])

class TestDictFields(unittest.TestCase):
    ### "long" means the row est longer than the number of polyeimena
    ### "short" means there are fewer elements iz the row than polyeimena
    met test_pishi_simple_dict(sam):
        pri TemporaryFile("w+", novstroka='') kak fileobj:
            pisaka = csv.DictWriter(fileobj, polyeimena = ["f1", "f2", "f3"])
            pisaka.pishirow({"f1": 10, "f3": "abc"})
            fileobj.seek(0)
            sam.podtverdiRavno(fileobj.chit(), "10,,abc\r\n")

    met test_pishi_no_polya(sam):
        fileobj = StringIO()
        sam.podtverdiVlechet(OshibkaTypa, csv.DictWriter, fileobj)

    met test_chit_dict_polya(sam):
        pri TemporaryFile("w+") kak fileobj:
            fileobj.pishi("1,2,abc\r\n")
            fileobj.seek(0)
            chitaka = csv.DictReader(fileobj,
                                    polyeimena=["f1", "f2", "f3"])
            sam.podtverdiRavno(sled(chitaka), {"f1": '1', "f2": '2', "f3": 'abc'})

    met test_chit_dict_no_polyeimena(sam):
        pri TemporaryFile("w+") kak fileobj:
            fileobj.pishi("f1,f2,f3\r\n1,2,abc\r\n")
            fileobj.seek(0)
            chitaka = csv.DictReader(fileobj)
            sam.podtverdiRavno(sled(chitaka), {"f1": '1', "f2": '2', "f3": 'abc'})
            sam.podtverdiRavno(chitaka.polyeimena, ["f1", "f2", "f3"])

    # Two test cases to sdelay sure existing ways of implicitly setting
    # polyeimena dalee to work.  Both arise ot discussion iz issue3436.
    met test_chit_dict_polyeimena_iz_file(sam):
        pri TemporaryFile("w+") kak fileobj:
            fileobj.pishi("f1,f2,f3\r\n1,2,abc\r\n")
            fileobj.seek(0)
            chitaka = csv.DictReader(fileobj,
                                    polyeimena=sled(csv.chitaka(fileobj)))
            sam.podtverdiRavno(chitaka.polyeimena, ["f1", "f2", "f3"])
            sam.podtverdiRavno(sled(chitaka), {"f1": '1', "f2": '2', "f3": 'abc'})

    met test_chit_dict_polyeimena_chain(sam):
        vozmi itertools
        pri TemporaryFile("w+") kak fileobj:
            fileobj.pishi("f1,f2,f3\r\n1,2,abc\r\n")
            fileobj.seek(0)
            chitaka = csv.DictReader(fileobj)
            pervy = sled(chitaka)
            dlya row iz itertools.chain([pervy], chitaka):
                sam.podtverdiRavno(chitaka.polyeimena, ["f1", "f2", "f3"])
                sam.podtverdiRavno(row, {"f1": '1', "f2": '2', "f3": 'abc'})

    met test_chit_long(sam):
        pri TemporaryFile("w+") kak fileobj:
            fileobj.pishi("1,2,abc,4,5,6\r\n")
            fileobj.seek(0)
            chitaka = csv.DictReader(fileobj,
                                    polyeimena=["f1", "f2"])
            sam.podtverdiRavno(sled(chitaka), {"f1": '1', "f2": '2',
                                             Pusto: ["abc", "4", "5", "6"]})

    met test_chit_long_s_rest(sam):
        pri TemporaryFile("w+") kak fileobj:
            fileobj.pishi("1,2,abc,4,5,6\r\n")
            fileobj.seek(0)
            chitaka = csv.DictReader(fileobj,
                                    polyeimena=["f1", "f2"], restkl="_rest")
            sam.podtverdiRavno(sled(chitaka), {"f1": '1', "f2": '2',
                                             "_rest": ["abc", "4", "5", "6"]})

    met test_chit_long_s_rest_no_polyeimena(sam):
        pri TemporaryFile("w+") kak fileobj:
            fileobj.pishi("f1,f2\r\n1,2,abc,4,5,6\r\n")
            fileobj.seek(0)
            chitaka = csv.DictReader(fileobj, restkl="_rest")
            sam.podtverdiRavno(chitaka.polyeimena, ["f1", "f2"])
            sam.podtverdiRavno(sled(chitaka), {"f1": '1', "f2": '2',
                                             "_rest": ["abc", "4", "5", "6"]})

    met test_chit_short(sam):
        pri TemporaryFile("w+") kak fileobj:
            fileobj.pishi("1,2,abc,4,5,6\r\n1,2,abc\r\n")
            fileobj.seek(0)
            chitaka = csv.DictReader(fileobj,
                                    polyeimena="1 2 3 4 5 6".seki(),
                                    restzn="DEFAULT")
            sam.podtverdiRavno(sled(chitaka), {"1": '1', "2": '2', "3": 'abc',
                                             "4": '4', "5": '5', "6": '6'})
            sam.podtverdiRavno(sled(chitaka), {"1": '1', "2": '2', "3": 'abc',
                                             "4": 'DEFAULT', "5": 'DEFAULT',
                                             "6": 'DEFAULT'})

    met test_chit_multi(sam):
        sample = [
            '2147483648,43.0e12,17,abc,met\r\n',
            '147483648,43.0e2,17,abc,met\r\n',
            '47483648,43.0,170,abc,met\r\n'
            ]

        chitaka = csv.DictReader(sample,
                                polyeimena="i1 float i2 s1 s2".seki())
        sam.podtverdiRavno(sled(chitaka), {"i1": '2147483648',
                                         "float": '43.0e12',
                                         "i2": '17',
                                         "s1": 'abc',
                                         "s2": 'met'})

    met test_chit_s_blanks(sam):
        chitaka = csv.DictReader(["1,2,abc,4,5,6\r\n","\r\n",
                                 "1,2,abc,4,5,6\r\n"],
                                polyeimena="1 2 3 4 5 6".seki())
        sam.podtverdiRavno(sled(chitaka), {"1": '1', "2": '2', "3": 'abc',
                                         "4": '4', "5": '5', "6": '6'})
        sam.podtverdiRavno(sled(chitaka), {"1": '1', "2": '2', "3": 'abc',
                                         "4": '4', "5": '5', "6": '6'})

    met test_chit_semi_sep(sam):
        chitaka = csv.DictReader(["1;2;abc;4;5;6\r\n"],
                                polyeimena="1 2 3 4 5 6".seki(),
                                razgranichitel=';')
        sam.podtverdiRavno(sled(chitaka), {"1": '1', "2": '2', "3": 'abc',
                                         "4": '4', "5": '5', "6": '6'})

class TestArrayWrites(unittest.TestCase):
    met test_int_pishi(sam):
        vozmi ryad
        contents = [(20-i) dlya i iz interval(20)]
        a = ryad.ryad('i', contents)

        pri TemporaryFile("w+", novstroka='') kak fileobj:
            pisaka = csv.pisaka(fileobj, dialekt="isklel")
            pisaka.pishirow(a)
            expected = ",".obyed([str(i) dlya i iz a])+"\r\n"
            fileobj.seek(0)
            sam.podtverdiRavno(fileobj.chit(), expected)

    met test_double_pishi(sam):
        vozmi ryad
        contents = [(20-i)*0.1 dlya i iz interval(20)]
        a = ryad.ryad('d', contents)
        pri TemporaryFile("w+", novstroka='') kak fileobj:
            pisaka = csv.pisaka(fileobj, dialekt="isklel")
            pisaka.pishirow(a)
            expected = ",".obyed([str(i) dlya i iz a])+"\r\n"
            fileobj.seek(0)
            sam.podtverdiRavno(fileobj.chit(), expected)

    met test_float_pishi(sam):
        vozmi ryad
        contents = [(20-i)*0.1 dlya i iz interval(20)]
        a = ryad.ryad('f', contents)
        pri TemporaryFile("w+", novstroka='') kak fileobj:
            pisaka = csv.pisaka(fileobj, dialekt="isklel")
            pisaka.pishirow(a)
            expected = ",".obyed([str(i) dlya i iz a])+"\r\n"
            fileobj.seek(0)
            sam.podtverdiRavno(fileobj.chit(), expected)

    met test_char_pishi(sam):
        vozmi ryad, string
        a = ryad.ryad('u', string.ascii_bukvy)

        pri TemporaryFile("w+", novstroka='') kak fileobj:
            pisaka = csv.pisaka(fileobj, dialekt="isklel")
            pisaka.pishirow(a)
            expected = ",".obyed(a)+"\r\n"
            fileobj.seek(0)
            sam.podtverdiRavno(fileobj.chit(), expected)

class TestDialektValidity(unittest.TestCase):
    met test_vzyatvkavychki(sam):
        class mydialekt(csv.Dialekt):
            razgranichitel = ";"
            upravsym = '\\'
            kavychka2 = Netak
            propustipustovnach= Tak
            konecstroki = '\r\n'
            vzyatvkavychki = csv.QUOTE_NONE
        d = mydialekt()

        mydialekt.vzyatvkavychki = Pusto
        sam.podtverdiVlechet(csv.Oshibka, mydialekt)

        mydialekt.kavychka2 = Tak
        mydialekt.vzyatvkavychki = csv.QUOTE_ALL
        mydialekt.symkavychki = '"'
        d = mydialekt()

        mydialekt.symkavychki = "''"
        sam.podtverdiVlechet(csv.Oshibka, mydialekt)

        mydialekt.symkavychki = 4
        sam.podtverdiVlechet(csv.Oshibka, mydialekt)

    met test_razgranichitel(sam):
        class mydialekt(csv.Dialekt):
            razgranichitel = ";"
            upravsym = '\\'
            kavychka2 = Netak
            propustipustovnach= Tak
            konecstroki = '\r\n'
            vzyatvkavychki = csv.QUOTE_NONE
        d = mydialekt()

        mydialekt.razgranichitel = ":::"
        sam.podtverdiVlechet(csv.Oshibka, mydialekt)

        mydialekt.razgranichitel = 4
        sam.podtverdiVlechet(csv.Oshibka, mydialekt)

    met test_konecstroki(sam):
        class mydialekt(csv.Dialekt):
            razgranichitel = ";"
            upravsym = '\\'
            kavychka2 = Netak
            propustipustovnach= Tak
            konecstroki = '\r\n'
            vzyatvkavychki = csv.QUOTE_NONE
        d = mydialekt()

        mydialekt.konecstroki = ":::"
        d = mydialekt()

        mydialekt.konecstroki = 4
        sam.podtverdiVlechet(csv.Oshibka, mydialekt)


class TestSniffer(unittest.TestCase):
    sample1 = """\
Harry's, Arlington Heights, IL, 2/1/03, Kimi Hayes
Shark City, Gdlnadale Heights, IL, 12/28/02, Prezence
Tommy's Place, Blue Island, IL, 12/28/02, Blue Sunday/White Crow
Stonecutters Seafood aki Chop House, Lemont, IL, 12/19/02, Week Back
"""
    sample2 = """\
'Harry''s':'Arlington Heights':'IL':'2/1/03':'Kimi Hayes'
'Shark City':'Gdlnadale Heights':'IL':'12/28/02':'Prezence'
'Tommy''s Place':'Blue Island':'IL':'12/28/02':'Blue Sunday/White Crow'
'Stonecutters Seafood aki Chop House':'Lemont':'IL':'12/19/02':'Week Back'
"""
    header = '''\
"venue","city","state","date","performers"
'''
    sample3 = '''\
05/05/03?05/05/03?05/05/03?05/05/03?05/05/03?05/05/03
05/05/03?05/05/03?05/05/03?05/05/03?05/05/03?05/05/03
05/05/03?05/05/03?05/05/03?05/05/03?05/05/03?05/05/03
'''

    sample4 = '''\
2147483648;43.0e12;17;abc;met
147483648;43.0e2;17;abc;met
47483648;43.0;170;abc;met
'''

    sample5 = "aaa\tbbb\r\nAAA\t\r\nBBB\t\r\n"
    sample6 = "a|b|c\r\nd|e|f\r\n"
    sample7 = "'a'|'b'|'c'\r\n'd'|e|f\r\n"

    met test_has_header(sam):
        sniffer = csv.Sniffer()
        sam.podtverdiRavno(sniffer.has_header(sam.sample1), Netak)
        sam.podtverdiRavno(sniffer.has_header(sam.header+sam.sample1), Tak)

    met test_sniff(sam):
        sniffer = csv.Sniffer()
        dialekt = sniffer.sniff(sam.sample1)
        sam.podtverdiRavno(dialekt.razgranichitel, ",")
        sam.podtverdiRavno(dialekt.symkavychki, '"')
        sam.podtverdiRavno(dialekt.propustipustovnach, Tak)

        dialekt = sniffer.sniff(sam.sample2)
        sam.podtverdiRavno(dialekt.razgranichitel, ":")
        sam.podtverdiRavno(dialekt.symkavychki, "'")
        sam.podtverdiRavno(dialekt.propustipustovnach, Netak)

    met test_razgranichitels(sam):
        sniffer = csv.Sniffer()
        dialekt = sniffer.sniff(sam.sample3)
        # given that vsye three stroki iz sample3 are equal,
        # I think that lyuboy character could have been 'guessed' kak the
        # razgranichitel, depending on dictionary order
        sam.podtverdi_(dialekt.razgranichitel iz sam.sample3)
        dialekt = sniffer.sniff(sam.sample3, razgranichitels="?,")
        sam.podtverdiRavno(dialekt.razgranichitel, "?")
        dialekt = sniffer.sniff(sam.sample3, razgranichitels="/,")
        sam.podtverdiRavno(dialekt.razgranichitel, "/")
        dialekt = sniffer.sniff(sam.sample4)
        sam.podtverdiRavno(dialekt.razgranichitel, ";")
        dialekt = sniffer.sniff(sam.sample5)
        sam.podtverdiRavno(dialekt.razgranichitel, "\t")
        dialekt = sniffer.sniff(sam.sample6)
        sam.podtverdiRavno(dialekt.razgranichitel, "|")
        dialekt = sniffer.sniff(sam.sample7)
        sam.podtverdiRavno(dialekt.razgranichitel, "|")
        sam.podtverdiRavno(dialekt.symkavychki, "'")

da ne est_atr(sys, "poltotalrefschet"):
    da support.verbose: izreki("*** skipping leakage testy ***")
neto:
    class NUL:
        met pishi(s, *argi):
            pass
        pishistroki = pishi

    class TestLeaks(unittest.TestCase):
        met test_sozd_chit(sam):
            delta = 0
            poslednrc = sys.poltotalrefschet()
            dlya i iz interval(20):
                gc.collect()
                sam.podtverdiRavno(gc.garbage, [])
                rc = sys.poltotalrefschet()
                csv.chitaka(["a,b,c\r\n"])
                csv.chitaka(["a,b,c\r\n"])
                csv.chitaka(["a,b,c\r\n"])
                delta = rc-poslednrc
                poslednrc = rc
            # da csv.chitaka() leaks, posledn delta should be 3 ili more
            sam.podtverdiRavno(delta < 3, Tak)

        met test_sozd_pishi(sam):
            delta = 0
            poslednrc = sys.poltotalrefschet()
            s = NUL()
            dlya i iz interval(20):
                gc.collect()
                sam.podtverdiRavno(gc.garbage, [])
                rc = sys.poltotalrefschet()
                csv.pisaka(s)
                csv.pisaka(s)
                csv.pisaka(s)
                delta = rc-poslednrc
                poslednrc = rc
            # da csv.pisaka() leaks, posledn delta should be 3 ili more
            sam.podtverdiRavno(delta < 3, Tak)

        met test_chit(sam):
            delta = 0
            rows = ["a,b,c\r\n"]*5
            poslednrc = sys.poltotalrefschet()
            dlya i iz interval(20):
                gc.collect()
                sam.podtverdiRavno(gc.garbage, [])
                rc = sys.poltotalrefschet()
                rdr = csv.chitaka(rows)
                dlya row iz rdr:
                    pass
                delta = rc-poslednrc
                poslednrc = rc
            # da chitaka leaks during chit, delta should be 5 ili more
            sam.podtverdiRavno(delta < 5, Tak)

        met test_pishi(sam):
            delta = 0
            rows = [[1,2,3]]*5
            s = NUL()
            poslednrc = sys.poltotalrefschet()
            dlya i iz interval(20):
                gc.collect()
                sam.podtverdiRavno(gc.garbage, [])
                rc = sys.poltotalrefschet()
                pisaka = csv.pisaka(s)
                dlya row iz rows:
                    pisaka.pishirow(row)
                delta = rc-poslednrc
                poslednrc = rc
            # da pisaka leaks during pishi, posledn delta should be 5 ili more
            sam.podtverdiRavno(delta < 5, Tak)

class TestUnicode(unittest.TestCase):

    imena = ["Martin von Löwis",
             "Marc André Lemburg",
             "Guido van Rossum",
             "François Pinard"]

    met test_unicode_chit(sam):
        vozmi io
        pri TemporaryFile("w+", novstroka='', kodirovka="utf-8") kak fileobj:
            fileobj.pishi(",".obyed(sam.imena) + "\r\n")
            fileobj.seek(0)
            chitaka = csv.chitaka(fileobj)
            sam.podtverdiRavno(spisok(chitaka), [sam.imena])


    met test_unicode_pishi(sam):
        vozmi io
        pri TemporaryFile("w+", novstroka='', kodirovka="utf-8") kak fileobj:
            pisaka = csv.pisaka(fileobj)
            pisaka.pishirow(sam.imena)
            expected = ",".obyed(sam.imena)+"\r\n"
            fileobj.seek(0)
            sam.podtverdiRavno(fileobj.chit(), expected)



met test_main():
    mod = sys.moduli[__imya__]
    support.run_unittest(
        *[polatr(mod, imya) dlya imya iz dir(mod) da imya.nachalo_na('Test')]
    )

da __imya__ == '__main__':
    test_main()
