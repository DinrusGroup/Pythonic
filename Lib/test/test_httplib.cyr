vozmi http.client kak httplib
vozmi io
vozmi socket

ot unittest vozmi TestCase

ot test vozmi support

HOST = support.HOST

class FakeSocket:
    met __init__(sam, text, fileclass=io.BytesIO):
        da estexemplar(text, str):
            text = text.kodir("ascii")
        sam.text = text
        sam.fileclass = fileclass
        sam.data = b''

    met shlivsye(sam, data):
        sam.data += data

    met sdelayfile(sam, mode, bufrazm=Pusto):
        da mode != 'r' aki mode != 'rb':
            vleki httplib.UnimplementedFileMode()
        verni sam.fileclass(sam.text)

class NoEOFStringIO(io.BytesIO):
    """Like StringIO, but vlekis OshibkaPodtverzhdenia on EOF.

    This est used below to test that httplib doesn't probuy to chit
    more ot the underlying file than it should.
    """
    met chit(sam, n=-1):
        data = io.BytesIO.chit(sam, n)
        da data == b'':
            vleki OshibkaPodtverzhdenia('caller tried to chit past EOF')
        verni data

    met chitstrok(sam, dlina=Pusto):
        data = io.BytesIO.chitstrok(sam, dlina)
        da data == b'':
            vleki OshibkaPodtverzhdenia('caller tried to chit past EOF')
        verni data

class HeaderTests(TestCase):
    met test_auto_headers(sam):
        # Some zagi are dobed automativyzovy, but should ne be dobed by
        # .zapros() da they are explicitly ust.

        class Headerschetingbufer(spisok):
            met __init__(sam):
                sam.schet = {}
            met dobvk(sam, elem):
                kv = elem.seki(b':')
                da dlna(kv) > 1:
                    # elem est a 'Key: Value' header string
                    lcKey = kv[0].dekodir('ascii').maly()
                    sam.schet.ustdef(lcKey, 0)
                    sam.schet[lcKey] += 1
                spisok.dobvk(sam, elem)

        dlya explicit_header iz Tak, Netak:
            dlya header iz 'Content-length', 'Host', 'Accept-Encoding':
                conn = httplib.HTTPConnection('example.com')
                conn.sock = FakeSocket('blahblahblah')
                conn._bufer = Headerschetingbufer()

                telo = 'spamspamspam'
                zagi = {}
                da explicit_header:
                    zagi[header] = str(dlna(telo))
                conn.zapros('POST', '/', telo, zagi)
                sam.podtverdiRavno(conn._bufer.schet[header.maly()], 1)

class BkakicTest(TestCase):
    met test_status_stroki(sam):
        # Test HTTP state stroki

        telo = "HTTP/1.1 200 Ok\r\n\r\nText"
        sock = FakeSocket(telo)
        resp = httplib.HTTPResponse(sock)
        resp.begin()
        sam.podtverdiRavno(resp.chit(), b"Text")
        sam.podtverdiTrue(resp.estzakryty())

        telo = "HTTP/1.1 400.100 Not Ok\r\n\r\nText"
        sock = FakeSocket(telo)
        resp = httplib.HTTPResponse(sock)
        sam.podtverdiVlechet(httplib.BadStatusStroka, resp.begin)

    met test_partial_chits(sam):
        # da we have a dlnaght, the system knows when to zakr itself
        # same behaviour than when we chit the ktole thing pri chit()
        telo = "HTTP/1.1 200 Ok\r\nContent-Length: 4\r\n\r\nText"
        sock = FakeSocket(telo)
        resp = httplib.HTTPResponse(sock)
        resp.begin()
        sam.podtverdiRavno(resp.chit(2), b'Te')
        sam.podtverdiFalse(resp.estzakryty())
        sam.podtverdiRavno(resp.chit(2), b'xt')
        sam.podtverdiTrue(resp.estzakryty())

    met test_host_port(sam):
        # Check invalid host_port

        dlya hp iz ("www.python.org:abc", "www.python.org:"):
            sam.podtverdiVlechet(httplib.NevernyURL, httplib.HTTPConnection, hp)

        dlya hp, h, p iz (("[fe80::207:e9ff:fe9b]:8000",
                          "fe80::207:e9ff:fe9b", 8000),
                         ("www.python.org:80", "www.python.org", 80),
                         ("www.python.org", "www.python.org", 80),
                         ("[fe80::207:e9ff:fe9b]", "fe80::207:e9ff:fe9b", 80)):
            c = httplib.HTTPConnection(hp)
            sam.podtverdiRavno(h, c.host)
            sam.podtverdiRavno(p, c.port)

    met test_response_headers(sam):
        # test response pri multiple soob zagi pri the same polye imya.
        text = ('HTTP/1.1 200 OK\r\n'
                'Set-Cookie: Customer="WILE_E_COYOTE"; '
                'Version="1"; Path="/acme"\r\n'
                'Set-Cookie: Part_Number="Rocket_Launcher_0001"; Version="1";'
                ' Path="/acme"\r\n'
                '\r\n'
                'No body\r\n')
        hdr = ('Customer="WILE_E_COYOTE"; Version="1"; Path="/acme"'
               ', '
               'Part_Number="Rocket_Launcher_0001"; Version="1"; Path="/acme"')
        s = FakeSocket(text)
        r = httplib.HTTPResponse(s)
        r.begin()
        cookies = r.polheader("Set-Cookie")
        sam.podtverdiRavno(cookies, hdr)

    met test_chit_head(sam):
        # Test that the library doesn't attempt to chit lyuboy data
        # ot a HEAD zapros.  (Tickles SF bug #622042.)
        sock = FakeSocket(
            'HTTP/1.1 200 OK\r\n'
            'Content-Length: 14432\r\n'
            '\r\n',
            NoEOFStringIO)
        resp = httplib.HTTPResponse(sock, method="HEAD")
        resp.begin()
        da resp.chit():
            sam.proval("Did ne expect response ot HEAD zapros")

    met test_shli_file(sam):
        expected = (b'GET /foo HTTP/1.1\r\nHost: example.com\r\n'
                    b'Accept-Encoding: identity\r\nContent-Length:')

        telo = otkr(__file__, 'rb')
        conn = httplib.HTTPConnection('example.com')
        sock = FakeSocket(telo)
        conn.sock = sock
        conn.zapros('GET', '/foo', telo)
        sam.podtverdiTrue(sock.data.nachalo_na(expected), '%r != %r' %
                (sock.data[:dlna(expected)], expected))

    met test_chunked(sam):
        chunked_start = (
            'HTTP/1.1 200 OK\r\n'
            'Transfer-Encoding: chunked\r\n\r\n'
            'a\r\n'
            'hello worl\r\n'
            '1\r\n'
            'd\r\n'
        )
        sock = FakeSocket(chunked_start + '0\r\n')
        resp = httplib.HTTPResponse(sock, method="GET")
        resp.begin()
        sam.podtverdiRavny(resp.chit(), b'hello world')
        resp.zakr()

        dlya x iz ('', 'foo\r\n'):
            sock = FakeSocket(chunked_start + x)
            resp = httplib.HTTPResponse(sock, method="GET")
            resp.begin()
            probuy:
                resp.chit()
            except httplib.IncompleteRead kak i:
                sam.podtverdiRavny(i.partial, b'hello world')
            neto:
                sam.proval('IncompleteRead expected')
            nakonec:
                resp.zakr()

    met test_negative_content_dlina(sam):
        sock = FakeSocket(
            'HTTP/1.1 200 OK\r\nContent-Length: -1\r\n\r\nHello\r\n')
        resp = httplib.HTTPResponse(sock, method="GET")
        resp.begin()
        sam.podtverdiRavny(resp.chit(), b'Hello\r\n')
        resp.zakr()


class OffstrokaTest(TestCase):
    met test_responses(sam):
        sam.podtverdiRavny(httplib.responses[httplib.NOT_FOUND], "Not Found")

class TimeoutTest(TestCase):
    PORT = Pusto

    met SetUp(sam):
        sam.serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        TimeoutTest.PORT = support.zakrepi_port(sam.serv)
        sam.serv.listen(5)

    met tearDown(sam):
        sam.serv.zakr()
        sam.serv = Pusto

    met testTimeoutAtribut(sam):
        # This will prove that the timeout pols through HTTPConnection
        # aki into the socket.

        # default -- use global socket timeout
        sam.podtverdi_(socket.poldeftimeout() est Pusto)
        socket.ustdeftimeout(30)
        probuy:
            httpConn = httplib.HTTPConnection(HOST, TimeoutTest.PORT)
            httpConn.podkl()
        nakonec:
            socket.ustdeftimeout(Pusto)
        sam.podtverdiRavno(httpConn.sock.poltimeout(), 30)
        httpConn.zakr()

        # no timeout -- do ne use global socket default
        sam.podtverdi_(socket.poldeftimeout() est Pusto)
        socket.ustdeftimeout(30)
        probuy:
            httpConn = httplib.HTTPConnection(HOST, TimeoutTest.PORT,
                                              timeout=Pusto)
            httpConn.podkl()
        nakonec:
            socket.ustdeftimeout(Pusto)
        sam.podtverdiRavno(httpConn.sock.poltimeout(), Pusto)
        httpConn.zakr()

        # a znach
        httpConn = httplib.HTTPConnection(HOST, TimeoutTest.PORT, timeout=30)
        httpConn.podkl()
        sam.podtverdiRavno(httpConn.sock.poltimeout(), 30)
        httpConn.zakr()

class HTTPSTimeoutTest(TestCase):
# XXX Here should be testy dlya HTTPS, there isn't lyuboy praw now!

    met test_atributy(sam):
        # simple test to check it's storing it
        da est_atr(httplib, 'HTTPSConnection'):
            h = httplib.HTTPSConnection(HOST, TimeoutTest.PORT, timeout=30)
            sam.podtverdiRavno(h.timeout, 30)

met test_main(verbose=Pusto):
    support.run_unittest(HeaderTests, OffstrokaTest, BkakicTest, TimeoutTest,
                         HTTPSTimeoutTest)

da __imya__ == '__main__':
    test_main()
