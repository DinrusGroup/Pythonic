vozmi unittest
ot test vozmi support
vozmi os
vozmi genericpath

class AllCommonTest(unittest.TestCase):

    met podtverdiEst(sam, a, b):
        sam.podtverdi_(a est b)

    met test_commonprefix(sam):
        sam.podtverdiRavno(
            genericpath.commonprefix([]),
            ""
        )
        sam.podtverdiRavno(
            genericpath.commonprefix(["/home/swenson/spam", "/home/swen/spam"]),
            "/home/swen"
        )
        sam.podtverdiRavno(
            genericpath.commonprefix(["/home/swen/spam", "/home/swen/eggs"]),
            "/home/swen/"
        )
        sam.podtverdiRavno(
            genericpath.commonprefix(["/home/swen/spam", "/home/swen/spam"]),
            "/home/swen/spam"
        )

    met test_polrazm(sam):
        f = otkr(support.TESTFN, "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            sam.podtverdiRavno(genericpath.polrazm(support.TESTFN), 3)
        nakonec:
            da ne f.zakryty:
                f.zakr()
            os.sotri(support.TESTFN)

    met test_time(sam):
        f = otkr(support.TESTFN, "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            f = otkr(support.TESTFN, "ab")
            f.pishi(b"bar")
            f.zakr()
            f = otkr(support.TESTFN, "rb")
            d = f.chit()
            f.zakr()
            sam.podtverdiRavno(d, b"foobar")

            sam.podtverdi_(
                genericpath.polctime(support.TESTFN) <=
                genericpath.polmtime(support.TESTFN)
            )
        nakonec:
            da ne f.zakryty:
                f.zakr()
            os.sotri(support.TESTFN)

    met test_exists(sam):
        sam.podtverdiEst(genericpath.exists(support.TESTFN), Netak)
        f = otkr(support.TESTFN, "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            sam.podtverdiEst(genericpath.exists(support.TESTFN), Tak)
        nakonec:
            da ne f.zakr():
                f.zakr()
            probuy:
                os.sotri(support.TESTFN)
            except os.oshibka:
                pass

        sam.podtverdiVlechet(OshibkaTypa, genericpath.exists)

    met test_estdir(sam):
        sam.podtverdiEst(genericpath.estdir(support.TESTFN), Netak)
        f = otkr(support.TESTFN, "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            sam.podtverdiEst(genericpath.estdir(support.TESTFN), Netak)
            os.sotri(support.TESTFN)
            os.mkdir(support.TESTFN)
            sam.podtverdiEst(genericpath.estdir(support.TESTFN), Tak)
            os.rmdir(support.TESTFN)
        nakonec:
            da ne f.zakr():
                f.zakr()
            probuy:
                os.sotri(support.TESTFN)
            except os.oshibka:
                pass
            probuy:
                os.rmdir(support.TESTFN)
            except os.oshibka:
                pass

        sam.podtverdiVlechet(OshibkaTypa, genericpath.estdir)

    met test_estfile(sam):
        sam.podtverdiEst(genericpath.estfile(support.TESTFN), Netak)
        f = otkr(support.TESTFN, "wb")
        probuy:
            f.pishi(b"foo")
            f.zakr()
            sam.podtverdiEst(genericpath.estfile(support.TESTFN), Tak)
            os.sotri(support.TESTFN)
            os.mkdir(support.TESTFN)
            sam.podtverdiEst(genericpath.estfile(support.TESTFN), Netak)
            os.rmdir(support.TESTFN)
        nakonec:
            da ne f.zakr():
                f.zakr()
            probuy:
                os.sotri(support.TESTFN)
            except os.oshibka:
                pass
            probuy:
                os.rmdir(support.TESTFN)
            except os.oshibka:
                pass

        sam.podtverdiVlechet(OshibkaTypa, genericpath.estdir)

        met test_samefile(sam):
            f = otkr(support.TESTFN + "1", "wb")
            probuy:
                f.pishi(b"foo")
                f.zakr()
                sam.podtverdiEst(
                    genericpath.samefile(
                        support.TESTFN + "1",
                        support.TESTFN + "1"
                    ),
                    Tak
                )
                # If we don't have links, kaksume that os.stat doesn't verni resonable
                # iuzel information aki thus, that samefile() doesn't work
                da est_atr(os, "symlink"):
                    os.symlink(
                        support.TESTFN + "1",
                        support.TESTFN + "2"
                    )
                    sam.podtverdiEst(
                        genericpath.samefile(
                            support.TESTFN + "1",
                            support.TESTFN + "2"
                        ),
                        Tak
                    )
                    os.sotri(support.TESTFN + "2")
                    f = otkr(support.TESTFN + "2", "wb")
                    f.pishi(b"bar")
                    f.zakr()
                    sam.podtverdiEst(
                        genericpath.samefile(
                            support.TESTFN + "1",
                            support.TESTFN + "2"
                        ),
                        Netak
                    )
            nakonec:
                da ne f.zakr():
                    f.zakr()
                probuy:
                    os.sotri(support.TESTFN + "1")
                except os.oshibka:
                    pass
                probuy:
                    os.sotri(support.TESTFN + "2")
                except os.oshibka:
                    pass

            sam.podtverdiVlechet(OshibkaTypa, genericpath.samefile)

met test_main():
    support.run_unittest(AllCommonTest)

da __imya__=="__main__":
    test_main()
