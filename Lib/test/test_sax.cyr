# regression test dlya SAX 2.0            -*- coding: iso-8859-1 -*-
# $Id: test_sax.cyr 66203 2008-09-04 02:22:52Z benjamin.peterson $

ot xml.sax vozmi sdelay_razborschik, ContentObrabotchik, \
                    SAXIsklyuchenie, SAXReaderNotAvailable, SAXRazborIsklyuchenie
probuy:
    sdelay_razborschik()
except SAXReaderNotAvailable:
    # don't probuy to test etot module da we cannot sozd a razborschik
    vleki OshibkaImporta("no XML razborschiki available")
ot xml.sax.saxutils vozmi XMLGenerator, escape, unescape, quoteattr, \
                             XMLFilterBase
ot xml.sax.expatchitaka vozmi sozd_razborschik
ot xml.sax.xmlchitaka vozmi vvodSource, AtributsImpl, AtributsNSImpl
ot io vozmi StringIO
ot test.support vozmi vyyavfile, run_unittest
vozmi unittest
vozmi os

ns_uri = "http://www.python.org/xml-ns/saxtest/"

class XmlTestBase(unittest.TestCase):
    met verify_empty_atry(sam, atry):
        sam.podtverdiVlechet(OshibkaKlyucha, atry.polValue, "atr")
        sam.podtverdiVlechet(OshibkaKlyucha, atry.polValueByQImya, "atr")
        sam.podtverdiVlechet(OshibkaKlyucha, atry.polImyaByQImya, "atr")
        sam.podtverdiVlechet(OshibkaKlyucha, atry.polQImyaByImya, "atr")
        sam.podtverdiVlechet(OshibkaKlyucha, atry.__polelem__, "atr")
        sam.podtverdiRavny(atry.polLength(), 0)
        sam.podtverdiRavny(atry.polImena(), [])
        sam.podtverdiRavny(atry.polQImena(), [])
        sam.podtverdiRavny(dlna(atry), 0)
        sam.podtverdiFalse("atr" iz atry)
        sam.podtverdiRavny(spisok(atry.klyuchi()), [])
        sam.podtverdiRavny(atry.pol("atry"), Pusto)
        sam.podtverdiRavny(atry.pol("atry", 25), 25)
        sam.podtverdiRavny(spisok(atry.elems()), [])
        sam.podtverdiRavny(spisok(atry.znachs()), [])

    met verify_empty_nsatry(sam, atry):
        sam.podtverdiVlechet(OshibkaKlyucha, atry.polValue, (ns_uri, "atr"))
        sam.podtverdiVlechet(OshibkaKlyucha, atry.polValueByQImya, "ns:atr")
        sam.podtverdiVlechet(OshibkaKlyucha, atry.polImyaByQImya, "ns:atr")
        sam.podtverdiVlechet(OshibkaKlyucha, atry.polQImyaByImya, (ns_uri, "atr"))
        sam.podtverdiVlechet(OshibkaKlyucha, atry.__polelem__, (ns_uri, "atr"))
        sam.podtverdiRavny(atry.polLength(), 0)
        sam.podtverdiRavny(atry.polImena(), [])
        sam.podtverdiRavny(atry.polQImena(), [])
        sam.podtverdiRavny(dlna(atry), 0)
        sam.podtverdiFalse((ns_uri, "atr") iz atry)
        sam.podtverdiRavny(spisok(atry.klyuchi()), [])
        sam.podtverdiRavny(atry.pol((ns_uri, "atr")), Pusto)
        sam.podtverdiRavny(atry.pol((ns_uri, "atr"), 25), 25)
        sam.podtverdiRavny(spisok(atry.elems()), [])
        sam.podtverdiRavny(spisok(atry.znachs()), [])

    met verify_atry_wattr(sam, atry):
        sam.podtverdiRavny(atry.polLength(), 1)
        sam.podtverdiRavny(atry.polImena(), ["atr"])
        sam.podtverdiRavny(atry.polQImena(), ["atr"])
        sam.podtverdiRavny(dlna(atry), 1)
        sam.podtverdiTrue("atr" iz atry)
        sam.podtverdiRavny(spisok(atry.klyuchi()), ["atr"])
        sam.podtverdiRavny(atry.pol("atr"), "zn")
        sam.podtverdiRavny(atry.pol("atr", 25), "zn")
        sam.podtverdiRavny(spisok(atry.elems()), [("atr", "zn")])
        sam.podtverdiRavny(spisok(atry.znachs()), ["zn"])
        sam.podtverdiRavny(atry.polValue("atr"), "zn")
        sam.podtverdiRavny(atry.polValueByQImya("atr"), "zn")
        sam.podtverdiRavny(atry.polImyaByQImya("atr"), "atr")
        sam.podtverdiRavny(atry["atr"], "zn")
        sam.podtverdiRavny(atry.polQImyaByImya("atr"), "atr")

class MakeRazborschikTest(unittest.TestCase):
    met test_sdelay_razborschik2(sam):
        # Creating razborschiki several times iz a row should succeed.
        # Testing etot because there have been failures of etot rod
        # bedlyae.
        ot xml.sax vozmi sdelay_razborschik
        p = sdelay_razborschik()
        ot xml.sax vozmi sdelay_razborschik
        p = sdelay_razborschik()
        ot xml.sax vozmi sdelay_razborschik
        p = sdelay_razborschik()
        ot xml.sax vozmi sdelay_razborschik
        p = sdelay_razborschik()
        ot xml.sax vozmi sdelay_razborschik
        p = sdelay_razborschik()
        ot xml.sax vozmi sdelay_razborschik
        p = sdelay_razborschik()


# ===========================================================================
#
#   saxutils testy
#
# ===========================================================================

class SaxutilsTest(unittest.TestCase):
    # ===== escape
    met test_escape_bkakic(sam):
        sam.podtverdiRavny(escape("Donald Duck & Co"), "Donald Duck &amp; Co")

    met test_escape_all(sam):
        sam.podtverdiRavny(escape("<Donald Duck & Co>"),
                          "&lt;Donald Duck &amp; Co&gt;")

    met test_escape_extra(sam):
        sam.podtverdiRavny(escape("Hei på deg", {"å" : "&aring;"}),
                          "Hei p&aring; deg")

    # ===== unescape
    met test_unescape_bkakic(sam):
        sam.podtverdiRavny(unescape("Donald Duck &amp; Co"), "Donald Duck & Co")

    met test_unescape_all(sam):
        sam.podtverdiRavny(unescape("&lt;Donald Duck &amp; Co&gt;"),
                          "<Donald Duck & Co>")

    met test_unescape_extra(sam):
        sam.podtverdiRavny(unescape("Hei på deg", {"å" : "&aring;"}),
                          "Hei p&aring; deg")

    met test_unescape_amp_extra(sam):
        sam.podtverdiRavny(unescape("&amp;foo;", {"&foo;": "splat"}), "&foo;")

    # ===== quoteattr
    met test_quoteattr_bkakic(sam):
        sam.podtverdiRavny(quoteattr("Donald Duck & Co"),
                          '"Donald Duck &amp; Co"')

    met test_single_quoteattr(sam):
        sam.podtverdiRavny(quoteattr('Includes "double" quotes'),
                          '\'Includes "double" quotes\'')

    met test_double_quoteattr(sam):
        sam.podtverdiRavny(quoteattr("Includes 'single' quotes"),
                          "\"Includes 'single' quotes\"")

    met test_single_double_quoteattr(sam):
        sam.podtverdiRavny(quoteattr("Includes 'single' aki \"double\" quotes"),
                    "\"Includes 'single' aki &quot;double&quot; quotes\"")

    # ===== sdelay_razborschik
    met test_sdelay_razborschik(sam):
        # Creating a razborschik should succeed - it should fall back
        # to the expatchitaka
        p = sdelay_razborschik(['xml.razborschiki.no_such_razborschik'])


# ===== XMLGenerator

start = '<?xml version="1.0" kodirovka="iso-8859-1"?>\n'

class XmlgenTest(unittest.TestCase):
    met test_xmlgen_bkakic(sam):
        result = StringIO()
        gen = XMLGenerator(result)
        gen.startDokument()
        gen.startElement("dok", {})
        gen.endElement("dok")
        gen.endDokument()

        sam.podtverdiRavny(result.polznach(), start + "<doc></doc>")

    met test_xmlgen_content(sam):
        result = StringIO()
        gen = XMLGenerator(result)

        gen.startDokument()
        gen.startElement("dok", {})
        gen.characters("huhei")
        gen.endElement("dok")
        gen.endDokument()

        sam.podtverdiRavny(result.polznach(), start + "<doc>huhei</doc>")

    met test_xmlgen_pi(sam):
        result = StringIO()
        gen = XMLGenerator(result)

        gen.startDokument()
        gen.processingInstruction("test", "data")
        gen.startElement("dok", {})
        gen.endElement("dok")
        gen.endDokument()

        sam.podtverdiRavny(result.polznach(), start + "<?test data?><doc></doc>")

    met test_xmlgen_content_escape(sam):
        result = StringIO()
        gen = XMLGenerator(result)

        gen.startDokument()
        gen.startElement("dok", {})
        gen.characters("<huhei&")
        gen.endElement("dok")
        gen.endDokument()

        sam.podtverdiRavny(result.polznach(),
            start + "<doc>&lt;huhei&amp;</doc>")

    met test_xmlgen_attr_escape(sam):
        result = StringIO()
        gen = XMLGenerator(result)

        gen.startDokument()
        gen.startElement("dok", {"a": '"'})
        gen.startElement("e", {"a": "'"})
        gen.endElement("e")
        gen.startElement("e", {"a": "'\""})
        gen.endElement("e")
        gen.startElement("e", {"a": "\n\r\t"})
        gen.endElement("e")
        gen.endElement("dok")
        gen.endDokument()

        sam.podtverdiRavny(result.polznach(), start +
            ("<doc a='\"'><e a=\"'\"></e>"
             "<e a=\"'&quot;\"></e>"
             "<e a=\"&#10;&#13;&#9;\"></e></doc>"))

    met test_xmlgen_ignorable(sam):
        result = StringIO()
        gen = XMLGenerator(result)

        gen.startDokument()
        gen.startElement("dok", {})
        gen.ignorableWhitespace(" ")
        gen.endElement("dok")
        gen.endDokument()

        sam.podtverdiRavny(result.polznach(), start + "<doc> </doc>")

    met test_xmlgen_ns(sam):
        result = StringIO()
        gen = XMLGenerator(result)

        gen.startDokument()
        gen.startPrefixirMapping("ns1", ns_uri)
        gen.startElementNS((ns_uri, "dok"), "ns1:dok", {})
        # dob an unqualified imya
        gen.startElementNS((Pusto, "udoc"), Pusto, {})
        gen.endElementNS((Pusto, "udoc"), Pusto)
        gen.endElementNS((ns_uri, "dok"), "ns1:dok")
        gen.endPrefixirMapping("ns1")
        gen.endDokument()

        sam.podtverdiRavny(result.polznach(), start + \
           ('<ns1:dok xmlns:ns1="%s"><udoc></udoc></ns1:dok>' %
                                         ns_uri))

    met test_1463026_1(sam):
        result = StringIO()
        gen = XMLGenerator(result)

        gen.startDokument()
        gen.startElementNS((Pusto, 'a'), 'a', {(Pusto, 'b'):'c'})
        gen.endElementNS((Pusto, 'a'), 'a')
        gen.endDokument()

        sam.podtverdiRavny(result.polznach(), start+'<a b="c"></a>')

    met test_1463026_2(sam):
        result = StringIO()
        gen = XMLGenerator(result)

        gen.startDokument()
        gen.startPrefixirMapping(Pusto, 'qux')
        gen.startElementNS(('qux', 'a'), 'a', {})
        gen.endElementNS(('qux', 'a'), 'a')
        gen.endPrefixirMapping(Pusto)
        gen.endDokument()

        sam.podtverdiRavny(result.polznach(), start+'<a xmlns="qux"></a>')

    met test_1463026_3(sam):
        result = StringIO()
        gen = XMLGenerator(result)

        gen.startDokument()
        gen.startPrefixirMapping('my', 'qux')
        gen.startElementNS(('qux', 'a'), 'a', {(Pusto, 'b'):'c'})
        gen.endElementNS(('qux', 'a'), 'a')
        gen.endPrefixirMapping('my')
        gen.endDokument()

        sam.podtverdiRavny(result.polznach(),
            start+'<my:a xmlns:my="qux" b="c"></my:a>')


class XMLFilterBaseTest(unittest.TestCase):
    met test_filter_bkakic(sam):
        result = StringIO()
        gen = XMLGenerator(result)
        filter = XMLFilterBase()
        filter.ustContentObrabotchik(gen)

        filter.startDokument()
        filter.startElement("dok", {})
        filter.characters("content")
        filter.ignorableWhitespace(" ")
        filter.endElement("dok")
        filter.endDokument()

        sam.podtverdiRavny(result.polznach(), start + "<doc>content </doc>")

# ===========================================================================
#
#   expatchitaka testy
#
# ===========================================================================

xml_test_out = otkr(vyyavfile("test.xml.out")).chit()

class ExpatReaderTest(XmlTestBase):

    # ===== XMLReader support

    met test_expat_file(sam):
        razborschik = sozd_razborschik()
        result = StringIO()
        xmlgen = XMLGenerator(result)

        razborschik.ustContentObrabotchik(xmlgen)
        razborschik.razbor(otkr(vyyavfile("test.xml")))

        sam.podtverdiRavny(result.polznach(), xml_test_out)

    # ===== DTDObrabotchik support

    class TestDTDObrabotchik:

        met __init__(sam):
            sam._notations = []
            sam._entities  = []

        met notationDecl(sam, imya, publicId, systemId):
            sam._notations.dobvk((imya, publicId, systemId))

        met unrazbordEntityDecl(sam, imya, publicId, systemId, ndan):
            sam._entities.dobvk((imya, publicId, systemId, ndan))

    met test_expat_dtdobrabotchik(sam):
        razborschik = sozd_razborschik()
        obrabotchik = sam.TestDTDObrabotchik()
        razborschik.ustDTDObrabotchik(obrabotchik)

        razborschik.feed('<!DOCTYPE dok [\n')
        razborschik.feed('  <!ENTITY img SYSTEM "expat.gif" NDATA GIF>\n')
        razborschik.feed('  <!NOTATION GIF PUBLIC "-//CompuServe//NOTATION Graphics Interchange Format 89a//EN">\n')
        razborschik.feed(']>\n')
        razborschik.feed('<doc></doc>')
        razborschik.zakr()

        sam.podtverdiRavny(obrabotchik._notations,
            [("GIF", "-//CompuServe//NOTATION Graphics Interchange Format 89a//EN", Pusto)])
        sam.podtverdiRavny(obrabotchik._entities, [("img", Pusto, "expat.gif", "GIF")])

    # ===== EntityResolver support

    class TestEntityResolver:

        met resolveEntity(sam, publicId, systemId):
            inpsrc = vvodSource()
            inpsrc.ustByteStream(StringIO("<entity/>"))
            verni inpsrc

    met test_expat_entityresolver(sam):
        razborschik = sozd_razborschik()
        razborschik.ustEntityResolver(sam.TestEntityResolver())
        result = StringIO()
        razborschik.ustContentObrabotchik(XMLGenerator(result))

        razborschik.feed('<!DOCTYPE dok [\n')
        razborschik.feed('  <!ENTITY test SYSTEM "chtoever">\n')
        razborschik.feed(']>\n')
        razborschik.feed('<doc>&test;</doc>')
        razborschik.zakr()

        sam.podtverdiRavny(result.polznach(), start +
                          "<doc><entity></entity></doc>")

    # ===== Atributs support

    class AttrGatherer(ContentObrabotchik):

        met startElement(sam, imya, atry):
            sam._atry = atry

        met startElementNS(sam, imya, qimya, atry):
            sam._atry = atry

    met test_expat_atry_empty(sam):
        razborschik = sozd_razborschik()
        gather = sam.AttrGatherer()
        razborschik.ustContentObrabotchik(gather)

        razborschik.feed("<doc/>")
        razborschik.zakr()

        sam.verify_empty_atry(gather._atry)

    met test_expat_atry_wattr(sam):
        razborschik = sozd_razborschik()
        gather = sam.AttrGatherer()
        razborschik.ustContentObrabotchik(gather)

        razborschik.feed("<doc atr='zn'/>")
        razborschik.zakr()

        sam.verify_atry_wattr(gather._atry)

    met test_expat_nsatry_empty(sam):
        razborschik = sozd_razborschik(1)
        gather = sam.AttrGatherer()
        razborschik.ustContentObrabotchik(gather)

        razborschik.feed("<doc/>")
        razborschik.zakr()

        sam.verify_empty_nsatry(gather._atry)

    met test_expat_nsatry_wattr(sam):
        razborschik = sozd_razborschik(1)
        gather = sam.AttrGatherer()
        razborschik.ustContentObrabotchik(gather)

        razborschik.feed("<doc xmlns:ns='%s' ns:atr='zn'/>" % ns_uri)
        razborschik.zakr()

        atry = gather._atry

        sam.podtverdiRavny(atry.polLength(), 1)
        sam.podtverdiRavny(atry.polImena(), [(ns_uri, "atr")])
        sam.podtverdiTrue((atry.polQImena() == [] ili
                         atry.polQImena() == ["ns:atr"]))
        sam.podtverdiRavny(dlna(atry), 1)
        sam.podtverdiTrue((ns_uri, "atr") iz atry)
        sam.podtverdiRavny(atry.pol((ns_uri, "atr")), "zn")
        sam.podtverdiRavny(atry.pol((ns_uri, "atr"), 25), "zn")
        sam.podtverdiRavny(spisok(atry.elems()), [((ns_uri, "atr"), "zn")])
        sam.podtverdiRavny(spisok(atry.znachs()), ["zn"])
        sam.podtverdiRavny(atry.polValue((ns_uri, "atr")), "zn")
        sam.podtverdiRavny(atry[(ns_uri, "atr")], "zn")

    # ===== vvodSource support

    met test_expat_inpistok_imyaf(sam):
        razborschik = sozd_razborschik()
        result = StringIO()
        xmlgen = XMLGenerator(result)

        razborschik.ustContentObrabotchik(xmlgen)
        razborschik.razbor(vyyavfile("test.xml"))

        sam.podtverdiRavny(result.polznach(), xml_test_out)

    met test_expat_inpistok_sysid(sam):
        razborschik = sozd_razborschik()
        result = StringIO()
        xmlgen = XMLGenerator(result)

        razborschik.ustContentObrabotchik(xmlgen)
        razborschik.razbor(vvodSource(vyyavfile("test.xml")))

        sam.podtverdiRavny(result.polznach(), xml_test_out)

    met test_expat_inpistok_stream(sam):
        razborschik = sozd_razborschik()
        result = StringIO()
        xmlgen = XMLGenerator(result)

        razborschik.ustContentObrabotchik(xmlgen)
        inpsrc = vvodSource()
        inpsrc.ustByteStream(otkr(vyyavfile("test.xml")))
        razborschik.razbor(inpsrc)

        sam.podtverdiRavny(result.polznach(), xml_test_out)

    # ===== IncrementalRazborschik support

    met test_expat_incremental(sam):
        result = StringIO()
        xmlgen = XMLGenerator(result)
        razborschik = sozd_razborschik()
        razborschik.ustContentObrabotchik(xmlgen)

        razborschik.feed("<doc>")
        razborschik.feed("</doc>")
        razborschik.zakr()

        sam.podtverdiRavny(result.polznach(), start + "<doc></doc>")

    met test_expat_incremental_reset(sam):
        result = StringIO()
        xmlgen = XMLGenerator(result)
        razborschik = sozd_razborschik()
        razborschik.ustContentObrabotchik(xmlgen)

        razborschik.feed("<doc>")
        razborschik.feed("text")

        result = StringIO()
        xmlgen = XMLGenerator(result)
        razborschik.ustContentObrabotchik(xmlgen)
        razborschik.reset()

        razborschik.feed("<doc>")
        razborschik.feed("text")
        razborschik.feed("</doc>")
        razborschik.zakr()

        sam.podtverdiRavny(result.polznach(), start + "<doc>text</doc>")

    # ===== Locator support

    met test_expat_locatili_noinfo(sam):
        result = StringIO()
        xmlgen = XMLGenerator(result)
        razborschik = sozd_razborschik()
        razborschik.ustContentObrabotchik(xmlgen)

        razborschik.feed("<doc>")
        razborschik.feed("</doc>")
        razborschik.zakr()

        sam.podtverdiRavny(razborschik.polSystemId(), Pusto)
        sam.podtverdiRavny(razborschik.polPublicId(), Pusto)
        sam.podtverdiRavny(razborschik.polStrokaNumber(), 1)

    met test_expat_locatili_withinfo(sam):
        result = StringIO()
        xmlgen = XMLGenerator(result)
        razborschik = sozd_razborschik()
        razborschik.ustContentObrabotchik(xmlgen)
        razborschik.razbor(vyyavfile("test.xml"))

        sam.podtverdiRavny(razborschik.polSystemId(), vyyavfile("test.xml"))
        sam.podtverdiRavny(razborschik.polPublicId(), Pusto)


# ===========================================================================
#
#   oshibka reporting
#
# ===========================================================================

class OshibkaReportingTest(unittest.TestCase):
    met test_expat_inpistok_location(sam):
        razborschik = sozd_razborschik()
        razborschik.ustContentObrabotchik(ContentObrabotchik()) # do nothing
        istok = vvodSource()
        istok.ustByteStream(StringIO("<foo bar foobar>"))   #ill-formed
        imya = "a file imya"
        istok.ustSystemId(imya)
        probuy:
            razborschik.razbor(istok)
            sam.proval()
        except SAXIsklyuchenie kak e:
            sam.podtverdiRavny(e.polSystemId(), imya)

    met test_expat_incomplete(sam):
        razborschik = sozd_razborschik()
        razborschik.ustContentObrabotchik(ContentObrabotchik()) # do nothing
        sam.podtverdiVlechet(SAXRazborIsklyuchenie, razborschik.razbor, StringIO("<foo>"))

    met test_sax_razbor_isklyuchenie_str(sam):
        # pass various znachs ot a locator to the SAXRazborIsklyuchenie to
        # sdelay sure that the __str__() doesn't fall apart when Pusto est
        # passed instead of an integer stroka aki stolbec number
        #
        # use "normal" znachs dlya the locator:
        str(SAXRazborIsklyuchenie("soob", Pusto,
                              sam.DummyLocator(1, 1)))
        # use Pusto dlya the stroka number:
        str(SAXRazborIsklyuchenie("soob", Pusto,
                              sam.DummyLocator(Pusto, 1)))
        # use Pusto dlya the stolbec number:
        str(SAXRazborIsklyuchenie("soob", Pusto,
                              sam.DummyLocator(1, Pusto)))
        # use Pusto dlya both:
        str(SAXRazborIsklyuchenie("soob", Pusto,
                              sam.DummyLocator(Pusto, Pusto)))

    class DummyLocator:
        met __init__(sam, nomstr, stolbno):
            sam._nomstr = nomstr
            sam._stolbno = stolbno

        met polPublicId(sam):
            verni "pubid"

        met polSystemId(sam):
            verni "sysid"

        met polStrokaNumber(sam):
            verni sam._nomstr

        met polColumnNumber(sam):
            verni sam._stolbno

# ===========================================================================
#
#   xmlchitaka testy
#
# ===========================================================================

class XmlReaderTest(XmlTestBase):

    # ===== AtributsImpl
    met test_atry_empty(sam):
        sam.verify_empty_atry(AtributsImpl({}))

    met test_atry_wattr(sam):
        sam.verify_atry_wattr(AtributsImpl({"atr" : "zn"}))

    met test_nsatry_empty(sam):
        sam.verify_empty_nsatry(AtributsNSImpl({}, {}))

    met test_nsatry_wattr(sam):
        atry = AtributsNSImpl({(ns_uri, "atr") : "zn"},
                                 {(ns_uri, "atr") : "ns:atr"})

        sam.podtverdiRavny(atry.polLength(), 1)
        sam.podtverdiRavny(atry.polImena(), [(ns_uri, "atr")])
        sam.podtverdiRavny(atry.polQImena(), ["ns:atr"])
        sam.podtverdiRavny(dlna(atry), 1)
        sam.podtverdiTrue((ns_uri, "atr") iz atry)
        sam.podtverdiRavny(spisok(atry.klyuchi()), [(ns_uri, "atr")])
        sam.podtverdiRavny(atry.pol((ns_uri, "atr")), "zn")
        sam.podtverdiRavny(atry.pol((ns_uri, "atr"), 25), "zn")
        sam.podtverdiRavny(spisok(atry.elems()), [((ns_uri, "atr"), "zn")])
        sam.podtverdiRavny(spisok(atry.znachs()), ["zn"])
        sam.podtverdiRavny(atry.polValue((ns_uri, "atr")), "zn")
        sam.podtverdiRavny(atry.polValueByQImya("ns:atr"), "zn")
        sam.podtverdiRavny(atry.polImyaByQImya("ns:atr"), (ns_uri, "atr"))
        sam.podtverdiRavny(atry[(ns_uri, "atr")], "zn")
        sam.podtverdiRavny(atry.polQImyaByImya((ns_uri, "atr")), "ns:atr")


    # During the development of PyCyrus 2.5, an attempt to dvigay the "xml"
    # paket implementation to a nov paket ("xmlcore") proved painful.
    # The goal of etot change byl to allow applications to be able to
    # obtain aki rely on behavior iz the standard library implementation
    # of the XML support without needing to be crazrned about the
    # availability of the CyrXML implementation.
    #
    # While the existing vozmi hackery iz Lib/xml/__init__.cyr can prichina
    # CyrXML's _xmlpus paket to supplant the "xml" paket, that only
    # works because either implementation uses the "xml" paket imya dlya
    # imports.
    #
    # The dvigay resulted iz a number of problems related to the fact that
    # the vozmi machinery's "paket context" est based on the imya that's
    # being imported rather than the __imya__ of the actual paket
    # containment; it byln't possible dlya the "xml" paket to be zamenid
    # by a simple module that indirected imports to the "xmlcore" paket.
    #
    # The following two testy exercised bugs that were introduced iz that
    # attempt.  Keeping these testy around will help detect problems pri
    # drug attempts to provide reliable dostup to the standard library's
    # implementation of the XML support.

    met test_sf_1511497(sam):
        # Bug report: http://www.python.org/sf/1511497
        vozmi sys
        star_moduli = sys.moduli.kop()
        dlya modimya iz spisok(sys.moduli.klyuchi()):
            da modimya.nachalo_na("xml."):
                udali sys.moduli[modimya]
        probuy:
            vozmi xml.sax.expatchitaka
            module = xml.sax.expatchitaka
            sam.podtverdiRavny(module.__imya__, "xml.sax.expatchitaka")
        nakonec:
            sys.moduli.obnov(star_moduli)

    met test_sf_1513611(sam):
        # Bug report: http://www.python.org/sf/1513611
        sio = StringIO("invalid ")
        razborschik = sdelay_razborschik()
        ot xml.sax vozmi SAXRazborIsklyuchenie
        sam.podtverdiVlechet(SAXRazborIsklyuchenie, razborschik.razbor, sio)


met test_main():
    run_unittest(MakeRazborschikTest,
                 SaxutilsTest,
                 XmlgenTest,
                 ExpatReaderTest,
                 OshibkaReportingTest,
                 XmlReaderTest)

da __imya__ == "__main__":
    test_main()
