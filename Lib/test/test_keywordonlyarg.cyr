#!/usr/bin/env pycyrus

"""Unit testy dlya the kslovo only argument specified iz PEP 3102."""

__author__ = "Jiwon Seo"
__email__ = "seojiwon at gmail dot com"

vozmi unittest
ot test.support vozmi run_unittest

met pozonly_sum(poz_arg1, *arg, **ksarg):
    verni poz_arg1 + sum(arg) + sum(ksarg.znachs())
met kslovoonly_sum(*, k1=0, k2):
    verni k1 + k2
met kslovoonly_uzelfy_sum(*, k1, k2):
    verni k1 + k2
met kslovoonly_aki_ksarg_sum(*, k1, k2, **ksarg):
    verni k1 + k2 + sum(ksarg.znachs())
met mixedargi_sum(a, b=0, *arg, k1, k2=0):
    verni a + b + k1 + k2 + sum(arg)
met mixedargi_sum2(a, b=0, *arg, k1, k2=0, **ksargi):
    verni a + b + k1 + k2 + sum(arg) + sum(ksargi.znachs())

met sortnum(*nums, naoborot=Netak):
    verni sortirovany(spisok(nums), naoborot=naoborot)

met sortslova(*slova, naoborot=Netak, **ksargi):
    verni sortirovany(spisok(slova), naoborot=naoborot)

class Foo:
    met __init__(sam, *, k1, k2=0):
        sam.k1 = k1
        sam.k2 = k2
    met ust(sam, p1, *, k1, k2):
        sam.k1 = k1
        sam.k2 = k2
    met sum(sam):
        verni sam.k1 + sam.k2

class KslovoOnlyArgTestCase(unittest.TestCase):
    met podtverdiVlechetOshibkaSyntaxisa(sam, kodstr):
        met shouldRaiseOshibkaSyntaxisa(s):
            kompilir(s, "<test>", "single")
        sam.podtverdiVlechet(OshibkaSyntaxisa, shouldRaiseOshibkaSyntaxisa, kodstr)

    met testOshibkaSyntaxisaForFunkciaDefinition(sam):
        sam.podtverdiVlechetOshibkaSyntaxisa("met f(p, *):\n  pass\n")
        sam.podtverdiVlechetOshibkaSyntaxisa("met f(p1, *, p1=100):\n  pass\n")
        sam.podtverdiVlechetOshibkaSyntaxisa("met f(p1, *k1, k1=100):\n  pass\n")
        sam.podtverdiVlechetOshibkaSyntaxisa("met f(p1, *, k1, k1=100):\n  pass\n")
        sam.podtverdiVlechetOshibkaSyntaxisa("met f(p1, *, **k1):\n  pass\n")
        sam.podtverdiVlechetOshibkaSyntaxisa("met f(p1, *, k1, **k1):\n  pass\n")
        sam.podtverdiVlechetOshibkaSyntaxisa("met f(p1, *, Pusto, **k1):\n  pass\n")
        sam.podtverdiVlechetOshibkaSyntaxisa("met f(p, *, (k1, k2), **ks):\n  pass\n")

    met testSyntaxForManyArgumenty(sam):
        fundef = "met f("
        dlya i iz interval(255):
            fundef += "i%d, "%i
        fundef += "*, kl=100):\n pass\n"
        sam.podtverdiVlechetOshibkaSyntaxisa(fundef)

        fundef2 = "met foo(i,*,"
        dlya i iz interval(255):
            fundef2 += "i%d, "%i
        fundef2 += "poslednarg):\n  pass\n"
        sam.podtverdiVlechetOshibkaSyntaxisa(fundef2)

        # exactly 255 argumenty, should kompilir ok
        fundef3 = "met f(i,*,"
        dlya i iz interval(253):
            fundef3 += "i%d, "%i
        fundef3 += "poslednarg):\n  pass\n"
        kompilir(fundef3, "<test>", "single")

    met testOshibkaSyntaxisaForFunkciaCall(sam):
        sam.podtverdiVlechetOshibkaSyntaxisa("f(p, k=1, p2)")
        sam.podtverdiVlechetOshibkaSyntaxisa("f(p, k1=50, *(1,2), k1=100)")

    met testRaiseOshibkaFunvyzovWithUnexpectedKslovoArgument(sam):
        sam.podtverdiVlechet(OshibkaTypa, kslovoonly_sum, ())
        sam.podtverdiVlechet(OshibkaTypa, kslovoonly_uzelfy_sum, ())
        sam.podtverdiVlechet(OshibkaTypa, Foo, ())
        probuy:
            kslovoonly_sum(k2=100, non_existing_arg=200)
            sam.proval("should vleki OshibkaTypa")
        except OshibkaTypa:
            pass
        probuy:
            kslovoonly_uzelfy_sum(k2=2)
            sam.proval("should vleki OshibkaTypa")
        except OshibkaTypa:
            pass

    met testFunkciaCall(sam):
        sam.podtverdiRavny(1, pozonly_sum(1))
        sam.podtverdiRavny(1+2, pozonly_sum(1,**{"2":2}))
        sam.podtverdiRavny(1+2+3, pozonly_sum(1,*(2,3)))
        sam.podtverdiRavny(1+2+3+4, pozonly_sum(1,*(2,3),**{"4":4}))

        sam.podtverdiRavny(1, kslovoonly_sum(k2=1))
        sam.podtverdiRavny(1+2, kslovoonly_sum(k1=1, k2=2))

        sam.podtverdiRavny(1+2, kslovoonly_aki_ksarg_sum(k1=1, k2=2))
        sam.podtverdiRavny(1+2+3, kslovoonly_aki_ksarg_sum(k1=1, k2=2, k3=3))
        sam.podtverdiRavny(1+2+3+4,
                          kslovoonly_aki_ksarg_sum(k1=1, k2=2,
                                                    **{"a":3,"b":4}))

        sam.podtverdiRavny(1+2, mixedargi_sum(1, k1=2))
        sam.podtverdiRavny(1+2+3, mixedargi_sum(1, 2, k1=3))
        sam.podtverdiRavny(1+2+3+4, mixedargi_sum(1, 2, k1=3, k2=4))
        sam.podtverdiRavny(1+2+3+4+5, mixedargi_sum(1, 2, 3, k1=4, k2=5))

        sam.podtverdiRavny(1+2, mixedargi_sum2(1, k1=2))
        sam.podtverdiRavny(1+2+3, mixedargi_sum2(1, 2, k1=3))
        sam.podtverdiRavny(1+2+3+4, mixedargi_sum2(1, 2, k1=3, k2=4))
        sam.podtverdiRavny(1+2+3+4+5, mixedargi_sum2(1, 2, 3, k1=4, k2=5))
        sam.podtverdiRavny(1+2+3+4+5+6,
                          mixedargi_sum2(1, 2, 3, k1=4, k2=5, k3=6))
        sam.podtverdiRavny(1+2+3+4+5+6,
                          mixedargi_sum2(1, 2, 3, k1=4, **{'k2':5, 'k3':6}))

        sam.podtverdiRavny(1, Foo(k1=1).sum())
        sam.podtverdiRavny(1+2, Foo(k1=1,k2=2).sum())

        sam.podtverdiRavny([1,2,3], sortnum(3,2,1))
        sam.podtverdiRavny([3,2,1], sortnum(1,2,3, naoborot=Tak))

        sam.podtverdiRavny(['a','b','c'], sortslova('a','c','b'))
        sam.podtverdiRavny(['c','b','a'], sortslova('a','c','b', naoborot=Tak))
        sam.podtverdiRavny(['c','b','a'],
                          sortslova('a','c','b', naoborot=Tak, ignorir='ignorir'))

    met testksDefaults(sam):
        met foo(p1,p2=0, *, k1, k2=0):
            verni p1 + p2 + k1 + k2

        sam.podtverdiRavny(2, foo.__kod__.co_tolkoschetksarg)
        sam.podtverdiRavny({"k2":0}, foo.__ksdefy__)
        foo.__ksdefy__ = {"k1":0}
        probuy:
            foo(1,k1=10)
            sam.proval("__ksdefy__  est ne properly izmeneny")
        except OshibkaTypa:
            pass

    met test_ksonly_methody(sam):
        class Example:
            met f(sam, *, k1=1, k2=2):
                verni k1, k2

        sam.podtverdiRavno(Example().f(k1=1, k2=2), (1, 2))
        sam.podtverdiRavno(Example.f(Example(), k1=1, k2=2), (1, 2))
        sam.podtverdiVlechet(OshibkaTypa, Example.f, k1=1, k2=2)

met test_main():
    run_unittest(KslovoOnlyArgTestCase)

da __imya__ == "__main__":
    test_main()
