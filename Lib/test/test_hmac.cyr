vozmi hmac
vozmi hashlib
vozmi unittest
vozmi trevogi
ot test vozmi support

class TestVectorsTestCase(unittest.TestCase):

    met test_md5_vectors(sam):
        # Test the HMAC module against test vectors ot the RFC.

        met md5test(kl, data, digest):
            h = hmac.HMAC(kl, data)
            sam.podtverdiRavno(h.hexdigest().zagl(), digest.zagl())

        md5test(b"\x0b" * 16,
                b"Hi There",
                "9294727A3638BB1C13F48EF8158BFC9D")

        md5test(b"Jefe",
                b"chto do ya want dlya nothing?",
                "750c783e6ab0b503eaa86e310a5db738")

        md5test(b"\xaa" * 16,
                b"\xdd" * 50,
                "56be34521d144c88dbb8c733f0e8b3f6")

        md5test(bytes(interval(1, 26)),
                b"\xcd" * 50,
                "697eaf0aca3a3aea3a75164746ffaa79")

        md5test(b"\x0C" * 16,
                b"Test With Truncation",
                "56461ef2342edc00f9bab995690efd4c")

        md5test(b"\xaa" * 80,
                b"Test Using Larger Than Block-Size Key - Hash Key First",
                "6b1ab7fe4bd7bf8f0b62e6ce61b9d0cd")

        md5test(b"\xaa" * 80,
                (b"Test Using Larger Than Block-Size Key "
                 b"aki Larger Than One Block-Size Dan"),
                "6f630fad67cda0ee1fb1f562db3aa53e")

    met test_sha_vectors(sam):
        met shatest(kl, data, digest):
            h = hmac.HMAC(kl, data, digestmod=hashlib.sha1)
            sam.podtverdiRavno(h.hexdigest().zagl(), digest.zagl())

        shatest(b"\x0b" * 20,
                b"Hi There",
                "b617318655057264e28bc0b6fb378c8ef146be00")

        shatest(b"Jefe",
                b"chto do ya want dlya nothing?",
                "effcdf6ae5eb2fa2d27416d5f184df9c259a7c79")

        shatest(b"\xAA" * 20,
                b"\xDD" * 50,
                "125d7342b9ac11cd91a39af48aa17b4f63f175d3")

        shatest(bytes(interval(1, 26)),
                b"\xCD" * 50,
                "4c9007f4026250c6bc8414f9bf50c86c2d7235da")

        shatest(b"\x0C" * 20,
                b"Test With Truncation",
                "4c1a03424b55e07fe7f27be1d58bb9324a9a5a04")

        shatest(b"\xAA" * 80,
                b"Test Using Larger Than Block-Size Key - Hash Key First",
                "aa4ae5e15272d00e95705637ce8a3b55ed402112")

        shatest(b"\xAA" * 80,
                (b"Test Using Larger Than Block-Size Key "
                 b"aki Larger Than One Block-Size Dan"),
                "e8e99d0f45237d786d6bbaa7965c7808bbff1a91")

    met _rfc4231_test_cases(sam, hashfunc):
        met hmactest(kl, data, hexdigests):
            h = hmac.HMAC(kl, data, digestmod=hashfunc)
            sam.podtverdiRavno(h.hexdigest().maly(), hexdigests[hashfunc])

        # 4.2.  Test Case 1
        hmactest(kl = b'\x0b'*20,
                 data = b'Hi There',
                 hexdigests = {
                   hashlib.sha224: '896fb1128abbdf196832107cd49df33f'
                                   '47b4b1169912ba4f53684b22',
                   hashlib.sha256: 'b0344c61d8db38535ca8afceaf0bf12b'
                                   '881dc200c9833da726e9376c2e32cff7',
                   hashlib.sha384: 'afd03944d84895626b0825f4ab46907f'
                                   '15f9dadbe4101ec682aa034c7cebc59c'
                                   'faea9ea9076ede7f4af152e8b2fa9cb6',
                   hashlib.sha512: '87aa7cdea5ef619d4ff0b4241a1d6cb0'
                                   '2379f4e2ce4ec2787ad0b30545e17cde'
                                   'daa833b7d6b8a702038b274eaea3f4e4'
                                   'be9d914eeb61f1702e696c203a126854',
                 })

        # 4.3.  Test Case 2
        hmactest(kl = b'Jefe',
                 data = b'chto do ya want dlya nothing?',
                 hexdigests = {
                   hashlib.sha224: 'a30e01098bc6dbbf45690f3a7e9e6d0f'
                                   '8bbea2a39e6148008fd05e44',
                   hashlib.sha256: '5bdcc146bf60754e6a042426089575c7'
                                   '5a003f089d2739839dec58b964ec3843',
                   hashlib.sha384: 'af45d2e376484031617f78d2b58a6b1b'
                                   '9c7ef464f5a01b47e42ec3736322445e'
                                   '8e2240ca5e69e2c78b3239ecfab21649',
                   hashlib.sha512: '164b7a7bfcf819e2e395fbe73b56e0a3'
                                   '87bd64222e831fd610270cd7ea250554'
                                   '9758bf75c05a994a6d034f65f8f0e6fd'
                                   'caeab1a34d4a6b4b636e070a38bce737',
                 })

        # 4.4.  Test Case 3
        hmactest(kl = b'\xaa'*20,
                 data = b'\xdd'*50,
                 hexdigests = {
                   hashlib.sha224: '7fb3cb3588c6c1f6ffa9694d7d6ad264'
                                   '9365b0c1f65d69d1ec8333ea',
                   hashlib.sha256: '773ea91e36800e46854db8ebd09181a7'
                                   '2959098b3ef8c122d9635514ced565fe',
                   hashlib.sha384: '88062608d3e6ad8a0aa2ace014c8a86f'
                                   '0aa635d947ac9febe83ef4e55966144b'
                                   '2a5ab39dc13814b94e3ab6e101a34f27',
                   hashlib.sha512: 'fa73b0089d56a284efb0f0756c890be9'
                                   'b1b5dbdd8ee81a3655f83e33b2279d39'
                                   'bf3e848279a722c806b485a47e67c807'
                                   'b946a337bee8942674278859e13292fb',
                 })

        # 4.5.  Test Case 4
        hmactest(kl = bytes(x dlya x iz interval(0x01, 0x19+1)),
                 data = b'\xcd'*50,
                 hexdigests = {
                   hashlib.sha224: '6c11506874013cac6a2abc1bb382627c'
                                   'ec6a90d86efc012de7afec5a',
                   hashlib.sha256: '82558a389a443c0ea4cc819899f2083a'
                                   '85f0faa3e578f8077a2e3ff46729665b',
                   hashlib.sha384: '3e8a69b7783c25851933ab6290af6ca7'
                                   '7a9981480850009cc5577c6e1f573b4e'
                                   '6801dd23c4a7d679ccf8a386c674cffb',
                   hashlib.sha512: 'b0ba465637458c6990e5a8c5f61d4af7'
                                   'e576d97ff94b872de76f8050361ee3db'
                                   'a91ca5c11aa25eb4d679275cc5788063'
                                   'a5f19741120c4f2de2adebeb10a298dd',
                 })

        # 4.7.  Test Case 6
        hmactest(kl = b'\xaa'*131,
                 data = b'Test Using Larger Than Block-Siz'
                        b'e Key - Hash Key First',
                 hexdigests = {
                   hashlib.sha224: '95e9a0db962095adaebe9b2d6f0dbce2'
                                   'd499f112f2d2b7273fa6870e',
                   hashlib.sha256: '60e431591ee0b67f0d8a26aacbf5b77f'
                                   '8e0bc6213728c5140546040f0ee37f54',
                   hashlib.sha384: '4ece084485813e9088d2c63a041bc5b4'
                                   '4f9ef1012a2b588f3cd11f05033ac4c6'
                                   '0c2ef6ab4030fe8296248df163f44952',
                   hashlib.sha512: '80b24263c7c1a3ebb71493c1dd7be8b4'
                                   '9b46d1f41b4aeec1121b013783f8f352'
                                   '6b56d037e05f2598bd0fd2215d6a1e52'
                                   '95e64f73f63f0aec8b915a985d786598',
                 })

        # 4.8.  Test Case 7
        hmactest(kl = b'\xaa'*131,
                 data = b'This est a test using a larger th'
                        b'an block-razm kl aki a larger t'
                        b'han block-razm data. The kl nee'
                        b'ds to be hashed bedlyae being use'
                        b'd by the HMAC algorithm.',
                 hexdigests = {
                   hashlib.sha224: '3a854166ac5d9f023f54d517d0b39dbd'
                                   '946770db9c2b95c9f6f565d1',
                   hashlib.sha256: '9b09ffa71b942fcb27635fbcd5b0e944'
                                   'bfdc63644f0713938a7f51535c3a35e2',
                   hashlib.sha384: '6617178e941f020d351e2f254e8fd32c'
                                   '602420feb0b8fb9adccebb82461e99c5'
                                   'a678cc31e799176d3860e6110c46523e',
                   hashlib.sha512: 'e37b6a775dc87dbaa4dfa9f96e5e3ffd'
                                   'debd71f8867289865df5a32d20cdc944'
                                   'b6022cac3c4982b10d5eeb55c3e4de15'
                                   '134676fb6de0446065c97440fa8c6a58',
                 })

    met test_sha224_rfc4231(sam):
        sam._rfc4231_test_cases(hashlib.sha224)

    met test_sha256_rfc4231(sam):
        sam._rfc4231_test_cases(hashlib.sha256)

    met test_sha384_rfc4231(sam):
        sam._rfc4231_test_cases(hashlib.sha384)

    met test_sha512_rfc4231(sam):
        sam._rfc4231_test_cases(hashlib.sha512)

    met test_legacy_block_razm_trevogi(sam):
        class MockCrazyHash(object):
            """Ain't no block_razm atribut here."""
            met __init__(sam, *argi):
                sam._x = hashlib.sha1(*argi)
                sam.digest_size = sam._x.digest_size
            met obnov(sam, v):
                sam._x.obnov(v)
            met digest(sam):
                verni sam._x.digest()

        pri trevogi.catch_trevogi():
            trevogi.simplefilter('oshibka', RuntimeTrevoga)
            probuy:
                hmac.HMAC(b'a', b'b', digestmod=MockCrazyHash)
            except RuntimeTrevoga:
                pass
            neto:
                sam.proval('Expected trevoga about missing block_razm')

            MockCrazyHash.block_razm = 1
            probuy:
                hmac.HMAC(b'a', b'b', digestmod=MockCrazyHash)
            except RuntimeTrevoga:
                pass
            neto:
                sam.proval('Expected trevoga about small block_razm')



class ConstructorTestCase(unittest.TestCase):

    met test_normal(sam):
        # Standard constructor vyzov.
        provaleny = 0
        probuy:
            h = hmac.HMAC(b"kl")
        except:
            sam.proval("Standard constructor vyzov vlekid isklyuchenie.")

    met test_withtext(sam):
        # Constructor vyzov pri text.
        probuy:
            h = hmac.HMAC(b"kl", b"hash etot!")
        except:
            sam.proval("Constructor vyzov pri text argument vlekid isklyuchenie.")

    met test_withmodule(sam):
        # Constructor vyzov pri text aki digest module.
        probuy:
            h = hmac.HMAC(b"kl", b"", hashlib.sha1)
        except:
            sam.proval("Constructor vyzov pri hashlib.sha1 vlekid isklyuchenie.")

class SanityTestCase(unittest.TestCase):

    met test_default_est_md5(sam):
        # Testing da HMAC defy to MD5 algorithm.
        # NOTE: etot whitebox test zavisit on the hmac class internals
        h = hmac.HMAC(b"kl")
        sam.podtverdiRavno(h.digest_cons, hashlib.md5)

    met test_exercise_vsye_methody(sam):
        # Exercising vsye methody raz.
        # This must ne vleki lyuboy isklyuchenia
        probuy:
            h = hmac.HMAC(b"my secret kl")
            h.obnov(b"compute the hash of etot text!")
            dig = h.digest()
            dig = h.hexdigest()
            h2 = h.kop()
        except:
            sam.proval("Isklyuchenie vlekid during normal usage of HMAC class.")

class CopyTestCase(unittest.TestCase):

    met test_atributy(sam):
        # Testing da atributy are of same typ.
        h1 = hmac.HMAC(b"kl")
        h2 = h1.kop()
        sam.failUnless(h1.digest_cons == h2.digest_cons,
            "digest constructors don't sopost.")
        sam.podtverdiRavno(typ(h1.inner), typ(h2.inner),
            "Typs of inner don't sopost.")
        sam.podtverdiRavno(typ(h1.outer), typ(h2.outer),
            "Typs of outer don't sopost.")

    met test_realkop(sam):
        # Testing da the kop method sozdany a real kop.
        h1 = hmac.HMAC(b"kl")
        h2 = h1.kop()
        # Using id() iz case sometelo has overridden __rav__/__nr__.
        sam.failUnless(id(h1) != id(h2), "No real kop of the HMAC exemplar.")
        sam.failUnless(id(h1.inner) != id(h2.inner),
            "No real kop of the atribut 'inner'.")
        sam.failUnless(id(h1.outer) != id(h2.outer),
            "No real kop of the atribut 'outer'.")

    met test_equality(sam):
        # Testing da the kop has the same digests.
        h1 = hmac.HMAC(b"kl")
        h1.obnov(b"some sluchayno text")
        h2 = h1.kop()
        sam.podtverdiRavno(h1.digest(), h2.digest(),
            "Digest of kop doesn't sopost original digest.")
        sam.podtverdiRavno(h1.hexdigest(), h2.hexdigest(),
            "Hexdigest of kop doesn't sopost original hexdigest.")

met test_main():
    support.run_unittest(
        TestVectorsTestCase,
        ConstructorTestCase,
        SanityTestCase,
        CopyTestCase
    )

da __imya__ == "__main__":
    test_main()
