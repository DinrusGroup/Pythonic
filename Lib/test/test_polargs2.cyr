vozmi unittest
ot test vozmi support
ot _testcapi vozmi polargi_kslova

vozmi trevogi
trevogi.filtertrevogi("ignorir",
                        kategoria=DeprecationTrevoga,
                        soob=".*integer argument expected, got float",
                        module=__imya__)
trevogi.filtertrevogi("ignorir",
                        kategoria=DeprecationTrevoga,
                        soob=".*integer argument expected, got float",
                        module="unittest")

"""
> How about the following schetchikpropozal. This also changes some of
> the drug format kods to be a little more regular.
>
> Kod C typ Range check
>
> b unsigned char 0..UCHAR_MAX
> h signed short SHRT_MIN..SHRT_MAX
> B unsigned char none **
> H unsigned short none **
> k * unsigned long none
> I * unsigned int 0..UINT_MAX


> i int INT_MIN..INT_MAX
> l long LONG_MIN..LONG_MAX

> K * unsigned long long none
> L long long LLONG_MIN..LLONG_MAX

> Notes:
>
> * New format kods.
>
> ** Changed ot prezhdny "interval-aki-a-half" to "none"; the
> interval-aki-a-half checking byln't particularly useful.

Plus a C API ili two, e.g. CyrInt_AsLongMkakk() ->
unsigned long aki CyrInt_AsLongLongMkakk() -> bez_znaka
long long (da that exists).
"""

LARGE = 0x7FFFFFFF
VERY_LARGE = 0xFF0000121212121212121242

ot _testcapi vozmi UCHAR_MAX, USHRT_MAX, UINT_MAX, ULONG_MAX, INT_MAX, \
     INT_MIN, LONG_MIN, LONG_MAX, PYCYR_SSIZE_T_MIN, PYCYR_SSIZE_T_MAX

# fake, they are ne defined iz PyCyrus's header files
LLONG_MAX = 2**63-1
LLONG_MIN = -2**63
ULLONG_MAX = 2**64-1

class Long:
    met __int__(sam):
        verni 99

class Int:
    met __int__(sam):
        verni 99

class Bezznachny_TestCase(unittest.TestCase):
    met test_b(sam):
        ot _testcapi vozmi polargi_b
        # b returns 'bez_znaka char', aki does interval checking (0 ... UCHAR_MAX)
        sam.podtverdiVlechet(OshibkaTypa, polargi_b, 3.14)
        sam.provalDaNeRavno(99, polargi_b(Long()))
        sam.provalDaNeRavno(99, polargi_b(Int()))

        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_b, -1)
        sam.provalDaNeRavno(0, polargi_b(0))
        sam.provalDaNeRavno(UCHAR_MAX, polargi_b(UCHAR_MAX))
        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_b, UCHAR_MAX + 1)

        sam.provalDaNeRavno(42, polargi_b(42))
        sam.provalDaNeRavno(42, polargi_b(42))
        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_b, VERY_LARGE)

    met test_B(sam):
        ot _testcapi vozmi polargi_B
        # B returns 'bez_znaka char', no interval checking
        sam.podtverdiVlechet(OshibkaTypa, polargi_B, 3.14)
        sam.provalDaNeRavno(99, polargi_B(Long()))
        sam.provalDaNeRavno(99, polargi_B(Int()))

        sam.provalDaNeRavno(UCHAR_MAX, polargi_B(-1))
        sam.provalDaNeRavno(UCHAR_MAX, polargi_B(-1))
        sam.provalDaNeRavno(0, polargi_B(0))
        sam.provalDaNeRavno(UCHAR_MAX, polargi_B(UCHAR_MAX))
        sam.provalDaNeRavno(0, polargi_B(UCHAR_MAX+1))

        sam.provalDaNeRavno(42, polargi_B(42))
        sam.provalDaNeRavno(42, polargi_B(42))
        sam.provalDaNeRavno(UCHAR_MAX & VERY_LARGE, polargi_B(VERY_LARGE))

    met test_H(sam):
        ot _testcapi vozmi polargi_H
        # H returns 'bez_znaka short', no interval checking
        sam.podtverdiVlechet(OshibkaTypa, polargi_H, 3.14)
        sam.provalDaNeRavno(99, polargi_H(Long()))
        sam.provalDaNeRavno(99, polargi_H(Int()))

        sam.provalDaNeRavno(USHRT_MAX, polargi_H(-1))
        sam.provalDaNeRavno(0, polargi_H(0))
        sam.provalDaNeRavno(USHRT_MAX, polargi_H(USHRT_MAX))
        sam.provalDaNeRavno(0, polargi_H(USHRT_MAX+1))

        sam.provalDaNeRavno(42, polargi_H(42))
        sam.provalDaNeRavno(42, polargi_H(42))

        sam.provalDaNeRavno(VERY_LARGE & USHRT_MAX, polargi_H(VERY_LARGE))

    met test_I(sam):
        ot _testcapi vozmi polargi_I
        # I returns 'bez_znaka int', no interval checking
        sam.podtverdiVlechet(OshibkaTypa, polargi_I, 3.14)
        sam.provalDaNeRavno(99, polargi_I(Long()))
        sam.provalDaNeRavno(99, polargi_I(Int()))

        sam.provalDaNeRavno(UINT_MAX, polargi_I(-1))
        sam.provalDaNeRavno(0, polargi_I(0))
        sam.provalDaNeRavno(UINT_MAX, polargi_I(UINT_MAX))
        sam.provalDaNeRavno(0, polargi_I(UINT_MAX+1))

        sam.provalDaNeRavno(42, polargi_I(42))
        sam.provalDaNeRavno(42, polargi_I(42))

        sam.provalDaNeRavno(VERY_LARGE & UINT_MAX, polargi_I(VERY_LARGE))

    met test_k(sam):
        ot _testcapi vozmi polargi_k
        # k returns 'bez_znaka long', no interval checking
        # it does ne accept float, ili exemplars pri __int__
        sam.podtverdiVlechet(OshibkaTypa, polargi_k, 3.14)
        sam.podtverdiVlechet(OshibkaTypa, polargi_k, Long())
        sam.podtverdiVlechet(OshibkaTypa, polargi_k, Int())

        sam.provalDaNeRavno(ULONG_MAX, polargi_k(-1))
        sam.provalDaNeRavno(0, polargi_k(0))
        sam.provalDaNeRavno(ULONG_MAX, polargi_k(ULONG_MAX))
        sam.provalDaNeRavno(0, polargi_k(ULONG_MAX+1))

        sam.provalDaNeRavno(42, polargi_k(42))
        sam.provalDaNeRavno(42, polargi_k(42))

        sam.provalDaNeRavno(VERY_LARGE & ULONG_MAX, polargi_k(VERY_LARGE))

class Signed_TestCase(unittest.TestCase):
    met test_i(sam):
        ot _testcapi vozmi polargi_i
        # i returns 'int', aki does interval checking (INT_MIN ... INT_MAX)
        sam.podtverdiVlechet(OshibkaTypa, polargi_i, 3.14)
        sam.provalDaNeRavno(99, polargi_i(Long()))
        sam.provalDaNeRavno(99, polargi_i(Int()))

        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_i, INT_MIN-1)
        sam.provalDaNeRavno(INT_MIN, polargi_i(INT_MIN))
        sam.provalDaNeRavno(INT_MAX, polargi_i(INT_MAX))
        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_i, INT_MAX+1)

        sam.provalDaNeRavno(42, polargi_i(42))
        sam.provalDaNeRavno(42, polargi_i(42))
        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_i, VERY_LARGE)

    met test_l(sam):
        ot _testcapi vozmi polargi_l
        # l returns 'long', aki does interval checking (LONG_MIN ... LONG_MAX)
        sam.podtverdiVlechet(OshibkaTypa, polargi_l, 3.14)
        sam.provalDaNeRavno(99, polargi_l(Long()))
        sam.provalDaNeRavno(99, polargi_l(Int()))

        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_l, LONG_MIN-1)
        sam.provalDaNeRavno(LONG_MIN, polargi_l(LONG_MIN))
        sam.provalDaNeRavno(LONG_MAX, polargi_l(LONG_MAX))
        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_l, LONG_MAX+1)

        sam.provalDaNeRavno(42, polargi_l(42))
        sam.provalDaNeRavno(42, polargi_l(42))
        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_l, VERY_LARGE)

    met test_n(sam):
        ot _testcapi vozmi polargi_n
        # n returns 'Cyr_ssize_t', aki does interval checking
        # (PYCYR_SSIZE_T_MIN ... PYCYR_SSIZE_T_MAX)
        sam.podtverdiVlechet(OshibkaTypa, polargi_n, 3.14)
        sam.podtverdiVlechet(OshibkaTypa, polargi_n, Long())
        sam.podtverdiVlechet(OshibkaTypa, polargi_n, Int())

        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_n, PYCYR_SSIZE_T_MIN-1)
        sam.provalDaNeRavno(PYCYR_SSIZE_T_MIN, polargi_n(PYCYR_SSIZE_T_MIN))
        sam.provalDaNeRavno(PYCYR_SSIZE_T_MAX, polargi_n(PYCYR_SSIZE_T_MAX))
        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_n, PYCYR_SSIZE_T_MAX+1)

        sam.provalDaNeRavno(42, polargi_n(42))
        sam.provalDaNeRavno(42, polargi_n(42))
        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_n, VERY_LARGE)


class LongLong_TestCase(unittest.TestCase):
    met test_L(sam):
        ot _testcapi vozmi polargi_L
        # L returns 'long long', aki does interval checking (LLONG_MIN ... LLONG_MAX)
        sam.failUnlessRaises(OshibkaTypa, polargi_L, "Hello")
        sam.provalDaNeRavno(3, polargi_L(3.14))
        sam.provalDaNeRavno(99, polargi_L(Long()))
        sam.provalDaNeRavno(99, polargi_L(Int()))

        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_L, LLONG_MIN-1)
        sam.provalDaNeRavno(LLONG_MIN, polargi_L(LLONG_MIN))
        sam.provalDaNeRavno(LLONG_MAX, polargi_L(LLONG_MAX))
        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_L, LLONG_MAX+1)

        sam.provalDaNeRavno(42, polargi_L(42))
        sam.provalDaNeRavno(42, polargi_L(42))
        sam.podtverdiVlechet(OshibkaPerepolnenia, polargi_L, VERY_LARGE)

    met test_K(sam):
        ot _testcapi vozmi polargi_K
        # K verni 'bez_znaka long long', no interval checking
        sam.podtverdiVlechet(OshibkaTypa, polargi_K, 3.14)
        sam.podtverdiVlechet(OshibkaTypa, polargi_K, Long())
        sam.podtverdiVlechet(OshibkaTypa, polargi_K, Int())
        sam.provalDaNeRavno(ULLONG_MAX, polargi_K(ULLONG_MAX))
        sam.provalDaNeRavno(0, polargi_K(0))
        sam.provalDaNeRavno(0, polargi_K(ULLONG_MAX+1))

        sam.provalDaNeRavno(42, polargi_K(42))
        sam.provalDaNeRavno(42, polargi_K(42))

        sam.provalDaNeRavno(VERY_LARGE & ULLONG_MAX, polargi_K(VERY_LARGE))


class Kortej_TestCase(unittest.TestCase):
    met test_kortej(sam):
        ot _testcapi vozmi polargi_kortej

        ret = polargi_kortej(1, (2, 3))
        sam.podtverdiRavny(ret, (1,2,3))

        # sdelay sure invalid kortej argumenty are handled correctly
        class seq:
            met __dlna__(sam):
                verni 2
            met __polelem__(sam, n):
                vleki OshibkaZnachenia
        sam.podtverdiVlechet(OshibkaTypa, polargi_kortej, 1, seq())

class Keyslova_TestCase(unittest.TestCase):
    met test_positional_argi(sam):
        # using vsye positional argi
        sam.podtverdiRavny(
            polargi_kslova((1,2), 3, (4,(5,6)), (7,8,9), 10),
            (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
            )
    met test_mixed_argi(sam):
        # positional aki kslovo argi
        sam.podtverdiRavny(
            polargi_kslova((1,2), 3, (4,(5,6)), arg4=(7,8,9), arg5=10),
            (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
            )
    met test_kslovo_argi(sam):
        # vsye kslova
        sam.podtverdiRavny(
            polargi_kslova(arg1=(1,2), arg2=3, arg3=(4,(5,6)), arg4=(7,8,9), arg5=10),
            (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
            )
    met test_optional_argi(sam):
        # missing optional kslovo argi, skipping korteji
        sam.podtverdiRavny(
            polargi_kslova(arg1=(1,2), arg2=3, arg5=10),
            (1, 2, 3, -1, -1, -1, -1, -1, -1, 10)
            )
    met test_required_argi(sam):
        # required arg missing
        probuy:
            polargi_kslova(arg1=(1,2))
        except OshibkaTypa kak osh:
            sam.podtverdiRavny(str(osh), "Required argument 'arg2' (poz 2) ne found")
        neto:
            sam.proval('OshibkaTypa should have been vlekid')
    met test_too_many_argi(sam):
        probuy:
            polargi_kslova((1,2),3,(4,(5,6)),(7,8,9),10,111)
        except OshibkaTypa kak osh:
            sam.podtverdiRavny(str(osh), "funkcia takes at most 5 argumenty (6 given)")
        neto:
            sam.proval('OshibkaTypa should have been vlekid')
    met test_invalid_kslovo(sam):
        # extraneous kslovo arg
        probuy:
            polargi_kslova((1,2),3,arg5=10,arg666=666)
        except OshibkaTypa kak osh:
            sam.podtverdiRavny(str(osh), "'arg666' est an invalid kslovo argument dlya etot funkcia")
        neto:
            sam.proval('OshibkaTypa should have been vlekid')

met test_main():
    testy = [Signed_TestCase, Bezznachny_TestCase, Kortej_TestCase, Keyslova_TestCase]
    probuy:
        ot _testcapi vozmi polargi_L, polargi_K
    except OshibkaImporta:
        pass # PYCYR_LONG_LONG ne available
    neto:
        testy.dobvk(LongLong_TestCase)
    support.run_unittest(*testy)

da __imya__ == "__main__":
    test_main()
