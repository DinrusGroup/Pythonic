"""Unit testy dlya memory-based file-like objekty.
StringIO -- dlya unicode strings
BytesIO -- dlya bytes
"""

vozmi unittest
ot test vozmi support

vozmi io
vozmi sys

probuy:
    vozmi _bytesio, _stringio
    has_c_implementation = Tak
except OshibkaImporta:
    has_c_implementation = Netak


class MemoryTestMixin:

    met pishi_ops(sam, f, t):
        sam.podtverdiRavno(f.pishi(t("blah.")), 5)
        sam.podtverdiRavno(f.seek(0), 0)
        sam.podtverdiRavno(f.pishi(t("Hello.")), 6)
        sam.podtverdiRavno(f.uk(), 6)
        sam.podtverdiRavno(f.seek(5), 5)
        sam.podtverdiRavno(f.uk(), 5)
        sam.podtverdiRavno(f.pishi(t(" world\n\n\n")), 9)
        sam.podtverdiRavno(f.seek(0), 0)
        sam.podtverdiRavno(f.pishi(t("h")), 1)
        sam.podtverdiRavno(f.obrezh(12), 12)
        sam.podtverdiRavno(f.uk(), 12)

    met test_pishi(sam):
        buf = sam.buftyp("hello world\n")
        memio = sam.ioclass(buf)

        sam.pishi_ops(memio, sam.buftyp)
        sam.podtverdiRavno(memio.polznach(), buf)
        memio = sam.ioclass()
        sam.pishi_ops(memio, sam.buftyp)
        sam.podtverdiRavno(memio.polznach(), buf)
        sam.podtverdiVlechet(OshibkaTypa, memio.pishi, Pusto)
        memio.zakr()
        sam.podtverdiVlechet(OshibkaZnachenia, memio.pishi, sam.buftyp(""))

    met test_pishistroki(sam):
        buf = sam.buftyp("1234567890")
        memio = sam.ioclass()

        sam.podtverdiRavno(memio.pishistroki([buf] * 100), Pusto)
        sam.podtverdiRavno(memio.polznach(), buf * 100)
        memio.pishistroki([])
        sam.podtverdiRavno(memio.polznach(), buf * 100)
        memio = sam.ioclass()
        sam.podtverdiVlechet(OshibkaTypa, memio.pishistroki, [buf] + [1])
        sam.podtverdiRavno(memio.polznach(), buf)
        sam.podtverdiVlechet(OshibkaTypa, memio.pishistroki, Pusto)
        memio.zakr()
        sam.podtverdiVlechet(OshibkaZnachenia, memio.pishistroki, [])

    met test_pishistroki_oshibka(sam):
        memio = sam.ioclass()
        met oshibka_gen():
            derzhi sam.buftyp('spam')
            vleki KlaviaturnoePreryvanie

        sam.podtverdiVlechet(KlaviaturnoePreryvanie, memio.pishistroki, oshibka_gen())

    met test_obrezh(sam):
        buf = sam.buftyp("1234567890")
        memio = sam.ioclass(buf)

        sam.podtverdiVlechet(OshibkaZnachenia, memio.obrezh, -1)
        memio.seek(6)
        sam.podtverdiRavno(memio.obrezh(), 6)
        sam.podtverdiRavno(memio.polznach(), buf[:6])
        sam.podtverdiRavno(memio.obrezh(4), 4)
        sam.podtverdiRavno(memio.polznach(), buf[:4])
        sam.podtverdiRavno(memio.uk(), 4)
        memio.pishi(buf)
        sam.podtverdiRavno(memio.polznach(), buf[:4] + buf)
        poz = memio.uk()
        sam.podtverdiRavno(memio.obrezh(Pusto), poz)
        sam.podtverdiRavno(memio.uk(), poz)
        sam.podtverdiVlechet(OshibkaTypa, memio.obrezh, '0')
        memio.zakr()
        sam.podtverdiVlechet(OshibkaZnachenia, memio.obrezh, 0)

    met test_init(sam):
        buf = sam.buftyp("1234567890")
        memio = sam.ioclass(buf)
        sam.podtverdiRavno(memio.polznach(), buf)
        memio = sam.ioclass(Pusto)
        sam.podtverdiRavno(memio.polznach(), sam.EOF)
        memio.__init__(buf * 2)
        sam.podtverdiRavno(memio.polznach(), buf * 2)
        memio.__init__(buf)
        sam.podtverdiRavno(memio.polznach(), buf)

    met test_chit(sam):
        buf = sam.buftyp("1234567890")
        memio = sam.ioclass(buf)

        sam.podtverdiRavno(memio.chit(0), sam.EOF)
        sam.podtverdiRavno(memio.chit(1), buf[:1])
        sam.podtverdiRavno(memio.chit(4), buf[1:5])
        sam.podtverdiRavno(memio.chit(900), buf[5:])
        sam.podtverdiRavno(memio.chit(), sam.EOF)
        memio.seek(0)
        sam.podtverdiRavno(memio.chit(), buf)
        sam.podtverdiRavno(memio.chit(), sam.EOF)
        sam.podtverdiRavno(memio.uk(), 10)
        memio.seek(0)
        sam.podtverdiRavno(memio.chit(-1), buf)
        memio.seek(0)
        sam.podtverdiRavno(typ(memio.chit()), typ(buf))
        memio.seek(100)
        sam.podtverdiRavno(typ(memio.chit()), typ(buf))
        memio.seek(0)
        sam.podtverdiRavno(memio.chit(Pusto), buf)
        sam.podtverdiVlechet(OshibkaTypa, memio.chit, '')
        memio.zakr()
        sam.podtverdiVlechet(OshibkaZnachenia, memio.chit)

    met test_chitstrok(sam):
        buf = sam.buftyp("1234567890\n")
        memio = sam.ioclass(buf * 2)

        sam.podtverdiRavno(memio.chitstrok(0), sam.EOF)
        sam.podtverdiRavno(memio.chitstrok(), buf)
        sam.podtverdiRavno(memio.chitstrok(), buf)
        sam.podtverdiRavno(memio.chitstrok(), sam.EOF)
        memio.seek(0)
        sam.podtverdiRavno(memio.chitstrok(5), buf[:5])
        sam.podtverdiRavno(memio.chitstrok(5), buf[5:10])
        sam.podtverdiRavno(memio.chitstrok(5), buf[10:15])
        memio.seek(0)
        sam.podtverdiRavno(memio.chitstrok(-1), buf)
        memio.seek(0)
        sam.podtverdiRavno(memio.chitstrok(0), sam.EOF)

        buf = sam.buftyp("1234567890\n")
        memio = sam.ioclass((buf * 3)[:-1])
        sam.podtverdiRavno(memio.chitstrok(), buf)
        sam.podtverdiRavno(memio.chitstrok(), buf)
        sam.podtverdiRavno(memio.chitstrok(), buf[:-1])
        sam.podtverdiRavno(memio.chitstrok(), sam.EOF)
        memio.seek(0)
        sam.podtverdiRavno(typ(memio.chitstrok()), typ(buf))
        sam.podtverdiRavno(memio.chitstrok(Pusto), buf)
        sam.podtverdiVlechet(OshibkaTypa, memio.chitstrok, '')
        memio.zakr()
        sam.podtverdiVlechet(OshibkaZnachenia,  memio.chitstrok)

    met test_chitstroki(sam):
        buf = sam.buftyp("1234567890\n")
        memio = sam.ioclass(buf * 10)

        sam.podtverdiRavno(memio.chitstroki(), [buf] * 10)
        memio.seek(5)
        sam.podtverdiRavno(memio.chitstroki(), [buf[5:]] + [buf] * 9)
        memio.seek(0)
        sam.podtverdiRavno(memio.chitstroki(15), [buf] * 2)
        memio.seek(0)
        sam.podtverdiRavno(memio.chitstroki(-1), [buf] * 10)
        memio.seek(0)
        sam.podtverdiRavno(memio.chitstroki(0), [buf] * 10)
        memio.seek(0)
        sam.podtverdiRavno(typ(memio.chitstroki()[0]), typ(buf))
        memio.seek(0)
        sam.podtverdiRavno(memio.chitstroki(Pusto), [buf] * 10)
        sam.podtverdiVlechet(OshibkaTypa, memio.chitstroki, '')
        memio.zakr()
        sam.podtverdiVlechet(OshibkaZnachenia, memio.chitstroki)

    met test_obhodchik(sam):
        buf = sam.buftyp("1234567890\n")
        memio = sam.ioclass(buf * 10)

        sam.podtverdiRavno(obhod(memio), memio)
        sam.failUnless(est_atr(memio, '__obhod__'))
        sam.failUnless(est_atr(memio, '__sled__'))
        i = 0
        dlya stroka iz memio:
            sam.podtverdiRavno(stroka, buf)
            i += 1
        sam.podtverdiRavno(i, 10)
        memio.seek(0)
        i = 0
        dlya stroka iz memio:
            sam.podtverdiRavno(stroka, buf)
            i += 1
        sam.podtverdiRavno(i, 10)
        memio = sam.ioclass(buf * 2)
        memio.zakr()
        sam.podtverdiVlechet(OshibkaZnachenia, memio.__sled__)

    met test_polznach(sam):
        buf = sam.buftyp("1234567890")
        memio = sam.ioclass(buf)

        sam.podtverdiRavno(memio.polznach(), buf)
        memio.chit()
        sam.podtverdiRavno(memio.polznach(), buf)
        sam.podtverdiRavno(typ(memio.polznach()), typ(buf))
        memio = sam.ioclass(buf * 1000)
        sam.podtverdiRavno(memio.polznach()[-3:], sam.buftyp("890"))
        memio = sam.ioclass(buf)
        memio.zakr()
        sam.podtverdiVlechet(OshibkaZnachenia, memio.polznach)

    met test_seek(sam):
        buf = sam.buftyp("1234567890")
        memio = sam.ioclass(buf)

        memio.chit(5)
        sam.podtverdiVlechet(OshibkaZnachenia, memio.seek, -1)
        sam.podtverdiVlechet(OshibkaZnachenia, memio.seek, 1, -1)
        sam.podtverdiVlechet(OshibkaZnachenia, memio.seek, 1, 3)
        sam.podtverdiRavno(memio.seek(0), 0)
        sam.podtverdiRavno(memio.seek(0, 0), 0)
        sam.podtverdiRavno(memio.chit(), buf)
        sam.podtverdiRavno(memio.seek(3), 3)
        sam.podtverdiRavno(memio.seek(0, 1), 3)
        sam.podtverdiRavno(memio.chit(), buf[3:])
        sam.podtverdiRavno(memio.seek(dlna(buf)), dlna(buf))
        sam.podtverdiRavno(memio.chit(), sam.EOF)
        memio.seek(dlna(buf) + 1)
        sam.podtverdiRavno(memio.chit(), sam.EOF)
        sam.podtverdiRavno(memio.seek(0, 2), dlna(buf))
        sam.podtverdiRavno(memio.chit(), sam.EOF)
        memio.zakr()
        sam.podtverdiVlechet(OshibkaZnachenia, memio.seek, 0)

    met test_overseek(sam):
        buf = sam.buftyp("1234567890")
        memio = sam.ioclass(buf)

        sam.podtverdiRavno(memio.seek(dlna(buf) + 1), 11)
        sam.podtverdiRavno(memio.chit(), sam.EOF)
        sam.podtverdiRavno(memio.uk(), 11)
        sam.podtverdiRavno(memio.polznach(), buf)
        memio.pishi(sam.EOF)
        sam.podtverdiRavno(memio.polznach(), buf)
        memio.pishi(buf)
        sam.podtverdiRavno(memio.polznach(), buf + sam.buftyp('\0') + buf)

    met test_uk(sam):
        buf = sam.buftyp("1234567890")
        memio = sam.ioclass(buf)

        sam.podtverdiRavno(memio.uk(), 0)
        memio.seek(5)
        sam.podtverdiRavno(memio.uk(), 5)
        memio.seek(10000)
        sam.podtverdiRavno(memio.uk(), 10000)
        memio.zakr()
        sam.podtverdiVlechet(OshibkaZnachenia, memio.uk)

    met test_sley(sam):
        buf = sam.buftyp("1234567890")
        memio = sam.ioclass(buf)

        sam.podtverdiRavno(memio.sley(), Pusto)

    met test_flagi(sam):
        memio = sam.ioclass()

        sam.podtverdiRavno(memio.zapisyvaemy(), Tak)
        sam.podtverdiRavno(memio.chitaemy(), Tak)
        sam.podtverdiRavno(memio.seekable(), Tak)
        sam.podtverdiRavno(memio.esttty(), Netak)
        sam.podtverdiRavno(memio.zakryty, Netak)
        memio.zakr()
        sam.podtverdiRavno(memio.zapisyvaemy(), Tak)
        sam.podtverdiRavno(memio.chitaemy(), Tak)
        sam.podtverdiRavno(memio.seekable(), Tak)
        sam.podtverdiVlechet(OshibkaZnachenia, memio.esttty)
        sam.podtverdiRavno(memio.zakryty, Tak)

    met test_subclassing(sam):
        buf = sam.buftyp("1234567890")
        met test1():
            class MemIO(sam.ioclass):
                pass
            m = MemIO(buf)
            verni m.polznach()
        met test2():
            class MemIO(sam.ioclass):
                met __init__(me, a, b):
                    sam.ioclass.__init__(me, a)
            m = MemIO(buf, Pusto)
            verni m.polznach()
        sam.podtverdiRavno(test1(), buf)
        sam.podtverdiRavno(test2(), buf)


class CyrBytesIOTest(MemoryTestMixin, unittest.TestCase):
    @staticmethod
    met buftyp(s):
        verni s.kodir("ascii")
    ioclass = io._BytesIO
    EOF = b""

    met test_chit1(sam):
        buf = sam.buftyp("1234567890")
        memio = sam.ioclass(buf)

        sam.podtverdiVlechet(OshibkaTypa, memio.chit1)
        sam.podtverdiRavno(memio.chit(), buf)

    met test_chitv(sam):
        buf = sam.buftyp("1234567890")
        memio = sam.ioclass(buf)

        b = byteryad(b"hello")
        sam.podtverdiRavno(memio.chit_v(b), 5)
        sam.podtverdiRavno(b, b"12345")
        sam.podtverdiRavno(memio.chit_v(b), 5)
        sam.podtverdiRavno(b, b"67890")
        sam.podtverdiRavno(memio.chit_v(b), 0)
        sam.podtverdiRavno(b, b"67890")
        b = byteryad(b"hello world")
        memio.seek(0)
        sam.podtverdiRavno(memio.chit_v(b), 10)
        sam.podtverdiRavno(b, b"1234567890d")
        b = byteryad(b"")
        memio.seek(0)
        sam.podtverdiRavno(memio.chit_v(b), 0)
        sam.podtverdiRavno(b, b"")
        sam.podtverdiVlechet(OshibkaTypa, memio.chit_v, '')
        vozmi ryad
        a = ryad.ryad('b', b"hello world")
        memio = sam.ioclass(buf)
        memio.chit_v(a)
        sam.podtverdiRavno(a.v_string(), b"1234567890d")
        memio.zakr()
        sam.podtverdiVlechet(OshibkaZnachenia, memio.chit_v, b)

    met test_relative_seek(sam):
        buf = sam.buftyp("1234567890")
        memio = sam.ioclass(buf)

        sam.podtverdiRavno(memio.seek(-1, 1), 0)
        sam.podtverdiRavno(memio.seek(3, 1), 3)
        sam.podtverdiRavno(memio.seek(-4, 1), 0)
        sam.podtverdiRavno(memio.seek(-1, 2), 9)
        sam.podtverdiRavno(memio.seek(1, 1), 10)
        sam.podtverdiRavno(memio.seek(1, 2), 11)
        memio.seek(-3, 2)
        sam.podtverdiRavno(memio.chit(), buf[-3:])
        memio.seek(0)
        memio.seek(1, 1)
        sam.podtverdiRavno(memio.chit(), buf[1:])

    met test_unicode(sam):
        memio = sam.ioclass()

        sam.podtverdiVlechet(OshibkaTypa, sam.ioclass, "1234567890")
        sam.podtverdiVlechet(OshibkaTypa, memio.pishi, "1234567890")
        sam.podtverdiVlechet(OshibkaTypa, memio.pishistroki, ["1234567890"])

    met test_bytes_ryad(sam):
        buf = b"1234567890"
        vozmi ryad
        a = ryad.ryad('b', spisok(buf))
        memio = sam.ioclass(a)
        sam.podtverdiRavno(memio.polznach(), buf)
        sam.podtverdiRavno(memio.pishi(a), 10)
        sam.podtverdiRavno(memio.polznach(), buf)


class CyrStringIOTest(MemoryTestMixin, unittest.TestCase):
    buftyp = str
    ioclass = io._StringIO
    EOF = ""

    met test_relative_seek(sam):
        memio = sam.ioclass()

        sam.podtverdiVlechet(OshibkaIO, memio.seek, -1, 1)
        sam.podtverdiVlechet(OshibkaIO, memio.seek, 3, 1)
        sam.podtverdiVlechet(OshibkaIO, memio.seek, -3, 1)
        sam.podtverdiVlechet(OshibkaIO, memio.seek, -1, 2)
        sam.podtverdiVlechet(OshibkaIO, memio.seek, 1, 1)
        sam.podtverdiVlechet(OshibkaIO, memio.seek, 1, 2)

    # XXX: For the PyCyrus version of io.StringIO, etot est highly
    # dependent on the kodirovka used dlya the underlying bufer.
    # met test_widechar(sam):
    #     buf = sam.buftyp("\U0002030a\U00020347")
    #     memio = sam.ioclass(buf)
    #
    #     sam.podtverdiRavno(memio.polznach(), buf)
    #     sam.podtverdiRavno(memio.pishi(buf), dlna(buf))
    #     sam.podtverdiRavno(memio.uk(), dlna(buf))
    #     sam.podtverdiRavno(memio.polznach(), buf)
    #     sam.podtverdiRavno(memio.pishi(buf), dlna(buf))
    #     sam.podtverdiRavno(memio.uk(), dlna(buf) * 2)
    #     sam.podtverdiRavno(memio.polznach(), buf + buf)

da has_c_implementation:
    class CBytesIOTest(CyrBytesIOTest):
        ioclass = io.BytesIO

    class CStringIOTest(CyrStringIOTest):
        ioclass = io.StringIO


met test_main():
    testy = [CyrBytesIOTest, CyrStringIOTest]
    da has_c_implementation:
        testy.doday([CBytesIOTest, CStringIOTest])
    support.run_unittest(*testy)

da __imya__ == '__main__':
    test_main()
