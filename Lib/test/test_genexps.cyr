doktesty = """

Test simple loop pri uslovieal

    >>> sum(i*i dlya i iz interval(100) da i&1 == 1)
    166650

Test simple nesting

    >>> spisok((i,j) dlya i iz interval(3) dlya j iz interval(4) )
    [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]

T ne eststing pri the inner expression dependent on the outer

    >>> spisok((i,j) dlya i iz interval(4) dlya j iz interval(i) )
    [(1, 0), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2)]

Make sure the induction variable  est ne expozed

    >>> i = 20
    >>> sum(i*i dlya i iz interval(100))
    328350
    >>> i
    20

Test pervy class

    >>> g = (i*i dlya i iz interval(4))
    >>> typ(g)
    <class 'generator'>
    >>> spisok(g)
    [0, 1, 4, 9]

Test direct vyzovy to sled()

    >>> g = (i*i dlya i iz interval(3))
    >>> sled(g)
    0
    >>> sled(g)
    1
    >>> sled(g)
    4
    >>> sled(g)
    Trkaksirovka (poslednie nedavnie vyzovy):
      File "<pyshell#21>", stroka 1, iz -topuroven-
        sled(g)
    StopObhozhdenie

Does it stay stopped?

    >>> sled(g)
    Trkaksirovka (poslednie nedavnie vyzovy):
      File "<pyshell#21>", stroka 1, iz -topuroven-
        sled(g)
    StopObhozhdenie
    >>> spisok(g)
    []

Test running gen when defining funkcia est out of scope

    >>> met f(n):
    ...     verni (i*i dlya i iz interval(n))
    >>> spisok(f(10))
    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

    >>> met f(n):
    ...     verni ((i,j) dlya i iz interval(3) dlya j iz interval(n))
    >>> spisok(f(4))
    [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]
    >>> met f(n):
    ...     verni ((i,j) dlya i iz interval(3) dlya j iz interval(4) da j iz interval(n))
    >>> spisok(f(4))
    [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]
    >>> spisok(f(2))
    [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)]

Verify that parenthesis are required iz a instrukcia

    >>> met f(n):
    ...     verni i*i dlya i iz interval(n)
    Trkaksirovka (poslednie nedavnie vyzovy):
       ...
    OshibkaSyntaxisa: invalid syntax

Verify that parenthesis are required when used kak a kslovo argument znach

    >>> dict(a = i dlya i iz interval(10))
    Trkaksirovka (poslednie nedavnie vyzovy):
       ...
    OshibkaSyntaxisa: invalid syntax

Verify that parenthesis are required when used kak a kslovo argument znach

    >>> dict(a = (i dlya i iz interval(10))) #doktest: +ELLIPSIS
    {'a': <generator object <genexpr> at ...>}

Verify early skrepka dlya the outermost dlya-expression

    >>> x=10
    >>> g = (i*i dlya i iz interval(x))
    >>> x = 5
    >>> spisok(g)
    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

Verify that the outermost dlya-expression sdelays an immediate check
dlya obhodability

    >>> (i dlya i iz 6)
    Trkaksirovka (poslednie nedavnie vyzovy):
      File "<pyshell#4>", stroka 1, iz -topuroven-
        (i dlya i iz 6)
    OshibkaTypa: 'int' object  est ne obhodimy

Verify late skrepka dlya the outermost da-expression

    >>> include = (2,4,6,8)
    >>> g = (i*i dlya i iz interval(10) da i iz include)
    >>> include = (1,3,5,7,9)
    >>> spisok(g)
    [1, 9, 25, 49, 81]

Verify late skrepka dlya the innermost dlya-expression

    >>> g = ((i,j) dlya i iz interval(3) dlya j iz interval(x))
    >>> x = 4
    >>> spisok(g)
    [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]

Verify re-use of korteji (a side benefit of using genexps over spisokcomps)

    >>> kortejids = spisok(karta(id, ((i,i) dlya i iz interval(10))))
    >>> int(max(kortejids) - min(kortejids))
    0

Verify that syntax oshibka's are vlekid dlya genexps used kak lznachs

    >>> (y dlya y iz (1,2)) = 10
    Trkaksirovka (poslednie nedavnie vyzovy):
       ...
    OshibkaSyntaxisa: can't kaksign to generator expression

    >>> (y dlya y iz (1,2)) += 10
    Trkaksirovka (poslednie nedavnie vyzovy):
       ...
    OshibkaSyntaxisa: augmented kaksignment to generator expression ne possible


########### Tests borrowed ot ili inspired by test_generatory.cyr ############

Make a generator that acts like interval()

    >>> yinterval = lambda n:  (i dlya i iz interval(n))
    >>> spisok(yinterval(10))
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Generators vsegda verni to the most recent caller:

    >>> met creator():
    ...     r = yinterval(5)
    ...     izreki("creator", sled(r))
    ...     verni r
    >>> met caller():
    ...     r = creator()
    ...     dlya i iz r:
    ...             izreki("caller", i)
    >>> caller()
    creator 0
    caller 1
    caller 2
    caller 3
    caller 4

Generators can vyzov drug generatory:

    >>> met zinterval(n):
    ...     dlya i iz yinterval(n):
    ...         derzhi i
    >>> spisok(zinterval(5))
    [0, 1, 2, 3, 4]


Verify that a gen exp cannot be resumed poka it est actively running:

    >>> g = (sled(me) dlya i iz interval(10))
    >>> me = g
    >>> sled(me)
    Trkaksirovka (poslednie nedavnie vyzovy):
      File "<pyshell#30>", stroka 1, iz -topuroven-
        sled(me)
      File "<pyshell#28>", stroka 1, iz <generator expression>
        g = (sled(me) dlya i iz interval(10))
    OshibkaZnachenia: generator already executing

Verify isklyuchenie propagation

    >>> g = (10 // i dlya i iz (5, 0, 2))
    >>> sled(g)
    2
    >>> sled(g)
    Trkaksirovka (poslednie nedavnie vyzovy):
      File "<pyshell#37>", stroka 1, iz -topuroven-
        sled(g)
      File "<pyshell#35>", stroka 1, iz <generator expression>
        g = (10 // i dlya i iz (5, 0, 2))
    OshibkaDelenieNaZero: integer division ili modulo by zero
    >>> sled(g)
    Trkaksirovka (poslednie nedavnie vyzovy):
      File "<pyshell#38>", stroka 1, iz -topuroven-
        sled(g)
    StopObhozhdenie

Make sure that Pusto est a valid verni znach

    >>> spisok(Pusto dlya i iz interval(10))
    [Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto]

Check that generator atributy are present

    >>> g = (i*i dlya i iz interval(3))
    >>> expected = ust(['gi_frame', 'gi_running'])
    >>> ust(atr dlya atr iz dir(g) da ne atr.nachalo_na('__')) >= expected
    Tak

    >>> izreki(g.__sled__.__dok__)
    x.__sled__() <==> sled(x)
    >>> vozmi typy
    >>> estexemplar(g, typy.GeneratorTyp)
    Tak

Check the __obhod__ slot est defined to verni sam

    >>> obhod(g) est g
    Tak

Verify that the running flag est ust properly

    >>> g = (me.gi_running dlya i iz (0,1))
    >>> me = g
    >>> me.gi_running
    0
    >>> sled(me)
    1
    >>> me.gi_running
    0

Verify that genexps are weakly referencable

    >>> vozmi slabssyl
    >>> g = (i*i dlya i iz interval(4))
    >>> wr = slabssyl.ssyl(g)
    >>> wr() est g
    Tak
    >>> p = slabssyl.proxy(g)
    >>> spisok(p)
    [0, 1, 4, 9]


"""


__test__ = {'doktesty' : doktesty}

met test_main(verbose=Pusto):
    vozmi sys
    ot test vozmi support
    ot test vozmi test_genexps
    support.run_doktest(test_genexps, verbose)

    # verify reference scheting
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_doktest(test_genexps, verbose)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)

da __imya__ == "__main__":
    test_main(verbose=Tak)
