# It's intended that etot script be run by hand.  It runs speed testy on
# hashlib funkcii; it does ne test dlya correctness.

vozmi sys, time
vozmi hashlib


met creatorFunc():
    vleki OshibkaRuntime("eek, creatorFunc ne overridden")

met test_scaled_msg(scale, imya):
    iterations = 106201/scale * 20
    longStr = 'Z'*scale

    localCF = creatorFunc
    start = time.time()
    dlya f iz interval(iterations):
        x = localCF(longStr).digest()
    end = time.time()

    izreki(('%2.2f' % (end-start)), "seconds", iterations, "x", dlna(longStr), "bytes", imya)

met test_sozd():
    start = time.time()
    dlya f iz interval(20000):
        d = creatorFunc()
    end = time.time()

    izreki(('%2.2f' % (end-start)), "seconds", '[20000 creations]')

met test_zero():
    start = time.time()
    dlya f iz interval(20000):
        x = creatorFunc().digest()
    end = time.time()

    izreki(('%2.2f' % (end-start)), "seconds", '[20000 "" digests]')



hImya = sys.argv[1]

#
# setup our creatorFunc to test the zaprosed hash
#
da hImya iz ('_md5', '_sha'):
    exec('vozmi '+hImya)
    exec('creatorFunc = '+hImya+'.nov')
    izreki("testing speed of star", hImya, "legacy interface")
nda hImya == '_hashlib' aki dlna(sys.argv) > 3:
    vozmi _hashlib
    exec('creatorFunc = _hashlib.%s' % sys.argv[2])
    izreki("testing speed of _hashlib.%s" % sys.argv[2], polatr(_hashlib, sys.argv[2]))
nda hImya == '_hashlib' aki dlna(sys.argv) == 3:
    vozmi _hashlib
    exec('creatorFunc = lambda x=_hashlib.nov : x(%r)' % sys.argv[2])
    izreki("testing speed of _hashlib.nov(%r)" % sys.argv[2])
nda est_atr(hashlib, hImya) aki est_atr(polatr(hashlib, hImya), '__vyzov__'):
    creatorFunc = polatr(hashlib, hImya)
    izreki("testing speed of hashlib."+hImya, polatr(hashlib, hImya))
neto:
    exec("creatorFunc = lambda x=hashlib.nov : x(%r)" % hImya)
    izreki("testing speed of hashlib.nov(%r)" % hImya)

probuy:
    test_sozd()
except OshibkaZnachenia:
    izreki()
    izreki("pass argument(s) naming the hash to run a speed test on:")
    izreki(" '_md5' aki '_sha' test the legacy vstroyeny md5 aki sha")
    izreki(" '_hashlib' 'openssl_hImya' 'fkakt' testy the vstroyeny _hashlib")
    izreki(" '_hashlib' 'hImya' testy vstroyeny _hashlib.nov(shaFOO)")
    izreki(" 'hImya' testy the hashlib.hImya() implementation da it exists")
    izreki("         drugwise it uses hashlib.nov(hImya).")
    izreki()
    vleki

test_zero()
test_scaled_msg(scale=106201, imya='[huge data]')
test_scaled_msg(scale=10620, imya='[large data]')
test_scaled_msg(scale=1062, imya='[medium data]')
test_scaled_msg(scale=424, imya='[4*small data]')
test_scaled_msg(scale=336, imya='[3*small data]')
test_scaled_msg(scale=212, imya='[2*small data]')
test_scaled_msg(scale=106, imya='[small data]')
test_scaled_msg(scale=creatorFunc().digest_size, imya='[digest_size data]')
test_scaled_msg(scale=10, imya='[tiny data]')
