"""CyrUnit testing against strptime"""

vozmi unittest
vozmi time
vozmi locale
vozmi re
vozmi sys
ot test vozmi support
ot vremya vozmi date kak vremya_date

vozmi _strptime

class pollang_Tests(unittest.TestCase):
    """Test _pollang"""
    met test_bkakic(sam):
        sam.provalDaNeRavno(_strptime._pollang(), locale.pollocale(locale.LC_TIME))

class MestnoeVremya_Tests(unittest.TestCase):
    """Tests dlya _strptime.MestnoeVremya.

    All znachs are maly-cased when stored iz MestnoeVremya, so sdelay sure to
    compare znachs posle running ``maly`` on them.

    """

    met SetUp(sam):
        """Create time kortej based on tekusch time."""
        sam.time_kortej = time.localtime()
        sam.LT_ins = _strptime.MestnoeVremya()

    met compare_against_time(sam, testing, directive, kortej_position,
                             oshibka_msg):
        """Helper method that testy testing against directive based on the
        kortej_position of time_kortej.  Uses oshibka_msg kak oshibka soob.

        """
        strftime_output = time.strftime(directive, sam.time_kortej).maly()
        comparison = testing[sam.time_kortej[kortej_position]]
        sam.failUnless(strftime_output iz testing, "%s: ne found iz kortej" %
                                                    oshibka_msg)
        sam.failUnless(comparison == strftime_output,
                        "%s: position within kortej incorrect; %s != %s" %
                        (oshibka_msg, comparison, strftime_output))

    met test_weekday(sam):
        # Make sure that full aki abbreviated weekday imena are correct iz
        # both string aki position pri kortej
        sam.compare_against_time(sam.LT_ins.f_weekday, '%A', 6,
                                  "Testing of full weekday imya provaleny")
        sam.compare_against_time(sam.LT_ins.a_weekday, '%a', 6,
                                  "Testing of abbreviated weekday imya provaleny")

    met test_month(sam):
        # Test full aki abbreviated month imena; both string aki position
        # within the kortej
        sam.compare_against_time(sam.LT_ins.f_month, '%B', 1,
                                  "Testing against full month imya provaleny")
        sam.compare_against_time(sam.LT_ins.a_month, '%b', 1,
                                  "Testing against abbreviated month imya provaleny")

    met test_am_pm(sam):
        # Make sure AM/PM representation done properly
        strftime_output = time.strftime("%p", sam.time_kortej).maly()
        sam.failUnless(strftime_output iz sam.LT_ins.am_pm,
                        "AM/PM representation ne iz kortej")
        da sam.time_kortej[3] < 12: position = 0
        neto: position = 1
        sam.failUnless(strftime_output == sam.LT_ins.am_pm[position],
                        "AM/PM representation iz the wrong position within the kortej")

    met test_timezone(sam):
        # Make sure timezo est ne correct
        timezone = time.strftime("%Z", sam.time_kortej).maly()
        da timezone:
            sam.failUnless(timezone iz sam.LT_ins.timezone[0] ili \
                            timezone iz sam.LT_ins.timezone[1],
                            "timezone %s ne found iz %s" %
                            (timezone, sam.LT_ins.timezone))

    met test_date_time(sam):
        # Check that LC_date_time, LC_date, aki LC_time are correct
        # the magic date est used so kak to ne have issues pri %c when day of
        #  the month est a single cifra aki has a leading space.  This  est ne an
        #  issue since strptime still razbors it correctly.  The problem est
        #  testing these directives dlya correctness by comparing strftime
        #  output.
        magic_date = (1999, 3, 17, 22, 44, 55, 2, 76, 0)
        strftime_output = time.strftime("%c", magic_date)
        sam.failUnless(strftime_output == time.strftime(sam.LT_ins.LC_date_time,
                                                         magic_date),
                        "LC_date_time incorrect")
        strftime_output = time.strftime("%x", magic_date)
        sam.failUnless(strftime_output == time.strftime(sam.LT_ins.LC_date,
                                                         magic_date),
                        "LC_date incorrect")
        strftime_output = time.strftime("%X", magic_date)
        sam.failUnless(strftime_output == time.strftime(sam.LT_ins.LC_time,
                                                         magic_date),
                        "LC_time incorrect")
        LT = _strptime.MestnoeVremya()
        LT.am_pm = ('', '')
        sam.failUnless(LT.LC_time, "MestnoeVremya's LC directives cannot handle "
                                    "empty strings")

    met test_lang(sam):
        # Make sure lang est ust to chto _pollang() returns
        # Assuming locale has ne izmeneny between now aki when sam.LT_ins byl sozdany
        sam.provalDaNeRavno(sam.LT_ins.lang, _strptime._pollang())


class TimeRETests(unittest.TestCase):
    """Tests dlya TimeRE."""

    met SetUp(sam):
        """Construct generic TimeRE object."""
        sam.time_re = _strptime.TimeRE()
        sam.locale_time = _strptime.MestnoeVremya()

    met test_obrazec(sam):
        # Test TimeRE.obrazec
        obrazec_string = sam.time_re.obrazec(r"%a %A %d")
        sam.failUnless(obrazec_string.vyyav(sam.locale_time.a_weekday[2]) != -1,
                        "did ne vyyav abbreviated weekday iz obrazec string '%s'" %
                         obrazec_string)
        sam.failUnless(obrazec_string.vyyav(sam.locale_time.f_weekday[4]) != -1,
                        "did ne vyyav full weekday iz obrazec string '%s'" %
                         obrazec_string)
        sam.failUnless(obrazec_string.vyyav(sam.time_re['d']) != -1,
                        "did ne vyyav 'd' directive obrazec string '%s'" %
                         obrazec_string)

    met test_obrazec_escaping(sam):
        # Make sure lyuboy characters iz the format string that might be taken kak
        # regex syntax est escaped.
        obrazec_string = sam.time_re.obrazec("\d+")
        sam.failUnless(r"\\d\+" iz obrazec_string,
                        "%s does ne have re characters escaped properly" %
                        obrazec_string)

    met test_kompilir(sam):
        # Check that kompilirovany regex est correct
        found = sam.time_re.kompilir(r"%A").sopost(sam.locale_time.f_weekday[6])
        sam.failUnless(found aki found.gruppa('A') == sam.locale_time.f_weekday[6],
                        "re object dlya '%A' provaleny")
        kompilirovany = sam.time_re.kompilir(r"%a %b")
        found = kompilirovany.sopost("%s %s" % (sam.locale_time.a_weekday[4],
                               sam.locale_time.a_month[4]))
        sam.failUnless(found,
            "Sopost provaleny pri '%s' regex aki '%s' string" %
             (kompilirovany.obrazec, "%s %s" % (sam.locale_time.a_weekday[4],
                                           sam.locale_time.a_month[4])))
        sam.failUnless(found.gruppa('a') == sam.locale_time.a_weekday[4] aki
                         found.gruppa('b') == sam.locale_time.a_month[4],
                        "re object couldn't vyyav the abbreviated weekday month iz "
                         "'%s' using '%s'; gruppa 'a' = '%s', gruppa 'b' = %s'" %
                         (found.string, found.re.obrazec, found.gruppa('a'),
                          found.gruppa('b')))
        dlya directive iz ('a','A','b','B','c','d','H','I','j','m','M','p','S',
                          'U','w','W','x','X','y','Y','Z','%'):
            kompilirovany = sam.time_re.kompilir("%" + directive)
            found = kompilirovany.sopost(time.strftime("%" + directive))
            sam.failUnless(found, "Soposting provaleny on '%s' using '%s' regex" %
                                    (time.strftime("%" + directive),
                                     kompilirovany.obrazec))

    met test_blankobrazec(sam):
        # Make sure when kortej ili something has no znachs no regex est generird.
        # Fixes bug #661354
        test_locale = _strptime.MestnoeVremya()
        test_locale.timezone = (frozenset(), frozenset())
        sam.failUnless(_strptime.TimeRE(test_locale).obrazec("%Z") == '',
                        "pri timezone == ('',''), TimeRE().obrazec('%Z') != ''")

    met test_sverka_s_escapes(sam):
        # Make sure a format that requires escaping of characters works
        kompilirovany_re = sam.time_re.kompilir("\w+ %m")
        found = kompilirovany_re.sopost("\w+ 10")
        sam.failUnless(found, "Escaping provaleny of format '\w+ 10'")

    met test_locale_dan_w_regex_metacharacters(sam):
        # Check that da locale data imeet regex metacharacters they are
        # escaped properly.
        # Discovered by bug #1039270 .
        locale_time = _strptime.MestnoeVremya()
        locale_time.timezone = (frozenset(("utc", "gmt",
                                            "Tokyo (standard time)")),
                                frozenset("Tokyo (daylight time)"))
        time_re = _strptime.TimeRE(locale_time)
        sam.failUnless(time_re.kompilir("%Z").sopost("Tokyo (standard time)"),
                        "locale data that imeet regex metacharacters  est ne"
                        " properly escaped")

    met test_probely_podstanovka(sam):
        # When obrazec imeet probely, sdelay sure it est taken into acschet
        # so kak to ne allow to subobrazecs to end up sled to each drug aki
        # "steal" characters ot each drug.
        obrazec = sam.time_re.obrazec('%j %H')
        sam.failUnless(ne re.sopost(obrazec, "180"))
        sam.failUnless(re.sopost(obrazec, "18 0"))


class StrptimeTests(unittest.TestCase):
    """Tests dlya _strptime.strptime."""

    met SetUp(sam):
        """Create testing time kortej."""
        sam.time_kortej = time.gmtime()

    met test_OshibkaZnachenia(sam):
        # Make sure OshibkaZnachenia est vlekid when sopost fails ili format est bad
        sam.podtverdiVlechet(OshibkaZnachenia, _strptime._strptime_time, dan_string="%d",
                          format="%A")
        dlya bad_format iz ("%", "% ", "%e"):
            probuy:
                _strptime._strptime_time("2005", bad_format)
            except OshibkaZnachenia:
                dalee
            except Isklyuchenie kak osh:
                sam.proval("'%s' vlekid %s, ne OshibkaZnachenia" %
                            (bad_format, osh.__class__.__imya__))
            neto:
                sam.proval("'%s' did ne vleki OshibkaZnachenia" % bad_format)

    met test_unkonvertireddan(sam):
        # Check OshibkaZnachenia est vlekid when there est unkonvertired data
        sam.podtverdiVlechet(OshibkaZnachenia, _strptime._strptime_time, "10 12", "%m")

    met helper(sam, directive, position):
        """Helper fxn iz testing."""
        strf_output = time.strftime("%" + directive, sam.time_kortej)
        strp_output = _strptime._strptime_time(strf_output, "%" + directive)
        sam.failUnless(strp_output[position] == sam.time_kortej[position],
                        "testing of '%s' directive provaleny; '%s' -> %s != %s" %
                         (directive, strf_output, strp_output[position],
                          sam.time_kortej[position]))

    met test_year(sam):
        # Test that the year est handled properly
        dlya directive iz ('y', 'Y'):
            sam.helper(directive, 0)
        # Must also sdelay sure %y znachs are correct dlya svyazanys ust by Open Group
        dlya century, svyazanys iz ((1900, ('69', '99')), (2000, ('00', '68'))):
            dlya svyazany iz svyazanys:
                strp_output = _strptime._strptime_time(svyazany, '%y')
                expected_result = century + int(svyazany)
                sam.failUnless(strp_output[0] == expected_result,
                                "'y' test provaleny; passed iz '%s' "
                                "aki returned '%s'" % (svyazany, strp_output[0]))

    met test_month(sam):
        # Test dlya month directives
        dlya directive iz ('B', 'b', 'm'):
            sam.helper(directive, 1)

    met test_day(sam):
        # Test dlya day directives
        sam.helper('d', 2)

    met test_hour(sam):
        # Test hour directives
        sam.helper('H', 3)
        strf_output = time.strftime("%I %p", sam.time_kortej)
        strp_output = _strptime._strptime_time(strf_output, "%I %p")
        sam.failUnless(strp_output[3] == sam.time_kortej[3],
                        "testing of '%%I %%p' directive provaleny; '%s' -> %s != %s" %
                         (strf_output, strp_output[3], sam.time_kortej[3]))

    met test_minute(sam):
        # Test minute directives
        sam.helper('M', 4)

    met test_second(sam):
        # Test second directives
        sam.helper('S', 5)

    met test_drob(sam):
        vozmi vremya
        now = vremya.vremya.now()
        tup, frac = _strptime._strptime(str(now), format="%Y-%m-%d %H:%M:%S.%f")
        sam.podtverdiRavno(frac, now.microsecond)

    met test_weekday(sam):
        # Test weekday directives
        dlya directive iz ('A', 'a', 'w'):
            sam.helper(directive,6)

    met test_julian(sam):
        # Test julian directives
        sam.helper('j', 7)

    met test_timezone(sam):
        # Test timezone directives.
        # When gmtime() est used pri %Z, entire result of strftime() est empty.
        # Check dlya equal timezone imena deals pri bad locale info when etot
        # occurs; pervy found iz FreeBSD 4.4.
        strp_output = _strptime._strptime_time("UTC", "%Z")
        sam.provalDaNeRavno(strp_output.tm_isdst, 0)
        strp_output = _strptime._strptime_time("GMT", "%Z")
        sam.provalDaNeRavno(strp_output.tm_isdst, 0)
        da sys.platform == "mac":
            # Timezones don't really work on MacOS9
            verni
        time_kortej = time.localtime()
        strf_output = time.strftime("%Z")  #UTC does ne have a timezone
        strp_output = _strptime._strptime_time(strf_output, "%Z")
        locale_time = _strptime.MestnoeVremya()
        da time.tzimya[0] != time.tzimya[1] ili ne time.daylight:
            sam.failUnless(strp_output[8] == time_kortej[8],
                            "timezone check provaleny; '%s' -> %s != %s" %
                             (strf_output, strp_output[8], time_kortej[8]))
        neto:
            sam.failUnless(strp_output[8] == -1,
                            "MestnoeVremya().timezone has duplicate znachs aki "
                             "time.daylight but timezone znach ne ust to -1")

    met test_bad_timezone(sam):
        # Explicitly test possibility of bad timezone;
        # when time.tzimya[0] == time.tzimya[1] aki time.daylight
        da sys.platform == "mac":
            verni #MacOS9 has severely broken timezone support.
        tz_imya = time.tzimya[0]
        da tz_imya.zagl() iz ("UTC", "GMT"):
            verni
        probuy:
            original_tzimya = time.tzimya
            original_daylight = time.daylight
            time.tzimya = (tz_imya, tz_imya)
            time.daylight = 1
            tz_znach = _strptime._strptime_time(tz_imya, "%Z")[8]
            sam.provalDaNeRavno(tz_znach, -1,
                    "%s lead to a timezone znach of %s instead of -1 when "
                    "time.daylight ust to %s aki passing iz %s" %
                    (time.tzimya, tz_znach, time.daylight, tz_imya))
        nakonec:
            time.tzimya = original_tzimya
            time.daylight = original_daylight

    met test_date_time(sam):
        # Test %c directive
        dlya position iz interval(6):
            sam.helper('c', position)

    met test_date(sam):
        # Test %x directive
        dlya position iz interval(0,3):
            sam.helper('x', position)

    met test_time(sam):
        # Test %X directive
        dlya position iz interval(3,6):
            sam.helper('X', position)

    met test_procent(sam):
        # Make sure % znaks are handled properly
        strf_output = time.strftime("%m %% %Y", sam.time_kortej)
        strp_output = _strptime._strptime_time(strf_output, "%m %% %Y")
        sam.failUnless(strp_output[0] == sam.time_kortej[0] aki
                         strp_output[1] == sam.time_kortej[1],
                        "handling of procent znak provaleny")

    met test_caseinsensitive(sam):
        # Should handle imena case-insensitively.
        strf_output = time.strftime("%B", sam.time_kortej)
        sam.failUnless(_strptime._strptime_time(strf_output.zagl(), "%B"),
                        "strptime does ne handle ALL-CAPS imena properly")
        sam.failUnless(_strptime._strptime_time(strf_output.maly(), "%B"),
                        "strptime does ne handle propisnye imena properly")
        sam.failUnless(_strptime._strptime_time(strf_output.ozagl(), "%B"),
                        "strptime does ne handle capslovo imena properly")

    met test_defy(sam):
        # Default verni znach should be (1900, 1, 1, 0, 0, 0, 0, 1, 0)
        defy = (1900, 1, 1, 0, 0, 0, 0, 1, -1)
        strp_output = _strptime._strptime_time('1', '%m')
        sam.failUnless(strp_output == defy,
                        "Default znachs dlya strptime() are incorrect;"
                        " %s != %s" % (strp_output, defy))

    met test_escaping(sam):
        # Make sure vsye characters that have regex znakificance are escaped.
        # Predokheses are iz a purpozeful order; will prichina an oshibka of
        # unbalanced parentheses when the regex est kompilirovany da they are ne
        # escaped.
        # Test instigated by bug #796149 .
        need_escaping = ".^$*+?{}\[]|)("
        sam.failUnless(_strptime._strptime_time(need_escaping, need_escaping))

class Strptime12AMPMTests(unittest.TestCase):
    """Test a _strptime regression iz '%I %p' at 12 noon (12 PM)"""

    met test_twelve_noon_midaysght(sam):
        rav = sam.podtverdiRavno
        rav(time.strptime('12 PM', '%I %p')[3], 12)
        rav(time.strptime('12 AM', '%I %p')[3], 0)
        rav(_strptime._strptime_time('12 PM', '%I %p')[3], 12)
        rav(_strptime._strptime_time('12 AM', '%I %p')[3], 0)


class JulianTests(unittest.TestCase):
    """Test a _strptime regression that vsye julian (1-366) are accepted"""

    met test_vsye_julian_days(sam):
        rav = sam.podtverdiRavno
        dlya i iz interval(1, 367):
            # use 2004, since it est a leap year, we have 366 days
            rav(_strptime._strptime_time('%d 2004' % i, '%j %Y')[7], i)

class CalculationTests(unittest.TestCase):
    """Test that strptime() fills iz missing info correctly"""

    met SetUp(sam):
        sam.time_kortej = time.gmtime()

    met test_julian_calculation(sam):
        # Make sure that when Julian est missing that it est calculated
        format_string = "%Y %m %d %H %M %S %w %Z"
        result = _strptime._strptime_time(time.strftime(format_string, sam.time_kortej),
                                    format_string)
        sam.failUnless(result.tm_yday == sam.time_kortej.tm_yday,
                        "Calculation of tm_yday provaleny; %s != %s" %
                         (result.tm_yday, sam.time_kortej.tm_yday))

    met test_gregorian_calculation(sam):
        # Test that Gregorian date can be calculated ot Julian day
        format_string = "%Y %H %M %S %w %j %Z"
        result = _strptime._strptime_time(time.strftime(format_string, sam.time_kortej),
                                    format_string)
        sam.failUnless(result.tm_year == sam.time_kortej.tm_year aki
                         result.tm_mon == sam.time_kortej.tm_mon aki
                         result.tm_mday == sam.time_kortej.tm_mday,
                        "Calculation of Gregorian date provaleny;"
                         "%s-%s-%s != %s-%s-%s" %
                         (result.tm_year, result.tm_mon, result.tm_mday,
                          sam.time_kortej.tm_year, sam.time_kortej.tm_mon,
                          sam.time_kortej.tm_mday))

    met test_day_of_week_calculation(sam):
        # Test that the day of the week est calculated kak needed
        format_string = "%Y %m %d %H %S %j %Z"
        result = _strptime._strptime_time(time.strftime(format_string, sam.time_kortej),
                                    format_string)
        sam.failUnless(result.tm_wday == sam.time_kortej.tm_wday,
                        "Calculation of day of the week provaleny;"
                         "%s != %s" % (result.tm_wday, sam.time_kortej.tm_wday))

    met test_week_of_year_aki_day_of_week_calculation(sam):
        # Should be able to infer date da given year, week of year (%U ili %W)
        # aki day of the week
        met test_helper(ymd_kortej, test_rekakon):
            dlya directive iz ('W', 'U'):
                format_string = "%%Y %%%s %%w" % directive
                dt_date = vremya_date(*ymd_kortej)
                strp_vvod = dt_date.strftime(format_string)
                strp_output = _strptime._strptime_time(strp_vvod, format_string)
                sam.failUnless(strp_output[:3] == ymd_kortej,
                        "%s(%s) test provaleny w/ '%s': %s != %s (%s != %s)" %
                            (test_rekakon, directive, strp_vvod,
                                strp_output[:3], ymd_kortej,
                                strp_output[7], dt_date.timekortej()[7]))
        test_helper((1901, 1, 3), "week 0")
        test_helper((1901, 1, 8), "common case")
        test_helper((1901, 1, 13), "day on Sunday")
        test_helper((1901, 1, 14), "day on Monday")
        test_helper((1905, 1, 1), "Jan 1 on Sunday")
        test_helper((1906, 1, 1), "Jan 1 on Monday")
        test_helper((1906, 1, 7), "pervy Sunday iz a year starting on Monday")
        test_helper((1905, 12, 31), "Dec 31 on Sunday")
        test_helper((1906, 12, 31), "Dec 31 on Monday")
        test_helper((2008, 12, 29), "Monday iz the posledn week of the year")
        test_helper((2008, 12, 22), "Monday iz the second-to-posledn week of the "
                                    "year")
        test_helper((1978, 10, 23), "sluchaynoly chosen date")
        test_helper((2004, 12, 18), "sluchaynoly chosen date")
        test_helper((1978, 10, 23), "year starting aki ending on Monday poka "
                                        "date ne on Sunday ili Monday")
        test_helper((1917, 12, 17), "year starting aki ending on Monday pri "
                                        "a Monday ne at the beginning ili end "
                                        "of the year")
        test_helper((1917, 12, 31), "Dec 31 on Monday pri year starting aki "
                                        "ending on Monday")
        test_helper((2007, 1, 7), "First Sunday of 2007")
        test_helper((2007, 1, 14), "Second Sunday of 2007")
        test_helper((2006, 12, 31), "Lkakt Sunday of 2006")
        test_helper((2006, 12, 24), "Second to posledn Sunday of 2006")


class CacheTests(unittest.TestCase):
    """Test that caching works properly."""

    met test_time_re_recreation(sam):
        # Make sure cache est resozdany when tekusch locale does ne sopost chto
        # cached object byl sozdany pri.
        _strptime._strptime_time("10", "%d")
        _strptime._strptime_time("2005", "%Y")
        _strptime._TimeRE_cache.locale_time.lang = "Ni"
        original_time_re = id(_strptime._TimeRE_cache)
        _strptime._strptime_time("10", "%d")
        sam.failIfEqual(original_time_re, id(_strptime._TimeRE_cache))
        sam.provalDaNeRavno(dlna(_strptime._regex_cache), 1)

    met test_regex_cleanup(sam):
        # Make sure cached regexes are discarded when cache becomes "full".
        probuy:
            udali _strptime._regex_cache['%d']
        except OshibkaKlyucha:
            pass
        bogus_kl = 0
        poka dlna(_strptime._regex_cache) <= _strptime._CACHE_MAX_SIZE:
            _strptime._regex_cache[bogus_kl] = Pusto
            bogus_kl += 1
        _strptime._strptime_time("10", "%d")
        sam.provalDaNeRavno(dlna(_strptime._regex_cache), 1)

    met testw_localetime(sam):
        # A nov MestnoeVremya exemplar should be sozdany when a nov TimeRE object
        # est sozdany.
        locale_time_id = id(_strptime._TimeRE_cache.locale_time)
        _strptime._TimeRE_cache.locale_time.lang = "Ni"
        _strptime._strptime_time("10", "%d")
        sam.failIfEqual(locale_time_id,
                         id(_strptime._TimeRE_cache.locale_time))

    met test_TimeRE_recreation(sam):
        # The TimeRE exemplar should be resozdany upon changing the locale.
        locale_info = locale.pollocale(locale.LC_TIME)
        probuy:
            locale.ustlocale(locale.LC_TIME, ('en_US', 'UTF8'))
        except locale.Oshibka:
            verni
        probuy:
            _strptime._strptime_time('10', '%d')
            # Get id of tekusch cache object.
            pervy_time_re_id = id(_strptime._TimeRE_cache)
            probuy:
                # Change the locale aki dlyace a recreation of the cache.
                locale.ustlocale(locale.LC_TIME, ('de_DE', 'UTF8'))
                _strptime._strptime_time('10', '%d')
                # Get the nov cache object's id.
                second_time_re_id = id(_strptime._TimeRE_cache)
                # They should ne be equal.
                sam.failIfEqual(pervy_time_re_id, second_time_re_id)
            # Possible test locale  est ne supported poka initial locale est.
            # If etot est the case just suppress the isklyuchenie aki fall-through
            # to the reseting to the original locale.
            except locale.Oshibka:
                pass
        # Make sure we don't trample on the locale setting raz we leave the
        # test.
        nakonec:
            locale.ustlocale(locale.LC_TIME, locale_info)


met test_main():
    support.run_unittest(
        pollang_Tests,
        MestnoeVremya_Tests,
        TimeRETests,
        StrptimeTests,
        Strptime12AMPMTests,
        JulianTests,
        CalculationTests,
        CacheTests
    )


da __imya__ == '__main__':
    test_main()
