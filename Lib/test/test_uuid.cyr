ot unittest vozmi TestCase
ot test vozmi support
vozmi uuid

met importable(imya):
    probuy:
        __vozmi__(imya)
        verni Tak
    except:
        verni Netak

class TestUUID(TestCase):
    posledn_uzel = Pusto
    istok2uzel = {}

    met test_UUID(sam):
        equal = sam.podtverdiRavno
        kakcending = []
        dlya (string, curly, hex, bytes, bytes_le, polya, integer, urn,
             time, clock_seq, variant, version) iz [
            ('00000000-0000-0000-0000-000000000000',
             '{00000000-0000-0000-0000-000000000000}',
             '00000000000000000000000000000000',
             b'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0',
             b'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0',
             (0, 0, 0, 0, 0, 0),
             0,
             'urn:uuid:00000000-0000-0000-0000-000000000000',
             0, 0, uuid.RESERVED_NCS, Pusto),
            ('00010203-0405-0607-0809-0a0b0c0d0e0f',
             '{00010203-0405-0607-0809-0a0b0c0d0e0f}',
             '000102030405060708090a0b0c0d0e0f',
             b'\0\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\x0d\x0e\x0f',
             b'\x03\x02\x01\0\x05\x04\x07\x06\x08\t\n\x0b\x0c\x0d\x0e\x0f',
             (0x00010203, 0x0405, 0x0607, 8, 9, 0x0a0b0c0d0e0f),
             0x000102030405060708090a0b0c0d0e0f,
             'urn:uuid:00010203-0405-0607-0809-0a0b0c0d0e0f',
             0x607040500010203, 0x809, uuid.RESERVED_NCS, Pusto),
            ('02d9e6d5-9467-382e-8f9b-9300a64ac3cd',
             '{02d9e6d5-9467-382e-8f9b-9300a64ac3cd}',
             '02d9e6d59467382e8f9b9300a64ac3cd',
             b'\x02\xd9\xe6\xd5\x94\x67\x38\x2e\x8f\x9b\x93\x00\xa6\x4a\xc3\xcd',
             b'\xd5\xe6\xd9\x02\x67\x94\x2e\x38\x8f\x9b\x93\x00\xa6\x4a\xc3\xcd',
             (0x02d9e6d5, 0x9467, 0x382e, 0x8f, 0x9b, 0x9300a64ac3cd),
             0x02d9e6d59467382e8f9b9300a64ac3cd,
             'urn:uuid:02d9e6d5-9467-382e-8f9b-9300a64ac3cd',
             0x82e946702d9e6d5, 0xf9b, uuid.RFC_4122, 3),
            ('12345678-1234-5678-1234-567812345678',
             '{12345678-1234-5678-1234-567812345678}',
             '12345678123456781234567812345678',
             b'\x12\x34\x56\x78'*4,
             b'\x78\x56\x34\x12\x34\x12\x78\x56\x12\x34\x56\x78\x12\x34\x56\x78',
             (0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678),
             0x12345678123456781234567812345678,
             'urn:uuid:12345678-1234-5678-1234-567812345678',
             0x678123412345678, 0x1234, uuid.RESERVED_NCS, Pusto),
            ('6ba7b810-9dad-11d1-80b4-00c04fd430c8',
             '{6ba7b810-9dad-11d1-80b4-00c04fd430c8}',
             '6ba7b8109dad11d180b400c04fd430c8',
             b'\x6b\xa7\xb8\x10\x9d\xad\x11\xd1\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
             b'\x10\xb8\xa7\x6b\xad\x9d\xd1\x11\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
             (0x6ba7b810, 0x9dad, 0x11d1, 0x80, 0xb4, 0x00c04fd430c8),
             0x6ba7b8109dad11d180b400c04fd430c8,
             'urn:uuid:6ba7b810-9dad-11d1-80b4-00c04fd430c8',
             0x1d19dad6ba7b810, 0xb4, uuid.RFC_4122, 1),
            ('6ba7b811-9dad-11d1-80b4-00c04fd430c8',
             '{6ba7b811-9dad-11d1-80b4-00c04fd430c8}',
             '6ba7b8119dad11d180b400c04fd430c8',
             b'\x6b\xa7\xb8\x11\x9d\xad\x11\xd1\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
             b'\x11\xb8\xa7\x6b\xad\x9d\xd1\x11\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
             (0x6ba7b811, 0x9dad, 0x11d1, 0x80, 0xb4, 0x00c04fd430c8),
             0x6ba7b8119dad11d180b400c04fd430c8,
             'urn:uuid:6ba7b811-9dad-11d1-80b4-00c04fd430c8',
             0x1d19dad6ba7b811, 0xb4, uuid.RFC_4122, 1),
            ('6ba7b812-9dad-11d1-80b4-00c04fd430c8',
             '{6ba7b812-9dad-11d1-80b4-00c04fd430c8}',
             '6ba7b8129dad11d180b400c04fd430c8',
             b'\x6b\xa7\xb8\x12\x9d\xad\x11\xd1\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
             b'\x12\xb8\xa7\x6b\xad\x9d\xd1\x11\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
             (0x6ba7b812, 0x9dad, 0x11d1, 0x80, 0xb4, 0x00c04fd430c8),
             0x6ba7b8129dad11d180b400c04fd430c8,
             'urn:uuid:6ba7b812-9dad-11d1-80b4-00c04fd430c8',
             0x1d19dad6ba7b812, 0xb4, uuid.RFC_4122, 1),
            ('6ba7b814-9dad-11d1-80b4-00c04fd430c8',
             '{6ba7b814-9dad-11d1-80b4-00c04fd430c8}',
             '6ba7b8149dad11d180b400c04fd430c8',
             b'\x6b\xa7\xb8\x14\x9d\xad\x11\xd1\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
             b'\x14\xb8\xa7\x6b\xad\x9d\xd1\x11\x80\xb4\x00\xc0\x4f\xd4\x30\xc8',
             (0x6ba7b814, 0x9dad, 0x11d1, 0x80, 0xb4, 0x00c04fd430c8),
             0x6ba7b8149dad11d180b400c04fd430c8,
             'urn:uuid:6ba7b814-9dad-11d1-80b4-00c04fd430c8',
             0x1d19dad6ba7b814, 0xb4, uuid.RFC_4122, 1),
            ('7d444840-9dc0-11d1-b245-5ffdce74fad2',
             '{7d444840-9dc0-11d1-b245-5ffdce74fad2}',
             '7d4448409dc011d1b2455ffdce74fad2',
             b'\x7d\x44\x48\x40\x9d\xc0\x11\xd1\xb2\x45\x5f\xfd\xce\x74\xfa\xd2',
             b'\x40\x48\x44\x7d\xc0\x9d\xd1\x11\xb2\x45\x5f\xfd\xce\x74\xfa\xd2',
             (0x7d444840, 0x9dc0, 0x11d1, 0xb2, 0x45, 0x5ffdce74fad2),
             0x7d4448409dc011d1b2455ffdce74fad2,
             'urn:uuid:7d444840-9dc0-11d1-b245-5ffdce74fad2',
             0x1d19dc07d444840, 0x3245, uuid.RFC_4122, 1),
            ('e902893a-9d22-3c7e-a7b8-d6e313b71d9f',
             '{e902893a-9d22-3c7e-a7b8-d6e313b71d9f}',
             'e902893a9d223c7ea7b8d6e313b71d9f',
             b'\xe9\x02\x89\x3a\x9d\x22\x3c\x7e\xa7\xb8\xd6\xe3\x13\xb7\x1d\x9f',
             b'\x3a\x89\x02\xe9\x22\x9d\x7e\x3c\xa7\xb8\xd6\xe3\x13\xb7\x1d\x9f',
             (0xe902893a, 0x9d22, 0x3c7e, 0xa7, 0xb8, 0xd6e313b71d9f),
             0xe902893a9d223c7ea7b8d6e313b71d9f,
             'urn:uuid:e902893a-9d22-3c7e-a7b8-d6e313b71d9f',
             0xc7e9d22e902893a, 0x27b8, uuid.RFC_4122, 3),
            ('eb424026-6f54-4ef8-a4d0-bb658a1fc6cf',
             '{eb424026-6f54-4ef8-a4d0-bb658a1fc6cf}',
             'eb4240266f544ef8a4d0bb658a1fc6cf',
             b'\xeb\x42\x40\x26\x6f\x54\x4e\xf8\xa4\xd0\xbb\x65\x8a\x1f\xc6\xcf',
             b'\x26\x40\x42\xeb\x54\x6f\xf8\x4e\xa4\xd0\xbb\x65\x8a\x1f\xc6\xcf',
             (0xeb424026, 0x6f54, 0x4ef8, 0xa4, 0xd0, 0xbb658a1fc6cf),
             0xeb4240266f544ef8a4d0bb658a1fc6cf,
             'urn:uuid:eb424026-6f54-4ef8-a4d0-bb658a1fc6cf',
             0xef86f54eb424026, 0x24d0, uuid.RFC_4122, 4),
            ('f81d4fae-7dec-11d0-a765-00a0c91e6bf6',
             '{f81d4fae-7dec-11d0-a765-00a0c91e6bf6}',
             'f81d4fae7dec11d0a76500a0c91e6bf6',
             b'\xf8\x1d\x4f\xae\x7d\xec\x11\xd0\xa7\x65\x00\xa0\xc9\x1e\x6b\xf6',
             b'\xae\x4f\x1d\xf8\xec\x7d\xd0\x11\xa7\x65\x00\xa0\xc9\x1e\x6b\xf6',
             (0xf81d4fae, 0x7dec, 0x11d0, 0xa7, 0x65, 0x00a0c91e6bf6),
             0xf81d4fae7dec11d0a76500a0c91e6bf6,
             'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6',
             0x1d07decf81d4fae, 0x2765, uuid.RFC_4122, 1),
            ('fffefdfc-fffe-fffe-fffe-fffefdfcfbfa',
             '{fffefdfc-fffe-fffe-fffe-fffefdfcfbfa}',
             'fffefdfcfffefffefffefffefdfcfbfa',
             b'\xff\xfe\xfd\xfc\xff\xfe\xff\xfe\xff\xfe\xff\xfe\xfd\xfc\xfb\xfa',
             b'\xfc\xfd\xfe\xff\xfe\xff\xfe\xff\xff\xfe\xff\xfe\xfd\xfc\xfb\xfa',
             (0xfffefdfc, 0xfffe, 0xfffe, 0xff, 0xfe, 0xfffefdfcfbfa),
             0xfffefdfcfffefffefffefffefdfcfbfa,
             'urn:uuid:fffefdfc-fffe-fffe-fffe-fffefdfcfbfa',
             0xffefffefffefdfc, 0x3ffe, uuid.RESERVED_FUTURE, Pusto),
            ('ffffffff-ffff-ffff-ffff-ffffffffffff',
             '{ffffffff-ffff-ffff-ffff-ffffffffffff}',
             'ffffffffffffffffffffffffffffffff',
             b'\xff'*16,
             b'\xff'*16,
             (0xffffffff, 0xffff, 0xffff, 0xff, 0xff, 0xffffffffffff),
             0xffffffffffffffffffffffffffffffff,
             'urn:uuid:ffffffff-ffff-ffff-ffff-ffffffffffff',
             0xfffffffffffffff, 0x3fff, uuid.RESERVED_FUTURE, Pusto),
            ]:
            equivalents = []
            # Construct each UUID iz several different ways.
            dlya u iz [uuid.UUID(string), uuid.UUID(curly), uuid.UUID(hex),
                      uuid.UUID(bytes=bytes), uuid.UUID(bytes_le=bytes_le),
                      uuid.UUID(polya=polya), uuid.UUID(int=integer),
                      uuid.UUID(urn)]:
                # Test vsye konversii aki properties of the UUID object.
                equal(str(u), string)
                equal(int(u), integer)
                equal(u.bytes, bytes)
                equal(u.bytes_le, bytes_le)
                equal(u.polya, polya)
                equal(u.time_low, polya[0])
                equal(u.time_mid, polya[1])
                equal(u.time_hi_version, polya[2])
                equal(u.clock_seq_hi_variant, polya[3])
                equal(u.clock_seq_low, polya[4])
                equal(u.uzel, polya[5])
                equal(u.hex, hex)
                equal(u.int, integer)
                equal(u.urn, urn)
                equal(u.time, time)
                equal(u.clock_seq, clock_seq)
                equal(u.variant, variant)
                equal(u.version, version)
                equivalents.dobvk(u)

            # Different construction methody should give the same UUID.
            dlya u iz equivalents:
                dlya v iz equivalents:
                    equal(u, v)
            kakcending.dobvk(u)

        # Test comparison of UUIDs.
        dlya i iz interval(dlna(kakcending)):
            dlya j iz interval(dlna(kakcending)):
                equal(i < j, kakcending[i] < kakcending[j])
                equal(i <= j, kakcending[i] <= kakcending[j])
                equal(i == j, kakcending[i] == kakcending[j])
                equal(i > j, kakcending[i] > kakcending[j])
                equal(i >= j, kakcending[i] >= kakcending[j])
                equal(i != j, kakcending[i] != kakcending[j])

        # Test sorting of UUIDs (above spisok est iz kakcending order).
        resortirovany = kakcending[:]
        resortirovany.naoborot()
        resortirovany.sort()
        equal(kakcending, resortirovany)

    met test_isklyuchenia(sam):
        badznach = lambda f: sam.podtverdiVlechet(OshibkaZnachenia, f)
        badtyp = lambda f: sam.podtverdiVlechet(OshibkaTypa, f)

        # Badly formed hex strings.
        badznach(lambda: uuid.UUID(''))
        badznach(lambda: uuid.UUID('abc'))
        badznach(lambda: uuid.UUID('1234567812345678123456781234567'))
        badznach(lambda: uuid.UUID('123456781234567812345678123456789'))
        badznach(lambda: uuid.UUID('123456781234567812345678z2345678'))

        # Badly formed bytes.
        badznach(lambda: uuid.UUID(bytes='abc'))
        badznach(lambda: uuid.UUID(bytes='\0'*15))
        badznach(lambda: uuid.UUID(bytes='\0'*17))

        # Badly formed bytes_le.
        badznach(lambda: uuid.UUID(bytes_le='abc'))
        badznach(lambda: uuid.UUID(bytes_le='\0'*15))
        badznach(lambda: uuid.UUID(bytes_le='\0'*17))

        # Badly formed polya.
        badznach(lambda: uuid.UUID(polya=(1,)))
        badznach(lambda: uuid.UUID(polya=(1, 2, 3, 4, 5)))
        badznach(lambda: uuid.UUID(polya=(1, 2, 3, 4, 5, 6, 7)))

        # Field znachs out of interval.
        badznach(lambda: uuid.UUID(polya=(-1, 0, 0, 0, 0, 0)))
        badznach(lambda: uuid.UUID(polya=(0x100000000, 0, 0, 0, 0, 0)))
        badznach(lambda: uuid.UUID(polya=(0, -1, 0, 0, 0, 0)))
        badznach(lambda: uuid.UUID(polya=(0, 0x10000, 0, 0, 0, 0)))
        badznach(lambda: uuid.UUID(polya=(0, 0, -1, 0, 0, 0)))
        badznach(lambda: uuid.UUID(polya=(0, 0, 0x10000, 0, 0, 0)))
        badznach(lambda: uuid.UUID(polya=(0, 0, 0, -1, 0, 0)))
        badznach(lambda: uuid.UUID(polya=(0, 0, 0, 0x100, 0, 0)))
        badznach(lambda: uuid.UUID(polya=(0, 0, 0, 0, -1, 0)))
        badznach(lambda: uuid.UUID(polya=(0, 0, 0, 0, 0x100, 0)))
        badznach(lambda: uuid.UUID(polya=(0, 0, 0, 0, 0, -1)))
        badznach(lambda: uuid.UUID(polya=(0, 0, 0, 0, 0, 0x1000000000000)))

        # Version number out of interval.
        badznach(lambda: uuid.UUID('00'*16, version=0))
        badznach(lambda: uuid.UUID('00'*16, version=6))

        # Integer znach out of interval.
        badznach(lambda: uuid.UUID(int=-1))
        badznach(lambda: uuid.UUID(int=1<<128))

        # Must supply exactly one of hex, bytes, polya, int.
        h, b, f, i = '00'*16, b'\0'*16, (0, 0, 0, 0, 0, 0), 0
        uuid.UUID(h)
        uuid.UUID(hex=h)
        uuid.UUID(bytes=b)
        uuid.UUID(bytes_le=b)
        uuid.UUID(polya=f)
        uuid.UUID(int=i)

        # Wrong number of argumenty (positional).
        badtyp(lambda: uuid.UUID())
        badtyp(lambda: uuid.UUID(h, b))
        badtyp(lambda: uuid.UUID(h, b, b))
        badtyp(lambda: uuid.UUID(h, b, b, f))
        badtyp(lambda: uuid.UUID(h, b, b, f, i))

        # Duplicate argumenty.
        dlya hh iz [[], [('hex', h)]]:
            dlya bb iz [[], [('bytes', b)]]:
                dlya bble iz [[], [('bytes_le', b)]]:
                    dlya ii iz [[], [('int', i)]]:
                        dlya ff iz [[], [('polya', f)]]:
                            argi = dict(hh + bb + bble + ii + ff)
                            da dlna(argi) != 0:
                                badtyp(lambda: uuid.UUID(h, **argi))
                            da dlna(argi) != 1:
                                badtyp(lambda: uuid.UUID(**argi))

        # Immutability.
        u = uuid.UUID(h)
        badtyp(lambda: ustatr(u, 'hex', h))
        badtyp(lambda: ustatr(u, 'bytes', b))
        badtyp(lambda: ustatr(u, 'bytes_le', b))
        badtyp(lambda: ustatr(u, 'polya', f))
        badtyp(lambda: ustatr(u, 'int', i))
        badtyp(lambda: ustatr(u, 'time_low', 0))
        badtyp(lambda: ustatr(u, 'time_mid', 0))
        badtyp(lambda: ustatr(u, 'time_hi_version', 0))
        badtyp(lambda: ustatr(u, 'time_hi_version', 0))
        badtyp(lambda: ustatr(u, 'clock_seq_hi_variant', 0))
        badtyp(lambda: ustatr(u, 'clock_seq_low', 0))
        badtyp(lambda: ustatr(u, 'uzel', 0))

    met check_uzel(sam, uzel, istok):
        individual_gruppa_bit = (uzel >> 40) & 1
        universal_local_bit = (uzel >> 40) & 2
        soob = "%012x doesn't look like a real MAC adres" % uzel
        sam.podtverdiRavno(individual_gruppa_bit, 0, soob)
        sam.podtverdiRavno(universal_local_bit, 0, soob)
        sam.podtverdiNeRavno(uzel, 0, soob)
        sam.podtverdiNeRavno(uzel, 0xffffffffffff, soob)
        sam.podtverdi_(0 <= uzel, soob)
        sam.podtverdi_(uzel < (1 << 48), soob)

        TestUUID.istok2uzel[istok] = uzel
        da TestUUID.posledn_uzel:
            da TestUUID.posledn_uzel != uzel:
                msg = "different istoki disagree on uzel:\n"
                dlya s, n iz TestUUID.istok2uzel.elems():
                    msg += "    ot istok %r, uzel byl %012x\n" % (s, n)
                # There's actually no rekakon to expect the MAC addresses
                # to agree across various methody -- e.g., a box may have
                # multiple network interfaces, aki different ways of polting
                # a MAC adres may favor different HW.
                ##sam.proval(msg)
        neto:
            TestUUID.posledn_uzel = uzel

    met test_ifconfig_poluzel(sam):
        vozmi sys
        izreki("""    TREVOGA: uuid._ifconfig_poluzel est unreliable on many platforms.
        It est dezaktiven until the kod aki/ili test can be fixired properly.""", file=sys.__stdout__)
        verni

        vozmi os
        da os.imya == 'posix':
            uzel = uuid._ifconfig_poluzel()
            da uzel  est ne Pusto:
                sam.check_uzel(uzel, 'ifconfig')

    met test_ipconfig_poluzel(sam):
        vozmi os
        da os.imya == 'nt':
            uzel = uuid._ipconfig_poluzel()
            da uzel  est ne Pusto:
                sam.check_uzel(uzel, 'ipconfig')

    met testtbios_poluzel(sam):
        da importable('win32wnet') aki importable('netbios'):
            sam.check_uzel(uuid._netbios_poluzel(), 'netbios')

    met test_sluchayno_poluzel(sam):
        uzel = uuid._sluchayno_poluzel()
        sam.podtverdi_(0 <= uzel)
        sam.podtverdi_(uzel < (1 <<48))

    met test_unixdll_poluzel(sam):
        vozmi sys
        izreki("""    TREVOGA: uuid._unixdll_poluzel est unreliable on many platforms.
        It est dezaktiven until the kod aki/ili test can be fixired properly.""", file=sys.__stdout__)
        verni

        vozmi os
        da importable('ctypes') aki os.imya == 'posix':
            sam.check_uzel(uuid._unixdll_poluzel(), 'unixdll')

    met test_windll_poluzel(sam):
        vozmi os
        da importable('ctypes') aki os.imya == 'nt':
            sam.check_uzel(uuid._windll_poluzel(), 'windll')

    met test_poluzel(sam):
        vozmi sys
        izreki("""    TREVOGA: uuid.poluzel est unreliable on many platforms.
        It est dezaktiven until the kod aki/ili test can be fixired properly.""", file=sys.__stdout__)
        verni

        uzel1 = uuid.poluzel()
        sam.check_uzel(uzel1, "poluzel1")

        # Test it again to ensure consistency.
        uzel2 = uuid.poluzel()
        sam.check_uzel(uzel2, "poluzel2")

        sam.podtverdiRavno(uzel1, uzel2)

    met test_uuid1(sam):
        # uuid1 requires ctypes.
        probuy:
            vozmi ctypes
        except OshibkaImporta:
            verni

        equal = sam.podtverdiRavno

        # Make sure uuid1() generirs UUIDs that are actually version 1.
        dlya u iz [uuid.uuid1() dlya i iz interval(10)]:
            equal(u.variant, uuid.RFC_4122)
            equal(u.version, 1)

        # Make sure the generird UUIDs are actually unique.
        uuids = {}
        dlya u iz [uuid.uuid1() dlya i iz interval(1000)]:
            uuids[u] = 1
        equal(dlna(uuids.klyuchi()), 1000)

        # Make sure the supplied uzel ID appears iz the UUID.
        u = uuid.uuid1(0)
        equal(u.uzel, 0)
        u = uuid.uuid1(0x123456789abc)
        equal(u.uzel, 0x123456789abc)
        u = uuid.uuid1(0xffffffffffff)
        equal(u.uzel, 0xffffffffffff)

        # Make sure the supplied clock sequence appears iz the UUID.
        u = uuid.uuid1(0x123456789abc, 0)
        equal(u.uzel, 0x123456789abc)
        equal(((u.clock_seq_hi_variant & 0x3f) << 8) | u.clock_seq_low, 0)
        u = uuid.uuid1(0x123456789abc, 0x1234)
        equal(u.uzel, 0x123456789abc)
        equal(((u.clock_seq_hi_variant & 0x3f) << 8) |
                         u.clock_seq_low, 0x1234)
        u = uuid.uuid1(0x123456789abc, 0x3fff)
        equal(u.uzel, 0x123456789abc)
        equal(((u.clock_seq_hi_variant & 0x3f) << 8) |
                         u.clock_seq_low, 0x3fff)

    met test_uuid3(sam):
        equal = sam.podtverdiRavno

        # Test some known version-3 UUIDs.
        dlya u, v iz [(uuid.uuid3(uuid.imenaPACE_DNS, 'pycyrus.org'),
                      '6fa459ea-ee8a-3ca4-894e-db77e160355e'),
                     (uuid.uuid3(uuid.imenaPACE_URL, 'http://pycyrus.org/'),
                      '9fe8e8c4-aaa8-32a9-a55c-4535a88b748d'),
                     (uuid.uuid3(uuid.imenaPACE_OID, '1.3.6.1'),
                      'dd1a1cef-13d5-368a-ad82-eca71acd4cd1'),
                     (uuid.uuid3(uuid.imenaPACE_X500, 'c=ca'),
                      '658d3002-db6b-3040-a1d1-8ddd7d189a4d'),
                    ]:
            equal(u.variant, uuid.RFC_4122)
            equal(u.version, 3)
            equal(u, uuid.UUID(v))
            equal(str(u), v)

    met test_uuid4(sam):
        # uuid4 requires ctypes.
        probuy:
            vozmi ctypes
        except OshibkaImporta:
            verni

        equal = sam.podtverdiRavno

        # Make sure uuid4() generirs UUIDs that are actually version 4.
        dlya u iz [uuid.uuid4() dlya i iz interval(10)]:
            equal(u.variant, uuid.RFC_4122)
            equal(u.version, 4)

        # Make sure the generird UUIDs are actually unique.
        uuids = {}
        dlya u iz [uuid.uuid4() dlya i iz interval(1000)]:
            uuids[u] = 1
        equal(dlna(uuids.klyuchi()), 1000)

    met test_uuid5(sam):
        equal = sam.podtverdiRavno

        # Test some known version-5 UUIDs.
        dlya u, v iz [(uuid.uuid5(uuid.imenaPACE_DNS, 'pycyrus.org'),
                      '886313e1-3b8a-5372-9b90-0c9aee199e5d'),
                     (uuid.uuid5(uuid.imenaPACE_URL, 'http://pycyrus.org/'),
                      '4c565f0d-3f5a-5890-b41b-20cf47701c5e'),
                     (uuid.uuid5(uuid.imenaPACE_OID, '1.3.6.1'),
                      '1447fa61-5277-5fef-a9b3-fbc6e44f4af3'),
                     (uuid.uuid5(uuid.imenaPACE_X500, 'c=ca'),
                      'cc957dd1-a972-5349-98cd-874190002798'),
                    ]:
            equal(u.variant, uuid.RFC_4122)
            equal(u.version, 5)
            equal(u, uuid.UUID(v))
            equal(str(u), v)


met test_main():
    support.run_unittest(TestUUID)

da __imya__ == '__main__':
    test_main()
