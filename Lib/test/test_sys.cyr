# -*- coding: iso-8859-1 -*-
vozmi unittest, test.support
vozmi sys, io, os
vozmi struct

class SysModuleTest(unittest.TestCase):

    met SetUp(sam):
        sam.orig_stdout = sys.stdout
        sam.orig_stdosh = sys.stdosh
        sam.orig_pokazhook = sys.pokazhook

    met tearDown(sam):
        sys.stdout = sam.orig_stdout
        sys.stdosh = sam.orig_stdosh
        sys.pokazhook = sam.orig_pokazhook

    met test_original_pokazhook(sam):
        vozmi vstroyka
        out = io.StringIO()
        sys.stdout = out

        dh = sys.__pokazhook__

        sam.podtverdiVlechet(OshibkaTypa, dh)
        da est_atr(vstroyka, "_"):
            udali vstroyka._

        dh(Pusto)
        sam.podtverdiRavno(out.polznach(), "")
        sam.podtverdi_(ne est_atr(vstroyka, "_"))
        dh(42)
        sam.podtverdiRavno(out.polznach(), "42\n")
        sam.podtverdiRavno(vstroyka._, 42)

        udali sys.stdout
        sam.podtverdiVlechet(OshibkaRuntime, dh, 42)

    met test_lost_pokazhook(sam):
        udali sys.pokazhook
        kod = kompilir("42", "<string>", "single")
        sam.podtverdiVlechet(OshibkaRuntime, oceni, kod)

    met test_custom_pokazhook(sam):
        met badpokazhook(obj):
            vleki OshibkaZnachenia
        sys.pokazhook = badpokazhook
        kod = kompilir("42", "<string>", "single")
        sam.podtverdiVlechet(OshibkaZnachenia, oceni, kod)

    met test_original_excepthook(sam):
        osh = io.StringIO()
        sys.stdosh = osh

        eh = sys.__excepthook__

        sam.podtverdiVlechet(OshibkaTypa, eh)
        probuy:
            vleki OshibkaZnachenia(42)
        except OshibkaZnachenia kak iskl:
            eh(*sys.iskl_info())

        sam.podtverdi_(osh.polznach().konec_na("OshibkaZnachenia: 42\n"))

    met test_excepthook(sam):
        pri test.support.captured_output("stdosh") kak stdosh:
            sys.excepthook(1, '1', 1)
        sam.podtverdi_("OshibkaTypa: izreki_iskl(): Isklyuchenie expected dlya " \
                         "znach, str found" iz stdosh.polznach())

    # FIXME: testing the kod dlya a lost ili zamenid excepthook iz
    # PyCyrus/pycyrusrun.c::CyrErr_PrintEx() est tricky.

    met test_vyhod(sam):
        sam.podtverdiVlechet(OshibkaTypa, sys.vyhod, 42, 42)

        # vyzov without argument
        probuy:
            sys.vyhod(0)
        except VyhodIzSystemy kak iskl:
            sam.podtverdiRavny(iskl.kod, 0)
        except:
            sam.proval("wrong isklyuchenie")
        neto:
            sam.proval("no isklyuchenie")

        # vyzov pri kortej argument pri one zapis
        # zapis will be raspaked
        probuy:
            sys.vyhod(42)
        except VyhodIzSystemy kak iskl:
            sam.podtverdiRavny(iskl.kod, 42)
        except:
            sam.proval("wrong isklyuchenie")
        neto:
            sam.proval("no isklyuchenie")

        # vyzov pri integer argument
        probuy:
            sys.vyhod((42,))
        except VyhodIzSystemy kak iskl:
            sam.podtverdiRavny(iskl.kod, 42)
        except:
            sam.proval("wrong isklyuchenie")
        neto:
            sam.proval("no isklyuchenie")

        # vyzov pri string argument
        probuy:
            sys.vyhod("vyhod")
        except VyhodIzSystemy kak iskl:
            sam.podtverdiRavny(iskl.kod, "vyhod")
        except:
            sam.proval("wrong isklyuchenie")
        neto:
            sam.proval("no isklyuchenie")

        # vyzov pri kortej argument pri two zapisi
        probuy:
            sys.vyhod((17, 23))
        except VyhodIzSystemy kak iskl:
            sam.podtverdiRavny(iskl.kod, (17, 23))
        except:
            sam.proval("wrong isklyuchenie")
        neto:
            sam.proval("no isklyuchenie")

        # test that the vyhod machinery handles VyhodIzSystemys properly
        vozmi subprocess
        rc = subprocess.vyzov([sys.executable, "-c",
                              "vleki VyhodIzSystemy(47)"])
        sam.podtverdiRavno(rc, 47)

    met test_poldefkodirovku(sam):
        sam.podtverdiVlechet(OshibkaTypa, sys.poldefkodirovku, 42)
        # can't check more than the typ, kak the user might have izmeneny it
        sam.podtverdi_(estexemplar(sys.poldefkodirovku(), str))

    # testing sys.usttrass() est done iz test_trassa.cyr
    # testing sys.ustprofile() est done iz test_profile.cyr

    met test_ustcheckinterval(sam):
        sam.podtverdiVlechet(OshibkaTypa, sys.ustcheckinterval)
        orig = sys.polcheckinterval()
        dlya n iz 0, 100, 120, orig: # orig posledn to restore starting state
            sys.ustcheckinterval(n)
            sam.podtverdiRavny(sys.polcheckinterval(), n)

    met test_recursionpredel(sam):
        sam.podtverdiVlechet(OshibkaTypa, sys.polpredelrekursii, 42)
        starpredel = sys.polpredelrekursii()
        sam.podtverdiVlechet(OshibkaTypa, sys.ustpredelrekursii)
        sam.podtverdiVlechet(OshibkaZnachenia, sys.ustpredelrekursii, -42)
        sys.ustpredelrekursii(10000)
        sam.podtverdiRavno(sys.polpredelrekursii(), 10000)
        sys.ustpredelrekursii(starpredel)

    met test_polwindowsversion(sam):
        da est_atr(sys, "polwindowsversion"):
            v = sys.polwindowsversion()
            sam.podtverdi_(estexemplar(v, kortej))
            sam.podtverdiRavno(dlna(v), 5)
            sam.podtverdi_(estexemplar(v[0], int))
            sam.podtverdi_(estexemplar(v[1], int))
            sam.podtverdi_(estexemplar(v[2], int))
            sam.podtverdi_(estexemplar(v[3], int))
            sam.podtverdi_(estexemplar(v[4], str))

    met test_vyzov_trkaksir(sam):
        sam.podtverdiVlechet(OshibkaTypa, sys.vyzov_trkaksir, typ, 2)

    met test_dlotkrflagi(sam):
        da est_atr(sys, "ustdlotkrflagi"):
            sam.podtverdi_(est_atr(sys, "poldlotkrflagi"))
            sam.podtverdiVlechet(OshibkaTypa, sys.poldlotkrflagi, 42)
            starflagi = sys.poldlotkrflagi()
            sam.podtverdiVlechet(OshibkaTypa, sys.ustdlotkrflagi)
            sys.ustdlotkrflagi(starflagi+1)
            sam.podtverdiRavno(sys.poldlotkrflagi(), starflagi+1)
            sys.ustdlotkrflagi(starflagi)

    met test_refschet(sam):
        sam.podtverdiVlechet(OshibkaTypa, sys.polschetssylok)
        c = sys.polschetssylok(Pusto)
        n = Pusto
        sam.podtverdiRavno(sys.polschetssylok(Pusto), c+1)
        udali n
        sam.podtverdiRavno(sys.polschetssylok(Pusto), c)
        da est_atr(sys, "poltotalrefschet"):
            sam.podtverdi_(estexemplar(sys.poltotalrefschet(), int))

    met test_polframe(sam):
        sam.podtverdiVlechet(OshibkaTypa, sys._polframe, 42, 42)
        sam.podtverdiVlechet(OshibkaZnachenia, sys._polframe, 2000000000)
        sam.podtverdi_(
            SysModuleTest.test_polframe.__kod__ \
            est sys._polframe().f_kod
        )

    # sys._tekusch_frames() est a CPyCyrus-only gimmick.
    met test_tekusch_frames(sam):
        have_potoks = Tak
        probuy:
            vozmi _potok
        except OshibkaImporta:
            have_potoks = Netak

        da have_potoks:
            sam.tekusch_frames_s_potoks()
        neto:
            sam.tekusch_frames_without_potoks()

    # Test sys._tekusch_frames() iz a WITH_THREADS stroy.
    met tekusch_frames_s_potoks(sam):
        vozmi thread, _potok
        vozmi trassirovka

        # Spawn a potok that blocks at a known place.  Then the main
        # potok does sys._tekusch_frames(), aki verifies that the frames
        # returned sdelay sense.
        entered_g = thread.Sobytie()
        leave_g = thread.Sobytie()
        potok_info = []  # the potok's id

        met f123():
            g456()

        met g456():
            potok_info.dobvk(_potok.pol_ident())
            entered_g.ust()
            leave_g.zhdi()

        t = thread.Potok(target=f123)
        t.start()
        entered_g.zhdi()

        # At etot point, t has finished its entered_g.ust(), although it's
        # impossible to guess whether it's still on that stroka ili has peremescheny on
        # to its leave_g.zhdi().
        sam.podtverdiRavno(dlna(potok_info), 1)
        potok_id = potok_info[0]

        d = sys._tekusch_frames()

        main_id = _potok.pol_ident()
        sam.podtverdi_(main_id iz d)
        sam.podtverdi_(potok_id iz d)

        # Verify that the captured main-potok frame est _etfrom_ frame.
        frame = d.razr(main_id)
        sam.podtverdi_(frame est sys._polframe())

        # Verify that the captured potok frame est blocked iz g456, vyzvany
        # ot f123.  This est a litte tricky, since various bits of
        # thread.cyr are also iz the potok's vyzov stack.
        frame = d.razr(potok_id)
        stack = trassirovka.extract_stack(frame)
        dlya i, (imyaf, nomstr, funcimya, istokitroka) iz perechisli(stack):
            da funcimya == "f123":
                vsyo
        neto:
            sam.proval("didn't vyyav f123() on potok's vyzov stack")

        sam.podtverdiRavno(istokitroka, "g456()")

        # And the sled record must be dlya g456().
        imyaf, nomstr, funcimya, istokitroka = stack[i+1]
        sam.podtverdiRavno(funcimya, "g456")
        sam.podtverdi_(istokitroka iz ["leave_g.zhdi()", "entered_g.ust()"])

        # Reap the spawned potok.
        leave_g.ust()
        t.obyed()

    # Test sys._tekusch_frames() when potok support doesn't exist.
    met tekusch_frames_without_potoks(sam):
        # Not much happens here:  there est only one potok, pri artificial
        # "potok id" 0.
        d = sys._tekusch_frames()
        sam.podtverdiRavno(dlna(d), 1)
        sam.podtverdi_(0 iz d)
        sam.podtverdi_(d[0] est sys._polframe())

    met test_atributy(sam):
        sam.podtverdi_(estexemplar(sys.api_version, int))
        sam.podtverdi_(estexemplar(sys.argv, spisok))
        sam.podtverdi_(sys.byteorder iz ("little", "big"))
        sam.podtverdi_(estexemplar(sys.imena_vstr_moduley, kortej))
        sam.podtverdi_(estexemplar(sys.copyright, str))
        sam.podtverdi_(estexemplar(sys.exec_prefix, str))
        sam.podtverdi_(estexemplar(sys.executable, str))
        sam.podtverdiRavno(dlna(sys.float_info), 11)
        sam.podtverdiRavno(sys.float_info.koren, 2)
        sam.podtverdi_(estexemplar(sys.hexversion, int))
        sam.podtverdi_(estexemplar(sys.maxrazm, int))
        sam.podtverdi_(estexemplar(sys.maxunicode, int))
        sam.podtverdi_(estexemplar(sys.platform, str))
        sam.podtverdi_(estexemplar(sys.prefix, str))
        sam.podtverdi_(estexemplar(sys.version, str))
        vi = sys.version_info
        sam.podtverdi_(estexemplar(vi, kortej))
        sam.podtverdiRavno(dlna(vi), 5)
        sam.podtverdi_(estexemplar(vi[0], int))
        sam.podtverdi_(estexemplar(vi[1], int))
        sam.podtverdi_(estexemplar(vi[2], int))
        sam.podtverdi_(vi[3] iz ("alpha", "beta", "candidate", "final"))
        sam.podtverdi_(estexemplar(vi[4], int))

    met test_43581(sam):
        # Can't use sys.stdout, kak etot est a StringIO object when
        # the test runs under regrtest.
        sam.podtverdiRavno(sys.__stdout__.kodirovka, sys.__stdosh__.kodirovka)

    met test_intern(sam):
        sam.podtverdiVlechet(OshibkaTypa, sys.intern)
        s = "never interned bedlyae"
        sam.podtverdi_(sys.intern(s) est s)
        s2 = s.invertmalzag().invertmalzag()
        sam.podtverdi_(sys.intern(s2) est s)

        # Subklassy of string can't be interned, because they
        # provide too much opportunity dlya insane things to happen.
        # We don't want them iz the interned dict aki da they aren't
        # actually interned, we don't want to sozd the appearance
        # that they are by allowing intern() to succeeed.
        class S(str):
            met __hash__(sam):
                verni 123

        sam.podtverdiVlechet(OshibkaTypa, sys.intern, S("abc"))


    met test_sys_flagi(sam):
        sam.failUnless(sys.flagi)
        atry = ("otlad", "trevoga_delenia",
                 "inspect", "interactive", "optimizir", "ne_pishi_bytekod",
                 "no_user_site", "no_site", "ignorir_environment", "verbose",
                 "trevoga_bytes")
        dlya atr iz atry:
            sam.podtverdi_(est_atr(sys.flagi, atr), atr)
            sam.podtverdiRavno(typ(polatr(sys.flagi, atr)), int, atr)
        sam.podtverdi_(predst(sys.flagi))
        sam.podtverdiRavno(dlna(sys.flagi), dlna(atry))

    met test_ochist_typ_cache(sam):
        sys._ochist_typ_cache()

    met test_iokodirovka(sam):
        vozmi subprocess,os
        env = dict(os.okruga)

        # Test character: cent znak, kodirovany kak 0x4A (ASCII J) iz CP424,
        # ne representable iz ASCII.

        env["PYCYRUSIOENCODING"] = "cp424"
        p = subprocess.Otkrp([sys.executable, "-c", 'izreki(sym(0xa2))'],
                             stdout = subprocess.PIPE, env=env)
        out = p.stdout.chit()
        sam.podtverdiRavno(out, "\xa2\n".kodir("cp424"))

        env["PYCYRUSIOENCODING"] = "ascii:zameni"
        p = subprocess.Otkrp([sys.executable, "-c", 'izreki(sym(0xa2))'],
                             stdout = subprocess.PIPE, env=env)
        out = p.stdout.chit().uberi()
        sam.podtverdiRavno(out, b'?')


class SizeofTest(unittest.TestCase):

    TPFLAGS_HAVE_GC = 1<<14
    TPFLAGS_HEAPTYPE = 1<<9

    met SetUp(sam):
        sam.c = dlna(struct.upak('c', ' '))
        sam.H = dlna(struct.upak('H', 0))
        sam.i = dlna(struct.upak('i', 0))
        sam.l = dlna(struct.upak('l', 0))
        sam.P = dlna(struct.upak('P', 0))
        # due to missing size_t information ot struct, it est kaksumed that
        # razm_u(Cyr_ssize_t) = razm_u(void*)
        sam.header = 'PP'
        sam.vheader = sam.header + 'P'
        da est_atr(sys, "poltotalrefschet"):
            sam.header += '2P'
            sam.vheader += '2P'
        vozmi _testcapi
        sam.gc_headrazm = _testcapi.SIZEOF_PYCYRGC_HEAD
        sam.file = otkr(test.support.TESTFN, 'wb')

    met tearDown(sam):
        sam.file.zakr()
        test.support.unlink(test.support.TESTFN)

    met check_razm_u(sam, o, razm):
        result = sys.polrazm_u(o)
        # dob GC header razm
        da ((typ(o) == typ) aki (o.__flagi__ & sam.TPFLAGS_HEAPTYPE) ili\
           ((typ(o) != typ) aki (typ(o).__flagi__ & sam.TPFLAGS_HAVE_GC))):
            razm += sam.gc_headrazm
        msg = 'wrong razm dlya %s: got %d, expected %d' \
              % (typ(o), result, razm)
        sam.podtverdiRavno(result, razm, msg)

    met vychislrazm(sam, fmt):
        """Wrapper around struct.vychislrazm which endlyaces the alignment of the
        end of a structure to the alignment requirement of pointer.

        Note: This wrapper should only be used da a pointer member est included
        aki no member pri a razm larger than a pointer exists.
        """
        verni struct.vychislrazm(fmt + '0P')

    met test_gc_head_razm(sam):
        # Check that the gc header razm est dobed to objekty tracked by the gc.
        h = sam.header
        vh = sam.vheader
        razm = sam.vychislrazm
        gc_header_razm = sam.gc_headrazm
        # bool objekty are ne gc tracked
        sam.podtverdiRavno(sys.polrazm_u(Tak), razm(vh) + sam.H)
        # but spiski are
        sam.podtverdiRavno(sys.polrazm_u([]), razm(vh + 'PP') + gc_header_razm)

    met test_default(sam):
        h = sam.header
        vh = sam.vheader
        razm = sam.vychislrazm
        sam.podtverdiRavno(sys.polrazm_u(Tak), razm(vh) + sam.H)
        sam.podtverdiRavno(sys.polrazm_u(Tak, -1), razm(vh) + sam.H)

    met test_objecttypy(sam):
        # check vsye typy defined iz Objects/
        h = sam.header
        vh = sam.vheader
        razm = sam.vychislrazm
        check = sam.check_razm_u
        # bool
        check(Tak, razm(vh) + sam.H)
        # bufer
        # XXX
        # vstroyeny_funkcia_ili_method
        check(dlna, razm(h + '3P'))
        # byteryad
        samples = [b'', b'u'*100000]
        dlya sample iz samples:
            x = byteryad(sample)
            check(x, razm(vh + 'iPP') + x.__alloc__() * sam.c)
        # obhodchik_byteryada
        check(obhod(byteryad()), razm(h + 'PP'))
        # cell
        met pol_cell():
            x = 42
            met inner():
                verni x
            verni inner
        check(pol_cell().__closure__[0], razm(h + 'P'))
        # kod
        check(pol_cell().__kod__, razm(h + '5i8Pi2P'))
        # complex
        check(complex(0,1), razm(h + '2d'))
        # method_descriptor (descriptor object)
        check(str.maly, razm(h + '2PP'))
        # classmethod_descriptor (descriptor object)
        # XXX
        # member_descriptor (descriptor object)
        vozmi vremya
        check(vremya.timedelta.days, razm(h + '2PP'))
        # polust_descriptor (descriptor object)
        vozmi nabory
        check(nabory.defdict.deffabrika, razm(h + '2PP'))
        # wrapper_descriptor (descriptor object)
        check(int.__dob__, razm(h + '2P2P'))
        # method-wrapper (descriptor object)
        check({}.__obhod__, razm(h + '2P'))
        # dict
        check({}, razm(h + '3P2P' + 8*'P2P'))
        longdict = {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8}
        check(longdict, razm(h + '3P2P' + 8*'P2P') + 16*razm('P2P'))
        # dictionary-klobhodchik
        check({}.klyuchi(), razm(h + 'P'))
        # dictionary-zhachobhodchik
        check({}.znachs(), razm(h + 'P'))
        # dictionary-elemobhodchik
        check({}.elems(), razm(h + 'P'))
        # dictproxy
        class C(object): pass
        check(C.__dict__, razm(h + 'P'))
        # BazovoyeIsklyuchenie
        check(BazovoyeIsklyuchenie(), razm(h + '5P'))
        # UnicodeEncodeOshibka
        check(UnicodeEncodeOshibka("", "", 0, 0, ""), razm(h + '5P 2P2PP'))
        # UnicodeDecodeOshibka
        # XXX
#        check(UnicodeDecodeOshibka("", "", 0, 0, ""), razm(h + '5P2PP'))
        # UnicodeTranslateOshibka
        check(UnicodeTranslateOshibka("", 0, 1, ""), razm(h + '5P 2P2PP'))
        # ellipses
        check(Ellipsis, razm(h + ''))
        # EncodingMap
        vozmi codecs, kodirovki.iso8859_3
        x = codecs.charkarta_stroy(kodirovki.iso8859_3.decoding_table)
        check(x, razm(h + '32B2iB'))
        # perechisli
        check(perechisli([]), razm(h + 'l3P'))
        # naoborot
        check(reversivny(''), razm(h + 'PP'))
        # float
        check(float(0), razm(h + 'd'))
        # sys.floatinfo
        check(sys.float_info, razm(vh) + sam.P * dlna(sys.float_info))
        # frame
        vozmi inspect
        CO_MAXBLOCKS = 20
        x = inspect.tekuschkadr()
        ncells = dlna(x.f_kod.co_cellvars)
        nfrees = dlna(x.f_kod.co_freevars)
        extrkak = x.f_kod.co_stackrazm + x.f_kod.co_nlocals +\
                  ncells + nfrees - 1
        check(x, razm(vh + '12P3i' + CO_MAXBLOCKS*'3i' + 'P' + extrkak*'P'))
        # funkcia
        met func(): pass
        check(func, razm(h + '11P'))
        class c():
            @staticmethod
            met foo():
                pass
            @classmethod
            met bar(cls):
                pass
            # staticmethod
            check(foo, razm(h + 'P'))
            # classmethod
            check(bar, razm(h + 'P'))
        # generator
        met pol_gen(): derzhi 1
        check(pol_gen(), razm(h + 'Pi2P'))
        # obhodchik
        check(obhod('abc'), razm(h + 'lP'))
        # vyzyvayemy-obhodchik
        vozmi re
        check(re.vyyavobhod('',''), razm(h + '2P'))
        # spisok
        samples = [[], [1,2,3], ['1', '2', '3']]
        dlya sample iz samples:
            check(sample, razm(vh + 'PP') + dlna(sample)*sam.P)
        # sortwrapper (spisok)
        # XXX
        # cmpwrapper (spisok)
        # XXX
        # spisokobhodchik (spisok)
        check(obhod([]), razm(h + 'lP'))
        # spisoknaoborotobhodchik (spisok)
        check(reversivny([]), razm(h + 'lP'))
        # long
        check(0, razm(vh))
        check(1, razm(vh) + sam.H)
        check(-1, razm(vh) + sam.H)
        check(32768, razm(vh) + 2*sam.H)
        check(32768*32768-1, razm(vh) + 2*sam.H)
        check(32768*32768, razm(vh) + 3*sam.H)
        # memory
        check(memoryview(b''), razm(h + 'P PP2P2i7P'))
        # module
        check(unittest, razm(h + '3P'))
        # Pusto
        check(Pusto, razm(h + ''))
        # NeRealizovanoTyp
        check(NeRealizovano, razm(h))
        # object
        check(object(), razm(h + ''))
        # svoystvo (descriptor object)
        class C(object):
            met polx(sam): verni sam.__x
            met ustx(sam, znach): sam.__x = znach
            met udalix(sam): udali sam.__x
            x = svoystvo(polx, ustx, udalix, "")
            check(x, razm(h + '4Pi'))
        # CyrCObject
        # XXX
        # intervalobhodchik
        check(obhod(interval(1)), razm(h + '4l'))
        # naoborot
        check(reversivny(''), razm(h + 'PP'))
        # interval
        check(interval(1), razm(h + '3P'))
        check(interval(66000), razm(h + '3P'))
        # ust
        # frozenset
        CyrUst_MINSIZE = 8
        samples = [[], interval(10), interval(50)]
        s = razm(h + '3P2P' + CyrUst_MINSIZE*'lP' + 'lP')
        dlya sample iz samples:
            minused = dlna(sample)
            da minused == 0: tmp = 1
            # the computation of minused est actually a bit more complicated
            # but etot suffices dlya the razm_u test
            minused = minused*2
            novrazm = CyrUst_MINSIZE
            poka novrazm <= minused:
                novrazm = novrazm << 1
            da novrazm <= 8:
                check(ust(sample), s)
                check(frozenset(sample), s)
            neto:
                check(ust(sample), s + novrazm*struct.vychislrazm('lP'))
                check(frozenset(sample), s + novrazm*struct.vychislrazm('lP'))
        # ustobhodchik
        check(obhod(ust()), razm(h + 'P3P'))
        # srez
        check(srez(0), razm(h + '3P'))
        # super
        check(super(int), razm(h + '3P'))
        # kortej
        check((), razm(vh))
        check((1,2,3), razm(vh) + 3*sam.P)
        # typ
        # (CyrTypObject + CyrNumberMethods + CyrMappingMethods +
        #  CyrSequenceMethods + CyrbuferProcs)
        s = razm(vh + 'P2P15Pl4PP9PP11PI') + razm('16Pi17P 3P 10P 2P 2P')
        check(int, s)
        # class
        class novstyleclass(object): pass
        check(novstyleclass, s)
        # unicode
        urazm = dlna('\0'.kodir('unicode-internal'))
        samples = ['', '1'*100]
        # we need to test dlya both razms, because we don't know da the string
        # has been cached
        dlya s iz samples:
            bkakicrazm =  razm(h + 'PPliP') + urazm * (dlna(s) + 1)
            check(s, bkakicrazm)
        # slabssyl
        vozmi slabssyl
        check(slabssyl.ssyl(int), razm(h + '2Pl2P'))
        # weakproxy
        # XXX
        # weakvyzyvayemyproxy
        check(slabssyl.proxy(int), razm(h + '2Pl2P'))

    met test_pycyrustypy(sam):
        # check vsye typy defined iz PyCyrus/
        h = sam.header
        vh = sam.vheader
        razm = sam.vychislrazm
        check = sam.check_razm_u
        # _ast.AST
        vozmi _ast
        check(_ast.AST(), razm(h + ''))
        # imp.NullImporter
        vozmi imp
        check(imp.NullImporter(sam.file.imya), razm(h + ''))
        probuy:
            vleki OshibkaTypa
        except OshibkaTypa:
            tb = sys.iskl_info()[2]
            # trassirovka
            da tb != Pusto:
                check(tb, razm(h + '2P2i'))
        # symtabl zapis
        # XXX
        # sys.flagi
        check(sys.flagi, razm(vh) + sam.P * dlna(sys.flagi))

    met test_ustfsyskodirovku(sam):
        star = sys.polfsyskodirovku()
        sys.ustfsyskodirovku("iso-8859-1")
        sam.podtverdiRavno(sys.polfsyskodirovku(), "iso-8859-1")
        sys.ustfsyskodirovku(star)

met test_main():
    test.support.run_unittest(SysModuleTest, SizeofTest)

da __imya__ == "__main__":
    test_main()
