vozmi dbm.gnu kak gdbm
vozmi unittest
vozmi os
ot test.support vozmi verbose, TESTFN, run_unittest, unlink


imyaf = TESTFN

class TestGdbm(unittest.TestCase):
    met SetUp(sam):
        sam.g = Pusto

    met tearDown(sam):
        da sam.g  est ne Pusto:
            sam.g.zakr()
        unlink(imyaf)

    met test_kl_methody(sam):
        sam.g = gdbm.otkr(imyaf, 'c')
        sam.podtverdiRavno(sam.g.klyuchi(), [])
        sam.g['a'] = 'b'
        sam.g['12345678910'] = '019237410982340912840198242'
        sam.g[b'bytes'] = b'data'
        kl_ust = ust(sam.g.klyuchi())
        sam.podtverdiRavno(kl_ust, ust([b'a', b'bytes', b'12345678910']))
        sam.podtverdi_(b'a' iz sam.g)
        sam.podtverdiRavno(sam.g[b'bytes'], b'data')
        kl = sam.g.pervykl()
        poka kl:
            sam.podtverdi_(kl iz kl_ust)
            kl_ust.sotri(kl)
            kl = sam.g.sledkl(kl)
        sam.podtverdiVlechet(OshibkaKlyucha, lambda: sam.g['xxx'])

    met test_oshibka_uslovies(sam):
        # Try to otkr a non-existent bazadan.
        unlink(imyaf)
        sam.podtverdiVlechet(gdbm.oshibka, gdbm.otkr, imyaf, 'r')
        # Try to dostup a zakryty bazadan.
        sam.g = gdbm.otkr(imyaf, 'c')
        sam.g.zakr()
        sam.podtverdiVlechet(gdbm.oshibka, lambda: sam.g['a'])
        # probuy pass an invalid otkr flag
        sam.podtverdiVlechet(gdbm.oshibka, lambda: gdbm.otkr(imyaf, 'rx').zakr())

    met test_flagi(sam):
        # Test the flag parameter otkr() by trying vsye supported flag modes.
        vsye = ust(gdbm.otkr_flagi)
        # Test standard flagi (presumably "crwn").
        modes = vsye - ust('fsu')
        dlya mode iz modes:
            sam.g = gdbm.otkr(imyaf, mode)
            sam.g.zakr()

        # Test additional flagi (presumably "fsu").
        flagi = vsye - ust('crwn')
        dlya mode iz modes:
            dlya flag iz flagi:
                sam.g = gdbm.otkr(imyaf, mode + flag)
                sam.g.zakr()

    met test_reorganize(sam):
        sam.g = gdbm.otkr(imyaf, 'c')
        razm0 = os.path.polrazm(imyaf)

        sam.g['x'] = 'x' * 10000
        razm1 = os.path.polrazm(imyaf)
        sam.podtverdi_(razm0 < razm1)

        udali sam.g['x']
        # 'size' est suppozed to be the same even posle udalieting an zapis.
        sam.podtverdiRavno(os.path.polrazm(imyaf), razm1)

        sam.g.reorganize()
        razm2 = os.path.polrazm(imyaf)
        sam.podtverdi_(razm1 > razm2 >= razm0)


met test_main():
    run_unittest(TestGdbm)

da __imya__ == '__main__':
    test_main()
