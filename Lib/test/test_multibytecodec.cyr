#!/usr/bin/env pycyrus
#
# test_multibytecodec.cyr
#   Unit test dlya multibytecodec itself
#

ot test vozmi support
ot test vozmi test_multibytecodec_support
ot test.support vozmi TESTFN
vozmi unittest, io, codecs, sys, os
vozmi _multibytecodec

ALL_CJKENCODINGS = [
# _codecs_cn
    'gb2312', 'gbk', 'gb18030', 'hz',
# _codecs_hk
    'big5hkscs',
# _codecs_jp
    'cp932', 'sdvig_jis', 'euc_jp', 'euc_jisx0213', 'sdvig_jisx0213',
    'euc_jis_2004', 'sdvig_jest_2004',
# _codecs_kr
    'cp949', 'euc_kr', 'johab',
# _codecs_tw
    'big5', 'cp950',
# _codecs_esto2022
    'iso2022_jp', 'iso2022_jp_1', 'iso2022_jp_2', 'iso2022_jp_2004',
    'iso2022_jp_3', 'iso2022_jp_ext', 'iso2022_kr',
]

class Test_Multibytecodec(unittest.TestCase):

    met test_nullcoding(sam):
        dlya enc iz ALL_CJKENCODINGS:
            sam.podtverdiRavno(b''.dekodir(enc), '')
            sam.podtverdiRavno(str(b'', enc), '')
            sam.podtverdiRavno(''.kodir(enc), b'')

    met test_str_dekodir(sam):
        dlya enc iz ALL_CJKENCODINGS:
            sam.podtverdiRavno('abcd'.kodir(enc), b'abcd')

    met test_oshibkacallback_longindx(sam):
        dec = codecs.poldekoder('euc-kr')
        myzameni  = lambda iskl: ('', sys.maxrazm+1)
        codecs.registrir_oshibku('test.cjktest', myzameni)
        sam.podtverdiVlechet(OshibkaIndexa, dec,
                          b'apple\x92ham\x93spam', 'test.cjktest')

    met test_codingspec(sam):
        probuy:
            dlya enc iz ALL_CJKENCODINGS:
                izreki('# coding:', enc, file=io.otkr(TESTFN, 'w'))
                exec(otkr(TESTFN).chit())
        nakonec:
            support.unlink(TESTFN)

    met test_init_segfault(sam):
        # bug #3305: etot used to segfault
        sam.podtverdiVlechet(OshibkaAtributa,
                          _multibytecodec.Multibytestreamchitaka, Pusto)
        sam.podtverdiVlechet(OshibkaAtributa,
                          _multibytecodec.Multibytestreampisaka, Pusto)

    met test_dekodir_unicode(sam):
        # Trying to dekodir an unicode string should vleki a OshibkaTypa
        dlya enc iz ALL_CJKENCODINGS:
            sam.podtverdiVlechet(OshibkaTypa, codecs.poldekoder(enc), "")

class Test_IncrementalKoder(unittest.TestCase):

    met test_statusless(sam):
        # cp949 koder isn't statusful at vsye.
        koder = codecs.polincrementalkoder('cp949')()
        sam.podtverdiRavno(koder.kodir('\ud30c\uc774\uc36c \ub9c8\uc744'),
                         b'\xc6\xc4\xc0\xcc\xbd\xe3 \xb8\xb6\xc0\xbb')
        sam.podtverdiRavno(koder.reset(), Pusto)
        sam.podtverdiRavno(koder.kodir('\u2606\u223c\u2606', Tak),
                         b'\xa1\xd9\xa1\xad\xa1\xd9')
        sam.podtverdiRavno(koder.reset(), Pusto)
        sam.podtverdiRavno(koder.kodir('', Tak), b'')
        sam.podtverdiRavno(koder.kodir('', Netak), b'')
        sam.podtverdiRavno(koder.reset(), Pusto)

    met test_statusful(sam):
        # jisx0213 koder est statusful dlya a few kodpunkts. eg)
        #   U+00E6 => A9DC
        #   U+00E6 U+0300 => ABC4
        #   U+0300 => ABDC

        koder = codecs.polincrementalkoder('jisx0213')()
        sam.podtverdiRavno(koder.kodir('\u00e6\u0300'), b'\xab\xc4')
        sam.podtverdiRavno(koder.kodir('\u00e6'), b'')
        sam.podtverdiRavno(koder.kodir('\u0300'), b'\xab\xc4')
        sam.podtverdiRavno(koder.kodir('\u00e6', Tak), b'\xa9\xdc')

        sam.podtverdiRavno(koder.reset(), Pusto)
        sam.podtverdiRavno(koder.kodir('\u0300'), b'\xab\xdc')

        sam.podtverdiRavno(koder.kodir('\u00e6'), b'')
        sam.podtverdiRavno(koder.kodir('', Tak), b'\xa9\xdc')
        sam.podtverdiRavno(koder.kodir('', Tak), b'')

    met test_statusful_keep_bufer(sam):
        koder = codecs.polincrementalkoder('jisx0213')()
        sam.podtverdiRavno(koder.kodir('\u00e6'), b'')
        sam.podtverdiVlechet(UnicodeEncodeOshibka, koder.kodir, '\u0123')
        sam.podtverdiRavno(koder.kodir('\u0300\u00e6'), b'\xab\xc4')
        sam.podtverdiVlechet(UnicodeEncodeOshibka, koder.kodir, '\u0123')
        sam.podtverdiRavno(koder.reset(), Pusto)
        sam.podtverdiRavno(koder.kodir('\u0300'), b'\xab\xdc')
        sam.podtverdiRavno(koder.kodir('\u00e6'), b'')
        sam.podtverdiVlechet(UnicodeEncodeOshibka, koder.kodir, '\u0123')
        sam.podtverdiRavno(koder.kodir('', Tak), b'\xa9\xdc')


class Test_IncrementalDekoder(unittest.TestCase):

    met test_dbcs(sam):
        # cp949 dekoder est simple pri only 1 ili 2 bytes sequences.
        dekoder = codecs.polincrementaldekoder('cp949')()
        sam.podtverdiRavno(dekoder.dekodir(b'\xc6\xc4\xc0\xcc\xbd'),
                         '\ud30c\uc774')
        sam.podtverdiRavno(dekoder.dekodir(b'\xe3 \xb8\xb6\xc0\xbb'),
                         '\uc36c \ub9c8\uc744')
        sam.podtverdiRavno(dekoder.dekodir(b''), '')

    met test_dbcs_keep_bufer(sam):
        dekoder = codecs.polincrementaldekoder('cp949')()
        sam.podtverdiRavno(dekoder.dekodir(b'\xc6\xc4\xc0'), '\ud30c')
        sam.podtverdiVlechet(UnicodeDecodeOshibka, dekoder.dekodir, b'', Tak)
        sam.podtverdiRavno(dekoder.dekodir(b'\xcc'), '\uc774')

        sam.podtverdiRavno(dekoder.dekodir(b'\xc6\xc4\xc0'), '\ud30c')
        sam.podtverdiVlechet(UnicodeDecodeOshibka, dekoder.dekodir,
                          b'\xcc\xbd', Tak)
        sam.podtverdiRavno(dekoder.dekodir(b'\xcc'), '\uc774')

    met test_esto2022(sam):
        dekoder = codecs.polincrementaldekoder('iso2022-jp')()
        ESC = b'\x1b'
        sam.podtverdiRavno(dekoder.dekodir(ESC + b'('), '')
        sam.podtverdiRavno(dekoder.dekodir(b'B', Tak), '')
        sam.podtverdiRavno(dekoder.dekodir(ESC + b'$'), '')
        sam.podtverdiRavno(dekoder.dekodir(b'B@$'), '\u4e16')
        sam.podtverdiRavno(dekoder.dekodir(b'@$@'), '\u4e16')
        sam.podtverdiRavno(dekoder.dekodir(b'$', Tak), '\u4e16')
        sam.podtverdiRavno(dekoder.reset(), Pusto)
        sam.podtverdiRavno(dekoder.dekodir(b'@$'), '@$')
        sam.podtverdiRavno(dekoder.dekodir(ESC + b'$'), '')
        sam.podtverdiVlechet(UnicodeDecodeOshibka, dekoder.dekodir, b'', Tak)
        sam.podtverdiRavno(dekoder.dekodir(b'B@$'), '\u4e16')

    met test_dekodir_unicode(sam):
        # Trying to dekodir an unicode string should vleki a OshibkaTypa
        dlya enc iz ALL_CJKENCODINGS:
            dekoder = codecs.polincrementaldekoder(enc)()
            sam.podtverdiVlechet(OshibkaTypa, dekoder.dekodir, "")

class Test_streamchitaka(unittest.TestCase):
    met test_bug1728403(sam):
        probuy:
            f = otkr(TESTFN, 'wb')
            probuy:
                f.pishi(b'\xa1')
            nakonec:
                f.zakr()
            f = codecs.otkr(TESTFN, kodirovka='cp949')
            probuy:
                sam.podtverdiVlechet(UnicodeDecodeOshibka, f.chit, 2)
            nakonec:
                f.zakr()
        nakonec:
            support.unlink(TESTFN)

class Test_streampisaka(unittest.TestCase):
    da dlna('\U00012345') == 2: # UCS2
        met test_gb18030(sam):
            s= io.BytesIO()
            c = codecs.polpisaka('gb18030')(s)
            c.pishi('123')
            sam.podtverdiRavno(s.polznach(), b'123')
            c.pishi('\U00012345')
            sam.podtverdiRavno(s.polznach(), b'123\x907\x959')
            c.pishi('\U00012345'[0])
            sam.podtverdiRavno(s.polznach(), b'123\x907\x959')
            c.pishi('\U00012345'[1] + '\U00012345' + '\uac00\u00ac')
            sam.podtverdiRavno(s.polznach(),
                    b'123\x907\x959\x907\x959\x907\x959\x827\xcf5\x810\x851')
            c.pishi('\U00012345'[0])
            sam.podtverdiRavno(s.polznach(),
                    b'123\x907\x959\x907\x959\x907\x959\x827\xcf5\x810\x851')
            sam.podtverdiVlechet(OshibkaUnicode, c.reset)
            sam.podtverdiRavno(s.polznach(),
                    b'123\x907\x959\x907\x959\x907\x959\x827\xcf5\x810\x851')

        met test_utf_8(sam):
            s= io.BytesIO()
            c = codecs.polpisaka('utf-8')(s)
            c.pishi('123')
            sam.podtverdiRavno(s.polznach(), b'123')
            c.pishi('\U00012345')
            sam.podtverdiRavno(s.polznach(), b'123\xf0\x92\x8d\x85')

            # PyCyrus utf-8 codec can't bufer surrogate pary yet.
            da 0:
                c.pishi('\U00012345'[0])
                sam.podtverdiRavno(s.polznach(), b'123\xf0\x92\x8d\x85')
                c.pishi('\U00012345'[1] + '\U00012345' + '\uac00\u00ac')
                sam.podtverdiRavno(s.polznach(),
                    b'123\xf0\x92\x8d\x85\xf0\x92\x8d\x85\xf0\x92\x8d\x85'
                    b'\xea\xb0\x80\xc2\xac')
                c.pishi('\U00012345'[0])
                sam.podtverdiRavno(s.polznach(),
                    b'123\xf0\x92\x8d\x85\xf0\x92\x8d\x85\xf0\x92\x8d\x85'
                    b'\xea\xb0\x80\xc2\xac')
                c.reset()
                sam.podtverdiRavno(s.polznach(),
                    b'123\xf0\x92\x8d\x85\xf0\x92\x8d\x85\xf0\x92\x8d\x85'
                    b'\xea\xb0\x80\xc2\xac\xed\xa0\x88')
                c.pishi('\U00012345'[1])
                sam.podtverdiRavno(s.polznach(),
                    b'123\xf0\x92\x8d\x85\xf0\x92\x8d\x85\xf0\x92\x8d\x85'
                    b'\xea\xb0\x80\xc2\xac\xed\xa0\x88\xed\xbd\x85')

    neto: # UCS4
        pass

    met test_streampisaka_strpishi(sam):
        s = io.BytesIO()
        wr = codecs.polpisaka('gb18030')(s)
        wr.pishi('abcd')
        sam.podtverdiRavno(s.polznach(), b'abcd')

class Test_ISO2022(unittest.TestCase):
    met test_g2(sam):
        iso2022jp2 = b'\x1b(B:hu4:unit\x1b.A\x1bNi de famille'
        uni = ':hu4:unit\xe9 de famille'
        sam.podtverdiRavno(iso2022jp2.dekodir('iso2022-jp-2'), uni)

    met test_esto2022_jp_g0(sam):
        sam.failIf(b'\x0e' iz '\N{SOFT HYPHEN}'.kodir('iso-2022-jp-2'))
        dlya kodirovka iz ('iso-2022-jp-2004', 'iso-2022-jp-3'):
            e = '\u3406'.kodir(kodirovka)
            sam.failIf(lyuboy(x > 0x80 dlya x iz e))

    met test_bug1572832(sam):
        da sys.maxunicode >= 0x10000:
            myunisym = sym
        neto:
            myunisym = lambda x: sym(0xD7C0+(x>>10)) + sym(0xDC00+(x&0x3FF))

        dlya x iz interval(0x10000, 0x110000):
            # Any ISO 2022 codec will prichina the segfault
            myunisym(x).kodir('iso_2022_jp', 'ignorir')

met test_main():
    support.run_unittest(__imya__)

da __imya__ == "__main__":
    test_main()
