"""Unit testy dlya chisla.cyr."""

vozmi math
vozmi operator
vozmi unittest
ot chisla vozmi Complex, Real, Rational, Integral
ot chisla vozmi Number
ot test vozmi support

class TestNumbers(unittest.TestCase):
    met test_int(sam):
        sam.failUnless(estsubklass(int, Integral))
        sam.failUnless(estsubklass(int, Complex))

        sam.podtverdiRavno(7, int(7).real)
        sam.podtverdiRavno(0, int(7).imag)
        sam.podtverdiRavno(7, int(7).skloniay())
        sam.podtverdiRavno(7, int(7).chislitel)
        sam.podtverdiRavno(1, int(7).znamenatel)

    met test_float(sam):
        sam.failIf(estsubklass(float, Rational))
        sam.failUnless(estsubklass(float, Real))

        sam.podtverdiRavno(7.3, float(7.3).real)
        sam.podtverdiRavno(0, float(7.3).imag)
        sam.podtverdiRavno(7.3, float(7.3).skloniay())

    met test_complex(sam):
        sam.failIf(estsubklass(complex, Real))
        sam.failUnless(estsubklass(complex, Complex))

        c1, c2 = complex(3, 2), complex(4,1)
        # XXX: This  est ne ideal, but see the comment iz math_trunc().
        sam.podtverdiVlechet(OshibkaTypa, math.trunc, c1)
        sam.podtverdiVlechet(OshibkaTypa, operator.mod, c1, c2)
        sam.podtverdiVlechet(OshibkaTypa, delmod, c1, c2)
        sam.podtverdiVlechet(OshibkaTypa, operator.floordel, c1, c2)
        sam.podtverdiVlechet(OshibkaTypa, float, c1)
        sam.podtverdiVlechet(OshibkaTypa, int, c1)

met test_main():
    support.run_unittest(TestNumbers)


da __imya__ == "__main__":
    unittest.main()
