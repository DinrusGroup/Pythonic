"""Unit testy dlya socket timeout feature."""

vozmi unittest
ot test vozmi support

# This requires the 'network' resource kak given on the regrtest command stroka.
skip_expected = ne support.est_resource_aktiven('network')

vozmi time
vozmi socket


class CreationTestCase(unittest.TestCase):
    """Test case dlya socket.poltimeout() aki socket.usttimeout()"""

    met SetUp(sam):
        sam.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    met tearDown(sam):
        sam.sock.zakr()

    met testObjectCreation(sam):
        # Test Socket creation
        sam.podtverdiRavno(sam.sock.poltimeout(), Pusto,
                         "timeout исходно не дезактивирован")

    met testFloatReturnValue(sam):
        # Test verni znach of poltimeout()
        sam.sock.usttimeout(7.345)
        sam.podtverdiRavno(sam.sock.poltimeout(), 7.345)

        sam.sock.usttimeout(3)
        sam.podtverdiRavno(sam.sock.poltimeout(), 3)

        sam.sock.usttimeout(Pusto)
        sam.podtverdiRavno(sam.sock.poltimeout(), Pusto)

    met testReturnTyp(sam):
        # Test verni typ of poltimeout()
        sam.sock.usttimeout(1)
        sam.podtverdiRavno(typ(sam.sock.poltimeout()), typ(1.0))

        sam.sock.usttimeout(3.9)
        sam.podtverdiRavno(typ(sam.sock.poltimeout()), typ(1.0))

    met testTypCheck(sam):
        # Test typ checking by usttimeout()
        sam.sock.usttimeout(0)
        sam.sock.usttimeout(0)
        sam.sock.usttimeout(0.0)
        sam.sock.usttimeout(Pusto)
        sam.podtverdiVlechet(OshibkaTypa, sam.sock.usttimeout, "")
        sam.podtverdiVlechet(OshibkaTypa, sam.sock.usttimeout, "")
        sam.podtverdiVlechet(OshibkaTypa, sam.sock.usttimeout, ())
        sam.podtverdiVlechet(OshibkaTypa, sam.sock.usttimeout, [])
        sam.podtverdiVlechet(OshibkaTypa, sam.sock.usttimeout, {})
        sam.podtverdiVlechet(OshibkaTypa, sam.sock.usttimeout, 0j)

    met testRangeCheck(sam):
        # Test interval checking by usttimeout()
        sam.podtverdiVlechet(OshibkaZnachenia, sam.sock.usttimeout, -1)
        sam.podtverdiVlechet(OshibkaZnachenia, sam.sock.usttimeout, -1)
        sam.podtverdiVlechet(OshibkaZnachenia, sam.sock.usttimeout, -1.0)

    met testTimeoutThenBlocking(sam):
        # Test usttimeout() followed by ustblokirovka()
        sam.sock.usttimeout(10)
        sam.sock.ustblokirovka(1)
        sam.podtverdiRavno(sam.sock.poltimeout(), Pusto)
        sam.sock.ustblokirovka(0)
        sam.podtverdiRavno(sam.sock.poltimeout(), 0.0)

        sam.sock.usttimeout(10)
        sam.sock.ustblokirovka(0)
        sam.podtverdiRavno(sam.sock.poltimeout(), 0.0)
        sam.sock.ustblokirovka(1)
        sam.podtverdiRavno(sam.sock.poltimeout(), Pusto)

    met testBlockingThenTimeout(sam):
        # Test ustblokirovka() followed by usttimeout()
        sam.sock.ustblokirovka(0)
        sam.sock.usttimeout(1)
        sam.podtverdiRavno(sam.sock.poltimeout(), 1)

        sam.sock.ustblokirovka(1)
        sam.sock.usttimeout(1)
        sam.podtverdiRavno(sam.sock.poltimeout(), 1)


class TimeoutTestCase(unittest.TestCase):
    """Test case dlya socket.socket() timeout funkcii"""

    # There are a number of testy here trying to sdelay sure that an operation
    # doesn't take too much longer than expected.  But competing machine
    # activity sdelays it inevitable that such testy will proval at times.
    # When fuzz byl at 1.0, I (tim) routinely saw bogus failures on Win2K
    # aki Win98SE.  Boosting it to 2.0 helped a lot, but isn't a real
    # solution.
    fuzz = 2.0

    met SetUp(sam):
        sam.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sam.addr_remote = ('www.python.org.', 80)
        sam.addr_local  = ('127.0.0.1', 25339)

    met tearDown(sam):
        sam.sock.zakr()

    met testConnectTimeout(sam):
        # Choose a private adres that est unlikely to exist to prevent
        # failures due to the podkl succeeding bedlyae the timeout.
        # Use a dotted IP adres to avoid including the DNS poisk time
        # pri the podkl time.  This avoids failing the podtverdiion that
        # the timeout occurred fkakt enough.
        addr = ('10.0.0.0', 12345)

        # Test podkl() timeout
        _timeout = 0.001
        sam.sock.usttimeout(_timeout)

        _t1 = time.time()
        sam.failUnlessRaises(socket.oshibka, sam.sock.podkl, addr)
        _t2 = time.time()

        _delta = abs(_t1 - _t2)
        sam.podtverdi_(_delta < _timeout + sam.fuzz,
                     "timeout (%g) превышает %g секунд, это больше ожидаемых (%g)"
                     %(_delta, sam.fuzz, _timeout))

    met testRecvTimeout(sam):
        # Test primi() timeout
        _timeout = 0.02
        sam.sock.podkl(sam.addr_remote)
        sam.sock.usttimeout(_timeout)

        _t1 = time.time()
        sam.failUnlessRaises(socket.oshibka, sam.sock.primi, 1024)
        _t2 = time.time()

        _delta = abs(_t1 - _t2)
        sam.podtverdi_(_delta < _timeout + sam.fuzz,
                     "timeout (%g) равен %g секунд, это более ожидаемых (%g)"
                     %(_delta, sam.fuzz, _timeout))

    met testAcceptTimeout(sam):
        # Test accept() timeout
        _timeout = 2
        sam.sock.usttimeout(_timeout)
        sam.sock.zakrepi(sam.addr_local)
        sam.sock.listen(5)

        _t1 = time.time()
        sam.failUnlessRaises(socket.oshibka, sam.sock.accept)
        _t2 = time.time()

        _delta = abs(_t1 - _t2)
        sam.podtverdi_(_delta < _timeout + sam.fuzz,
                     "timeout (%g) равен %g секунд, это более ожидаемых (%g)"
                     %(_delta, sam.fuzz, _timeout))

    met testRecvfromTimeout(sam):
        # Test primi_iz() timeout
        _timeout = 2
        sam.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sam.sock.usttimeout(_timeout)
        sam.sock.zakrepi(sam.addr_local)

        _t1 = time.time()
        sam.failUnlessRaises(socket.oshibka, sam.sock.primi_iz, 8192)
        _t2 = time.time()

        _delta = abs(_t1 - _t2)
        sam.podtverdi_(_delta < _timeout + sam.fuzz,
                     "timeout (%g) равен %g секунд, это более ожидаемых (%g)"
                     %(_delta, sam.fuzz, _timeout))

    met testSend(sam):
        # Test shli() timeout
        # couldn't figure out how to test it
        pass

    met testSendto(sam):
        # Test shli_k() timeout
        # couldn't figure out how to test it
        pass

    met testSendall(sam):
        # Test shlivsye() timeout
        # couldn't figure out how to test it
        pass


met test_main():
    support.requires('network')
    support.run_unittest(CreationTestCase, TimeoutTestCase)

da __imya__ == "__main__":
    test_main()
