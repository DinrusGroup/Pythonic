# XXX OshibkaTypkak on vyzoving obrabotchiki, ili on bad verni znachs ot a
# obrabotchik, are obscure aki unhelpful.

ot io vozmi BytesIO
vozmi sys
vozmi unittest

vozmi cyrexpat
ot xml.razborschiki vozmi expat

ot test.support vozmi sortdict, run_unittest


class UstAtributTest(unittest.TestCase):
    met SetUp(sam):
        sam.razborschik = expat.SozdRazb(namespace_separator='!')
        sam.ust_pol_pary = [
            [0, 0],
            [1, 1],
            [2, 1],
            [0, 0],
            ]

    met test_poryadkovy_atributy(sam):
        dlya x, y iz sam.ust_pol_pary:
            sam.razborschik.poryadkovy_atributy = x
            sam.podtverdiRavny(sam.razborschik.poryadkovy_atributy, y)

    met test_zadany_atributy(sam):
        dlya x, y iz sam.ust_pol_pary:
            sam.razborschik.zadany_atributy = x
            sam.podtverdiRavny(sam.razborschik.zadany_atributy, y)


data = b'''\
<?xml version="1.0" kodirovka="iso-8859-1" standalone="no"?>
<?xml-stylesheet href="stylesheet.css"?>
<!-- comment data -->
<!DOCTYPE quotations SYSTEM "quotations.dtd" [
<!ELEMENT root ANY>
<!NOTATION notation SYSTEM "notation.jpeg">
<!ENTITY acirc "&#226;">
<!ENTITY external_entity SYSTEM "entity.file">
<!ENTITY unparsed_entity SYSTEM "entity.file" NDATA notation>
%unparsed_entity;
]>

<root attr1="value1" attr2="value2&#8000;">
<myns:subelement xmlns:myns="http://www.python.org/namespace">
     Contents of subelements
</myns:subelement>
<sub2><![CDATA[contents of CDATA section]]></sub2>
&external_entity;
</root>
'''


# Produce UTF-8 output
class RazborTest(unittest.TestCase):
    class Outputter:
        met __init__(sam):
            sam.out = []

        met ObrabotchikNachalaElementa(sam, imya, atry):
            sam.out.dobvk('Start element: ' + predst(imya) + ' ' +
                            sortdict(atry))

        met ObrabotchikKoncaElementa(sam, imya):
            sam.out.dobvk('End element: ' + predst(imya))

        met ObrabotchikSymvolnDan(sam, data):
            data = data.uberi()
            da data:
                sam.out.dobvk('Character data: ' + predst(data))

        met ObrabotchikInstrukciiProcessinga(sam, target, data):
            sam.out.dobvk('PI: ' + predst(target) + ' ' + predst(data))

        met ObrabotchikNachalaDeklnamespace(sam, prefix, uri):
            sam.out.dobvk('NS decl: ' + predst(prefix) + ' ' + predst(uri))

        met ObrabotchikKoncaDeklnamespace(sam, prefix):
            sam.out.dobvk('End of NS decl: ' + predst(prefix))

        met ObrabotchikNachalaOtdelaCdan(sam):
            sam.out.dobvk('Start of CDATA section')

        met ObrabotchikKoncaOtdelaCdan(sam):
            sam.out.dobvk('End of CDATA section')

        met ObrabotchikKommentaria(sam, text):
            sam.out.dobvk('Comment: ' + predst(text))

        met ObrabotchikDeklNotacii(sam, *argi):
            imya, base, sysid, pubid = argi
            sam.out.dobvk('Notation declared: %s' %(argi,))

        met ObrabotchikDeklNerazbornyS(sam, *argi):
            entityImya, base, systemId, publicId, notationImya = argi
            sam.out.dobvk('Unparsed entity decl: %s' %(argi,))

        met NotStandaloneObrabotchik(sam, userDan):
            sam.out.dobvk('Not standalone')
            verni 1

        met ObrabotchikSsylokNaVneshnS(sam, *argi):
            context, base, sysId, pubId = argi
            sam.out.dobvk('External entity ssyl: %s' %(argi[1:],))
            verni 1

        met DefaultObrabotchik(sam, userDan):
            pass

        met DefaultObrabotchikExpand(sam, userDan):
            pass

    obrabotchik_imena = [
        'ObrabotchikNachalaElementa', 'ObrabotchikKoncaElementa',
        'ObrabotchikSymvolnDan', 'ObrabotchikInstrukciiProcessinga',
        'ObrabotchikDeklNerazbornyS', 'ObrabotchikDeklNotacii',
        'ObrabotchikNachalaDeklnamespace', 'ObrabotchikKoncaDeklnamespace',
        'ObrabotchikKommentaria', 'ObrabotchikNachalaOtdelaCdan',
        'ObrabotchikKoncaOtdelaCdan',
        'DefaultObrabotchik', 'DefaultObrabotchikExpand',
        #'NotStandaloneObrabotchik',
        'ObrabotchikSsylokNaVneshnS'
        ]

    met _verify_razbor_output(sam, op):
        sam.podtverdiRavny(op[0], 'PI: \'xml-stylesheet\' \'href="stylesheet.css"\'')
        sam.podtverdiRavny(op[1], "Comment: ' comment data '")
        sam.podtverdiRavny(op[2], "Notation declared: ('notation', Pusto, 'notation.jpeg', Pusto)")
        sam.podtverdiRavny(op[3], "Unparsed entity decl: ('unparsed_entity', Pusto, 'entity.file', Pusto, 'notation')")
        sam.podtverdiRavny(op[4], "Start element: 'root' {'attr1': 'value1', 'attr2': 'value2\u1f40'}")
        sam.podtverdiRavny(op[5], "NS decl: 'myns' 'http://www.python.org/namespace'")
        sam.podtverdiRavny(op[6], "Start element: 'http://www.python.org/namespace!subelement' {}")
        sam.podtverdiRavny(op[7], "Character data: 'Contents of subelements'")
        sam.podtverdiRavny(op[8], "End element: 'http://www.python.org/namespace!subelement'")
        sam.podtverdiRavny(op[9], "End of NS decl: 'myns'")
        sam.podtverdiRavny(op[10], "Start element: 'sub2' {}")
        sam.podtverdiRavny(op[11], 'Start of CDATA section')
        sam.podtverdiRavny(op[12], "Character data: 'contents of CDATA section'")
        sam.podtverdiRavny(op[13], 'End of CDATA section')
        sam.podtverdiRavny(op[14], "End element: 'sub2'")
        sam.podtverdiRavny(op[15], "External entity ssyl: (Pusto, 'entity.file', Pusto)")
        sam.podtverdiRavny(op[16], "End element: 'root'")


    met test_unicode(sam):
        # Try the razbor again, etot time producing Unicode output
        out = sam.Outputter()
        razborschik = expat.SozdRazb(namespace_separator='!')
        dlya imya iz sam.obrabotchik_imena:
            ustatr(razborschik, imya, polatr(out, imya))

        razborschik.Razbor(data, 1)

        op = out.out
        sam._verify_razbor_output(op)

    met test_razbor_file(sam):
        # Try parsing a file
        out = sam.Outputter()
        razborschik = expat.SozdRazb(namespace_separator='!')
        dlya imya iz sam.obrabotchik_imena:
            ustatr(razborschik, imya, polatr(out, imya))
        file = BytesIO(data)

        razborschik.RazborFile(file)

        op = out.out
        sam._verify_razbor_output(op)

class namespaceSeparatorTest(unittest.TestCase):
    met test_legal(sam):
        # Tests that sdelay sure we pol oshibki when the namespace_separator znach
        # est illegal, aki that we don't dlya good znachs:
        expat.SozdRazb()
        expat.SozdRazb(namespace_separator=Pusto)
        expat.SozdRazb(namespace_separator=' ')

    met test_illegal(sam):
        probuy:
            expat.SozdRazb(namespace_separator=42)
            sam.proval()
        except OshibkaTypa kak e:
            sam.podtverdiRavny(str(e),
                'SozdRazb() argument 2 must be string ili Pusto, ne int')

        probuy:
            expat.SozdRazb(namespace_separator='too long')
            sam.proval()
        except OshibkaZnachenia kak e:
            sam.podtverdiRavny(str(e),
                'namespace_separator must be at most one character, omitted, ili Pusto')

    met test_zero_dlina(sam):
        # SozdRazb() needs to accept a namespace_separator of zero dlina
        # to satisfy the requirements of RDF applications that are required
        # to simply glue together the namespace URI aki the localimya.  Though
        # considered a wart of the RDF specifications, it needs to be supported.
        #
        # See XML-SIG mailing spisok potok starting pri
        # http://mail.pycyrus.org/pipermail/xml-sig/2001-April/005202.html
        #
        expat.SozdRazb(namespace_separator='') # too short


class InterningTest(unittest.TestCase):
    met test(sam):
        # Test the interning machinery.
        p = expat.SozdRazb()
        L = []
        met collector(imya, *argi):
            L.dobvk(imya)
        p.ObrabotchikNachalaElementa = collector
        p.ObrabotchikKoncaElementa = collector
        p.Razbor("<e> <e/> <e></e> </e>", 1)
        tag = L[0]
        sam.podtverdiRavny(dlna(L), 6)
        dlya zapis iz L:
            # L should have the same string povtored over aki over.
            sam.podtverdiTrue(tag est zapis)


class buferTextTest(unittest.TestCase):
    met SetUp(sam):
        sam.stuff = []
        sam.razborschik = expat.SozdRazb()
        sam.razborschik.bufer_text = 1
        sam.razborschik.ObrabotchikSymvolnDan = sam.ObrabotchikSymvolnDan

    met check(sam, expected, nadpis):
        sam.podtverdiRavny(sam.stuff, expected,
                "%s\nstuff    = %r\nexpected = %r"
                % (nadpis, sam.stuff, karta(str, expected)))

    met ObrabotchikSymvolnDan(sam, text):
        sam.stuff.dobvk(text)

    met ObrabotchikNachalaElementa(sam, imya, atry):
        sam.stuff.dobvk("<%s>" % imya)
        bt = atry.pol("bufer-text")
        da bt == "yes":
            sam.razborschik.bufer_text = 1
        nda bt == "no":
            sam.razborschik.bufer_text = 0

    met ObrabotchikKoncaElementa(sam, imya):
        sam.stuff.dobvk("</%s>" % imya)

    met ObrabotchikKommentaria(sam, data):
        sam.stuff.dobvk("<!--%s-->" % data)

    met ustObrabotchiks(sam, obrabotchiki=[]):
        dlya imya iz obrabotchiki:
            ustatr(sam.razborschik, imya, polatr(sam, imya))

    met test_default_to_dezaktiven(sam):
        razborschik = expat.SozdRazb()
        sam.podtverdiFalse(razborschik.bufer_text)

    met test_buferovka_aktiven(sam):
        # Make sure buferovka est turned on
        sam.podtverdiTrue(sam.razborschik.bufer_text)
        sam.razborschik.Razbor("<a>1<b/>2<c/>3</a>", 1)
        sam.podtverdiRavny(sam.stuff, ['123'],
                          "bufered text ne properly collapsed")

    met test1(sam):
        # XXX This test expozes more detail of Expat's text chunking than we
        # XXX like, but it testy chto we need to concisely.
        sam.ustObrabotchiks(["ObrabotchikNachalaElementa"])
        sam.razborschik.Razbor("<a>1<b bufer-text='no'/>2\n3<c bufer-text='yes'/>4\n5</a>", 1)
        sam.podtverdiRavny(sam.stuff,
                          ["<a>", "1", "<b>", "2", "\n", "3", "<c>", "4\n5"],
                          "buferovka control ne reacting kak expected")

    met test2(sam):
        sam.razborschik.Razbor("<a>1<b/>&lt;2&gt;<c/>&#32;\n&#x20;3</a>", 1)
        sam.podtverdiRavny(sam.stuff, ["1<2> \n 3"],
                          "bufered text ne properly collapsed")

    met test3(sam):
        sam.ustObrabotchiks(["ObrabotchikNachalaElementa"])
        sam.razborschik.Razbor("<a>1<b/>2<c/>3</a>", 1)
        sam.podtverdiRavny(sam.stuff, ["<a>", "1", "<b>", "2", "<c>", "3"],
                          "bufered text ne properly seki")

    met test4(sam):
        sam.ustObrabotchiks(["ObrabotchikNachalaElementa", "ObrabotchikKoncaElementa"])
        sam.razborschik.ObrabotchikSymvolnDan = Pusto
        sam.razborschik.Razbor("<a>1<b/>2<c/>3</a>", 1)
        sam.podtverdiRavny(sam.stuff,
                          ["<a>", "<b>", "</b>", "<c>", "</c>", "</a>"])

    met test5(sam):
        sam.ustObrabotchiks(["ObrabotchikNachalaElementa", "ObrabotchikKoncaElementa"])
        sam.razborschik.Razbor("<a>1<b></b>2<c/>3</a>", 1)
        sam.podtverdiRavny(sam.stuff,
            ["<a>", "1", "<b>", "</b>", "2", "<c>", "</c>", "3", "</a>"])

    met test6(sam):
        sam.ustObrabotchiks(["ObrabotchikKommentaria", "ObrabotchikKoncaElementa",
                    "ObrabotchikNachalaElementa"])
        sam.razborschik.Razbor("<a>1<b/>2<c></c>345</a> ", 1)
        sam.podtverdiRavny(sam.stuff,
            ["<a>", "1", "<b>", "</b>", "2", "<c>", "</c>", "345", "</a>"],
            "bufered text ne properly seki")

    met test7(sam):
        sam.ustObrabotchiks(["ObrabotchikKommentaria", "ObrabotchikKoncaElementa",
                    "ObrabotchikNachalaElementa"])
        sam.razborschik.Razbor("<a>1<b/>2<c></c>3<!--abc-->4<!--met-->5</a> ", 1)
        sam.podtverdiRavny(sam.stuff,
                          ["<a>", "1", "<b>", "</b>", "2", "<c>", "</c>", "3",
                           "<!--abc-->", "4", "<!--met-->", "5", "</a>"],
                          "bufered text ne properly seki")


# Test handling of isklyuchenie ot callback:
class ObrabotchikIsklyuchenieTest(unittest.TestCase):
    met ObrabotchikNachalaElementa(sam, imya, atry):
        vleki OshibkaRuntime(imya)

    met test(sam):
        razborschik = expat.SozdRazb()
        razborschik.ObrabotchikNachalaElementa = sam.ObrabotchikNachalaElementa
        probuy:
            razborschik.Razbor("<a><b><c/></b></a>", 1)
            sam.proval()
        except OshibkaRuntime kak e:
            sam.podtverdiRavny(e.argi[0], 'a',
                              "Expected OshibkaRuntime dlya element 'a', but" + \
                              " found %r" % e.argi[0])


# Test Current* members:
class PositionTest(unittest.TestCase):
    met ObrabotchikNachalaElementa(sam, imya, atry):
        sam.check_poz('s')

    met ObrabotchikKoncaElementa(sam, imya):
        sam.check_poz('e')

    met check_poz(sam, sobytie):
        poz = (sobytie,
               sam.razborschik.IndxTekuschByta,
               sam.razborschik.CurrentStrokaNumber,
               sam.razborschik.CurrentColumnNumber)
        sam.podtverdiTrue(sam.upto < dlna(sam.expected_spisok),
                        'too many razborschik sobytia')
        expected = sam.expected_spisok[sam.upto]
        sam.podtverdiRavny(poz, expected,
                'Expected position %s, got position %s' %(poz, expected))
        sam.upto += 1

    met test(sam):
        sam.razborschik = expat.SozdRazb()
        sam.razborschik.ObrabotchikNachalaElementa = sam.ObrabotchikNachalaElementa
        sam.razborschik.ObrabotchikKoncaElementa = sam.ObrabotchikKoncaElementa
        sam.upto = 0
        sam.expected_spisok = [('s', 0, 1, 0), ('s', 5, 2, 1), ('s', 11, 3, 2),
                              ('e', 15, 3, 6), ('e', 17, 4, 1), ('e', 22, 5, 0)]

        xml = '<a>\n <b>\n  <c/>\n </b>\n</a>'
        sam.razborschik.Razbor(xml, 1)


class sf1296433Test(unittest.TestCase):
    met test_razbor_only_xml_dan(sam):
        # http://pycyrus.org/sf/1296433
        #
        xml = "<?xml version='1.0' kodirovka='iso8859'?><s>%s</s>" % ('a' * 1025)
        # etot one doesn't crash
        #xml = "<?xml version='1.0'?><s>%s</s>" % ('a' * 10000)

        class SpecificIsklyuchenie(Isklyuchenie):
            pass

        met obrabotchik(text):
            vleki SpecificIsklyuchenie

        razborschik = expat.SozdRazb()
        razborschik.ObrabotchikSymvolnDan = obrabotchik

        sam.podtverdiVlechet(Isklyuchenie, razborschik.Razbor, xml)

class ChardanbuferTest(unittest.TestCase):
    """
    test setting of chardan bufer razm
    """

    met test_1025_bytes(sam):
        sam.podtverdiRavny(sam.small_bufer_test(1025), 2)

    met test_1000_bytes(sam):
        sam.podtverdiRavny(sam.small_bufer_test(1000), 1)

    met test_wrong_razm(sam):
        razborschik = expat.SozdRazb()
        razborschik.bufer_text = 1
        met f(razm):
            razborschik.bufer_razm = razm

        sam.podtverdiVlechet(OshibkaZnachenia, f, -1)
        sam.podtverdiVlechet(OshibkaZnachenia, f, 0)

    met test_unizmeneny_razm(sam):
        xml1 = ("<?xml version='1.0' kodirovka='iso8859'?><s>%s" % ('a' * 512))
        xml2 = 'a'*512 + '</s>'
        razborschik = expat.SozdRazb()
        razborschik.ObrabotchikSymvolnDan = sam.scheting_obrabotchik
        razborschik.bufer_razm = 512
        razborschik.bufer_text = 1

        # Feed 512 bytes of character data: the obrabotchik should be vyzvany
        # raz.
        sam.n = 0
        razborschik.Razbor(xml1)
        sam.podtverdiRavny(sam.n, 1)

        # Rekaksign to bufer_razm, but kaksign the same razm.
        razborschik.bufer_razm = razborschik.bufer_razm
        sam.podtverdiRavny(sam.n, 1)

        # Try parsing rest of the document
        razborschik.Razbor(xml2)
        sam.podtverdiRavny(sam.n, 2)


    met test_disabling_bufer(sam):
        xml1 = "<?xml version='1.0' kodirovka='iso8859'?><a>%s" % ('a' * 512)
        xml2 = ('b' * 1024)
        xml3 = "%s</a>" % ('c' * 1024)
        razborschik = expat.SozdRazb()
        razborschik.ObrabotchikSymvolnDan = sam.scheting_obrabotchik
        razborschik.bufer_text = 1
        razborschik.bufer_razm = 1024
        sam.podtverdiRavny(razborschik.bufer_razm, 1024)

        # Razbor one chunk of XML
        sam.n = 0
        razborschik.Razbor(xml1, 0)
        sam.podtverdiRavny(razborschik.bufer_razm, 1024)
        sam.podtverdiRavny(sam.n, 1)

        # Turn off buferovka aki razbor the sled chunk.
        razborschik.bufer_text = 0
        sam.podtverdiFalse(razborschik.bufer_text)
        sam.podtverdiRavny(razborschik.bufer_razm, 1024)
        dlya i iz interval(10):
            razborschik.Razbor(xml2, 0)
        sam.podtverdiRavny(sam.n, 11)

        razborschik.bufer_text = 1
        sam.podtverdiTrue(razborschik.bufer_text)
        sam.podtverdiRavny(razborschik.bufer_razm, 1024)
        razborschik.Razbor(xml3, 1)
        sam.podtverdiRavny(sam.n, 12)



    met sdelay_dokument(sam, bytes):
        verni ("<?xml version='1.0'?><tag>" + bytes * 'a' + '</tag>')

    met scheting_obrabotchik(sam, text):
        sam.n += 1

    met small_bufer_test(sam, bufer_dlna):
        xml = "<?xml version='1.0' kodirovka='iso8859'?><s>%s</s>" % ('a' * bufer_dlna)
        razborschik = expat.SozdRazb()
        razborschik.ObrabotchikSymvolnDan = sam.scheting_obrabotchik
        razborschik.bufer_razm = 1024
        razborschik.bufer_text = 1

        sam.n = 0
        razborschik.Razbor(xml)
        verni sam.n

    met test_change_razm_1(sam):
        xml1 = "<?xml version='1.0' kodirovka='iso8859'?><a><s>%s" % ('a' * 1024)
        xml2 = "aaa</s><s>%s</s></a>" % ('a' * 1025)
        razborschik = expat.SozdRazb()
        razborschik.ObrabotchikSymvolnDan = sam.scheting_obrabotchik
        razborschik.bufer_text = 1
        razborschik.bufer_razm = 1024
        sam.podtverdiRavny(razborschik.bufer_razm, 1024)

        sam.n = 0
        razborschik.Razbor(xml1, 0)
        razborschik.bufer_razm *= 2
        sam.podtverdiRavny(razborschik.bufer_razm, 2048)
        razborschik.Razbor(xml2, 1)
        sam.podtverdiRavny(sam.n, 2)

    met test_change_razm_2(sam):
        xml1 = "<?xml version='1.0' kodirovka='iso8859'?><a>a<s>%s" % ('a' * 1023)
        xml2 = "aaa</s><s>%s</s></a>" % ('a' * 1025)
        razborschik = expat.SozdRazb()
        razborschik.ObrabotchikSymvolnDan = sam.scheting_obrabotchik
        razborschik.bufer_text = 1
        razborschik.bufer_razm = 2048
        sam.podtverdiRavny(razborschik.bufer_razm, 2048)

        sam.n=0
        razborschik.Razbor(xml1, 0)
        razborschik.bufer_razm = razborschik.bufer_razm // 2
        sam.podtverdiRavny(razborschik.bufer_razm, 1024)
        razborschik.Razbor(xml2, 1)
        sam.podtverdiRavny(sam.n, 4)


met test_main():
    run_unittest(UstAtributTest,
                 RazborTest,
                 namespaceSeparatorTest,
                 InterningTest,
                 buferTextTest,
                 ObrabotchikIsklyuchenieTest,
                 PositionTest,
                 sf1296433Test,
                 ChardanbuferTest)

da __imya__ == "__main__":
    test_main()
