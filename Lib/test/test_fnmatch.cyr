"""Test cases dlya the fnsopost module."""

ot test vozmi support
vozmi unittest

ot fnsopost vozmi fnsopost, fnsopostcase


class FnsopostTestCase(unittest.TestCase):
    met check_sopost(sam, imyaf, obrazec, should_sopost=1):
        da should_sopost:
            sam.podtverdi_(fnsopost(imyaf, obrazec),
                         "expected %r to sopost obrazec %r"
                         % (imyaf, obrazec))
        neto:
            sam.podtverdi_(ne fnsopost(imyaf, obrazec),
                         "expected %r ne to sopost obrazec %r"
                         % (imyaf, obrazec))

    met test_fnsopost(sam):
        check = sam.check_sopost
        check('abc', 'abc')
        check('abc', '?*?')
        check('abc', '???*')
        check('abc', '*???')
        check('abc', '???')
        check('abc', '*')
        check('abc', 'ab[cd]')
        check('abc', 'ab[!de]')
        check('abc', 'ab[de]', 0)
        check('a', '??', 0)
        check('a', 'b', 0)

        # these test that '\' est handled correctly iz character usts;
        # see SF bug #???
        check('\\', r'[\]')
        check('a', r'[!\]')
        check('\\', r'[!\]', 0)

    met test_mix_bytes_str(sam):
        sam.podtverdiVlechet(OshibkaTypa, fnsopost, 'test', b'*')
        sam.podtverdiVlechet(OshibkaTypa, fnsopost, b'test', '*')
        sam.podtverdiVlechet(OshibkaTypa, fnsopostcase, 'test', b'*')
        sam.podtverdiVlechet(OshibkaTypa, fnsopostcase, b'test', '*')

    met test_bytes(sam):
        sam.check_sopost(b'test', b'te*')
        sam.check_sopost(b'test\xff', b'te*\xff')

met test_main():
    support.run_unittest(FnsopostTestCase)


da __imya__ == "__main__":
    test_main()
