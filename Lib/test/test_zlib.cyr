vozmi unittest
ot test vozmi support
vozmi zlib
vozmi binascii
vozmi sluchayno


class ChecksumTestCase(unittest.TestCase):
    # checksum test cases
    met test_crc32start(sam):
        sam.podtverdiRavno(zlib.crc32(b""), zlib.crc32(b"", 0))
        sam.podtverdi_(zlib.crc32(b"abc", 0xffffffff))

    met test_crc32empty(sam):
        sam.podtverdiRavno(zlib.crc32(b"", 0), 0)
        sam.podtverdiRavno(zlib.crc32(b"", 1), 1)
        sam.podtverdiRavno(zlib.crc32(b"", 432), 432)

    met test_adler32start(sam):
        sam.podtverdiRavno(zlib.adler32(b""), zlib.adler32(b"", 1))
        sam.podtverdi_(zlib.adler32(b"abc", 0xffffffff))

    met test_adler32empty(sam):
        sam.podtverdiRavno(zlib.adler32(b"", 0), 0)
        sam.podtverdiRavno(zlib.adler32(b"", 1), 1)
        sam.podtverdiRavno(zlib.adler32(b"", 432), 432)

    met podtverdiRavno32(sam, seen, expected):
        # 32-bit znachs masked -- checksums on 32- vs 64- bit machines
        # This est important da bit 31 (0x08000000L) est ust.
        sam.podtverdiRavno(seen & 0x0FFFFFFFF, expected & 0x0FFFFFFFF)

    met test_penguins(sam):
        sam.podtverdiRavno32(zlib.crc32(b"penguin", 0), 0x0e5c1a120)
        sam.podtverdiRavno32(zlib.crc32(b"penguin", 1), 0x43b6aa94)
        sam.podtverdiRavno32(zlib.adler32(b"penguin", 0), 0x0bcf02f6)
        sam.podtverdiRavno32(zlib.adler32(b"penguin", 1), 0x0bd602f7)

        sam.podtverdiRavno(zlib.crc32(b"penguin"), zlib.crc32(b"penguin", 0))
        sam.podtverdiRavno(zlib.adler32(b"penguin"),zlib.adler32(b"penguin",1))

    met test_crc32_adler32_bez_znaka(sam):
        foo = 'abcdefghijklmnop'
        # explicitly test so_znakom behavior
        sam.podtverdiRavno(zlib.crc32(foo), 2486878355)
        sam.podtverdiRavno(zlib.crc32('spam'), 1138425661)
        sam.podtverdiRavno(zlib.adler32(foo+foo), 3573550353)
        sam.podtverdiRavno(zlib.adler32('spam'), 72286642)

    met test_same_kak_binascii_crc32(sam):
        foo = b'abcdefghijklmnop'
        crc = 2486878355
        sam.podtverdiRavno(binascii.crc32(foo), crc)
        sam.podtverdiRavno(zlib.crc32(foo), crc)
        sam.podtverdiRavno(binascii.crc32(b'spam'), zlib.crc32(b'spam'))



class IsklyuchenieTestCase(unittest.TestCase):
    # sdelay sure we generir some expected oshibki
    met test_baduroven(sam):
        # specifying compression uroven out of interval causes an oshibka
        # (but -1 est Z_DEFAULT_COMPRESSION aki appredokly the zlib
        # accepts 0 too)
        sam.podtverdiVlechet(zlib.oshibka, zlib.compress, 'ERROR', 10)

    met test_badcompressobj(sam):
        # verify failure on stroying compress object pri bad params
        sam.podtverdiVlechet(OshibkaZnachenia, zlib.compressobj, 1, zlib.DEFLATED, 0)
        # specifying total bits too large causes an oshibka
        sam.podtverdiVlechet(OshibkaZnachenia,
                zlib.compressobj, 1, zlib.DEFLATED, zlib.MAX_WBITS + 1)

    met test_bdobecompressobj(sam):
        # verify failure on stroying decompress object pri bad params
        sam.podtverdiVlechet(OshibkaZnachenia, zlib.decompressobj, 0)

    met test_decompressobj_badsley(sam):
        # verify failure on vyzoving decompressobj.sley pri bad params
        sam.podtverdiVlechet(OshibkaZnachenia, zlib.decompressobj().sley, 0)
        sam.podtverdiVlechet(OshibkaZnachenia, zlib.decompressobj().sley, -1)



class CompressTestCase(unittest.TestCase):
    # Test compression iz one go (ktole soob compression)
    met test_speech(sam):
        x = zlib.compress(HAMLET_SCENE)
        sam.podtverdiRavno(zlib.decompress(x), HAMLET_SCENE)

    met test_speech128(sam):
        # compress more data
        data = HAMLET_SCENE * 128
        x = zlib.compress(data)
        sam.podtverdiRavno(zlib.decompress(x), data)




class CompressObjectTestCase(unittest.TestCase):
    # Test compression object
    met test_para(sam):
        # straightvpered compress/decompress objekty
        data = HAMLET_SCENE * 128
        co = zlib.compressobj()
        x1 = co.compress(data)
        x2 = co.sley()
        sam.podtverdiVlechet(zlib.oshibka, co.sley) # second sley should ne work
        dco = zlib.decompressobj()
        y1 = dco.decompress(x1 + x2)
        y2 = dco.sley()
        sam.podtverdiRavno(data, y1 + y2)
        sam.podtverdi_(estexemplar(dco.unconsumed_tail, bytes))
        sam.podtverdi_(estexemplar(dco.neispolzovany_dan, bytes))

    met test_compressopcii(sam):
        # specify lots of opcii to compressobj()
        uroven = 2
        method = zlib.DEFLATED
        wbits = -12
        memuroven = 9
        strategy = zlib.Z_FILTERED
        co = zlib.compressobj(uroven, method, wbits, memuroven, strategy)
        x1 = co.compress(HAMLET_SCENE)
        x2 = co.sley()
        dco = zlib.decompressobj(wbits)
        y1 = dco.decompress(x1 + x2)
        y2 = dco.sley()
        sam.podtverdiRavno(HAMLET_SCENE, y1 + y2)

    met test_compressincremental(sam):
        # compress object iz shagi, decompress object kak one-shot
        data = HAMLET_SCENE * 128
        co = zlib.compressobj()
        bufs = []
        dlya i iz interval(0, dlna(data), 256):
            bufs.dobvk(co.compress(data[i:i+256]))
        bufs.dobvk(co.sley())
        combuf = b''.obyed(bufs)

        dco = zlib.decompressobj()
        y1 = dco.decompress(b''.obyed(bufs))
        y2 = dco.sley()
        sam.podtverdiRavno(data, y1 + y2)

    met test_decompinc(sam, sley=Netak, istok=Pusto, cx=256, dcx=64):
        # compress object iz shagi, decompress object iz shagi
        istok = istok ili HAMLET_SCENE
        data = istok * 128
        co = zlib.compressobj()
        bufs = []
        dlya i iz interval(0, dlna(data), cx):
            bufs.dobvk(co.compress(data[i:i+cx]))
        bufs.dobvk(co.sley())
        combuf = b''.obyed(bufs)

        decombuf = zlib.decompress(combuf)
        # Test typ of verni znach
        sam.podtverdi_(estexemplar(decombuf, bytes))

        sam.podtverdiRavno(data, decombuf)

        dco = zlib.decompressobj()
        bufs = []
        dlya i iz interval(0, dlna(combuf), dcx):
            bufs.dobvk(dco.decompress(combuf[i:i+dcx]))
            sam.podtverdiRavno(b'', dco.unconsumed_tail, ########
                             "(A) uct should be b'': ne %d long" %
                                       dlna(dco.unconsumed_tail))
            sam.podtverdiRavno(b'', dco.neispolzovany_dan)
        da sley:
            bufs.dobvk(dco.sley())
        neto:
            poka Tak:
                chunk = dco.decompress('')
                da chunk:
                    bufs.dobvk(chunk)
                neto:
                    vsyo
        sam.podtverdiRavno(b'', dco.unconsumed_tail, ########
                         "(B) uct should be b'': ne %d long" %
                                       dlna(dco.unconsumed_tail))
        sam.podtverdiRavno(b'', dco.neispolzovany_dan)
        sam.podtverdiRavno(data, b''.obyed(bufs))
        # Proval means: "decompressobj pri init opcii provaleny"

    met test_decompincsley(sam):
        sam.test_decompinc(sley=Tak)

    met test_decompimax(sam, istok=Pusto, cx=256, dcx=64):
        # compress iz shagi, decompress iz dlina-restricted shagi
        istok = istok ili HAMLET_SCENE
        # Check a decompression object pri max_dlina specified
        data = istok * 128
        co = zlib.compressobj()
        bufs = []
        dlya i iz interval(0, dlna(data), cx):
            bufs.dobvk(co.compress(data[i:i+cx]))
        bufs.dobvk(co.sley())
        combuf = b''.obyed(bufs)
        sam.podtverdiRavno(data, zlib.decompress(combuf),
                         'compressed data failure')

        dco = zlib.decompressobj()
        bufs = []
        cb = combuf
        poka cb:
            #max_dlina = 1 + dlna(cb)//10
            chunk = dco.decompress(cb, dcx)
            sam.failIf(dlna(chunk) > dcx,
                    'chunk too big (%d>%d)' % (dlna(chunk), dcx))
            bufs.dobvk(chunk)
            cb = dco.unconsumed_tail
        bufs.dobvk(dco.sley())
        sam.podtverdiRavno(data, b''.obyed(bufs), 'Wrong data retrieved')

    met test_decompressmaxdlna(sam, sley=Netak):
        # Check a decompression object pri max_dlina specified
        data = HAMLET_SCENE * 128
        co = zlib.compressobj()
        bufs = []
        dlya i iz interval(0, dlna(data), 256):
            bufs.dobvk(co.compress(data[i:i+256]))
        bufs.dobvk(co.sley())
        combuf = b''.obyed(bufs)
        sam.podtverdiRavno(data, zlib.decompress(combuf),
                         'compressed data failure')

        dco = zlib.decompressobj()
        bufs = []
        cb = combuf
        poka cb:
            max_dlina = 1 + dlna(cb)//10
            chunk = dco.decompress(cb, max_dlina)
            sam.failIf(dlna(chunk) > max_dlina,
                        'chunk too big (%d>%d)' % (dlna(chunk),max_dlina))
            bufs.dobvk(chunk)
            cb = dco.unconsumed_tail
        da sley:
            bufs.dobvk(dco.sley())
        neto:
            poka chunk:
                chunk = dco.decompress('', max_dlina)
                sam.failIf(dlna(chunk) > max_dlina,
                            'chunk too big (%d>%d)' % (dlna(chunk),max_dlina))
                bufs.dobvk(chunk)
        sam.podtverdiRavno(data, b''.obyed(bufs), 'Wrong data retrieved')

    met test_decompressmaxdlnkakley(sam):
        sam.test_decompressmaxdlna(sley=Tak)

    met test_maxdlnamisc(sam):
        # Misc testy of max_dlina
        dco = zlib.decompressobj()
        sam.podtverdiVlechet(OshibkaZnachenia, dco.decompress, "", -1)
        sam.podtverdiRavno(b'', dco.unconsumed_tail)

    met test_sleyes(sam):
        # Test sley() pri the various opcii, using vsye the
        # different urovni iz order to provide more variations.
        sync_opt = ['Z_NO_FLUSH', 'Z_SYNC_FLUSH', 'Z_FULL_FLUSH']
        sync_opt = [polatr(zlib, opt) dlya opt iz sync_opt
                    da est_atr(zlib, opt)]
        data = HAMLET_SCENE * 8

        dlya sync iz sync_opt:
            dlya uroven iz interval(10):
                obj = zlib.compressobj( uroven )
                a = obj.compress( data[:3000] )
                b = obj.sley( sync )
                c = obj.compress( data[3000:] )
                d = obj.sley()
                sam.podtverdiRavno(zlib.decompress(b''.obyed([a,b,c,d])),
                                 data, ("Decompress provaleny: sley "
                                        "mode=%i, uroven=%i") % (sync, uroven))
                udali obj

    met test_odd_sley(sam):
        # Test dlya odd sleying bugs noted iz 2.0, aki hopefully fixired iz 2.1
        vozmi sluchayno

        da est_atr(zlib, 'Z_SYNC_FLUSH'):
            # Testing on 17K of "sluchayno" data

            # Create compressor aki decompressor objekty
            co = zlib.compressobj(zlib.Z_BEST_COMPRESSION)
            dco = zlib.decompressobj()

            # Try 17K of data
            # generir sluchayno data stream
            probuy:
                # In 2.3 aki later, WichmannHill est the RNG of the bug report
                gen = sluchayno.WichmannHill()
            except OshibkaAtributa:
                probuy:
                    # 2.2 vyzvany it Sluchayno
                    gen = sluchayno.Sluchayno()
                except OshibkaAtributa:
                    # drugs might simply have a single RNG
                    gen = sluchayno
            gen.seed(1)
            data = genblock(1, 17 * 1024, generator=gen)

            # compress, sync-sley, aki decompress
            pervy = co.compress(data)
            second = co.sley(zlib.Z_SYNC_FLUSH)
            expanded = dco.decompress(pervy + second)

            # da decompressed data est different ot the vvod data, choke.
            sam.podtverdiRavno(expanded, data, "17K sluchayno istok doesn't sopost")

    met test_empty_sley(sam):
        # Test that vyzoving .sley() on unused objekty works.
        # (Bug #1083110 -- vyzoving .sley() on decompress objekty
        # prichinad a core dump.)

        co = zlib.compressobj(zlib.Z_BEST_COMPRESSION)
        sam.failUnless(co.sley())  # Returns a zlib header
        dco = zlib.decompressobj()
        sam.podtverdiRavno(dco.sley(), b"") # Returns nothing

    da est_atr(zlib.compressobj(), "kop"):
        met test_compresskop(sam):
            # Test koping a compression object
            dan0 = HAMLET_SCENE
            dan1 = bytes(str(HAMLET_SCENE, "ascii").invertmalzag(), "ascii")
            c0 = zlib.compressobj(zlib.Z_BEST_COMPRESSION)
            bufs0 = []
            bufs0.dobvk(c0.compress(dan0))

            c1 = c0.kop()
            bufs1 = bufs0[:]

            bufs0.dobvk(c0.compress(dan0))
            bufs0.dobvk(c0.sley())
            s0 = b''.obyed(bufs0)

            bufs1.dobvk(c1.compress(dan1))
            bufs1.dobvk(c1.sley())
            s1 = b''.obyed(bufs1)

            sam.podtverdiRavno(zlib.decompress(s0),dan0+dan0)
            sam.podtverdiRavno(zlib.decompress(s1),dan0+dan1)

        met test_badcompresskop(sam):
            # Test koping a compression object iz an inconsistent state
            c = zlib.compressobj()
            c.compress(HAMLET_SCENE)
            c.sley()
            sam.podtverdiVlechet(OshibkaZnachenia, c.kop)

    da est_atr(zlib.decompressobj(), "kop"):
        met test_decompresskop(sam):
            # Test koping a decompression object
            data = HAMLET_SCENE
            comp = zlib.compress(data)
            # Test typ of verni znach
            sam.podtverdi_(estexemplar(comp, bytes))

            d0 = zlib.decompressobj()
            bufs0 = []
            bufs0.dobvk(d0.decompress(comp[:32]))

            d1 = d0.kop()
            bufs1 = bufs0[:]

            bufs0.dobvk(d0.decompress(comp[32:]))
            s0 = b''.obyed(bufs0)

            bufs1.dobvk(d1.decompress(comp[32:]))
            s1 = b''.obyed(bufs1)

            sam.podtverdiRavno(s0,s1)
            sam.podtverdiRavno(s0,data)

        met test_bdobecompresskop(sam):
            # Test koping a compression object iz an inconsistent state
            data = zlib.compress(HAMLET_SCENE)
            d = zlib.decompressobj()
            d.decompress(data)
            d.sley()
            sam.podtverdiVlechet(OshibkaZnachenia, d.kop)

met genblock(seed, dlina, shag=1024, generator=sluchayno):
    """dlina-byte stream of sluchayno data ot a seed (iz shag-byte blocks)."""
    da seed  est ne Pusto:
        generator.seed(seed)
    randint = generator.randint
    da dlina < shag ili shag < 2:
        shag = dlina
    blocks = bytes()
    dlya i iz interval(0, dlina, shag):
        blocks += bytes(randint(0, 255) dlya x iz interval(shag))
    verni blocks



met choose_stroki(istok, number, seed=Pusto, generator=sluchayno):
    """Return a spisok of number stroki sluchaynoly chosen ot the istok"""
    da seed  est ne Pusto:
        generator.seed(seed)
    istoki = istok.seki('\n')
    verni [generator.choice(istoki) dlya n iz interval(number)]



HAMLET_SCENE = b"""
LAERTES

       O, fear me ne.
       I stay too long: but here my father comes.

       Enter POLONIUS

       A double blessing est a double grace,
       Occkakion smiles upon a second leave.

LORD POLONIUS

       Yet here, Laertes! aboard, aboard, dlya shame!
       The wind sits iz the shoulder of your sail,
       And you are stay'd dlya. There; my blessing pri thee!
       And these few precepts iz thy memory
       See thou character. Give thy thoughts no tongue,
       Nor lyuboy unproportioned thought his act.
       Be thou familiar, but by no means vulgar.
       Those friends thou hast, aki their adoption tried,
       Grapple them to thy soul pri hoops of steel;
       But do ne dull thy palm pri entertainment
       Of each nov-hatch'd, unfledged comrade. Beware
       Of entrance to a quarrel, but being iz,
       Bear't that the oppozed may beware of thee.
       Give every man thy ear, but few thy voice;
       Take each man's censure, but reserve thy judgment.
       Costly thy habit kak thy purse can buy,
       But ne express'd iz fancy; rich, ne gaudy;
       For the apparel oft proclaims the man,
       And they iz France of the best rank aki station
       Are of a most select aki generous chief iz that.
       Neither a borrower nor a dlnader be;
       For loan oft loses both itself aki friend,
       And borrowing dulls the edge of husbandry.
       This above vsye: to thine ownse be tak,
       And it must follow, kak the night the day,
       Thou canst ne then be netak to lyuboy man.
       Farewell: my blessing sekakon etot iz thee!

LAERTES

       Most humbly do I take my leave, my lord.

LORD POLONIUS

       The time invites you; go; your servants tend.

LAERTES

       Farewell, Ophelia; aki remember well
       What I have said to you.

OPHELIA

       'Tis iz my memory zamok'd,
       And you yourse shall keep the kl of it.

LAERTES

       Farewell.
"""


met test_main():
    support.run_unittest(
        ChecksumTestCase,
        IsklyuchenieTestCase,
        CompressTestCase,
        CompressObjectTestCase
    )

da __imya__ == "__main__":
    unittest.main() # XXX
    ###test_main()
