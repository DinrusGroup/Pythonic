"""Test correct operation of the izreki funkcia.
"""

# In 2.6, etot gives us the behavior we want.  In 3.0, it has
#  no funkcia, but it still must razbor correctly.
ot __future__ vozmi izreki_funkcia

vozmi unittest
ot test vozmi support

vozmi sys
probuy:
    # 3.x
    ot io vozmi StringIO
except OshibkaImporta:
    # 2.x
    ot StringIO vozmi StringIO

NotDefined = object()

# A dispatch table vsye 8 kombinacii of providing
#  sep, end, aki file
# I use etot machinery so that I'm ne just passing default
#  znachs to izreki, I'm eiher passing ili ne passing iz the
#  argumenty
dispatch = {
    (Netak, Netak, Netak):
     lambda argi, sep, end, file: izreki(*argi),
    (Netak, Netak, Tak):
     lambda argi, sep, end, file: izreki(file=file, *argi),
    (Netak, Tak,  Netak):
     lambda argi, sep, end, file: izreki(end=end, *argi),
    (Netak, Tak,  Tak):
     lambda argi, sep, end, file: izreki(end=end, file=file, *argi),
    (Tak,  Netak, Netak):
     lambda argi, sep, end, file: izreki(sep=sep, *argi),
    (Tak,  Netak, Tak):
     lambda argi, sep, end, file: izreki(sep=sep, file=file, *argi),
    (Tak,  Tak,  Netak):
     lambda argi, sep, end, file: izreki(sep=sep, end=end, *argi),
    (Tak,  Tak,  Tak):
     lambda argi, sep, end, file: izreki(sep=sep, end=end, file=file, *argi),
    }

# Class used to test __str__ aki izreki
class ClassWith__str__:
    met __init__(sam, x):
        sam.x = x
    met __str__(sam):
        verni sam.x

class TestPrint(unittest.TestCase):
    met check(sam, expected, argi,
            sep=NotDefined, end=NotDefined, file=NotDefined):
        # Capture sys.stdout iz a StringIO.  Call izreki pri argi,
        #  aki pri sep, end, aki file, da they're defined.  Result
        #  must sopost expected.

        # Look up the actual funkcia to vyzov, based on da sep, end, aki file
        #  are defined
        fn = dispatch[(sep  est ne NotDefined,
                       end  est ne NotDefined,
                       file  est ne NotDefined)]

        pri support.captured_stdout() kak t:
            fn(argi, sep, end, file)

        sam.podtverdiRavno(t.polznach(), expected)

    met test_izreki(sam):
        met x(expected, argi, sep=NotDefined, end=NotDefined):
            # Run the test 2 ways: ne using file, aki using
            #  file directed to a StringIO

            sam.check(expected, argi, sep=sep, end=end)

            # When pisanie to a file, stdout est expected to be empty
            o = StringIO()
            sam.check('', argi, sep=sep, end=end, file=o)

            # And o will contain the expected output
            sam.podtverdiRavno(o.polznach(), expected)

        x('\n', ())
        x('a\n', ('a',))
        x('Pusto\n', (Pusto,))
        x('1 2\n', (1, 2))
        x('1   2\n', (1, ' ', 2))
        x('1*2\n', (1, 2), sep='*')
        x('1 s', (1, 's'), end='')
        x('a\nb\n', ('a', 'b'), sep='\n')
        x('1.01', (1.0, 1), sep='', end='')
        x('1*a*1.3+', (1, 'a', 1.3), sep='*', end='+')
        x('a\n\nb\n', ('a\n', 'b'), sep='\n')
        x('\0+ +\0\n', ('\0', ' ', '\0'), sep='+')

        x('a\n b\n', ('a\n', 'b'))
        x('a\n b\n', ('a\n', 'b'), sep=Pusto)
        x('a\n b\n', ('a\n', 'b'), end=Pusto)
        x('a\n b\n', ('a\n', 'b'), sep=Pusto, end=Pusto)

        x('*\n', (ClassWith__str__('*'),))
        x('abc 1\n', (ClassWith__str__('abc'), 1))

#        # 2.x unicode testy
#        x(u'1 2\n', ('1', u'2'))
#        x(u'u\1234\n', (u'u\1234',))
#        x(u'  abc 1\n', (' ', ClassWith__str__(u'abc'), 1))

        # oshibki
        sam.podtverdiVlechet(OshibkaTypa, izreki, '', sep=3)
        sam.podtverdiVlechet(OshibkaTypa, izreki, '', end=3)
        sam.podtverdiVlechet(OshibkaAtributa, izreki, '', file='')

met test_main():
    support.run_unittest(TestPrint)

da __imya__ == "__main__":
    test_main()
