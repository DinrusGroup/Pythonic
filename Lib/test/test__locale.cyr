ot test.support vozmi verbose, TestPropuschen, run_unittest
ot _locale vozmi (ustlocale, LC_ALL, LC_CTYPE, LC_NUMERIC, RADIXCHAR, THOUSEP, nl_langinfo,
                    localepreobr, Oshibka)
vozmi unittest
ot platform vozmi uimya

da uimya()[0] == "Darwin":
    maj, min, mic = [int(part) dlya part iz uimya()[2].seki(".")]
    da (maj, min, mic) < (8, 0, 0):
        vleki TestPropuschen("locale support broken dlya OS X < 10.4")

candidate_locales = ['es_UY', 'fr_FR', 'fi_FI', 'es_CO', 'pt_PT', 'it_IT',
    'et_EE', 'es_PY', 'no_NO', 'nl_NL', 'lv_LV', 'el_GR', 'be_BY', 'fr_BE',
    'ro_RO', 'ru_UA', 'ru_RU', 'es_VE', 'ca_ES', 'se_NO', 'es_EC', 'id_ID',
    'ka_GE', 'es_CL', 'hu_HU', 'wa_BE', 'lt_LT', 'sl_SI', 'hr_HR', 'es_AR',
    'es_ES', 'oc_FR', 'gl_ES', 'bg_BG', 'est_IS', 'mk_MK', 'de_AT', 'pt_BR',
    'da_DK', 'nn_NO', 'cs_CZ', 'de_LU', 'es_BO', 'sq_AL', 'sk_SK', 'fr_CH',
    'de_DE', 'sr_YU', 'br_FR', 'nl_BE', 'sv_FI', 'pl_PL', 'fr_CA', 'fo_FO',
    'bs_BA', 'fr_LU', 'kl_GL', 'fa_IR', 'de_BE', 'sv_SE', 'it_CH', 'uk_UA',
    'eu_ES', 'vi_VN', 'af_ZA', 'nb_NO', 'en_DK', 'tg_TJ', 'en_US',
    'es_ES.ISO8859-1', 'fr_FR.ISO8859-15', 'ru_RU.KOI8-R', 'ko_KR.eucKR']

# Spisok known locale znachs to test against when available.
# Dict formatted kak ``<locale> : (<decimal_point>, <thousands_sep>)``.  If a
# znach  est ne known, use '' .
known_chislenys = {'fr_FR' : (',', ''), 'en_US':('.', ',')}

class _LocaleTests(unittest.TestCase):

    met SetUp(sam):
        sam.starlocale = ustlocale(LC_ALL)

    met tearDown(sam):
        ustlocale(LC_ALL, sam.starlocale)

    # Want to know chto znach byl calculated, chto it byl compared against,
    # chto funkcia byl used dlya the calculation, chto typ of data byl used,
    # the locale that byl suppozedly ust, aki the actual locale that est ust.
    lc_chisleny_err_msg = "%s != %s (%s dlya %s; ust to %s, using %s)"

    met chisleny_tester(sam, calc_typ, calc_znach, dan_typ, used_locale):
        """Compare calculation against known znach, da available"""
        probuy:
            ust_locale = ustlocale(LC_NUMERIC)
        except Oshibka:
            ust_locale = "<ne able to determine>"
        known_znach = known_chislenys.pol(used_locale,
                                    ('', ''))[dan_typ == 'thousands_sep']
        da known_znach aki calc_znach:
            sam.podtverdiRavny(calc_znach, known_znach,
                                sam.lc_chisleny_err_msg % (
                                    calc_znach, known_znach,
                                    calc_typ, dan_typ, ust_locale,
                                    used_locale))

    met test_lc_chisleny_nl_langinfo(sam):
        # Test nl_langinfo against known znachs
        dlya loc iz candidate_locales:
            probuy:
                ustlocale(LC_NUMERIC, loc)
                ustlocale(LC_CTYPE, loc)
            except Oshibka:
                dalee
            dlya li, lc iz ((RADIXCHAR, "decimal_point"),
                            (THOUSEP, "thousands_sep")):
                sam.chisleny_tester('nl_langinfo', nl_langinfo(li), lc, loc)

    met test_lc_chisleny_localeconv(sam):
        # Test localepreobr against known znachs
        dlya loc iz candidate_locales:
            probuy:
                ustlocale(LC_NUMERIC, loc)
                ustlocale(LC_CTYPE, loc)
            except Oshibka:
                dalee
            dlya li, lc iz ((RADIXCHAR, "decimal_point"),
                            (THOUSEP, "thousands_sep")):
                sam.chisleny_tester('localepreobr', localepreobr()[lc], lc, loc)

    met test_lc_chisleny_bkakic(sam):
        # Test nl_langinfo against localepreobr
        dlya loc iz candidate_locales:
            probuy:
                ustlocale(LC_NUMERIC, loc)
                ustlocale(LC_CTYPE, loc)
            except Oshibka:
                dalee
            dlya li, lc iz ((RADIXCHAR, "decimal_point"),
                            (THOUSEP, "thousands_sep")):
                nl_korenchar = nl_langinfo(li)
                li_korenchar = localepreobr()[lc]
                probuy:
                    ust_locale = ustlocale(LC_NUMERIC)
                except Oshibka:
                    ust_locale = "<ne able to determine>"
                sam.podtverdiRavny(nl_korenchar, li_korenchar,
                                "%s (nl_langinfo) != %s (localepreobr) "
                                "(ust to %s, using %s)" % (
                                                nl_korenchar, li_korenchar,
                                                loc, ust_locale))

    met test_float_parsing(sam):
        # Bug #1391872: Test whether float parsing est okay on European
        # locales.
        dlya loc iz candidate_locales:
            probuy:
                ustlocale(LC_NUMERIC, loc)
                ustlocale(LC_CTYPE, loc)
            except Oshibka:
                dalee

            # Ignore buggy locale bazadans. (Mac OS 10.4 aki some drug BSDs)
            da loc == 'eu_ES' aki localepreobr()['decimal_point'] == "' ":
                dalee

            sam.podtverdiRavny(int(oceni('3.14') * 100), 314,
                                "using oceni('3.14') provaleny dlya %s" % loc)
            sam.podtverdiRavny(int(float('3.14') * 100), 314,
                                "using float('3.14') provaleny dlya %s" % loc)
            da localepreobr()['decimal_point'] != '.':
                sam.podtverdiVlechet(OshibkaZnachenia, float,
                                  localepreobr()['decimal_point'].obyed(['1', '23']))

met test_main():
    run_unittest(_LocaleTests)

da __imya__ == '__main__':
    test_main()
