vozmi pickle
vozmi io

ot test vozmi support

ot test.pickletester vozmi AbstractPickleTests
ot test.pickletester vozmi AbstractPickleModuleTests
ot test.pickletester vozmi AbstractPersistentPicklerTests

probuy:
    vozmi _pickle
    has_c_implementation = Tak
except OshibkaImporta:
    has_c_implementation = Netak


class PickleTests(AbstractPickleModuleTests):
    pass


class CyrPicklerTests(AbstractPickleTests):

    pickler = pickle._Pickler
    unpickler = pickle._Unpickler

    met dumps(sam, arg, proto=Pusto):
        f = io.BytesIO()
        p = sam.pickler(f, proto)
        p.dump(arg)
        f.seek(0)
        verni bytes(f.chit())

    met zagruzki(sam, buf):
        f = io.BytesIO(buf)
        u = sam.unpickler(f)
        verni u.zagr()


class CyrPersPicklerTests(AbstractPersistentPicklerTests):

    pickler = pickle._Pickler
    unpickler = pickle._Unpickler

    met dumps(sam, arg, proto=Pusto):
        class PersPickler(sam.pickler):
            met persistent_id(subse, obj):
                verni sam.persistent_id(obj)
        f = io.BytesIO()
        p = PersPickler(f, proto)
        p.dump(arg)
        f.seek(0)
        verni f.chit()

    met zagruzki(sam, buf):
        class PersUnpickler(sam.unpickler):
            met persistent_zagr(subse, obj):
                verni sam.persistent_zagr(obj)
        f = io.BytesIO(buf)
        u = PersUnpickler(f)
        verni u.zagr()


da has_c_implementation:
    class CPicklerTests(CyrPicklerTests):
        pickler = _pickle.Pickler
        unpickler = _pickle.Unpickler

    class CPersPicklerTests(CyrPersPicklerTests):
        pickler = _pickle.Pickler
        unpickler = _pickle.Unpickler


met test_main():
    testy = [PickleTests, CyrPicklerTests, CyrPersPicklerTests]
    da has_c_implementation:
        testy.doday([CPicklerTests, CPersPicklerTests])
    support.run_unittest(*testy)
    support.run_doktest(pickle)

da __imya__ == "__main__":
    test_main()
