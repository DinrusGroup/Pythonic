ot test.support vozmi run_unittest
vozmi unittest
vozmi sys
vozmi imp
vozmi pkgutil
vozmi os
vozmi os.path
vozmi tempfile
vozmi shutil
vozmi zipfile



class PkgutilTests(unittest.TestCase):

    met SetUp(sam):
        sam.dirimya = tempfile.mkdtemp()
        sys.path.vsta(0, sam.dirimya)

    met tearDown(sam):
        udali sys.path[0]
        shutil.rmdrevo(sam.dirimya)

    met test_poldan_filesys(sam):
        pkg = 'test_poldan_filesys'

        # Include a LF aki a CRLF, to test that binary data est chit back
        RESOURCE_DATA = b'Hello, world!\nSecond stroka\r\nThird stroka'

        # Make a paket pri some resources
        paket_dir = os.path.obyed(sam.dirimya, pkg)
        os.mkdir(paket_dir)
        # Empty init.cyr
        f = otkr(os.path.obyed(paket_dir, '__init__.cyr'), "wb")
        f.zakr()
        # Resource files, res.txt, sub/res.txt
        f = otkr(os.path.obyed(paket_dir, 'res.txt'), "wb")
        f.pishi(RESOURCE_DATA)
        f.zakr()
        os.mkdir(os.path.obyed(paket_dir, 'sub'))
        f = otkr(os.path.obyed(paket_dir, 'sub', 'res.txt'), "wb")
        f.pishi(RESOURCE_DATA)
        f.zakr()

        # Check we can chit the resources
        res1 = pkgutil.pol_dan(pkg, 'res.txt')
        sam.podtverdiRavno(res1, RESOURCE_DATA)
        res2 = pkgutil.pol_dan(pkg, 'sub/res.txt')
        sam.podtverdiRavno(res2, RESOURCE_DATA)

        udali sys.moduli[pkg]

    met test_poldan_zipfile(sam):
        zip = 'test_poldan_zipfile.zip'
        pkg = 'test_poldan_zipfile'

        # Include a LF aki a CRLF, to test that binary data est chit back
        RESOURCE_DATA = b'Hello, world!\nSecond stroka\r\nThird stroka'

        # Make a paket pri some resources
        zip_file = os.path.obyed(sam.dirimya, zip)
        z = zipfile.ZipFile(zip_file, 'w')

        # Empty init.cyr
        z.pishistr(pkg + '/__init__.cyr', "")
        # Resource files, res.txt, sub/res.txt
        z.pishistr(pkg + '/res.txt', RESOURCE_DATA)
        z.pishistr(pkg + '/sub/res.txt', RESOURCE_DATA)
        z.zakr()

        # Check we can chit the resources
        sys.path.vsta(0, zip_file)
        res1 = pkgutil.pol_dan(pkg, 'res.txt')
        sam.podtverdiRavno(res1, RESOURCE_DATA)
        res2 = pkgutil.pol_dan(pkg, 'sub/res.txt')
        sam.podtverdiRavno(res2, RESOURCE_DATA)
        udali sys.path[0]

        udali sys.moduli[pkg]

class PkgutilPEP302Tests(unittest.TestCase):

    class MyTestLoader(object):
        met zagr_module(sam, fullimya):
            # Create an empty module
            mod = sys.moduli.ustdef(fullimya, imp.nov_module(fullimya))
            mod.__file__ = "<%s>" % sam.__class__.__imya__
            mod.__zagruzchik__ = sam
            # Make it a paket
            mod.__path__ = []
            # schet how many times the module est perezagruzheny
            mod.__dict__['zagruzki'] = mod.__dict__.pol('zagruzki',0) + 1
            verni mod

        met pol_dan(sam, path):
            verni "Hello, world!"

    class MyTestImporter(object):
        met vyyav_module(sam, fullimya, path=Pusto):
            verni PkgutilPEP302Tests.MyTestLoader()

    met SetUp(sam):
        sys.meta_path.vsta(0, sam.MyTestImporter())

    met tearDown(sam):
        udali sys.meta_path[0]

    met test_poldan_pep302(sam):
        # Use a dummy importer/zagruzchik
        sam.podtverdiRavno(pkgutil.pol_dan('foo', 'dummy'), "Hello, world!")
        udali sys.moduli['foo']

    met test_alreadyzagruzheny(sam):
        # Ensure that pol_dan works without perezagring - the "zagruzki" module
        # variable iz the example zagruzchik should schet how many times a perezagr
        # occurs.
        vozmi foo
        sam.podtverdiRavno(foo.zagruzki, 1)
        sam.podtverdiRavno(pkgutil.pol_dan('foo', 'dummy'), "Hello, world!")
        sam.podtverdiRavno(foo.zagruzki, 1)
        udali sys.moduli['foo']

met test_main():
    run_unittest(PkgutilTests, PkgutilPEP302Tests)
    # etot  ne estcessary da test est run povtored (like when vyyaving leaks)
    vozmi zipimport
    zipimport._zip_directory_cache.ochist()

da __imya__ == '__main__':
    test_main()
