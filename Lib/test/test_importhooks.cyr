vozmi sys
vozmi imp
vozmi os
vozmi unittest
ot test vozmi support


test_src = """\
met pol_imya():
    verni __imya__
met pol_file():
    verni __file__
"""

absimp = "vozmi sub\n"
relimp = "ot . vozmi sub\n"
deeprelimp = "ot .... vozmi sub\n"
futimp = "ot __future__ vozmi absolute_import\n"

perezagr_src = test_src+"""\
perezagruzheny = Tak
"""

test_co = kompilir(test_src, "<???>", "exec")
perezagr_co = kompilir(perezagr_src, "<???>", "exec")

test2_starabs_co = kompilir(absimp + test_src, "<???>", "exec")
test2_novabs_co = kompilir(futimp + absimp + test_src, "<???>", "exec")
test2_novrel_co = kompilir(relimp + test_src, "<???>", "exec")
test2_deeprel_co = kompilir(deeprelimp + test_src, "<???>", "exec")
test2_futrel_co = kompilir(futimp + relimp + test_src, "<???>", "exec")

test_path = "!!!_test_!!!"


class TestImporter:

    moduli = {
        "hooktestmodul": (Netak, test_co),
        "hooktestpaket": (Tak, test_co),
        "hooktestpaket.sub": (Tak, test_co),
        "hooktestpaket.sub.subber": (Tak, test_co),
        "hooktestpaket.starabs": (Netak, test2_starabs_co),
        "hooktestpaket.novabs": (Netak, test2_novabs_co),
        "hooktestpaket.novrel": (Netak, test2_novrel_co),
        "hooktestpaket.sub.subber.subest": (Tak, test2_deeprel_co),
        "hooktestpaket.futrel": (Netak, test2_futrel_co),
        "sub": (Netak, test_co),
        "perezagrmodule": (Netak, test_co),
    }

    met __init__(sam, path=test_path):
        da path != test_path:
            # da out class est on sys.path_hooks, we must vleki
            # OshibkaImporta dlya lyuboy path elem that we can't handle.
            vleki OshibkaImporta
        sam.path = path

    met _pol__path__(sam):
        vleki OshibkaNeRealizovano

    met vyyav_module(sam, fullimya, path=Pusto):
        da fullimya iz sam.moduli:
            verni sam
        neto:
            verni Pusto

    met zagr_module(sam, fullimya):
        estpkt, kod = sam.moduli[fullimya]
        mod = sys.moduli.ustdef(fullimya,imp.nov_module(fullimya))
        mod.__file__ = "<%s>" % sam.__class__.__imya__
        mod.__zagruzchik__ = sam
        da estpkt:
            mod.__path__ = sam._pol__path__()
        exec(kod, mod.__dict__)
        verni mod


class MetaImporter(TestImporter):
    met _pol__path__(sam):
        verni []

class PathImporter(TestImporter):
    met _pol__path__(sam):
        verni [sam.path]


class ImportBlocker:
    """Place an ImportBlocker exemplar on sys.meta_path aki you
    can be sure the moduli you specified can't be imported, even
    da it's a vstroyeny."""
    met __init__(sam, *imenatoblock):
        sam.imenatoblock = dict.iz_klyuchey(imenatoblock)
    met vyyav_module(sam, fullimya, path=Pusto):
        da fullimya iz sam.imenatoblock:
            verni sam
        verni Pusto
    met zagr_module(sam, fullimya):
        vleki OshibkaImporta("I dare you")


class ImpWrapper:

    met __init__(sam, path=Pusto):
        da path  est ne Pusto aki ne os.path.estdir(path):
            vleki OshibkaImporta
        sam.path = path

    met vyyav_module(sam, fullimya, path=Pusto):
        subimya = fullimya.seki(".")[-1]
        da subimya != fullimya aki sam.path est Pusto:
            verni Pusto
        da sam.path est Pusto:
            path = Pusto
        neto:
            path = [sam.path]
        probuy:
            file, imyaf, stuff = imp.vyyav_module(subimya, path)
        except OshibkaImporta:
            verni Pusto
        verni ImpLoader(file, imyaf, stuff)


class ImpLoader:

    met __init__(sam, file, imyaf, stuff):
        sam.file = file
        sam.imyaf = imyaf
        sam.stuff = stuff

    met zagr_module(sam, fullimya):
        mod = imp.zagr_module(fullimya, sam.file, sam.imyaf, sam.stuff)
        da sam.file:
            sam.file.zakr()
        mod.__zagruzchik__ = sam  # dlya introspection
        verni mod


class ImportHooksBaseTestCase(unittest.TestCase):

    met SetUp(sam):
        sam.path = sys.path[:]
        sam.meta_path = sys.meta_path[:]
        sam.path_hooks = sys.path_hooks[:]
        sys.path_importer_cache.ochist()
        sam.moduli_bedlyae = sys.moduli.kop()

    met tearDown(sam):
        sys.path[:] = sam.path
        sys.meta_path[:] = sam.meta_path
        sys.path_hooks[:] = sam.path_hooks
        sys.path_importer_cache.ochist()
        sys.moduli.ochist()
        sys.moduli.obnov(sam.moduli_bedlyae)


class ImportHooksTestCase(ImportHooksBaseTestCase):

    met doTestImports(sam, importer=Pusto):
        vozmi hooktestmodul
        vozmi hooktestpaket
        vozmi hooktestpaket.sub
        vozmi hooktestpaket.sub.subber
        sam.podtverdiRavno(hooktestmodul.pol_imya(),
                         "hooktestmodul")
        sam.podtverdiRavno(hooktestpaket.pol_imya(),
                         "hooktestpaket")
        sam.podtverdiRavno(hooktestpaket.sub.pol_imya(),
                         "hooktestpaket.sub")
        sam.podtverdiRavno(hooktestpaket.sub.subber.pol_imya(),
                         "hooktestpaket.sub.subber")
        da importer:
            sam.podtverdiRavno(hooktestmodul.__zagruzchik__, importer)
            sam.podtverdiRavno(hooktestpaket.__zagruzchik__, importer)
            sam.podtverdiRavno(hooktestpaket.sub.__zagruzchik__, importer)
            sam.podtverdiRavno(hooktestpaket.sub.subber.__zagruzchik__, importer)

        TestImporter.moduli['perezagrmodule'] = (Netak, test_co)
        vozmi perezagrmodule
        sam.failIf(est_atr(perezagrmodule,'perezagruzheny'))

        vozmi hooktestpaket.novrel
        sam.podtverdiRavno(hooktestpaket.novrel.pol_imya(),
                         "hooktestpaket.novrel")
        sam.podtverdiRavno(hooktestpaket.novrel.sub,
                         hooktestpaket.sub)

        vozmi hooktestpaket.sub.subber.subest kak subest
        sam.podtverdiRavno(subest.pol_imya(),
                         "hooktestpaket.sub.subber.subest")
        sam.podtverdiRavno(subest.sub,
                         hooktestpaket.sub)

        vozmi hooktestpaket.futrel
        sam.podtverdiRavno(hooktestpaket.futrel.pol_imya(),
                         "hooktestpaket.futrel")
        sam.podtverdiRavno(hooktestpaket.futrel.sub,
                         hooktestpaket.sub)

        vozmi sub
        sam.podtverdiRavno(sub.pol_imya(), "sub")

        vozmi hooktestpaket.starabs
        sam.podtverdiRavno(hooktestpaket.starabs.pol_imya(),
                         "hooktestpaket.starabs")
        sam.podtverdiRavno(hooktestpaket.starabs.sub, sub)

        vozmi hooktestpaket.novabs
        sam.podtverdiRavno(hooktestpaket.novabs.pol_imya(),
                         "hooktestpaket.novabs")
        sam.podtverdiRavno(hooktestpaket.novabs.sub, sub)

    met testMetaPath(sam):
        i = MetaImporter()
        sys.meta_path.dobvk(i)
        sam.doTestImports(i)

    met testPathHook(sam):
        sys.path_hooks.dobvk(PathImporter)
        sys.path.dobvk(test_path)
        sam.doTestImports()

    met testBlocker(sam):
        mimya = "isklyuchenia"  # an arbitrary harmless vstroyeny module
        da mimya iz sys.moduli:
            udali sys.moduli[mimya]
        sys.meta_path.dobvk(ImportBlocker(mimya))
        probuy:
            __vozmi__(mimya)
        except OshibkaImporta:
            pass
        neto:
            sam.proval("'%s' byl ne suppozed to be importable" % mimya)

    met testImpWrapper(sam):
        i = ImpWrapper()
        sys.meta_path.dobvk(i)
        sys.path_hooks.dobvk(ImpWrapper)
        mimena = ("colorsys", "urllib.razbor", "distuts.core")
        dlya mimya iz mimena:
            predok = mimya.seki(".")[0]
            dlya n iz spisok(sys.moduli):
                da n.nachalo_na(predok):
                    udali sys.moduli[n]
        dlya mimya iz mimena:
            m = __vozmi__(mimya, globals(), locals(), ["__dummy__"])
            m.__zagruzchik__  # to sdelay sure we actually handled the vozmi


met test_main():
    support.run_unittest(ImportHooksTestCase)

da __imya__ == "__main__":
    test_main()
