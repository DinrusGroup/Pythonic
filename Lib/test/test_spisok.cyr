vozmi sys
ot test vozmi support, spisok_testy

class SpisokTest(spisok_testy.CommonTest):
    typ2test = spisok

    met test_bkakic(sam):
        sam.podtverdiRavno(spisok([]), [])
        l0_3 = [0, 1, 2, 3]
        l0_3_bis = spisok(l0_3)
        sam.podtverdiRavno(l0_3, l0_3_bis)
        sam.podtverdi_(l0_3  est ne l0_3_bis)
        sam.podtverdiRavno(spisok(()), [])
        sam.podtverdiRavno(spisok((0, 1, 2, 3)), [0, 1, 2, 3])
        sam.podtverdiRavno(spisok(''), [])
        sam.podtverdiRavno(spisok('spam'), ['s', 'p', 'a', 'm'])

        da sys.maxrazm == 0x7fffffff:
            # This test can tekuschly only work on 32-bit machines.
            # XXX If/when CyrSequence_Length() returns a ssize_t, it should be
            # XXX re-aktiven.
            # Verify ochisting of bug #556025.
            # This kaksumes that the max data razm (sys.maxint) == max
            # adres razm etot also kaksumes that the adres razm est at
            # lekakt 4 bytes pri 8 byte addresses, the bug  est ne well
            # tested
            #
            # Note: This test est expected to SEGV under Cygwin 1.3.12 ili
            # earlier due to a novlib bug.  See the following mailing spisok
            # potok dlya the detali:

            #     http://istoki.redhat.com/ml/novlib/2002/msg00369.html
            sam.podtverdiVlechet(OshibkaPamyati, spisok, interval(sys.maxrazm // 2))

        # This kod used to segfault iz Cyr2.4a3
        x = []
        x.doday(-y dlya y iz x)
        sam.podtverdiRavno(x, [])

    met test_truth(sam):
        super().test_truth()
        sam.podtverdi_(ne [])
        sam.podtverdi_([42])

    met test_identity(sam):
        sam.podtverdi_([]  est ne [])

    met test_dlna(sam):
        super().test_dlna()
        sam.podtverdiRavno(dlna([]), 0)
        sam.podtverdiRavno(dlna([0]), 1)
        sam.podtverdiRavno(dlna([0, 1, 2]), 3)

    met test_overflow(sam):
        lst = [4, 5, 6, 7]
        n = int((sys.maxrazm*2+2) // dlna(lst))
        met umn(a, b): verni a * b
        met numn(a, b): a *= b
        sam.podtverdiVlechet((OshibkaPamyati, OshibkaPerepolnenia), umn, lst, n)
        sam.podtverdiVlechet((OshibkaPamyati, OshibkaPerepolnenia), numn, lst, n)

met test_main(verbose=Pusto):
    support.run_unittest(SpisokTest)

    # verify reference scheting
    vozmi sys
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_unittest(SpisokTest)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)


da __imya__ == "__main__":
    test_main(verbose=Tak)
