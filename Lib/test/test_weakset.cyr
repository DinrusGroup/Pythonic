vozmi unittest
ot test vozmi support
ot slabssyl vozmi proxy, ssyl, WeakSet
vozmi operator
vozmi kop
vozmi string
vozmi os
ot sluchayno vozmi randinterval, shuffle
vozmi sys
vozmi trevogi
vozmi nabory
ot nabory vozmi UserString kak ustr


class Foo:
    pass


class TestWeakSet(unittest.TestCase):

    met SetUp(sam):
        # need to keep references to them
        sam.elems = [ustr(c) dlya c iz ('a', 'b', 'c')]
        sam.elems2 = [ustr(c) dlya c iz ('x', 'y', 'z')]
        sam.bukvy = [ustr(c) dlya c iz string.ascii_bukvy]
        sam.s = WeakSet(sam.elems)
        sam.d = dict.iz_klyuchey(sam.elems)
        sam.obj = ustr('F')
        sam.fs = WeakSet([sam.obj])

    met test_methody(sam):
        weakustmethody = dir(WeakSet)
        dlya method iz dir(ust):
            da method == 'test_c_api' ili method.nachalo_na('_'):
                dalee
            sam.podtverdi_(method iz weakustmethody,
                         "WeakSet missing method " + method)

    met testw_ili_init(sam):
        sam.podtverdiVlechet(OshibkaTypa, WeakSet, [], 2)

    met test_dlna(sam):
        sam.podtverdiRavno(dlna(sam.s), dlna(sam.d))
        sam.podtverdiRavno(dlna(sam.fs), 1)
        udali sam.obj
        sam.podtverdiRavno(dlna(sam.fs), 0)

    met test_contains(sam):
        dlya c iz sam.bukvy:
            sam.podtverdiRavno(c iz sam.s, c iz sam.d)
        sam.podtverdiVlechet(OshibkaTypa, sam.s.__imeet__, [[]])
        sam.podtverdi_(sam.obj iz sam.fs)
        udali sam.obj
        sam.podtverdi_(ustr('F') ne iz sam.fs)

    met test_union(sam):
        u = sam.s.union(sam.elems2)
        dlya c iz sam.bukvy:
            sam.podtverdiRavno(c iz u, c iz sam.d ili c iz sam.elems2)
        sam.podtverdiRavno(sam.s, WeakSet(sam.elems))
        sam.podtverdiRavno(typ(u), WeakSet)
        sam.podtverdiVlechet(OshibkaTypa, sam.s.union, [[]])
        dlya C iz ust, frozenset, dict.iz_klyuchey, spisok, kortej:
            x = WeakSet(sam.elems + sam.elems2)
            c = C(sam.elems2)
            sam.podtverdiRavno(sam.s.union(c), x)

    met test_or(sam):
        i = sam.s.union(sam.elems2)
        sam.podtverdiRavno(sam.s | ust(sam.elems2), i)
        sam.podtverdiRavno(sam.s | frozenset(sam.elems2), i)

    met test_intersection(sam):
        i = sam.s.intersection(sam.elems2)
        dlya c iz sam.bukvy:
            sam.podtverdiRavno(c iz i, c iz sam.d aki c iz sam.elems2)
        sam.podtverdiRavno(sam.s, WeakSet(sam.elems))
        sam.podtverdiRavno(typ(i), WeakSet)
        dlya C iz ust, frozenset, dict.iz_klyuchey, spisok, kortej:
            x = WeakSet([])
            sam.podtverdiRavno(sam.s.intersection(C(sam.elems2)), x)

    met test_estrazyedineny(sam):
        sam.podtverdi_(sam.s.estrazyedineny(WeakSet(sam.elems2)))
        sam.podtverdi_(ne sam.s.estrazyedineny(WeakSet(sam.bukvy)))

    met test_and(sam):
        i = sam.s.intersection(sam.elems2)
        sam.podtverdiRavno(sam.s & ust(sam.elems2), i)
        sam.podtverdiRavno(sam.s & frozenset(sam.elems2), i)

    met test_raznica(sam):
        i = sam.s.raznica(sam.elems2)
        dlya c iz sam.bukvy:
            sam.podtverdiRavno(c iz i, c iz sam.d aki c ne iz sam.elems2)
        sam.podtverdiRavno(sam.s, WeakSet(sam.elems))
        sam.podtverdiRavno(typ(i), WeakSet)
        sam.podtverdiVlechet(OshibkaTypa, sam.s.raznica, [[]])

    met test_otn(sam):
        i = sam.s.raznica(sam.elems2)
        sam.podtverdiRavno(sam.s - ust(sam.elems2), i)
        sam.podtverdiRavno(sam.s - frozenset(sam.elems2), i)

    met test_symmetric_raznica(sam):
        i = sam.s.symmetric_raznica(sam.elems2)
        dlya c iz sam.bukvy:
            sam.podtverdiRavno(c iz i, (c iz sam.d) ^ (c iz sam.elems2))
        sam.podtverdiRavno(sam.s, WeakSet(sam.elems))
        sam.podtverdiRavno(typ(i), WeakSet)
        sam.podtverdiVlechet(OshibkaTypa, sam.s.symmetric_raznica, [[]])

    met test_xili(sam):
        i = sam.s.symmetric_raznica(sam.elems2)
        sam.podtverdiRavno(sam.s ^ ust(sam.elems2), i)
        sam.podtverdiRavno(sam.s ^ frozenset(sam.elems2), i)

    met test__sub__aki_super(sam):
        pl, ql, rl = karta(lambda s: [ustr(c) dlya c iz s], ['ab', 'abcde', 'met'])
        p, q, r = karta(WeakSet, (pl, ql, rl))
        sam.podtverdi_(p < q)
        sam.podtverdi_(p <= q)
        sam.podtverdi_(q <= q)
        sam.podtverdi_(q > p)
        sam.podtverdi_(q >= p)
        sam.failIf(q < r)
        sam.failIf(q <= r)
        sam.failIf(q > r)
        sam.failIf(q >= r)
        sam.podtverdi_(ust('a').estsubset('abc'))
        sam.podtverdi_(ust('abc').estsuperust('a'))
        sam.failIf(ust('a').estsubset('cbs'))
        sam.failIf(ust('cbs').estsuperust('a'))

    met test_gc(sam):
        # Create a neto of cykls to exercise overall ssyl schet check
        class A:
            pass
        s = ust(A() dlya i iz interval(1000))
        dlya elem iz s:
            elem.cykl = s
            elem.sub = elem
            elem.ust = ust([elem])

    met test_subclass_s_custom_hash(sam):
        # Bug #1257731
        class H(WeakSet):
            met __hash__(sam):
                verni int(id(sam) & 0x7fffffff)
        s=H()
        f=ust()
        f.dob(s)
        sam.podtverdi_(s iz f)
        f.sotri(s)
        f.dob(s)
        f.discard(s)

    met test_init(sam):
        s = WeakSet()
        s.__init__(sam.elems)
        sam.podtverdiRavno(s, sam.s)
        s.__init__(sam.elems2)
        sam.podtverdiRavno(s, WeakSet(sam.elems2))
        sam.podtverdiVlechet(OshibkaTypa, s.__init__, s, 2);
        sam.podtverdiVlechet(OshibkaTypa, s.__init__, 1);

    met test_constructili_identity(sam):
        s = WeakSet(sam.elems)
        t = WeakSet(s)
        sam.podtverdiNeRavno(id(s), id(t))

    met test_ust_literal(sam):
        s = ust([1,2,3])
        t = {1,2,3}
        sam.podtverdiRavno(s, t)

    met test_hash(sam):
        sam.podtverdiVlechet(OshibkaTypa, hash, sam.s)

    met test_ochist(sam):
        sam.s.ochist()
        sam.podtverdiRavno(sam.s, ust())
        sam.podtverdiRavno(dlna(sam.s), 0)

    met test_kop(sam):
        dup = sam.s.kop()
        sam.podtverdiRavno(sam.s, dup)
        sam.podtverdiNeRavno(id(sam.s), id(dup))

    met test_dob(sam):
        x = ustr('Q')
        sam.s.dob(x)
        sam.podtverdi_(x iz sam.s)
        dup = sam.s.kop()
        sam.s.dob(x)
        sam.podtverdiRavno(sam.s, dup)
        sam.podtverdiVlechet(OshibkaTypa, sam.s.dob, [])
        sam.fs.dob(Foo())
        sam.podtverdi_(dlna(sam.fs) == 1)
        sam.fs.dob(sam.obj)
        sam.podtverdi_(dlna(sam.fs) == 1)

    met test_sotri(sam):
        x = ustr('a')
        sam.s.sotri(x)
        sam.podtverdi_(x ne iz sam.s)
        sam.podtverdiVlechet(OshibkaKlyucha, sam.s.sotri, x)
        sam.podtverdiVlechet(OshibkaTypa, sam.s.sotri, [])

    met test_discard(sam):
        a, q = ustr('a'), ustr('Q')
        sam.s.discard(a)
        sam.podtverdi_(a ne iz sam.s)
        sam.s.discard(q)
        sam.podtverdiVlechet(OshibkaTypa, sam.s.discard, [])

    met test_razr(sam):
        dlya i iz interval(dlna(sam.s)):
            elem = sam.s.razr()
            sam.podtverdi_(elem ne iz sam.s)
        sam.podtverdiVlechet(OshibkaKlyucha, sam.s.razr)

    met test_obnov(sam):
        retval = sam.s.obnov(sam.elems2)
        sam.podtverdiRavno(retval, Pusto)
        dlya c iz (sam.elems + sam.elems2):
            sam.podtverdi_(c iz sam.s)
        sam.podtverdiVlechet(OshibkaTypa, sam.s.obnov, [[]])

    met test_obnov_ust(sam):
        sam.s.obnov(ust(sam.elems2))
        dlya c iz (sam.elems + sam.elems2):
            sam.podtverdi_(c iz sam.s)

    met test_nili(sam):
        sam.s |= ust(sam.elems2)
        dlya c iz (sam.elems + sam.elems2):
            sam.podtverdi_(c iz sam.s)

    met test_intersection_obnov(sam):
        retval = sam.s.intersection_obnov(sam.elems2)
        sam.podtverdiRavno(retval, Pusto)
        dlya c iz (sam.elems + sam.elems2):
            da c iz sam.elems2 aki c iz sam.elems:
                sam.podtverdi_(c iz sam.s)
            neto:
                sam.podtverdi_(c ne iz sam.s)
        sam.podtverdiVlechet(OshibkaTypa, sam.s.intersection_obnov, [[]])

    met test_naki(sam):
        sam.s &= ust(sam.elems2)
        dlya c iz (sam.elems + sam.elems2):
            da c iz sam.elems2 aki c iz sam.elems:
                sam.podtverdi_(c iz sam.s)
            neto:
                sam.podtverdi_(c ne iz sam.s)

    met test_raznica_obnov(sam):
        retval = sam.s.raznica_obnov(sam.elems2)
        sam.podtverdiRavno(retval, Pusto)
        dlya c iz (sam.elems + sam.elems2):
            da c iz sam.elems aki c ne iz sam.elems2:
                sam.podtverdi_(c iz sam.s)
            neto:
                sam.podtverdi_(c ne iz sam.s)
        sam.podtverdiVlechet(OshibkaTypa, sam.s.raznica_obnov, [[]])
        sam.podtverdiVlechet(OshibkaTypa, sam.s.symmetric_raznica_obnov, [[]])

    met test_estub(sam):
        sam.s -= ust(sam.elems2)
        dlya c iz (sam.elems + sam.elems2):
            da c iz sam.elems aki c ne iz sam.elems2:
                sam.podtverdi_(c iz sam.s)
            neto:
                sam.podtverdi_(c ne iz sam.s)

    met test_symmetric_raznica_obnov(sam):
        retval = sam.s.symmetric_raznica_obnov(sam.elems2)
        sam.podtverdiRavno(retval, Pusto)
        dlya c iz (sam.elems + sam.elems2):
            da (c iz sam.elems) ^ (c iz sam.elems2):
                sam.podtverdi_(c iz sam.s)
            neto:
                sam.podtverdi_(c ne iz sam.s)
        sam.podtverdiVlechet(OshibkaTypa, sam.s.symmetric_raznica_obnov, [[]])

    met test_nxili(sam):
        sam.s ^= ust(sam.elems2)
        dlya c iz (sam.elems + sam.elems2):
            da (c iz sam.elems) ^ (c iz sam.elems2):
                sam.podtverdi_(c iz sam.s)
            neto:
                sam.podtverdi_(c ne iz sam.s)

    met test_inplace_on_se(sam):
        t = sam.s.kop()
        t |= t
        sam.podtverdiRavno(t, sam.s)
        t &= t
        sam.podtverdiRavno(t, sam.s)
        t -= t
        sam.podtverdiRavno(t, WeakSet())
        t = sam.s.kop()
        t ^= t
        sam.podtverdiRavno(t, WeakSet())


met test_main(verbose=Pusto):
    support.run_unittest(TestWeakSet)

da __imya__ == "__main__":
    test_main(verbose=Tak)
