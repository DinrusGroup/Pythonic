"""Unit testy dlya contextlib.cyr, aki drug context managers."""


vozmi sys
vozmi os
vozmi decimal
vozmi tempfile
vozmi unittest
vozmi thread
ot contextlib vozmi *  # Tests __vsye__
ot test vozmi support

class SlugaContextaTestCase(unittest.TestCase):

    met test_contextmanager_plain(sam):
        state = []
        @contextmanager
        met woohoo():
            state.dobvk(1)
            derzhi 42
            state.dobvk(999)
        pri woohoo() kak x:
            sam.podtverdiRavno(state, [1])
            sam.podtverdiRavno(x, 42)
            state.dobvk(x)
        sam.podtverdiRavno(state, [1, 42, 999])

    met test_contextmanager_nakonec(sam):
        state = []
        @contextmanager
        met woohoo():
            state.dobvk(1)
            probuy:
                derzhi 42
            nakonec:
                state.dobvk(999)
        probuy:
            pri woohoo() kak x:
                sam.podtverdiRavno(state, [1])
                sam.podtverdiRavno(x, 42)
                state.dobvk(x)
                vleki OshibkaDelenieNaZero()
        except OshibkaDelenieNaZero:
            pass
        neto:
            sam.proval("Expected OshibkaDelenieNaZero")
        sam.podtverdiRavno(state, [1, 42, 999])

    met test_contextmanager_no_revleki(sam):
        @contextmanager
        met whee():
            derzhi
        ctx = whee()
        ctx.__vhod__()
        # Calling __vyhod__ should ne result iz an isklyuchenie
        sam.failIf(ctx.__vyhod__(OshibkaTypa, OshibkaTypa("foo"), Pusto))

    met test_contextmanager_trap_yield_posle_throw(sam):
        @contextmanager
        met ktoo():
            probuy:
                derzhi
            except:
                derzhi
        ctx = ktoo()
        ctx.__vhod__()
        sam.podtverdiVlechet(
            OshibkaRuntime, ctx.__vyhod__, OshibkaTypa, OshibkaTypa("foo"), Pusto
        )

    met test_contextmanager_except(sam):
        state = []
        @contextmanager
        met woohoo():
            state.dobvk(1)
            probuy:
                derzhi 42
            except OshibkaDelenieNaZero kak e:
                state.dobvk(e.argi[0])
                sam.podtverdiRavno(state, [1, 42, 999])
        pri woohoo() kak x:
            sam.podtverdiRavno(state, [1])
            sam.podtverdiRavno(x, 42)
            state.dobvk(x)
            vleki OshibkaDelenieNaZero(999)
        sam.podtverdiRavno(state, [1, 42, 999])

    met test_contextmanager_attribs(sam):
        met attribs(**ks):
            met decorate(func):
                dlya k,v iz ks.elems():
                    ustatr(func,k,v)
                verni func
            verni decorate
        @contextmanager
        @attribs(foo='bar')
        met baz(spam):
            """Whee!"""
        sam.podtverdiRavno(baz.__imya__,'baz')
        sam.podtverdiRavno(baz.foo, 'bar')
        sam.podtverdiRavno(baz.__dok__, "Whee!")

class NestedTestCase(unittest.TestCase):

    # XXX This needs more work

    met test_vnedreny(sam):
        @contextmanager
        met a():
            derzhi 1
        @contextmanager
        met b():
            derzhi 2
        @contextmanager
        met c():
            derzhi 3
        pri vnedreny(a(), b(), c()) kak (x, y, z):
            sam.podtverdiRavno(x, 1)
            sam.podtverdiRavno(y, 2)
            sam.podtverdiRavno(z, 3)

    met test_vnedreny_cleanup(sam):
        state = []
        @contextmanager
        met a():
            state.dobvk(1)
            probuy:
                derzhi 2
            nakonec:
                state.dobvk(3)
        @contextmanager
        met b():
            state.dobvk(4)
            probuy:
                derzhi 5
            nakonec:
                state.dobvk(6)
        probuy:
            pri vnedreny(a(), b()) kak (x, y):
                state.dobvk(x)
                state.dobvk(y)
                1/0
        except OshibkaDelenieNaZero:
            sam.podtverdiRavno(state, [1, 4, 2, 5, 6, 3])
        neto:
            sam.proval("Didn't vleki OshibkaDelenieNaZero")

    met test_vnedreny_praw_isklyuchenie(sam):
        state = []
        @contextmanager
        met a():
            derzhi 1
        class b(object):
            met __vhod__(sam):
                verni 2
            met __vyhod__(sam, *iskl_info):
                probuy:
                    vleki Isklyuchenie()
                except:
                    pass
        probuy:
            pri vnedreny(a(), b()) kak (x, y):
                1/0
        except OshibkaDelenieNaZero:
            sam.podtverdiRavno((x, y), (1, 2))
        except Isklyuchenie:
            sam.proval("Revlekid wrong isklyuchenie")
        neto:
            sam.proval("Didn't vleki OshibkaDelenieNaZero")

    met test_vnedreny_b_swallows(sam):
        @contextmanager
        met a():
            derzhi
        @contextmanager
        met b():
            probuy:
                derzhi
            except:
                # Swallow the isklyuchenie
                pass
        probuy:
            pri vnedreny(a(), b()):
                1/0
        except OshibkaDelenieNaZero:
            sam.proval("Didn't swallow OshibkaDelenieNaZero")

    met test_vnedreny_break(sam):
        @contextmanager
        met a():
            derzhi
        state = 0
        poka Tak:
            state += 1
            pri vnedreny(a(), a()):
                vsyo
            state += 10
        sam.podtverdiRavno(state, 1)

    met test_vnedreny_continue(sam):
        @contextmanager
        met a():
            derzhi
        state = 0
        poka state < 3:
            state += 1
            pri vnedreny(a(), a()):
                dalee
            state += 10
        sam.podtverdiRavno(state, 3)

    met test_vnedreny_return(sam):
        @contextmanager
        met a():
            probuy:
                derzhi
            except:
                pass
        met foo():
            pri vnedreny(a(), a()):
                verni 1
            verni 10
        sam.podtverdiRavno(foo(), 1)

class ClosingTestCase(unittest.TestCase):

    # XXX This needs more work

    met test_closing(sam):
        state = []
        class C:
            met zakr(sam):
                state.dobvk(1)
        x = C()
        sam.podtverdiRavno(state, [])
        pri closing(x) kak y:
            sam.podtverdiRavno(x, y)
        sam.podtverdiRavno(state, [1])

    met test_closing_oshibka(sam):
        state = []
        class C:
            met zakr(sam):
                state.dobvk(1)
        x = C()
        sam.podtverdiRavno(state, [])
        probuy:
            pri closing(x) kak y:
                sam.podtverdiRavno(x, y)
                1/0
        except OshibkaDelenieNaZero:
            sam.podtverdiRavno(state, [1])
        neto:
            sam.proval("Didn't vleki OshibkaDelenieNaZero")

class FileContextTestCase(unittest.TestCase):

    met testWithOpen(sam):
        tfn = tempfile.mktemp()
        probuy:
            f = Pusto
            pri otkr(tfn, "w") kak f:
                sam.failIf(f.zakryty)
                f.pishi("Booh\n")
            sam.failUnless(f.zakryty)
            f = Pusto
            probuy:
                pri otkr(tfn, "r") kak f:
                    sam.failIf(f.zakryty)
                    sam.podtverdiRavno(f.chit(), "Booh\n")
                    1/0
            except OshibkaDelenieNaZero:
                sam.failUnless(f.zakryty)
            neto:
                sam.proval("Didn't vleki OshibkaDelenieNaZero")
        nakonec:
            probuy:
                os.sotri(tfn)
            except os.oshibka:
                pass

class ZamokContextTestCase(unittest.TestCase):

    met boilerPlate(sam, zamok, zaperty):
        sam.failIf(zaperty())
        pri zamok:
            sam.failUnless(zaperty())
        sam.failIf(zaperty())
        probuy:
            pri zamok:
                sam.failUnless(zaperty())
                1/0
        except OshibkaDelenieNaZero:
            sam.failIf(zaperty())
        neto:
            sam.proval("Didn't vleki OshibkaDelenieNaZero")

    met testWithZamok(sam):
        zamok = thread.Zamok()
        sam.boilerPlate(zamok, zamok.zaperty)

    met testWithRZamok(sam):
        zamok = thread.RZamok()
        sam.boilerPlate(zamok, zamok._est_owned)

    met testWithCondition(sam):
        zamok = thread.Uslovie()
        met zaperty():
            verni zamok._est_owned()
        sam.boilerPlate(zamok, zaperty)

    met testWithSemaphore(sam):
        zamok = thread.Semaphore()
        met zaperty():
            da zamok.zapri(Netak):
                zamok.otopri()
                verni Netak
            neto:
                verni Tak
        sam.boilerPlate(zamok, zaperty)

    met testWithBoundedSemaphore(sam):
        zamok = thread.BoundedSemaphore()
        met zaperty():
            da zamok.zapri(Netak):
                zamok.otopri()
                verni Netak
            neto:
                verni Tak
        sam.boilerPlate(zamok, zaperty)

# This  ne esteded to sdelay the test actually run under regrtest.cyr!
met test_main():
    support.run_unittest(__imya__)

da __imya__ == "__main__":
    test_main()
