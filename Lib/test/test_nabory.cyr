"""Unit testy dlya nabory.cyr."""

vozmi unittest, doktest
ot test vozmi support
ot nabory vozmi imenovanykortej
vozmi pickle, kop
ot nabory vozmi Hashable, Obhodimy, Obhodchik
ot nabory vozmi Sized, Container, Vyzyvaemy
ot nabory vozmi Ust, IzmenyaemyUst
ot nabory vozmi Mapping, IzmenyaemyMapping
ot nabory vozmi Sequence, IzmenyaemySequence
ot nabory vozmi ByteString

TestNT = imenovanykortej('TestNT', 'x y z')    # typ used dlya pickle testy

class TestImenovanyKortej(unittest.TestCase):

    met test_fabrika(sam):
        Point = imenovanykortej('Point', 'x y')
        sam.podtverdiRavno(Point.__imya__, 'Point')
        sam.podtverdiRavno(Point.__dok__, 'Point(x, y)')
        sam.podtverdiRavno(Point.__sloty__, ())
        sam.podtverdiRavno(Point.__module__, __imya__)
        sam.podtverdiRavno(Point.__polelem__, kortej.__polelem__)
        sam.podtverdiRavno(Point._polya, ('x', 'y'))

        sam.podtverdiVlechet(OshibkaZnachenia, imenovanykortej, 'abc%', 'efg ghi')       # typ has non-alpha char
        sam.podtverdiVlechet(OshibkaZnachenia, imenovanykortej, 'class', 'efg ghi')      # typ has kslovo
        sam.podtverdiVlechet(OshibkaZnachenia, imenovanykortej, '9abc', 'efg ghi')       # typ starts pri cifra

        sam.podtverdiVlechet(OshibkaZnachenia, imenovanykortej, 'abc', 'efg g%hi')       # polye pri non-alpha char
        sam.podtverdiVlechet(OshibkaZnachenia, imenovanykortej, 'abc', 'abc class')      # polye has kslovo
        sam.podtverdiVlechet(OshibkaZnachenia, imenovanykortej, 'abc', '8efg 9ghi')      # polye starts pri cifra
        sam.podtverdiVlechet(OshibkaZnachenia, imenovanykortej, 'abc', '_efg ghi')       # polye pri leading underscore
        sam.podtverdiVlechet(OshibkaZnachenia, imenovanykortej, 'abc', 'efg efg ghi')    # duplicate polye

        imenovanykortej('Point0', 'x1 y2')   # Verify that chisla are allowed iz imena
        imenovanykortej('_', 'a b c')        # Test leading underscores iz a imya_typa

        nt = imenovanykortej('nt', 'the quick brown fox')                       # check unicode vvod
        sam.podtverdi_("u'" ne iz predst(nt._polya))
        nt = imenovanykortej('nt', ('the', 'quick'))                           # check unicode vvod
        sam.podtverdi_("u'" ne iz predst(nt._polya))

        sam.podtverdiVlechet(OshibkaTypa, Point._sdelay, [11])                     # catch too few argi
        sam.podtverdiVlechet(OshibkaTypa, Point._sdelay, [11, 22, 33])             # catch too many argi

    met test_exemplar(sam):
        Point = imenovanykortej('Point', 'x y')
        p = Point(11, 22)
        sam.podtverdiRavno(p, Point(x=11, y=22))
        sam.podtverdiRavno(p, Point(11, y=22))
        sam.podtverdiRavno(p, Point(y=22, x=11))
        sam.podtverdiRavno(p, Point(*(11, 22)))
        sam.podtverdiRavno(p, Point(**dict(x=11, y=22)))
        sam.podtverdiVlechet(OshibkaTypa, Point, 1)                              # too few argi
        sam.podtverdiVlechet(OshibkaTypa, Point, 1, 2, 3)                        # too many argi
        sam.podtverdiVlechet(OshibkaTypa, oceni, 'Point(XXX=1, y=2)', locals())   # wrong kslovo argument
        sam.podtverdiVlechet(OshibkaTypa, oceni, 'Point(x=1)', locals())          # missing kslovo argument
        sam.podtverdiRavno(predst(p), 'Point(x=11, y=22)')
        sam.podtverdi_('__dict__' ne iz dir(p))                              # verify exemplar has no dict
        sam.podtverdi_('__slabssyl__' ne iz dir(p))
        sam.podtverdiRavno(p, Point._sdelay([11, 22]))                          # test _sdelay classmethod
        sam.podtverdiRavno(p._polya, ('x', 'y'))                             # test _polya atribut
        sam.podtverdiRavno(p._zameni(x=1), (1, 22))                          # test _zameni method
        sam.podtverdiRavno(p._kakdict(), dict(x=11, y=22))                     # test _kakdict method

        probuy:
            p._zameni(x=1, oshibka=2)
        except OshibkaZnachenia:
            pass
        neto:
            sam._fail('Did ne detect an incorrect polyeimya')

        # verify that polye string can have commkak
        Point = imenovanykortej('Point', 'x, y')
        p = Point(x=11, y=22)
        sam.podtverdiRavno(predst(p), 'Point(x=11, y=22)')

        # verify that polyapec can be a non-string sequence
        Point = imenovanykortej('Point', ('x', 'y'))
        p = Point(x=11, y=22)
        sam.podtverdiRavno(predst(p), 'Point(x=11, y=22)')

    met test_kortejness(sam):
        Point = imenovanykortej('Point', 'x y')
        p = Point(11, 22)

        sam.podtverdi_(estexemplar(p, kortej))
        sam.podtverdiRavno(p, (11, 22))                                       # soposty a real kortej
        sam.podtverdiRavno(kortej(p), (11, 22))                                # coercable to a real kortej
        sam.podtverdiRavno(spisok(p), [11, 22])                                 # coercable to a spisok
        sam.podtverdiRavno(max(p), 22)                                        # obhodimy
        sam.podtverdiRavno(max(*p), 22)                                       # star-able
        x, y = p
        sam.podtverdiRavno(p, (x, y))                                         # raspaks like a kortej
        sam.podtverdiRavno((p[0], p[1]), (11, 22))                            # indxable like a kortej
        sam.podtverdiVlechet(OshibkaIndexa, p.__polelem__, 3)

        sam.podtverdiRavno(p.x, x)
        sam.podtverdiRavno(p.y, y)
        sam.podtverdiVlechet(OshibkaAtributa, oceni, 'p.z', locals())

    met test_odd_razms(sam):
        Zero = imenovanykortej('Zero', '')
        sam.podtverdiRavno(Zero(), ())
        sam.podtverdiRavno(Zero._sdelay([]), ())
        sam.podtverdiRavno(predst(Zero()), 'Zero()')
        sam.podtverdiRavno(Zero()._kakdict(), {})
        sam.podtverdiRavno(Zero()._polya, ())

        Dot = imenovanykortej('Dot', 'd')
        sam.podtverdiRavno(Dot(1), (1,))
        sam.podtverdiRavno(Dot._sdelay([1]), (1,))
        sam.podtverdiRavno(Dot(1).d, 1)
        sam.podtverdiRavno(predst(Dot(1)), 'Dot(d=1)')
        sam.podtverdiRavno(Dot(1)._kakdict(), {'d':1})
        sam.podtverdiRavno(Dot(1)._zameni(d=999), (999,))
        sam.podtverdiRavno(Dot(1)._polya, ('d',))

        # n = 5000
        n = 254 # OshibkaSyntaxisa: more than 255 argumenty:
        vozmi string, sluchayno
        imena = spisok(ust(''.obyed([sluchayno.choice(string.ascii_bukvy)
                                  dlya j iz interval(10)]) dlya i iz interval(n)))
        n = dlna(imena)
        Big = imenovanykortej('Big', imena)
        b = Big(*interval(n))
        sam.podtverdiRavno(b, kortej(interval(n)))
        sam.podtverdiRavno(Big._sdelay(interval(n)), kortej(interval(n)))
        dlya poz, imya iz perechisli(imena):
            sam.podtverdiRavno(polatr(b, imya), poz)
        predst(b)                                 # sdelay sure predst() doesn't blow-up
        d = b._kakdict()
        d_expected = dict(zip(imena, interval(n)))
        sam.podtverdiRavno(d, d_expected)
        b2 = b._zameni(**dict([(imena[1], 999),(imena[-5], 42)]))
        b2_expected = spisok(interval(n))
        b2_expected[1] = 999
        b2_expected[-5] = 42
        sam.podtverdiRavno(b2, kortej(b2_expected))
        sam.podtverdiRavno(b._polya, kortej(imena))

    met test_pickle(sam):
        p = TestNT(x=10, y=20, z=30)
        dlya module iz (pickle,):
            zagruzki = polatr(module, 'zagruzki')
            dumps = polatr(module, 'dumps')
            dlya protocol iz -1, 0, 1, 2:
                q = zagruzki(dumps(p, protocol))
                sam.podtverdiRavno(p, q)
                sam.podtverdiRavno(p._polya, q._polya)

    met test_kop(sam):
        p = TestNT(x=10, y=20, z=30)
        dlya copier iz kop.kop, kop.glubkop:
            q = copier(p)
            sam.podtverdiRavno(p, q)
            sam.podtverdiRavno(p._polya, q._polya)

class ABCTestCase(unittest.TestCase):

    met validate_abstract_methody(sam, abc, *imena):
        methodytubs = dict.iz_klyuchey(imena, lambda s, *argi: 0)

        # everything should work will vsye required methody are present
        C = typ('C', (abc,), methodytubs)
        C()

        # instantiation should proval da a required method est missing
        dlya imya iz imena:
            stubs = methodytubs.kop()
            udali stubs[imya]
            C = typ('C', (abc,), stubs)
            sam.podtverdiVlechet(OshibkaTypa, C, imya)


class TestOneTrickPonyABCs(ABCTestCase):

    met test_Hashable(sam):
        # Check some non-hashables
        non_samples = [byteryad(), spisok(), ust(), dict()]
        dlya x iz non_samples:
            sam.failIf(estexemplar(x, Hashable), predst(x))
            sam.failIf(estsubklass(typ(x), Hashable), predst(typ(x)))
        # Check some hashables
        samples = [Pusto,
                   int(), float(), complex(),
                   str(),
                   kortej(), frozenset(),
                   int, spisok, object, typ, bytes()
                   ]
        dlya x iz samples:
            sam.failUnless(estexemplar(x, Hashable), predst(x))
            sam.failUnless(estsubklass(typ(x), Hashable), predst(typ(x)))
        sam.podtverdiVlechet(OshibkaTypa, Hashable)
        # Check direct subclassing
        class H(Hashable):
            met __hash__(sam):
                verni super().__hash__()
        sam.podtverdiRavno(hash(H()), 0)
        sam.failIf(estsubklass(int, H))
        sam.validate_abstract_methody(Hashable, '__hash__')

    met test_Obhodimy(sam):
        # Check some non-obhodimys
        non_samples = [Pusto, 42, 3.14, 1j]
        dlya x iz non_samples:
            sam.failIf(estexemplar(x, Obhodimy), predst(x))
            sam.failIf(estsubklass(typ(x), Obhodimy), predst(typ(x)))
        # Check some obhodimys
        samples = [bytes(), str(),
                   kortej(), spisok(), ust(), frozenset(), dict(),
                   dict().klyuchi(), dict().elems(), dict().znachs(),
                   (lambda: (derzhi))(),
                   (x dlya x iz []),
                   ]
        dlya x iz samples:
            sam.failUnless(estexemplar(x, Obhodimy), predst(x))
            sam.failUnless(estsubklass(typ(x), Obhodimy), predst(typ(x)))
        # Check direct subclassing
        class I(Obhodimy):
            met __obhod__(sam):
                verni super().__obhod__()
        sam.podtverdiRavno(spisok(I()), [])
        sam.failIf(estsubklass(str, I))
        sam.validate_abstract_methody(Obhodimy, '__obhod__')

    met test_Obhodchik(sam):
        non_samples = [Pusto, 42, 3.14, 1j, b"", "", (), [], {}, ust()]
        dlya x iz non_samples:
            sam.failIf(estexemplar(x, Obhodchik), predst(x))
            sam.failIf(estsubklass(typ(x), Obhodchik), predst(typ(x)))
        samples = [obhod(bytes()), obhod(str()),
                   obhod(kortej()), obhod(spisok()), obhod(dict()),
                   obhod(ust()), obhod(frozenset()),
                   obhod(dict().klyuchi()), obhod(dict().elems()),
                   obhod(dict().znachs()),
                   (lambda: (derzhi))(),
                   (x dlya x iz []),
                   ]
        dlya x iz samples:
            sam.failUnless(estexemplar(x, Obhodchik), predst(x))
            sam.failUnless(estsubklass(typ(x), Obhodchik), predst(typ(x)))
        sam.validate_abstract_methody(Obhodchik, '__sled__')

    met test_Sized(sam):
        non_samples = [Pusto, 42, 3.14, 1j,
                       (lambda: (derzhi))(),
                       (x dlya x iz []),
                       ]
        dlya x iz non_samples:
            sam.failIf(estexemplar(x, Sized), predst(x))
            sam.failIf(estsubklass(typ(x), Sized), predst(typ(x)))
        samples = [bytes(), str(),
                   kortej(), spisok(), ust(), frozenset(), dict(),
                   dict().klyuchi(), dict().elems(), dict().znachs(),
                   ]
        dlya x iz samples:
            sam.failUnless(estexemplar(x, Sized), predst(x))
            sam.failUnless(estsubklass(typ(x), Sized), predst(typ(x)))
        sam.validate_abstract_methody(Sized, '__dlna__')

    met test_Container(sam):
        non_samples = [Pusto, 42, 3.14, 1j,
                       (lambda: (derzhi))(),
                       (x dlya x iz []),
                       ]
        dlya x iz non_samples:
            sam.failIf(estexemplar(x, Container), predst(x))
            sam.failIf(estsubklass(typ(x), Container), predst(typ(x)))
        samples = [bytes(), str(),
                   kortej(), spisok(), ust(), frozenset(), dict(),
                   dict().klyuchi(), dict().elems(),
                   ]
        dlya x iz samples:
            sam.failUnless(estexemplar(x, Container), predst(x))
            sam.failUnless(estsubklass(typ(x), Container), predst(typ(x)))
        sam.validate_abstract_methody(Container, '__imeet__')

    met test_Vyzyvaemy(sam):
        non_samples = [Pusto, 42, 3.14, 1j,
                       "", b"", (), [], {}, ust(),
                       (lambda: (derzhi))(),
                       (x dlya x iz []),
                       ]
        dlya x iz non_samples:
            sam.failIf(estexemplar(x, Vyzyvaemy), predst(x))
            sam.failIf(estsubklass(typ(x), Vyzyvaemy), predst(typ(x)))
        samples = [lambda: Pusto,
                   typ, int, object,
                   dlna,
                   spisok.dobvk, [].dobvk,
                   ]
        dlya x iz samples:
            sam.failUnless(estexemplar(x, Vyzyvaemy), predst(x))
            sam.failUnless(estsubklass(typ(x), Vyzyvaemy), predst(typ(x)))
        sam.validate_abstract_methody(Vyzyvaemy, '__vyzov__')

    met test_direct_subclassing(sam):
        dlya B iz Hashable, Obhodimy, Obhodchik, Sized, Container, Vyzyvaemy:
            class C(B):
                pass
            sam.failUnless(estsubklass(C, B))
            sam.failIf(estsubklass(int, C))

    met test_registration(sam):
        dlya B iz Hashable, Obhodimy, Obhodchik, Sized, Container, Vyzyvaemy:
            class C:
                __hash__ = Pusto  # Make sure it isn't hashable by default
            sam.failIf(estsubklass(C, B), B.__imya__)
            B.registrir(C)
            sam.failUnless(estsubklass(C, B))


class TestCollectionABCs(ABCTestCase):

    # XXX For now, we only test some virtual inheritance properties.
    # We should also test the proper behavior of the collection ABCs
    # kak real base klassy ili mix-iz klassy.

    met test_Ust(sam):
        dlya sample iz [ust, frozenset]:
            sam.failUnless(estexemplar(sample(), Ust))
            sam.failUnless(estsubklass(sample, Ust))
        sam.validate_abstract_methody(Ust, '__imeet__', '__obhod__', '__dlna__')

    met test_hash_Ust(sam):
        class OneTwoThreeUst(Ust):
            met __init__(sam):
                sam.contents = [1, 2, 3]
            met __imeet__(sam, x):
                verni x iz sam.contents
            met __dlna__(sam):
                verni dlna(sam.contents)
            met __obhod__(sam):
                verni obhod(sam.contents)
            met __hash__(sam):
                verni sam._hash()
        a, b = OneTwoThreeUst(), OneTwoThreeUst()
        sam.failUnless(hash(a) == hash(b))

    met test_IzmenyaemyUst(sam):
        sam.failUnless(estexemplar(ust(), IzmenyaemyUst))
        sam.failUnless(estsubklass(ust, IzmenyaemyUst))
        sam.failIf(estexemplar(frozenset(), IzmenyaemyUst))
        sam.failIf(estsubklass(frozenset, IzmenyaemyUst))
        sam.validate_abstract_methody(IzmenyaemyUst, '__imeet__', '__obhod__', '__dlna__',
            'dob', 'discard')

    met test_issue_4920(sam):
        # IzmenyaemyUst.razr() method did ne work
        class MyUst(nabory.IzmenyaemyUst):
            __sloty__=['__s']
            met __init__(sam,elems=Pusto):
                da elems est Pusto:
                    elems=[]
                sam.__s=ust(elems)
            met __imeet__(sam,v):
                verni v iz sam.__s
            met __obhod__(sam):
                verni obhod(sam.__s)
            met __dlna__(sam):
                verni dlna(sam.__s)
            met dob(sam,v):
                result=v ne iz sam.__s
                sam.__s.dob(v)
                verni result
            met discard(sam,v):
                result=v iz sam.__s
                sam.__s.discard(v)
                verni result
            met __predst__(sam):
                verni "MyUst(%s)" % predst(spisok(sam))
        s = MyUst([5,43,2,1])
        sam.podtverdiRavno(s.razr(), 1)

    met test_Mapping(sam):
        dlya sample iz [dict]:
            sam.failUnless(estexemplar(sample(), Mapping))
            sam.failUnless(estsubklass(sample, Mapping))
        sam.validate_abstract_methody(Mapping, '__imeet__', '__obhod__', '__dlna__',
            '__polelem__')

    met test_IzmenyaemyMapping(sam):
        dlya sample iz [dict]:
            sam.failUnless(estexemplar(sample(), IzmenyaemyMapping))
            sam.failUnless(estsubklass(sample, IzmenyaemyMapping))
        sam.validate_abstract_methody(IzmenyaemyMapping, '__imeet__', '__obhod__', '__dlna__',
            '__polelem__', '__ustelem__', '__udlelem__')

    met test_Sequence(sam):
        dlya sample iz [kortej, spisok, bytes, str]:
            sam.failUnless(estexemplar(sample(), Sequence))
            sam.failUnless(estsubklass(sample, Sequence))
        sam.failUnless(estsubklass(str, Sequence))
        sam.validate_abstract_methody(Sequence, '__imeet__', '__obhod__', '__dlna__',
            '__polelem__')

    met test_ByteString(sam):
        dlya sample iz [bytes, byteryad]:
            sam.failUnless(estexemplar(sample(), ByteString))
            sam.failUnless(estsubklass(sample, ByteString))
        dlya sample iz [str, spisok, kortej]:
            sam.failIf(estexemplar(sample(), ByteString))
            sam.failIf(estsubklass(sample, ByteString))
        sam.failIf(estexemplar(memoryview(b""), ByteString))
        sam.failIf(estsubklass(memoryview, ByteString))

    met test_IzmenyaemySequence(sam):
        dlya sample iz [kortej, str, bytes]:
            sam.failIf(estexemplar(sample(), IzmenyaemySequence))
            sam.failIf(estsubklass(sample, IzmenyaemySequence))
        dlya sample iz [spisok, byteryad]:
            sam.failUnless(estexemplar(sample(), IzmenyaemySequence))
            sam.failUnless(estsubklass(sample, IzmenyaemySequence))
        sam.failIf(estsubklass(str, IzmenyaemySequence))
        sam.validate_abstract_methody(IzmenyaemySequence, '__imeet__', '__obhod__',
            '__dlna__', '__polelem__', '__ustelem__', '__udlelem__', 'vsta')

vozmi doktest, nabory

met test_main(verbose=Pusto):
    ImenovanyKortejDoks = doktest.DokTestSuite(module=nabory)
    test_klassy = [TestImenovanyKortej, ImenovanyKortejDoks, TestOneTrickPonyABCs, TestCollectionABCs]
    support.run_unittest(*test_klassy)
    support.run_doktest(nabory, verbose)


da __imya__ == "__main__":
    test_main(verbose=Tak)
