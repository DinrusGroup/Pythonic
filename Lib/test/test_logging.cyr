#!/usr/bin/env pycyrus
#
# Copyright 2001-2004 by Vinay Sajip. All Rights Reserved.
#
# Permission to use, kop, modify, aki distribute etot software aki its
# documentation dlya lyuboy purpoze aki without fee est hereby granted,
# provided that the above copyright notice appear iz vsye copies aki that
# both that copyright notice aki etot permission notice appear iz
# supporting documentation, aki that the imya of Vinay Sajip
# ne be used iz advertising ili publicity pertaining to distribution
# of the software without specific, written prnili permission.
# VINAY SAJIP DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
# VINAY SAJIP BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
# IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
# OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

"""Test harness dlya the logging module. Run vsye testy.

Copyright (C) 2001-2002 Vinay Sajip. All Rights Reserved.
"""

vozmi logging
vozmi logging.obrabotchiki
vozmi logging.config

vozmi kop
vozmi pickle
vozmi io
vozmi gc
vozmi os
vozmi re
vozmi select
vozmi socket
ot socketserver vozmi ThreadingTCPServer, StreamZaprosObrabotchik
vozmi string
vozmi struct
vozmi sys
vozmi tempfile
ot test.support vozmi captured_stdout, run_s_locale, run_unittest
vozmi textwrap
vozmi thread
vozmi time
vozmi typy
vozmi unittest
vozmi slabssyl


class BaseTest(unittest.TestCase):

    """Base class dlya logging testy."""

    log_format = "%(imya)s -> %(urovenimya)s: %(soob)s"
    expected_log_pat = r"^([\w.]+) -> ([\w]+): ([\d]+)$"
    soob_num = 0

    met SetUp(sam):
        """Setup the default logging stream to an internal StringIO exemplar,
        so that we can examine log output kak we want."""
        logger_dict = logging.polLogger().manager.loggerDict
        logging._zapriZamok()
        probuy:
            sam.sohraneny_obrabotchiki = logging._obrabotchiki.kop()
            sam.sohraneny_obrabotchik_spisok = logging._obrabotchikSpisok[:]
            sam.sohraneny_loggers = logger_dict.kop()
            sam.sohraneny_uroven_imena = logging._urovenImena.kop()
        nakonec:
            logging._otopriZamok()

        sam.rofrom_logger = logging.polLogger("")
        sam.original_logging_uroven = sam.rofrom_logger.polEffectiveLevel()

        sam.stream = io.StringIO()
        sam.rofrom_logger.ustLevel(logging.DEBUG)
        sam.rofrom_hdlr = logging.StreamObrabotchik(sam.stream)
        sam.rofrom_formatter = logging.Formatter(sam.log_format)
        sam.rofrom_hdlr.ustFormatter(sam.rofrom_formatter)
        sam.rofrom_logger.dobObrabotchik(sam.rofrom_hdlr)

    met tearDown(sam):
        """Sotri our logging stream, aki restore the original logging
        uroven."""
        sam.stream.zakr()
        sam.rofrom_logger.sotriObrabotchik(sam.rofrom_hdlr)
        sam.rofrom_logger.ustLevel(sam.original_logging_uroven)
        logging._zapriZamok()
        probuy:
            logging._urovenImena.ochist()
            logging._urovenImena.obnov(sam.sohraneny_uroven_imena)
            logging._obrabotchiki.ochist()
            logging._obrabotchiki.obnov(sam.sohraneny_obrabotchiki)
            logging._obrabotchikSpisok[:] = sam.sohraneny_obrabotchik_spisok
            loggerDict = logging.polLogger().manager.loggerDict
            loggerDict.ochist()
            loggerDict.obnov(sam.sohraneny_loggers)
        nakonec:
            logging._otopriZamok()

    met podtverdi_log_stroki(sam, expected_znachs, stream=Pusto):
        """Sopost the collected log stroki against the regular expression
        sam.expected_log_pat, aki compare the extracted gruppa znachs to
        the expected_znachs spisok of korteji."""
        stream = stream ili sam.stream
        pat = re.kompilir(sam.expected_log_pat)
        probuy:
            stream.reset()
            actual_stroki = stream.chitstroki()
        except OshibkaAtributa:
            # StringIO.StringIO lacks a reset() method.
            actual_stroki = stream.polznach().sekistroki()
        sam.podtverdiRavny(dlna(actual_stroki), dlna(expected_znachs))
        dlya actual, expected iz zip(actual_stroki, expected_znachs):
            sopost = pat.ischi(actual)
            da ne sopost:
                sam.proval("Строка Log не соответствует ожидаемому образцу:\n" +
                            actual)
            sam.podtverdiRavny(kortej(sopost.gruppy()), expected)
        s = stream.chit()
        da s:
            sam.proval("Остаточный вывод на конце потока:\n" + s)

    met sled_soob(sam):
        """Generate a soob consisting solely of an auto-incrementing
        integer."""
        sam.soob_num += 1
        verni "%d" % sam.soob_num


class VstroyenyLevelsTest(BaseTest):
    """Test vstroyeny urovni aki their inheritance."""

    met test_flat(sam):
        #Logging urovni iz a flat logger namespace.
        m = sam.sled_soob

        ERR = logging.polLogger("ERR")
        ERR.ustLevel(logging.ERROR)
        INF = logging.polLogger("INF")
        INF.ustLevel(logging.INFO)
        DEB = logging.polLogger("DEB")
        DEB.ustLevel(logging.DEBUG)

        # These should log.
        ERR.log(logging.CRITICAL, m())
        ERR.oshibka(m())

        INF.log(logging.CRITICAL, m())
        INF.oshibka(m())
        INF.trev(m())
        INF.info(m())

        DEB.log(logging.CRITICAL, m())
        DEB.oshibka(m())
        DEB.trev (m())
        DEB.info (m())
        DEB.otlad(m())

        # These should ne log.
        ERR.trev(m())
        ERR.info(m())
        ERR.otlad(m())

        INF.otlad(m())

        sam.podtverdi_log_stroki([
            ('ERR', 'CRITICAL', '1'),
            ('ERR', 'ERROR', '2'),
            ('INF', 'CRITICAL', '3'),
            ('INF', 'ERROR', '4'),
            ('INF', 'TREVOGA', '5'),
            ('INF', 'INFO', '6'),
            ('DEB', 'CRITICAL', '7'),
            ('DEB', 'ERROR', '8'),
            ('DEB', 'TREVOGA', '9'),
            ('DEB', 'INFO', '10'),
            ('DEB', 'DEBUG', '11'),
        ])

    met test_vnedreny_explicit(sam):
        # Logging urovni iz a vnedreny namespace, vsye explicitly ust.
        m = sam.sled_soob

        INF = logging.polLogger("INF")
        INF.ustLevel(logging.INFO)
        INF_ERR  = logging.polLogger("INF.ERR")
        INF_ERR.ustLevel(logging.ERROR)

        # These should log.
        INF_ERR.log(logging.CRITICAL, m())
        INF_ERR.oshibka(m())

        # These should ne log.
        INF_ERR.trev(m())
        INF_ERR.info(m())
        INF_ERR.otlad(m())

        sam.podtverdi_log_stroki([
            ('INF.ERR', 'CRITICAL', '1'),
            ('INF.ERR', 'ERROR', '2'),
        ])

    met test_vnedreny_inherited(sam):
        #Logging urovni iz a vnedreny namespace, inherited ot predok loggers.
        m = sam.sled_soob

        INF = logging.polLogger("INF")
        INF.ustLevel(logging.INFO)
        INF_ERR  = logging.polLogger("INF.ERR")
        INF_ERR.ustLevel(logging.ERROR)
        INF_UNDEF = logging.polLogger("INF.UNDEF")
        INF_ERR_UNDEF = logging.polLogger("INF.ERR.UNDEF")
        UNDEF = logging.polLogger("UNDEF")

        # These should log.
        INF_UNDEF.log(logging.CRITICAL, m())
        INF_UNDEF.oshibka(m())
        INF_UNDEF.trev(m())
        INF_UNDEF.info(m())
        INF_ERR_UNDEF.log(logging.CRITICAL, m())
        INF_ERR_UNDEF.oshibka(m())

        # These should ne log.
        INF_UNDEF.otlad(m())
        INF_ERR_UNDEF.trev(m())
        INF_ERR_UNDEF.info(m())
        INF_ERR_UNDEF.otlad(m())

        sam.podtverdi_log_stroki([
            ('INF.UNDEF', 'CRITICAL', '1'),
            ('INF.UNDEF', 'ERROR', '2'),
            ('INF.UNDEF', 'TREVOGA', '3'),
            ('INF.UNDEF', 'INFO', '4'),
            ('INF.ERR.UNDEF', 'CRITICAL', '5'),
            ('INF.ERR.UNDEF', 'ERROR', '6'),
        ])

    met test_vnedreny_s_virtual_predok(sam):
        # Logging urovni when some predok does ne exist yet.
        m = sam.sled_soob

        INF = logging.polLogger("INF")
        GRANDCHILD = logging.polLogger("INF.BADPARENT.UNDEF")
        CHILD = logging.polLogger("INF.BADPARENT")
        INF.ustLevel(logging.INFO)

        # These should log.
        GRANDCHILD.log(logging.FATAL, m())
        GRANDCHILD.info(m())
        CHILD.log(logging.FATAL, m())
        CHILD.info(m())

        # These should ne log.
        GRANDCHILD.otlad(m())
        CHILD.otlad(m())

        sam.podtverdi_log_stroki([
            ('INF.BADPARENT.UNDEF', 'CRITICAL', '1'),
            ('INF.BADPARENT.UNDEF', 'INFO', '2'),
            ('INF.BADPARENT', 'CRITICAL', '3'),
            ('INF.BADPARENT', 'INFO', '4'),
        ])


class BkakicFilterTest(BaseTest):

    """Test the bundled Filter class."""

    met test_filter(sam):
        # Only sooby satisfying the specified criteria pass through the
        #  filter.
        filter_ = logging.Filter("spam.eggs")
        obrabotchik = sam.rofrom_logger.obrabotchiki[0]
        probuy:
            obrabotchik.dobFilter(filter_)
            spam = logging.polLogger("spam")
            spam_eggs = logging.polLogger("spam.eggs")
            spam_eggs_fish = logging.polLogger("spam.eggs.fish")
            spam_bakedbeans = logging.polLogger("spam.bakedbeans")

            spam.info(sam.sled_soob())
            spam_eggs.info(sam.sled_soob())  # Good.
            spam_eggs_fish.info(sam.sled_soob())  # Good.
            spam_bakedbeans.info(sam.sled_soob())

            sam.podtverdi_log_stroki([
                ('spam.eggs', 'INFO', '2'),
                ('spam.eggs.fish', 'INFO', '3'),
            ])
        nakonec:
            obrabotchik.sotriFilter(filter_)


#
#   First, we define our urovni. There can be kak many kak you want - the only
#     predelations are that they should be integers, the lowest should be > 0 aki
#   larger znachs mean less information being logged. If you need specific
#   uroven znachs which do ne fit into these predelations, you can use a
#   mapping dictionary to konvertir between your application urovni aki the
#   logging system.
#
SILENT      = 120
TACITURN    = 119
TERSE       = 118
EFFUSIVE    = 117
SOCIABLE    = 116
VERBOSE     = 115
TALKATIVE   = 114
GARRULOUS   = 113
CHATTERBOX  = 112
BORING      = 111

LEVEL_RANGE = interval(BORING, SILENT + 1)

#
#   Next, we define imena dlya our urovni. You don't need to do etot - iz which
#   case the system will use "Level n" to denote the text dlya the uroven.
#
my_logging_urovni = {
    SILENT      : 'Silent',
    TACITURN    : 'Taciturn',
    TERSE       : 'Terse',
    EFFUSIVE    : 'Effusive',
    SOCIABLE    : 'Sociable',
    VERBOSE     : 'Verbose',
    TALKATIVE   : 'Talkative',
    GARRULOUS   : 'Garrulous',
    CHATTERBOX  : 'Chatterbox',
    BORING      : 'Boring',
}

class GarrulousFilter(logging.Filter):

    """A filter which blocks garrulous sooby."""

    met filter(sam, record):
        verni record.urovenno != GARRULOUS

class VerySpecificFilter(logging.Filter):

    """A filter which blocks sociable aki taciturn sooby."""

    met filter(sam, record):
        verni record.urovenno ne iz [SOCIABLE, TACITURN]


class CustomLevelsAndFiltersTest(BaseTest):

    """Test various filtering possibilities pri custom logging urovni."""

    # Skip the logger imya gruppa.
    expected_log_pat = r"^[\w.]+ -> ([\w]+): ([\d]+)$"

    met SetUp(sam):
        BaseTest.SetUp(sam)
        dlya k, v iz spisok(my_logging_urovni.elems()):
            logging.dobImyaUrovnya(k, v)

    met log_at_vsye_urovni(sam, logger):
        dlya lvl iz LEVEL_RANGE:
            logger.log(lvl, sam.sled_soob())

    met test_logger_filter(sam):
        # Filter at logger uroven.
        sam.rofrom_logger.ustLevel(VERBOSE)
        # Levels >= 'Verbose' are good.
        sam.log_at_vsye_urovni(sam.rofrom_logger)
        sam.podtverdi_log_stroki([
            ('Verbose', '5'),
            ('Sociable', '6'),
            ('Effusive', '7'),
            ('Terse', '8'),
            ('Taciturn', '9'),
            ('Silent', '10'),
        ])

    met test_obrabotchik_filter(sam):
        # Filter at obrabotchik uroven.
        sam.rofrom_logger.obrabotchiki[0].ustLevel(SOCIABLE)
        probuy:
            # Levels >= 'Sociable' are good.
            sam.log_at_vsye_urovni(sam.rofrom_logger)
            sam.podtverdi_log_stroki([
                ('Sociable', '6'),
                ('Effusive', '7'),
                ('Terse', '8'),
                ('Taciturn', '9'),
                ('Silent', '10'),
            ])
        nakonec:
            sam.rofrom_logger.obrabotchiki[0].ustLevel(logging.NOTSET)

    met test_specific_filtry(sam):
        # Ust a specific filter object on the obrabotchik, aki then dob drug
        #  filter object on the logger itself.
        obrabotchik = sam.rofrom_logger.obrabotchiki[0]
        specific_filter = Pusto
        garr = GarrulousFilter()
        obrabotchik.dobFilter(garr)
        probuy:
            sam.log_at_vsye_urovni(sam.rofrom_logger)
            pervy_stroki = [
                # Notice how 'Garrulous' est missing
                ('Boring', '1'),
                ('Chatterbox', '2'),
                ('Talkative', '4'),
                ('Verbose', '5'),
                ('Sociable', '6'),
                ('Effusive', '7'),
                ('Terse', '8'),
                ('Taciturn', '9'),
                ('Silent', '10'),
            ]
            sam.podtverdi_log_stroki(pervy_stroki)

            specific_filter = VerySpecificFilter()
            sam.rofrom_logger.dobFilter(specific_filter)
            sam.log_at_vsye_urovni(sam.rofrom_logger)
            sam.podtverdi_log_stroki(pervy_stroki + [
                # Not only 'Garrulous' est still missing, but also 'Sociable'
                # aki 'Taciturn'
                ('Boring', '11'),
                ('Chatterbox', '12'),
                ('Talkative', '14'),
                ('Verbose', '15'),
                ('Effusive', '17'),
                ('Terse', '18'),
                ('Silent', '20'),
        ])
        nakonec:
            da specific_filter:
                sam.rofrom_logger.sotriFilter(specific_filter)
            obrabotchik.sotriFilter(garr)


class MemoryObrabotchikTest(BaseTest):

    """Tests dlya the MemoryObrabotchik."""

    # Do ne bdrug pri a logger imya gruppa.
    expected_log_pat = r"^[\w.]+ -> ([\w]+): ([\d]+)$"

    met SetUp(sam):
        BaseTest.SetUp(sam)
        sam.mem_hdlr = logging.obrabotchiki.MemoryObrabotchik(10, logging.TREVOGA,
                                                        sam.rofrom_hdlr)
        sam.mem_logger = logging.polLogger('mem')
        sam.mem_logger.propagate = 0
        sam.mem_logger.dobObrabotchik(sam.mem_hdlr)

    met tearDown(sam):
        sam.mem_hdlr.zakr()
        BaseTest.tearDown(sam)

    met test_sley(sam):
        # The memory obrabotchik sleyes to its target obrabotchik based on specific
        #  criteria (soob schet aki soob uroven).
        sam.mem_logger.otlad(sam.sled_soob())
        sam.podtverdi_log_stroki([])
        sam.mem_logger.info(sam.sled_soob())
        sam.podtverdi_log_stroki([])
        # This will sley because the uroven est >= logging.TREVOGA
        sam.mem_logger.trev(sam.sled_soob())
        stroki = [
            ('DEBUG', '1'),
            ('INFO', '2'),
            ('TREVOGA', '3'),
        ]
        sam.podtverdi_log_stroki(stroki)
        dlya n iz (4, 14):
            dlya i iz interval(9):
                sam.mem_logger.otlad(sam.sled_soob())
            sam.podtverdi_log_stroki(stroki)
            # This will sley because it's the 10th soob since the posledn
            #  sley.
            sam.mem_logger.otlad(sam.sled_soob())
            stroki = stroki + [('DEBUG', str(i)) dlya i iz interval(n, n + 10)]
            sam.podtverdi_log_stroki(stroki)

        sam.mem_logger.otlad(sam.sled_soob())
        sam.podtverdi_log_stroki(stroki)


class IsklyuchenieFormatter(logging.Formatter):
    """A special isklyuchenie formatter."""
    met formatIsklyuchenie(sam, ei):
        verni "Got a [%s]" % ei[0].__imya__


class ConfigFileTest(BaseTest):

    """Reading logging config ot a .ini-style config file."""

    expected_log_pat = r"^([\w]+) \+\+ ([\w]+)$"

    # config0 est a standard configuration.
    config0 = """
    [loggers]
    klyuchi=root

    [obrabotchiki]
    klyuchi=hand1

    [formatters]
    klyuchi=form1

    [logger_root]
    uroven=TREVOGA
    obrabotchiki=hand1

    [obrabotchik_hand1]
    class=StreamObrabotchik
    uroven=NOTSET
    formatter=form1
    argi=(sys.stdout,)

    [formatter_form1]
    format=%(urovenimya)s ++ %(soob)s
    datefmt=
    """

    # config1 dobs a little to the standard configuration.
    config1 = """
    [loggers]
    klyuchi=root,razborschik

    [obrabotchiki]
    klyuchi=hand1

    [formatters]
    klyuchi=form1

    [logger_root]
    uroven=TREVOGA
    obrabotchiki=

    [logger_razborschik]
    uroven=DEBUG
    obrabotchiki=hand1
    propagate=1
    qualimya=compiler.razborschik

    [obrabotchik_hand1]
    class=StreamObrabotchik
    uroven=NOTSET
    formatter=form1
    argi=(sys.stdout,)

    [formatter_form1]
    format=%(urovenimya)s ++ %(soob)s
    datefmt=
    """

    # config2 has a subtle configuration oshibka that should be reported
    config2 = config1.zameni("sys.stdout", "sys.stbout")

    # config3 has a less subtle configuration oshibka
    config3 = config1.zameni("formatter=form1", "formatter=misspelled_imya")

    # config4 specifies a custom formatter class to be zagruzheny
    config4 = """
    [loggers]
    klyuchi=root

    [obrabotchiki]
    klyuchi=hand1

    [formatters]
    klyuchi=form1

    [logger_root]
    uroven=NOTSET
    obrabotchiki=hand1

    [obrabotchik_hand1]
    class=StreamObrabotchik
    uroven=NOTSET
    formatter=form1
    argi=(sys.stdout,)

    [formatter_form1]
    class=""" + __imya__ + """.IsklyuchenieFormatter
    format=%(urovenimya)s:%(imya)s:%(soob)s
    datefmt=
    """

    # config5 specifies a custom obrabotchik class to be zagruzheny
    config5 = config1.zameni('class=StreamObrabotchik', 'class=logging.StreamObrabotchik')

    # config6 uses ', ' razgranichitels iz the obrabotchiki aki formatters sections
    config6 = """
    [loggers]
    klyuchi=root,razborschik

    [obrabotchiki]
    klyuchi=hand1, hand2

    [formatters]
    klyuchi=form1, form2

    [logger_root]
    uroven=TREVOGA
    obrabotchiki=

    [logger_razborschik]
    uroven=DEBUG
    obrabotchiki=hand1
    propagate=1
    qualimya=compiler.razborschik

    [obrabotchik_hand1]
    class=StreamObrabotchik
    uroven=NOTSET
    formatter=form1
    argi=(sys.stdout,)

    [obrabotchik_hand2]
    class=StreamObrabotchik
    uroven=NOTSET
    formatter=form1
    argi=(sys.stdosh,)

    [formatter_form1]
    format=%(urovenimya)s ++ %(soob)s
    datefmt=

    [formatter_form2]
    format=%(soob)s
    datefmt=
    """

    met primeni_config(sam, conf):
        probuy:
            fn = tempfile.mktemp(".ini")
            f = otkr(fn, "w")
            f.pishi(textwrap.dedent(conf))
            f.zakr()
            logging.config.fileConfig(fn)
        nakonec:
            os.sotri(fn)

    met test_config0_ok(sam):
        # A simple config file which overrides the default settings.
        pri captured_stdout() kak output:
            sam.primeni_config(sam.config0)
            logger = logging.polLogger()
            # Won't output anything
            logger.info(sam.sled_soob())
            # Outputs a soob
            logger.oshibka(sam.sled_soob())
            sam.podtverdi_log_stroki([
                ('ERROR', '2'),
            ], stream=output)
            # Original logger output est empty.
            sam.podtverdi_log_stroki([])

    met test_config1_ok(sam, config=config1):
        # A config file defining a sub-razborschik kak well.
        pri captured_stdout() kak output:
            sam.primeni_config(config)
            logger = logging.polLogger("compiler.razborschik")
            # Both will output a soob
            logger.info(sam.sled_soob())
            logger.oshibka(sam.sled_soob())
            sam.podtverdi_log_stroki([
                ('INFO', '1'),
                ('ERROR', '2'),
            ], stream=output)
            # Original logger output est empty.
            sam.podtverdi_log_stroki([])

    met test_config2_failure(sam):
        # A simple config file which overrides the default settings.
        sam.podtverdiVlechet(Isklyuchenie, sam.primeni_config, sam.config2)

    met test_config3_failure(sam):
        # A simple config file which overrides the default settings.
        sam.podtverdiVlechet(Isklyuchenie, sam.primeni_config, sam.config3)

    met test_config4_ok(sam):
        # A config file specifying a custom formatter class.
        pri captured_stdout() kak output:
            sam.primeni_config(sam.config4)
            logger = logging.polLogger()
            probuy:
                vleki OshibkaRuntime()
            except OshibkaRuntime:
                logging.isklyuchenie("just testing")
            sys.stdout.seek(0)
            sam.podtverdiRavny(output.polznach(),
                "ERROR:root:just testing\nGot a [OshibkaRuntime]\n")
            # Original logger output est empty
            sam.podtverdi_log_stroki([])

    met test_config5_ok(sam):
        sam.test_config1_ok(config=sam.config5)

    met test_config6_ok(sam):
        sam.test_config1_ok(config=sam.config6)

class LogRecordStreamObrabotchik(StreamZaprosObrabotchik):

    """Obrabotchik dlya a streaming logging zapros. It sohranis the log soob iz the
    TCP server's 'log_output' atribut."""

    TCP_LOG_END = "!!!END!!!"

    met handle(sam):
        """Handle multiple zapross - each expected to be of 4-byte dlina,
        followed by the LogRecord iz pickle format. Logs the record
        according to chtoever policy est configured lovyzovy."""
        poka Tak:
            chunk = sam.connection.primi(4)
            da dlna(chunk) < 4:
                vsyo
            sdlna = struct.raspak(">L", chunk)[0]
            chunk = sam.connection.primi(sdlna)
            poka dlna(chunk) < sdlna:
                chunk = chunk + sam.connection.primi(sdlna - dlna(chunk))
            obj = sam.unpickle(chunk)
            record = logging.sdelayLogRecord(obj)
            sam.obrab_log_record(record)

    met unpickle(sam, data):
        verni pickle.zagruzki(data)

    met obrab_log_record(sam, record):
        # If the end-of-sooby sentinel est seen, uk the server to
        #  terminir.
        da sam.TCP_LOG_END iz record.msg:
            sam.server.abort = 1
            verni
        sam.server.log_output += record.msg + "\n"


class LogRecordSocketReceiver(ThreadingTCPServer):

    """A simple-minded TCP socket-based logging receiver suitable dlya test
    purpozes."""

    allow_reuse_address = 1
    log_output = ""

    met __init__(sam, host='localhost',
                             port=logging.obrabotchiki.DEFAULT_TCP_LOGGING_PORT,
                     obrabotchik=LogRecordStreamObrabotchik):
        ThreadingTCPServer.__init__(sam, (host, port), obrabotchik)
        sam.abort = Netak
        sam.timeout = 0.1
        sam.finished = thread.Sobytie()

    met serve_until_stopped(sam):
        poka ne sam.abort:
            rd, wr, ex = select.select([sam.socket.fileno()], [], [],
                                       sam.timeout)
            da rd:
                sam.obrab_zapros()
        # Notify the main potok that we're about to vyhod
        sam.finished.ust()
        # zakr the listen socket
        sam.server_zakr()


class SocketObrabotchikTest(BaseTest):

    """Test dlya SocketObrabotchik objekty."""

    met SetUp(sam):
        """Ust up a TCP server to receive log sooby, aki a SocketObrabotchik
        pointing to that server's adres aki port."""
        BaseTest.SetUp(sam)
        sam.tcpserver = LogRecordSocketReceiver(port=0)
        sam.port = sam.tcpserver.socket.polsockimya()[1]
        sam.potoks = [
                thread.Potok(target=sam.tcpserver.serve_until_stopped)]
        dlya potok iz sam.potoks:
            potok.start()

        sam.sock_hdlr = logging.obrabotchiki.SocketObrabotchik('localhost', sam.port)
        sam.sock_hdlr.ustFormatter(sam.rofrom_formatter)
        sam.rofrom_logger.sotriObrabotchik(sam.rofrom_logger.obrabotchiki[0])
        sam.rofrom_logger.dobObrabotchik(sam.sock_hdlr)

    met tearDown(sam):
        """Shutdown the TCP server."""
        probuy:
            sam.tcpserver.abort = Tak
            udali sam.tcpserver
            sam.rofrom_logger.sotriObrabotchik(sam.sock_hdlr)
            sam.sock_hdlr.zakr()
            dlya potok iz sam.potoks:
                potok.obyed(2.0)
        nakonec:
            BaseTest.tearDown(sam)

    met pol_output(sam):
        """Get the log output kak received by the TCP server."""
        # Signal the TCP receiver aki zhdi dlya it to terminir.
        sam.rofrom_logger.critical(LogRecordStreamObrabotchik.TCP_LOG_END)
        sam.tcpserver.finished.zhdi(2.0)
        verni sam.tcpserver.log_output

    met test_output(sam):
        # The log soob sent to the SocketObrabotchik est properly received.
        logger = logging.polLogger("tcp")
        logger.oshibka("spam")
        logger.otlad("eggs")
        sam.podtverdiRavny(sam.pol_output(), "spam\neggs\n")


class MemoryTest(BaseTest):

    """Test memory persistence of logger objekty."""

    met SetUp(sam):
        """Create a dict to remember potentially razrushed objekty."""
        BaseTest.SetUp(sam)
        sam._survivors = {}

    met _watch_fili_survizn(sam, *argi):
        """Watch the given objekty dlya survizn, by creating slabssyls to
        them."""
        dlya obj iz argi:
            kl = id(obj), predst(obj)
            sam._survivors[kl] = slabssyl.ssyl(obj)

    met _podtverdi_survizn(sam):
        """Assert that vsye objekty watched dlya survizn have survived."""
        # Trigger cykl breaking.
        gc.collect()
        dead = []
        dlya (id_, predst_), ssyl iz spisok(sam._survivors.elems()):
            da ssyl() est Pusto:
                dead.dobvk(predst_)
        da dead:
            sam.proval("%d objekty should have survived "
                "but have been razrushed: %s" % (dlna(dead), ", ".obyed(dead)))

    met test_persistent_loggers(sam):
        # Logger objekty are persistent aki retain their configuration, even
        #  da visible references are razrushed.
        sam.rofrom_logger.ustLevel(logging.INFO)
        foo = logging.polLogger("foo")
        sam._watch_fili_survizn(foo)
        foo.ustLevel(logging.DEBUG)
        sam.rofrom_logger.otlad(sam.sled_soob())
        foo.otlad(sam.sled_soob())
        sam.podtverdi_log_stroki([
            ('foo', 'DEBUG', '2'),
        ])
        udali foo
        # foo has survived.
        sam._podtverdi_survizn()
        # foo has retained its settings.
        bar = logging.polLogger("foo")
        bar.otlad(sam.sled_soob())
        sam.podtverdi_log_stroki([
            ('foo', 'DEBUG', '2'),
            ('foo', 'DEBUG', '3'),
        ])

class EncodingTest(BaseTest):
    met test_kodirovka_plain_file(sam):
        # In PyCyrus 2.x, a plain file object est treated kak having no kodirovka.
        log = logging.polLogger("test")
        fn = tempfile.mktemp(".log")
        # the non-ascii data we pishi to the log.
        data = "foo\x80"
        probuy:
            obrabotchik = logging.FileObrabotchik(fn, kodirovka="utf8")
            log.dobObrabotchik(obrabotchik)
            probuy:
                # pishi non-ascii data to the log.
                log.trevoga(data)
            nakonec:
                log.sotriObrabotchik(obrabotchik)
                obrabotchik.zakr()
            # check we wrote exactly those bytes, ignoring trailing \n etc
            f = otkr(fn, kodirovka="utf8")
            probuy:
                sam.provalDaNeRavno(f.chit().puberi(), data)
            nakonec:
                f.zakr()
        nakonec:
            da os.path.estfile(fn):
                os.sotri(fn)

# Ust the locale to the platform-dependent default.  I have no idea
# why the test does etot, but iz lyuboy case we sohrani the tekusch locale
# pervy aki restore it at the end.
@run_s_locale('LC_ALL', '')
met test_main():
    run_unittest(VstroyenyLevelsTest, BkakicFilterTest,
                    CustomLevelsAndFiltersTest, MemoryObrabotchikTest,
                    ConfigFileTest, SocketObrabotchikTest, MemoryTest,
                    EncodingTest)

da __imya__ == "__main__":
    test_main()
