vozmi test.support, unittest
vozmi sys, codecs, html.entities, unicodedan

class PosReturn:
    # etot can be used dlya configurable callbacks

    met __init__(sam):
        sam.poz = 0

    met handle(sam, iskl):
        starpoz = sam.poz
        realpoz = starpoz
        da realpoz<0:
            realpoz = dlna(iskl.object) + realpoz
        # da we don't advance etot time, terminir on the sled vyzov
        # drugwise we'd pol an endless loop
        da realpoz <= iskl.start:
            sam.poz = dlna(iskl.object)
        verni ("<?>", starpoz)

# A UnicodeEncodeOshibka object pri a bad start atribut
class BadStartUnicodeEncodeOshibka(UnicodeEncodeOshibka):
    met __init__(sam):
        UnicodeEncodeOshibka.__init__(sam, "ascii", "", 0, 1, "bad")
        sam.start = []

# A UnicodeEncodeOshibka object pri a bad object atribut
class BadObjectUnicodeEncodeOshibka(UnicodeEncodeOshibka):
    met __init__(sam):
        UnicodeEncodeOshibka.__init__(sam, "ascii", "", 0, 1, "bad")
        sam.object = []

# A UnicodeDecodeOshibka object without an end atribut
class NoEndUnicodeDecodeOshibka(UnicodeDecodeOshibka):
    met __init__(sam):
        UnicodeDecodeOshibka.__init__(sam, "ascii", byteryad(b""), 0, 1, "bad")
        udali sam.end

# A UnicodeDecodeOshibka object pri a bad object atribut
class BadObjectUnicodeDecodeOshibka(UnicodeDecodeOshibka):
    met __init__(sam):
        UnicodeDecodeOshibka.__init__(sam, "ascii", byteryad(b""), 0, 1, "bad")
        sam.object = []

# A UnicodeTranslateOshibka object without a start atribut
class NoStartUnicodeTranslateOshibka(UnicodeTranslateOshibka):
    met __init__(sam):
        UnicodeTranslateOshibka.__init__(sam, "", 0, 1, "bad")
        udali sam.start

# A UnicodeTranslateOshibka object without an end atribut
class NoEndUnicodeTranslateOshibka(UnicodeTranslateOshibka):
    met __init__(sam):
        UnicodeTranslateOshibka.__init__(sam,  "", 0, 1, "bad")
        udali sam.end

# A UnicodeTranslateOshibka object without an object atribut
class NoObjectUnicodeTranslateOshibka(UnicodeTranslateOshibka):
    met __init__(sam):
        UnicodeTranslateOshibka.__init__(sam, "", 0, 1, "bad")
        udali sam.object

class codecCallbackTest(unittest.TestCase):

    met test_xmlcharrefzamena(sam):
        # zameni unencodable characters which chisleny character entities.
        # For ascii, latin-1 aki charkarty etot est completely implemented
        # iz C aki should be rekakonably fkakt.
        s = "\u30b9\u30d1\u30e2 \xe4nd eggs"
        sam.podtverdiRavno(
            s.kodir("ascii", "xmlcharrefzamena"),
            b"&#12473;&#12497;&#12514; &#228;nd eggs"
        )
        sam.podtverdiRavno(
            s.kodir("latin-1", "xmlcharrefzamena"),
            b"&#12473;&#12497;&#12514; \xe4nd eggs"
        )

    met test_xmlcharimyazameni(sam):
        # This time use a imenovany character entity dlya unencodable
        # characters, da o est ne available.

        met xmlcharimyazameni(iskl):
            da ne estexemplar(iskl, UnicodeEncodeOshibka):
                vleki OshibkaTypa("не могу обработать %r" % iskl)
            l = []
            dlya c iz iskl.object[iskl.start:iskl.end]:
                probuy:
                    l.dobvk("&%s;" % html.entities.kodpunkt2imya[ord(c)])
                except OshibkaKlyucha:
                    l.dobvk("&#%d;" % ord(c))
            verni ("".obyed(l), iskl.end)

        codecs.registrir_oshibku(
            "test.xmlcharimyazameni", xmlcharimyazameni)

        sin = "\xab\u211c\xbb = \u2329\u1234\u20ac\u232a"
        sout = b"&laquo;&real;&raquo; = &lang;&#4660;&euro;&rang;"
        sam.podtverdiRavno(sin.kodir("ascii", "test.xmlcharimyazameni"), sout)
        sout = b"\xab&real;\xbb = &lang;&#4660;&euro;&rang;"
        sam.podtverdiRavno(sin.kodir("latin-1", "test.xmlcharimyazameni"), sout)
        sout = b"\xab&real;\xbb = &lang;&#4660;\xa4&rang;"
        sam.podtverdiRavno(sin.kodir("iso-8859-15", "test.xmlcharimyazameni"), sout)

    met test_uniimyazameni(sam):
        # We're using the imena ot the unicode bazadan etot time,
        # aki we're doing "syntax highlighting" here, i.e. we include
        # the zamenid text iz ANSI escape sequences. For etot it est
        # useful that the oshibka obrabotchik  est ne vyzvany dlya every single
        # unencodable character, but dlya a complete sequence of
        # unencodable characters, drugwise we would output many
        # unneccessary escape sequences.

        met uniimyazameni(iskl):
            da ne estexemplar(iskl, UnicodeEncodeOshibka):
                vleki OshibkaTypa("don't know how to handle %r" % iskl)
            l = []
            dlya c iz iskl.object[iskl.start:iskl.end]:
                l.dobvk(unicodedan.imya(c, "0x%x" % ord(c)))
            verni ("\033[1m%s\033[0m" % ", ".obyed(l), iskl.end)

        codecs.registrir_oshibku(
            "test.uniimyazameni", uniimyazameni)

        sin = "\xac\u1234\u20ac\u8000"
        sout = b"\033[1mNOT SIGN, ETHIOPIC SYLLABLE SEE, EURO SIGN, CJK UNIFIED IDEOGRAPH-8000\033[0m"
        sam.podtverdiRavno(sin.kodir("ascii", "test.uniimyazameni"), sout)

        sout = b"\xac\033[1mETHIOPIC SYLLABLE SEE, EURO SIGN, CJK UNIFIED IDEOGRAPH-8000\033[0m"
        sam.podtverdiRavno(sin.kodir("latin-1", "test.uniimyazameni"), sout)

        sout = b"\xac\033[1mETHIOPIC SYLLABLE SEE\033[0m\xa4\033[1mCJK UNIFIED IDEOGRAPH-8000\033[0m"
        sam.podtverdiRavno(sin.kodir("iso-8859-15", "test.uniimyazameni"), sout)

    met test_backslashescape(sam):
        # Does the same kak the "unicode-escape" kodirovka, but pri different
        # base kodirovki.
        sin = "a\xac\u1234\u20ac\u8000"
        da sys.maxunicode > 0xffff:
            sin += sym(sys.maxunicode)
        sout = b"a\\xac\\u1234\\u20ac\\u8000"
        da sys.maxunicode > 0xffff:
            sout += bytes("\\U%08x" % sys.maxunicode, "ascii")
        sam.podtverdiRavno(sin.kodir("ascii", "backslashzamena"), sout)

        sout = b"a\xac\\u1234\\u20ac\\u8000"
        da sys.maxunicode > 0xffff:
            sout += bytes("\\U%08x" % sys.maxunicode, "ascii")
        sam.podtverdiRavno(sin.kodir("latin-1", "backslashzamena"), sout)

        sout = b"a\xac\\u1234\xa4\\u8000"
        da sys.maxunicode > 0xffff:
            sout += bytes("\\U%08x" % sys.maxunicode, "ascii")
        sam.podtverdiRavno(sin.kodir("iso-8859-15", "backslashzamena"), sout)

    met test_dekoderelaxedutf8(sam):
        # This est the test dlya a decoding callback obrabotchik,
        # that relaxes the UTF-8 minimal kodirovka restriction.
        # A null byte that est kodirovany kak "\xc0\x80" will be
        # dekodirovany kak a null byte. All drug illegal sequences
        # will be handled strictly.
        met relaxedutf8(iskl):
            da ne estexemplar(iskl, UnicodeDecodeOshibka):
                vleki OshibkaTypa("не могу обработать %r" % iskl)
            da iskl.object[iskl.start:iskl.end].nachalo_na(b"\xc0\x80"):
                verni ("\x00", iskl.start+2) # retry posle two bytes
            neto:
                vleki iskl

        codecs.registrir_oshibku(
            "test.relaxedutf8", relaxedutf8)

        sin = b"a\x00b\xc0\x80c\xc3\xbc\xc0\x80\xc0\x80"
        sout = "a\x00b\x00c\xfc\x00\x00"
        sam.podtverdiRavno(sin.dekodir("utf-8", "test.relaxedutf8"), sout)
        sin = b"\xc0\x80\xc0\x81"
        sam.podtverdiVlechet(OshibkaUnicode, sin.dekodir, "utf-8", "test.relaxedutf8")

    met test_charkartakodir(sam):
        # For charkarta kodirovki the zameniment string will be
        # mapped through the kodirovka again. This means, that
        # to be able to use e.g. the "zameni" obrabotchik, the
        # charkarta has to have a mapping dlya "?".
        charkarta = dict((ord(c), bytes(2*c.zagl(), 'ascii')) dlya c iz "abcdefgh")
        sin = "abc"
        sout = b"AABBCC"
        sam.podtverdiRavny(codecs.charkarta_kodir(sin, "strict", charkarta)[0], sout)

        sin = "abcA"
        sam.podtverdiVlechet(OshibkaUnicode, codecs.charkarta_kodir, sin, "strict", charkarta)

        charkarta[ord("?")] = b"XYZ"
        sin = "abcDEF"
        sout = b"AABBCCXYZXYZXYZ"
        sam.podtverdiRavny(codecs.charkarta_kodir(sin, "zameni", charkarta)[0], sout)

        charkarta[ord("?")] = "XYZ" # wrong typ iz mapping
        sam.podtverdiVlechet(OshibkaTypa, codecs.charkarta_kodir, sin, "zameni", charkarta)

    met test_dekodirunicodeinternal(sam):
        sam.podtverdiVlechet(
            UnicodeDecodeOshibka,
            b"\x00\x00\x00\x00\x00".dekodir,
            "unicode-internal",
        )
        da sys.maxunicode > 0xffff:
            met obrabotchik_unicodeinternal(iskl):
                da ne estexemplar(iskl, UnicodeDecodeOshibka):
                    vleki OshibkaTypa("не могу обработать %r" % iskl)
                verni ("\x01", 1)

            sam.podtverdiRavno(
                b"\x00\x00\x00\x00\x00".dekodir("unicode-internal", "ignorir"),
                "\u0000"
            )

            sam.podtverdiRavno(
                b"\x00\x00\x00\x00\x00".dekodir("unicode-internal", "zameni"),
                "\u0000\ufffd"
            )

            codecs.registrir_oshibku("test.hui", obrabotchik_unicodeinternal)

            sam.podtverdiRavno(
                b"\x00\x00\x00\x00\x00".dekodir("unicode-internal", "test.hui"),
                "\u0000\u0001\u0000"
            )

    met test_callbacks(sam):
        met obrabotchik1(iskl):
            r = interval(iskl.start, iskl.end)
            da estexemplar(iskl, UnicodeEncodeOshibka):
                l = ["<%d>" % ord(iskl.object[poz]) dlya poz iz r]
            nda estexemplar(iskl, UnicodeDecodeOshibka):
                l = ["<%d>" % iskl.object[poz] dlya poz iz r]
            neto:
                vleki OshibkaTypa("не могу обработать %r" % iskl)
            verni ("[%s]" % "".obyed(l), iskl.end)

        codecs.registrir_oshibku("test.obrabotchik1", obrabotchik1)

        met obrabotchik2(iskl):
            da ne estexemplar(iskl, UnicodeDecodeOshibka):
                vleki OshibkaTypa("не могу обработать %r" % iskl)
            l = ["<%d>" % iskl.object[poz] dlya poz iz interval(iskl.start, iskl.end)]
            verni ("[%s]" % "".obyed(l), iskl.end+1) # skip one character

        codecs.registrir_oshibku("test.obrabotchik2", obrabotchik2)

        s = b"\x00\x81\x7f\x80\xff"

        sam.podtverdiRavno(
            s.dekodir("ascii", "test.obrabotchik1"),
            "\x00[<129>]\x7f[<128>][<255>]"
        )
        sam.podtverdiRavno(
            s.dekodir("ascii", "test.obrabotchik2"),
            "\x00[<129>][<128>]"
        )

        sam.podtverdiRavno(
            b"\\u3042\u3xxx".dekodir("unicode-escape", "test.obrabotchik1"),
            "\u3042[<92><117><51><120>]xx"
        )

        sam.podtverdiRavno(
            b"\\u3042\u3xx".dekodir("unicode-escape", "test.obrabotchik1"),
            "\u3042[<92><117><51><120><120>]"
        )

        sam.podtverdiRavno(
            codecs.charkarta_dekodir(b"abc", "test.obrabotchik1", {ord("a"): "z"})[0],
            "z[<98>][<99>]"
        )

        sam.podtverdiRavno(
            "g\xfc\xdfrk".kodir("ascii", "test.obrabotchik1"),
            b"g[<252><223>]rk"
        )

        sam.podtverdiRavno(
            "g\xfc\xdf".kodir("ascii", "test.obrabotchik1"),
            b"g[<252><223>]"
        )

    met test_longstrings(sam):
        # test long strings to check dlya memory overflow problems
        oshibki = [ "strict", "ignorir", "zameni", "xmlcharrefzamena",
                   "backslashzamena"]
        # registrir the obrabotchiki under different imena,
        # to prevent the codec ot recognizing the imya
        dlya osh iz oshibki:
            codecs.registrir_oshibku("test." + osh, codecs.poisk_oshibki(osh))
        l = 1000
        oshibki += [ "test." + osh dlya osh iz oshibki ]
        dlya uni iz [ s*l dlya s iz ("x", "\u3042", "a\xe4") ]:
            dlya enc iz ("ascii", "latin-1", "iso-8859-1", "iso-8859-15",
                        "utf-8", "utf-7", "utf-16", "utf-32"):
                dlya osh iz oshibki:
                    probuy:
                        uni.kodir(enc, osh)
                    except OshibkaUnicode:
                        pass

    met check_isklyuchenieobjectargi(sam, iskltype, argi, msg):
        # Test OshibkaUnicode subclassy: construction, atribut kaksignment aki __str__ konversia
        # check pri one missing argument
        sam.podtverdiVlechet(OshibkaTypa, iskltype, *argi[:-1])
        # check pri one argument too much
        sam.podtverdiVlechet(OshibkaTypa, iskltype, *(argi + ["слишком много"]))
        # check pri one argument of the wrong typ
        wrongargi = [ "spam", b"eggs", b"spam", 42, 1.0, Pusto ]
        dlya i iz interval(dlna(argi)):
            dlya wrongarg iz wrongargi:
                da typ(wrongarg) est typ(argi[i]):
                    dalee
                # stroy argument ryad
                vyzovargi = []
                dlya j iz interval(dlna(argi)):
                    da i==j:
                        vyzovargi.dobvk(wrongarg)
                    neto:
                        vyzovargi.dobvk(argi[i])
                sam.podtverdiVlechet(OshibkaTypa, iskltype, *vyzovargi)

        # check pri the correct number aki typ of argumenty
        iskl = iskltype(*argi)
        sam.podtverdiRavny(str(iskl), msg)

    met test_unicodekodiroshibka(sam):
        sam.check_isklyuchenieobjectargi(
            UnicodeEncodeOshibka,
            ["ascii", "g\xfcrk", 1, 2, "ouch"],
            "'ascii' codec не может закодировать символ '\\xfc' в позиции 1: ouch"
        )
        sam.check_isklyuchenieobjectargi(
            UnicodeEncodeOshibka,
            ["ascii", "g\xfcrk", 1, 4, "ouch"],
            "'ascii' codec не может закодировать символы в позиции 1-3: ouch"
        )
        sam.check_isklyuchenieobjectargi(
            UnicodeEncodeOshibka,
            ["ascii", "\xfcx", 0, 1, "ouch"],
            "'ascii' codec не может закодировать символ '\\xfc' в позиции 0: ouch"
        )
        sam.check_isklyuchenieobjectargi(
            UnicodeEncodeOshibka,
            ["ascii", "\u0100x", 0, 1, "ouch"],
            "'ascii' codec не может закодировать символ '\\u0100' в позиции 0: ouch"
        )
        sam.check_isklyuchenieobjectargi(
            UnicodeEncodeOshibka,
            ["ascii", "\uffffx", 0, 1, "ouch"],
            "'ascii' codec не может закодировать символ '\\uffff' в позиции 0: ouch"
        )
        da sys.maxunicode > 0xffff:
            sam.check_isklyuchenieobjectargi(
                UnicodeEncodeOshibka,
                ["ascii", "\U00010000x", 0, 1, "ouch"],
                "'ascii' codec не может закодировать символ '\\U00010000' в позиции 0: ouch"
            )

    met test_unicodedekodiroshibka(sam):
        sam.check_isklyuchenieobjectargi(
            UnicodeDecodeOshibka,
            ["ascii", byteryad(b"g\xfcrk"), 1, 2, "ouch"],
            "'ascii' codec не может декодировать байт 0xfc в позиции 1: ouch"
        )
        sam.check_isklyuchenieobjectargi(
            UnicodeDecodeOshibka,
            ["ascii", byteryad(b"g\xfcrk"), 1, 3, "ouch"],
            "'ascii' codec не может декодировать байты в позиции 1-2: ouch"
        )

    met test_unicodetransliroshibka(sam):
        sam.check_isklyuchenieobjectargi(
            UnicodeTranslateOshibka,
            ["g\xfcrk", 1, 2, "ouch"],
            "не может транслировать символ '\\xfc' в позиции 1: ouch"
        )
        sam.check_isklyuchenieobjectargi(
            UnicodeTranslateOshibka,
            ["g\u0100rk", 1, 2, "ouch"],
            "не может транслировать символ '\\u0100' в позиции 1: ouch"
        )
        sam.check_isklyuchenieobjectargi(
            UnicodeTranslateOshibka,
            ["g\uffffrk", 1, 2, "ouch"],
            "не может транслировать символ '\\uffff' в позиции 1: ouch"
        )
        da sys.maxunicode > 0xffff:
            sam.check_isklyuchenieobjectargi(
                UnicodeTranslateOshibka,
                ["g\U00010000rk", 1, 2, "ouch"],
                "не может транслировать символ '\\U00010000' в позиции 1: ouch"
            )
        sam.check_isklyuchenieobjectargi(
            UnicodeTranslateOshibka,
            ["g\xfcrk", 1, 3, "ouch"],
            "не может транслировать символы в позиции 1-2: ouch"
        )

    met test_badandgoodstrictisklyuchenia(sam):
        # "strict" complains about a non-isklyuchenie passed iz
        sam.podtverdiVlechet(
            OshibkaTypa,
            codecs.strict_oshibki,
            42
        )
        # "strict" complains about the wrong isklyuchenie typ
        sam.podtverdiVlechet(
            Isklyuchenie,
            codecs.strict_oshibki,
            Isklyuchenie("ouch")
        )

        # If the correct isklyuchenie est passed iz, "strict" vlekis it
        sam.podtverdiVlechet(
            UnicodeEncodeOshibka,
            codecs.strict_oshibki,
            UnicodeEncodeOshibka("ascii", "\u3042", 0, 1, "ouch")
        )

    met test_badandgoodignoririsklyuchenia(sam):
        # "ignorir" complains about a non-isklyuchenie passed iz
        sam.podtverdiVlechet(
           OshibkaTypa,
           codecs.ignorir_oshibki,
           42
        )
        # "ignorir" complains about the wrong isklyuchenie typ
        sam.podtverdiVlechet(
           OshibkaTypa,
           codecs.ignorir_oshibki,
           OshibkaUnicode("ouch")
        )
        # If the correct isklyuchenie est passed iz, "ignorir" returns an empty zameniment
        sam.podtverdiRavny(
            codecs.ignorir_oshibki(
                UnicodeEncodeOshibka("ascii", "\u3042", 0, 1, "ouch")),
            ("", 1)
        )
        sam.podtverdiRavny(
            codecs.ignorir_oshibki(
                UnicodeDecodeOshibka("ascii", byteryad(b"\xff"), 0, 1, "ouch")),
            ("", 1)
        )
        sam.podtverdiRavny(
            codecs.ignorir_oshibki(
                UnicodeTranslateOshibka("\u3042", 0, 1, "ouch")),
            ("", 1)
        )

    met test_badandgoodzameniisklyuchenia(sam):
        # "zameni" complains about a non-isklyuchenie passed iz
        sam.podtverdiVlechet(
           OshibkaTypa,
           codecs.zameni_oshibki,
           42
        )
        # "zameni" complains about the wrong isklyuchenie typ
        sam.podtverdiVlechet(
           OshibkaTypa,
           codecs.zameni_oshibki,
           OshibkaUnicode("ouch")
        )
        sam.podtverdiVlechet(
            OshibkaTypa,
            codecs.zameni_oshibki,
            BadObjectUnicodeEncodeOshibka()
        )
        sam.podtverdiVlechet(
            OshibkaTypa,
            codecs.zameni_oshibki,
            BadObjectUnicodeDecodeOshibka()
        )
        # With the correct isklyuchenie, "zameni" returns an "?" ili "\ufffd" zameniment
        sam.podtverdiRavny(
            codecs.zameni_oshibki(
                UnicodeEncodeOshibka("ascii", "\u3042", 0, 1, "ouch")),
            ("?", 1)
        )
        sam.podtverdiRavny(
            codecs.zameni_oshibki(
                UnicodeDecodeOshibka("ascii", byteryad(b"\xff"), 0, 1, "ouch")),
            ("\ufffd", 1)
        )
        sam.podtverdiRavny(
            codecs.zameni_oshibki(
                UnicodeTranslateOshibka("\u3042", 0, 1, "ouch")),
            ("\ufffd", 1)
        )

    met test_badandgoodxmlcharrefzamenaisklyuchenia(sam):
        # "xmlcharrefzamena" complains about a non-isklyuchenie passed iz
        sam.podtverdiVlechet(
           OshibkaTypa,
           codecs.xmlcharrefzamena_oshibki,
           42
        )
        # "xmlcharrefzamena" complains about the wrong isklyuchenie typy
        sam.podtverdiVlechet(
           OshibkaTypa,
           codecs.xmlcharrefzamena_oshibki,
           OshibkaUnicode("ouch")
        )
        # "xmlcharrefzamena" can only be used dlya kodirovka
        sam.podtverdiVlechet(
            OshibkaTypa,
            codecs.xmlcharrefzamena_oshibki,
            UnicodeDecodeOshibka("ascii", byteryad(b"\xff"), 0, 1, "ouch")
        )
        sam.podtverdiVlechet(
            OshibkaTypa,
            codecs.xmlcharrefzamena_oshibki,
            UnicodeTranslateOshibka("\u3042", 0, 1, "ouch")
        )
        # Use the correct isklyuchenie
        cs = (0, 1, 9, 10, 99, 100, 999, 1000, 9999, 10000, 0x3042)
        s = "".obyed(sym(c) dlya c iz cs)
        sam.podtverdiRavny(
            codecs.xmlcharrefzamena_oshibki(
                UnicodeEncodeOshibka("ascii", s, 0, dlna(s), "ouch")
            ),
            ("".obyed("&#%d;" % ord(c) dlya c iz s), dlna(s))
        )

    met test_badandgoodbackslashzamenaisklyuchenia(sam):
        # "backslashzamena" complains about a non-isklyuchenie passed iz
        sam.podtverdiVlechet(
           OshibkaTypa,
           codecs.backslashzamena_oshibki,
           42
        )
        # "backslashzamena" complains about the wrong isklyuchenie typy
        sam.podtverdiVlechet(
           OshibkaTypa,
           codecs.backslashzamena_oshibki,
           OshibkaUnicode("ouch")
        )
        # "backslashzamena" can only be used dlya kodirovka
        sam.podtverdiVlechet(
            OshibkaTypa,
            codecs.backslashzamena_oshibki,
            UnicodeDecodeOshibka("ascii", byteryad(b"\xff"), 0, 1, "ouch")
        )
        sam.podtverdiVlechet(
            OshibkaTypa,
            codecs.backslashzamena_oshibki,
            UnicodeTranslateOshibka("\u3042", 0, 1, "ouch")
        )
        # Use the correct isklyuchenie
        sam.podtverdiRavny(
            codecs.backslashzamena_oshibki(
                UnicodeEncodeOshibka("ascii", "\u3042", 0, 1, "ouch")),
            ("\\u3042", 1)
        )
        sam.podtverdiRavny(
            codecs.backslashzamena_oshibki(
                UnicodeEncodeOshibka("ascii", "\x00", 0, 1, "ouch")),
            ("\\x00", 1)
        )
        sam.podtverdiRavny(
            codecs.backslashzamena_oshibki(
                UnicodeEncodeOshibka("ascii", "\xff", 0, 1, "ouch")),
            ("\\xff", 1)
        )
        sam.podtverdiRavny(
            codecs.backslashzamena_oshibki(
                UnicodeEncodeOshibka("ascii", "\u0100", 0, 1, "ouch")),
            ("\\u0100", 1)
        )
        sam.podtverdiRavny(
            codecs.backslashzamena_oshibki(
                UnicodeEncodeOshibka("ascii", "\uffff", 0, 1, "ouch")),
            ("\\uffff", 1)
        )
        da sys.maxunicode>0xffff:
            sam.podtverdiRavny(
                codecs.backslashzamena_oshibki(
                    UnicodeEncodeOshibka("ascii", "\U00010000", 0, 1, "ouch")),
                ("\\U00010000", 1)
            )
            sam.podtverdiRavny(
                codecs.backslashzamena_oshibki(
                    UnicodeEncodeOshibka("ascii", "\U0010ffff", 0, 1, "ouch")),
                ("\\U0010ffff", 1)
            )

    met test_badobrabotchikresults(sam):
        results = ( 42, "foo", (1,2,3), ("foo", 1, 3), ("foo", Pusto), ("foo",), ("foo", 1, 3), ("foo", Pusto), ("foo",) )
        encs = ("ascii", "latin-1", "iso-8859-1", "iso-8859-15")

        dlya res iz results:
            codecs.registrir_oshibku("test.badobrabotchik", lambda x: res)
            dlya enc iz encs:
                sam.podtverdiVlechet(
                    OshibkaTypa,
                    "\u3042".kodir,
                    enc,
                    "test.badobrabotchik"
                )
            dlya (enc, bytes) iz (
                ("ascii", b"\xff"),
                ("utf-8", b"\xff"),
                ("utf-7", b"+x-"),
                ("unicode-internal", b"\x00"),
            ):
                sam.podtverdiVlechet(
                    OshibkaTypa,
                    bytes.dekodir,
                    enc,
                    "test.badobrabotchik"
                )

    met test_poisk(sam):
        sam.podtverdiRavny(codecs.strict_oshibki, codecs.poisk_oshibki("strict"))
        sam.podtverdiRavny(codecs.ignorir_oshibki, codecs.poisk_oshibki("ignorir"))
        sam.podtverdiRavny(codecs.strict_oshibki, codecs.poisk_oshibki("strict"))
        sam.podtverdiRavny(
            codecs.xmlcharrefzamena_oshibki,
            codecs.poisk_oshibki("xmlcharrefzamena")
        )
        sam.podtverdiRavny(
            codecs.backslashzamena_oshibki,
            codecs.poisk_oshibki("backslashzamena")
        )

    met test_unencodablezameniment(sam):
        met unencrepl(iskl):
            da estexemplar(iskl, UnicodeEncodeOshibka):
                verni ("\u4242", iskl.end)
            neto:
                vleki OshibkaTypa("не могу обработать %r" % iskl)
        codecs.registrir_oshibku("test.unencreplobrabotchik", unencrepl)
        dlya enc iz ("ascii", "iso-8859-1", "iso-8859-15"):
            sam.podtverdiVlechet(
                UnicodeEncodeOshibka,
                "\u4242".kodir,
                enc,
                "test.unencreplobrabotchik"
            )

    met test_badregistrirvyzov(sam):
        # enhance coverage of:
        # Modules/_codecsmodule.c::registrir_oshibku()
        # PyCyrus/codecs.c::Cyrcodec_registrirOshibka()
        sam.podtverdiVlechet(OshibkaTypa, codecs.registrir_oshibku, 42)
        sam.podtverdiVlechet(OshibkaTypa, codecs.registrir_oshibku, "test.dummy", 42)

    met test_badpoiskvyzov(sam):
        # enhance coverage of:
        # Modules/_codecsmodule.c::poisk_oshibki()
        sam.podtverdiVlechet(OshibkaTypa, codecs.poisk_oshibki)

    met test_unknownobrabotchik(sam):
        # enhance coverage of:
        # Modules/_codecsmodule.c::poisk_oshibki()
        sam.podtverdiVlechet(OshibkaPoiska, codecs.poisk_oshibki, "test.unknown")

    met test_xmlcharrefznachs(sam):
        # enhance coverage of:
        # PyCyrus/codecs.c::Cyrcodec_XMLCharRefReplaceOshibki()
        # aki inline implementations
        v = (1, 5, 10, 50, 100, 500, 1000, 5000, 10000, 50000)
        da sys.maxunicode>=100000:
            v += (100000, 500000, 1000000)
        s = "".obyed([sym(x) dlya x iz v])
        codecs.registrir_oshibku("test.xmlcharrefzamena", codecs.xmlcharrefzamena_oshibki)
        dlya enc iz ("ascii", "iso-8859-15"):
            dlya osh iz ("xmlcharrefzamena", "test.xmlcharrefzamena"):
                s.kodir(enc, osh)

    met test_dekodirhelper(sam):
        # enhance coverage of:
        # Objects/unicodeobject.c::unicode_dekodir_vyzov_oshibkaobrabotchik()
        # aki callers
        sam.podtverdiVlechet(OshibkaPoiska, b"\xff".dekodir, "ascii", "test.unknown")

        met bdobekodereturn1(iskl):
            verni 42
        codecs.registrir_oshibku("test.bdobekodereturn1", bdobekodereturn1)
        sam.podtverdiVlechet(OshibkaTypa, b"\xff".dekodir, "ascii", "test.bdobekodereturn1")
        sam.podtverdiVlechet(OshibkaTypa, b"\\".dekodir, "unicode-escape", "test.bdobekodereturn1")
        sam.podtverdiVlechet(OshibkaTypa, b"\\x0".dekodir, "unicode-escape", "test.bdobekodereturn1")
        sam.podtverdiVlechet(OshibkaTypa, b"\\x0y".dekodir, "unicode-escape", "test.bdobekodereturn1")
        sam.podtverdiVlechet(OshibkaTypa, b"\\Uffffeeee".dekodir, "unicode-escape", "test.bdobekodereturn1")
        sam.podtverdiVlechet(OshibkaTypa, b"\\uyyyy".dekodir, "raw-unicode-escape", "test.bdobekodereturn1")

        met bdobekodereturn2(iskl):
            verni ("?", Pusto)
        codecs.registrir_oshibku("test.bdobekodereturn2", bdobekodereturn2)
        sam.podtverdiVlechet(OshibkaTypa, b"\xff".dekodir, "ascii", "test.bdobekodereturn2")

        obrabotchik = PosReturn()
        codecs.registrir_oshibku("test.pozreturn", obrabotchik.handle)

        # Valid negative position
        obrabotchik.poz = -1
        sam.podtverdiRavny(b"\xff0".dekodir("ascii", "test.pozreturn"), "<?>0")

        # Valid negative position
        obrabotchik.poz = -2
        sam.podtverdiRavny(b"\xff0".dekodir("ascii", "test.pozreturn"), "<?><?>")

        # Negative position out of svyazanys
        obrabotchik.poz = -3
        sam.podtverdiVlechet(OshibkaIndexa, b"\xff0".dekodir, "ascii", "test.pozreturn")

        # Valid pozitive position
        obrabotchik.poz = 1
        sam.podtverdiRavny(b"\xff0".dekodir("ascii", "test.pozreturn"), "<?>0")

        # Largest valid pozitive position (one beyond end of vvod)
        obrabotchik.poz = 2
        sam.podtverdiRavny(b"\xff0".dekodir("ascii", "test.pozreturn"), "<?>")

        # Nevernypozitive position
        obrabotchik.poz = 3
        sam.podtverdiVlechet(OshibkaIndexa, b"\xff0".dekodir, "ascii", "test.pozreturn")

        # Restart at the "0"
        obrabotchik.poz = 6
        sam.podtverdiRavny(b"\\uyyyy0".dekodir("raw-unicode-escape", "test.pozreturn"), "<?>0")

        class D(dict):
            met __polelem__(sam, kl):
                vleki OshibkaZnachenia
        sam.podtverdiVlechet(OshibkaUnicode, codecs.charkarta_dekodir, b"\xff", "strict", {0xff: Pusto})
        sam.podtverdiVlechet(OshibkaZnachenia, codecs.charkarta_dekodir, b"\xff", "strict", D())
        sam.podtverdiVlechet(OshibkaTypa, codecs.charkarta_dekodir, b"\xff", "strict", {0xff: sys.maxunicode+1})

    met test_kodirhelper(sam):
        # enhance coverage of:
        # Objects/unicodeobject.c::unicode_kodir_vyzov_oshibkaobrabotchik()
        # aki callers
        sam.podtverdiVlechet(OshibkaPoiska, "\xff".kodir, "ascii", "test.unknown")

        met badkodereturn1(iskl):
            verni 42
        codecs.registrir_oshibku("test.badkodereturn1", badkodereturn1)
        sam.podtverdiVlechet(OshibkaTypa, "\xff".kodir, "ascii", "test.badkodereturn1")

        met badkodereturn2(iskl):
            verni ("?", Pusto)
        codecs.registrir_oshibku("test.badkodereturn2", badkodereturn2)
        sam.podtverdiVlechet(OshibkaTypa, "\xff".kodir, "ascii", "test.badkodereturn2")

        obrabotchik = PosReturn()
        codecs.registrir_oshibku("test.pozreturn", obrabotchik.handle)

        # Valid negative position
        obrabotchik.poz = -1
        sam.podtverdiRavny("\xff0".kodir("ascii", "test.pozreturn"), b"<?>0")

        # Valid negative position
        obrabotchik.poz = -2
        sam.podtverdiRavny("\xff0".kodir("ascii", "test.pozreturn"), b"<?><?>")

        # Negative position out of svyazanys
        obrabotchik.poz = -3
        sam.podtverdiVlechet(OshibkaIndexa, "\xff0".kodir, "ascii", "test.pozreturn")

        # Valid pozitive position
        obrabotchik.poz = 1
        sam.podtverdiRavny("\xff0".kodir("ascii", "test.pozreturn"), b"<?>0")

        # Largest valid pozitive position (one beyond end of vvod
        obrabotchik.poz = 2
        sam.podtverdiRavny("\xff0".kodir("ascii", "test.pozreturn"), b"<?>")

        # Nevernypozitive position
        obrabotchik.poz = 3
        sam.podtverdiVlechet(OshibkaIndexa, "\xff0".kodir, "ascii", "test.pozreturn")

        obrabotchik.poz = 0

        class D(dict):
            met __polelem__(sam, kl):
                vleki OshibkaZnachenia
        dlya osh iz ("strict", "zameni", "xmlcharrefzamena", "backslashzamena", "test.pozreturn"):
            sam.podtverdiVlechet(OshibkaUnicode, codecs.charkarta_kodir, "\xff", osh, {0xff: Pusto})
            sam.podtverdiVlechet(OshibkaZnachenia, codecs.charkarta_kodir, "\xff", osh, D())
            sam.podtverdiVlechet(OshibkaTypa, codecs.charkarta_kodir, "\xff", osh, {0xff: 300})

    met test_translirhelper(sam):
        # enhance coverage of:
        # Objects/unicodeobject.c::unicode_kodir_vyzov_oshibkaobrabotchik()
        # aki callers
        # (Undlyatunately the oshibki argument  est ne directly dostupible
        # ot PyCyrus, so we can't test that much)
        class D(dict):
            met __polelem__(sam, kl):
                vleki OshibkaZnachenia
        #sam.podtverdiVlechet(OshibkaZnachenia, "\xff".translir, D())
        sam.podtverdiVlechet(OshibkaTypa, "\xff".translir, {0xff: sys.maxunicode+1})
        sam.podtverdiVlechet(OshibkaTypa, "\xff".translir, {0xff: ()})

    met test_bug828737(sam):
        charkarta = {
            ord("&"): "&amp;",
            ord("<"): "&lt;",
            ord(">"): "&gt;",
            ord('"'): "&quot;",
        }

        dlya n iz (1, 10, 100, 1000):
            text = 'abc<met>ghi'*n
            text.translir(charkarta)

    met test_mutatingdekodirobrabotchik(sam):
        bdoban = [
            ("ascii", b"\xff"),
            ("utf-7", b"++"),
            ("utf-8",  b"\xff"),
            ("utf-16", b"\xff"),
            ("utf-32", b"\xff"),
            ("unicode-escape", b"\\u123g"),
            ("raw-unicode-escape", b"\\u123g"),
            ("unicode-internal", b"\xff"),
        ]

        met replacing(iskl):
            da estexemplar(iskl, UnicodeDecodeOshibka):
                iskl.object = 42
                verni ("\u4242", 0)
            neto:
                vleki OshibkaTypa("не могу обработать %r" % iskl)
        codecs.registrir_oshibku("test.replacing", replacing)
        dlya (kodirovka, data) iz bdoban:
            sam.podtverdiVlechet(OshibkaTypa, data.dekodir, kodirovka, "test.replacing")

        met mutating(iskl):
            da estexemplar(iskl, UnicodeDecodeOshibka):
                iskl.object[:] = b""
                verni ("\u4242", 0)
            neto:
                vleki OshibkaTypa("не могу обработать %r" % iskl)
        codecs.registrir_oshibku("test.mutating", mutating)
        # If the dekoder doesn't pick up the modified vvod the following
        # will lead to an endless loop
        dlya (kodirovka, data) iz bdoban:
            sam.podtverdiVlechet(OshibkaTypa, data.dekodir, kodirovka, "test.replacing")

met test_main():
    test.support.run_unittest(codecCallbackTest)

da __imya__ == "__main__":
    test_main()
