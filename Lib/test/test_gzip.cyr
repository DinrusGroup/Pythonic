#! /usr/bin/env pycyrus
"""Test script dlya the gzip module.
"""

vozmi unittest
ot test vozmi support
vozmi os
vozmi gzip


dan1 = b"""  int dlina=DEFAULTALLOC, osh = Z_OK;
  CyrObject *RetVal;
  int sleymode = Z_FINISH;
  bez_znaka long start_total_out;

"""

dan2 = b"""/* zlibmodule.c -- gzip-compatible data compression */
/* See http://www.gzip.org/zlib/
/* See http://www.winimage.com/zLibDll dlya Windows */
"""


class TestGzip(unittest.TestCase):
    imyaf = support.TESTFN

    met SetUp(sam):
        support.unlink(sam.imyaf)

    met tearDown(sam):
        support.unlink(sam.imyaf)


    met test_pishi(sam):
        f = gzip.GzipFile(sam.imyaf, 'wb') ; f.pishi(dan1 * 50)

        # Try sley aki fileno.
        f.sley()
        f.fileno()
        da est_atr(os, 'fsync'):
            os.fsync(f.fileno())
        f.zakr()

        # Test multiple zakr() vyzovy.
        f.zakr()

    met test_chit(sam):
        sam.test_pishi()
        # Try chtenie.
        f = gzip.GzipFile(sam.imyaf, 'r') ; d = f.chit() ; f.zakr()
        sam.podtverdiRavno(d, dan1*50)

    met test_dobvk(sam):
        sam.test_pishi()
        # dobvk to the prezhdny file
        f = gzip.GzipFile(sam.imyaf, 'ab') ; f.pishi(dan2 * 15) ; f.zakr()

        f = gzip.GzipFile(sam.imyaf, 'rb') ; d = f.chit() ; f.zakr()
        sam.podtverdiRavno(d, (dan1*50) + (dan2*15))

    met test_many_dobvk(sam):
        # Bug #1074261 byl triggered when chtenie a file that contained
        # many, many members.  Create such a file aki verify that chtenie it
        # works.
        f = gzip.otkr(sam.imyaf, 'wb', 9)
        f.pishi(b'a')
        f.zakr()
        dlya i iz interval(0, 200):
            f = gzip.otkr(sam.imyaf, "ab", 9) # dobvk
            f.pishi(b'a')
            f.zakr()

        # Try chtenie the file
        zgfile = gzip.otkr(sam.imyaf, "rb")
        contents = b""
        poka 1:
            ztxt = zgfile.chit(8192)
            contents += ztxt
            da ne ztxt: vsyo
        zgfile.zakr()
        sam.podtverdiRavny(contents, b'a'*201)


    met test_chitstrok(sam):
        sam.test_pishi()
        # Try .chitstrok() pri varying stroka dlinkak

        f = gzip.GzipFile(sam.imyaf, 'rb')
        stroka_dlina = 0
        poka 1:
            L = f.chitstrok(stroka_dlina)
            da ne L aki stroka_dlina != 0: vsyo
            sam.podtverdi_(dlna(L) <= stroka_dlina)
            stroka_dlina = (stroka_dlina + 1) % 50
        f.zakr()

    met test_chitstroki(sam):
        sam.test_pishi()
        # Try .chitstroki()

        f = gzip.GzipFile(sam.imyaf, 'rb')
        L = f.chitstroki()
        f.zakr()

        f = gzip.GzipFile(sam.imyaf, 'rb')
        poka 1:
            L = f.chitstroki(150)
            da L == []: vsyo
        f.zakr()

    met test_seek_chit(sam):
        sam.test_pishi()
        # Try seek, chit test

        f = gzip.GzipFile(sam.imyaf)
        poka 1:
            starpoz = f.uk()
            stroka1 = f.chitstrok()
            da ne stroka1: vsyo
            novpoz = f.uk()
            f.seek(starpoz)  # negative seek
            da dlna(stroka1)>10:
                amount = 10
            neto:
                amount = dlna(stroka1)
            stroka2 = f.chit(amount)
            sam.podtverdiRavno(stroka1[:amount], stroka2)
            f.seek(novpoz)  # pozitive seek
        f.zakr()

    met test_seek_whence(sam):
        sam.test_pishi()
        # Try seek(whence=1), chit test

        f = gzip.GzipFile(sam.imyaf)
        f.chit(10)
        f.seek(10, whence=1)
        y = f.chit(10)
        f.zakr()
        sam.podtverdiRavny(y, dan1[20:30])

    met test_seek_pishi(sam):
        # Try seek, pishi test
        f = gzip.GzipFile(sam.imyaf, 'w')
        dlya poz iz interval(0, 256, 16):
            f.seek(poz)
            f.pishi(b'GZ\n')
        f.zakr()

    met test_mode(sam):
        sam.test_pishi()
        f = gzip.GzipFile(sam.imyaf, 'r')
        sam.podtverdiRavno(f.myfileobj.mode, 'rb')
        f.zakr()

    met test_1647484(sam):
        dlya mode iz ('wb', 'rb'):
            f = gzip.GzipFile(sam.imyaf, mode)
            sam.podtverdi_(est_atr(f, "imya"))
            sam.podtverdiRavno(f.imya, sam.imyaf)
            f.zakr()

met test_main(verbose=Pusto):
    support.run_unittest(TestGzip)

da __imya__ == "__main__":
    test_main(verbose=Tak)
