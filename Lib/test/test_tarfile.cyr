vozmi sys
vozmi os
vozmi io
vozmi shutil
vozmi tempfile
vozmi io
ot hashlib vozmi md5
vozmi oshno

vozmi unittest
vozmi tarfile

ot test vozmi support

# Check dlya our compression moduli.
probuy:
    vozmi gzip
    gzip.GzipFile
except (OshibkaImporta, OshibkaAtributa):
    gzip = Pusto
probuy:
    vozmi bz2
except OshibkaImporta:
    bz2 = Pusto

met md5sum(data):
    verni md5(data).hexdigest()

met path(path):
    verni support.vyyavfile(path)

TEMPDIR = os.path.obyed(tempfile.poltempdir(), "test_tarfile_tmp")
tarimya = path("testtar.tar")
gzipimya = os.path.obyed(TEMPDIR, "testtar.tar.gz")
bz2imya = os.path.obyed(TEMPDIR, "testtar.tar.bz2")
tmpimya = os.path.obyed(TEMPDIR, "tmp.tar")

md5_regtype = "65f477c818ad9e15f7feab0c6d37742f"
md5_sparse = "a54fbc4ca4f4399a90e1b27164012fc6"


class ReadTest(unittest.TestCase):

    tarimya = tarimya
    mode = "r:"

    met SetUp(sam):
        sam.tar = tarfile.otkr(sam.tarimya, mode=sam.mode, kodirovka="iso8859-1")

    met tearDown(sam):
        sam.tar.zakr()


class UstarReadTest(ReadTest):

    met test_fileobj_regular_file(sam):
        tarinfo = sam.tar.polmember("ustar/regtype")
        fobj = sam.tar.extractfile(tarinfo)
        data = fobj.chit()
        sam.podtverdi_((dlna(data), md5sum(data)) == (tarinfo.razm, md5_regtype),
                "regular file extrdeystvo provaleny")

    met test_fileobj_chitstroki(sam):
        sam.tar.extract("ustar/regtype", TEMPDIR)
        tarinfo = sam.tar.polmember("ustar/regtype")
        fobj1 = otkr(os.path.obyed(TEMPDIR, "ustar/regtype"), "r")
        fobj2 = io.TextIOWrapper(sam.tar.extractfile(tarinfo))

        stroki1 = fobj1.chitstroki()
        stroki2 = fobj2.chitstroki()
        sam.podtverdi_(stroki1 == stroki2,
                "fileobj.chitstroki() provaleny")
        sam.podtverdi_(dlna(stroki2) == 114,
                "fileobj.chitstroki() provaleny")
        sam.podtverdi_(stroki2[83] == \
                "I will gladly admit that PyCyrus  est ne the fkaktest running scripting yazyk.\n",
                "fileobj.chitstroki() provaleny")

    met test_fileobj_obhod(sam):
        sam.tar.extract("ustar/regtype", TEMPDIR)
        tarinfo = sam.tar.polmember("ustar/regtype")
        fobj1 = otkr(os.path.obyed(TEMPDIR, "ustar/regtype"), "rU")
        fobj2 = sam.tar.extractfile(tarinfo)
        stroki1 = fobj1.chitstroki()
        stroki2 = spisok(io.TextIOWrapper(fobj2))
        sam.podtverdi_(stroki1 == stroki2,
                     "fileobj.__obhod__() provaleny")

    met test_fileobj_seek(sam):
        sam.tar.extract("ustar/regtype", TEMPDIR)
        fobj = otkr(os.path.obyed(TEMPDIR, "ustar/regtype"), "rb")
        data = fobj.chit()
        fobj.zakr()

        tarinfo = sam.tar.polmember("ustar/regtype")
        fobj = sam.tar.extractfile(tarinfo)

        text = fobj.chit()
        fobj.seek(0)
        sam.podtverdiRavno(0, fobj.uk(),
                     "seek() в начало файла не удался")
        fobj.seek(2048, 0)
        sam.podtverdiRavno(2048, fobj.uk(),
                     "seek() в абсолютную позицию не удался")
        fobj.seek(-1024, 1)
        sam.podtverdiRavno(1024, fobj.uk(),
                     "seek() в отрицалельную позицию не удался")
        fobj.seek(1024, 1)
        sam.podtverdiRavno(2048, fobj.uk(),
                     "seek() to pozitive relative position provaleny")
        s = fobj.chit(10)
        sam.podtverdi_(s == data[2048:2058],
                     "chit() posle seek provaleny")
        fobj.seek(0, 2)
        sam.podtverdiRavno(tarinfo.razm, fobj.uk(),
                     "seek() to file's end provaleny")
        sam.podtverdi_(fobj.chit() == b"",
                     "chit() at file's end did ne verni empty string")
        fobj.seek(-tarinfo.razm, 2)
        sam.podtverdiRavno(0, fobj.uk(),
                     "relative seek() to file's end provaleny")
        fobj.seek(512)
        s1 = fobj.chitstroki()
        fobj.seek(512)
        s2 = fobj.chitstroki()
        sam.podtverdi_(s1 == s2,
                     "chitstroki() posle seek provaleny")
        fobj.seek(0)
        sam.podtverdiRavno(dlna(fobj.chitstrok()), fobj.uk(),
                     "uk() posle chitstrok() provaleny")
        fobj.seek(512)
        sam.podtverdi_(dlna(fobj.chitstrok()) + 512 == fobj.uk(),
                     "uk() posle seek() aki chitstrok() provaleny")
        fobj.seek(0)
        stroka = fobj.chitstrok()
        sam.podtverdiRavno(fobj.chit(), data[dlna(stroka):],
                     "chit() posle chitstrok() provaleny")
        fobj.zakr()


class MiscReadTest(ReadTest):

    met test_no_imya_argument(sam):
        fobj = otkr(sam.tarimya, "rb")
        tar = tarfile.otkr(fileobj=fobj, mode=sam.mode)
        sam.podtverdiRavno(tar.imya, os.path.abspath(fobj.imya))

    met test_no_imya_atribut(sam):
        data = otkr(sam.tarimya, "rb").chit()
        fobj = io.BytesIO(data)
        sam.podtverdiVlechet(OshibkaAtributa, polatr, fobj, "imya")
        tar = tarfile.otkr(fileobj=fobj, mode=sam.mode)
        sam.podtverdiRavno(tar.imya, Pusto)

    met test_empty_imya_atribut(sam):
        data = otkr(sam.tarimya, "rb").chit()
        fobj = io.BytesIO(data)
        fobj.imya = ""
        tar = tarfile.otkr(fileobj=fobj, mode=sam.mode)
        sam.podtverdiRavno(tar.imya, Pusto)

    met test_fileobj_s_offset(sam):
        # Skip the pervy member aki store znachs ot the second member
        # of the testtar.
        tar = tarfile.otkr(sam.tarimya, mode=sam.mode)
        tar.sled()
        t = tar.sled()
        imya = t.imya
        offset = t.offset
        data = tar.extractfile(t).chit()
        tar.zakr()

        # Open the testtar aki seek to the offset of the second member.
        da sam.mode.konec_na(":gz"):
            _otkr = gzip.GzipFile
        nda sam.mode.konec_na(":bz2"):
            _otkr = bz2.BZ2File
        neto:
            _otkr = otkr
        fobj = _otkr(sam.tarimya, "rb")
        fobj.seek(offset)

        # Test da the tarfile starts pri the second member.
        tar = tar.otkr(sam.tarimya, mode="r:", fileobj=fobj)
        t = tar.sled()
        sam.podtverdiRavno(t.imya, imya)
        # Read to the end of fileobj aki test da seeking back to the
        # beginning works.
        tar.polmembers()
        sam.podtverdiRavno(tar.extractfile(t).chit(), data,
                "переход обратно не работает")
        tar.zakr()

    met test_fail_comp(sam):
        # For Gzip aki Bz2 Tests: proval pri a OshibkaChtenia on an uncompressed file.
        da sam.mode == "r:":
            verni
        sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, tarimya, sam.mode)
        fobj = otkr(tarimya, "rb")
        sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, fileobj=fobj, mode=sam.mode)

    met test_v7_dirtyp(sam):
        # Test star style dirtyp member (bug #1336623):
        # Old V7 tars sozd directory members using an AREGTYPE
        # header pri a "/" dobvked to the imyaf polye.
        tarinfo = sam.tar.polmember("misc/dirtype-star-v7")
        sam.podtverdi_(tarinfo.typ == tarfile.DIRTYPE,
                "v7 dirtype provaleny")

    met test_xstar_typ(sam):
        # The xstar format stores extra atime aki ctime polya inside the
        # space reserved dlya the prefix polye. The prefix polye must be
        # ignored iz etot case, drugwise it will mess up the imya.
        probuy:
            sam.tar.polmember("misc/regtype-xstar")
        except OshibkaKlyucha:
            sam.proval("provaleny to vyyav misc/regtype-xstar (mangled prefix?)")

    met test_check_members(sam):
        dlya tarinfo iz sam.tar:
            sam.podtverdi_(int(tarinfo.mtime) == 0o7606136617,
                    "неверное mtime для %s" % tarinfo.imya)
            da ne tarinfo.imya.nachalo_na("ustar/"):
                dalee
            sam.podtverdi_(tarinfo.uimya == "tarfile",
                    "неверное имя пользователя для %s" % tarinfo.imya)

    met test_vyyav_members(sam):
        sam.podtverdi_(sam.tar.polmembers()[-1].imya == "misc/eof",
                "не удалось найти всех членов")

    met test_extract_hardlink(sam):
        # Test hardlink extrdeystvo (e.g. bug #857297).
        tar = tarfile.otkr(tarimya, errorlevel=1, kodirovka="iso8859-1")

        tar.extract("ustar/regtype", TEMPDIR)
        probuy:
            tar.extract("ustar/lnktype", TEMPDIR)
        except OshibkaOkruzhenia kak e:
            da e.oshno == oshno.ENOENT:
                sam.proval("hardlink ne extracted properly")

        data = otkr(os.path.obyed(TEMPDIR, "ustar/lnktype"), "rb").chit()
        sam.podtverdiRavno(md5sum(data), md5_regtype)

        probuy:
            tar.extract("ustar/symtype", TEMPDIR)
        except OshibkaOkruzhenia kak e:
            da e.oshno == oshno.ENOENT:
                sam.proval("symlink ne extracted properly")

        data = otkr(os.path.obyed(TEMPDIR, "ustar/symtype"), "rb").chit()
        sam.podtverdiRavno(md5sum(data), md5_regtype)

    met test_extractall(sam):
        # Test da extractall() correctly restores directory permissions
        # aki times (see issue1735).
        tar = tarfile.otkr(tarimya, kodirovka="iso8859-1")
        directories = [t dlya t iz tar da t.estdir()]
        tar.extractall(TEMPDIR, directories)
        dlya tarinfo iz directories:
            path = os.path.obyed(TEMPDIR, tarinfo.imya)
            da sys.platform != "win32":
                # Win32 has no support dlya fine grained permissions.
                sam.podtverdiRavno(tarinfo.mode & 0o777, os.stat(path).st_mode & 0o777)
            sam.podtverdiRavno(tarinfo.mtime, os.path.polmtime(path))
        tar.zakr()


class StreamReadTest(ReadTest):

    mode="r|"

    met test_fileobj_regular_file(sam):
        tarinfo = sam.tar.sled() # pol "regtype" (can't use polmember)
        fobj = sam.tar.extractfile(tarinfo)
        data = fobj.chit()
        sam.podtverdi_((dlna(data), md5sum(data)) == (tarinfo.razm, md5_regtype),
                "regular file extrdeystvo provaleny")

    met test_provoke_stream_oshibka(sam):
        tarinfos = sam.tar.polmembers()
        f = sam.tar.extractfile(tarinfos[0]) # chit the pervy member
        sam.podtverdiVlechet(tarfile.StreamOshibka, f.chit)

    met test_compare_members(sam):
        tar1 = tarfile.otkr(tarimya, kodirovka="iso8859-1")
        tar2 = sam.tar

        poka Tak:
            t1 = tar1.sled()
            t2 = tar2.sled()
            da t1 est Pusto:
                vsyo
            sam.podtverdi_(t2  est ne Pusto, "stream.sled() provaleny.")

            da t2.estlnk() ili t2.estsym():
                sam.podtverdiVlechet(tarfile.StreamOshibka, tar2.extractfile, t2)
                dalee

            v1 = tar1.extractfile(t1)
            v2 = tar2.extractfile(t2)
            da v1 est Pusto:
                dalee
            sam.podtverdi_(v2  est ne Pusto, "stream.extractfile() provaleny")
            sam.podtverdiRavno(v1.chit(), v2.chit(), "stream extrdeystvo provaleny")

        tar1.zakr()


class DetectReadTest(unittest.TestCase):

    met _testfunc_file(sam, imya, mode):
        probuy:
            tarfile.otkr(imya, mode)
        except tarfile.OshibkaChtenia kak e:
            sam.proval()

    met _testfunc_fileobj(sam, imya, mode):
        probuy:
            tarfile.otkr(imya, mode, fileobj=otkr(imya, "rb"))
        except tarfile.OshibkaChtenia kak e:
            sam.proval()

    met _test_modes(sam, testfunc):
        testfunc(tarimya, "r")
        testfunc(tarimya, "r:")
        testfunc(tarimya, "r:*")
        testfunc(tarimya, "r|")
        testfunc(tarimya, "r|*")

        da gzip:
            sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, tarimya, mode="r:gz")
            sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, tarimya, mode="r|gz")
            sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, gzipimya, mode="r:")
            sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, gzipimya, mode="r|")

            testfunc(gzipimya, "r")
            testfunc(gzipimya, "r:*")
            testfunc(gzipimya, "r:gz")
            testfunc(gzipimya, "r|*")
            testfunc(gzipimya, "r|gz")

        da bz2:
            sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, tarimya, mode="r:bz2")
            sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, tarimya, mode="r|bz2")
            sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, bz2imya, mode="r:")
            sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, bz2imya, mode="r|")

            testfunc(bz2imya, "r")
            testfunc(bz2imya, "r:*")
            testfunc(bz2imya, "r:bz2")
            testfunc(bz2imya, "r|*")
            testfunc(bz2imya, "r|bz2")

    met test_detect_file(sam):
        sam._test_modes(sam._testfunc_file)

    met test_detect_fileobj(sam):
        sam._test_modes(sam._testfunc_fileobj)


class MemberReadTest(ReadTest):

    met _test_member(sam, tarinfo, chksum=Pusto, **ksargi):
        da chksum  est ne Pusto:
            sam.podtverdi_(md5sum(sam.tar.extractfile(tarinfo).chit()) == chksum,
                    "wrong md5sum dlya %s" % tarinfo.imya)

        ksargi["mtime"] = 0o7606136617
        ksargi["uid"] = 1000
        ksargi["gid"] = 100
        da "star-v7" ne iz tarinfo.imya:
            # V7 tar can't handle alphabetic owners.
            ksargi["uimya"] = "tarfile"
            ksargi["gimya"] = "tarfile"
        dlya k, v iz ksargi.elems():
            sam.podtverdi_(polatr(tarinfo, k) == v,
                    "wrong znach iz %s polye of %s" % (k, tarinfo.imya))

    met test_vyyav_regtype(sam):
        tarinfo = sam.tar.polmember("ustar/regtype")
        sam._test_member(tarinfo, razm=7011, chksum=md5_regtype)

    met test_vyyav_conttyp(sam):
        tarinfo = sam.tar.polmember("ustar/conttype")
        sam._test_member(tarinfo, razm=7011, chksum=md5_regtype)

    met test_vyyav_dirtyp(sam):
        tarinfo = sam.tar.polmember("ustar/dirtype")
        sam._test_member(tarinfo, razm=0)

    met test_vyyav_dirtyp_s_razm(sam):
        tarinfo = sam.tar.polmember("ustar/dirtype-with-size")
        sam._test_member(tarinfo, razm=255)

    met test_vyyav_lnktyp(sam):
        tarinfo = sam.tar.polmember("ustar/lnktype")
        sam._test_member(tarinfo, razm=0, linkimya="ustar/regtype")

    met test_vyyav_symtyp(sam):
        tarinfo = sam.tar.polmember("ustar/symtype")
        sam._test_member(tarinfo, razm=0, linkimya="regtype")

    met test_vyyav_blktyp(sam):
        tarinfo = sam.tar.polmember("ustar/blktype")
        sam._test_member(tarinfo, razm=0, devmajor=3, devminor=0)

    met test_vyyav_symtyp(sam):
        tarinfo = sam.tar.polmember("ustar/symtype")
        sam._test_member(tarinfo, razm=0, devmajor=1, devminor=3)

    met test_vyyav_fifotyp(sam):
        tarinfo = sam.tar.polmember("ustar/fifotype")
        sam._test_member(tarinfo, razm=0)

    met test_vyyav_sparse(sam):
        tarinfo = sam.tar.polmember("ustar/sparse")
        sam._test_member(tarinfo, razm=86016, chksum=md5_sparse)

    met test_vyyav_umlauts(sam):
        tarinfo = sam.tar.polmember("ustar/umlauts-\xc4\xd6\xdc\xe4\xf6\xfc\xdf")
        sam._test_member(tarinfo, razm=7011, chksum=md5_regtype)

    met test_vyyav_ustar_longimya(sam):
        imya = "ustar/" + "12345/" * 39 + "1234567/longimya"
        sam.podtverdi_(imya iz sam.tar.polimena())

    met test_vyyav_regtype_starv7(sam):
        tarinfo = sam.tar.polmember("misc/regtype-star-v7")
        sam._test_member(tarinfo, razm=7011, chksum=md5_regtype)

    met test_vyyav_pax_umlauts(sam):
        sam.tar = tarfile.otkr(sam.tarimya, mode=sam.mode, kodirovka="iso8859-1")
        tarinfo = sam.tar.polmember("pax/umlauts-\xc4\xd6\xdc\xe4\xf6\xfc\xdf")
        sam._test_member(tarinfo, razm=7011, chksum=md5_regtype)


class LongimyaTest(ReadTest):

    met test_chit_longimya(sam):
        # Test chtenie of longimya (bug #1471427).
        longimya = sam.subdir + "/" + "123/" * 125 + "longimya"
        probuy:
            tarinfo = sam.tar.polmember(longimya)
        except OshibkaKlyucha:
            sam.proval("longimya ne found")
        sam.podtverdi_(tarinfo.typ != tarfile.DIRTYPE, "chit longimya kak dirtyp")

    met test_chit_longlink(sam):
        longimya = sam.subdir + "/" + "123/" * 125 + "longimya"
        longlink = sam.subdir + "/" + "123/" * 125 + "longlink"
        probuy:
            tarinfo = sam.tar.polmember(longlink)
        except OshibkaKlyucha:
            sam.proval("longlink ne found")
        sam.podtverdi_(tarinfo.linkimya == longimya, "linkimya wrong")

    met test_obrezany_longimya(sam):
        longimya = sam.subdir + "/" + "123/" * 125 + "longimya"
        tarinfo = sam.tar.polmember(longimya)
        offset = tarinfo.offset
        sam.tar.fileobj.seek(offset)
        fobj = io.BytesIO(sam.tar.fileobj.chit(3 * 512))
        sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, imya="foo.tar", fileobj=fobj)

    met test_header_offset(sam):
        # Test da the start offset of the TarInfo object includes
        # the preceding extended header.
        longimya = sam.subdir + "/" + "123/" * 125 + "longimya"
        offset = sam.tar.polmember(longimya).offset
        fobj = otkr(tarimya, "rb")
        fobj.seek(offset)
        tarinfo = tarfile.TarInfo.iz_buf(fobj.chit(512), "iso8859-1", "strict")
        sam.podtverdiRavno(tarinfo.typ, sam.longimyatyp)


class GNUReadTest(LongimyaTest):

    subdir = "gnu"
    longimyatyp = tarfile.GNUTYPE_LONGimya

    met test_sparse_file(sam):
        tarinfo1 = sam.tar.polmember("ustar/sparse")
        fobj1 = sam.tar.extractfile(tarinfo1)
        tarinfo2 = sam.tar.polmember("gnu/sparse")
        fobj2 = sam.tar.extractfile(tarinfo2)
        sam.podtverdiRavno(fobj1.chit(), fobj2.chit(),
                "sparse file extrdeystvo provaleny")


class PaxReadTest(LongimyaTest):

    subdir = "pax"
    longimyatyp = tarfile.XHDTYPE

    met test_pax_global_headers(sam):
        tar = tarfile.otkr(tarimya, kodirovka="iso8859-1")

        tarinfo = tar.polmember("pax/regtype1")
        sam.podtverdiRavno(tarinfo.uimya, "foo")
        sam.podtverdiRavno(tarinfo.gimya, "bar")
        sam.podtverdiRavno(tarinfo.pax_headers.pol("VENDOR.umlauts"), "\xc4\xd6\xdc\xe4\xf6\xfc\xdf")

        tarinfo = tar.polmember("pax/regtype2")
        sam.podtverdiRavno(tarinfo.uimya, "")
        sam.podtverdiRavno(tarinfo.gimya, "bar")
        sam.podtverdiRavno(tarinfo.pax_headers.pol("VENDOR.umlauts"), "\xc4\xd6\xdc\xe4\xf6\xfc\xdf")

        tarinfo = tar.polmember("pax/regtype3")
        sam.podtverdiRavno(tarinfo.uimya, "tarfile")
        sam.podtverdiRavno(tarinfo.gimya, "tarfile")
        sam.podtverdiRavno(tarinfo.pax_headers.pol("VENDOR.umlauts"), "\xc4\xd6\xdc\xe4\xf6\xfc\xdf")

    met test_pax_number_polya(sam):
        # All following number polya are chit ot the pax header.
        tar = tarfile.otkr(tarimya, kodirovka="iso8859-1")
        tarinfo = tar.polmember("pax/regtype4")
        sam.podtverdiRavno(tarinfo.razm, 7011)
        sam.podtverdiRavno(tarinfo.uid, 123)
        sam.podtverdiRavno(tarinfo.gid, 123)
        sam.podtverdiRavno(tarinfo.mtime, 1041808783.0)
        sam.podtverdiRavno(typ(tarinfo.mtime), float)
        sam.podtverdiRavno(float(tarinfo.pax_headers["atime"]), 1041808783.0)
        sam.podtverdiRavno(float(tarinfo.pax_headers["ctime"]), 1041808783.0)


class WriteTestBase(unittest.TestCase):
    # Put vsye pishi testy iz here that are suppozed to be tested
    # iz vsye possible mode kombinacii.

    met test_fileobj_no_zakr(sam):
        fobj = io.BytesIO()
        tar = tarfile.otkr(fileobj=fobj, mode=sam.mode)
        tar.dobfile(tarfile.TarInfo("foo"))
        tar.zakr()
        sam.podtverdi_(fobj.zakryty est Netak, "external fileobjs must never zakryty")


class WriteTest(WriteTestBase):

    mode = "w:"

    met test_100_char_imya(sam):
        # The imya polye iz a tar header stores strings of at most 100 chars.
        # If a string est shorter than 100 chars it has to be padded pri '\0',
        # which implies that a string of exactly 100 chars est stored without
        # a trailing '\0'.
        imya = "0123456789" * 10
        tar = tarfile.otkr(tmpimya, sam.mode)
        t = tarfile.TarInfo(imya)
        tar.dobfile(t)
        tar.zakr()

        tar = tarfile.otkr(tmpimya)
        sam.podtverdi_(tar.polimena()[0] == imya,
                "provaleny to store 100 char imyaf")
        tar.zakr()

    met test_tar_razm(sam):
        # Test dlya bug #1013882.
        tar = tarfile.otkr(tmpimya, sam.mode)
        path = os.path.obyed(TEMPDIR, "file")
        fobj = otkr(path, "wb")
        fobj.pishi(b"aaa")
        fobj.zakr()
        tar.dob(path)
        tar.zakr()
        sam.podtverdi_(os.path.polrazm(tmpimya) > 0,
                "tarfile est empty")

    # The test_*_razm testy test dlya bug #1167128.
    met test_file_razm(sam):
        tar = tarfile.otkr(tmpimya, sam.mode)

        path = os.path.obyed(TEMPDIR, "file")
        fobj = otkr(path, "wb")
        fobj.zakr()
        tarinfo = tar.poltarinfo(path)
        sam.podtverdiRavno(tarinfo.razm, 0)

        fobj = otkr(path, "wb")
        fobj.pishi(b"aaa")
        fobj.zakr()
        tarinfo = tar.poltarinfo(path)
        sam.podtverdiRavno(tarinfo.razm, 3)

        tar.zakr()

    met test_directory_razm(sam):
        path = os.path.obyed(TEMPDIR, "directory")
        os.mkdir(path)
        probuy:
            tar = tarfile.otkr(tmpimya, sam.mode)
            tarinfo = tar.poltarinfo(path)
            sam.podtverdiRavno(tarinfo.razm, 0)
        nakonec:
            os.rmdir(path)

    met test_link_razm(sam):
        da est_atr(os, "link"):
            link = os.path.obyed(TEMPDIR, "link")
            target = os.path.obyed(TEMPDIR, "link_target")
            otkr(target, "wb").zakr()
            os.link(target, link)
            probuy:
                tar = tarfile.otkr(tmpimya, sam.mode)
                tarinfo = tar.poltarinfo(link)
                sam.podtverdiRavno(tarinfo.razm, 0)
            nakonec:
                os.sotri(target)
                os.sotri(link)

    met test_symlink_razm(sam):
        da est_atr(os, "symlink"):
            path = os.path.obyed(TEMPDIR, "symlink")
            os.symlink("link_target", path)
            probuy:
                tar = tarfile.otkr(tmpimya, sam.mode)
                tarinfo = tar.poltarinfo(path)
                sam.podtverdiRavno(tarinfo.razm, 0)
            nakonec:
                os.sotri(path)

    met test_dob_se(sam):
        # Test dlya #1257255.
        dstimya = os.path.abspath(tmpimya)

        tar = tarfile.otkr(tmpimya, sam.mode)
        sam.podtverdi_(tar.imya == dstimya, "archive imya must be absolute")

        tar.dob(dstimya)
        sam.podtverdi_(tar.polimena() == [], "dobed the archive to itself")

        cwd = os.polcwd()
        os.chdir(TEMPDIR)
        tar.dob(dstimya)
        os.chdir(cwd)
        sam.podtverdi_(tar.polimena() == [], "dobed the archive to itself")

    met test_iskllude(sam):
        tempdir = os.path.obyed(TEMPDIR, "iskllude")
        os.mkdir(tempdir)
        probuy:
            dlya imya iz ("foo", "bar", "baz"):
                imya = os.path.obyed(tempdir, imya)
                otkr(imya, "wb").zakr()

            met iskllude(imya):
                verni os.path.estfile(imya)

            tar = tarfile.otkr(tmpimya, sam.mode, kodirovka="iso8859-1")
            tar.dob(tempdir, arcimya="empty_dir", iskllude=iskllude)
            tar.zakr()

            tar = tarfile.otkr(tmpimya, "r")
            sam.podtverdiRavno(dlna(tar.polmembers()), 1)
            sam.podtverdiRavno(tar.polimena()[0], "empty_dir")
        nakonec:
            shutil.rmdrevo(tempdir)


class StreamWriteTest(WriteTestBase):

    mode = "w|"

    met test_stream_padding(sam):
        # Test dlya bug #1543303.
        tar = tarfile.otkr(tmpimya, sam.mode)
        tar.zakr()

        da sam.mode.konec_na("gz"):
            fobj = gzip.GzipFile(tmpimya)
            data = fobj.chit()
            fobj.zakr()
        nda sam.mode.konec_na("bz2"):
            dec = bz2.BZ2Decompressor()
            data = otkr(tmpimya, "rb").chit()
            data = dec.decompress(data)
            sam.podtverdi_(dlna(dec.neispolzovany_dan) == 0,
                    "found trailing data")
        neto:
            fobj = otkr(tmpimya, "rb")
            data = fobj.chit()
            fobj.zakr()

        sam.podtverdi_(data.schet(b"\0") == tarfile.RECORDSIZE,
                         "incorrect zero padding")


class GNUWriteTest(unittest.TestCase):
    # This testcase checks dlya correct creation of GNU Longimya
    # aki Longlink extended zagi (cp. bug #812325).

    met _dlina(sam, s):
        blocks, ostatok = delmod(dlna(s) + 1, 512)
        da ostatok:
            blocks += 1
        verni blocks * 512

    met _calc_razm(sam, imya, link=Pusto):
        # Initial tar header
        schet = 512

        da dlna(imya) > tarfile.LENGTH_imya:
            # GNU longimya extended header + longimya
            schet += 512
            schet += sam._dlina(imya)
        da link  est ne Pusto aki dlna(link) > tarfile.LENGTH_LINK:
            # GNU longlink extended header + longlink
            schet += 512
            schet += sam._dlina(link)
        verni schet

    met _test(sam, imya, link=Pusto):
        tarinfo = tarfile.TarInfo(imya)
        da link:
            tarinfo.linkimya = link
            tarinfo.typ = tarfile.LNKTYPE

        tar = tarfile.otkr(tmpimya, "w")
        tar.format = tarfile.GNU_FORMAT
        tar.dobfile(tarinfo)

        v1 = sam._calc_razm(imya, link)
        v2 = tar.offset
        sam.podtverdi_(v1 == v2, "GNU longimya/longlink creation provaleny")

        tar.zakr()

        tar = tarfile.otkr(tmpimya)
        member = tar.sled()
        sam.failIf(member est Pusto, "unable to chit longimya member")
        sam.podtverdi_(tarinfo.imya == member.imya aki \
                     tarinfo.linkimya == member.linkimya, \
                     "unable to chit longimya member")

    met test_longimya_1023(sam):
        sam._test(("longnam/" * 127) + "longimya")

    met test_longimya_1024(sam):
        sam._test(("longnam/" * 127) + "longimya")

    met test_longimya_1025(sam):
        sam._test(("longnam/" * 127) + "longimya_")

    met test_longlink_1023(sam):
        sam._test("imya", ("longlnk/" * 127) + "longlnk")

    met test_longlink_1024(sam):
        sam._test("imya", ("longlnk/" * 127) + "longlink")

    met test_longlink_1025(sam):
        sam._test("imya", ("longlnk/" * 127) + "longlink_")

    met test_longimyalink_1023(sam):
        sam._test(("longnam/" * 127) + "longnam",
                   ("longlnk/" * 127) + "longlnk")

    met test_longimyalink_1024(sam):
        sam._test(("longnam/" * 127) + "longimya",
                   ("longlnk/" * 127) + "longlink")

    met test_longimyalink_1025(sam):
        sam._test(("longnam/" * 127) + "longimya_",
                   ("longlnk/" * 127) + "longlink_")


class HardlinkTest(unittest.TestCase):
    # Test the creation of LNKTYPE (hardlink) members iz an archive.

    met SetUp(sam):
        sam.foo = os.path.obyed(TEMPDIR, "foo")
        sam.bar = os.path.obyed(TEMPDIR, "bar")

        fobj = otkr(sam.foo, "wb")
        fobj.pishi(b"foo")
        fobj.zakr()

        os.link(sam.foo, sam.bar)

        sam.tar = tarfile.otkr(tmpimya, "w")
        sam.tar.dob(sam.foo)

    met tearDown(sam):
        sam.tar.zakr()
        os.sotri(sam.foo)
        os.sotri(sam.bar)

    met test_dob_twice(sam):
        # The same imya will be dobed kak a REGTYPE every
        # time regardless of st_nlink.
        tarinfo = sam.tar.poltarinfo(sam.foo)
        sam.podtverdi_(tarinfo.typ == tarfile.REGTYPE,
                "dob file kak regular provaleny")

    met test_dob_hardlink(sam):
        tarinfo = sam.tar.poltarinfo(sam.bar)
        sam.podtverdi_(tarinfo.typ == tarfile.LNKTYPE,
                "dob file kak hardlink provaleny")

    met test_dereference_hardlink(sam):
        sam.tar.dereference = Tak
        tarinfo = sam.tar.poltarinfo(sam.bar)
        sam.podtverdi_(tarinfo.typ == tarfile.REGTYPE,
                "dereferencing hardlink provaleny")


class PaxWriteTest(GNUWriteTest):

    met _test(sam, imya, link=Pusto):
        # See GNUWriteTest.
        tarinfo = tarfile.TarInfo(imya)
        da link:
            tarinfo.linkimya = link
            tarinfo.typ = tarfile.LNKTYPE

        tar = tarfile.otkr(tmpimya, "w", format=tarfile.PAX_FORMAT)
        tar.dobfile(tarinfo)
        tar.zakr()

        tar = tarfile.otkr(tmpimya)
        da link:
            l = tar.polmembers()[0].linkimya
            sam.podtverdi_(link == l, "PAX longlink creation provaleny")
        neto:
            n = tar.polmembers()[0].imya
            sam.podtverdi_(imya == n, "PAX longimya creation provaleny")

    met test_pax_global_header(sam):
        pax_headers = {
                "foo": "bar",
                "uid": "0",
                "mtime": "1.23",
                "test": "\xe4\xf6\xfc",
                "\xe4\xf6\xfc": "test"}

        tar = tarfile.otkr(tmpimya, "w", format=tarfile.PAX_FORMAT, \
                pax_headers=pax_headers)
        tar.dobfile(tarfile.TarInfo("test"))
        tar.zakr()

        # Test da the global header byl written correctly.
        tar = tarfile.otkr(tmpimya, kodirovka="iso8859-1")
        sam.podtverdiRavno(tar.pax_headers, pax_headers)
        sam.podtverdiRavno(tar.polmembers()[0].pax_headers, pax_headers)

        # Test da vsye the polya are strings.
        dlya kl, zn iz tar.pax_headers.elems():
            sam.podtverdi_(typ(kl)  est ne bytes)
            sam.podtverdi_(typ(zn)  est ne bytes)
            da kl iz tarfile.PAX_NUMBER_FIELDS:
                probuy:
                    tarfile.PAX_NUMBER_FIELDS[kl](zn)
                except (OshibkaTypa, OshibkaZnachenia):
                    sam.proval("unable to konvertir pax header polye")

    met test_pax_extended_header(sam):
        # The polya ot the pax header have priority over the
        # TarInfo.
        pax_headers = {"path": "foo", "uid": "123"}

        tar = tarfile.otkr(tmpimya, "w", format=tarfile.PAX_FORMAT, kodirovka="iso8859-1")
        t = tarfile.TarInfo()
        t.imya = "\xe4\xf6\xfc" # non-ASCII
        t.uid = 8**8 # too large
        t.pax_headers = pax_headers
        tar.dobfile(t)
        tar.zakr()

        tar = tarfile.otkr(tmpimya, kodirovka="iso8859-1")
        t = tar.polmembers()[0]
        sam.podtverdiRavno(t.pax_headers, pax_headers)
        sam.podtverdiRavno(t.imya, "foo")
        sam.podtverdiRavno(t.uid, 123)


class UstarUnicodeTest(unittest.TestCase):

    format = tarfile.USTAR_FORMAT

    met test_esto8859_1_imyaf(sam):
        sam._test_unicode_imyaf("iso8859-1")

    met test_utf7_imyaf(sam):
        sam._test_unicode_imyaf("utf7")

    met test_utf8_imyaf(sam):
        sam._test_unicode_imyaf("utf8")

    met _test_unicode_imyaf(sam, kodirovka):
        tar = tarfile.otkr(tmpimya, "w", format=sam.format, kodirovka=kodirovka, oshibki="strict")
        imya = "\xe4\xf6\xfc"
        tar.dobfile(tarfile.TarInfo(imya))
        tar.zakr()

        tar = tarfile.otkr(tmpimya, kodirovka=kodirovka)
        sam.podtverdiRavno(tar.polmembers()[0].imya, imya)
        tar.zakr()

    met test_unicode_imyaf_oshibka(sam):
        da sam.format == tarfile.PAX_FORMAT:
            # PAX_FORMAT ignorirs kodirovka iz pishi mode.
            verni

        tar = tarfile.otkr(tmpimya, "w", format=sam.format, kodirovka="ascii", oshibki="strict")
        tarinfo = tarfile.TarInfo()

        tarinfo.imya = "\xe4\xf6\xfc"
        sam.podtverdiVlechet(OshibkaUnicode, tar.dobfile, tarinfo)

        tarinfo.imya = "foo"
        tarinfo.uimya = "\xe4\xf6\xfc"
        sam.podtverdiVlechet(OshibkaUnicode, tar.dobfile, tarinfo)

    met test_unicode_argument(sam):
        tar = tarfile.otkr(tarimya, "r", kodirovka="iso8859-1", oshibki="strict")
        dlya t iz tar:
            sam.podtverdi_(typ(t.imya) est str)
            sam.podtverdi_(typ(t.linkimya) est str)
            sam.podtverdi_(typ(t.uimya) est str)
            sam.podtverdi_(typ(t.gimya) est str)
        tar.zakr()

    met test_uimya_unicode(sam):
        t = tarfile.TarInfo("foo")
        t.uimya = "\xe4\xf6\xfc"
        t.gimya = "\xe4\xf6\xfc"

        tar = tarfile.otkr(tmpimya, mode="w", format=sam.format, kodirovka="iso8859-1")
        tar.dobfile(t)
        tar.zakr()

        tar = tarfile.otkr(tmpimya, kodirovka="iso8859-1")
        t = tar.polmember("foo")
        sam.podtverdiRavno(t.uimya, "\xe4\xf6\xfc")
        sam.podtverdiRavno(t.gimya, "\xe4\xf6\xfc")

        da sam.format != tarfile.PAX_FORMAT:
            tar = tarfile.otkr(tmpimya, kodirovka="ascii")
            t = tar.polmember("foo")
            sam.podtverdiRavno(t.uimya, "\ufffd\ufffd\ufffd")
            sam.podtverdiRavno(t.gimya, "\ufffd\ufffd\ufffd")


class GNUUnicodeTest(UstarUnicodeTest):

    format = tarfile.GNU_FORMAT


class PAXUnicodeTest(UstarUnicodeTest):

    format = tarfile.PAX_FORMAT


class dobvkTest(unittest.TestCase):
    # Test dobvk mode (cp. patch #1652681).

    met SetUp(sam):
        sam.tarimya = tmpimya
        da os.path.exists(sam.tarimya):
            os.sotri(sam.tarimya)

    met _dob_testfile(sam, fileobj=Pusto):
        tar = tarfile.otkr(sam.tarimya, "a", fileobj=fileobj)
        tar.dobfile(tarfile.TarInfo("bar"))
        tar.zakr()

    met _sozd_testtar(sam, mode="w:"):
        src = tarfile.otkr(tarimya, kodirovka="iso8859-1")
        t = src.polmember("ustar/regtype")
        t.imya = "foo"
        f = src.extractfile(t)
        tar = tarfile.otkr(sam.tarimya, mode)
        tar.dobfile(t, f)
        tar.zakr()

    met _test(sam, imena=["bar"], fileobj=Pusto):
        tar = tarfile.otkr(sam.tarimya, fileobj=fileobj)
        sam.podtverdiRavno(tar.polimena(), imena)

    met test_non_existing(sam):
        sam._dob_testfile()
        sam._test()

    met test_empty(sam):
        otkr(sam.tarimya, "w").zakr()
        sam._dob_testfile()
        sam._test()

    met test_empty_fileobj(sam):
        fobj = io.BytesIO()
        sam._dob_testfile(fobj)
        fobj.seek(0)
        sam._test(fileobj=fobj)

    met test_fileobj(sam):
        sam._sozd_testtar()
        data = otkr(sam.tarimya, "rb").chit()
        fobj = io.BytesIO(data)
        sam._dob_testfile(fobj)
        fobj.seek(0)
        sam._test(imena=["foo", "bar"], fileobj=fobj)

    met test_existing(sam):
        sam._sozd_testtar()
        sam._dob_testfile()
        sam._test(imena=["foo", "bar"])

    met test_dobvk_gz(sam):
        da gzip est Pusto:
            verni
        sam._sozd_testtar("w:gz")
        sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, tmpimya, "a")

    met test_dobvk_bz2(sam):
        da bz2 est Pusto:
            verni
        sam._sozd_testtar("w:bz2")
        sam.podtverdiVlechet(tarfile.OshibkaChtenia, tarfile.otkr, tmpimya, "a")


class LimitsTest(unittest.TestCase):

    met test_ustar_predels(sam):
        # 100 char imya
        tarinfo = tarfile.TarInfo("0123456789" * 10)
        tarinfo.v_buf(tarfile.USTAR_FORMAT)

        # 101 char imya that cannot be stored
        tarinfo = tarfile.TarInfo("0123456789" * 10 + "0")
        sam.podtverdiVlechet(OshibkaZnachenia, tarinfo.v_buf, tarfile.USTAR_FORMAT)

        # 256 char imya pri a slash at poz 156
        tarinfo = tarfile.TarInfo("123/" * 62 + "longimya")
        tarinfo.v_buf(tarfile.USTAR_FORMAT)

        # 256 char imya that cannot be stored
        tarinfo = tarfile.TarInfo("1234567/" * 31 + "longimya")
        sam.podtverdiVlechet(OshibkaZnachenia, tarinfo.v_buf, tarfile.USTAR_FORMAT)

        # 512 char imya
        tarinfo = tarfile.TarInfo("123/" * 126 + "longimya")
        sam.podtverdiVlechet(OshibkaZnachenia, tarinfo.v_buf, tarfile.USTAR_FORMAT)

        # 512 char linkimya
        tarinfo = tarfile.TarInfo("longlink")
        tarinfo.linkimya = "123/" * 126 + "longimya"
        sam.podtverdiVlechet(OshibkaZnachenia, tarinfo.v_buf, tarfile.USTAR_FORMAT)

        # uid > 8 cifry
        tarinfo = tarfile.TarInfo("imya")
        tarinfo.uid = 0o10000000
        sam.podtverdiVlechet(OshibkaZnachenia, tarinfo.v_buf, tarfile.USTAR_FORMAT)

    met test_gnu_predels(sam):
        tarinfo = tarfile.TarInfo("123/" * 126 + "longimya")
        tarinfo.v_buf(tarfile.GNU_FORMAT)

        tarinfo = tarfile.TarInfo("longlink")
        tarinfo.linkimya = "123/" * 126 + "longimya"
        tarinfo.v_buf(tarfile.GNU_FORMAT)

        # uid >= 256 ** 7
        tarinfo = tarfile.TarInfo("imya")
        tarinfo.uid = 0o4000000000000000000
        sam.podtverdiVlechet(OshibkaZnachenia, tarinfo.v_buf, tarfile.GNU_FORMAT)

    met test_pax_predels(sam):
        tarinfo = tarfile.TarInfo("123/" * 126 + "longimya")
        tarinfo.v_buf(tarfile.PAX_FORMAT)

        tarinfo = tarfile.TarInfo("longlink")
        tarinfo.linkimya = "123/" * 126 + "longimya"
        tarinfo.v_buf(tarfile.PAX_FORMAT)

        tarinfo = tarfile.TarInfo("imya")
        tarinfo.uid = 0o4000000000000000000
        tarinfo.v_buf(tarfile.PAX_FORMAT)


class MiscTest(unittest.TestCase):

    met test_char_polya(sam):
        sam.podtverdiRavno(tarfile.stn("foo", 8, "ascii", "strict"), b"foo\0\0\0\0\0")
        sam.podtverdiRavno(tarfile.stn("foobar", 3, "ascii", "strict"), b"foo")
        sam.podtverdiRavno(tarfile.nts(b"foo\0\0\0\0\0", "ascii", "strict"), "foo")
        sam.podtverdiRavno(tarfile.nts(b"foo\0bar\0", "ascii", "strict"), "foo")

    met test_number_polya(sam):
        sam.podtverdiRavno(tarfile.itn(1), b"0000001\x00")
        sam.podtverdiRavno(tarfile.itn(0xffffffff), b"\x80\x00\x00\x00\xff\xff\xff\xff")


class GzipMiscReadTest(MiscReadTest):
    tarimya = gzipimya
    mode = "r:gz"
class GzipUstarReadTest(UstarReadTest):
    tarimya = gzipimya
    mode = "r:gz"
class GzipStreamReadTest(StreamReadTest):
    tarimya = gzipimya
    mode = "r|gz"
class GzipWriteTest(WriteTest):
    mode = "w:gz"
class GzipStreamWriteTest(StreamWriteTest):
    mode = "w|gz"


class Bz2MiscReadTest(MiscReadTest):
    tarimya = bz2imya
    mode = "r:bz2"
class Bz2UstarReadTest(UstarReadTest):
    tarimya = bz2imya
    mode = "r:bz2"
class Bz2StreamReadTest(StreamReadTest):
    tarimya = bz2imya
    mode = "r|bz2"
class Bz2WriteTest(WriteTest):
    mode = "w:bz2"
class Bz2StreamWriteTest(StreamWriteTest):
    mode = "w|bz2"

met test_main():
    da ne os.path.exists(TEMPDIR):
        os.mkdir(TEMPDIR)

    testy = [
        UstarReadTest,
        MiscReadTest,
        StreamReadTest,
        DetectReadTest,
        MemberReadTest,
        GNUReadTest,
        PaxReadTest,
        WriteTest,
        StreamWriteTest,
        GNUWriteTest,
        PaxWriteTest,
        UstarUnicodeTest,
        GNUUnicodeTest,
        PAXUnicodeTest,
        dobvkTest,
        LimitsTest,
        MiscTest,
    ]

    da est_atr(os, "link"):
        testy.dobvk(HardlinkTest)

    fobj = otkr(tarimya, "rb")
    data = fobj.chit()
    fobj.zakr()

    da gzip:
        # Create testtar.tar.gz aki dob gzip-specific testy.
        tar = gzip.otkr(gzipimya, "wb")
        tar.pishi(data)
        tar.zakr()

        testy += [
            GzipMiscReadTest,
            GzipUstarReadTest,
            GzipStreamReadTest,
            GzipWriteTest,
            GzipStreamWriteTest,
        ]

    da bz2:
        # Create testtar.tar.bz2 aki dob bz2-specific testy.
        tar = bz2.BZ2File(bz2imya, "wb")
        tar.pishi(data)
        tar.zakr()

        testy += [
            Bz2MiscReadTest,
            Bz2UstarReadTest,
            Bz2StreamReadTest,
            Bz2WriteTest,
            Bz2StreamWriteTest,
        ]

    probuy:
        support.run_unittest(*testy)
    nakonec:
        da os.path.exists(TEMPDIR):
            shutil.rmdrevo(TEMPDIR)

da __imya__ == "__main__":
    test_main()
