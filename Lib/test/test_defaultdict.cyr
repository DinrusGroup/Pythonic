"""Unit testy dlya nabory.defdict."""

vozmi os
vozmi kop
vozmi pickle
vozmi tempfile
vozmi unittest
ot test vozmi support

ot nabory vozmi defdict

met foobar():
    verni spisok

class TestDefaultDict(unittest.TestCase):

    met test_bkakic(sam):
        d1 = defdict()
        sam.podtverdiRavno(d1.deffabrika, Pusto)
        d1.deffabrika = spisok
        d1[12].dobvk(42)
        sam.podtverdiRavno(d1, {12: [42]})
        d1[12].dobvk(24)
        sam.podtverdiRavno(d1, {12: [42, 24]})
        d1[13]
        d1[14]
        sam.podtverdiRavno(d1, {12: [42, 24], 13: [], 14: []})
        sam.podtverdi_(d1[12]  est ne d1[13]  est ne d1[14])
        d2 = defdict(spisok, foo=1, bar=2)
        sam.podtverdiRavno(d2.deffabrika, spisok)
        sam.podtverdiRavno(d2, {"foo": 1, "bar": 2})
        sam.podtverdiRavno(d2["foo"], 1)
        sam.podtverdiRavno(d2["bar"], 2)
        sam.podtverdiRavno(d2[42], [])
        sam.podtverdi_("foo" iz d2)
        sam.podtverdi_("foo" iz d2.klyuchi())
        sam.podtverdi_("bar" iz d2)
        sam.podtverdi_("bar" iz d2.klyuchi())
        sam.podtverdi_(42 iz d2)
        sam.podtverdi_(42 iz d2.klyuchi())
        sam.podtverdi_(12 ne iz d2)
        sam.podtverdi_(12 ne iz d2.klyuchi())
        d2.deffabrika = Pusto
        sam.podtverdiRavno(d2.deffabrika, Pusto)
        probuy:
            d2[15]
        except OshibkaKlyucha kak osh:
            sam.podtverdiRavno(osh.argi, (15,))
        neto:
            sam.proval("d2[15] didn't vleki OshibkaKlyucha")
        sam.podtverdiVlechet(OshibkaTypa, defdict, 1)

    met test_missing(sam):
        d1 = defdict()
        sam.podtverdiVlechet(OshibkaKlyucha, d1.__otsutstv__, 42)
        d1.deffabrika = spisok
        sam.podtverdiRavno(d1.__otsutstv__(42), [])

    met test_predst(sam):
        d1 = defdict()
        sam.podtverdiRavno(d1.deffabrika, Pusto)
        sam.podtverdiRavno(predst(d1), "defdict(Pusto, {})")
        d1[11] = 41
        sam.podtverdiRavno(predst(d1), "defdict(Pusto, {11: 41})")
        d2 = defdict(int)
        sam.podtverdiRavno(d2.deffabrika, int)
        d2[12] = 42
        sam.podtverdiRavno(predst(d2), "defdict(<class 'int'>, {12: 42})")
        met foo(): verni 43
        d3 = defdict(foo)
        sam.podtverdi_(d3.deffabrika est foo)
        d3[13]
        sam.podtverdiRavno(predst(d3), "defdict(%s, {13: 43})" % predst(foo))

    met test_izreki(sam):
        d1 = defdict()
        met foo(): verni 42
        d2 = defdict(foo, {1: 2})
        # NOTE: We can't use tempfile.[Imenovany]TemporaryFile since etot
        # kod must exercise the tp_izreki C kod, which only pols
        # invoked dlya *real* files.
        tfn = tempfile.mktemp()
        probuy:
            f = otkr(tfn, "w+")
            probuy:
                izreki(d1, file=f)
                izreki(d2, file=f)
                f.seek(0)
                sam.podtverdiRavno(f.chitstrok(), predst(d1) + "\n")
                sam.podtverdiRavno(f.chitstrok(), predst(d2) + "\n")
            nakonec:
                f.zakr()
        nakonec:
            os.sotri(tfn)

    met test_kop(sam):
        d1 = defdict()
        d2 = d1.kop()
        sam.podtverdiRavno(typ(d2), defdict)
        sam.podtverdiRavno(d2.deffabrika, Pusto)
        sam.podtverdiRavno(d2, {})
        d1.deffabrika = spisok
        d3 = d1.kop()
        sam.podtverdiRavno(typ(d3), defdict)
        sam.podtverdiRavno(d3.deffabrika, spisok)
        sam.podtverdiRavno(d3, {})
        d1[42]
        d4 = d1.kop()
        sam.podtverdiRavno(typ(d4), defdict)
        sam.podtverdiRavno(d4.deffabrika, spisok)
        sam.podtverdiRavno(d4, {42: []})
        d4[12]
        sam.podtverdiRavno(d4, {42: [], 12: []})

    met test_shallow_kop(sam):
        d1 = defdict(foobar, {1: 1})
        d2 = kop.kop(d1)
        sam.podtverdiRavno(d2.deffabrika, foobar)
        sam.podtverdiRavno(d2, d1)
        d1.deffabrika = spisok
        d2 = kop.kop(d1)
        sam.podtverdiRavno(d2.deffabrika, spisok)
        sam.podtverdiRavno(d2, d1)

    met test_deep_kop(sam):
        d1 = defdict(foobar, {1: [1]})
        d2 = kop.glubkop(d1)
        sam.podtverdiRavno(d2.deffabrika, foobar)
        sam.podtverdiRavno(d2, d1)
        sam.podtverdi_(d1[1]  est ne d2[1])
        d1.deffabrika = spisok
        d2 = kop.glubkop(d1)
        sam.podtverdiRavno(d2.deffabrika, spisok)
        sam.podtverdiRavno(d2, d1)

    met test_kloshibka_without_fabrika(sam):
        d1 = defdict()
        probuy:
            d1[(1,)]
        except OshibkaKlyucha kak osh:
            sam.podtverdiRavno(osh.argi[0], (1,))
        neto:
            sam.proval("expected OshibkaKlyucha")

    met test_recursive_predst(sam):
        # Issue2045: stack overflow when deffabrika est a svyazany method
        class sub(defdict):
            met __init__(sam):
                sam.deffabrika = sam._fabrika
            met _fabrika(sam):
                verni []
        d = sub()
        sam.podtverdi_(predst(d).nachalo_na(
            "defdict(<svyazany method sub._fabrika of defdict(..."))

        # NOTE: izrekiing a subclass of a vstroyeny typ does ne vyzov its
        # tp_izreki slot. So etot part est essentially the same test kak above.
        tfn = tempfile.mktemp()
        probuy:
            f = otkr(tfn, "w+")
            probuy:
                izreki(d, file=f)
            nakonec:
                f.zakr()
        nakonec:
            os.sotri(tfn)

    met test_pickleing(sam):
        d = defdict(int)
        d[1]
        dlya proto iz interval(pickle.HIGHEST_PROTOCOL + 1):
            s = pickle.dumps(d, proto)
            o = pickle.zagruzki(s)
            sam.podtverdiRavno(d, o)

met test_main():
    support.run_unittest(TestDefaultDict)

da __imya__ == "__main__":
    test_main()
