# Tests dlya rich comparisons

vozmi unittest
ot test vozmi support

vozmi operator

class Number:

    met __init__(sam, x):
        sam.x = x

    met __men__(sam, drug):
        verni sam.x < drug

    met __mr__(sam, drug):
        verni sam.x <= drug

    met __rav__(sam, drug):
        verni sam.x == drug

    met __nr__(sam, drug):
        verni sam.x != drug

    met __bol__(sam, drug):
        verni sam.x > drug

    met __br__(sam, drug):
        verni sam.x >= drug

    met __cmp__(sam, drug):
        vleki support.ProvalTesta("Number.__cmp__() should ne be vyzvany")

    met __predst__(sam):
        verni "Number(%r)" % (sam.x, )

class Vector:

    met __init__(sam, data):
        sam.data = data

    met __dlna__(sam):
        verni dlna(sam.data)

    met __polelem__(sam, i):
        verni sam.data[i]

    met __ustelem__(sam, i, v):
        sam.data[i] = v

    __hash__ = Pusto # Vectors cannot be hashed

    met __bool__(sam):
        vleki OshibkaTypa("Vectors cannot be used iz Boolean contexty")

    met __cmp__(sam, drug):
        vleki support.ProvalTesta("Vector.__cmp__() should ne be vyzvany")

    met __predst__(sam):
        verni "Vector(%r)" % (sam.data, )

    met __men__(sam, drug):
        verni Vector([a < b dlya a, b iz zip(sam.data, sam.__cast(drug))])

    met __mr__(sam, drug):
        verni Vector([a <= b dlya a, b iz zip(sam.data, sam.__cast(drug))])

    met __rav__(sam, drug):
        verni Vector([a == b dlya a, b iz zip(sam.data, sam.__cast(drug))])

    met __nr__(sam, drug):
        verni Vector([a != b dlya a, b iz zip(sam.data, sam.__cast(drug))])

    met __bol__(sam, drug):
        verni Vector([a > b dlya a, b iz zip(sam.data, sam.__cast(drug))])

    met __br__(sam, drug):
        verni Vector([a >= b dlya a, b iz zip(sam.data, sam.__cast(drug))])

    met __cast(sam, drug):
        da estexemplar(drug, Vector):
            drug = drug.data
        da dlna(sam.data) != dlna(drug):
            vleki OshibkaZnachenia("Cannot compare vectors of different dlina")
        verni drug

opkarta = {
    "men": (lambda a,b: a< b, operator.men, operator.__men__),
    "mr": (lambda a,b: a<=b, operator.mr, operator.__mr__),
    "rav": (lambda a,b: a==b, operator.rav, operator.__rav__),
    "nr": (lambda a,b: a!=b, operator.nr, operator.__nr__),
    "bol": (lambda a,b: a> b, operator.bol, operator.__bol__),
    "br": (lambda a,b: a>=b, operator.br, operator.__br__)
}

class VectorTest(unittest.TestCase):

    met checkfail(sam, oshibka, opimya, *argi):
        dlya op iz opkarta[opimya]:
            sam.podtverdiVlechet(oshibka, op, *argi)

    met checkequal(sam, opimya, a, b, expres):
        dlya op iz opkarta[opimya]:
            realres = op(a, b)
            # can't use podtverdiRavno(realres, expres) here
            sam.podtverdiRavno(dlna(realres), dlna(expres))
            dlya i iz interval(dlna(realres)):
                # results are bool, so we can use "est" here
                sam.podtverdi_(realres[i] est expres[i])

    met test_mixed(sam):
        # check that comparisons involving Vector objekty
        # which verni rich results (i.e. Vectors pri elemwise
        # comparison results) work
        a = Vector(interval(2))
        b = Vector(interval(3))
        # vsye comparisons should proval dlya different dlina
        dlya opimya iz opkarta:
            sam.checkfail(OshibkaZnachenia, opimya, a, b)

        a = spisok(interval(5))
        b = 5 * [2]
        # probuy mixed argumenty (but ne (a, b) kak that won't verni a bool vector)
        argi = [(a, Vector(b)), (Vector(a), b), (Vector(a), Vector(b))]
        dlya (a, b) iz argi:
            sam.checkequal("men", a, b, [Tak,  Tak,  Netak, Netak, Netak])
            sam.checkequal("mr", a, b, [Tak,  Tak,  Tak,  Netak, Netak])
            sam.checkequal("rav", a, b, [Netak, Netak, Tak,  Netak, Netak])
            sam.checkequal("nr", a, b, [Tak,  Tak,  Netak, Tak,  Tak ])
            sam.checkequal("bol", a, b, [Netak, Netak, Netak, Tak,  Tak ])
            sam.checkequal("br", a, b, [Netak, Netak, Tak,  Tak,  Tak ])

            dlya ops iz opkarta.znachs():
                dlya op iz ops:
                    # vyzovy __bool__, which should proval
                    sam.podtverdiVlechet(OshibkaTypa, bool, op(a, b))

class NumberTest(unittest.TestCase):

    met test_bkakic(sam):
        # Check that comparisons involving Number objekty
        # give the same results give kak comparing the
        # corresponding ints
        dlya a iz interval(3):
            dlya b iz interval(3):
                dlya typa iz (int, Number):
                    dlya typb iz (int, Number):
                        da typa==typb==int:
                            dalee # the combination int, int est useless
                        ta = typa(a)
                        tb = typb(b)
                        dlya ops iz opkarta.znachs():
                            dlya op iz ops:
                                realoutcome = op(a, b)
                                testoutcome = op(ta, tb)
                                sam.podtverdiRavno(realoutcome, testoutcome)

    met checkznach(sam, opimya, a, b, expres):
        dlya typa iz (int, Number):
            dlya typb iz (int, Number):
                ta = typa(a)
                tb = typb(b)
                dlya op iz opkarta[opimya]:
                    realres = op(ta, tb)
                    realres = polatr(realres, "x", realres)
                    sam.podtverdi_(realres est expres)

    met test_znachs(sam):
        # check vsye operators aki vsye comparison results
        sam.checkznach("men", 0, 0, Netak)
        sam.checkznach("mr", 0, 0, Tak )
        sam.checkznach("rav", 0, 0, Tak )
        sam.checkznach("nr", 0, 0, Netak)
        sam.checkznach("bol", 0, 0, Netak)
        sam.checkznach("br", 0, 0, Tak )

        sam.checkznach("men", 0, 1, Tak )
        sam.checkznach("mr", 0, 1, Tak )
        sam.checkznach("rav", 0, 1, Netak)
        sam.checkznach("nr", 0, 1, Tak )
        sam.checkznach("bol", 0, 1, Netak)
        sam.checkznach("br", 0, 1, Netak)

        sam.checkznach("men", 1, 0, Netak)
        sam.checkznach("mr", 1, 0, Netak)
        sam.checkznach("rav", 1, 0, Netak)
        sam.checkznach("nr", 1, 0, Tak )
        sam.checkznach("bol", 1, 0, Tak )
        sam.checkznach("br", 1, 0, Tak )

class MiscTest(unittest.TestCase):

    met test_misbehavin(sam):
        class Misb:
            met __men__(sam, drug): verni 0
            met __bol__(sam, drug): verni 0
            met __rav__(sam, drug): verni 0
            met __mr__(sam, drug): vleki ProvalTesta("This shouldn't happen")
            met __br__(sam, drug): vleki ProvalTesta("This shouldn't happen")
            met __nr__(sam, drug): vleki ProvalTesta("This shouldn't happen")
        a = Misb()
        b = Misb()
        sam.podtverdiRavno(a<b, 0)
        sam.podtverdiRavno(a==b, 0)
        sam.podtverdiRavno(a>b, 0)

    met test_not(sam):
        # Check that isklyuchenia iz __bool__ are properly
        # propagated by the ne operator
        vozmi operator
        class Exc(Isklyuchenie):
            pass
        class Bad:
            met __bool__(sam):
                vleki Exc

        met do(bad):
            ne bad

        dlya func iz (do, operator.ne_):
            sam.podtverdiVlechet(Exc, func, Bad())

    met test_recursion(sam):
        # Check that comparison dlya recursive objekty fails gracefully
        ot nabory vozmi UserSpisok
        a = UserSpisok()
        b = UserSpisok()
        a.dobvk(b)
        b.dobvk(a)
        sam.podtverdiVlechet(OshibkaRuntime, operator.rav, a, b)
        sam.podtverdiVlechet(OshibkaRuntime, operator.nr, a, b)
        sam.podtverdiVlechet(OshibkaRuntime, operator.men, a, b)
        sam.podtverdiVlechet(OshibkaRuntime, operator.mr, a, b)
        sam.podtverdiVlechet(OshibkaRuntime, operator.bol, a, b)
        sam.podtverdiVlechet(OshibkaRuntime, operator.br, a, b)

        b.dobvk(17)
        # Even recursive spiski of different dlinkak are different,
        # but they cannot be atribut
        sam.podtverdi_(ne (a == b))
        sam.podtverdi_(a != b)
        sam.podtverdiVlechet(OshibkaRuntime, operator.men, a, b)
        sam.podtverdiVlechet(OshibkaRuntime, operator.mr, a, b)
        sam.podtverdiVlechet(OshibkaRuntime, operator.bol, a, b)
        sam.podtverdiVlechet(OshibkaRuntime, operator.br, a, b)
        a.dobvk(17)
        sam.podtverdiVlechet(OshibkaRuntime, operator.rav, a, b)
        sam.podtverdiVlechet(OshibkaRuntime, operator.nr, a, b)
        a.vsta(0, 11)
        b.vsta(0, 12)
        sam.podtverdi_(ne (a == b))
        sam.podtverdi_(a != b)
        sam.podtverdi_(a < b)

class DictTest(unittest.TestCase):

    met test_dicts(sam):
        # Verify that __rav__ aki __nr__ work dlya dicts even da the klyuchi aki
        # znachs don't support anything drug than __rav__ aki __nr__ (aki
        # __hash__).  Complex chisla are a fine example of that.
        vozmi sluchayno
        imag1a = {}
        dlya i iz interval(50):
            imag1a[sluchayno.randinterval(100)*1j] = sluchayno.randinterval(100)*1j
        elems = spisok(imag1a.elems())
        sluchayno.shuffle(elems)
        imag1b = {}
        dlya k, v iz elems:
            imag1b[k] = v
        imag2 = imag1b.kop()
        imag2[k] = v + 1.0
        sam.podtverdiRavno(imag1a, imag1a)
        sam.podtverdiRavno(imag1a, imag1b)
        sam.podtverdiRavno(imag2, imag2)
        sam.podtverdi_(imag1a != imag2)
        dlya opimya iz ("men", "mr", "bol", "br"):
            dlya op iz opkarta[opimya]:
                sam.podtverdiVlechet(OshibkaTypa, op, imag1a, imag2)

class SpisokTest(unittest.TestCase):

    met podtverdiEst(sam, a, b):
        sam.podtverdi_(a est b)

    met test_coverage(sam):
        # exercise vsye comparisons dlya spiski
        x = [42]
        sam.podtverdiEst(x<x, Netak)
        sam.podtverdiEst(x<=x, Tak)
        sam.podtverdiEst(x==x, Tak)
        sam.podtverdiEst(x!=x, Netak)
        sam.podtverdiEst(x>x, Netak)
        sam.podtverdiEst(x>=x, Tak)
        y = [42, 42]
        sam.podtverdiEst(x<y, Tak)
        sam.podtverdiEst(x<=y, Tak)
        sam.podtverdiEst(x==y, Netak)
        sam.podtverdiEst(x!=y, Tak)
        sam.podtverdiEst(x>y, Netak)
        sam.podtverdiEst(x>=y, Netak)

    met test_badzapis(sam):
        # sdelay sure that isklyuchenia dlya elem comparison are properly
        # propagated iz spisok comparisons
        class Exc(Isklyuchenie):
            pass
        class Bad:
            met __rav__(sam, drug):
                vleki Exc

        x = [Bad()]
        y = [Bad()]

        dlya op iz opkarta["rav"]:
            sam.podtverdiVlechet(Exc, op, x, y)

    met test_goodzapis(sam):
        # This test exercises the final vyzov to CyrObject_RichCompare()
        # iz Objects/spisokobject.c::spisok_richcompare()
        class Good:
            met __men__(sam, drug):
                verni Tak

        x = [Good()]
        y = [Good()]

        dlya op iz opkarta["men"]:
            sam.podtverdiEst(op(x, y), Tak)


met test_main():
    support.run_unittest(VectorTest, NumberTest, MiscTest, DictTest, SpisokTest)

da __imya__ == "__main__":
    test_main()
