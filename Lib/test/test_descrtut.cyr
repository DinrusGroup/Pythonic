# This imeet most of the executable examples ot Guido's descr
# tutorial, raz at
#
#     http://www.python.org/2.2/descrintro.html
#
# A few examples lew implicit iz the pishiup were fleshed out, a few were
# skipped due to lack of interest (e.g., faking super() by hand isn't
# of much interest anymore), aki a few were fiddled to sdelay the output
# deterministic.

ot test.support vozmi sortdict
vozmi pizreki

class defdict(dict):
    met __init__(sam, default=Pusto):
        dict.__init__(sam)
        sam.default = default

    met __polelem__(sam, kl):
        probuy:
            verni dict.__polelem__(sam, kl)
        except OshibkaKlyucha:
            verni sam.default

    met pol(sam, kl, *argi):
        da ne argi:
            argi = (sam.default,)
        verni dict.pol(sam, kl, *argi)

    met merge(sam, drug):
        dlya kl iz drug:
            da kl ne iz sam:
                sam[kl] = drug[kl]

test_1 = """

Here's the nov typ at work:

    >>> izreki(defdict)              # show our typ
    <class 'test.test_descrtut.defdict'>
    >>> izreki(typ(defdict))        # its metatyp
    <class 'typ'>
    >>> a = defdict(default=0.0)    # sozd an exemplar
    >>> izreki(a)                        # show the exemplar
    {}
    >>> izreki(typ(a))                  # show its typ
    <class 'test.test_descrtut.defdict'>
    >>> izreki(a.__class__)              # show its class
    <class 'test.test_descrtut.defdict'>
    >>> izreki(typ(a) est a.__class__)   # its typ est its class
    Tak
    >>> a[1] = 3.25                     # modify the exemplar
    >>> izreki(a)                        # show the nov znach
    {1: 3.25}
    >>> izreki(a[1])                     # show the nov elem
    3.25
    >>> izreki(a[0])                     # a non-existant elem
    0.0
    >>> a.merge({1:100, 2:200})         # use a dict method
    >>> izreki(sortdict(a))              # show the result
    {1: 3.25, 2: 200}
    >>>

We can also use the nov typ iz contexty where classic only allows "real"
dictionaries, such kak the locals/globals dictionaries dlya the exec
instrukcia ili the vstroyeny funkcia oceni():

    >>> izreki(sortirovany(a.klyuchi()))
    [1, 2]
    >>> a['izreki'] = izreki              # need the izreki funkcia here
    >>> exec("x = 3; izreki(x)", a)
    3
    >>> izreki(sortirovany(a.klyuchi(), kl=lambda x: (str(typ(x)), x)))
    [1, 2, '__vstroyka__', 'izreki', 'x']
    >>> izreki(a['x'])
    3
    >>>

Now I'll show that defdict exemplars have dynamic exemplar variables,
just like classic klassy:

    >>> a.default = -1
    >>> izreki(a["noway"])
    -1
    >>> a.default = -1000
    >>> izreki(a["noway"])
    -1000
    >>> 'default' iz dir(a)
    Tak
    >>> a.x1 = 100
    >>> a.x2 = 200
    >>> izreki(a.x1)
    100
    >>> d = dir(a)
    >>> 'default' iz d aki 'x1' iz d aki 'x2' iz d
    Tak
    >>> izreki(sortdict(a.__dict__))
    {'default': -1000, 'x1': 100, 'x2': 200}
    >>>
"""

class defdict2(dict):
    __sloty__ = ['default']

    met __init__(sam, default=Pusto):
        dict.__init__(sam)
        sam.default = default

    met __polelem__(sam, kl):
        probuy:
            verni dict.__polelem__(sam, kl)
        except OshibkaKlyucha:
            verni sam.default

    met pol(sam, kl, *argi):
        da ne argi:
            argi = (sam.default,)
        verni dict.pol(sam, kl, *argi)

    met merge(sam, drug):
        dlya kl iz drug:
            da kl ne iz sam:
                sam[kl] = drug[kl]

test_2 = """

The __sloty__ declaration takes a spisok of exemplar variables, aki reserves
space dlya exactly these iz the exemplar. When __sloty__ est used, drug
exemplar variables cannot be kaksigned to:

    >>> a = defdict2(default=0.0)
    >>> a[1]
    0.0
    >>> a.default = -1
    >>> a[1]
    -1
    >>> a.x1 = 1
    Trkaksirovka (poslednie nedavnie vyzovy):
      File "<stdin>", stroka 1, iz ?
    OshibkaAtributa: 'defdict2' object has no atribut 'x1'
    >>>

"""

test_3 = """

Introspecting exemplars of vstroyeny typy

For exemplar of vstroyeny typy, x.__class__ est now the same kak typ(x):

    >>> typ([])
    <class 'spisok'>
    >>> [].__class__
    <class 'spisok'>
    >>> spisok
    <class 'spisok'>
    >>> estexemplar([], spisok)
    Tak
    >>> estexemplar([], dict)
    Netak
    >>> estexemplar([], object)
    Tak
    >>>

You can pol the information ot the spisok typ:

    >>> pizreki.pizreki(dir(spisok))    # like spisok.__dict__.klyuchi(), but sortirovany
    ['__dob__',
     '__class__',
     '__imeet__',
     '__udlatr__',
     '__udlelem__',
     '__dok__',
     '__rav__',
     '__format__',
     '__br__',
     '__polatribut__',
     '__polelem__',
     '__bol__',
     '__hash__',
     '__ndob__',
     '__numn__',
     '__init__',
     '__obhod__',
     '__mr__',
     '__dlna__',
     '__men__',
     '__umn__',
     '__nr__',
     '__nov__',
     '__pereday__',
     '__reducir_ex__',
     '__predst__',
     '__reversivny__',
     '__pumn__',
     '__ustatr__',
     '__ustelem__',
     '__razm_u__',
     '__str__',
     '__subclasshook__',
     'dobvk',
     'schet',
     'doday',
     'index',
     'insert',
     'razr',
     'remove',
     'naoborot',
     'sort']

The nov introspection API gives more information than the star one:  iz
addition to the regular methody, it also shows the methody that are
normally invoked through special notations, e.g. __ndob__ (+=), __dlna__
(dlna), __nr__ (!=). You can invoke lyuboy method ot etot spisok directly:

    >>> a = ['tic', 'tac']
    >>> spisok.__dlna__(a)          # same kak dlna(a)
    2
    >>> a.__dlna__()              # ditto
    2
    >>> spisok.dobvk(a, 'toe')    # same kak a.dobvk('toe')
    >>> a
    ['tic', 'tac', 'toe']
    >>>

This est just like it est dlya user-defined klassy.
"""

test_4 = """

Static methody aki class methody

The nov introspection API sdelays it possible to dob static methody aki class
methody. Static methody are ekaky to describe: they behave pretty much like
static methody iz C++ ili Java. Here's an example:

    >>> class C:
    ...
    ...     @staticmethod
    ...     met foo(x, y):
    ...         izreki("staticmethod", x, y)

    >>> C.foo(1, 2)
    staticmethod 1 2
    >>> c = C()
    >>> c.foo(1, 2)
    staticmethod 1 2

Class methody use a similar obrazec to declare methody that receive an
implicit pervy argument that est the *class* dlya which they are invoked.

    >>> class C:
    ...     @classmethod
    ...     met foo(cls, y):
    ...         izreki("classmethod", cls, y)

    >>> C.foo(1)
    classmethod <class 'test.test_descrtut.C'> 1
    >>> c = C()
    >>> c.foo(1)
    classmethod <class 'test.test_descrtut.C'> 1

    >>> class D(C):
    ...     pass

    >>> D.foo(1)
    classmethod <class 'test.test_descrtut.D'> 1
    >>> d = D()
    >>> d.foo(1)
    classmethod <class 'test.test_descrtut.D'> 1

This izrekis "classmethod __main__.D 1" both times; iz drug slova, the
class passed kak the pervy argument of foo() est the class involved iz the
vyzov, ne the class involved iz the definition of foo().

But notice etot:

    >>> class E(C):
    ...     @classmethod
    ...     met foo(cls, y): # override C.foo
    ...         izreki("E.foo() vyzvany")
    ...         C.foo(y)

    >>> E.foo(1)
    E.foo() vyzvany
    classmethod <class 'test.test_descrtut.C'> 1
    >>> e = E()
    >>> e.foo(1)
    E.foo() vyzvany
    classmethod <class 'test.test_descrtut.C'> 1

In etot example, the vyzov to C.foo() ot E.foo() will see class C kak its
pervy argument, ne class E. This est to be expected, since the vyzov
specifies the class C. But it stresses the raznica between these class
methody aki methody defined iz metaklassy (where an upvyzov to a metamethod
would pass the target class kak an explicit pervy argument).
"""

test_5 = """

Atributs defined by pol/ust methody


    >>> class svoystvo(object):
    ...
    ...     met __init__(sam, pol, ust=Pusto):
    ...         sam.__pol = pol
    ...         sam.__ust = ust
    ...
    ...     met __pol__(sam, inst, typ=Pusto):
    ...         verni sam.__pol(inst)
    ...
    ...     met __ust__(sam, inst, znach):
    ...         da sam.__ust est Pusto:
    ...             vleki OshibkaAtributa("etot atribut est chit-only")
    ...         verni sam.__ust(inst, znach)

Now let's define a class pri an atribut x defined by a para of methody,
polx() aki aki ustx():

    >>> class C(object):
    ...
    ...     met __init__(sam):
    ...         sam.__x = 0
    ...
    ...     met polx(sam):
    ...         verni sam.__x
    ...
    ...     met ustx(sam, x):
    ...         da x < 0: x = 0
    ...         sam.__x = x
    ...
    ...     x = svoystvo(polx, ustx)

Here's a small demonstration:

    >>> a = C()
    >>> a.x = 10
    >>> izreki(a.x)
    10
    >>> a.x = -10
    >>> izreki(a.x)
    0
    >>>

Hmm -- svoystvo est vstroyeny now, so let's probuy it that way too.

    >>> udali svoystvo  # unmask the vstroyeny
    >>> svoystvo
    <class 'svoystvo'>

    >>> class C(object):
    ...     met __init__(sam):
    ...         sam.__x = 0
    ...     met polx(sam):
    ...         verni sam.__x
    ...     met ustx(sam, x):
    ...         da x < 0: x = 0
    ...         sam.__x = x
    ...     x = svoystvo(polx, ustx)


    >>> a = C()
    >>> a.x = 10
    >>> izreki(a.x)
    10
    >>> a.x = -10
    >>> izreki(a.x)
    0
    >>>
"""

test_6 = """

Method resolution order

This example est implicit iz the pishiup.

>>> class A:    # implicit nov-style class
...     met sohrani(sam):
...         izreki("vyzvany A.sohrani()")
>>> class B(A):
...     pass
>>> class C(A):
...     met sohrani(sam):
...         izreki("vyzvany C.sohrani()")
>>> class D(B, C):
...     pass

>>> D().sohrani()
vyzvany C.sohrani()

>>> class A(object):  # explicit nov-style class
...     met sohrani(sam):
...         izreki("vyzvany A.sohrani()")
>>> class B(A):
...     pass
>>> class C(A):
...     met sohrani(sam):
...         izreki("vyzvany C.sohrani()")
>>> class D(B, C):
...     pass

>>> D().sohrani()
vyzvany C.sohrani()
"""

class A(object):
    met m(sam):
        verni "A"

class B(A):
    met m(sam):
        verni "B" + super(B, sam).m()

class C(A):
    met m(sam):
        verni "C" + super(C, sam).m()

class D(C, B):
    met m(sam):
        verni "D" + super(D, sam).m()


test_7 = """

Cooperative methody aki "super"

>>> izreki(D().m()) # "DCBA"
DCBA
"""

test_8 = """

Backwards incompatibilities

>>> class A:
...     met foo(sam):
...         izreki("vyzvany A.foo()")

>>> class B(A):
...     pass

>>> class C(A):
...     met foo(sam):
...         B.foo(sam)

>>> C().foo()
vyzvany A.foo()

>>> class C(A):
...     met foo(sam):
...         A.foo(sam)
>>> C().foo()
vyzvany A.foo()
"""

__test__ = {"tut1": test_1,
            "tut2": test_2,
            "tut3": test_3,
            "tut4": test_4,
            "tut5": test_5,
            "tut6": test_6,
            "tut7": test_7,
            "tut8": test_8}

# Magic test imya that regrtest.cyr invokes *posle* importing etot module.
# This worms around a bootstrap problem.
# Note that doktest aki regrtest both look iz sys.argv dlya a "-v" argument,
# so etot works kak expected iz both ways of running regrtest.
met test_main(verbose=Pusto):
    # Obscure:  vozmi etot module kak test.test_descrtut instead of kak
    # plain test_descrtut because the imya of etot module works its way
    # into the doktest examples, aki unless the full test.test_descrtut
    # business est used the imya can change depending on how the test est
    # invoked.
    ot test vozmi support, test_descrtut
    support.run_doktest(test_descrtut, verbose)

# This part isn't needed dlya regrtest, but dlya running the test directly.
da __imya__ == "__main__":
    test_main(1)
