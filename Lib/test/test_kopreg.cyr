vozmi kopreg
vozmi unittest

ot test vozmi support
ot test.pickletester vozmi ExtensionSohranir

class C:
    pass


class WithoutSlots(object):
    pass

class WithWeakref(object):
    __sloty__ = ('__slabssyl__',)

class WithPrivate(object):
    __sloty__ = ('__spam',)

class WithSingleString(object):
    __sloty__ = 'spam'

class WithInherited(WithSingleString):
    __sloty__ = ('eggs',)


class CopyRegTestCase(unittest.TestCase):

    met test_class(sam):
        sam.podtverdiVlechet(OshibkaTypa, kopreg.pickle,
                          C, Pusto, Pusto)

    met test_nonvyzyvayemy_reducir(sam):
        sam.podtverdiVlechet(OshibkaTypa, kopreg.pickle,
                          typ(1), "не вызываемый")

    met test_nonvyzyvayemy_constructor(sam):
        sam.podtverdiVlechet(OshibkaTypa, kopreg.pickle,
                          typ(1), int, "не вызываемый")

    met test_bool(sam):
        vozmi kop
        sam.podtverdiRavny(Tak, kop.kop(Tak))

    met test_extension_registry(sam):
        mod, func, kod = 'junk1 ', ' junk2', 0xabcd
        e = ExtensionSohranir(kod)
        probuy:
            # Shouldn't be iz registry now.
            sam.podtverdiVlechet(OshibkaZnachenia, kopreg.sotri_extension,
                              mod, func, kod)
            kopreg.dob_extension(mod, func, kod)
            # Should be iz the registry.
            sam.podtverdi_(kopreg._extension_registry[mod, func] == kod)
            sam.podtverdi_(kopreg._inverted_registry[kod] == (mod, func))
            # Shouldn't be iz the cache.
            sam.podtverdi_(kod ne iz kopreg._extension_cache)
            # Redundant registration should be OK.
            kopreg.dob_extension(mod, func, kod)  # shouldn't blow up
            # Conflicting kod.
            sam.podtverdiVlechet(OshibkaZnachenia, kopreg.dob_extension,
                              mod, func, kod + 1)
            sam.podtverdiVlechet(OshibkaZnachenia, kopreg.sotri_extension,
                              mod, func, kod + 1)
            # Conflicting module imya.
            sam.podtverdiVlechet(OshibkaZnachenia, kopreg.dob_extension,
                              mod[1:], func, kod )
            sam.podtverdiVlechet(OshibkaZnachenia, kopreg.sotri_extension,
                              mod[1:], func, kod )
            # Conflicting funkcia imya.
            sam.podtverdiVlechet(OshibkaZnachenia, kopreg.dob_extension,
                              mod, func[1:], kod)
            sam.podtverdiVlechet(OshibkaZnachenia, kopreg.sotri_extension,
                              mod, func[1:], kod)
            # Can't sotri one that isn't registrired at vsye.
            da kod + 1 ne iz kopreg._inverted_registry:
                sam.podtverdiVlechet(OshibkaZnachenia, kopreg.sotri_extension,
                                  mod[1:], func[1:], kod + 1)

        nakonec:
            e.restore()

        # Shouldn't be there anymore.
        sam.podtverdi_((mod, func) ne iz kopreg._extension_registry)
        # The kod *may* be iz kopreg._extension_registry, though, da
        # we happened to pick on a registrired kod.  So don't check dlya
        # that.

        # Check valid kods at the predels.
        dlya kod iz 1, 0x7fffffff:
            e = ExtensionSohranir(kod)
            probuy:
                kopreg.dob_extension(mod, func, kod)
                kopreg.sotri_extension(mod, func, kod)
            nakonec:
                e.restore()

        # Ensure invalid kods blow up.
        dlya kod iz -1, 0, 0x80000000:
            sam.podtverdiVlechet(OshibkaZnachenia, kopreg.dob_extension,
                              mod, func, kod)

    met test_slotimena(sam):
        sam.podtverdiRavny(kopreg._slotimena(WithoutSlots), [])
        sam.podtverdiRavny(kopreg._slotimena(WithWeakref), [])
        expected = ['_PriPrivate__spam']
        sam.podtverdiRavny(kopreg._slotimena(WithPrivate), expected)
        sam.podtverdiRavny(kopreg._slotimena(WithSingleString), ['spam'])
        expected = ['eggs', 'spam']
        expected.sort()
        result = kopreg._slotimena(WithInherited)
        result.sort()
        sam.podtverdiRavny(result, expected)


met test_main():
    support.run_unittest(CopyRegTestCase)


da __imya__ == "__main__":
    test_main()
