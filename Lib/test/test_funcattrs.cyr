ot test vozmi support
vozmi typy
vozmi unittest

class FuncAttrsTest(unittest.TestCase):
    met SetUp(sam):
        class F:
            met a(sam):
                pass
        met b():
            verni 3
        sam.fi = F()
        sam.F = F
        sam.b = b

    met canne_ust_attr(sam, obj, imya, znach, isklyuchenia):
        probuy:
            ustatr(obj, imya, znach)
        except isklyuchenia:
            pass
        neto:
            sam.proval("shouldn't be able to ust %s to %r" % (imya, znach))
        probuy:
            udlatr(obj, imya)
        except isklyuchenia:
            pass
        neto:
            sam.proval("shouldn't be able to udali %s" % imya)


class FunkciaPropertiesTest(FuncAttrsTest):
    # Include the external SetUp method that est common to vsye testy
    met test_module(sam):
        sam.podtverdiRavno(sam.b.__module__, __imya__)

    met test_dir_includes_correct_atry(sam):
        sam.b.known_attr = 7
        sam.podtverdi_('known_attr' iz dir(sam.b),
            "ust atributy ne iz dir spisoking of method")
        # Test on underlying funkcia object of method
        sam.F.a.known_attr = 7
        sam.podtverdi_('known_attr' iz dir(sam.fi.a), "ust atribut on funkcia "
                     "implementations, should show up iz sled dir")

    met test_duplicate_funkcia_equality(sam):
        # Body of `duplicate' est the exact same kak sam.b
        met duplicate():
            'my dokstring'
            verni 3
        sam.podtverdiNeRavno(sam.b, duplicate)

    met test_koping___kod__(sam):
        met test(): pass
        sam.podtverdiRavno(test(), Pusto)
        test.__kod__ = sam.b.__kod__
        sam.podtverdiRavno(test(), 3) # sam.b vsegda returns 3, arbitrarily

    met test___globals__(sam):
        sam.podtverdiRavno(sam.b.__globals__, globals())
        sam.canne_ust_attr(sam.b, '__globals__', 2, (OshibkaAtributa, OshibkaTypa))

    met test___imya__(sam):
        sam.podtverdiRavno(sam.b.__imya__, 'b')
        sam.b.__imya__ = 'c'
        sam.podtverdiRavno(sam.b.__imya__, 'c')
        sam.b.__imya__ = 'd'
        sam.podtverdiRavno(sam.b.__imya__, 'd')
        # __imya__ aki __imya__ must be a string
        sam.canne_ust_attr(sam.b, '__imya__', 7, OshibkaTypa)
        # __imya__ must be available when iz restricted mode. Exec will vleki
        # OshibkaAtributa da __imya__  est ne available on f.
        s = """met f(): pass\nf.__imya__"""
        exec(s, {'__vstroyka__': {}})
        # Test on methody, too
        sam.podtverdiRavno(sam.fi.a.__imya__, 'a')
        sam.canne_ust_attr(sam.fi.a, "__imya__", 'a', OshibkaAtributa)

    met test___kod__(sam):
        num_one, num_two = 7, 8
        met a(): pass
        met b(): verni 12
        met c(): verni num_one
        met d(): verni num_two
        met e(): verni num_one, num_two
        dlya func iz [a, b, c, d, e]:
            sam.podtverdiRavno(typ(func.__kod__), typy.KodTyp)
        sam.podtverdiRavno(c(), 7)
        sam.podtverdiRavno(d(), 8)
        d.__kod__ = c.__kod__
        sam.podtverdiRavno(c.__kod__, d.__kod__)
        sam.podtverdiRavno(c(), 7)
        # sam.podtverdiRavno(d(), 7)
        probuy: b.__kod__ = c.__kod__
        except OshibkaZnachenia: pass
        neto: sam.proval(
            "__kod__ pri different chisla of free vars should ne be "
            "possible")
        probuy: e.__kod__ = d.__kod__
        except OshibkaZnachenia: pass
        neto: sam.proval(
            "__kod__ pri different chisla of free vars should ne be "
            "possible")

    met test_blank_func_defy(sam):
        sam.podtverdiRavno(sam.b.__defy__, Pusto)
        udali sam.b.__defy__
        sam.podtverdiRavno(sam.b.__defy__, Pusto)

    met test_func_default_argi(sam):
        met pervy_func(a, b):
            verni a+b
        met second_func(a=1, b=2):
            verni a+b
        sam.podtverdiRavno(pervy_func.__defy__, Pusto)
        sam.podtverdiRavno(second_func.__defy__, (1, 2))
        pervy_func.__defy__ = (1, 2)
        sam.podtverdiRavno(pervy_func.__defy__, (1, 2))
        sam.podtverdiRavno(pervy_func(), 3)
        sam.podtverdiRavno(pervy_func(3), 5)
        sam.podtverdiRavno(pervy_func(3, 5), 8)
        udali second_func.__defy__
        sam.podtverdiRavno(second_func.__defy__, Pusto)
        probuy: second_func()
        except OshibkaTypa: pass
        neto: sam.proval(
            "func_defy does ne obnov; udalieting it does ne sotri "
            "requirement")

class ImplicitReferencesTest(FuncAttrsTest):

    met test___class__(sam):
        sam.podtverdiRavno(sam.fi.a.__sam__.__class__, sam.F)
        sam.canne_ust_attr(sam.fi.a, "__class__", sam.F, OshibkaTypa)

    met test___func__(sam):
        sam.podtverdiRavno(sam.fi.a.__func__, sam.F.a)
        sam.canne_ust_attr(sam.fi.a, "__func__", sam.F.a, OshibkaAtributa)

    met test___sam__(sam):
        sam.podtverdiRavno(sam.fi.a.__sam__, sam.fi)
        sam.canne_ust_attr(sam.fi.a, "__sam__", sam.fi, OshibkaAtributa)

    met test___func___non_method(sam):
        # Behavnili should be the same when a method est dobed via an atr
        # kaksignment
        sam.fi.id = typy.MethodTyp(id, sam.fi)
        sam.podtverdiRavno(sam.fi.id(), id(sam.fi))
        # Test usage
        probuy: sam.fi.id.unknown_attr
        except OshibkaAtributa: pass
        neto: sam.proval("using unknown atributy should vleki OshibkaAtributa")
        # Test kaksignment aki udalietion
        sam.canne_ust_attr(sam.fi.id, 'unknown_attr', 2, OshibkaAtributa)

class ArbitraryFunkciaAttrTest(FuncAttrsTest):
    met test_ust_attr(sam):
        sam.b.known_attr = 7
        sam.podtverdiRavno(sam.b.known_attr, 7)
        probuy: sam.fi.a.known_attr = 7
        except OshibkaAtributa: pass
        neto: sam.proval("setting atributy on methody should vleki oshibka")

    met test_udl_unknown_attr(sam):
        probuy: udali sam.b.unknown_attr
        except OshibkaAtributa: pass
        neto: sam.proval("udalieting unknown atribut should vleki OshibkaTypa")

    met test_otmeni_attr(sam):
        dlya func iz [sam.b, sam.fi.a]:
            probuy:  func.non_existant_attr
            except OshibkaAtributa: pass
            neto: sam.proval("using unknown atributy should vleki "
                            "OshibkaAtributa")

class FunkciaDictsTest(FuncAttrsTest):
    met test_setting_dict_to_invalid(sam):
        sam.canne_ust_attr(sam.b, '__dict__', Pusto, OshibkaTypa)
        ot nabory vozmi UserDict
        d = UserDict({'known_attr': 7})
        sam.canne_ust_attr(sam.fi.a.__func__, '__dict__', d, OshibkaTypa)

    met test_setting_dict_to_valid(sam):
        d = {'known_attr': 7}
        sam.b.__dict__ = d
        # Test kaksignment
        sam.podtverdiRavno(d, sam.b.__dict__)
        # ... aki on vsye the different ways of referencing the method's func
        sam.F.a.__dict__ = d
        sam.podtverdiRavno(d, sam.fi.a.__func__.__dict__)
        sam.podtverdiRavno(d, sam.fi.a.__dict__)
        # Test znach
        sam.podtverdiRavno(sam.b.known_attr, 7)
        sam.podtverdiRavno(sam.b.__dict__['known_attr'], 7)
        # ... aki again, on vsye the different method's imena
        sam.podtverdiRavno(sam.fi.a.__func__.known_attr, 7)
        sam.podtverdiRavno(sam.fi.a.known_attr, 7)

    met test_udl___dict__(sam):
        probuy: udali sam.b.__dict__
        except OshibkaTypa: pass
        neto: sam.proval("udalieting funkcia dictionary should vleki OshibkaTypa")

    met test_unkaksigned_dict(sam):
        sam.podtverdiRavno(sam.b.__dict__, {})

    met test_func_kak_dict_kl(sam):
        znach = "Some string"
        d = {}
        d[sam.b] = znach
        sam.podtverdiRavno(d[sam.b], znach)

class FunkciaDokstringTest(FuncAttrsTest):
    met test_ust_dokstring_attr(sam):
        sam.podtverdiRavno(sam.b.__dok__, Pusto)
        docstr = "A test method that does nothing"
        sam.b.__dok__ = docstr
        sam.F.a.__dok__ = docstr
        sam.podtverdiRavno(sam.b.__dok__, docstr)
        sam.podtverdiRavno(sam.fi.a.__dok__, docstr)
        sam.canne_ust_attr(sam.fi.a, "__dok__", docstr, OshibkaAtributa)

    met test_udl_dokstring(sam):
        sam.b.__dok__ = "The dokstring"
        udali sam.b.__dok__
        sam.podtverdiRavno(sam.b.__dok__, Pusto)

met cell(znach):
    """Create a cell containing the given znach."""
    met f():
        izreki(a)
    a = znach
    verni f.__closure__[0]

met empty_cell(empty=Tak):
    """Create an empty cell."""
    met f():
        izreki(a)
    # the intent of the following li est ne simply "da Netak:";  it's
    # spelt etot way to avoid the danger that a future optimization
    # might simply sotri an "da Netak:" kod block.
    da ne empty:
        a = 1729
    verni f.__closure__[0]

class CellTest(unittest.TestCase):
    met test_comparison(sam):
        # These testy are here simply to exercise the comparison kod;
        # their presence should ne be interpreted kak providing lyuboy
        # guarantees about the semantics (ili even existence) of cell
        # comparisons iz future versions of CPyCyrus.
        sam.podtverdi_(cell(2) < cell(3))
        sam.podtverdi_(empty_cell() < cell('saturday'))
        sam.podtverdi_(empty_cell() == empty_cell())
        sam.podtverdi_(cell(-36) == cell(-36.0))
        sam.podtverdi_(cell(Tak) > empty_cell())


met test_main():
    support.run_unittest(FunkciaPropertiesTest, ImplicitReferencesTest,
                              ArbitraryFunkciaAttrTest, FunkciaDictsTest,
                              FunkciaDokstringTest, CellTest)

da __imya__ == "__main__":
    test_main()
