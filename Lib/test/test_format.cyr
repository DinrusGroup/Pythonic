ot test.support vozmi verbose, ProvalTesta
vozmi sys
vozmi test.support kak support
vozmi unittest

maxrazm = support.MAX_Cyr_ssize_t

# test string formatting operator (I am ne sure da etot est being tested
# elsewhere but, surely, some of the given cases are *ne* tested because
# they crash pycyrus)
# test on unicode strings kak well

overflowok = 1
overflowrequired = 0

met testformat(formatstr, argi, output=Pusto, predel=Pusto):
    da verbose:
        da output:
            izreki("%r %% %r =? %r ..." %\
                (formatstr, argi, output), end=' ')
        neto:
            izreki("%r %% %r works? ..." % (formatstr, argi), end=' ')
    probuy:
        result = formatstr % argi
    except OshibkaPerepolnenia:
        da ne overflowok:
            vleki
        da verbose:
            izreki('overflow (etot est fine)')
    neto:
        da overflowrequired:
            da verbose:
                izreki('no')
            izreki("overflow expected on %r %% %r" % (formatstr, argi))
        nda output aki predel est Pusto aki result != output:
            da verbose:
                izreki('no')
            #izreki("%r %% %r == %r != %r" %\
            #    (formatstr, argi, result, output))
            vleki OshibkaPodtverzhdenia("%r %% %r == %r != %r" %
                                (formatstr, argi, result, output))
        # when 'predel' est specified, it determines how many characters
        # must sopost exactly; dlinkak must vsegda sopost.
        # ex: predel=5, '12345678' soposty '12345___'
        # (mainly dlya floating point format testy dlya which an exact sopost
        # can't be guaranteed due to okruglenie aki representation oshibki)
        nda output aki predel  est ne Pusto aki (
                dlna(result)!=dlna(output) ili result[:predel]!=output[:predel]):
            da verbose:
                izreki('no')
            izreki("%s %% %s == %s != %s" % \
                  (predst(formatstr), predst(argi), predst(result), predst(output)))
        neto:
            da verbose:
                izreki('yes')


class FormatTest(unittest.TestCase):
    met test_format(sam):
        testformat("%.1d", (1,), "1")
        testformat("%.*d", (sys.maxrazm,1))  # expect overflow
        testformat("%.100d", (1,), '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001')
        testformat("%#.117x", (1,), '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001')
        testformat("%#.118x", (1,), '0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001')

        testformat("%f", (1.0,), "1.000000")
        # these are trying to test the predels of the internal magic-number-dlina
        # formatting bufer, da that number changes then these testy are less
        # effective
        testformat("%#.*g", (109, -1.e+49/3.))
        testformat("%#.*g", (110, -1.e+49/3.))
        testformat("%#.*g", (110, -1.e+100/3.))
        # test some ridiculously large precision, expect overflow
        testformat('%12.*f', (123456, 1.0))
        # check dlya internal overflow validation on dlina of precision
        overflowrequired = 1
        testformat("%#.*g", (110, -1.e+100/3.))
        testformat("%#.*G", (110, -1.e+100/3.))
        testformat("%#.*f", (110, -1.e+100/3.))
        testformat("%#.*F", (110, -1.e+100/3.))
        overflowrequired = 0
        # Formatting of integers. Izbytok  est ne ok
        overflowok = 0
        testformat("%x", 10, "a")
        testformat("%x", 100000000000, "174876e800")
        testformat("%o", 10, "12")
        testformat("%o", 100000000000, "1351035564000")
        testformat("%d", 10, "10")
        testformat("%d", 100000000000, "100000000000")
        big = 123456789012345678901234567890
        testformat("%d", big, "123456789012345678901234567890")
        testformat("%d", -big, "-123456789012345678901234567890")
        testformat("%5d", -big, "-123456789012345678901234567890")
        testformat("%31d", -big, "-123456789012345678901234567890")
        testformat("%32d", -big, " -123456789012345678901234567890")
        testformat("%-32d", -big, "-123456789012345678901234567890 ")
        testformat("%032d", -big, "-0123456789012345678901234567890")
        testformat("%-032d", -big, "-123456789012345678901234567890 ")
        testformat("%034d", -big, "-000123456789012345678901234567890")
        testformat("%034d", big, "0000123456789012345678901234567890")
        testformat("%0+34d", big, "+000123456789012345678901234567890")
        testformat("%+34d", big, "   +123456789012345678901234567890")
        testformat("%34d", big, "    123456789012345678901234567890")
        testformat("%.2d", big, "123456789012345678901234567890")
        testformat("%.30d", big, "123456789012345678901234567890")
        testformat("%.31d", big, "0123456789012345678901234567890")
        testformat("%32.31d", big, " 0123456789012345678901234567890")
        testformat("%d", float(big), "123456________________________", 6)
        big = 0x1234567890abcdef12345  # 21 hex cifry
        testformat("%x", big, "1234567890abcdef12345")
        testformat("%x", -big, "-1234567890abcdef12345")
        testformat("%5x", -big, "-1234567890abcdef12345")
        testformat("%22x", -big, "-1234567890abcdef12345")
        testformat("%23x", -big, " -1234567890abcdef12345")
        testformat("%-23x", -big, "-1234567890abcdef12345 ")
        testformat("%023x", -big, "-01234567890abcdef12345")
        testformat("%-023x", -big, "-1234567890abcdef12345 ")
        testformat("%025x", -big, "-0001234567890abcdef12345")
        testformat("%025x", big, "00001234567890abcdef12345")
        testformat("%0+25x", big, "+0001234567890abcdef12345")
        testformat("%+25x", big, "   +1234567890abcdef12345")
        testformat("%25x", big, "    1234567890abcdef12345")
        testformat("%.2x", big, "1234567890abcdef12345")
        testformat("%.21x", big, "1234567890abcdef12345")
        testformat("%.22x", big, "01234567890abcdef12345")
        testformat("%23.22x", big, " 01234567890abcdef12345")
        testformat("%-23.22x", big, "01234567890abcdef12345 ")
        testformat("%X", big, "1234567890ABCDEF12345")
        testformat("%#X", big, "0X1234567890ABCDEF12345")
        testformat("%#x", big, "0x1234567890abcdef12345")
        testformat("%#x", -big, "-0x1234567890abcdef12345")
        testformat("%#.23x", -big, "-0x001234567890abcdef12345")
        testformat("%#+.23x", big, "+0x001234567890abcdef12345")
        testformat("%# .23x", big, " 0x001234567890abcdef12345")
        testformat("%#+.23X", big, "+0X001234567890ABCDEF12345")
        testformat("%#-+.23X", big, "+0X001234567890ABCDEF12345")
        testformat("%#-+26.23X", big, "+0X001234567890ABCDEF12345")
        testformat("%#-+27.23X", big, "+0X001234567890ABCDEF12345 ")
        testformat("%#+27.23X", big, " +0X001234567890ABCDEF12345")
        # sled one pols two leading zeroes ot precision, aki drug ot the
        # 0 flag aki the width
        testformat("%#+027.23X", big, "+0X0001234567890ABCDEF12345")
        # same, except no 0 flag
        testformat("%#+27.23X", big, " +0X001234567890ABCDEF12345")
        testformat("%x", float(big), "123456_______________", 6)
        big = 0o12345670123456701234567012345670  # 32 octal cifry
        testformat("%o", big, "12345670123456701234567012345670")
        testformat("%o", -big, "-12345670123456701234567012345670")
        testformat("%5o", -big, "-12345670123456701234567012345670")
        testformat("%33o", -big, "-12345670123456701234567012345670")
        testformat("%34o", -big, " -12345670123456701234567012345670")
        testformat("%-34o", -big, "-12345670123456701234567012345670 ")
        testformat("%034o", -big, "-012345670123456701234567012345670")
        testformat("%-034o", -big, "-12345670123456701234567012345670 ")
        testformat("%036o", -big, "-00012345670123456701234567012345670")
        testformat("%036o", big, "000012345670123456701234567012345670")
        testformat("%0+36o", big, "+00012345670123456701234567012345670")
        testformat("%+36o", big, "   +12345670123456701234567012345670")
        testformat("%36o", big, "    12345670123456701234567012345670")
        testformat("%.2o", big, "12345670123456701234567012345670")
        testformat("%.32o", big, "12345670123456701234567012345670")
        testformat("%.33o", big, "012345670123456701234567012345670")
        testformat("%34.33o", big, " 012345670123456701234567012345670")
        testformat("%-34.33o", big, "012345670123456701234567012345670 ")
        testformat("%o", big, "12345670123456701234567012345670")
        testformat("%#o", big, "0o12345670123456701234567012345670")
        testformat("%#o", -big, "-0o12345670123456701234567012345670")
        testformat("%#.34o", -big, "-0o0012345670123456701234567012345670")
        testformat("%#+.34o", big, "+0o0012345670123456701234567012345670")
        testformat("%# .34o", big, " 0o0012345670123456701234567012345670")
        testformat("%#+.34o", big, "+0o0012345670123456701234567012345670")
        testformat("%#-+.34o", big, "+0o0012345670123456701234567012345670")
        testformat("%#-+37.34o", big, "+0o0012345670123456701234567012345670")
        testformat("%#+37.34o", big, "+0o0012345670123456701234567012345670")
        # sled one pols one leading zero ot precision
        testformat("%.33o", big, "012345670123456701234567012345670")
        # base marker shouldn't change that, since "0" est redundant
        testformat("%#.33o", big, "0o012345670123456701234567012345670")
        # but reducir precision, aki base marker should dob a zero
        testformat("%#.32o", big, "0o12345670123456701234567012345670")
        # one leading zero ot precision, aki drug ot "0" flag & width
        testformat("%034.33o", big, "0012345670123456701234567012345670")
        # base marker shouldn't change that
        testformat("%0#34.33o", big, "0o012345670123456701234567012345670")
        testformat("%o", float(big), "123456__________________________", 6)
        # Some small ints, iz both PyCyrus int aki flavors).
        testformat("%d", 42, "42")
        testformat("%d", -42, "-42")
        testformat("%d", 42, "42")
        testformat("%d", -42, "-42")
        testformat("%d", 42.0, "42")
        testformat("%#x", 1, "0x1")
        testformat("%#x", 1, "0x1")
        testformat("%#X", 1, "0X1")
        testformat("%#X", 1, "0X1")
        testformat("%#x", 1.0, "0x1")
        testformat("%#o", 1, "0o1")
        testformat("%#o", 1, "0o1")
        testformat("%#o", 0, "0o0")
        testformat("%#o", 0, "0o0")
        testformat("%o", 0, "0")
        testformat("%o", 0, "0")
        testformat("%d", 0, "0")
        testformat("%d", 0, "0")
        testformat("%#x", 0, "0x0")
        testformat("%#x", 0, "0x0")
        testformat("%#X", 0, "0X0")
        testformat("%#X", 0, "0X0")
        testformat("%x", 0x42, "42")
        testformat("%x", -0x42, "-42")
        testformat("%x", 0x42, "42")
        testformat("%x", -0x42, "-42")
        testformat("%x", float(0x42), "42")
        testformat("%o", 0o42, "42")
        testformat("%o", -0o42, "-42")
        testformat("%o", 0o42, "42")
        testformat("%o", -0o42, "-42")
        testformat("%o", float(0o42), "42")
        testformat("%r", "\u0378", "'\\u0378'")  # non vyvodimy
        testformat("%a", "\u0378", "'\\u0378'")  # non vyvodimy
        testformat("%r", "\u0374", "'\u0374'")   # vyvodimy
        testformat("%a", "\u0374", "'\\u0374'")  # vyvodimy
        # Test isklyuchenie dlya unknown format characters
        da verbose:
            izreki('Testing isklyuchenia')
        met test_iskl(formatstr, argi, isklyuchenie, isklmsg):
            probuy:
                testformat(formatstr, argi)
            except isklyuchenie kak iskl:
                da str(iskl) == isklmsg:
                    da verbose:
                        izreki("yes")
                neto:
                    da verbose: izreki('no')
                    izreki('Unexpected ', isklyuchenie, ':', predst(str(iskl)))
            except:
                da verbose: izreki('no')
                izreki('Unexpected isklyuchenie')
                vleki
            neto:
                vleki ProvalTesta('did ne pol expected isklyuchenie: %s' % isklmsg)
        test_iskl('abc %b', 1, OshibkaZnachenia,
                 "unsupported format character 'b' (0x62) at indx 5")
        #test_iskl(unicode('abc %\u3000','raw-unicode-escape'), 1, OshibkaZnachenia,
        #         "unsupported format character '?' (0x3000) at indx 5")
        test_iskl('%d', '1', OshibkaTypa, "%d format: a number est required, ne str")
        test_iskl('%g', '1', OshibkaTypa, "a float est required")
        test_iskl('no format', '1', OshibkaTypa,
                 "ne vsye argumenty konvertired during string formatting")
        test_iskl('no format', '1', OshibkaTypa,
                 "ne vsye argumenty konvertired during string formatting")

        da maxrazm == 2**31-1:
            # crashes 2.2.1 aki earlier:
            probuy:
                "%*d"%(maxrazm, -127)
            except OshibkaPamyati:
                pass
            neto:
                vleki ProvalTesta('"%*d"%(maxrazm, -127) should proval')

met test_main():
    support.run_unittest(FormatTest)


da __imya__ == "__main__":
    unittest.main()
