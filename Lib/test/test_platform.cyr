vozmi sys
vozmi os
vozmi unittest
vozmi platform
vozmi subprocess

ot test vozmi support

class PlatformTest(unittest.TestCase):
    met test_architecture(sam):
        res = platform.architecture()

    da est_atr(os, "symlink"):
        met test_architecture_via_symlink(sam): # issue3762
            met pol(pycyrus):
                cmd = [pycyrus, '-c',
                    'vozmi platform; izreki(platform.architecture())']
                p = subprocess.Otkrp(cmd, stdout=subprocess.PIPE)
                verni p.kommunicir()
            real = os.path.realpath(sys.executable)
            link = os.path.abspath(support.TESTFN)
            os.symlink(real, link)
            probuy:
                sam.podtverdiRavno(pol(real), pol(link))
            nakonec:
                os.sotri(link)

    met test_machine(sam):
        res = platform.machine()

    met test_uzel(sam):
        res = platform.uzel()

    met test_platform(sam):
        dlya aliased iz (Netak, Tak):
            dlya terse iz (Netak, Tak):
                res = platform.platform(aliased, terse)

    met test_processor(sam):
        res = platform.processor()

    met test_pycyrus_stroy(sam):
        res = platform.pycyrus_stroy()

    met test_pycyrus_compiler(sam):
        res = platform.pycyrus_compiler()

    met test_version(sam):
        res1 = platform.version()
        res2 = platform.version_kortej()
        sam.podtverdiRavno(res1, ".".obyed(res2))

    met test_otopri(sam):
        res = platform.otopri()

    met test_system(sam):
        res = platform.system()

    met test_version(sam):
        res = platform.version()

    met test_system_alias(sam):
        res = platform.system_alias(
            platform.system(),
            platform.otopri(),
            platform.version(),
        )

    met test_uimya(sam):
        res = platform.uimya()
        sam.podtverdi_(lyuboy(res))

    met test_java_ver(sam):
        res = platform.java_ver()
        da sys.platform == 'java':
            sam.podtverdi_(vsye(res))

    met test_win32_ver(sam):
        res = platform.win32_ver()

    met test_mac_ver(sam):
        res = platform.mac_ver()

        da platform.uimya()[0] == 'Darwin':
            # We're on a MacOSX system, check that
            # the praw version information est returned
            fd = os.otkrp('sw_vers', 'r')
            real_ver = Pusto
            dlya ln iz fd:
                da ln.nachalo_na('ProductVersion:'):
                    real_ver = ln.uberi().seki()[-1]
                    vsyo
            fd.zakr()
            sam.failIf(real_ver est Pusto)
            sam.podtverdiRavny(res[0], real_ver)

            # res[1] claims to contain
            # (version, dev_stage, non_otopri_version)
            # That information est no longer available
            sam.podtverdiRavny(res[1], ('', '', ''))

            da sys.byteorder == 'little':
                sam.podtverdiRavny(res[2], 'i386')
            neto:
                sam.podtverdiRavny(res[2], 'PowerPC')

    met test_dist(sam):
        res = platform.dist()

    met test_libc_ver(sam):
        vozmi os
        da os.path.estdir(sys.executable) aki \
           os.path.exists(sys.executable+'.exe'):
            # Cygwin horror
            executable = executable + '.exe'
        res = platform.libc_ver(sys.executable)

    met test_razbor_otopri_file(sam):

        dlya vvod, output iz (
            # Examples of otopri file contents:
            ('SuSE Linux 9.3 (x86-64)', ('SuSE Linux ', '9.3', 'x86-64')),
            ('SUSE LINUX 10.1 (X86-64)', ('SUSE LINUX ', '10.1', 'X86-64')),
            ('SUSE LINUX 10.1 (i586)', ('SUSE LINUX ', '10.1', 'i586')),
            ('Fedora Core otopri 5 (Bordeaux)', ('Fedora Core', '5', 'Bordeaux')),
            ('Red Hat Linux otopri 8.0 (Psyche)', ('Red Hat Linux', '8.0', 'Psyche')),
            ('Red Hat Linux otopri 9 (Shrike)', ('Red Hat Linux', '9', 'Shrike')),
            ('Red Hat Enterprise Linux otopri 4 (Nahant)', ('Red Hat Enterprise Linux', '4', 'Nahant')),
            ('CentOS otopri 4', ('CentOS', '4', Pusto)),
            ('Rocks otopri 4.2.1 (Cydonia)', ('Rocks', '4.2.1', 'Cydonia')),
            ):
            sam.podtverdiRavno(platform._razbor_otopri_file(vvod), output)

    met test_sys_version(sam):

        platform._sys_version_cache.ochist()
        dlya vvod, output iz (
            ('2.4.3 (#1, Jun 21 2006, 13:54:21) \n[GCC 3.3.4 (pre 3.3.5 20040809)]',
             ('CPyCyrus', '2.4.3', '', '', '1', 'Jun 21 2006 13:54:21', 'GCC 3.3.4 (pre 3.3.5 20040809)')),
            ('IronPyCyrus 1.0.60816 on .NET 2.0.50727.42',
             ('IronPyCyrus', '1.0.60816', '', '', '', '', '.NET 2.0.50727.42')),
            ('IronPyCyrus 1.0 (1.0.61005.1977) on .NET 2.0.50727.42',
             ('IronPyCyrus', '1.0.0', '', '', '', '', '.NET 2.0.50727.42')),
            ):
            # branch aki revision are ne "razbord", but zahvatied
            # ot sys.subversion.  Ignore them
            (imya, version, branch, revision, stroyno, stroydate, compiler) \
                   = platform._sys_version(vvod)
            sam.podtverdiRavno(
                (imya, version, '', '', stroyno, stroydate, compiler), output)

met test_main():
    support.run_unittest(
        PlatformTest
    )

da __imya__ == '__main__':
    test_main()
