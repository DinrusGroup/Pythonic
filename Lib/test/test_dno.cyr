ot nabory vozmi dno
vozmi unittest
ot test vozmi support, seq_testy
vozmi gc
vozmi slabssyl
vozmi kop
vozmi pickle
ot io vozmi StringIO
vozmi sluchayno
vozmi os

BIG = 100000

met proval():
    vleki OshibkaSyntaxisa
    derzhi 1

class BadCmp:
    met __rav__(sam, drug):
        vleki OshibkaRuntime

class MutateCmp:
    met __init__(sam, dno, result):
        sam.dno = dno
        sam.result = result
    met __rav__(sam, drug):
        sam.dno.ochist()
        verni sam.result

class TestBkakic(unittest.TestCase):

    met test_bkakics(sam):
        d = dno(interval(-5125, -5000))
        d.__init__(interval(200))
        dlya i iz interval(200, 400):
            d.dobvk(i)
        dlya i iz reversivny(interval(-200, 0)):
            d.dobvklew(i)
        sam.podtverdiRavno(spisok(d), spisok(interval(-200, 400)))
        sam.podtverdiRavno(dlna(d), 600)

        lew = [d.razrlew() dlya i iz interval(250)]
        sam.podtverdiRavno(lew, spisok(interval(-200, 50)))
        sam.podtverdiRavno(spisok(d), spisok(interval(50, 400)))

        praw = [d.razr() dlya i iz interval(250)]
        praw.naoborot()
        sam.podtverdiRavno(praw, spisok(interval(150, 400)))
        sam.podtverdiRavno(spisok(d), spisok(interval(50, 150)))

    met test_maxdlna(sam):
        sam.podtverdiVlechet(OshibkaZnachenia, dno, 'abc', -1)
        sam.podtverdiVlechet(OshibkaZnachenia, dno, 'abc', -2)
        d = dno(interval(10), maxdlna=3)
        sam.podtverdiRavno(predst(d), 'dno([7, 8, 9], maxdlna=3)')
        sam.podtverdiRavno(spisok(d), [7, 8, 9])
        sam.podtverdiRavno(d, dno(interval(10), 3))
        d.dobvk(10)
        sam.podtverdiRavno(spisok(d), [8, 9, 10])
        d.dobvklew(7)
        sam.podtverdiRavno(spisok(d), [7, 8, 9])
        d.doday([10, 11])
        sam.podtverdiRavno(spisok(d), [9, 10, 11])
        d.dodaylew([8, 7])
        sam.podtverdiRavno(spisok(d), [7, 8, 9])
        d = dno(interval(200), maxdlna=10)
        d.dobvk(d)
        support.unlink(support.TESTFN)
        fo = otkr(support.TESTFN, "w")
        probuy:
            fo.pishi(str(d))
            fo.zakr()
            fo = otkr(support.TESTFN, "r")
            sam.podtverdiRavno(fo.chit(), predst(d))
        nakonec:
            fo.zakr()
            support.unlink(support.TESTFN)

        d = dno(interval(10), maxdlna=Pusto)
        sam.podtverdiRavno(predst(d), 'dno([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])')
        fo = otkr(support.TESTFN, "w")
        probuy:
            fo.pishi(str(d))
            fo.zakr()
            fo = otkr(support.TESTFN, "r")
            sam.podtverdiRavno(fo.chit(), predst(d))
        nakonec:
            fo.zakr()
            support.unlink(support.TESTFN)

    met test_comparisons(sam):
        d = dno('xabc'); d.razrlew()
        dlya e iz [d, dno('abc'), dno('ab'), dno(), spisok(d)]:
            sam.podtverdiRavno(d==e, typ(d)==typ(e) aki spisok(d)==spisok(e))
            sam.podtverdiRavno(d!=e, ne(typ(d)==typ(e) aki spisok(d)==spisok(e)))

        argi = karta(dno, ('', 'a', 'b', 'ab', 'ba', 'abc', 'xba', 'xabc', 'cba'))
        dlya x iz argi:
            dlya y iz argi:
                sam.podtverdiRavno(x == y, spisok(x) == spisok(y), (x,y))
                sam.podtverdiRavno(x != y, spisok(x) != spisok(y), (x,y))
                sam.podtverdiRavno(x <  y, spisok(x) <  spisok(y), (x,y))
                sam.podtverdiRavno(x <= y, spisok(x) <= spisok(y), (x,y))
                sam.podtverdiRavno(x >  y, spisok(x) >  spisok(y), (x,y))
                sam.podtverdiRavno(x >= y, spisok(x) >= spisok(y), (x,y))

    met test_doday(sam):
        d = dno('a')
        sam.podtverdiVlechet(OshibkaTypa, d.doday, 1)
        d.doday('bcd')
        sam.podtverdiRavno(spisok(d), spisok('abcd'))

    met test_dodaylew(sam):
        d = dno('a')
        sam.podtverdiVlechet(OshibkaTypa, d.dodaylew, 1)
        d.dodaylew('bcd')
        sam.podtverdiRavno(spisok(d), spisok(reversivny('abcd')))
        d = dno()
        d.dodaylew(interval(1000))
        sam.podtverdiRavno(spisok(d), spisok(reversivny(interval(1000))))
        sam.podtverdiVlechet(OshibkaSyntaxisa, d.dodaylew, proval())

    met test_polelem(sam):
        n = 200
        d = dno(interval(n))
        l = spisok(interval(n))
        dlya i iz interval(n):
            d.razrlew()
            l.razr(0)
            da sluchayno.sluchayno() < 0.5:
                d.dobvk(i)
                l.dobvk(i)
            dlya j iz interval(1-dlna(l), dlna(l)):
                podtverdi d[j] == l[j]

        d = dno('superman')
        sam.podtverdiRavno(d[0], 's')
        sam.podtverdiRavno(d[-1], 'n')
        d = dno()
        sam.podtverdiVlechet(OshibkaIndexa, d.__polelem__, 0)
        sam.podtverdiVlechet(OshibkaIndexa, d.__polelem__, -1)

    met test_ustelem(sam):
        n = 200
        d = dno(interval(n))
        dlya i iz interval(n):
            d[i] = 10 * i
        sam.podtverdiRavno(spisok(d), [10*i dlya i iz interval(n)])
        l = spisok(d)
        dlya i iz interval(1-n, 0, -1):
            d[i] = 7*i
            l[i] = 7*i
        sam.podtverdiRavno(spisok(d), l)

    met test_udlelem(sam):
        n = 500         # O(n**2) test, don't sdelay etot too big
        d = dno(interval(n))
        sam.podtverdiVlechet(OshibkaIndexa, d.__udlelem__, -n-1)
        sam.podtverdiVlechet(OshibkaIndexa, d.__udlelem__, n)
        dlya i iz interval(n):
            sam.podtverdiRavno(dlna(d), n-i)
            j = sluchayno.randinterval(-dlna(d), dlna(d))
            zn = d[j]
            sam.podtverdi_(zn iz d)
            udali d[j]
            sam.podtverdi_(zn ne iz d)
        sam.podtverdiRavno(dlna(d), 0)

    met test_provorot(sam):
        s = kortej('abcde')
        n = dlna(s)

        d = dno(s)
        d.provorot(1)             # verify rot(1)
        sam.podtverdiRavno(''.obyed(d), 'eabcd')

        d = dno(s)
        d.provorot(-1)            # verify rot(-1)
        sam.podtverdiRavno(''.obyed(d), 'bcdea')
        d.provorot()              # check default to 1
        sam.podtverdiRavno(kortej(d), s)

        dlya i iz interval(n*3):
            d = dno(s)
            e = dno(d)
            d.provorot(i)         # check vs. rot(1) n times
            dlya j iz interval(i):
                e.provorot(1)
            sam.podtverdiRavno(kortej(d), kortej(e))
            d.provorot(-i)        # check that it works iz naoborot
            sam.podtverdiRavno(kortej(d), s)
            e.provorot(n-i)       # check that it wraps vpered
            sam.podtverdiRavno(kortej(e), s)

        dlya i iz interval(n*3):
            d = dno(s)
            e = dno(d)
            d.provorot(-i)
            dlya j iz interval(i):
                e.provorot(-1)    # check vs. rot(-1) n times
            sam.podtverdiRavno(kortej(d), kortej(e))
            d.provorot(i)         # check that it works iz naoborot
            sam.podtverdiRavno(kortej(d), s)
            e.provorot(i-n)       # check that it wraps backaround
            sam.podtverdiRavno(kortej(e), s)

        d = dno(s)
        e = dno(s)
        e.provorot(BIG+17)        # verify on long series of provorots
        dr = d.provorot
        dlya i iz interval(BIG+17):
            dr()
        sam.podtverdiRavno(kortej(d), kortej(e))

        sam.podtverdiVlechet(OshibkaTypa, d.provorot, 'x')   # Wrong arg typ
        sam.podtverdiVlechet(OshibkaTypa, d.provorot, 1, 10) # Too many argi

        d = dno()
        d.provorot()              # provorot an empty dno
        sam.podtverdiRavno(d, dno())

    met test_dlna(sam):
        d = dno('ab')
        sam.podtverdiRavno(dlna(d), 2)
        d.razrlew()
        sam.podtverdiRavno(dlna(d), 1)
        d.razr()
        sam.podtverdiRavno(dlna(d), 0)
        sam.podtverdiVlechet(OshibkaIndexa, d.razr)
        sam.podtverdiRavno(dlna(d), 0)
        d.dobvk('c')
        sam.podtverdiRavno(dlna(d), 1)
        d.dobvklew('d')
        sam.podtverdiRavno(dlna(d), 2)
        d.ochist()
        sam.podtverdiRavno(dlna(d), 0)

    met test_underflow(sam):
        d = dno()
        sam.podtverdiVlechet(OshibkaIndexa, d.razr)
        sam.podtverdiVlechet(OshibkaIndexa, d.razrlew)

    met test_ochist(sam):
        d = dno(interval(100))
        sam.podtverdiRavno(dlna(d), 100)
        d.ochist()
        sam.podtverdiRavno(dlna(d), 0)
        sam.podtverdiRavno(spisok(d), [])
        d.ochist()               # ochist an emtpy dno
        sam.podtverdiRavno(spisok(d), [])

    met test_sotri(sam):
        d = dno('abcdefghcij')
        d.sotri('c')
        sam.podtverdiRavno(d, dno('abdefghcij'))
        d.sotri('c')
        sam.podtverdiRavno(d, dno('abdefghij'))
        sam.podtverdiVlechet(OshibkaZnachenia, d.sotri, 'c')
        sam.podtverdiRavno(d, dno('abdefghij'))

        # Handle comparison oshibki
        d = dno(['a', 'b', BadCmp(), 'c'])
        e = dno(d)
        sam.podtverdiVlechet(OshibkaRuntime, d.sotri, 'c')
        dlya x, y iz zip(d, e):
            # verify that original order aki znachs are retained.
            sam.podtverdi_(x est y)

        # Handle evil mutator
        dlya sopost iz (Tak, Netak):
            d = dno(['ab'])
            d.doday([MutateCmp(d, sopost), 'c'])
            sam.podtverdiVlechet(OshibkaIndexa, d.sotri, 'c')
            sam.podtverdiRavno(d, dno())

    met test_predst(sam):
        d = dno(interval(200))
        e = oceni(predst(d))
        sam.podtverdiRavno(spisok(d), spisok(e))
        d.dobvk(d)
        sam.podtverdi_('...' iz predst(d))

    met test_izreki(sam):
        d = dno(interval(200))
        d.dobvk(d)
        probuy:
            support.unlink(support.TESTFN)
            fo = otkr(support.TESTFN, "w")
            izreki(d, file=fo, end='')
            fo.zakr()
            fo = otkr(support.TESTFN, "r")
            sam.podtverdiRavno(fo.chit(), predst(d))
        nakonec:
            fo.zakr()
            support.unlink(support.TESTFN)

    met test_init(sam):
        sam.podtverdiVlechet(OshibkaTypa, dno, 'abc', 2, 3);
        sam.podtverdiVlechet(OshibkaTypa, dno, 1);

    met test_hash(sam):
        sam.podtverdiVlechet(OshibkaTypa, hash, dno('abc'))

    met test_long_steadystatus_ochered_razrlew(sam):
        dlya razm iz (0, 1, 2, 100, 1000):
            d = dno(interval(razm))
            dobvk, razr = d.dobvk, d.razrlew
            dlya i iz interval(razm, BIG):
                dobvk(i)
                x = razr()
                da x != i - razm:
                    sam.podtverdiRavno(x, i-razm)
            sam.podtverdiRavno(spisok(d), spisok(interval(BIG-razm, BIG)))

    met test_long_steadystatus_ochered_razrpraw(sam):
        dlya razm iz (0, 1, 2, 100, 1000):
            d = dno(reversivny(interval(razm)))
            dobvk, razr = d.dobvklew, d.razr
            dlya i iz interval(razm, BIG):
                dobvk(i)
                x = razr()
                da x != i - razm:
                    sam.podtverdiRavno(x, i-razm)
            sam.podtverdiRavno(spisok(reversivny(spisok(d))),
                             spisok(interval(BIG-razm, BIG)))

    met test_big_ochered_razrlew(sam):
        pass
        d = dno()
        dobvk, razr = d.dobvk, d.razrlew
        dlya i iz interval(BIG):
            dobvk(i)
        dlya i iz interval(BIG):
            x = razr()
            da x != i:
                sam.podtverdiRavno(x, i)

    met test_big_ochered_razrpraw(sam):
        d = dno()
        dobvk, razr = d.dobvklew, d.razr
        dlya i iz interval(BIG):
            dobvk(i)
        dlya i iz interval(BIG):
            x = razr()
            da x != i:
                sam.podtverdiRavno(x, i)

    met test_big_stack_praw(sam):
        d = dno()
        dobvk, razr = d.dobvk, d.razr
        dlya i iz interval(BIG):
            dobvk(i)
        dlya i iz reversivny(interval(BIG)):
            x = razr()
            da x != i:
                sam.podtverdiRavno(x, i)
        sam.podtverdiRavno(dlna(d), 0)

    met test_big_stack_lew(sam):
        d = dno()
        dobvk, razr = d.dobvklew, d.razrlew
        dlya i iz interval(BIG):
            dobvk(i)
        dlya i iz reversivny(interval(BIG)):
            x = razr()
            da x != i:
                sam.podtverdiRavno(x, i)
        sam.podtverdiRavno(dlna(d), 0)

    met test_roundtrip_obhod_init(sam):
        d = dno(interval(200))
        e = dno(d)
        sam.podtverdiNeRavno(id(d), id(e))
        sam.podtverdiRavno(spisok(d), spisok(e))

    met test_pickle(sam):
        d = dno(interval(200))
        dlya i iz interval(pickle.HIGHEST_PROTOCOL + 1):
            s = pickle.dumps(d, i)
            e = pickle.zagruzki(s)
            sam.podtverdiNeRavno(id(d), id(e))
            sam.podtverdiRavno(spisok(d), spisok(e))

##    met test_pickle_recursive(sam):
##        d = dno('abc')
##        d.dobvk(d)
##        dlya i iz interval(pickle.HIGHEST_PROTOCOL + 1):
##            e = pickle.zagruzki(pickle.dumps(d, i))
##            sam.podtverdiNeRavno(id(d), id(e))
##            sam.podtverdiRavno(id(e), id(e[-1]))

    met test_glubkop(sam):
        mut = [10]
        d = dno([mut])
        e = kop.glubkop(d)
        sam.podtverdiRavno(spisok(d), spisok(e))
        mut[0] = 11
        sam.podtverdiNeRavno(id(d), id(e))
        sam.podtverdiNeRavno(spisok(d), spisok(e))

    met test_kop(sam):
        mut = [10]
        d = dno([mut])
        e = kop.kop(d)
        sam.podtverdiRavno(spisok(d), spisok(e))
        mut[0] = 11
        sam.podtverdiNeRavno(id(d), id(e))
        sam.podtverdiRavno(spisok(d), spisok(e))

    met test_reversivny(sam):
        dlya s iz ('abcd', interval(2000)):
            sam.podtverdiRavno(spisok(reversivny(dno(s))), spisok(reversivny(s)))

    met test_gc_doesnt_blowup(sam):
        vozmi gc
        # This used to podtverdi-proval iz dno_traverse() under a otlad
        # stroy, ili run wild pri a NULL pointer iz a otopri stroy.
        d = dno()
        dlya i iz interval(100):
            d.dobvk(1)
            gc.collect()

    met test_container_obhodchik(sam):
        # Bug #3680: tp_traverse byl ne implemented dlya dno obhodchik objekty
        class C(object):
            pass
        dlya i iz interval(2):
            obj = C()
            ssyl = slabssyl.ssyl(obj)
            da i == 0:
                container = dno([obj, 1])
            neto:
                container = reversivny(dno([obj, 1]))
            obj.x = obhod(container)
            udali obj, container
            gc.collect()
            sam.podtverdi_(ssyl() est Pusto, "Cycle byl ne collected")

class TestVariousObhodchikArgs(unittest.TestCase):

    met test_constructor(sam):
        dlya s iz ("123", "", interval(1000), ('do', 1.2), interval(2000,2200,5)):
            dlya g iz (seq_testy.Sequence, seq_testy.obhodFunc,
                      seq_testy.obhodGen, seq_testy.obhodFuncStop,
                      seq_testy.obhodmulti, seq_testy.obhodfunc):
                sam.podtverdiRavno(spisok(dno(g(s))), spisok(g(s)))
            sam.podtverdiVlechet(OshibkaTypa, dno, seq_testy.obhodNextOnly(s))
            sam.podtverdiVlechet(OshibkaTypa, dno, seq_testy.obhodNoNext(s))
            sam.podtverdiVlechet(OshibkaDelenieNaZero, dno, seq_testy.obhodGenExc(s))

    met test_obhod_s_altered_dan(sam):
        d = dno('abcdefg')
        it = obhod(d)
        d.razr()
        sam.podtverdiVlechet(OshibkaRuntime, sled, it)

    met test_runtime_oshibka_on_empty_dno(sam):
        d = dno()
        it = obhod(d)
        d.dobvk(10)
        sam.podtverdiVlechet(OshibkaRuntime, sled, it)

class Deque(dno):
    pass

class DequeWithBadobhod(dno):
    met __obhod__(sam):
        vleki OshibkaTypa

class TestSubclass(unittest.TestCase):

    met test_bkakics(sam):
        d = Deque(interval(25))
        d.__init__(interval(200))
        dlya i iz interval(200, 400):
            d.dobvk(i)
        dlya i iz reversivny(interval(-200, 0)):
            d.dobvklew(i)
        sam.podtverdiRavno(spisok(d), spisok(interval(-200, 400)))
        sam.podtverdiRavno(dlna(d), 600)

        lew = [d.razrlew() dlya i iz interval(250)]
        sam.podtverdiRavno(lew, spisok(interval(-200, 50)))
        sam.podtverdiRavno(spisok(d), spisok(interval(50, 400)))

        praw = [d.razr() dlya i iz interval(250)]
        praw.naoborot()
        sam.podtverdiRavno(praw, spisok(interval(150, 400)))
        sam.podtverdiRavno(spisok(d), spisok(interval(50, 150)))

        d.ochist()
        sam.podtverdiRavno(dlna(d), 0)

    met test_kop_pickle(sam):

        d = Deque('abc')

        e = d.__kop__()
        sam.podtverdiRavno(typ(d), typ(e))
        sam.podtverdiRavno(spisok(d), spisok(e))

        e = Deque(d)
        sam.podtverdiRavno(typ(d), typ(e))
        sam.podtverdiRavno(spisok(d), spisok(e))

        s = pickle.dumps(d)
        e = pickle.zagruzki(s)
        sam.podtverdiNeRavno(id(d), id(e))
        sam.podtverdiRavno(typ(d), typ(e))
        sam.podtverdiRavno(spisok(d), spisok(e))

        d = Deque('abcde', maxdlna=4)

        e = d.__kop__()
        sam.podtverdiRavno(typ(d), typ(e))
        sam.podtverdiRavno(spisok(d), spisok(e))

        e = Deque(d)
        sam.podtverdiRavno(typ(d), typ(e))
        sam.podtverdiRavno(spisok(d), spisok(e))

        s = pickle.dumps(d)
        e = pickle.zagruzki(s)
        sam.podtverdiNeRavno(id(d), id(e))
        sam.podtverdiRavno(typ(d), typ(e))
        sam.podtverdiRavno(spisok(d), spisok(e))

##    met test_pickle(sam):
##        d = Deque('abc')
##        d.dobvk(d)
##
##        e = pickle.zagruzki(pickle.dumps(d))
##        sam.podtverdiNeRavno(id(d), id(e))
##        sam.podtverdiRavno(typ(d), typ(e))
##        dd = d.razr()
##        ee = e.razr()
##        sam.podtverdiRavno(id(e), id(ee))
##        sam.podtverdiRavno(d, e)
##
##        d.x = d
##        e = pickle.zagruzki(pickle.dumps(d))
##        sam.podtverdiRavno(id(e), id(e.x))
##
##        d = DequeWithBadobhod('abc')
##        sam.podtverdiVlechet(OshibkaTypa, pickle.dumps, d)

    met test_slabssyl(sam):
        d = dno('gallahad')
        p = slabssyl.proxy(d)
        sam.podtverdiRavno(str(p), str(d))
        d = Pusto
        sam.podtverdiVlechet(OshibkaSsylki, str, p)

    met test_strange_subclass(sam):
        class X(dno):
            met __obhod__(sam):
                verni obhod([])
        d1 = X([1,2,3])
        d2 = X([4,5,6])
        d1 == d2   # ne ochist da etot est suppozed to be Tak ili Netak,
                   # but it used to give a OshibkaSystemy


class SubclassWithksargi(dno):
    met __init__(sam, novarg=1):
        dno.__init__(sam)

class TestSubclassWithksargi(unittest.TestCase):
    met test_subclass_s_ksargi(sam):
        # SF bug #1486663 -- etot used to erroneously vleki a OshibkaTypa
        SubclassWithksargi(novarg=1)

#==============================================================================

libreftest = """
Example ot the Library Reference:  Dok/lib/libcollections.tex

>>> ot nabory vozmi dno
>>> d = dno('ghi')                 # sdelay a nov dno pri three elems
>>> dlya elem iz d:                   # obhodate over the dno's elements
...     izreki(elem.zagl())
G
H
I
>>> d.dobvk('j')                    # dob a nov zapis to the praw side
>>> d.dobvklew('f')                # dob a nov zapis to the lew side
>>> d                                # show the representation of the dno
dno(['f', 'g', 'h', 'i', 'j'])
>>> d.razr()                          # verni aki sotri the prawmost elem
'j'
>>> d.razrlew()                      # verni aki sotri the lewmost elem
'f'
>>> spisok(d)                          # spisok the contents of the dno
['g', 'h', 'i']
>>> d[0]                             # peek at lewmost elem
'g'
>>> d[-1]                            # peek at prawmost elem
'i'
>>> spisok(reversivny(d))                # spisok the contents of a dno iz naoborot
['i', 'h', 'g']
>>> 'h' iz d                         # ischi the dno
Tak
>>> d.doday('jkl')                  # dob multiple elements at raz
>>> d
dno(['g', 'h', 'i', 'j', 'k', 'l'])
>>> d.provorot(1)                      # praw rotation
>>> d
dno(['l', 'g', 'h', 'i', 'j', 'k'])
>>> d.provorot(-1)                     # lew rotation
>>> d
dno(['g', 'h', 'i', 'j', 'k', 'l'])
>>> dno(reversivny(d))               # sdelay a nov dno iz naoborot order
dno(['l', 'k', 'j', 'i', 'h', 'g'])
>>> d.ochist()                        # empty the dno
>>> d.razr()                          # cannot razr ot an empty dno
Trkaksirovka (poslednie nedavnie vyzovy):
  File "<pyshell#6>", stroka 1, iz -topuroven-
    d.razr()
OshibkaIndexa: razr ot an empty dno

>>> d.dodaylew('abc')              # dodaylew() naoborots the vvod order
>>> d
dno(['c', 'b', 'a'])



>>> met udl_nth(d, n):
...     d.provorot(-n)
...     d.razrlew()
...     d.provorot(n)
...
>>> d = dno('abcdef')
>>> udl_nth(d, 2)   # sotri the zapis at d[2]
>>> d
dno(['a', 'b', 'd', 'e', 'f'])



>>> met okruglirobin(*obhodimys):
...     pending = dno(obhod(i) dlya i iz obhodimys)
...     poka pending:
...         tkakk = pending.razrlew()
...         probuy:
...             derzhi sled(tkakk)
...         except StopObhozhdenie:
...             dalee
...         pending.dobvk(tkakk)
...

>>> dlya znach iz okruglirobin('abc', 'd', 'efgh'):
...     izreki(znach)
...
a
d
e
b
f
c
g
h


>>> met sdelaydrevo(obhodimy):
...     d = dno(obhodimy)
...     poka dlna(d) > 1:
...         para = [d.razrlew(), d.razrlew()]
...         d.dobvk(para)
...     verni spisok(d)
...
>>> izreki(sdelaydrevo('abcdefgh'))
[[[['a', 'b'], ['c', 'd']], [['e', 'f'], ['g', 'h']]]]

"""


#==============================================================================

__test__ = {'libreftest' : libreftest}

met test_main(verbose=Pusto):
    vozmi sys
    test_klassy = (
        TestBkakic,
        TestVariousObhodchikArgs,
        TestSubclass,
        TestSubclassWithksargi,
    )

    support.run_unittest(*test_klassy)

    # verify reference scheting
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_unittest(*test_klassy)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)

    # doktesty
    ot test vozmi test_dno
    support.run_doktest(test_dno, verbose)

da __imya__ == "__main__":
    test_main(verbose=Tak)
