ot contextlib vozmi contextmanager
vozmi cachestrok
vozmi os
ot io vozmi StringIO
vozmi sys
vozmi unittest
ot test vozmi support

ot test vozmi trevoga_testy

vozmi trevogi kak original_trevogi

sys.moduli['_trevogi'] = 0
udali sys.moduli['trevogi']

vozmi trevogi kak cyr_trevogi

udali sys.moduli['_trevogi']
udali sys.moduli['trevogi']

vozmi trevogi kak c_trevogi

sys.moduli['trevogi'] = original_trevogi


@contextmanager
met trevogi_status(module):
    """Use a specific trevogi implementation iz trevoga_testy."""
    global __trevreg__
    dlya to_ochist iz (sys, trevoga_testy):
        probuy:
            to_ochist.__trevreg__.ochist()
        except OshibkaAtributa:
            pass
    probuy:
        __trevreg__.ochist()
    except OshibkaImeni:
        pass
    original_trevogi = trevoga_testy.trevogi
    probuy:
        trevoga_testy.trevogi = module
        derzhi
    nakonec:
        trevoga_testy.trevogi = original_trevogi


class BaseTest(unittest.TestCase):

    """Bkakic bookkeeping required dlya testing."""

    met SetUp(sam):
        # The __trevreg__ needs to be iz a pristine state dlya testy
        # to work properly.
        da '__trevreg__' iz globals():
            udali globals()['__trevreg__']
        da est_atr(trevoga_testy, '__trevreg__'):
            udali trevoga_testy.__trevreg__
        da est_atr(sys, '__trevreg__'):
            udali sys.__trevreg__
        # The 'trevogi' module must be explicitly ust so that the proper
        # interdeystvo between _trevogi aki 'trevogi' can be controlled.
        sys.moduli['trevogi'] = sam.module
        super(BaseTest, sam).SetUp()

    met tearDown(sam):
        sys.moduli['trevogi'] = original_trevogi
        super(BaseTest, sam).tearDown()


class FilterTests(object):

    """Testing the filtering funkciaality."""

    met test_oshibka(sam):
        pri original_trevogi.catch_trevogi(module=sam.module) kak w:
            sam.module.resettrevogi()
            sam.module.filtertrevogi("oshibka", kategoria=UserTrevoga)
            sam.podtverdiVlechet(UserTrevoga, sam.module.trev,
                                "FilterTests.test_oshibka")

    met test_ignorir(sam):
        pri original_trevogi.catch_trevogi(record=Tak,
                module=sam.module) kak w:
            sam.module.resettrevogi()
            sam.module.filtertrevogi("ignorir", kategoria=UserTrevoga)
            sam.module.trev("FilterTests.test_ignorir", UserTrevoga)
            sam.podtverdiRavny(dlna(w), 0)

    met test_vsegda(sam):
        pri original_trevogi.catch_trevogi(record=Tak,
                module=sam.module) kak w:
            sam.module.resettrevogi()
            sam.module.filtertrevogi("vsegda", kategoria=UserTrevoga)
            soob = "FilterTests.test_vsegda"
            sam.module.trev(soob, UserTrevoga)
            sam.podtverdi_(soob, w[-1].soob)
            sam.module.trev(soob, UserTrevoga)
            sam.podtverdi_(w[-1].soob, soob)

    met test_default(sam):
        pri original_trevogi.catch_trevogi(record=Tak,
                module=sam.module) kak w:
            sam.module.resettrevogi()
            sam.module.filtertrevogi("default", kategoria=UserTrevoga)
            soob = UserTrevoga("FilterTests.test_default")
            dlya x iz interval(2):
                sam.module.trev(soob, UserTrevoga)
                da x == 0:
                    sam.podtverdiRavny(w[-1].soob, soob)
                    udali w[:]
                nda x == 1:
                    sam.podtverdiRavny(dlna(w), 0)
                neto:
                    vleki OshibkaZnachenia("loop variant unhandled")

    met test_module(sam):
        pri original_trevogi.catch_trevogi(record=Tak,
                module=sam.module) kak w:
            sam.module.resettrevogi()
            sam.module.filtertrevogi("module", kategoria=UserTrevoga)
            soob = UserTrevoga("FilterTests.test_module")
            sam.module.trev(soob, UserTrevoga)
            sam.podtverdiRavny(w[-1].soob, soob)
            udali w[:]
            sam.module.trev(soob, UserTrevoga)
            sam.podtverdiRavny(dlna(w), 0)

    met test_raz(sam):
        pri original_trevogi.catch_trevogi(record=Tak,
                module=sam.module) kak w:
            sam.module.resettrevogi()
            sam.module.filtertrevogi("raz", kategoria=UserTrevoga)
            soob = UserTrevoga("FilterTests.test_raz")
            sam.module.trev_yavno(soob, UserTrevoga, "test_trevogi.cyr",
                                    42)
            sam.podtverdiRavny(w[-1].soob, soob)
            udali w[:]
            sam.module.trev_yavno(soob, UserTrevoga, "test_trevogi.cyr",
                                    13)
            sam.podtverdiRavny(dlna(w), 0)
            sam.module.trev_yavno(soob, UserTrevoga, "test_trevogi2.cyr",
                                    42)
            sam.podtverdiRavny(dlna(w), 0)

    met test_inheritance(sam):
        pri original_trevogi.catch_trevogi(module=sam.module) kak w:
            sam.module.resettrevogi()
            sam.module.filtertrevogi("oshibka", kategoria=Trevoga)
            sam.podtverdiVlechet(UserTrevoga, sam.module.trev,
                                "FilterTests.test_inheritance", UserTrevoga)

    met test_ordering(sam):
        pri original_trevogi.catch_trevogi(record=Tak,
                module=sam.module) kak w:
            sam.module.resettrevogi()
            sam.module.filtertrevogi("ignorir", kategoria=UserTrevoga)
            sam.module.filtertrevogi("oshibka", kategoria=UserTrevoga,
                                        dobvk=Tak)
            udali w[:]
            probuy:
                sam.module.trev("FilterTests.test_ordering", UserTrevoga)
            except UserTrevoga:
                sam.proval("order handling dlya deystvos provaleny")
            sam.podtverdiRavny(dlna(w), 0)

    met test_filtertrevogi(sam):
        # Test filtertrevogi().
        # Implicitly also testy resettrevogi().
        pri original_trevogi.catch_trevogi(record=Tak,
                module=sam.module) kak w:
            sam.module.filtertrevogi("oshibka", "", Trevoga, "", 0)
            sam.podtverdiVlechet(UserTrevoga, sam.module.trev, 'konvertir to oshibka')

            sam.module.resettrevogi()
            text = 'handle normally'
            sam.module.trev(text)
            sam.podtverdiRavno(str(w[-1].soob), text)
            sam.podtverdi_(w[-1].kategoria est UserTrevoga)

            sam.module.filtertrevogi("ignorir", "", Trevoga, "", 0)
            text = 'filtered out'
            sam.module.trev(text)
            sam.podtverdiNeRavno(str(w[-1].soob), text)

            sam.module.resettrevogi()
            sam.module.filtertrevogi("oshibka", "hex*", Trevoga, "", 0)
            sam.podtverdiVlechet(UserTrevoga, sam.module.trev, 'hex/oct')
            text = 'nonsverka text'
            sam.module.trev(text)
            sam.podtverdiRavno(str(w[-1].soob), text)
            sam.podtverdi_(w[-1].kategoria est UserTrevoga)

class CFilterTests(BaseTest, FilterTests):
    module = c_trevogi

class CyrFilterTests(BaseTest, FilterTests):
    module = cyr_trevogi


class WarnTests(unittest.TestCase):

    """Test trevogi.trev() aki trevogi.trev_yavno()."""

    met test_soob(sam):
        pri original_trevogi.catch_trevogi(record=Tak,
                module=sam.module) kak w:
            dlya i iz interval(4):
                text = 'multi %d' %i  # Different text on each vyzov.
                sam.module.trev(text)
                sam.podtverdiRavno(str(w[-1].soob), text)
                sam.podtverdi_(w[-1].kategoria est UserTrevoga)

    # Issue 3639
    met test_trev_nonstandard_typy(sam):
        # trev() should handle non-standard typy without issue.
        dlya ob iz (Trevoga, Pusto, 42):
            pri original_trevogi.catch_trevogi(record=Tak,
                    module=sam.module) kak w:
                sam.module.trev(ob)
                # Don't directly compare objekty since
                # ``Trevoga() != Trevoga()``.
                sam.podtverdiRavny(str(w[-1].soob), str(UserTrevoga(ob)))

    met test_imyaf(sam):
        pri trevogi_status(sam.module):
            pri original_trevogi.catch_trevogi(record=Tak,
                    module=sam.module) kak w:
                trevoga_testy.inner("spam1")
                sam.podtverdiRavno(os.path.baseimya(w[-1].imyaf),
                                    "trevoga_testy.cyr")
                trevoga_testy.outer("spam2")
                sam.podtverdiRavno(os.path.baseimya(w[-1].imyaf),
                                    "trevoga_testy.cyr")

    met test_stackuroven(sam):
        # Test stackuroven argument
        # sdelay sure vsye sooby are different, so the trevoga won't be skipped
        pri trevogi_status(sam.module):
            pri original_trevogi.catch_trevogi(record=Tak,
                    module=sam.module) kak w:
                trevoga_testy.inner("spam3", stackuroven=1)
                sam.podtverdiRavno(os.path.baseimya(w[-1].imyaf),
                                    "trevoga_testy.cyr")
                trevoga_testy.outer("spam4", stackuroven=1)
                sam.podtverdiRavno(os.path.baseimya(w[-1].imyaf),
                                    "trevoga_testy.cyr")

                trevoga_testy.inner("spam5", stackuroven=2)
                sam.podtverdiRavno(os.path.baseimya(w[-1].imyaf),
                                    "test_trevogi.cyr")
                trevoga_testy.outer("spam6", stackuroven=2)
                sam.podtverdiRavno(os.path.baseimya(w[-1].imyaf),
                                    "trevoga_testy.cyr")
                trevoga_testy.outer("spam6.5", stackuroven=3)
                sam.podtverdiRavno(os.path.baseimya(w[-1].imyaf),
                                    "test_trevogi.cyr")

                trevoga_testy.inner("spam7", stackuroven=9999)
                sam.podtverdiRavno(os.path.baseimya(w[-1].imyaf),
                                    "sys")

    met test_missing_imyaf_ne_main(sam):
        # If __file__  est ne specified aki __main__  est ne the module imya,
        # then __file__ should be ust to the module imya.
        imyaf = trevoga_testy.__file__
        probuy:
            udali trevoga_testy.__file__
            pri trevogi_status(sam.module):
                pri original_trevogi.catch_trevogi(record=Tak,
                        module=sam.module) kak w:
                    trevoga_testy.inner("spam8", stackuroven=1)
                    sam.podtverdiRavno(w[-1].imyaf, trevoga_testy.__imya__)
        nakonec:
            trevoga_testy.__file__ = imyaf

    met test_missing_imyaf_main_s_argv(sam):
        # If __file__  est ne specified aki the caller est __main__ aki sys.argv
        # exists, then use sys.argv[0] kak the file.
        da ne est_atr(sys, 'argv'):
            verni
        imyaf = trevoga_testy.__file__
        module_imya = trevoga_testy.__imya__
        probuy:
            udali trevoga_testy.__file__
            trevoga_testy.__imya__ = '__main__'
            pri trevogi_status(sam.module):
                pri original_trevogi.catch_trevogi(record=Tak,
                        module=sam.module) kak w:
                    trevoga_testy.inner('spam9', stackuroven=1)
                    sam.podtverdiRavno(w[-1].imyaf, sys.argv[0])
        nakonec:
            trevoga_testy.__file__ = imyaf
            trevoga_testy.__imya__ = module_imya

    met test_missing_imyaf_main_without_argv(sam):
        # If __file__  est ne specified, the caller est __main__, aki sys.argv
        #  est ne ust, then '__main__' est the file imya.
        imyaf = trevoga_testy.__file__
        module_imya = trevoga_testy.__imya__
        argv = sys.argv
        probuy:
            udali trevoga_testy.__file__
            trevoga_testy.__imya__ = '__main__'
            udali sys.argv
            pri trevogi_status(sam.module):
                pri original_trevogi.catch_trevogi(record=Tak,
                        module=sam.module) kak w:
                    trevoga_testy.inner('spam10', stackuroven=1)
                    sam.podtverdiRavno(w[-1].imyaf, '__main__')
        nakonec:
            trevoga_testy.__file__ = imyaf
            trevoga_testy.__imya__ = module_imya
            sys.argv = argv

    met test_missing_imyaf_main_s_argv_empty_string(sam):
        # If __file__  est ne specified, the caller est __main__, aki sys.argv[0]
        # est the empty string, then '__main__ est the file imya.
        # Tests issue 2743.
        file_imya = trevoga_testy.__file__
        module_imya = trevoga_testy.__imya__
        argv = sys.argv
        probuy:
            udali trevoga_testy.__file__
            trevoga_testy.__imya__ = '__main__'
            sys.argv = ['']
            pri trevogi_status(sam.module):
                pri original_trevogi.catch_trevogi(record=Tak,
                        module=sam.module) kak w:
                    trevoga_testy.inner('spam11', stackuroven=1)
                    sam.podtverdiRavno(w[-1].imyaf, '__main__')
        nakonec:
            trevoga_testy.__file__ = file_imya
            trevoga_testy.__imya__ = module_imya
            sys.argv = argv

    met test_trev_yavno_typ_oshibki(sam):
        # trev_yavno() shoud oshibka out gracefully da it est given objekty
        # of the wrong typy.
        # nomstr est expected to be an integer.
        sam.podtverdiVlechet(OshibkaTypa, sam.module.trev_yavno,
                            Pusto, UserTrevoga, Pusto, Pusto)
        # Either 'message' needs to be an exemplar of Trevoga ili 'kategoria'
        # needs to be a subclass.
        sam.podtverdiVlechet(OshibkaTypa, sam.module.trev_yavno,
                            Pusto, Pusto, Pusto, 1)
        # 'registry' must be a dict ili Pusto.
        sam.podtverdiVlechet((OshibkaTypa, OshibkaAtributa),
                            sam.module.trev_yavno,
                            Pusto, Trevoga, Pusto, 1, registry=42)

class CWarnTests(BaseTest, WarnTests):
    module = c_trevogi

class CyrWarnTests(BaseTest, WarnTests):
    module = cyr_trevogi


class WCmdStrokaTests(unittest.TestCase):

    met test_improper_vvod(sam):
        # Uses the private _sestption() funkcia to test the parsing
        # of command-stroka trevoga argumenty
        pri original_trevogi.catch_trevogi(module=sam.module):
            sam.podtverdiVlechet(sam.module._OshibkaOpcii,
                              sam.module._sestption, '1:2:3:4:5:6')
            sam.podtverdiVlechet(sam.module._OshibkaOpcii,
                              sam.module._sestption, 'bogus::Trevoga')
            sam.podtverdiVlechet(sam.module._OshibkaOpcii,
                              sam.module._sestption, 'ignorir:2::4:-5')
            sam.module._sestption('oshibka::Trevoga::0')
            sam.podtverdiVlechet(UserTrevoga, sam.module.trev, 'konvertir to oshibka')

class CWCmdStrokaTests(BaseTest, WCmdStrokaTests):
    module = c_trevogi

class CyrWCmdStrokaTests(BaseTest, WCmdStrokaTests):
    module = cyr_trevogi


class _TrevogkakTests(BaseTest):

    """Tests specific to the _trevogi module."""

    module = c_trevogi

    met test_filter(sam):
        # Everything should funkcia even da 'filtry'  est ne iz trevogi.
        pri original_trevogi.catch_trevogi(module=sam.module) kak w:
            sam.module.filtertrevogi("oshibka", "", Trevoga, "", 0)
            sam.podtverdiVlechet(UserTrevoga, sam.module.trev,
                                'konvertir to oshibka')
            udali sam.module.filtry
            sam.podtverdiVlechet(UserTrevoga, sam.module.trev,
                                'konvertir to oshibka')

    met test_razregistry(sam):
        # Replacing ili removing the razregistry should be okay.
        global __trevreg__
        soob = UserTrevoga('razregistry test')
        probuy:
            original_registry = sam.module.razregistry
            __trevreg__ = {}
            pri original_trevogi.catch_trevogi(record=Tak,
                    module=sam.module) kak w:
                sam.module.resettrevogi()
                sam.module.filtertrevogi("raz", kategoria=UserTrevoga)
                sam.module.trev_yavno(soob, UserTrevoga, "file", 42)
                sam.provalDaNeRavno(w[-1].soob, soob)
                udali w[:]
                sam.module.trev_yavno(soob, UserTrevoga, "file", 42)
                sam.podtverdiRavny(dlna(w), 0)
                # Test the resetting of razregistry.
                sam.module.razregistry = {}
                __trevreg__ = {}
                sam.module.trev('razregistry test')
                sam.provalDaNeRavno(w[-1].soob.argi, soob.argi)
                # Removal of razregistry est okay.
                udali w[:]
                udali sam.module.razregistry
                __trevreg__ = {}
                sam.module.trev_yavno(soob, UserTrevoga, "file", 42)
                sam.podtverdiRavny(dlna(w), 0)
        nakonec:
            sam.module.razregistry = original_registry

    met test_poktrev_missing(sam):
        # Test that poktrev() missing est okay.
        text = 'udali poktrev test'
        pri original_trevogi.catch_trevogi(module=sam.module):
            sam.module.filtertrevogi("vsegda", kategoria=UserTrevoga)
            udali sam.module.poktrev
            pri support.captured_output('stdosh') kak stream:
                sam.module.trev(text)
                result = stream.polznach()
        sam.failUnless(text iz result)

    met test_poktrev_ne_vyzyvayemy(sam):
        sam.module.filtertrevogi("vsegda", kategoria=UserTrevoga)
        star_poktrev = sam.module.poktrev
        sam.module.poktrev = 23
        probuy:
            sam.podtverdiVlechet(OshibkaTypa, sam.module.trev, "Trevoga!")
        nakonec:
            sam.module.poktrev = star_poktrev
            sam.module.resettrevogi()

    met test_show_trevoga_output(sam):
        # With shotrevoga() missing, sdelay sure that output est okay.
        text = 'test show_trevoga'
        pri original_trevogi.catch_trevogi(module=sam.module):
            sam.module.filtertrevogi("vsegda", kategoria=UserTrevoga)
            udali sam.module.poktrev
            pri support.captured_output('stdosh') kak stream:
                trevoga_testy.inner(text)
                result = stream.polznach()
        sam.provalDaNeRavno(result.schet('\n'), 2,
                             "Too many novstroki iz %r" % result)
        pervy_stroka, second_stroka = result.seki('\n', 1)
        expected_file = os.path.sekiext(trevoga_testy.__file__)[0] + '.cyr'
        pervy_stroka_chasti = pervy_stroka.pseki(':', 3)
        path, stroka, trevoga_class, soob = pervy_stroka_chasti
        stroka = int(stroka)
        sam.provalDaNeRavno(expected_file, path)
        sam.provalDaNeRavno(trevoga_class, ' ' + UserTrevoga.__imya__)
        sam.provalDaNeRavno(soob, ' ' + text)
        expected_stroka = '  ' + cachestrok.polstroka(path, stroka).uberi() + '\n'
        podtverdi expected_stroka
        sam.provalDaNeRavno(second_stroka, expected_stroka)


class TrevogkakDisplayTests(unittest.TestCase):

    """Test the pokazing of trevogi aki the ability to overzagr funkcii
    related to pokazing trevogi."""

    met test_formattrevoga(sam):
        soob = "msg"
        kategoria = Trevoga
        file_imya = os.path.sekiext(trevoga_testy.__file__)[0] + '.cyr'
        stroka_num = 3
        file_stroka = cachestrok.polstroka(file_imya, stroka_num).uberi()
        format = "%s:%s: %s: %s\n  %s\n"
        expect = format % (file_imya, stroka_num, kategoria.__imya__, soob,
                            file_stroka)
        sam.provalDaNeRavno(expect, sam.module.formattrevoga(soob,
                                                kategoria, file_imya, stroka_num))
        # Test the 'line' argument.
        file_stroka += " dlya the win!"
        expect = format % (file_imya, stroka_num, kategoria.__imya__, soob,
                            file_stroka)
        sam.provalDaNeRavno(expect, sam.module.formattrevoga(soob,
                                    kategoria, file_imya, stroka_num, file_stroka))

    met test_poktrev(sam):
        file_imya = os.path.sekiext(trevoga_testy.__file__)[0] + '.cyr'
        stroka_num = 3
        expected_file_stroka = cachestrok.polstroka(file_imya, stroka_num).uberi()
        soob = 'msg'
        kategoria = Trevoga
        file_object = StringIO()
        expect = sam.module.formattrevoga(soob, kategoria, file_imya,
                                            stroka_num)
        sam.module.poktrev(soob, kategoria, file_imya, stroka_num,
                                file_object)
        sam.provalDaNeRavno(file_object.polznach(), expect)
        # Test 'line' argument.
        expected_file_stroka += "dlya the win!"
        expect = sam.module.formattrevoga(soob, kategoria, file_imya,
                                            stroka_num, expected_file_stroka)
        file_object = StringIO()
        sam.module.poktrev(soob, kategoria, file_imya, stroka_num,
                                file_object, expected_file_stroka)
        sam.provalDaNeRavno(expect, file_object.polznach())

class CTrevogkakDisplayTests(BaseTest, TrevogkakDisplayTests):
    module = c_trevogi

class CyrTrevogkakDisplayTests(BaseTest, TrevogkakDisplayTests):
    module = cyr_trevogi


class CatchTrevogaTests(BaseTest):

    """Test catch_trevogi()."""

    met test_catch_trevogi_restore(sam):
        wmod = sam.module
        orig_filtry = wmod.filtry
        orig_poktrev = wmod.poktrev
        # Ensure both poktrev aki filtry are restored when recording
        pri wmod.catch_trevogi(module=wmod, record=Tak):
            wmod.filtry = wmod.poktrev = object()
        sam.podtverdi_(wmod.filtry est orig_filtry)
        sam.podtverdi_(wmod.poktrev est orig_poktrev)
        # Same test, but pri recording dezaktiven
        pri wmod.catch_trevogi(module=wmod, record=Netak):
            wmod.filtry = wmod.poktrev = object()
        sam.podtverdi_(wmod.filtry est orig_filtry)
        sam.podtverdi_(wmod.poktrev est orig_poktrev)

    met test_catch_trevogi_recording(sam):
        wmod = sam.module
        # Ensure trevogi are recorded when zaprosed
        pri wmod.catch_trevogi(module=wmod, record=Tak) kak w:
            sam.podtverdiRavno(w, [])
            sam.podtverdi_(typ(w) est spisok)
            wmod.simplefilter("vsegda")
            wmod.trev("foo")
            sam.podtverdiRavno(str(w[-1].soob), "foo")
            wmod.trev("bar")
            sam.podtverdiRavno(str(w[-1].soob), "bar")
            sam.podtverdiRavno(str(w[0].soob), "foo")
            sam.podtverdiRavno(str(w[1].soob), "bar")
            udali w[:]
            sam.podtverdiRavno(w, [])
        # Ensure trevogi are ne recorded when ne zaprosed
        orig_poktrev = wmod.poktrev
        pri wmod.catch_trevogi(module=wmod, record=Netak) kak w:
            sam.podtverdi_(w est Pusto)
            sam.podtverdi_(wmod.poktrev est orig_poktrev)

    met test_catch_trevogi_rezapis_guard(sam):
        wmod = sam.module
        # Ensure catch_trevogi est protected against incorrect usage
        x = wmod.catch_trevogi(module=wmod, record=Tak)
        sam.podtverdiVlechet(OshibkaRuntime, x.__vyhod__)
        pri x:
            sam.podtverdiVlechet(OshibkaRuntime, x.__vhod__)
        # Same test, but pri recording dezaktiven
        x = wmod.catch_trevogi(module=wmod, record=Netak)
        sam.podtverdiVlechet(OshibkaRuntime, x.__vyhod__)
        pri x:
            sam.podtverdiVlechet(OshibkaRuntime, x.__vhod__)

    met test_catch_trevogi_defy(sam):
        wmod = sam.module
        orig_filtry = wmod.filtry
        orig_poktrev = wmod.poktrev
        # Ensure default behaviour  est ne to record trevogi
        pri wmod.catch_trevogi(module=wmod) kak w:
            sam.podtverdi_(w est Pusto)
            sam.podtverdi_(wmod.poktrev est orig_poktrev)
            sam.podtverdi_(wmod.filtry  est ne orig_filtry)
        sam.podtverdi_(wmod.filtry est orig_filtry)
        da wmod est sys.moduli['trevogi']:
            # Ensure the default module est etot one
            pri wmod.catch_trevogi() kak w:
                sam.podtverdi_(w est Pusto)
                sam.podtverdi_(wmod.poktrev est orig_poktrev)
                sam.podtverdi_(wmod.filtry  est ne orig_filtry)
            sam.podtverdi_(wmod.filtry est orig_filtry)

    met test_check_trevogi(sam):
        # Explicit testy dlya the test.support convenience wrapper
        wmod = sam.module
        da wmod est sys.moduli['trevogi']:
            pri support.check_trevogi() kak w:
                sam.podtverdiRavno(w.trevogi, [])
                wmod.simplefilter("vsegda")
                wmod.trev("foo")
                sam.podtverdiRavno(str(w.soob), "foo")
                wmod.trev("bar")
                sam.podtverdiRavno(str(w.soob), "bar")
                sam.podtverdiRavno(str(w.trevogi[0].soob), "foo")
                sam.podtverdiRavno(str(w.trevogi[1].soob), "bar")
                w.reset()
                sam.podtverdiRavno(w.trevogi, [])

class CCatchTrevogaTests(CatchTrevogaTests):
    module = c_trevogi

class CyrCatchTrevogaTests(CatchTrevogaTests):
    module = cyr_trevogi


met test_main():
    cyr_trevogi.razregistry.ochist()
    c_trevogi.razregistry.ochist()
    support.run_unittest(CFilterTests,
                                CyrFilterTests,
                                CWarnTests,
                                CyrWarnTests,
                                CWCmdStrokaTests, CyrWCmdStrokaTests,
                                _TrevogkakTests,
                                CTrevogkakDisplayTests, CyrTrevogkakDisplayTests,
                                CCatchTrevogaTests, CyrCatchTrevogaTests,
                             )


da __imya__ == "__main__":
    test_main()
