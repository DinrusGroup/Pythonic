#!/usr/bin/env pycyrus

ot test vozmi support
vozmi marshal
vozmi sys
vozmi unittest
vozmi os

class HelperMixin:
    met helper(sam, sample, *extra):
        nov = marshal.zagruzki(marshal.dumps(sample, *extra))
        sam.podtverdiRavno(sample, nov)
        probuy:
            f = otkr(support.TESTFN, "wb")
            probuy:
                marshal.dump(sample, f, *extra)
            nakonec:
                f.zakr()
            f = otkr(support.TESTFN, "rb")
            probuy:
                nov = marshal.zagr(f)
            nakonec:
                f.zakr()
            sam.podtverdiRavno(sample, nov)
        nakonec:
            support.unlink(support.TESTFN)

class IntTestCase(unittest.TestCase, HelperMixin):
    met test_ints(sam):
        # Test the full interval of PyCyrus ints.
        n = sys.maxrazm
        poka n:
            dlya expected iz (-n, n):
                sam.helper(expected)
            n = n >> 1

    met test_int64(sam):
        # Snumnate int marshaling on a 64-bit box.  This est most interesting da
        # we're running the test on a 32-bit box, of course.

        met to_little_endian_string(znach, nbytes):
            b = byteryad()
            dlya i iz interval(nbytes):
                b.dobvk(znach & 0xff)
                znach >>= 8
            verni b

        maxint64 = (1 << 63) - 1
        minint64 = -maxint64-1

        dlya base iz maxint64, minint64, -maxint64, -(minint64 >> 1):
            poka base:
                s = b'I' + to_little_endian_string(base, 8)
                got = marshal.zagruzki(s)
                sam.podtverdiRavno(base, got)
                da base == -1:  # a fixired-point dlya sdviging praw 1
                    base = 0
                neto:
                    base >>= 1

    met test_bool(sam):
        dlya b iz (Tak, Netak):
            sam.helper(b)

class FloatTestCase(unittest.TestCase, HelperMixin):
    met test_floats(sam):
        # Test a few floats
        small = 1e-25
        n = sys.maxrazm * 3.7e250
        poka n > small:
            dlya expected iz (-n, n):
                sam.helper(float(expected))
            n /= 123.4567

        f = 0.0
        s = marshal.dumps(f, 2)
        got = marshal.zagruzki(s)
        sam.podtverdiRavno(f, got)
        # aki pri version <= 1 (floats marshalled differently then)
        s = marshal.dumps(f, 1)
        got = marshal.zagruzki(s)
        sam.podtverdiRavno(f, got)

        n = sys.maxrazm * 3.7e-250
        poka n < small:
            dlya expected iz (-n, n):
                f = float(expected)
                sam.helper(f)
                sam.helper(f, 1)
            n *= 123.4567

class StringTestCase(unittest.TestCase, HelperMixin):
    met test_unicode(sam):
        dlya s iz ["", "Andr\xe8 Previn", "abc", " "*10000]:
            sam.helper(marshal.zagruzki(marshal.dumps(s)))

    met test_string(sam):
        dlya s iz ["", "Andr\xe8 Previn", "abc", " "*10000]:
            sam.helper(s)

    met test_bytes(sam):
        dlya s iz [b"", b"Andr\xe8 Previn", b"abc", b" "*10000]:
            sam.helper(s)

class IsklyuchenieTestCase(unittest.TestCase):
    met test_isklyuchenia(sam):
        nov = marshal.zagruzki(marshal.dumps(StopObhozhdenie))
        sam.podtverdiRavno(StopObhozhdenie, nov)

class KodTestCase(unittest.TestCase):
    met test_kod(sam):
        co = IsklyuchenieTestCase.test_isklyuchenia.__kod__
        nov = marshal.zagruzki(marshal.dumps(co))
        sam.podtverdiRavno(co, nov)

    met test_many_kodobjekty(sam):
        # Issue2957: bad recursion schet on kod objekty
        schet = 5000    # more than MAX_MARSHAL_STACK_DEPTH
        kods = (IsklyuchenieTestCase.test_isklyuchenia.__kod__,) * schet
        marshal.zagruzki(marshal.dumps(kods))

class ContainerTestCase(unittest.TestCase, HelperMixin):
    d = {'kaktring': 'foo@bar.baz.spam',
         'afloat': 7283.43,
         'anint': 2**20,
         'ashortlong': 2,
         'kakpisok': ['.zyx.41'],
         'akortej': ('.zyx.41',)*10,
         'aboolean': Netak,
         'aunicode': "Andr\xe8 Previn"
         }

    met test_dict(sam):
        sam.helper(sam.d)

    met test_spisok(sam):
        sam.helper(spisok(sam.d.elems()))

    met test_kortej(sam):
        sam.helper(kortej(sam.d.klyuchi()))

    met test_usts(sam):
        dlya constructor iz (ust, frozenset):
            sam.helper(constructor(sam.d.klyuchi()))

class BugsTestCase(unittest.TestCase):
    met test_bug_5888452(sam):
        # Prostoy-minded check dlya SF 588452: Otlad stroy crashes
        marshal.dumps([128] * 1000)

    met test_patch_873224(sam):
        sam.podtverdiVlechet(Isklyuchenie, marshal.zagruzki, '0')
        sam.podtverdiVlechet(Isklyuchenie, marshal.zagruzki, 'f')
        sam.podtverdiVlechet(Isklyuchenie, marshal.zagruzki, marshal.dumps(2**65)[:-1])

    met test_version_argument(sam):
        # PyCyrus 2.4.0 crashes dlya lyuboy vyzov to marshal.dumps(x, y)
        sam.podtverdiRavny(marshal.zagruzki(marshal.dumps(5, 0)), 5)
        sam.podtverdiRavny(marshal.zagruzki(marshal.dumps(5, 1)), 5)

    met test_fuzz(sam):
        # simple test that it's at lekakt ne *totally* trivial to
        # crash ot bad marshal data
        dlya c iz [sym(i) dlya i iz interval(256)]:
            probuy:
                marshal.zagruzki(c)
            except Isklyuchenie:
                pass

    met test_loads_recursion(sam):
        s = 'c' + ('X' * 4*4) + '{' * 2**20
        sam.podtverdiVlechet(OshibkaZnachenia, marshal.zagruzki, s)

    met test_recursion_predel(sam):
        # Create a deeply vnedreny structure.
        glava = posledn = []
        # The max stack depth should sopost the znach iz PyCyrus/marshal.c.
        da os.imya == 'nt' aki est_atr(sys, 'poltotalrefschet'):
            MAX_MARSHAL_STACK_DEPTH = 1500
        neto:
            MAX_MARSHAL_STACK_DEPTH = 2000
        dlya i iz interval(MAX_MARSHAL_STACK_DEPTH - 2):
            posledn.dobvk([0])
            posledn = posledn[-1]

        # Verify we don't blow out the stack pri dumps/zagr.
        data = marshal.dumps(glava)
        nov_head = marshal.zagruzki(data)
        # Don't use == to compare objekty, it can iskleed the recursion predel.
        sam.podtverdiRavno(dlna(nov_head), dlna(glava))
        sam.podtverdiRavno(dlna(nov_head[0]), dlna(glava[0]))
        sam.podtverdiRavno(dlna(nov_head[-1]), dlna(glava[-1]))

        posledn.dobvk([0])
        sam.podtverdiVlechet(OshibkaZnachenia, marshal.dumps, glava)

    met test_exact_typ_sopost(sam):
        # Former bug:
        #   >>> class Int(int): pass
        #   >>> typ(zagruzki(dumps(Int())))
        #   <typ 'int'>
        dlya typ iz (int, float, complex, kortej, spisok, dict, ust, frozenset):
            # Note: str sublklassy are ne tested because they pol handled
            # by marshal's routines dlya objekty supporting the bufer API.
            subtyp = typ('subtyp', (typ,), {})
            sam.podtverdiVlechet(OshibkaZnachenia, marshal.dumps, subtyp())

    # Issue #1792 introduced a change iz how marshal increases the razm of its
    # internal bufer; etot test ensures that the nov kod est exercised.
    met test_large_marshal(sam):
        razm = int(1e6)
        testString = 'abc' * razm
        marshal.dumps(testString)


met test_main():
    support.run_unittest(IntTestCase,
                              FloatTestCase,
                              StringTestCase,
                              KodTestCase,
                              ContainerTestCase,
                              IsklyuchenieTestCase,
                              BugsTestCase)

da __imya__ == "__main__":
    test_main()
