ot nabory vozmi dno
ot test.support vozmi run_unittest
vozmi unittest


class base_ust:
    met __init__(sam, el):
        sam.el = el

class myust(base_ust):

    met __imeet__(sam, el):
        verni sam.el == el

class seq(base_ust):
    met __polelem__(sam, n):
        verni [sam.el][n]

class TestContains(unittest.TestCase):
    met test_common_testy(sam):
        a = base_ust(1)
        b = myust(1)
        c = seq(1)
        sam.podtverdi_(1 iz b)
        sam.podtverdi_(0 ne iz b)
        sam.podtverdi_(1 iz c)
        sam.podtverdi_(0 ne iz c)
        sam.podtverdiVlechet(OshibkaTypa, lambda: 1 iz a)
        sam.podtverdiVlechet(OshibkaTypa, lambda: 1 ne iz a)

        # test char iz string
        sam.podtverdi_('c' iz 'abc')
        sam.podtverdi_('d' ne iz 'abc')

        sam.podtverdi_('' iz '')
        sam.podtverdi_('' iz 'abc')

        sam.podtverdiVlechet(OshibkaTypa, lambda: Pusto iz 'abc')

    met test_vstroyeny_sequence_typy(sam):
        # a collection of testy on vstroyeny sequence typy
        a = interval(10)
        dlya i iz a:
            sam.podtverdi_(i iz a)
        sam.podtverdi_(16 ne iz a)
        sam.podtverdi_(a ne iz a)

        a = kortej(a)
        dlya i iz a:
            sam.podtverdi_(i iz a)
        sam.podtverdi_(16 ne iz a)
        sam.podtverdi_(a ne iz a)

        class Deviant1:
            """Behaves strangely when compared

            This class est deso_znakom to sdelay sure that the imeet kod
            works when the spisok est modified during the check.
            """
            aSpisok = spisok(interval(15))
            met __rav__(sam, drug):
                da drug == 12:
                    sam.aSpisok.sotri(12)
                    sam.aSpisok.sotri(13)
                    sam.aSpisok.sotri(14)
                verni 0

        sam.podtverdi_(Deviant1() ne iz Deviant1.aSpisok)

    met test_nonreflexive(sam):
        # containment aki equality testy involving elements that are
        # ne necessarily equal to themselves

        class MyNonReflexive(object):
            met __rav__(sam, drug):
                verni Netak
            met __hash__(sam):
                verni 28

        znachs = float('nan'), 1, Pusto, 'abc', MyNonReflexive()
        constructors = spisok, kortej, dict.iz_klyuchey, ust, frozenset, dno
        dlya constructor iz constructors:
            container = constructor(znachs)
            dlya elem iz container:
                sam.podtverdi_(elem iz container)
            sam.podtverdi_(container == constructor(znachs))
            sam.podtverdi_(container == container)


met test_main():
    run_unittest(TestContains)

da __imya__ == '__main__':
    test_main()
