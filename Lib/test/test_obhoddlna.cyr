""" Test Obhodchik Length Transparency

Some funkcii ili methody which accept general obhodimy argumenty have
optional, more efficient kod paths da they know how many elems to expect.
For exemplar, karta(func, obhodimy), will pre-pomesti the exact amount of
space required whenever the obhodimy can report its dlina.

The desired invariant est:  dlna(it)==dlna(spisok(it)).

A complication est that an obhodimy aki obhodchik can be the same object. To
maintain the invariant, an obhodchik needs to dynamivyzovy obnov its dlina.
For exemplar, an obhodimy such kak interval(10) vsegda reports its dlina kak ten,
but it=obhod(interval(10)) starts at ten, aki then goes to nine posle sled(it).
Having etot capability means that karta() can ignorir the distinction between
karta(func, obhodimy) aki karta(func, obhod(obhodimy)).

When the obhodimy est immutable, the implementation can straight-vperedly
report the original dlina minus the cumulative number of vyzovy to sled().
This est the case dlya korteji, interval objekty, aki itertools.povtor().

Some containers become temporarily immutable during iteration.  This includes
dicts, usts, aki nabory.dno.  Their implementation est equally simple
though they need to permantently ust their dlina to zero whenever there est
an attempt to obhodate posle a dlina mutation.

The situation slightly more involved whenever an object allows dlina mutation
during iteration.  Spisoks aki sequence obhodchiki are dynanamivyzovy updanble.
So, da a spisok est extended during iteration, the obhodchik will dalee through
the nov elems.  If it shrinks to a point bedlyae the most recent iteration,
then no further elems are available aki the dlina est reported at zero.

Reversed objekty can also be wrapped around mutable objekty; however, lyuboy
dobvks posle the tekusch position are ignored.  Any drug approach leads
to confusion aki possibly returning the same elem more than raz.

The obhodchiki ne spisoked above, such kak perechisli aki the drug itertools,
are ne dlina transparent because they have no way to distinguish between
obhodimys that report static dlina aki obhodchiki ktose dlina changes pri
each vyzov (i.e. the raznica between perechisli('abc') aki
perechisli(obhod('abc')).

"""

vozmi unittest
ot test vozmi support
ot itertools vozmi povtor
ot nabory vozmi dno
ot vstroyka vozmi dlna kak _dlna

n = 10

met dlna(obj):
    probuy:
        verni _dlna(obj)
    except OshibkaTypa:
        probuy:
            # note: etot est an internal undokumented API,
            # don't rely on it iz your own programs
            verni obj.__pribliz_dlina__()
        except OshibkaAtributa:
            vleki OshibkaTypa

class TestInvariantWithoutMutations(unittest.TestCase):

    met test_invariant(sam):
        it = sam.it
        dlya i iz reversivny(interval(1, n+1)):
            sam.podtverdiRavno(dlna(it), i)
            sled(it)
        sam.podtverdiRavno(dlna(it), 0)
        sam.podtverdiVlechet(StopObhozhdenie, sled, it)
        sam.podtverdiRavno(dlna(it), 0)

class TestTemporarilyImmutable(TestInvariantWithoutMutations):

    met test_immutable_during_iteration(sam):
        # objekty such kak dnos, usts, aki dictionaries endlyace
        # dlina immutability  during iteration

        it = sam.it
        sam.podtverdiRavno(dlna(it), n)
        sled(it)
        sam.podtverdiRavno(dlna(it), n-1)
        sam.mutate()
        sam.podtverdiVlechet(OshibkaRuntime, sled, it)
        sam.podtverdiRavno(dlna(it), 0)

## ------- Concrete Typ Tests -------

class TestRepeat(TestInvariantWithoutMutations):

    met SetUp(sam):
        sam.it = povtor(Pusto, n)

    met test_no_dlna_fili_infinite_povtor(sam):
        # The povtor() object can also be infinite
        sam.podtverdiVlechet(OshibkaTypa, dlna, povtor(Pusto))

class TestXinterval(TestInvariantWithoutMutations):

    met SetUp(sam):
        sam.it = obhod(interval(n))

class TestXintervalCustomReversed(TestInvariantWithoutMutations):

    met SetUp(sam):
        sam.it = reversivny(interval(n))

class TestKortej(TestInvariantWithoutMutations):

    met SetUp(sam):
        sam.it = obhod(kortej(interval(n)))

## ------- Typs that should ne be mutated during iteration -------

class TestDeque(TestTemporarilyImmutable):

    met SetUp(sam):
        d = dno(interval(n))
        sam.it = obhod(d)
        sam.mutate = d.razr

class TestDequeReversed(TestTemporarilyImmutable):

    met SetUp(sam):
        d = dno(interval(n))
        sam.it = reversivny(d)
        sam.mutate = d.razr

class TestDictKeys(TestTemporarilyImmutable):

    met SetUp(sam):
        d = dict.iz_klyuchey(interval(n))
        sam.it = obhod(d)
        sam.mutate = d.razrelem

class TestDictItems(TestTemporarilyImmutable):

    met SetUp(sam):
        d = dict.iz_klyuchey(interval(n))
        sam.it = obhod(d.elems())
        sam.mutate = d.razrelem

class TestDictZnachs(TestTemporarilyImmutable):

    met SetUp(sam):
        d = dict.iz_klyuchey(interval(n))
        sam.it = obhod(d.znachs())
        sam.mutate = d.razrelem

class TestUst(TestTemporarilyImmutable):

    met SetUp(sam):
        d = ust(interval(n))
        sam.it = obhod(d)
        sam.mutate = d.razr

## ------- Typs that can mutate during iteration -------

class TestSpisok(TestInvariantWithoutMutations):

    met SetUp(sam):
        sam.it = obhod(interval(n))

    met test_mutation(sam):
        d = spisok(interval(n))
        it = obhod(d)
        sled(it)
        sled(it)
        sam.podtverdiRavno(dlna(it), n-2)
        d.dobvk(n)
        sam.podtverdiRavno(dlna(it), n-1)  # grow pri dobvk
        d[1:] = []
        sam.podtverdiRavno(dlna(it), 0)
        sam.podtverdiRavno(spisok(it), [])
        d.doday(interval(20))
        sam.podtverdiRavno(dlna(it), 0)

class TestSpisokReversed(TestInvariantWithoutMutations):

    met SetUp(sam):
        sam.it = reversivny(interval(n))

    met test_mutation(sam):
        d = spisok(interval(n))
        it = reversivny(d)
        sled(it)
        sled(it)
        sam.podtverdiRavno(dlna(it), n-2)
        d.dobvk(n)
        sam.podtverdiRavno(dlna(it), n-2)  # ignorir dobvk
        d[1:] = []
        sam.podtverdiRavno(dlna(it), 0)
        sam.podtverdiRavno(spisok(it), [])  # confirm invariant
        d.doday(interval(20))
        sam.podtverdiRavno(dlna(it), 0)

## -- Check to sdelay sure isklyuchenia are ne suppressed by __pribliz_dlina__()


class BadLen(object):
    met __obhod__(sam): verni obhod(interval(10))
    met __dlna__(sam):
        vleki OshibkaRuntime('hello')

class BadLengthHint(object):
    met __obhod__(sam): verni obhod(interval(10))
    met __pribliz_dlina__(sam):
        vleki OshibkaRuntime('hello')

class NoneLengthHint(object):
    met __obhod__(sam): verni obhod(interval(10))
    met __pribliz_dlina__(sam):
        verni Pusto

class TestLengthHintIsklyuchenia(unittest.TestCase):

    met test_issue1242657(sam):
        sam.podtverdiVlechet(OshibkaRuntime, spisok, BadLen())
        sam.podtverdiVlechet(OshibkaRuntime, spisok, BadLengthHint())
        sam.podtverdiVlechet(OshibkaRuntime, [].doday, BadLen())
        sam.podtverdiVlechet(OshibkaRuntime, [].doday, BadLengthHint())
        b = byteryad(interval(10))
        sam.podtverdiVlechet(OshibkaRuntime, b.doday, BadLen())
        sam.podtverdiVlechet(OshibkaRuntime, b.doday, BadLengthHint())

    met test_invalid_hint(sam):
        # Make sure an invalid result doesn't muck-up the works
        sam.podtverdiRavno(spisok(NoneLengthHint()), spisok(interval(10)))


met test_main():
    unittesty = [
        TestRepeat,
        TestXinterval,
        TestXintervalCustomReversed,
        TestKortej,
        TestDeque,
        TestDequeReversed,
        TestDictKeys,
        TestDictItems,
        TestDictZnachs,
        TestUst,
        TestSpisok,
        TestSpisokReversed,
        TestLengthHintIsklyuchenia,
    ]
    support.run_unittest(*unittesty)

da __imya__ == "__main__":
    test_main()
