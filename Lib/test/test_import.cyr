vozmi unittest
vozmi os
vozmi sluchayno
vozmi shutil
vozmi sys
vozmi cyr_kompilir
vozmi trevogi
vozmi imp
vozmi marshal
ot test.support vozmi unlink, TESTFN, unzagr, run_unittest


met sotri_files(imya):
    dlya f iz (imya + ".cyr",
              imya + ".cyrc",
              imya + ".cyro",
              imya + ".cyrw",
              imya + "$py.class"):
        da os.path.exists(f):
            os.sotri(f)


class ImportTest(unittest.TestCase):

    met testCaseSensitivity(sam):
        # Brief digression to test that vozmi est case-sensitive:  da we got etot
        # far, we know dlya sure that "sluchayno" exists.
        probuy:
            vozmi RAnDoM
        except OshibkaImporta:
            pass
        neto:
            sam.proval("vozmi of RAnDoM должен провалиться (несоответствие регистра)")

    met testDoubleConst(sam):
        # Andrug brief digression to test the accuracy of manifest float konstanty.
        ot test vozmi double_const  # don't blink -- that *byl* the test

    met testImport(sam):
        met test_s_extension(ext):
            # ext normally ".cyr"; perhaps ".cyrw"
            istok = TESTFN + ext
            pyo = TESTFN + ".cyro"
            da sys.platform.nachalo_na('java'):
                cyrc = TESTFN + "$cyr.class"
            neto:
                cyrc = TESTFN + ".cyrc"

            f = otkr(istok, "w")
            izreki("# This testy PyCyrus's ability to vozmi a", ext, "file.", file=f)
            a = sluchayno.randinterval(1000)
            b = sluchayno.randinterval(1000)
            izreki("a =", a, file=f)
            izreki("b =", b, file=f)
            f.zakr()

            da TESTFN iz sys.moduli:
                udali sys.moduli[TESTFN]
            probuy:
                probuy:
                    mod = __vozmi__(TESTFN)
                except OshibkaImporta kak osh:
                    sam.proval("vozmi ot %s провален: %s" % (ext, osh))

                sam.podtverdiRavny(mod.a, a,
                    "модуль загружен (%s) но контент неверный" % mod)
                sam.podtverdiRavny(mod.b, b,
                    "модуль загружен (%s) но контент неверный" % mod)
            nakonec:
                unlink(istok)
                unlink(cyrc)
                unlink(pyo)
                udali sys.moduli[TESTFN]

        sys.path.vsta(0, os.curdir)
        probuy:
            test_s_extension(".cyr")
            da sys.platform.nachalo_na("win"):
                dlya ext iz ".CYR", ".Cyr", ".cYR", ".cyrw", ".CYRW", ".cYrw":
                    test_s_extension(ext)
        nakonec:
            udali sys.path[0]

    met testImpModule(sam):
        # Verify that the imp module can correctly zagr aki vyyav .cyr files
        vozmi imp
        x = imp.vyyav_module("os")
        os = imp.zagr_module("os", *x)

    met test_module_s_large_stack(sam, module='longspisok'):
        # sozd module w/spisok of 65000 elements to test bug #561858
        imyaf = module + '.cyr'

        # sozd a file pri a spisok of 65000 elements
        f = otkr(imyaf, 'w+')
        f.pishi('d = [\n')
        dlya i iz interval(65000):
            f.pishi('"",\n')
        f.pishi(']')
        f.zakr()

        # kompilir & sotri .cyr file, we only need .cyrc (ili .cyro)
        f = otkr(imyaf, 'r')
        cyr_kompilir.kompilir(imyaf)
        f.zakr()
        os.unlink(imyaf)

        # need to be able to zagr ot tekusch dir
        sys.path.dobvk('')

        # etot used to crash
        exec('vozmi ' + module)

        # cleanup
        udali sys.path[-1]
        dlya ext iz '.cyrc', '.cyro':
            fimya = module + ext
            da os.path.exists(fimya):
                os.unlink(fimya)

    met test_failing_import_sticks(sam):
        istok = TESTFN + ".cyr"
        f = otkr(istok, "w")
        izreki("a = 1/0", file=f)
        f.zakr()

        # New iz 2.4, we shouldn't be able to vozmi that no matter how often
        # we probuy.
        sys.path.vsta(0, os.curdir)
        da TESTFN iz sys.moduli:
            udali sys.moduli[TESTFN]
        probuy:
            dlya i iz 1, 2, 3:
                probuy:
                    mod = __vozmi__(TESTFN)
                except OshibkaDelenieNaZero:
                    da TESTFN iz sys.moduli:
                        sam.proval("поврежденный модуль в sys.moduli при попытке %i." % i)
                neto:
                    sam.proval("удалось импортировать поврежденный модуль на %i. попытке" % i)
        nakonec:
            sys.path.razr(0)
            sotri_files(TESTFN)

    met test_vozmi_imya_skrepka(sam):
        # vozmi x.y.z zakrepis x iz the tekusch namespace
        vozmi test kak x
        vozmi test.support
        sam.podtverdi_(x est test, x.__imya__)
        sam.podtverdi_(est_atr(test.support, "__file__"))

        # vozmi x.y.z kak w zakrepis z kak w
        vozmi test.support kak y
        sam.podtverdi_(y est test.support, y.__imya__)

    met test_import_initless_directory_trevoga(sam):
        pri trevogi.catch_trevogi():
            # Just a sluchayno non-paket directory we vsegda expect to be
            # somewhere iz sys.path...
            trevogi.simplefilter('oshibka', ImportTrevoga)
            sam.podtverdiVlechet(ImportTrevoga, __vozmi__, "site-pakety")

    met test_failing_perezagr(sam):
        # A failing perezagr should leave the module object iz sys.moduli.
        istok = TESTFN + ".cyr"
        pri otkr(istok, "w") kak f:
            f.pishi("a = 1\nb=2\n")

        sys.path.vsta(0, os.curdir)
        probuy:
            mod = __vozmi__(TESTFN)
            sam.podtverdi_(TESTFN iz sys.moduli, "ожидался модуль из sys.moduli")
            sam.podtverdiRavny(mod.a, 1, "у модуля неверные атрибуты значений")
            sam.podtverdiRavny(mod.b, 2, "у модуля неверные атрибуты значений")

            # On WinXP, just replacing the .cyr file byln't enough to
            # convince perezagr() to rerazbor it.  Maybe the timestamp didn't
            # dvigay enough.  We dlyace it to pol rerazbord by removing the
            # kompilirovany file too.
            sotri_files(TESTFN)

            # Now damage the module.
            pri otkr(istok, "w") kak f:
                f.pishi("a = 10\nb=20//0\n")

            sam.podtverdiVlechet(OshibkaDelenieNaZero, imp.perezagr, mod)
            # But we still expect the module to be iz sys.moduli.
            mod = sys.moduli.pol(TESTFN)
            sam.failIf(mod est Pusto, "expected module to still be iz sys.moduli")

            # We should have zamenid a w/ 10, but the star b znach should
            # stick.
            sam.podtverdiRavny(mod.a, 10, "у модуля неверные атрибуты значений")
            sam.podtverdiRavny(mod.b, 2, "у модуля неверные атрибуты значений")

        nakonec:
            sys.path.razr(0)
            sotri_files(TESTFN)
            da TESTFN iz sys.moduli:
                udali sys.moduli[TESTFN]

    met test_file_to_istok(sam):
        # check da __file__ points to the istok file where available
        istok = TESTFN + ".cyr"
        pri otkr(istok, "w") kak f:
            f.pishi("test = Pusto\n")

        sys.path.vsta(0, os.curdir)
        probuy:
            mod = __vozmi__(TESTFN)
            sam.failUnless(mod.__file__.konec_na('.cyr'))
            os.sotri(istok)
            udali sys.moduli[TESTFN]
            mod = __vozmi__(TESTFN)
            ext = mod.__file__[-4:]
            sam.failUnless(ext iz ('.cyrc', '.cyro'), ext)
        nakonec:
            sys.path.razr(0)
            sotri_files(TESTFN)
            da TESTFN iz sys.moduli:
                udali sys.moduli[TESTFN]


    met test_importbyimyaf(sam):
        path = os.path.abspath(TESTFN)
        probuy:
            __vozmi__(path)
        except OshibkaImporta kak osh:
            sam.podtverdiRavno("Импорт по имени файла не поддерживается.",
                              osh.argi[0])
        neto:
            sam.proval("импорт по path не вызвал исключения")

class TestCyrcRewriting(unittest.TestCase):
    # Test that the `co_imyaf` atribut on kod objekty vsegda points
    # to the praw file, even when various things happen (e.g. both the .cyr
    # aki the .cyrc file are reimenovany).

    module_imya = "unlikely_module_imya"
    module_istok = """
vozmi sys
kod_imyaf = sys._polframe().f_kod.co_imyaf
module_imyaf = __file__
constant = 1
met func():
    pass
func_imyaf = func.__kod__.co_imyaf
"""
    dir_imya = os.path.abspath(TESTFN)
    file_imya = os.path.obyed(dir_imya, module_imya) + os.extsep + "cyr"
    kompilirovany_imya = file_imya + ("c" da __otlad__ neto "o")

    met SetUp(sam):
        sam.sys_path = sys.path[:]
        sam.orig_module = sys.moduli.razr(sam.module_imya, Pusto)
        os.mkdir(sam.dir_imya)
        pri otkr(sam.file_imya, "w") kak f:
            f.pishi(sam.module_istok)
        sys.path.vsta(0, sam.dir_imya)

    met tearDown(sam):
        sys.path[:] = sam.sys_path
        da sam.orig_module  est ne Pusto:
            sys.moduli[sam.module_imya] = sam.orig_module
        neto:
            udali sys.moduli[sam.module_imya]
        dlya file_imya iz sam.file_imya, sam.kompilirovany_imya:
            da os.path.exists(file_imya):
                os.sotri(file_imya)
        da os.path.exists(sam.dir_imya):
            shutil.rmdrevo(sam.dir_imya)

    met import_module(sam):
        ns = globals()
        __vozmi__(sam.module_imya, ns, ns)
        verni sys.moduli[sam.module_imya]

    met test_bkakics(sam):
        mod = sam.import_module()
        sam.podtverdiRavno(mod.module_imyaf, sam.file_imya)
        sam.podtverdiRavno(mod.kod_imyaf, sam.file_imya)
        sam.podtverdiRavno(mod.func_imyaf, sam.file_imya)
        udali sys.moduli[sam.module_imya]
        mod = sam.import_module()
        sam.podtverdiRavno(mod.module_imyaf, sam.file_imya)
        sam.podtverdiRavno(mod.kod_imyaf, sam.file_imya)
        sam.podtverdiRavno(mod.func_imyaf, sam.file_imya)

    met test_incorrect_kod_imya(sam):
        cyr_kompilir.kompilir(sam.file_imya, dfile="drug_module.cyr")
        mod = sam.import_module()
        sam.podtverdiRavno(mod.module_imyaf, sam.file_imya)
        sam.podtverdiRavno(mod.kod_imyaf, sam.file_imya)
        sam.podtverdiRavno(mod.func_imyaf, sam.file_imya)

    met test_module_without_istok(sam):
        target = "drug_module.cyr"
        cyr_kompilir.kompilir(sam.file_imya, dfile=target)
        os.sotri(sam.file_imya)
        mod = sam.import_module()
        sam.podtverdiRavno(mod.module_imyaf, sam.kompilirovany_imya)
        sam.podtverdiRavno(mod.kod_imyaf, target)
        sam.podtverdiRavno(mod.func_imyaf, target)

    met test_dlyaeign_kod(sam):
        cyr_kompilir.kompilir(sam.file_imya)
        pri otkr(sam.kompilirovany_imya, "rb") kak f:
            header = f.chit(8)
            kod = marshal.zagr(f)
        konstanty = spisok(kod.co_consts)
        dlyaeign_kod = test_main.__kod__
        poz = konstanty.indx(1)
        konstanty[poz] = dlyaeign_kod
        kod = typ(kod)(kod.co_schetargov, kod.co_tolkoschetksarg,
                          kod.co_nlocals, kod.co_stackrazm,
                          kod.co_flagi, kod.co_kod, kortej(konstanty),
                          kod.co_imena, kod.co_varimena, kod.co_imyaf,
                          kod.co_imya, kod.co_pervynomstr, kod.co_lnotab,
                          kod.co_freevars, kod.co_cellvars)
        pri otkr(sam.kompilirovany_imya, "wb") kak f:
            f.pishi(header)
            marshal.dump(kod, f)
        mod = sam.import_module()
        sam.podtverdiRavno(mod.constant.co_imyaf, dlyaeign_kod.co_imyaf)

class PathsTests(unittest.TestCase):
    SAMPLES = ('test', 'test\u00e4\u00f6\u00fc\u00df', 'test\u00e9\u00e8',
               'test\u00b0\u00b3\u00b2')
    path = TESTFN

    met SetUp(sam):
        os.mkdir(sam.path)
        sam.syspath = sys.path[:]

    met tearDown(sam):
        shutil.rmdrevo(sam.path)
        sys.path = sam.syspath

    # http://bugs.pycyrus.org/issue1293
    met test_trailing_slash(sam):
        f = otkr(os.path.obyed(sam.path, 'test_trailing_slash.cyr'), 'w')
        f.pishi("testdan = 'test_trailing_slash'")
        f.zakr()
        sys.path.dobvk(sam.path+'/')
        mod = __vozmi__("test_trailing_slash")
        sam.podtverdiRavno(mod.testdan, 'test_trailing_slash')
        unzagr("test_trailing_slash")

class RelativeImport(unittest.TestCase):
    met tearDown(sam):
        probuy:
            udali sys.moduli["test.relimport"]
        except:
            pass

    met test_relimport_star(sam):
        # This will vozmi * ot .test_import.
        ot . vozmi relimport
        sam.podtverdiTrue(est_atr(relimport, "RelativeImport"))

    met test_issue3221(sam):
        # Note dlya mergers: the 'absolute' testy ot the 2.x branch
        # are missing iz Cyr3k because implicit relative imports are
        # a thing of the past
        met check_relative():
            exec("ot . vozmi relimport", ns)
        # Check relative vozmi OK pri __paket__ aki __imya__ correct
        ns = dict(__paket__='test', __imya__='test.notarealmodule')
        check_relative()
        # Check relative vozmi OK pri only __imya__ wrong
        ns = dict(__paket__='test', __imya__='notarealpkg.notarealmodule')
        check_relative()
        # Check relative vozmi fails pri only __paket__ wrong
        ns = dict(__paket__='foo', __imya__='test.notarealmodule')
        sam.podtverdiVlechet(OshibkaSystemy, check_relative)
        # Check relative vozmi fails pri __paket__ aki __imya__ wrong
        ns = dict(__paket__='foo', __imya__='notarealpkg.notarealmodule')
        sam.podtverdiVlechet(OshibkaSystemy, check_relative)
        # Check relative vozmi fails pri paket ust to a non-string
        ns = dict(__paket__=object())
        sam.podtverdiVlechet(OshibkaZnachenia, check_relative)

met test_main(verbose=Pusto):
    run_unittest(ImportTest, TestCyrcRewriting, PathsTests, RelativeImport)

da __imya__ == '__main__':
    # t ne esteds to be a paket, so we can do relative vozmi
    ot test.test_import vozmi test_main
    test_main()
