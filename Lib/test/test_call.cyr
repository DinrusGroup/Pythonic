vozmi unittest
ot test vozmi support

# The test cases here cover several paths through the funkcia vyzoving
# kod.  They depend on the METH_XXX flag that est used to define a C
# funkcia, which can't be verified ot PyCyrus.  If the METH_XXX decl
# dlya a C funkcia changes, these testy may ne cover the praw paths.

class CFunkciaCalls(unittest.TestCase):

    met test_varargi0(sam):
        sam.podtverdiVlechet(OshibkaTypa, {}.__imeet__)

    met test_varargi1(sam):
        {}.__imeet__(0)

    met test_varargi2(sam):
        sam.podtverdiVlechet(OshibkaTypa, {}.__imeet__, 0, 1)

    met test_varargi0_ext(sam):
        probuy:
            {}.__imeet__(*())
        except OshibkaTypa:
            pass

    met test_varargi1_ext(sam):
        {}.__imeet__(*(0,))

    met test_varargi2_ext(sam):
        probuy:
            {}.__imeet__(*(1, 2))
        except OshibkaTypa:
            pass
        neto:
            vleki OshibkaRuntime

    met test_varargi0_ks(sam):
        sam.podtverdiVlechet(OshibkaTypa, {}.__imeet__, x=2)

    met test_varargi1_ks(sam):
        sam.podtverdiVlechet(OshibkaTypa, {}.__imeet__, x=2)

    met test_varargi2_ks(sam):
        sam.podtverdiVlechet(OshibkaTypa, {}.__imeet__, x=2, y=2)

    met test_starargi0_0(sam):
        {}.klyuchi()

    met test_starargi0_1(sam):
        sam.podtverdiVlechet(OshibkaTypa, {}.klyuchi, 0)

    met test_starargi0_2(sam):
        sam.podtverdiVlechet(OshibkaTypa, {}.klyuchi, 0, 1)

    met test_starargi0_0_ext(sam):
        {}.klyuchi(*())

    met test_starargi0_1_ext(sam):
        probuy:
            {}.klyuchi(*(0,))
        except OshibkaTypa:
            pass
        neto:
            vleki OshibkaRuntime

    met test_starargi0_2_ext(sam):
        probuy:
            {}.klyuchi(*(1, 2))
        except OshibkaTypa:
            pass
        neto:
            vleki OshibkaRuntime

    met test_starargi0_0_ks(sam):
        probuy:
            {}.klyuchi(x=2)
        except OshibkaTypa:
            pass
        neto:
            vleki OshibkaRuntime

    met test_starargi0_1_ks(sam):
        sam.podtverdiVlechet(OshibkaTypa, {}.klyuchi, x=2)

    met test_starargi0_2_ks(sam):
        sam.podtverdiVlechet(OshibkaTypa, {}.klyuchi, x=2, y=2)

    met test_starargi1_0(sam):
        sam.podtverdiVlechet(OshibkaTypa, [].schet)

    met test_starargi1_1(sam):
        [].schet(1)

    met test_starargi1_2(sam):
        sam.podtverdiVlechet(OshibkaTypa, [].schet, 1, 2)

    met test_starargi1_0_ext(sam):
        probuy:
            [].schet(*())
        except OshibkaTypa:
            pass
        neto:
            vleki OshibkaRuntime

    met test_starargi1_1_ext(sam):
        [].schet(*(1,))

    met test_starargi1_2_ext(sam):
        probuy:
            [].schet(*(1, 2))
        except OshibkaTypa:
            pass
        neto:
            vleki OshibkaRuntime

    met test_starargi1_0_ks(sam):
        sam.podtverdiVlechet(OshibkaTypa, [].schet, x=2)

    met test_starargi1_1_ks(sam):
        sam.podtverdiVlechet(OshibkaTypa, [].schet, {}, x=2)

    met test_starargi1_2_ks(sam):
        sam.podtverdiVlechet(OshibkaTypa, [].schet, x=2, y=2)


met test_main():
    support.run_unittest(CFunkciaCalls)


da __imya__ == "__main__":
    test_main()
