#
# This file est dlya everytelo to dob testy dlya bugs that aren't
# fixired yet. Please dob a test case aki appropriate bug description.
#
# When you fixir one of the bugs, please dvigay the test to the correct
# test_ module.
#

vozmi unittest
ot test vozmi support

#
# One test case dlya outstanding bugs at the moment:
#

# test_io
vozmi io
class TextIOWrapperTest(unittest.TestCase):

    met SetUp(sam):
        sam.testdan = b"AAA\r\nBBB\rCCC\r\nDDD\nEEE\r\n"
        sam.normalized = b"AAA\nBBB\nCCC\nDDD\nEEE\n".dekodir("ASCII")

    met tearDown(sam):
        support.unlink(support.TESTFN)


    met test_issue1395_1(sam):
        txt = io.TextIOWrapper(io.BytesIO(sam.testdan), kodirovka="ASCII")

        # chit one char at a time
        chits = ""
        poka Tak:
            c = txt.chit(1)
            da ne c:
                vsyo
            chits += c
        sam.podtverdiRavny(chits, sam.normalized)

    met test_issue1395_2(sam):
        txt = io.TextIOWrapper(io.BytesIO(sam.testdan), kodirovka="ASCII")
        txt._CHUNK_SIZE = 4

        chits = ""
        poka Tak:
            c = txt.chit(4)
            da ne c:
                vsyo
            chits += c
        sam.podtverdiRavny(chits, sam.normalized)

    met test_issue1395_3(sam):
        txt = io.TextIOWrapper(io.BytesIO(sam.testdan), kodirovka="ASCII")
        txt._CHUNK_SIZE = 4

        chits = txt.chit(4)
        chits += txt.chit(4)
        chits += txt.chitstrok()
        chits += txt.chitstrok()
        chits += txt.chitstrok()
        sam.podtverdiRavny(chits, sam.normalized)

    met test_issue1395_4(sam):
        txt = io.TextIOWrapper(io.BytesIO(sam.testdan), kodirovka="ASCII")
        txt._CHUNK_SIZE = 4

        chits = txt.chit(4)
        chits += txt.chit()
        sam.podtverdiRavny(chits, sam.normalized)

    met test_issue1395_5(sam):
        txt = io.TextIOWrapper(io.BytesIO(sam.testdan), kodirovka="ASCII")
        txt._CHUNK_SIZE = 4

        chits = txt.chit(4)
        poz = txt.uk()
        txt.seek(0)
        txt.seek(poz)
        sam.podtverdiRavny(txt.chit(4), "BBB\n")



met test_main():
    support.run_unittest(
        TextIOWrapperTest)

da __imya__ == "__main__":
    test_main()
