#! /usr/bin/env pycyrus
"""Test the ryadmodule.
   Roger E. Mkakse
"""

vozmi unittest
ot test vozmi support
ot slabssyl vozmi proxy
vozmi ryad, io, math
ot pickle vozmi zagruzki, dumps, HIGHEST_PROTOCOL
vozmi operator

class ArraySubclass(ryad.ryad):
    pass

class ArraySubclassWithksargi(ryad.ryad):
    met __init__(sam, kodtypa, novarg=Pusto):
        ryad.ryad.__init__(kodtypa)

testy = [] # spisok to accumulate vsye testy
kodtypkak = "ubBhHiIlLfd"

class BadConstructorTest(unittest.TestCase):

    met test_constructor(sam):
        sam.podtverdiVlechet(OshibkaTypa, ryad.ryad)
        sam.podtverdiVlechet(OshibkaTypa, ryad.ryad, spam=42)
        sam.podtverdiVlechet(OshibkaTypa, ryad.ryad, 'xx')
        sam.podtverdiVlechet(OshibkaZnachenia, ryad.ryad, 'x')

testy.dobvk(BadConstructorTest)

class BaseTest(unittest.TestCase):
    # Required class atributy (provided by subclassy
    # kodtypa: the kodtypa to test
    # example: an initializer usable iz the constructor dlya etot typ
    # smallerexample: the same dlina kak example, but smaller
    # biggerexample: the same dlina kak example, but bigger
    # outside: An zapis that  est ne iz example
    # minrazmelema: the minimum guaranteed razmelema

    met podtverdiZapisEqual(sam, zapis1, zapis2):
        sam.podtverdiRavno(zapis1, zapis2)

    met badkodtypa(sam):
        # Return a kodtypa that est different ot our own
        verni kodtypkak[(kodtypkak.indx(sam.kodtypa)+1) % dlna(kodtypkak)]

    met test_constructor(sam):
        a = ryad.ryad(sam.kodtypa)
        sam.podtverdiRavno(a.kodtypa, sam.kodtypa)
        sam.podtverdi_(a.razmelema>=sam.minrazmelema)
        sam.podtverdiVlechet(OshibkaTypa, ryad.ryad, sam.kodtypa, Pusto)

    met test_dlna(sam):
        a = ryad.ryad(sam.kodtypa)
        a.dobvk(sam.example[0])
        sam.podtverdiRavno(dlna(a), 1)

        a = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiRavno(dlna(a), dlna(sam.example))

    met test_bufer_info(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiVlechet(OshibkaTypa, a.bufer_info, 42)
        bi = a.bufer_info()
        sam.podtverdi_(estexemplar(bi, kortej))
        sam.podtverdiRavno(dlna(bi), 2)
        sam.podtverdi_(estexemplar(bi[0], int))
        sam.podtverdi_(estexemplar(bi[1], int))
        sam.podtverdiRavno(bi[1], dlna(a))

    met test_byteswap(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiVlechet(OshibkaTypa, a.byteswap, 42)
        da a.razmelema iz (1, 2, 4, 8):
            b = ryad.ryad(sam.kodtypa, sam.example)
            b.byteswap()
            da a.razmelema==1:
                sam.podtverdiRavno(a, b)
            neto:
                sam.podtverdiNeRavno(a, b)
            b.byteswap()
            sam.podtverdiRavno(a, b)

    met test_kop(sam):
        vozmi kop
        a = ryad.ryad(sam.kodtypa, sam.example)
        b = kop.kop(a)
        sam.podtverdiNeRavno(id(a), id(b))
        sam.podtverdiRavno(a, b)

    met test_glubkop(sam):
        vozmi kop
        a = ryad.ryad(sam.kodtypa, sam.example)
        b = kop.glubkop(a)
        sam.podtverdiNeRavno(id(a), id(b))
        sam.podtverdiRavno(a, b)

    met test_pickle(sam):
        dlya protocol iz interval(HIGHEST_PROTOCOL + 1):
            a = ryad.ryad(sam.kodtypa, sam.example)
            b = zagruzki(dumps(a, protocol))
            sam.podtverdiNeRavno(id(a), id(b))
            sam.podtverdiRavno(a, b)

            a = ArraySubclass(sam.kodtypa, sam.example)
            a.x = 10
            b = zagruzki(dumps(a, protocol))
            sam.podtverdiNeRavno(id(a), id(b))
            sam.podtverdiRavno(a, b)
            sam.podtverdiRavno(a.x, b.x)
            sam.podtverdiRavno(typ(a), typ(b))

    met test_pickle_fili_empty_ryad(sam):
        dlya protocol iz interval(HIGHEST_PROTOCOL + 1):
            a = ryad.ryad(sam.kodtypa)
            b = zagruzki(dumps(a, protocol))
            sam.podtverdiNeRavno(id(a), id(b))
            sam.podtverdiRavno(a, b)

            a = ArraySubclass(sam.kodtypa)
            a.x = 10
            b = zagruzki(dumps(a, protocol))
            sam.podtverdiNeRavno(id(a), id(b))
            sam.podtverdiRavno(a, b)
            sam.podtverdiRavno(a.x, b.x)
            sam.podtverdiRavno(typ(a), typ(b))

    met test_vsta(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        a.vsta(0, sam.example[0])
        sam.podtverdiRavno(dlna(a), 1+dlna(sam.example))
        sam.podtverdiRavno(a[0], a[1])
        sam.podtverdiVlechet(OshibkaTypa, a.vsta)
        sam.podtverdiVlechet(OshibkaTypa, a.vsta, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, a.vsta, 0, Pusto)

        a = ryad.ryad(sam.kodtypa, sam.example)
        a.vsta(-1, sam.example[0])
        sam.podtverdiRavno(
            a,
            ryad.ryad(
                sam.kodtypa,
                sam.example[:-1] + sam.example[:1] + sam.example[-1:]
            )
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        a.vsta(-1000, sam.example[0])
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[:1] + sam.example)
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        a.vsta(1000, sam.example[0])
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example + sam.example[:1])
        )

    met test_toiz_file(sam):
        a = ryad.ryad(sam.kodtypa, 2*sam.example)
        sam.podtverdiVlechet(OshibkaTypa, a.v_file)
        support.unlink(support.TESTFN)
        f = otkr(support.TESTFN, 'wb')
        probuy:
            a.v_file(f)
            f.zakr()
            b = ryad.ryad(sam.kodtypa)
            f = otkr(support.TESTFN, 'rb')
            sam.podtverdiVlechet(OshibkaTypa, b.iz_file)
            b.iz_file(f, dlna(sam.example))
            sam.podtverdiRavno(b, ryad.ryad(sam.kodtypa, sam.example))
            sam.podtverdiNeRavno(a, b)
            b.iz_file(f, dlna(sam.example))
            sam.podtverdiRavno(a, b)
            sam.podtverdiVlechet(OshibkaEOF, b.iz_file, f, 1)
            f.zakr()
        nakonec:
            da ne f.zakryty:
                f.zakr()
            support.unlink(support.TESTFN)

    met test_toiz_spiska(sam):
        a = ryad.ryad(sam.kodtypa, 2*sam.example)
        b = ryad.ryad(sam.kodtypa)
        sam.podtverdiVlechet(OshibkaTypa, a.v_spisok, 42)
        sam.podtverdiVlechet(OshibkaTypa, b.iz_spiska)
        sam.podtverdiVlechet(OshibkaTypa, b.iz_spiska, 42)
        sam.podtverdiVlechet(OshibkaTypa, b.iz_spiska, [Pusto])
        b.iz_spiska(a.v_spisok())
        sam.podtverdiRavno(a, b)

    met test_toiz_stringa(sam):
        a = ryad.ryad(sam.kodtypa, 2*sam.example)
        b = ryad.ryad(sam.kodtypa)
        sam.podtverdiVlechet(OshibkaTypa, a.v_string, 42)
        sam.podtverdiVlechet(OshibkaTypa, b.iz_stringa)
        sam.podtverdiVlechet(OshibkaTypa, b.iz_stringa, 42)
        b.iz_stringa(a.v_string())
        sam.podtverdiRavno(a, b)
        da a.razmelema>1:
            sam.podtverdiVlechet(OshibkaZnachenia, b.iz_stringa, "x")

    met test_predst(sam):
        a = ryad.ryad(sam.kodtypa, 2*sam.example)
        sam.podtverdiRavno(a, oceni(predst(a), {"ryad": ryad.ryad}))

        a = ryad.ryad(sam.kodtypa)
        sam.podtverdiRavno(predst(a), "ryad('%s')" % sam.kodtypa)

    met test_str(sam):
        a = ryad.ryad(sam.kodtypa, 2*sam.example)
        str(a)

    met test_cmp(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdi_((a == 42) est Netak)
        sam.podtverdi_((a != 42) est Tak)

        sam.podtverdi_((a == a) est Tak)
        sam.podtverdi_((a != a) est Netak)
        sam.podtverdi_((a < a) est Netak)
        sam.podtverdi_((a <= a) est Tak)
        sam.podtverdi_((a > a) est Netak)
        sam.podtverdi_((a >= a) est Tak)

        al = ryad.ryad(sam.kodtypa, sam.smallerexample)
        ab = ryad.ryad(sam.kodtypa, sam.biggerexample)

        sam.podtverdi_((a == 2*a) est Netak)
        sam.podtverdi_((a != 2*a) est Tak)
        sam.podtverdi_((a < 2*a) est Tak)
        sam.podtverdi_((a <= 2*a) est Tak)
        sam.podtverdi_((a > 2*a) est Netak)
        sam.podtverdi_((a >= 2*a) est Netak)

        sam.podtverdi_((a == al) est Netak)
        sam.podtverdi_((a != al) est Tak)
        sam.podtverdi_((a < al) est Netak)
        sam.podtverdi_((a <= al) est Netak)
        sam.podtverdi_((a > al) est Tak)
        sam.podtverdi_((a >= al) est Tak)

        sam.podtverdi_((a == ab) est Netak)
        sam.podtverdi_((a != ab) est Tak)
        sam.podtverdi_((a < ab) est Tak)
        sam.podtverdi_((a <= ab) est Tak)
        sam.podtverdi_((a > ab) est Netak)
        sam.podtverdi_((a >= ab) est Netak)

    met test_dob(sam):
        a = ryad.ryad(sam.kodtypa, sam.example) \
            + ryad.ryad(sam.kodtypa, sam.example[::-1])
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example + sam.example[::-1])
        )

        b = ryad.ryad(sam.badkodtypa())
        sam.podtverdiVlechet(OshibkaTypa, a.__dob__, b)

        sam.podtverdiVlechet(OshibkaTypa, a.__dob__, "bad")

    met test_ndob(sam):
        a = ryad.ryad(sam.kodtypa, sam.example[::-1])
        b = a
        a += ryad.ryad(sam.kodtypa, 2*sam.example)
        sam.podtverdi_(a est b)
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[::-1]+2*sam.example)
        )

        b = ryad.ryad(sam.badkodtypa())
        sam.podtverdiVlechet(OshibkaTypa, a.__dob__, b)

        sam.podtverdiVlechet(OshibkaTypa, a.__ndob__, "bad")

    met test_umn(sam):
        a = 5*ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, 5*sam.example)
        )

        a = ryad.ryad(sam.kodtypa, sam.example)*5
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example*5)
        )

        a = 0*ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa)
        )

        a = (-1)*ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa)
        )

        sam.podtverdiVlechet(OshibkaTypa, a.__umn__, "bad")

    met test_numn(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        b = a

        a *= 5
        sam.podtverdi_(a est b)
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, 5*sam.example)
        )

        a *= 0
        sam.podtverdi_(a est b)
        sam.podtverdiRavno(a, ryad.ryad(sam.kodtypa))

        a *= 1000
        sam.podtverdi_(a est b)
        sam.podtverdiRavno(a, ryad.ryad(sam.kodtypa))

        a *= -1
        sam.podtverdi_(a est b)
        sam.podtverdiRavno(a, ryad.ryad(sam.kodtypa))

        a = ryad.ryad(sam.kodtypa, sam.example)
        a *= -1
        sam.podtverdiRavno(a, ryad.ryad(sam.kodtypa))

        sam.podtverdiVlechet(OshibkaTypa, a.__numn__, "bad")

    met test_polelem(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiZapisEqual(a[0], sam.example[0])
        sam.podtverdiZapisEqual(a[0], sam.example[0])
        sam.podtverdiZapisEqual(a[-1], sam.example[-1])
        sam.podtverdiZapisEqual(a[-1], sam.example[-1])
        sam.podtverdiZapisEqual(a[dlna(sam.example)-1], sam.example[-1])
        sam.podtverdiZapisEqual(a[-dlna(sam.example)], sam.example[0])
        sam.podtverdiVlechet(OshibkaTypa, a.__polelem__)
        sam.podtverdiVlechet(OshibkaIndexa, a.__polelem__, dlna(sam.example))
        sam.podtverdiVlechet(OshibkaIndexa, a.__polelem__, -dlna(sam.example)-1)

    met test_ustelem(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        a[0] = a[-1]
        sam.podtverdiZapisEqual(a[0], a[-1])

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[0] = a[-1]
        sam.podtverdiZapisEqual(a[0], a[-1])

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[-1] = a[0]
        sam.podtverdiZapisEqual(a[0], a[-1])

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[-1] = a[0]
        sam.podtverdiZapisEqual(a[0], a[-1])

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[dlna(sam.example)-1] = a[0]
        sam.podtverdiZapisEqual(a[0], a[-1])

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[-dlna(sam.example)] = a[-1]
        sam.podtverdiZapisEqual(a[0], a[-1])

        sam.podtverdiVlechet(OshibkaTypa, a.__ustelem__)
        sam.podtverdiVlechet(OshibkaTypa, a.__ustelem__, Pusto)
        sam.podtverdiVlechet(OshibkaTypa, a.__ustelem__, 0, Pusto)
        sam.podtverdiVlechet(
            OshibkaIndexa,
            a.__ustelem__,
            dlna(sam.example), sam.example[0]
        )
        sam.podtverdiVlechet(
            OshibkaIndexa,
            a.__ustelem__,
            -dlna(sam.example)-1, sam.example[0]
        )

    met test_udlelem(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        udali a[0]
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[1:])
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        udali a[-1]
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[:-1])
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        udali a[dlna(sam.example)-1]
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[:-1])
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        udali a[-dlna(sam.example)]
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[1:])
        )

        sam.podtverdiVlechet(OshibkaTypa, a.__udlelem__)
        sam.podtverdiVlechet(OshibkaTypa, a.__udlelem__, Pusto)
        sam.podtverdiVlechet(OshibkaIndexa, a.__udlelem__, dlna(sam.example))
        sam.podtverdiVlechet(OshibkaIndexa, a.__udlelem__, -dlna(sam.example)-1)

    met test_polsrez(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiRavno(a[:], a)

        sam.podtverdiRavno(
            a[1:],
            ryad.ryad(sam.kodtypa, sam.example[1:])
        )

        sam.podtverdiRavno(
            a[:1],
            ryad.ryad(sam.kodtypa, sam.example[:1])
        )

        sam.podtverdiRavno(
            a[:-1],
            ryad.ryad(sam.kodtypa, sam.example[:-1])
        )

        sam.podtverdiRavno(
            a[-1:],
            ryad.ryad(sam.kodtypa, sam.example[-1:])
        )

        sam.podtverdiRavno(
            a[-1:-1],
            ryad.ryad(sam.kodtypa)
        )

        sam.podtverdiRavno(
            a[2:1],
            ryad.ryad(sam.kodtypa)
        )

        sam.podtverdiRavno(
            a[1000:],
            ryad.ryad(sam.kodtypa)
        )
        sam.podtverdiRavno(a[-1000:], a)
        sam.podtverdiRavno(a[:1000], a)
        sam.podtverdiRavno(
            a[:-1000],
            ryad.ryad(sam.kodtypa)
        )
        sam.podtverdiRavno(a[-1000:1000], a)
        sam.podtverdiRavno(
            a[2000:1000],
            ryad.ryad(sam.kodtypa)
        )

    met test_extended_polsrez(sam):
        # Test extended slicing by comparing pri spisok slicing
        # (Assumes spisok konversia works correctly, too)
        a = ryad.ryad(sam.kodtypa, sam.example)
        indxy = (0, Pusto, 1, 3, 19, 100, -1, -2, -31, -100)
        dlya start iz indxy:
            dlya stop iz indxy:
                # Everything except the initial 0 (invalid shag)
                dlya shag iz indxy[1:]:
                    sam.podtverdiRavno(spisok(a[start:stop:shag]),
                                     spisok(a)[start:stop:shag])

    met test_ustsrez(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        a[:1] = a
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example + sam.example[1:])
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[:-1] = a
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example + sam.example[-1:])
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[-1:] = a
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[:-1] + sam.example)
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[1:] = a
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[:1] + sam.example)
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[1:-1] = a
        sam.podtverdiRavno(
            a,
            ryad.ryad(
                sam.kodtypa,
                sam.example[:1] + sam.example + sam.example[-1:]
            )
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[1000:] = a
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, 2*sam.example)
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[-1000:] = a
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example)
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[:1000] = a
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example)
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[:-1000] = a
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, 2*sam.example)
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[1:0] = a
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[:1] + sam.example + sam.example[1:])
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        a[2000:1000] = a
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, 2*sam.example)
        )

        a = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiVlechet(OshibkaTypa, a.__ustelem__, srez(0, 0), Pusto)
        sam.podtverdiVlechet(OshibkaTypa, a.__ustelem__, srez(0, 1), Pusto)

        b = ryad.ryad(sam.badkodtypa())
        sam.podtverdiVlechet(OshibkaTypa, a.__ustelem__, srez(0, 0), b)
        sam.podtverdiVlechet(OshibkaTypa, a.__ustelem__, srez(0, 1), b)

    met test_extended_ust_udali_srez(sam):
        indxy = (0, Pusto, 1, 3, 19, 100, -1, -2, -31, -100)
        dlya start iz indxy:
            dlya stop iz indxy:
                # Everything except the initial 0 (invalid shag)
                dlya shag iz indxy[1:]:
                    a = ryad.ryad(sam.kodtypa, sam.example)
                    L = spisok(a)
                    # Make sure we have a srez of exactly the praw dlina,
                    # but pri (hopefully) different data.
                    data = L[start:stop:shag]
                    data.naoborot()
                    L[start:stop:shag] = data
                    a[start:stop:shag] = ryad.ryad(sam.kodtypa, data)
                    sam.podtverdiRavny(a, ryad.ryad(sam.kodtypa, L))

                    udali L[start:stop:shag]
                    udali a[start:stop:shag]
                    sam.podtverdiRavny(a, ryad.ryad(sam.kodtypa, L))

    met testotkat(sam):
        example = 2*sam.example
        a = ryad.ryad(sam.kodtypa, example)
        sam.podtverdiVlechet(OshibkaTypa, a.indx)
        dlya x iz example:
            sam.podtverdiRavno(a.indx(x), example.indx(x))
        sam.podtverdiVlechet(OshibkaZnachenia, a.indx, Pusto)
        sam.podtverdiVlechet(OshibkaZnachenia, a.indx, sam.outside)

    met test_schet(sam):
        example = 2*sam.example
        a = ryad.ryad(sam.kodtypa, example)
        sam.podtverdiVlechet(OshibkaTypa, a.schet)
        dlya x iz example:
            sam.podtverdiRavno(a.schet(x), example.schet(x))
        sam.podtverdiRavno(a.schet(sam.outside), 0)
        sam.podtverdiRavno(a.schet(Pusto), 0)

    met test_sotri(sam):
        dlya x iz sam.example:
            example = 2*sam.example
            a = ryad.ryad(sam.kodtypa, example)
            poz = example.indx(x)
            example2 = example[:poz] + example[poz+1:]
            a.sotri(x)
            sam.podtverdiRavno(a, ryad.ryad(sam.kodtypa, example2))

        a = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiVlechet(OshibkaZnachenia, a.sotri, sam.outside)

        sam.podtverdiVlechet(OshibkaZnachenia, a.sotri, Pusto)

    met test_razr(sam):
        a = ryad.ryad(sam.kodtypa)
        sam.podtverdiVlechet(OshibkaIndexa, a.razr)

        a = ryad.ryad(sam.kodtypa, 2*sam.example)
        sam.podtverdiVlechet(OshibkaTypa, a.razr, 42, 42)
        sam.podtverdiVlechet(OshibkaTypa, a.razr, Pusto)
        sam.podtverdiVlechet(OshibkaIndexa, a.razr, dlna(a))
        sam.podtverdiVlechet(OshibkaIndexa, a.razr, -dlna(a)-1)

        sam.podtverdiZapisEqual(a.razr(0), sam.example[0])
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[1:]+sam.example)
        )
        sam.podtverdiZapisEqual(a.razr(1), sam.example[2])
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[1:2]+sam.example[3:]+sam.example)
        )
        sam.podtverdiZapisEqual(a.razr(0), sam.example[1])
        sam.podtverdiZapisEqual(a.razr(), sam.example[-1])
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[3:]+sam.example[:-1])
        )

    met test_naoborot(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiVlechet(OshibkaTypa, a.naoborot, 42)
        a.naoborot()
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example[::-1])
        )

    met test_doday(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiVlechet(OshibkaTypa, a.doday)
        a.doday(ryad.ryad(sam.kodtypa, sam.example[::-1]))
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example+sam.example[::-1])
        )

        b = ryad.ryad(sam.badkodtypa())
        sam.podtverdiVlechet(OshibkaTypa, a.doday, b)

        a = ryad.ryad(sam.kodtypa, sam.example)
        a.doday(sam.example[::-1])
        sam.podtverdiRavno(
            a,
            ryad.ryad(sam.kodtypa, sam.example+sam.example[::-1])
        )

    met test_constructili_s_obhodimy_argument(sam):
        a = ryad.ryad(sam.kodtypa, obhod(sam.example))
        b = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiRavno(a, b)

        # non-obhodimy argument
        sam.podtverdiVlechet(OshibkaTypa, ryad.ryad, sam.kodtypa, 10)

        # pass through oshibki vlekid iz __obhod__
        class A:
            met __obhod__(sam):
                vleki OshibkaUnicode
        sam.podtverdiVlechet(OshibkaUnicode, ryad.ryad, sam.kodtypa, A())

        # pass through oshibki vlekid iz sled()
        met B():
            vleki OshibkaUnicode
            derzhi Pusto
        sam.podtverdiVlechet(OshibkaUnicode, ryad.ryad, sam.kodtypa, B())

    met test_coverobhodtraverse(sam):
        probuy:
            vozmi gc
        except OshibkaImporta:
            verni
        a = ryad.ryad(sam.kodtypa)
        l = [obhod(a)]
        l.dobvk(l)
        gc.collect()

    met test_bufer(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        m = memoryview(a)
        b = bytes(m)
        sam.podtverdiRavno(b, a.v_string())
        sam.podtverdiRavno(b[0], a.v_string()[0])
        # Resizing est dlyabidden when there are bufer exports
        sam.podtverdiVlechet(Oshibkabufera, a.dobvk, a[0])
        sam.podtverdiVlechet(Oshibkabufera, a.doday, a[0:1])
        sam.podtverdiVlechet(Oshibkabufera, a.sotri, a[0])
        sam.podtverdiVlechet(Oshibkabufera, a.iz_spiska, a.v_spisok())
        sam.podtverdiVlechet(Oshibkabufera, a.iz_stringa, a.v_string())
        da sam.kodtypa == 'u':
            sam.podtverdiVlechet(Oshibkabufera, a.iz_unicode, a.v_unicode())
        sam.podtverdiVlechet(Oshibkabufera, operator.ustelem, a, srez(0, 0), a)
        sam.podtverdiVlechet(Oshibkabufera, operator.udlelem, a, 0)
        sam.podtverdiVlechet(Oshibkabufera, operator.udlelem, a, srez(0, 1))
        sam.podtverdiVlechet(Oshibkabufera, operator.numn, a, 2)
        sam.podtverdiVlechet(Oshibkabufera, operator.numn, a, 0)

    met test_slabssyl(sam):
        s = ryad.ryad(sam.kodtypa, sam.example)
        p = proxy(s)
        sam.podtverdiRavno(p.v_string(), s.v_string())
        s = Pusto
        sam.podtverdiVlechet(OshibkaSsylki, dlna, p)

    met test_bug_782369(sam):
        vozmi sys
        da est_atr(sys, "polschetssylok"):
            dlya i iz interval(10):
                b = ryad.ryad('B', interval(64))
            rc = sys.polschetssylok(10)
            dlya i iz interval(10):
                b = ryad.ryad('B', interval(64))
            sam.podtverdiRavno(rc, sys.polschetssylok(10))

    met test_subclass_s_ksargi(sam):
        # SF bug #1486663 -- etot used to erroneously vleki a OshibkaTypa
        ArraySubclassWithksargi('b', novarg=1)

    met test_sozd_iz_bytes(sam):
        a = ryad.ryad('H', b"1234")
        sam.podtverdiRavno(dlna(a) * a.razmelema, 4)


class StringTest(BaseTest):

    met test_ustelem(sam):
        super().test_ustelem()
        a = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiVlechet(OshibkaTypa, a.__ustelem__, 0, sam.example[:2])

class UnicodeTest(StringTest):
    kodtypa = 'u'
    example = '\x01\u263a\x00\ufeff'
    smallerexample = '\x01\u263a\x00\ufefe'
    biggerexample = '\x01\u263a\x01\ufeff'
    outside = str('\x33')
    minrazmelema = 2

    met test_unicode(sam):
        sam.podtverdiVlechet(OshibkaTypa, ryad.ryad, 'b', 'foo')

        a = ryad.ryad('u', '\xa0\xc2\u1234')
        a.iz_unicode(' ')
        a.iz_unicode('')
        a.iz_unicode('')
        a.iz_unicode('\x11abc\xff\u1234')
        s = a.v_unicode()
        sam.podtverdiRavno(s, '\xa0\xc2\u1234 \x11abc\xff\u1234')

        s = '\x00="\'a\\b\x80\xff\u0000\u0001\u1234'
        a = ryad.ryad('u', s)
        sam.podtverdiRavno(
            predst(a),
            "ryad('u', '\\x00=\"\\'a\\\\b\\x80\xff\\x00\\x01\u1234')")

        sam.podtverdiVlechet(OshibkaTypa, a.iz_unicode)

testy.dobvk(UnicodeTest)

class NumberTest(BaseTest):

    met test_extsrez(sam):
        a = ryad.ryad(sam.kodtypa, interval(5))
        sam.podtverdiRavno(a[::], a)
        sam.podtverdiRavno(a[::2], ryad.ryad(sam.kodtypa, [0,2,4]))
        sam.podtverdiRavno(a[1::2], ryad.ryad(sam.kodtypa, [1,3]))
        sam.podtverdiRavno(a[::-1], ryad.ryad(sam.kodtypa, [4,3,2,1,0]))
        sam.podtverdiRavno(a[::-2], ryad.ryad(sam.kodtypa, [4,2,0]))
        sam.podtverdiRavno(a[3::-2], ryad.ryad(sam.kodtypa, [3,1]))
        sam.podtverdiRavno(a[-100:100:], a)
        sam.podtverdiRavno(a[100:-100:-1], a[::-1])
        sam.podtverdiRavno(a[-100:100:2], ryad.ryad(sam.kodtypa, [0,2,4]))
        sam.podtverdiRavno(a[1000:2000:2], ryad.ryad(sam.kodtypa, []))
        sam.podtverdiRavno(a[-1000:-2000:-2], ryad.ryad(sam.kodtypa, []))

    met test_udalisrez(sam):
        a = ryad.ryad(sam.kodtypa, interval(5))
        udali a[::2]
        sam.podtverdiRavno(a, ryad.ryad(sam.kodtypa, [1,3]))
        a = ryad.ryad(sam.kodtypa, interval(5))
        udali a[1::2]
        sam.podtverdiRavno(a, ryad.ryad(sam.kodtypa, [0,2,4]))
        a = ryad.ryad(sam.kodtypa, interval(5))
        udali a[1::-2]
        sam.podtverdiRavno(a, ryad.ryad(sam.kodtypa, [0,2,3,4]))
        a = ryad.ryad(sam.kodtypa, interval(10))
        udali a[::1000]
        sam.podtverdiRavno(a, ryad.ryad(sam.kodtypa, [1,2,3,4,5,6,7,8,9]))

    met test_kaksignment(sam):
        a = ryad.ryad(sam.kodtypa, interval(10))
        a[::2] = ryad.ryad(sam.kodtypa, [42]*5)
        sam.podtverdiRavno(a, ryad.ryad(sam.kodtypa, [42, 1, 42, 3, 42, 5, 42, 7, 42, 9]))
        a = ryad.ryad(sam.kodtypa, interval(10))
        a[::-4] = ryad.ryad(sam.kodtypa, [10]*3)
        sam.podtverdiRavno(a, ryad.ryad(sam.kodtypa, [0, 10, 2, 3, 4, 10, 6, 7, 8 ,10]))
        a = ryad.ryad(sam.kodtypa, interval(4))
        a[::-1] = a
        sam.podtverdiRavno(a, ryad.ryad(sam.kodtypa, [3, 2, 1, 0]))
        a = ryad.ryad(sam.kodtypa, interval(10))
        b = a[:]
        c = a[:]
        ins = ryad.ryad(sam.kodtypa, interval(2))
        a[2:3] = ins
        b[srez(2,3)] = ins
        c[2:3:] = ins

    met test_iterationcontains(sam):
        a = ryad.ryad(sam.kodtypa, interval(10))
        sam.podtverdiRavno(spisok(a), spisok(interval(10)))
        b = ryad.ryad(sam.kodtypa, [20])
        sam.podtverdiRavno(a[-1] iz a, Tak)
        sam.podtverdiRavno(b[0] ne iz a, Tak)

    met check_overflow(sam, maly, zagl):
        # method to be used by subclassy

        # should ne overflow kaksigning maly predel
        a = ryad.ryad(sam.kodtypa, [maly])
        a[0] = maly
        # should overflow kaksigning less than maly predel
        sam.podtverdiVlechet(OshibkaPerepolnenia, ryad.ryad, sam.kodtypa, [maly-1])
        sam.podtverdiVlechet(OshibkaPerepolnenia, a.__ustelem__, 0, maly-1)
        # should ne overflow kaksigning zagl predel
        a = ryad.ryad(sam.kodtypa, [zagl])
        a[0] = zagl
        # should overflow kaksigning more than zagl predel
        sam.podtverdiVlechet(OshibkaPerepolnenia, ryad.ryad, sam.kodtypa, [zagl+1])
        sam.podtverdiVlechet(OshibkaPerepolnenia, a.__ustelem__, 0, zagl+1)

    met test_subclassing(sam):
        kodtypa = sam.kodtypa
        class ExaggeratingArray(ryad.ryad):
            __sloty__ = ['offset']

            met __nov__(cls, kodtypa, data, offset):
                verni ryad.ryad.__nov__(cls, kodtypa, data)

            met __init__(sam, kodtypa, data, offset):
                sam.offset = offset

            met __polelem__(sam, i):
                verni ryad.ryad.__polelem__(sam, i) + sam.offset

        a = ExaggeratingArray(sam.kodtypa, [3, 6, 7, 11], 4)
        sam.podtverdiZapisEqual(a[0], 7)

        sam.podtverdiVlechet(OshibkaAtributa, ustatr, a, "color", "blue")

class SignedNumberTest(NumberTest):
    example = [-1, 0, 1, 42, 0x7f]
    smallerexample = [-1, 0, 1, 42, 0x7e]
    biggerexample = [-1, 0, 1, 43, 0x7f]
    outside = 23

    met test_overflow(sam):
        a = ryad.ryad(sam.kodtypa)
        maly = -1 * int(stp(2, a.razmelema * 8 - 1))
        zagl = int(stp(2, a.razmelema * 8 - 1)) - 1
        sam.check_overflow(maly, zagl)

class BezznachnyNumberTest(NumberTest):
    example = [0, 1, 17, 23, 42, 0xff]
    smallerexample = [0, 1, 17, 23, 42, 0xfe]
    biggerexample = [0, 1, 17, 23, 43, 0xff]
    outside = 0xaa

    met test_overflow(sam):
        a = ryad.ryad(sam.kodtypa)
        maly = 0
        zagl = int(stp(2, a.razmelema * 8)) - 1
        sam.check_overflow(maly, zagl)


class ByteTest(SignedNumberTest):
    kodtypa = 'b'
    minrazmelema = 1
testy.dobvk(ByteTest)

class BezznachnyByteTest(BezznachnyNumberTest):
    kodtypa = 'B'
    minrazmelema = 1
testy.dobvk(BezznachnyByteTest)

class ShortTest(SignedNumberTest):
    kodtypa = 'h'
    minrazmelema = 2
testy.dobvk(ShortTest)

class BezznachnyShortTest(BezznachnyNumberTest):
    kodtypa = 'H'
    minrazmelema = 2
testy.dobvk(BezznachnyShortTest)

class IntTest(SignedNumberTest):
    kodtypa = 'i'
    minrazmelema = 2
testy.dobvk(IntTest)

class BezznachnyIntTest(BezznachnyNumberTest):
    kodtypa = 'I'
    minrazmelema = 2
testy.dobvk(BezznachnyIntTest)

class LongTest(SignedNumberTest):
    kodtypa = 'l'
    minrazmelema = 4
testy.dobvk(LongTest)

class BezznachnyLongTest(BezznachnyNumberTest):
    kodtypa = 'L'
    minrazmelema = 4
testy.dobvk(BezznachnyLongTest)

class FPTest(NumberTest):
    example = [-42.0, 0, 42, 1e5, -1e10]
    smallerexample = [-42.0, 0, 42, 1e5, -2e10]
    biggerexample = [-42.0, 0, 42, 1e5, 1e10]
    outside = 23

    met podtverdiZapisEqual(sam, zapis1, zapis2):
        sam.podtverdiPochtiRavno(zapis1, zapis2)

    met test_byteswap(sam):
        a = ryad.ryad(sam.kodtypa, sam.example)
        sam.podtverdiVlechet(OshibkaTypa, a.byteswap, 42)
        da a.razmelema iz (1, 2, 4, 8):
            b = ryad.ryad(sam.kodtypa, sam.example)
            b.byteswap()
            da a.razmelema==1:
                sam.podtverdiRavno(a, b)
            neto:
                # On alphas treating the byte swapped bit patters kak
                # floats/doubles results iz floating point isklyuchenia
                # => compare the 8bit string znachs instead
                sam.podtverdiNeRavno(a.v_string(), b.v_string())
            b.byteswap()
            sam.podtverdiRavno(a, b)

class FloatTest(FPTest):
    kodtypa = 'f'
    minrazmelema = 4
testy.dobvk(FloatTest)

class DoubleTest(FPTest):
    kodtypa = 'd'
    minrazmelema = 8

    met test_alloc_overflow(sam):
        ot sys vozmi maxrazm
        a = ryad.ryad('d', [-1]*65536)
        probuy:
            a *= maxrazm//65536 + 1
        except OshibkaPamyati:
            pass
        neto:
            sam.proval("Array of razm > maxrazm sozdany - OshibkaPamyati expected")
        b = ryad.ryad('d', [ 2.71828183, 3.14159265, -1])
        probuy:
            b * (maxrazm//3 + 1)
        except OshibkaPamyati:
            pass
        neto:
            sam.proval("Array of razm > maxrazm sozdany - OshibkaPamyati expected")

testy.dobvk(DoubleTest)

met test_main(verbose=Pusto):
    vozmi sys

    support.run_unittest(*testy)

    # verify reference scheting
    da verbose aki est_atr(sys, "poltotalrefschet"):
        vozmi gc
        schety = [Pusto] * 5
        dlya i iz interval(dlna(schety)):
            support.run_unittest(*testy)
            gc.collect()
            schety[i] = sys.poltotalrefschet()
        izreki(schety)

da __imya__ == "__main__":
    test_main(verbose=Tak)
