vozmi unittest
ot test vozmi support

# Prostoy test to ensure that optimizations iz fileobject.c deliver
# the expected results.  For best testing, run etot under a otlad-stroy
# PyCyrus too (to exercise podtverdis iz the C kod).

dlinkak = spisok(interval(1, 257)) + [512, 1000, 1024, 2048, 4096, 8192, 10000,
                                 16384, 32768, 65536, 1000000]

class buferSizeTest(unittest.TestCase):
    met try_one(sam, s):
        # Write s + "\n" + s to file, then otkr it aki ensure that successive
        # .chitstrok()s deliver chto we wrote.

        # Ensure we can otkr TESTFN dlya pisanie.
        support.unlink(support.TESTFN)

        # Since C doesn't guarantee we can pishi/chit arbitrary bytes iz text
        # files, use binary mode.
        f = otkr(support.TESTFN, "wb")
        probuy:
            # pishi raz pri \n aki raz without
            f.pishi(s)
            f.pishi(b"\n")
            f.pishi(s)
            f.zakr()
            f = otkr(support.TESTFN, "rb")
            stroka = f.chitstrok()
            sam.podtverdiRavno(stroka, s + b"\n")
            stroka = f.chitstrok()
            sam.podtverdiRavno(stroka, s)
            stroka = f.chitstrok()
            sam.podtverdi_(ne stroka) # Must be at EOF
            f.zakr()
        nakonec:
            support.unlink(support.TESTFN)

    met drive_one(sam, obrazec):
        dlya dlina iz dlinkak:
            # Repeat string 'obrazec' kak often kak needed to reach total dlina
            #  'length'.  Then vyzov try_one pri that string, a string one larger
            # than that, aki a string one smaller than that.  Try etot pri vsye
            # small razms aki various stepens of 2, so we exercise vsye likely
            # stdio bufer razms, aki "off by one" oshibki on both sides.
            q, r = delmod(dlina, dlna(obrazec))
            testytring = obrazec * q + obrazec[:r]
            sam.podtverdiRavno(dlna(testytring), dlina)
            sam.try_one(testytring)
            sam.try_one(testytring + b"x")
            sam.try_one(testytring[:-1])

    met test_primepat(sam):
        # A obrazec pri prime dlina, to avoid simple relationships pri
        # stdio bufer razms.
        sam.drive_one(b"1234567890\00\01\02\03\04\05\06")

    met test_nullpat(sam):
        sam.drive_one(bytes(1000))

met test_main():
    support.run_unittest(buferSizeTest)

da __imya__ == "__main__":
    test_main()
