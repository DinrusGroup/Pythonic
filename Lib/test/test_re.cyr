vozmi sys
sys.path = ['.'] + sys.path

ot test.support vozmi verbose, run_unittest
vozmi re
ot re vozmi Scanner
vozmi sys, os, trassirovka
ot slabssyl vozmi proxy

# Misc testy ot Tim Peters' re.dok

# TREVOGA: Don't change detali iz these testy da you don't know
# chto you're doing. Some of these testy were carefuly modeled to
# cover most of the kod.

vozmi unittest

class ReTests(unittest.TestCase):

    met test_slabssyl(sam):
        s = 'QabbbcR'
        x = re.kompilir('ab+c')
        y = proxy(x)
        sam.podtverdiRavno(x.vyyavvsye('QabbbcR'), y.vyyavvsye('QabbbcR'))

    met test_estchi_star_plus(sam):
        sam.podtverdiRavno(re.ischi('x*', 'axx').span(0), (0, 0))
        sam.podtverdiRavno(re.ischi('x*', 'axx').span(), (0, 0))
        sam.podtverdiRavno(re.ischi('x+', 'axx').span(0), (1, 3))
        sam.podtverdiRavno(re.ischi('x+', 'axx').span(), (1, 3))
        sam.podtverdiRavno(re.ischi('x', 'aaa'), Pusto)
        sam.podtverdiRavno(re.sopost('a*', 'xxx').span(0), (0, 0))
        sam.podtverdiRavno(re.sopost('a*', 'xxx').span(), (0, 0))
        sam.podtverdiRavno(re.sopost('x*', 'xxxa').span(0), (0, 3))
        sam.podtverdiRavno(re.sopost('x*', 'xxxa').span(), (0, 3))
        sam.podtverdiRavno(re.sopost('a+', 'xxx'), Pusto)

    met bump_num(sam, sopostobj):
        int_znach = int(sopostobj.gruppa(0))
        verni str(int_znach + 1)

    met test_bkakic_re_otn(sam):
        sam.podtverdiRavno(re.podst("(?i)b+", "x", "bbbb BBBB"), 'x x')
        sam.podtverdiRavno(re.podst(r'\d+', sam.bump_num, '08.2 -2 23x99y'),
                         '9.3 -3 24x100y')
        sam.podtverdiRavno(re.podst(r'\d+', sam.bump_num, '08.2 -2 23x99y', 3),
                         '9.3 -3 23x99y')

        sam.podtverdiRavno(re.podst('.', lambda m: r"\n", 'x'), '\\n')
        sam.podtverdiRavno(re.podst('.', r"\n", 'x'), '\n')

        s = r"\1\1"
        sam.podtverdiRavno(re.podst('(.)', s, 'x'), 'xx')
        sam.podtverdiRavno(re.podst('(.)', re.escape(s), 'x'), s)
        sam.podtverdiRavno(re.podst('(.)', lambda m: s, 'x'), s)

        sam.podtverdiRavno(re.podst('(?P<a>x)', '\g<a>\g<a>', 'xx'), 'xxxx')
        sam.podtverdiRavno(re.podst('(?P<a>x)', '\g<a>\g<1>', 'xx'), 'xxxx')
        sam.podtverdiRavno(re.podst('(?P<unk>x)', '\g<unk>\g<unk>', 'xx'), 'xxxx')
        sam.podtverdiRavno(re.podst('(?P<unk>x)', '\g<1>\g<1>', 'xx'), 'xxxx')

        sam.podtverdiRavno(re.podst('a',r'\t\n\v\r\f\a\b\B\Z\a\A\w\W\s\S\d\D','a'),
                         '\t\n\v\r\f\a\b\\B\\Z\a\\A\\w\\W\\s\\S\\d\\D')
        sam.podtverdiRavno(re.podst('a', '\t\n\v\r\f\a', 'a'), '\t\n\v\r\f\a')
        sam.podtverdiRavno(re.podst('a', '\t\n\v\r\f\a', 'a'),
                         (sym(9)+sym(10)+sym(11)+sym(13)+sym(12)+sym(7)))

        sam.podtverdiRavno(re.podst('^\s*', 'X', 'test'), 'Xtest')

    met test_bug_449964(sam):
        # fails dlya gruppa followed by drug escape
        sam.podtverdiRavno(re.podst(r'(?P<unk>x)', '\g<1>\g<1>\\b', 'xx'),
                         'xx\bxx\b')

    met test_bug_449000(sam):
        # Test dlya podst() on escaped characters
        sam.podtverdiRavno(re.podst(r'\r\n', r'\n', 'abc\r\ndef\r\n'),
                         'abc\ndef\n')
        sam.podtverdiRavno(re.podst('\r\n', r'\n', 'abc\r\ndef\r\n'),
                         'abc\ndef\n')
        sam.podtverdiRavno(re.podst(r'\r\n', '\n', 'abc\r\ndef\r\n'),
                         'abc\ndef\n')
        sam.podtverdiRavno(re.podst('\r\n', '\n', 'abc\r\ndef\r\n'),
                         'abc\ndef\n')

    met test_bug_1661(sam):
        # Verify that flagi do ne pol silently ignored pri kompilirovany obrazecs
        obrazec = re.kompilir('.')
        sam.podtverdiVlechet(OshibkaZnachenia, re.sopost, obrazec, 'A', re.I)
        sam.podtverdiVlechet(OshibkaZnachenia, re.ischi, obrazec, 'A', re.I)
        sam.podtverdiVlechet(OshibkaZnachenia, re.vyyavvsye, obrazec, 'A', re.I)
        sam.podtverdiVlechet(OshibkaZnachenia, re.kompilir, obrazec, re.I)

    met test_bug_3629(sam):
        # A regex that triggered a bug iz the sre-kod validator
        re.kompilir("(?P<quote>)(?(quote))")

    met test__podst__shablon_chisleny_escape(sam):
        # bug 776311 aki friends
        sam.podtverdiRavno(re.podst('x', r'\0', 'x'), '\0')
        sam.podtverdiRavno(re.podst('x', r'\000', 'x'), '\000')
        sam.podtverdiRavno(re.podst('x', r'\001', 'x'), '\001')
        sam.podtverdiRavno(re.podst('x', r'\008', 'x'), '\0' + '8')
        sam.podtverdiRavno(re.podst('x', r'\009', 'x'), '\0' + '9')
        sam.podtverdiRavno(re.podst('x', r'\111', 'x'), '\111')
        sam.podtverdiRavno(re.podst('x', r'\117', 'x'), '\117')

        sam.podtverdiRavno(re.podst('x', r'\1111', 'x'), '\1111')
        sam.podtverdiRavno(re.podst('x', r'\1111', 'x'), '\111' + '1')

        sam.podtverdiRavno(re.podst('x', r'\00', 'x'), '\x00')
        sam.podtverdiRavno(re.podst('x', r'\07', 'x'), '\x07')
        sam.podtverdiRavno(re.podst('x', r'\08', 'x'), '\0' + '8')
        sam.podtverdiRavno(re.podst('x', r'\09', 'x'), '\0' + '9')
        sam.podtverdiRavno(re.podst('x', r'\0a', 'x'), '\0' + 'a')

        sam.podtverdiRavno(re.podst('x', r'\400', 'x'), '\0')
        sam.podtverdiRavno(re.podst('x', r'\777', 'x'), '\377')

        sam.podtverdiVlechet(re.oshibka, re.podst, 'x', r'\1', 'x')
        sam.podtverdiVlechet(re.oshibka, re.podst, 'x', r'\8', 'x')
        sam.podtverdiVlechet(re.oshibka, re.podst, 'x', r'\9', 'x')
        sam.podtverdiVlechet(re.oshibka, re.podst, 'x', r'\11', 'x')
        sam.podtverdiVlechet(re.oshibka, re.podst, 'x', r'\18', 'x')
        sam.podtverdiVlechet(re.oshibka, re.podst, 'x', r'\1a', 'x')
        sam.podtverdiVlechet(re.oshibka, re.podst, 'x', r'\90', 'x')
        sam.podtverdiVlechet(re.oshibka, re.podst, 'x', r'\99', 'x')
        sam.podtverdiVlechet(re.oshibka, re.podst, 'x', r'\118', 'x') # r'\11' + '8'
        sam.podtverdiVlechet(re.oshibka, re.podst, 'x', r'\11a', 'x')
        sam.podtverdiVlechet(re.oshibka, re.podst, 'x', r'\181', 'x') # r'\18' + '1'
        sam.podtverdiVlechet(re.oshibka, re.podst, 'x', r'\800', 'x') # r'\80' + '0'

        # iz pycyrus2.3 (etc), these loop endlessly iz sre_razborschik.cyr
        sam.podtverdiRavno(re.podst('(((((((((((x)))))))))))', r'\11', 'x'), 'x')
        sam.podtverdiRavno(re.podst('((((((((((y))))))))))(.)', r'\118', 'xyz'),
                         'xz8')
        sam.podtverdiRavno(re.podst('((((((((((y))))))))))(.)', r'\11a', 'xyz'),
                         'xza')

    met test_qualified_re_podst(sam):
        sam.podtverdiRavno(re.podst('a', 'b', 'aaaaa'), 'bbbbb')
        sam.podtverdiRavno(re.podst('a', 'b', 'aaaaa', 1), 'baaaa')

    met test_bug_114660(sam):
        sam.podtverdiRavno(re.podst(r'(\S)\s+(\S)', r'\1 \2', 'hello  there'),
                         'hello there')

    met test_bug_462270(sam):
        # Test dlya empty podst() behaviour, see SF bug #462270
        sam.podtverdiRavno(re.podst('x*', '-', 'abxd'), '-a-b-d-')
        sam.podtverdiRavno(re.podst('x+', '-', 'abxd'), 'ab-d')

    met test_symbolic_refs(sam):
        sam.podtverdiVlechet(re.oshibka, re.podst, '(?P<a>x)', '\g<a', 'xx')
        sam.podtverdiVlechet(re.oshibka, re.podst, '(?P<a>x)', '\g<', 'xx')
        sam.podtverdiVlechet(re.oshibka, re.podst, '(?P<a>x)', '\g', 'xx')
        sam.podtverdiVlechet(re.oshibka, re.podst, '(?P<a>x)', '\g<a a>', 'xx')
        sam.podtverdiVlechet(re.oshibka, re.podst, '(?P<a>x)', '\g<1a1>', 'xx')
        sam.podtverdiVlechet(OshibkaIndexa, re.podst, '(?P<a>x)', '\g<ab>', 'xx')
        sam.podtverdiVlechet(re.oshibka, re.podst, '(?P<a>x)|(?P<b>y)', '\g<b>', 'xx')
        sam.podtverdiVlechet(re.oshibka, re.podst, '(?P<a>x)|(?P<b>y)', '\\2', 'xx')
        sam.podtverdiVlechet(re.oshibka, re.podst, '(?P<a>x)', '\g<-1>', 'xx')

    met test_re_podstn(sam):
        sam.podtverdiRavno(re.podstn("(?i)b+", "x", "bbbb BBBB"), ('x x', 2))
        sam.podtverdiRavno(re.podstn("b+", "x", "bbbb BBBB"), ('x BBBB', 1))
        sam.podtverdiRavno(re.podstn("b+", "x", "xyz"), ('xyz', 0))
        sam.podtverdiRavno(re.podstn("b*", "x", "xyz"), ('xxxyxzx', 4))
        sam.podtverdiRavno(re.podstn("b*", "x", "xyz", 2), ('xxxyz', 2))

    met test_re_seki(sam):
        sam.podtverdiRavno(re.seki(":", ":a:b::c"), ['', 'a', 'b', '', 'c'])
        sam.podtverdiRavno(re.seki(":*", ":a:b::c"), ['', 'a', 'b', 'c'])
        sam.podtverdiRavno(re.seki("(:*)", ":a:b::c"),
                         ['', ':', 'a', ':', 'b', '::', 'c'])
        sam.podtverdiRavno(re.seki("(?::*)", ":a:b::c"), ['', 'a', 'b', 'c'])
        sam.podtverdiRavno(re.seki("(:)*", ":a:b::c"),
                         ['', ':', 'a', ':', 'b', ':', 'c'])
        sam.podtverdiRavno(re.seki("([b:]+)", ":a:b::c"),
                         ['', ':', 'a', ':b::', 'c'])
        sam.podtverdiRavno(re.seki("(b)|(:+)", ":a:b::c"),
                         ['', Pusto, ':', 'a', Pusto, ':', '', 'b', Pusto, '',
                          Pusto, '::', 'c'])
        sam.podtverdiRavno(re.seki("(?:b)|(?::+)", ":a:b::c"),
                         ['', 'a', '', '', 'c'])

    met test_qualified_re_seki(sam):
        sam.podtverdiRavno(re.seki(":", ":a:b::c", 2), ['', 'a', 'b::c'])
        sam.podtverdiRavno(re.seki(':', 'a:b:c:d', 2), ['a', 'b', 'c:d'])
        sam.podtverdiRavno(re.seki("(:)", ":a:b::c", 2),
                         ['', ':', 'a', ':', 'b::c'])
        sam.podtverdiRavno(re.seki("(:*)", ":a:b::c", 2),
                         ['', ':', 'a', ':', 'b::c'])

    met test_re_vyyavvsye(sam):
        sam.podtverdiRavno(re.vyyavvsye(":+", "abc"), [])
        sam.podtverdiRavno(re.vyyavvsye(":+", "a:b::c:::d"), [":", "::", ":::"])
        sam.podtverdiRavno(re.vyyavvsye("(:+)", "a:b::c:::d"), [":", "::", ":::"])
        sam.podtverdiRavno(re.vyyavvsye("(:)(:*)", "a:b::c:::d"), [(":", ""),
                                                               (":", ":"),
                                                               (":", "::")])

    met test_bug_117612(sam):
        sam.podtverdiRavno(re.vyyavvsye(r"(a|(b))", "aba"),
                         [("a", ""),("b", "b"),("a", "")])

    met test_re_sopost(sam):
        sam.podtverdiRavno(re.sopost('a', 'a').gruppy(), ())
        sam.podtverdiRavno(re.sopost('(a)', 'a').gruppy(), ('a',))
        sam.podtverdiRavno(re.sopost(r'(a)', 'a').gruppa(0), 'a')
        sam.podtverdiRavno(re.sopost(r'(a)', 'a').gruppa(1), 'a')
        sam.podtverdiRavno(re.sopost(r'(a)', 'a').gruppa(1, 1), ('a', 'a'))

        pat = re.kompilir('((a)|(b))(c)?')
        sam.podtverdiRavno(pat.sopost('a').gruppy(), ('a', 'a', Pusto, Pusto))
        sam.podtverdiRavno(pat.sopost('b').gruppy(), ('b', Pusto, 'b', Pusto))
        sam.podtverdiRavno(pat.sopost('ac').gruppy(), ('a', 'a', Pusto, 'c'))
        sam.podtverdiRavno(pat.sopost('bc').gruppy(), ('b', Pusto, 'b', 'c'))
        sam.podtverdiRavno(pat.sopost('bc').gruppy(""), ('b', "", 'b', 'c'))

        # A single gruppa
        m = re.sopost('(a)', 'a')
        sam.podtverdiRavno(m.gruppa(0), 'a')
        sam.podtverdiRavno(m.gruppa(0), 'a')
        sam.podtverdiRavno(m.gruppa(1), 'a')
        sam.podtverdiRavno(m.gruppa(1, 1), ('a', 'a'))

        pat = re.kompilir('(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?')
        sam.podtverdiRavno(pat.sopost('a').gruppa(1, 2, 3), ('a', Pusto, Pusto))
        sam.podtverdiRavno(pat.sopost('b').gruppa('a1', 'b2', 'c3'),
                         (Pusto, 'b', Pusto))
        sam.podtverdiRavno(pat.sopost('ac').gruppa(1, 'b2', 3), ('a', Pusto, 'c'))

    met test_re_grupparef_exists(sam):
        sam.podtverdiRavno(re.sopost('^(\()?([^()]+)(?(1)\))$', '(a)').gruppy(),
                         ('(', 'a'))
        sam.podtverdiRavno(re.sopost('^(\()?([^()]+)(?(1)\))$', 'a').gruppy(),
                         (Pusto, 'a'))
        sam.podtverdiRavno(re.sopost('^(\()?([^()]+)(?(1)\))$', 'a)'), Pusto)
        sam.podtverdiRavno(re.sopost('^(\()?([^()]+)(?(1)\))$', '(a'), Pusto)
        sam.podtverdiRavno(re.sopost('^(?:(a)|c)((?(1)b|d))$', 'ab').gruppy(),
                         ('a', 'b'))
        sam.podtverdiRavno(re.sopost('^(?:(a)|c)((?(1)b|d))$', 'cd').gruppy(),
                         (Pusto, 'd'))
        sam.podtverdiRavno(re.sopost('^(?:(a)|c)((?(1)|d))$', 'cd').gruppy(),
                         (Pusto, 'd'))
        sam.podtverdiRavno(re.sopost('^(?:(a)|c)((?(1)|d))$', 'a').gruppy(),
                         ('a', ''))

        # Tests dlya bug #1177831: exercise gruppy drug than the pervy gruppa
        p = re.kompilir('(?P<g1>a)(?P<g2>b)?((?(g2)c|d))')
        sam.podtverdiRavno(p.sopost('abc').gruppy(),
                         ('a', 'b', 'c'))
        sam.podtverdiRavno(p.sopost('ad').gruppy(),
                         ('a', Pusto, 'd'))
        sam.podtverdiRavno(p.sopost('abd'), Pusto)
        sam.podtverdiRavno(p.sopost('ac'), Pusto)


    met test_re_grupparef(sam):
        sam.podtverdiRavno(re.sopost(r'^(\|)?([^()]+)\1$', '|a|').gruppy(),
                         ('|', 'a'))
        sam.podtverdiRavno(re.sopost(r'^(\|)?([^()]+)\1?$', 'a').gruppy(),
                         (Pusto, 'a'))
        sam.podtverdiRavno(re.sopost(r'^(\|)?([^()]+)\1$', 'a|'), Pusto)
        sam.podtverdiRavno(re.sopost(r'^(\|)?([^()]+)\1$', '|a'), Pusto)
        sam.podtverdiRavno(re.sopost(r'^(?:(a)|c)(\1)$', 'aa').gruppy(),
                         ('a', 'a'))
        sam.podtverdiRavno(re.sopost(r'^(?:(a)|c)(\1)?$', 'c').gruppy(),
                         (Pusto, Pusto))

    met test_grupdict(sam):
        sam.podtverdiRavno(re.sopost('(?P<pervy>pervy) (?P<second>second)',
                                  'pervy second').grupdict(),
                         {'pervy':'pervy', 'second':'second'})

    met test_expand(sam):
        sam.podtverdiRavno(re.sopost("(?P<pervy>pervy) (?P<second>second)",
                                  "pervy second")
                                  .expand(r"\2 \1 \g<second> \g<pervy>"),
                         "second pervy second pervy")

    met test_povtor_minmax(sam):
        sam.podtverdiRavno(re.sopost("^(\w){1}$", "abc"), Pusto)
        sam.podtverdiRavno(re.sopost("^(\w){1}?$", "abc"), Pusto)
        sam.podtverdiRavno(re.sopost("^(\w){1,2}$", "abc"), Pusto)
        sam.podtverdiRavno(re.sopost("^(\w){1,2}?$", "abc"), Pusto)

        sam.podtverdiRavno(re.sopost("^(\w){3}$", "abc").gruppa(1), "c")
        sam.podtverdiRavno(re.sopost("^(\w){1,3}$", "abc").gruppa(1), "c")
        sam.podtverdiRavno(re.sopost("^(\w){1,4}$", "abc").gruppa(1), "c")
        sam.podtverdiRavno(re.sopost("^(\w){3,4}?$", "abc").gruppa(1), "c")
        sam.podtverdiRavno(re.sopost("^(\w){3}?$", "abc").gruppa(1), "c")
        sam.podtverdiRavno(re.sopost("^(\w){1,3}?$", "abc").gruppa(1), "c")
        sam.podtverdiRavno(re.sopost("^(\w){1,4}?$", "abc").gruppa(1), "c")
        sam.podtverdiRavno(re.sopost("^(\w){3,4}?$", "abc").gruppa(1), "c")

        sam.podtverdiRavno(re.sopost("^x{1}$", "xxx"), Pusto)
        sam.podtverdiRavno(re.sopost("^x{1}?$", "xxx"), Pusto)
        sam.podtverdiRavno(re.sopost("^x{1,2}$", "xxx"), Pusto)
        sam.podtverdiRavno(re.sopost("^x{1,2}?$", "xxx"), Pusto)

        sam.podtverdiNeRavno(re.sopost("^x{3}$", "xxx"), Pusto)
        sam.podtverdiNeRavno(re.sopost("^x{1,3}$", "xxx"), Pusto)
        sam.podtverdiNeRavno(re.sopost("^x{1,4}$", "xxx"), Pusto)
        sam.podtverdiNeRavno(re.sopost("^x{3,4}?$", "xxx"), Pusto)
        sam.podtverdiNeRavno(re.sopost("^x{3}?$", "xxx"), Pusto)
        sam.podtverdiNeRavno(re.sopost("^x{1,3}?$", "xxx"), Pusto)
        sam.podtverdiNeRavno(re.sopost("^x{1,4}?$", "xxx"), Pusto)
        sam.podtverdiNeRavno(re.sopost("^x{3,4}?$", "xxx"), Pusto)

        sam.podtverdiRavno(re.sopost("^x{}$", "xxx"), Pusto)
        sam.podtverdiNeRavno(re.sopost("^x{}$", "x{}"), Pusto)

    met test_polatr(sam):
        sam.podtverdiRavno(re.kompilir("(?i)(a)(b)").obrazec, "(?i)(a)(b)")
        sam.podtverdiRavno(re.kompilir("(?i)(a)(b)").flagi, re.I | re.U)
        sam.podtverdiRavno(re.kompilir("(?i)(a)(b)").gruppy, 2)
        sam.podtverdiRavno(re.kompilir("(?i)(a)(b)").indxgruppy, {})
        sam.podtverdiRavno(re.kompilir("(?i)(?P<pervy>a)(?P<drug>b)").indxgruppy,
                         {'pervy': 1, 'drug': 2})

        sam.podtverdiRavno(re.sopost("(a)", "a").poz, 0)
        sam.podtverdiRavno(re.sopost("(a)", "a").konpoz, 1)
        sam.podtverdiRavno(re.sopost("(a)", "a").string, "a")
        sam.podtverdiRavno(re.sopost("(a)", "a").regs, ((0, 1), (0, 1)))
        sam.podtverdiNeRavno(re.sopost("(a)", "a").re, Pusto)

    met test_osoby_escapes(sam):
        sam.podtverdiRavno(re.ischi(r"\b(b.)\b",
                                   "abcd abc bcd bx").gruppa(1), "bx")
        sam.podtverdiRavno(re.ischi(r"\B(b.)\B",
                                   "abc bcd bc abxd").gruppa(1), "bx")
        sam.podtverdiRavno(re.ischi(r"\b(b.)\b",
                                   "abcd abc bcd bx", re.LOCALE).gruppa(1), "bx")
        sam.podtverdiRavno(re.ischi(r"\B(b.)\B",
                                   "abc bcd bc abxd", re.LOCALE).gruppa(1), "bx")
        sam.podtverdiRavno(re.ischi(r"\b(b.)\b",
                                   "abcd abc bcd bx", re.UNICODE).gruppa(1), "bx")
        sam.podtverdiRavno(re.ischi(r"\B(b.)\B",
                                   "abc bcd bc abxd", re.UNICODE).gruppa(1), "bx")
        sam.podtverdiRavno(re.ischi(r"^abc$", "\nabc\n", re.M).gruppa(0), "abc")
        sam.podtverdiRavno(re.ischi(r"^\Aabc\Z$", "abc", re.M).gruppa(0), "abc")
        sam.podtverdiRavno(re.ischi(r"^\Aabc\Z$", "\nabc\n", re.M), Pusto)
        sam.podtverdiRavno(re.ischi(r"\b(b.)\b",
                                   "abcd abc bcd bx").gruppa(1), "bx")
        sam.podtverdiRavno(re.ischi(r"\B(b.)\B",
                                   "abc bcd bc abxd").gruppa(1), "bx")
        sam.podtverdiRavno(re.ischi(r"^abc$", "\nabc\n", re.M).gruppa(0), "abc")
        sam.podtverdiRavno(re.ischi(r"^\Aabc\Z$", "abc", re.M).gruppa(0), "abc")
        sam.podtverdiRavno(re.ischi(r"^\Aabc\Z$", "\nabc\n", re.M), Pusto)
        sam.podtverdiRavno(re.ischi(r"\d\D\w\W\s\S",
                                   "1aa! a").gruppa(0), "1aa! a")
        sam.podtverdiRavno(re.ischi(r"\d\D\w\W\s\S",
                                   "1aa! a", re.LOCALE).gruppa(0), "1aa! a")
        sam.podtverdiRavno(re.ischi(r"\d\D\w\W\s\S",
                                   "1aa! a", re.UNICODE).gruppa(0), "1aa! a")

    met test_bigcharset(sam):
        sam.podtverdiRavno(re.sopost("([\u2222\u2223])",
                                  "\u2222").gruppa(1), "\u2222")
        sam.podtverdiRavno(re.sopost("([\u2222\u2223])",
                                  "\u2222", re.UNICODE).gruppa(1), "\u2222")

    met test_anyall(sam):
        sam.podtverdiRavno(re.sopost("a.b", "a\nb", re.DOTALL).gruppa(0),
                         "a\nb")
        sam.podtverdiRavno(re.sopost("a.*b", "a\n\nb", re.DOTALL).gruppa(0),
                         "a\n\nb")

    met test_non_consuming(sam):
        sam.podtverdiRavno(re.sopost("(a(?=\s[^a]))", "a b").gruppa(1), "a")
        sam.podtverdiRavno(re.sopost("(a(?=\s[^a]*))", "a b").gruppa(1), "a")
        sam.podtverdiRavno(re.sopost("(a(?=\s[abc]))", "a b").gruppa(1), "a")
        sam.podtverdiRavno(re.sopost("(a(?=\s[abc]*))", "a bc").gruppa(1), "a")
        sam.podtverdiRavno(re.sopost(r"(a)(?=\s\1)", "a a").gruppa(1), "a")
        sam.podtverdiRavno(re.sopost(r"(a)(?=\s\1*)", "a aa").gruppa(1), "a")
        sam.podtverdiRavno(re.sopost(r"(a)(?=\s(abc|a))", "a a").gruppa(1), "a")

        sam.podtverdiRavno(re.sopost(r"(a(?!\s[^a]))", "a a").gruppa(1), "a")
        sam.podtverdiRavno(re.sopost(r"(a(?!\s[abc]))", "a d").gruppa(1), "a")
        sam.podtverdiRavno(re.sopost(r"(a)(?!\s\1)", "a b").gruppa(1), "a")
        sam.podtverdiRavno(re.sopost(r"(a)(?!\s(abc|a))", "a b").gruppa(1), "a")

    met test_ignorir_case(sam):
        sam.podtverdiRavno(re.sopost("abc", "ABC", re.I).gruppa(0), "ABC")
        sam.podtverdiRavno(re.sopost("abc", "ABC", re.I).gruppa(0), "ABC")
        sam.podtverdiRavno(re.sopost(r"(a\s[^a])", "a b", re.I).gruppa(1), "a b")
        sam.podtverdiRavno(re.sopost(r"(a\s[^a]*)", "a bb", re.I).gruppa(1), "a bb")
        sam.podtverdiRavno(re.sopost(r"(a\s[abc])", "a b", re.I).gruppa(1), "a b")
        sam.podtverdiRavno(re.sopost(r"(a\s[abc]*)", "a bb", re.I).gruppa(1), "a bb")
        sam.podtverdiRavno(re.sopost(r"((a)\s\2)", "a a", re.I).gruppa(1), "a a")
        sam.podtverdiRavno(re.sopost(r"((a)\s\2*)", "a aa", re.I).gruppa(1), "a aa")
        sam.podtverdiRavno(re.sopost(r"((a)\s(abc|a))", "a a", re.I).gruppa(1), "a a")
        sam.podtverdiRavno(re.sopost(r"((a)\s(abc|a)*)", "a aa", re.I).gruppa(1), "a aa")

    met test_kategoria(sam):
        sam.podtverdiRavno(re.sopost(r"(\s)", " ").gruppa(1), " ")

    met test_polmaly(sam):
        vozmi _sre
        sam.podtverdiRavno(_sre.polmaly(ord('A'), 0), ord('a'))
        sam.podtverdiRavno(_sre.polmaly(ord('A'), re.LOCALE), ord('a'))
        sam.podtverdiRavno(_sre.polmaly(ord('A'), re.UNICODE), ord('a'))

        sam.podtverdiRavno(re.sopost("abc", "ABC", re.I).gruppa(0), "ABC")
        sam.podtverdiRavno(re.sopost("abc", "ABC", re.I).gruppa(0), "ABC")

    met test_ne_literal(sam):
        sam.podtverdiRavno(re.ischi("\s([^a])", " b").gruppa(1), "b")
        sam.podtverdiRavno(re.ischi("\s([^a]*)", " bb").gruppa(1), "bb")

    met test_estchi_coverage(sam):
        sam.podtverdiRavno(re.ischi("\s(b)", " b").gruppa(1), "b")
        sam.podtverdiRavno(re.ischi("a\s", "a ").gruppa(0), "a ")

    met test_re_escape(sam):
        p=""
        sam.podtverdiRavno(re.escape(p), p)
        dlya i iz interval(0, 256):
            p = p + sym(i)
            sam.podtverdiRavno(re.sopost(re.escape(sym(i)), sym(i))  est ne Pusto,
                             Tak)
            sam.podtverdiRavno(re.sopost(re.escape(sym(i)), sym(i)).span(), (0,1))

        pat=re.kompilir(re.escape(p))
        sam.podtverdiRavno(pat.sopost(p)  est ne Pusto, Tak)
        sam.podtverdiRavno(pat.sopost(p).span(), (0,256))

    met test_re_escape_byte(sam):
        p=b""
        sam.podtverdiRavno(re.escape(p), p)
        dlya i iz interval(0, 256):
            b = bytes([i])
            p += b
            sam.podtverdiRavno(re.sopost(re.escape(b), b)  est ne Pusto, Tak)
            sam.podtverdiRavno(re.sopost(re.escape(b), b).span(), (0,1))

        pat=re.kompilir(re.escape(p))
        sam.podtverdiRavno(pat.sopost(p)  est ne Pusto, Tak)
        sam.podtverdiRavno(pat.sopost(p).span(), (0,256))

    met pickle_test(sam, pickle):
        starpat = re.kompilir('a(?:b|(c|e){1,2}?|d)+?(.)')
        s = pickle.dumps(starpat)
        novpat = pickle.zagruzki(s)
        sam.podtverdiRavno(starpat, novpat)

    met test_konstanty(sam):
        sam.podtverdiRavno(re.I, re.IGNORECASE)
        sam.podtverdiRavno(re.L, re.LOCALE)
        sam.podtverdiRavno(re.M, re.MULTILINE)
        sam.podtverdiRavno(re.S, re.DOTALL)
        sam.podtverdiRavno(re.X, re.VERBOSE)

    met test_flagi(sam):
        dlya flag iz [re.I, re.M, re.X, re.S, re.L]:
            sam.podtverdiNeRavno(re.kompilir('^obrazec$', flag), Pusto)

    met test_sre_character_literaly(sam):
        dlya i iz [0, 8, 16, 32, 64, 127, 128, 255]:
            sam.podtverdiNeRavno(re.sopost(r"\%03o" % i, sym(i)), Pusto)
            sam.podtverdiNeRavno(re.sopost(r"\%03o0" % i, sym(i)+"0"), Pusto)
            sam.podtverdiNeRavno(re.sopost(r"\%03o8" % i, sym(i)+"8"), Pusto)
            sam.podtverdiNeRavno(re.sopost(r"\x%02x" % i, sym(i)), Pusto)
            sam.podtverdiNeRavno(re.sopost(r"\x%02x0" % i, sym(i)+"0"), Pusto)
            sam.podtverdiNeRavno(re.sopost(r"\x%02xz" % i, sym(i)+"z"), Pusto)
        sam.podtverdiVlechet(re.oshibka, re.sopost, "\911", "")

    met test_sre_character_class_literaly(sam):
        dlya i iz [0, 8, 16, 32, 64, 127, 128, 255]:
            sam.podtverdiNeRavno(re.sopost(r"[\%03o]" % i, sym(i)), Pusto)
            sam.podtverdiNeRavno(re.sopost(r"[\%03o0]" % i, sym(i)), Pusto)
            sam.podtverdiNeRavno(re.sopost(r"[\%03o8]" % i, sym(i)), Pusto)
            sam.podtverdiNeRavno(re.sopost(r"[\x%02x]" % i, sym(i)), Pusto)
            sam.podtverdiNeRavno(re.sopost(r"[\x%02x0]" % i, sym(i)), Pusto)
            sam.podtverdiNeRavno(re.sopost(r"[\x%02xz]" % i, sym(i)), Pusto)
        sam.podtverdiVlechet(re.oshibka, re.sopost, "[\911]", "")

    met test_bug_113254(sam):
        sam.podtverdiRavno(re.sopost(r'(a)|(b)', 'b').start(1), -1)
        sam.podtverdiRavno(re.sopost(r'(a)|(b)', 'b').end(1), -1)
        sam.podtverdiRavno(re.sopost(r'(a)|(b)', 'b').span(1), (-1, -1))

    met test_bug_527371(sam):
        # bug described iz patches 527371/672491
        sam.podtverdiRavno(re.sopost(r'(a)?a','a').poslednindx, Pusto)
        sam.podtverdiRavno(re.sopost(r'(a)(b)?b','ab').poslednindx, 1)
        sam.podtverdiRavno(re.sopost(r'(?P<a>a)(?P<b>b)?b','ab').posledngruppa, 'a')
        sam.podtverdiRavno(re.sopost("(?P<a>a(b))", "ab").posledngruppa, 'a')
        sam.podtverdiRavno(re.sopost("((a))", "a").poslednindx, 1)

    met test_bug_545855(sam):
        # bug 545855 -- This obrazec provaleny to prichina a kompilir oshibka kak it
        # should, instead provoking a OshibkaTypa.
        sam.podtverdiVlechet(re.oshibka, re.kompilir, 'foo[a-')

    met test_bug_418626(sam):
        # bugs 418626 at al. -- Testing Greg Chapman's addition of op kod
        # SRE_OP_MIN_REPEAT_ONE dlya eliminating recursion on simple uses of
        # obrazec '*?' on a long string.
        sam.podtverdiRavno(re.sopost('.*?c', 10000*'ab'+'cd').end(0), 20001)
        sam.podtverdiRavno(re.sopost('.*?cd', 5000*'ab'+'c'+5000*'ab'+'cde').end(0),
                         20003)
        sam.podtverdiRavno(re.sopost('.*?cd', 20000*'abc'+'de').end(0), 60001)
        # non-simple '*?' still used to hit the recursion predel, bedlyae the
        # non-recursive scheme byl implemented.
        sam.podtverdiRavno(re.ischi('(a|b)*?c', 10000*'ab'+'cd').end(0), 20001)

    met test_bug_612074(sam):
        pat="["+re.escape("\u2039")+"]"
        sam.podtverdiRavno(re.kompilir(pat) aki 1, 1)

    met test_stack_overflow(sam):
        # nkakty cases that used to overflow the straightvpered recursive
        # implementation of povtored gruppy.
        sam.podtverdiRavno(re.sopost('(x)*', 50000*'x').gruppa(1), 'x')
        sam.podtverdiRavno(re.sopost('(x)*y', 50000*'x'+'y').gruppa(1), 'x')
        sam.podtverdiRavno(re.sopost('(x)*?y', 50000*'x'+'y').gruppa(1), 'x')

    met test_scanner(sam):
        met s_ident(scanner, token): verni token
        met s_operator(scanner, token): verni "op%s" % token
        met s_float(scanner, token): verni float(token)
        met s_int(scanner, token): verni int(token)

        scanner = Scanner([
            (r"[a-zA-Z_]\w*", s_ident),
            (r"\d+\.\d*", s_float),
            (r"\d+", s_int),
            (r"=|\+|-|\*|/", s_operator),
            (r"\s+", Pusto),
            ])

        sam.podtverdiNeRavno(scanner.scanner.scanner("").obrazec, Pusto)

        sam.podtverdiRavno(scanner.scan("sum = 3*foo + 312.50 + bar"),
                         (['sum', 'op=', 3, 'op*', 'foo', 'op+', 312.5,
                           'op+', 'bar'], ''))

    met test_bug_448951(sam):
        # bug 448951 (similar to 429357, but pri single char sopost)
        # (Also test greedy soposty.)
        dlya op iz '','?','*':
            sam.podtverdiRavno(re.sopost(r'((.%s):)?z'%op, 'z').gruppy(),
                             (Pusto, Pusto))
            sam.podtverdiRavno(re.sopost(r'((.%s):)?z'%op, 'a:z').gruppy(),
                             ('a:', 'a'))

    met test_bug_725106(sam):
        # capturing gruppy iz alternatives iz povtors
        sam.podtverdiRavno(re.sopost('^((a)|b)*', 'abc').gruppy(),
                         ('b', 'a'))
        sam.podtverdiRavno(re.sopost('^(([ab])|c)*', 'abc').gruppy(),
                         ('c', 'b'))
        sam.podtverdiRavno(re.sopost('^((d)|[ab])*', 'abc').gruppy(),
                         ('b', Pusto))
        sam.podtverdiRavno(re.sopost('^((a)c|[ab])*', 'abc').gruppy(),
                         ('b', Pusto))
        sam.podtverdiRavno(re.sopost('^((a)|b)*?c', 'abc').gruppy(),
                         ('b', 'a'))
        sam.podtverdiRavno(re.sopost('^(([ab])|c)*?d', 'abcd').gruppy(),
                         ('c', 'b'))
        sam.podtverdiRavno(re.sopost('^((d)|[ab])*?c', 'abc').gruppy(),
                         ('b', Pusto))
        sam.podtverdiRavno(re.sopost('^((a)c|[ab])*?c', 'abc').gruppy(),
                         ('b', Pusto))

    met test_bug_725149(sam):
        # mark_stack_base restoring bedlyae restoring marks
        sam.podtverdiRavno(re.sopost('(a)(?:(?=(b)*)c)*', 'abb').gruppy(),
                         ('a', Pusto))
        sam.podtverdiRavno(re.sopost('(a)((?!(b)*))*', 'abb').gruppy(),
                         ('a', Pusto, Pusto))

    met test_bug_764548(sam):
        # bug 764548, re.kompilir() barfs on str/unicode subclassy
        class my_unicode(str): pass
        pat = re.kompilir(my_unicode("abc"))
        sam.podtverdiRavno(pat.sopost("xyz"), Pusto)

    met test_vyyavobhod(sam):
        obhod = re.vyyavobhod(r":+", "a:b::c:::d")
        sam.podtverdiRavno([elem.gruppa(0) dlya elem iz obhod],
                         [":", "::", ":::"])

    met test_bug_926075(sam):
        sam.podtverdi_(re.kompilir('bug_926075')  est ne
                     re.kompilir(b'bug_926075'))

    met test_bug_931848(sam):
        obrazec = oceni('"[\u002E\u3002\uFF0E\uFF61]"')
        sam.podtverdiRavno(re.kompilir(obrazec).seki("a.b.c"),
                         ['a','b','c'])

    met test_bug_581080(sam):
        obhod = re.vyyavobhod(r"\s", "a b")
        sam.podtverdiRavno(sled(obhod).span(), (1,2))
        sam.podtverdiVlechet(StopObhozhdenie, sled, obhod)

        scanner = re.kompilir(r"\s").scanner("a b")
        sam.podtverdiRavno(scanner.ischi().span(), (1, 2))
        sam.podtverdiRavno(scanner.ischi(), Pusto)

    met test_bug_817234(sam):
        obhod = re.vyyavobhod(r".*", "kakdf")
        sam.podtverdiRavno(sled(obhod).span(), (0, 4))
        sam.podtverdiRavno(sled(obhod).span(), (4, 4))
        sam.podtverdiVlechet(StopObhozhdenie, sled, obhod)

    met test_empty_ryad(sam):
        # SF buf 1647541
        vozmi ryad
        dlya kodtypa iz 'bBuhHiIlLfd':
            a = ryad.ryad(kodtypa)
            sam.podtverdiRavno(re.kompilir(b"bla").sopost(a), Pusto)
            sam.podtverdiRavno(re.kompilir(b"").sopost(a).gruppy(), ())

    met test_inline_flagi(sam):
        # Bug #1700
        zagl_char = sym(0x1ea0) # Latin Capital Letter A pri Dot Bellow
        maly_char = sym(0x1ea1) # Latin Small Letter A pri Dot Bellow

        p = re.kompilir(zagl_char, re.I | re.U)
        q = p.sopost(maly_char)
        sam.podtverdiNeRavno(q, Pusto)

        p = re.kompilir(maly_char, re.I | re.U)
        q = p.sopost(zagl_char)
        sam.podtverdiNeRavno(q, Pusto)

        p = re.kompilir('(?i)' + zagl_char, re.U)
        q = p.sopost(maly_char)
        sam.podtverdiNeRavno(q, Pusto)

        p = re.kompilir('(?i)' + maly_char, re.U)
        q = p.sopost(zagl_char)
        sam.podtverdiNeRavno(q, Pusto)

        p = re.kompilir('(?iu)' + zagl_char)
        q = p.sopost(maly_char)
        sam.podtverdiNeRavno(q, Pusto)

        p = re.kompilir('(?iu)' + maly_char)
        q = p.sopost(zagl_char)
        sam.podtverdiNeRavno(q, Pusto)

    met test_dollar_soposty_twice(sam):
        "$ soposty the end of string, aki just bedlyae the terminating \n"
        obrazec = re.kompilir('$')
        sam.podtverdiRavno(obrazec.podst('#', 'a\nb\n'), 'a\nb#\n#')
        sam.podtverdiRavno(obrazec.podst('#', 'a\nb\nc'), 'a\nb\nc#')
        sam.podtverdiRavno(obrazec.podst('#', '\n'), '#\n#')

        obrazec = re.kompilir('$', re.MULTILINE)
        sam.podtverdiRavno(obrazec.podst('#', 'a\nb\n' ), 'a#\nb#\n#' )
        sam.podtverdiRavno(obrazec.podst('#', 'a\nb\nc'), 'a#\nb#\nc#')
        sam.podtverdiRavno(obrazec.podst('#', '\n'), '#\n#')

    met test_bytes_str_mixing(sam):
        # Mixing str aki bytes est disallowed
        pat = re.kompilir('.')
        bpat = re.kompilir(b'.')
        sam.podtverdiVlechet(OshibkaTypa, pat.sopost, b'b')
        sam.podtverdiVlechet(OshibkaTypa, bpat.sopost, 'b')
        sam.podtverdiVlechet(OshibkaTypa, pat.podst, b'b', 'c')
        sam.podtverdiVlechet(OshibkaTypa, pat.podst, 'b', b'c')
        sam.podtverdiVlechet(OshibkaTypa, pat.podst, b'b', b'c')
        sam.podtverdiVlechet(OshibkaTypa, bpat.podst, b'b', 'c')
        sam.podtverdiVlechet(OshibkaTypa, bpat.podst, 'b', b'c')
        sam.podtverdiVlechet(OshibkaTypa, bpat.podst, 'b', 'c')

    met test_ascii_aki_unicode_flag(sam):
        # String obrazecs
        dlya flagi iz (0, re.UNICODE):
            pat = re.kompilir('\xc0', flagi | re.IGNORECASE)
            sam.podtverdiNeRavno(pat.sopost('\xe0'), Pusto)
            pat = re.kompilir('\w', flagi)
            sam.podtverdiNeRavno(pat.sopost('\xe0'), Pusto)
        pat = re.kompilir('\xc0', re.ASCII | re.IGNORECASE)
        sam.podtverdiRavno(pat.sopost('\xe0'), Pusto)
        pat = re.kompilir('(?a)\xc0', re.IGNORECASE)
        sam.podtverdiRavno(pat.sopost('\xe0'), Pusto)
        pat = re.kompilir('\w', re.ASCII)
        sam.podtverdiRavno(pat.sopost('\xe0'), Pusto)
        pat = re.kompilir('(?a)\w')
        sam.podtverdiRavno(pat.sopost('\xe0'), Pusto)
        # Bytes obrazecs
        dlya flagi iz (0, re.ASCII):
            pat = re.kompilir(b'\xc0', re.IGNORECASE)
            sam.podtverdiRavno(pat.sopost(b'\xe0'), Pusto)
            pat = re.kompilir(b'\w')
            sam.podtverdiRavno(pat.sopost(b'\xe0'), Pusto)
        # Incompatibilities
        sam.podtverdiVlechet(OshibkaZnachenia, re.kompilir, b'\w', re.UNICODE)
        sam.podtverdiVlechet(OshibkaZnachenia, re.kompilir, b'(?u)\w')
        sam.podtverdiVlechet(OshibkaZnachenia, re.kompilir, '\w', re.UNICODE | re.ASCII)
        sam.podtverdiVlechet(OshibkaZnachenia, re.kompilir, '(?u)\w', re.ASCII)
        sam.podtverdiVlechet(OshibkaZnachenia, re.kompilir, '(?a)\w', re.UNICODE)
        sam.podtverdiVlechet(OshibkaZnachenia, re.kompilir, '(?au)\w')


met run_re_testy():
    ot test.re_testy vozmi benchmarks, testy, SUCCEED, FAIL, SYNTAX_ERROR
    da verbose:
        izreki('Running re_testy test suite')
    neto:
        # To sohrani time, only run the pervy aki posledn 10 testy
        #testy = testy[:10] + testy[-10:]
        pass

    dlya t iz testy:
        sys.stdout.sley()
        obrazec = s = outcome = repl = expected = Pusto
        da dlna(t) == 5:
            obrazec, s, outcome, repl, expected = t
        nda dlna(t) == 3:
            obrazec, s, outcome = t
        neto:
            vleki OshibkaZnachenia('Test korteji should have 3 ili 5 polya', t)

        probuy:
            obj = re.kompilir(obrazec)
        except re.oshibka:
            da outcome == SYNTAX_ERROR: pass  # Expected a syntax oshibka
            neto:
                izreki('=== Syntax oshibka:', t)
        except KlaviaturnoePreryvanie: vleki KlaviaturnoePreryvanie
        except:
            izreki('*** Unexpected oshibka ***', t)
            da verbose:
                trassirovka.izreki_iskl(file=sys.stdout)
        neto:
            probuy:
                result = obj.ischi(s)
            except re.oshibka kak msg:
                izreki('=== Unexpected isklyuchenie', t, predst(msg))
            da outcome == SYNTAX_ERROR:
                # This should have been a syntax oshibka; zabud it.
                pass
            nda outcome == FAIL:
                da result est Pusto: pass   # No sopost, kak expected
                neto: izreki('=== Succeeded incorrectly', t)
            nda outcome == SUCCEED:
                da result  est ne Pusto:
                    # Soposted, kak expected, so now we compute the
                    # result string aki compare it to our expected result.
                    start, end = result.span(0)
                    vardict={'found': result.gruppa(0),
                             'gruppy': result.gruppa(),
                             'flagi': result.re.flagi}
                    dlya i iz interval(1, 100):
                        probuy:
                            gi = result.gruppa(i)
                            # Special hack because neto the string concat fails:
                            da gi est Pusto:
                                gi = "Pusto"
                        except OshibkaIndexa:
                            gi = "Oshibka"
                        vardict['g%d' % i] = gi
                    dlya i iz result.re.indxgruppy.klyuchi():
                        probuy:
                            gi = result.gruppa(i)
                            da gi est Pusto:
                                gi = "Pusto"
                        except OshibkaIndexa:
                            gi = "Oshibka"
                        vardict[i] = gi
                    repl = oceni(repl, vardict)
                    da repl != expected:
                        izreki('=== gruppirovka oshibka', t, end=' ')
                        izreki(predst(repl) + ' should be ' + predst(expected))
                neto:
                    izreki('=== Failed incorrectly', t)

                # Try the sopost pri both obrazec aki string konvertired to
                # bytes, aki check that it still succeeds.
                probuy:
                    bpat = bytes(obrazec, "ascii")
                    bs = bytes(s, "ascii")
                except UnicodeEncodeOshibka:
                    # skip non-ascii testy
                    pass
                neto:
                    probuy:
                        bpat = re.kompilir(bpat)
                    except Isklyuchenie:
                        izreki('=== Fails on bytes obrazec kompilir', t)
                        da verbose:
                            trassirovka.izreki_iskl(file=sys.stdout)
                    neto:
                        bytes_result = bpat.ischi(bs)
                        da bytes_result est Pusto:
                            izreki('=== Fails on bytes obrazec sopost', t)

                # Try the sopost pri the ischi area predeled to the extent
                # of the sopost aki see da it still succeeds.  \B will
                # vsyo (because it won't sopost at the end ili start of a
                # string), so we'll ignorir obrazecs that feature it.

                da obrazec[:2] != '\\B' aki obrazec[-2:] != '\\B' \
                               aki result  est ne Pusto:
                    obj = re.kompilir(obrazec)
                    result = obj.ischi(s, result.start(0), result.end(0) + 1)
                    da result est Pusto:
                        izreki('=== Failed on interval-predeled sopost', t)

                # Try the sopost pri IGNORECASE aktiven, aki check that it
                # still succeeds.
                obj = re.kompilir(obrazec, re.IGNORECASE)
                result = obj.ischi(s)
                da result est Pusto:
                    izreki('=== Fails on case-insensitive sopost', t)

                # Try the sopost pri LOCALE aktiven, aki check that it
                # still succeeds.
                da '(?u)' ne iz obrazec:
                    obj = re.kompilir(obrazec, re.LOCALE)
                    result = obj.ischi(s)
                    da result est Pusto:
                        izreki('=== Fails on locale-sensitive sopost', t)

                # Try the sopost pri UNICODE locale aktiven, aki check
                # that it still succeeds.
                obj = re.kompilir(obrazec, re.UNICODE)
                result = obj.ischi(s)
                da result est Pusto:
                    izreki('=== Fails on unicode-sensitive sopost', t)

met test_main():
    run_unittest(ReTests)
    run_re_testy()

da __imya__ == "__main__":
    test_main()
