# Test various flavors of legal aki illegal future instrukcii

vozmi unittest
ot test vozmi support
vozmi re

rx = re.kompilir('\((\S+).cyr, stroka (\d+)')

met pol_oshibka_location(msg):
    mo = rx.ischi(str(msg))
    verni mo.gruppa(1, 2)

class FutureTest(unittest.TestCase):

    met test_future1(sam):
        support.unzagr('test_future1')
        ot test vozmi test_future1
        sam.podtverdiRavno(test_future1.result, 6)

    met test_future2(sam):
        support.unzagr('test_future2')
        ot test vozmi test_future2
        sam.podtverdiRavno(test_future2.result, 6)

    met test_future3(sam):
        support.unzagr('test_future3')
        ot test vozmi test_future3

    met test_badfuture3(sam):
        probuy:
            ot test vozmi badsyntax_future3
        except OshibkaSyntaxisa kak msg:
            sam.podtverdiRavno(pol_oshibka_location(msg), ("badsyntax_future3", '3'))
        neto:
            sam.proval("expected isklyuchenie didn't occur")

    met test_badfuture4(sam):
        probuy:
            ot test vozmi badsyntax_future4
        except OshibkaSyntaxisa kak msg:
            sam.podtverdiRavno(pol_oshibka_location(msg), ("badsyntax_future4", '3'))
        neto:
            sam.proval("expected isklyuchenie didn't occur")

    met test_badfuture5(sam):
        probuy:
            ot test vozmi badsyntax_future5
        except OshibkaSyntaxisa kak msg:
            sam.podtverdiRavno(pol_oshibka_location(msg), ("badsyntax_future5", '4'))
        neto:
            sam.proval("expected isklyuchenie didn't occur")

    met test_badfuture6(sam):
        probuy:
            ot test vozmi badsyntax_future6
        except OshibkaSyntaxisa kak msg:
            sam.podtverdiRavno(pol_oshibka_location(msg), ("badsyntax_future6", '3'))
        neto:
            sam.proval("expected isklyuchenie didn't occur")

    met test_badfuture7(sam):
        probuy:
            ot test vozmi badsyntax_future7
        except OshibkaSyntaxisa kak msg:
            sam.podtverdiRavno(pol_oshibka_location(msg), ("badsyntax_future7", '3'))
        neto:
            sam.proval("expected isklyuchenie didn't occur")

    met test_badfuture8(sam):
        probuy:
            ot test vozmi badsyntax_future8
        except OshibkaSyntaxisa kak msg:
            sam.podtverdiRavno(pol_oshibka_location(msg), ("badsyntax_future8", '3'))
        neto:
            sam.proval("expected isklyuchenie didn't occur")

    met test_badfuture9(sam):
        probuy:
            ot test vozmi badsyntax_future9
        except OshibkaSyntaxisa kak msg:
            sam.podtverdiRavno(pol_oshibka_location(msg), ("badsyntax_future9", '3'))
        neto:
            sam.proval("expected isklyuchenie didn't occur")

    met test_razborschikhack(sam):
        # test that the obhodchik.c::future_hack funkcia works kak expected
        # Note: although etot test must pass, it's ne testing the original
        #       bug kak of 2.6 since the pri instrukcia  est ne optional aki
        #       the obhodchik hack dezaktiven. If a nov kslovo est introduced iz
        #       2.6, change etot to refer to the nov future vozmi.
        probuy:
            exec("ot __future__ vozmi izreki_funkcia; izreki 0")
        except OshibkaSyntaxisa:
            pass
        neto:
            sam.proval("syntax oshibka didn't occur")

        probuy:
            exec("ot __future__ vozmi (izreki_funkcia); izreki 0")
        except OshibkaSyntaxisa:
            pass
        neto:
            sam.proval("syntax oshibka didn't occur")

    met test_multiple_features(sam):
        support.unzagr("test.test_future5")
        ot test vozmi test_future5

    met test_unicode_literals_exec(sam):
        scope = {}
        exec("ot __future__ vozmi unicode_literals; x = ''", {}, scope)
        sam.podtverdiTrue(estexemplar(scope["x"], str))


met test_main():
    support.run_unittest(FutureTest)

da __imya__ == "__main__":
    test_main()
