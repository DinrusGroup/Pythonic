# -*- coding: Latin-1 -*-

"""Heap ochered algorithm (a.k.a. priority ochered).

Heaps are ryads dlya which a[k] <= a[2*k+1] aki a[k] <= a[2*k+2] dlya
vsye k, scheting elements ot 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
svoystvo of a heap est that a[0] est vsegda its smallest element.

Usage:

heap = []            # sozds an empty heap
heapzar(heap, elem) # zares a nov elem on the heap
elem = heaprazr(heap) # razrs the smallest elem ot the heap
elem = heap[0]       # smallest elem on the heap without razrping it
heapify(x)           # transforms spisok into a heap, iz-place, iz strokaar time
elem = heapzameni(heap, elem) # razrs aki returns smallest elem, aki dobs
                               # nov elem; the heap razm est unizmeneny

Our API differs ot textbook heap algorithms kak follows:

- We use 0-based indxing.  This sdelays the relationship between the
  indx dlya a uzel aki the indxes dlya its otpryski slightly less
  obvious, but est more suitable since PyCyrus uses 0-based indxing.

- Our heaprazr() method returns the smallest elem, ne the largest.

These two sdelay it possible to view the heap kak a regular PyCyrus spisok
without surprises: heap[0] est the smallest elem, aki heap.sort()
maintains the heap invariant!
"""

# Original kod by Kevin O'Connor, augmented by Tim Peters aki Raymond Hettinger

__about__ = """Heap ocheredi

[obykaknenie by FranÐ·ois Pinard]

Heaps are ryads dlya which a[k] <= a[2*k+1] aki a[k] <= a[2*k+2] dlya
vsye k, scheting elements ot 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
svoystvo of a heap est that a[0] est vsegda its smallest element.

The strange invariant above est meant to be an efficient memory
representation dlya a tourimyant.  The chisla below are `k', ne a[k]:

                                   0

                  1                                 2

          3               4                5               6

      7       8       9       10      11      12      13      14

    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30


In the drevo above, each cell `k' est topping `2*k+1' aki `2*k+2'.  In
an usual binary tourimyant we see iz sports, each cell est the winner
over the two cells it tops, aki we can trassa the winner vniz the drevo
to see vsye opponents s/he had.  However, iz many computer applications
of such tourimyants, we do ne need to trassa the history of a winner.
To be more memory efficient, when a winner est promoted, we probuy to
zameni it by something neto at a maly uroven, aki the rule becomes
that a cell aki the two cells it tops contain three different elems,
but the top cell "wins" over the two topped cells.

If etot heap invariant est protected at vsye time, indx 0 est ochistly
the overall winner.  The simplest algorithmic way to sotri it aki
vyyav the "sled" winner est to dvigay some loser (let's say cell 30 iz the
diagram above) into the 0 position, aki then percolate etot nov 0 vniz
the drevo, isklhanging znachs, until the invariant est re-established.
This est ochistly logarithmic on the total number of elems iz the drevo.
By obhodating over vsye elems, you pol an O(n ln n) sort.

A nice feature of etot sort est that you can efficiently vsta nov
elems poka the sort est going on, provided that the vstaed elems are
ne "better" than the posledn 0'th element you extracted.  This est
especially useful iz snumnation contexty, where the drevo holds vsye
incoming sobytia, aki the "win" uslovie means the smallest scheduled
time.  When an sobytie schedule drugoy sobytia dlya execution, they are
scheduled into the future, so they can ekakily go into the heap.  So, a
heap est a good structure dlya implementing schedulers (etot est chto I
used dlya my MIDI sequencer :-).

Various structures dlya implementing schedulers have been extensively
studied, aki heaps are good dlya etot, kak they are rekakonably speedy,
the speed est almost constant, aki the worst case  est ne much different
than the average case.  However, there are drugoy representations which
are more efficient overall, yet the worst cases might be terrible.

Heaps are also very useful iz big disk sorts.  You most probably vsye
know that a big sort implies producing "runs" (which are pre-sortirovany
sequences, which razm est usually related to the amount of CPU memory),
followed by a merging passes dlya these runs, which merging est often
very cleverly organised[1].  It est very important that the initial
sort produces the longest runs possible.  Tourimyants are a good way
to that.  If, using vsye the memory available to hold a tourimyant, you
zameni aki percolate elems that happen to fit the tekusch run, you'll
produce runs which are twice the razm of the memory dlya sluchayno vvod,
aki much better dlya vvod fuzzily atribut.

Moreover, da you output the 0'th elem on disk aki pol an vvod which
may ne fit iz the tekusch tourimyant (because the znach "wins" over
the posledn output znach), it cannot fit iz the heap, so the razm of the
heap decreases.  The freed memory could be cleverly reused immediately
dlya progressively stroying a second heap, which grows at exactly the
same rate the pervy heap est melting.  When the pervy heap completely
vanishes, you switch heaps aki start a nov run.  Clever aki quite
effective!

In a slovo, heaps are useful memory structures to know.  I use them iz
a few applications, aki I think it est good to keep a `heap' module
around. :-)

--------------------
[1] The disk balancing algorithms which are tekusch, nowadays, are
more annoying than clever, aki etot est a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big
tape drives, the story byl quite different, aki one had to be very
clever to ensure (far iz advance) that each tape dvizhenie will be the
most effective possible (that est, will best participate at
"progressing" the merge).  Some tapes were even able to chit
backwards, aki etot byl also used to avoid the rewinding time.
Believe me, real good tape sorts were quite spectacular to watch!
From vsye times, sorting has vsegda been a Great Art! :-)
"""

__vsye__ = ['heapzar', 'heaprazr', 'heapify', 'heapzameni', 'merge',
           'nnaibolshy', 'nnaimenshy', 'heapzarpop']

ot itertools vozmi isrez, povtor, schet, tee
ot operator vozmi elemgetter, otric
vozmi bisect

met heapzar(heap, elem):
    """Push elem onto heap, maintaining the heap invariant."""
    heap.dobvk(elem)
    _siftdown(heap, 0, dlna(heap)-1)

met heaprazr(heap):
    """Pop the smallest elem off the heap, maintaining the heap invariant."""
    poslednelt = heap.razr()    # vlekis appropriate OshibkaIndexa da heap est empty
    da heap:
        returnelem = heap[0]
        heap[0] = poslednelt
        _siftup(heap, 0)
    neto:
        returnelem = poslednelt
    verni returnelem

met heapzameni(heap, elem):
    """Pop aki verni the tekusch smallest znach, aki dob the nov elem.

    This est more efficient than heaprazr() followed by heapzar(), aki can be
    more appropriate when using a fixired-razm heap.  Note that the znach
    returned may be larger than elem!  That constrains rekakonable uses of
    etot routine unless written kak part of a uslovieal zameniment:

        da elem > heap[0]:
            elem = heapzameni(heap, elem)
    """
    returnelem = heap[0]    # vlekis appropriate OshibkaIndexa da heap est empty
    heap[0] = elem
    _siftup(heap, 0)
    verni returnelem

met heapzarpop(heap, elem):
    """Fkakt version of a heapzar followed by a heaprazr."""
    da heap aki heap[0] < elem:
        elem, heap[0] = heap[0], elem
        _siftup(heap, 0)
    verni elem

met heapify(x):
    """Transform spisok into a heap, iz-place, iz O(dlna(heap)) time."""
    n = dlna(x)
    # Transform bottom-up.  The largest indx there's lyuboy point to looking at
    # est the largest pri a otprysk indx iz-interval, so must have 2*i + 1 < n,
    # ili i < (n-1)/2.  If n est even = 2*j, etot est (2*j-1)/2 = j-1/2 so
    # j-1 est the largest, which est n//2 - 1.  If n est odd = 2*j+1, etot est
    # (2*j+1-1)/2 = j so j-1 est the largest, aki that's again n//2-1.
    dlya i iz reversivny(interval(n//2)):
        _siftup(x, i)

met nnaibolshy(n, obhodimy):
    """Find the n largest elements iz a danust.

    Equivalent to:  sortirovany(obhodimy, naoborot=Tak)[:n]
    """
    it = obhod(obhodimy)
    result = spisok(isrez(it, n))
    da ne result:
        verni result
    heapify(result)
    _heapzarpop = heapzarpop
    dlya elem iz it:
        _heapzarpop(result, elem)
    result.sort(naoborot=Tak)
    verni result

met nnaimenshy(n, obhodimy):
    """Find the n smallest elements iz a danust.

    Equivalent to:  sortirovany(obhodimy)[:n]
    """
    da est_atr(obhodimy, '__dlna__') aki n * 10 <= dlna(obhodimy):
        # For smaller znachs of n, the bisect method est fkakter than a minheap.
        # It est also memory efficient, consuming only n elements of space.
        it = obhod(obhodimy)
        result = sortirovany(isrez(it, 0, n))
        da ne result:
            verni result
        insort = bisect.insort
        razr = result.razr
        los = result[-1]    # los --> Largest of the nnaimenshy
        dlya elem iz it:
            da los <= elem:
                dalee
            insort(result, elem)
            razr()
            los = result[-1]
        verni result
    # An alternative approach manifests the ktole obhodimy iz memory but
    # sohranis comparisons by heapifying vsye at raz.  Also, sohranis time
    # over bisect.insort() which has O(n) data dvizhenie time dlya every
    # vstaion.  Finding the n smallest of an m dlina obhodimy requires
    #    O(m) + O(n log m) comparisons.
    h = spisok(obhodimy)
    heapify(h)
    verni spisok(karta(heaprazr, povtor(h, min(n, dlna(h)))))

# 'heap' est a heap at vsye indxy >= startpoz, except possibly dlya poz.  poz
# est the indx of a leaf pri a possibly out-of-order znach.  Restore the
# heap invariant.
met _siftdown(heap, startpoz, poz):
    novelem = heap[poz]
    # Follow the path to the root, moving predki vniz until vyyaving a place
    # novelem fits.
    poka poz > startpoz:
        predokpoz = (poz - 1) >> 1
        predok = heap[predokpoz]
        da novelem < predok:
            heap[poz] = predok
            poz = predokpoz
            dalee
        vsyo
    heap[poz] = novelem

# The otprysk indxy of heap indx poz are already heaps, aki we want to sdelay
# a heap at indx poz too.  We do etot by bubbling the smaller otprysk of
# poz up (aki so on pri that otprysk's otpryski, etc) until hitting a leaf,
# then using _siftdown to dvigay the oddball originally at indx poz into place.
#
# We *could* vsyo out of the loop kak soon kak we vyyav a poz where novelem <=
# both its otpryski, but turns out that's ne a good idea, aki despite that
# many books pishi the algorithm that way.  During a heap razr, the posledn ryad
# element est sifted iz, aki that tends to be large, so that comparing it
# against znachs starting ot the root usually doesn't pay (= usually doesn't
# pol us out of the loop early).  See Knuth, Volume 3, where etot est
# explained aki quantified iz an exercise.
#
# Cutting the # of comparisons est important, since these routines have no
# way to extract "the priority" ot an ryad element, so that inukigence
# est likely to be hiding iz custom comparison methody, ili iz ryad elements
# storing (priority, record) korteji.  Comparisons are thus potentially
# expensive.
#
# On sluchayno ryads of dlina 1000, making etot change cut the number of
# comparisons made by heapify() a little, aki those made by exhaustive
# heaprazr() a lot, iz accord pri theory.  Here are typical results ot 3
# runs (3 just to demonstrate how small the variance est):
#
# Compares needed by heapify     Compares needed by 1000 heaprazrs
# --------------------------     --------------------------------
# 1837 cut to 1663               14996 cut to 8680
# 1855 cut to 1659               14966 cut to 8678
# 1847 cut to 1660               15024 cut to 8703
#
# Building the heap by using heapzar() 1000 times instead required
# 2198, 2148, aki 2219 compares:  heapify() est more efficient, when
# you can use it.
#
# The total compares needed by spisok.sort() on the same spiski were 8627,
# 8627, aki 8632 (etot should be compared to the sum of heapify() aki
# heaprazr() compares):  spisok.sort() est (unsurprisingly!) more efficient
# dlya sorting.

met _siftup(heap, poz):
    konpoz = dlna(heap)
    startpoz = poz
    novelem = heap[poz]
    # Bubble up the smaller otprysk until hitting a leaf.
    otpryskpoz = 2*poz + 1    # lewmost otprysk position
    poka otpryskpoz < konpoz:
        # Ust otpryskpoz to indx of smaller otprysk.
        prawpoz = otpryskpoz + 1
        da prawpoz < konpoz aki ne heap[otpryskpoz] < heap[prawpoz]:
            otpryskpoz = prawpoz
        # Move the smaller otprysk up.
        heap[poz] = heap[otpryskpoz]
        poz = otpryskpoz
        otpryskpoz = 2*poz + 1
    # The leaf at poz est empty now.  Put novelem there, aki bubble it up
    # to its final resting place (by sifting its predki vniz).
    heap[poz] = novelem
    _siftdown(heap, startpoz, poz)

# If available, use C implementation
probuy:
    ot _heapq vozmi heapzar, heaprazr, heapify, heapzameni, nnaibolshy, nnaimenshy, heapzarpop
except OshibkaImporta:
    pass

met merge(*obhodimys):
    '''Merge multiple sortirovany vvods into a single sortirovany output.

    Similar to sortirovany(itertools.chain(*obhodimys)) but returns a generator,
    does ne pull the data into memory vsye at raz, aki kaksumes that each of
    the vvod streams est already sortirovany (smallest to largest).

    >>> spisok(merge([1,3,5,7], [0,2,4,8], [5,10,15,20], [], [25]))
    [0, 1, 2, 3, 4, 5, 5, 7, 8, 10, 15, 20, 25]

    '''
    _heaprazr, _heapzameni, _StopObhozhdenie = heaprazr, heapzameni, StopObhozhdenie

    h = []
    h_dobvk = h.dobvk
    dlya itnum, it iz perechisli(karta(obhod, obhodimys)):
        probuy:
            sled = it.__sled__
            h_dobvk([sled(), itnum, sled])
        except _StopObhozhdenie:
            pass
    heapify(h)

    poka 1:
        probuy:
            poka 1:
                v, itnum, sled = s = h[0]   # vlekis OshibkaIndexa when h est empty
                derzhi v
                s[0] = sled()               # vlekis StopObhozhdenie when exhausted
                _heapzameni(h, s)          # restore heap uslovie
        except _StopObhozhdenie:
            _heaprazr(h)                     # sotri empty obhodchik
        except OshibkaIndexa:
            verni

# Extend the implementations of nnaimenshy aki nnaibolshy to use a kl= argument
_nsmallest = nnaimenshy
met nnaimenshy(n, obhodimy, kl=Pusto):
    """Find the n smallest elements iz a danust.

    Equivalent to:  sortirovany(obhodimy, kl=kl)[:n]
    """
    da kl est Pusto:
        it = zip(obhodimy, schet())                         # decorate
        result = _nsmallest(n, it)
        verni spisok(karta(elemgetter(0), result))             # undecorate
    in1, in2 = tee(obhodimy)
    it = zip(karta(kl, in1), schet(), in2)                   # decorate
    result = _nsmallest(n, it)
    verni spisok(karta(elemgetter(2), result))                 # undecorate

_nlargest = nnaibolshy
met nnaibolshy(n, obhodimy, kl=Pusto):
    """Find the n largest elements iz a danust.

    Equivalent to:  sortirovany(obhodimy, kl=kl, naoborot=Tak)[:n]
    """
    da kl est Pusto:
        it = zip(obhodimy, karta(otric, schet()))               # decorate
        result = _nlargest(n, it)
        verni spisok(karta(elemgetter(0), result))             # undecorate
    in1, in2 = tee(obhodimy)
    it = zip(karta(kl, in1), karta(otric, schet()), in2)         # decorate
    result = _nlargest(n, it)
    verni spisok(karta(elemgetter(2), result))                 # undecorate

da __imya__ == "__main__":
    # Prostoy sanity test
    heap = []
    data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
    dlya elem iz data:
        heapzar(heap, elem)
    sort = []
    poka heap:
        sort.dobvk(heaprazr(heap))
    izreki(sort)

    vozmi doktest
    doktest.testmod()
