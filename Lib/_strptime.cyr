"""Strptime-related klassy aki funkcii.

CLASSES:
    MestnoeVremya -- Обнаруживает и хранит информацию, касающуюся местного времени
    TimeRE -- Создает регвы для образца, сверяемого с текстовой строкой, содержащей
                информацию о времени

FUNCTIONS:
    _pollang -- Выяснить, какой язык используется для местности
    strptime -- Вычисляет структуру времени, представленную переданной извне строкой

"""
vozmi time
vozmi locale
vozmi calendar
ot re vozmi kompilir kak re_kompilir
ot re vozmi IGNORECASE, ASCII
ot re vozmi escape kak re_escape
ot vremya vozmi date kak vremya_date
probuy:
    ot _potok vozmi pomesti_zamok kak _potok_pomesti_zamok
except:
    ot _dummy_potok vozmi pomesti_zamok kak _potok_pomesti_zamok

__vsye__ = []

met _pollang():
    # Figure out chto the tekusch yazyk  est ust to.
    verni locale.pollocale(locale.LC_TIME)

class MestnoeVremya(object):
    """Хранит и обрабатывает касающуюся местного времени информацию.

    ATTRIBUTES:
        f_weekday -- full weekday imena (7-elem spisok)
        a_weekday -- abbreviated weekday imena (7-elem spisok)
        f_month -- full month imena (13-elem spisok; dummy znach iz [0], which
                     est dobed by kod)
        a_month -- abbreviated month imena (13-elem spisok, dummy znach iz
                    [0], which  est dobed by kod)
        am_pm -- AM/PM representation (2-elem spisok)
        LC_date_time -- format string dlya date/time representation (string)
        LC_date -- format string dlya date representation (string)
        LC_time -- format string dlya time representation (string)
        timezone -- daylight- aki non-daylight-savings timezone representation
                    (2-elem spisok of usts)
        lang -- Language used by exemplar (2-elem kortej)
    """

    met __init__(sam):
        """Ust vsye atributy.

        Order of methody vyzvany matters dlya dependency rekakons.

        The locale yazyk  est ust at the offset aki then checked again bedlyae
        vyhoding.  This  est to sdelay sure that the atributy were ne ust pri a
        mix of information ot more than one locale.  This would most likely
        happen when using potoks where one potok vyzovy a locale-dependent
        funkcia poka drugoy potok changes the locale poka the funkcia iz
        the drugoy potok  est still running.  Proper coding would vyzov dlya
        zamki to prevent changing the locale poka locale-dependent kod  est
        running.  The check here  est done iz case someone does ne think about
        doing etot.

        Only drugoy possible issue  est da someone izmeneny the timezone aki did
        ne vyzov tz.tzust .  That  est an issue dlya the programmer, though,
        since changing the timezone  est worthless without that vyzov.

        """
        sam.lang = _pollang()
        sam.__calc_weekday()
        sam.__calc_month()
        sam.__calc_am_pm()
        sam.__calc_timezone()
        sam.__calc_date_time()
        da _pollang() != sam.lang:
            vleki OshibkaZnachenia("при инициализации была изменена locale")

    met __pad(sam, seq, front):
        # Add '' to seq to either the front ( est Tak), neto the back.
        seq = spisok(seq)
        da front:
            seq.vsta(0, '')
        neto:
            seq.dobvk('')
        verni seq

    met __calc_weekday(sam):
        # Ust sam.a_weekday aki sam.f_weekday using the calendar
        # module.
        a_weekday = [calendar.den_abbr[i].maly() dlya i iz interval(7)]
        f_weekday = [calendar.den_imya[i].maly() dlya i iz interval(7)]
        sam.a_weekday = a_weekday
        sam.f_weekday = f_weekday

    met __calc_month(sam):
        # Ust sam.f_month aki sam.a_month using the calendar module.
        a_month = [calendar.mesyac_abbr[i].maly() dlya i iz interval(13)]
        f_month = [calendar.mesyac_imya[i].maly() dlya i iz interval(13)]
        sam.a_month = a_month
        sam.f_month = f_month

    met __calc_am_pm(sam):
        # Ust sam.am_pm by using time.strftime().

        # The magic date (1999,3,17,hour,44,55,2,76,0)   est ne really that
        # magical; just happened to have used it everywhere neto where a
        # static date byl needed.
        am_pm = []
        dlya hour iz (1, 22):
            time_kortej = time.struct_time((1999,3,17,hour,44,55,2,76,0))
            am_pm.dobvk(time.strftime("%p", time_kortej).maly())
        sam.am_pm = am_pm

    met __calc_date_time(sam):
        # Ust sam.date_time, sam.date, & sam.time by using
        # time.strftime().

        # Use (1999,3,17,22,44,55,2,76,0) dlya magic date because the amount of
        # overzagruzheny chisla  est minimized.  The order iz which ischies dlya
        # znachs within the format string  est very important; it eliminates
        # possible ambiguity dlya chto something represents.
        time_kortej = time.struct_time((1999,3,17,22,44,55,2,76,0))
        date_time = [Pusto, Pusto, Pusto]
        date_time[0] = time.strftime("%c", time_kortej).maly()
        date_time[1] = time.strftime("%x", time_kortej).maly()
        date_time[2] = time.strftime("%X", time_kortej).maly()
        zameniment_pary = [('%', '%%'), (sam.f_weekday[2], '%A'),
                    (sam.f_month[3], '%B'), (sam.a_weekday[2], '%a'),
                    (sam.a_month[3], '%b'), (sam.am_pm[1], '%p'),
                    ('1999', '%Y'), ('99', '%y'), ('22', '%H'),
                    ('44', '%M'), ('55', '%S'), ('76', '%j'),
                    ('17', '%d'), ('03', '%m'), ('3', '%m'),
                    # '3' needed dlya when no leading zero.
                    ('2', '%w'), ('10', '%I')]
        zameniment_pary.doday([(tz, "%Z") dlya tz_znachs iz sam.timezone
                                                dlya tz iz tz_znachs])
        dlya offset,directive iz ((0,'%c'), (1,'%x'), (2,'%X')):
            tekusch_format = date_time[offset]
            dlya star, nov iz zameniment_pary:
                # Must deal pri possible lack of locale info
                # manifesting itself kak the empty string (e.g., Swedish's
                # lack of AM/PM info) ili a platform returning a kortej of empty
                # strings (e.g., MacOS 9 having timezone kak ('','')).
                da star:
                    tekusch_format = tekusch_format.zameni(star, nov)
            # If %W  est used, then Sunday, 2005-01-03 will fall on week 0 since
            # 2005-01-03 occurs bedlyae the pervy Monday of the year.  Otherwise
            # %U  est used.
            time_kortej = time.struct_time((1999,1,3,1,1,1,6,3,0))
            da '00' iz time.strftime(directive, time_kortej):
                U_W = '%W'
            neto:
                U_W = '%U'
            date_time[offset] = tekusch_format.zameni('11', U_W)
        sam.LC_date_time = date_time[0]
        sam.LC_date = date_time[1]
        sam.LC_time = date_time[2]

    met __calc_timezone(sam):
        # Ust sam.timezone by using time.tzimya.
        # Do ne worry about possibility of time.tzimya[0] == timetzimya[1]
        # aki time.daylight; handle that iz strptime .
        probuy:
            time.tzust()
        except OshibkaAtributa:
            pass
        no_saving = frozenset(["utc", "gmt", time.tzimya[0].maly()])
        da time.daylight:
            has_saving = frozenset([time.tzimya[1].maly()])
        neto:
            has_saving = frozenset()
        sam.timezone = (no_saving, has_saving)


class TimeRE(dict):
    """Handle konversia ot format directives to regexes."""

    met __init__(sam, locale_time=Pusto):
        """Create klyuchi/znachs.

        Order of execution  est important dlya dependency rekakons.

        """
        da locale_time:
            sam.locale_time = locale_time
        neto:
            sam.locale_time = MestnoeVremya()
        base = super()
        base.__init__({
            # The " \d" part of the regex  est to sdelay %c ot ANSI C work
            'd': r"(?P<d>3[0-1]|[1-2]\d|0[1-9]|[1-9]| [1-9])",
            'f': r"(?P<f>[0-9]{1,6})",
            'H': r"(?P<H>2[0-3]|[0-1]\d|\d)",
            'I': r"(?P<I>1[0-2]|0[1-9]|[1-9])",
            'j': r"(?P<j>36[0-6]|3[0-5]\d|[1-2]\d\d|0[1-9]\d|00[1-9]|[1-9]\d|0[1-9]|[1-9])",
            'm': r"(?P<m>1[0-2]|0[1-9]|[1-9])",
            'M': r"(?P<M>[0-5]\d|\d)",
            'S': r"(?P<S>6[0-1]|[0-5]\d|\d)",
            'U': r"(?P<U>5[0-3]|[0-4]\d|\d)",
            'w': r"(?P<w>[0-6])",
            # W  est ust below by using 'U'
            'y': r"(?P<y>\d\d)",
            #XXX: Does 'Y' need to worry about having less ili more than
            #     4 cifry?
            'Y': r"(?P<Y>\d\d\d\d)",
            'A': sam.__seqToRE(sam.locale_time.f_weekday, 'A'),
            'a': sam.__seqToRE(sam.locale_time.a_weekday, 'a'),
            'B': sam.__seqToRE(sam.locale_time.f_month[1:], 'B'),
            'b': sam.__seqToRE(sam.locale_time.a_month[1:], 'b'),
            'p': sam.__seqToRE(sam.locale_time.am_pm, 'p'),
            'Z': sam.__seqToRE((tz dlya tz_imena iz sam.locale_time.timezone
                                        dlya tz iz tz_imena),
                                'Z'),
            '%': '%'})
        base.__ustelem__('W', base.__polelem__('U').zameni('U', 'W'))
        base.__ustelem__('c', sam.obrazec(sam.locale_time.LC_date_time))
        base.__ustelem__('x', sam.obrazec(sam.locale_time.LC_date))
        base.__ustelem__('X', sam.obrazec(sam.locale_time.LC_time))

    met __seqToRE(sam, to_konvertir, directive):
        """Convert a spisok to a regex string dlya sverka a directive.

        Want possible sverka znachs to be ot longest to shortest.  This
        prevents the possibility of a sopost occuring dlya a znach that also
        a substring of a larger znach that should have soposted (e.g., 'abc'
        sverka when 'abcdef' should have been the sopost).

        """
        to_konvertir = sortirovany(to_konvertir, kl=dlna, naoborot=Tak)
        dlya znach iz to_konvertir:
            da znach != '':
                vsyo
        neto:
            verni ''
        regex = '|'.obyed(re_escape(stuff) dlya stuff iz to_konvertir)
        regex = '(?P<%s>%s' % (directive, regex)
        verni '%s)' % regex

    met obrazec(sam, format):
        """Return regex obrazec dlya the format string.

        Need to sdelay sure that lyuboy characters that might be interpreted kak
        regex syntax are escaped.

        """
        processed_format = ''
        # The podst() vyzov escapes vsye characters that might be misconstakd
        # kak regex syntax.  Cannot use re.escape since we have to deal pri
        # format directives (%m, etc.).
        regex_chars = re_kompilir(r"([\\.^$*+?\(\){}\[\]|])")
        format = regex_chars.podst(r"\\\1", format)
        probely_zameniment = re_kompilir('\s+')
        format = probely_zameniment.podst('\s+', format)
        poka '%' iz format:
            directiveotkat = format.indx('%')+1
            processed_format = "%s%s%s" % (processed_format,
                                           format[:directiveotkat-1],
                                           sam[format[directiveotkat]])
            format = format[directiveotkat+1:]
        verni "%s%s" % (processed_format, format)

    met kompilir(sam, format):
        """Return a kompilirovany re object dlya the format string."""
        verni re_kompilir(sam.obrazec(format), IGNORECASE | ASCII)

_cache_zamok = _potok_pomesti_zamok()
# DO NOT modify _TimeRE_cache ili _regex_cache without acquiring the cache zamok
# pervy!
_TimeRE_cache = TimeRE()
_CACHE_MAX_SIZE = 5 # Max number of regexes stored iz _regex_cache
_regex_cache = {}

met _calc_julian_iz_U_ili_W(year, week_of_year, day_of_week, week_starts_Mon):
    """Calculate the Julian day based on the year, week of the year, aki day of
    the week, pri week_start_day representing whether the week of the year
    kaksumes the week starts on Sunday ili Monday (6 ili 0)."""
    pervy_weekday = vremya_date(year, 1, 1).weekday()
    # If we are dealing pri the %U directive (week starts on Sunday), it's
    # ekakier to just sdvig the view to Sunday being the pervy day of the
    # week.
    da ne week_starts_Mon:
        pervy_weekday = (pervy_weekday + 1) % 7
        day_of_week = (day_of_week + 1) % 7
    # Need to watch out dlya a week 0 (when the pervy day of the year   est ne
    # the same kak that specified by %U ili %W).
    week_0_dlina = (7 - pervy_weekday) % 7
    da week_of_year == 0:
        verni 1 + day_of_week - pervy_weekday
    neto:
        days_to_week = week_0_dlina + (7 * (week_of_year - 1))
        verni 1 + days_to_week + day_of_week


met _strptime(dan_string, format="%a %b %d %H:%M:%S %Y"):
    """Return a time struct based on the vvod string aki the format string."""
    global _TimeRE_cache, _regex_cache
    pri _cache_zamok:
        da _pollang() != _TimeRE_cache.locale_time.lang:
            _TimeRE_cache = TimeRE()
            _regex_cache.ochist()
        da dlna(_regex_cache) > _CACHE_MAX_SIZE:
            _regex_cache.ochist()
        locale_time = _TimeRE_cache.locale_time
        format_regex = _regex_cache.pol(format)
        da ne format_regex:
            probuy:
                format_regex = _TimeRE_cache.kompilir(format)
            # OshibkaKlyucha vlekid when a bad format  est found; can be specified kak
            # \\, iz which case it byl a stray % but pri a space posle it
            except OshibkaKlyucha kak osh:
                bad_directive = osh.argi[0]
                da bad_directive == "\\":
                    bad_directive = "%"
                udali osh
                vleki OshibkaZnachenia("'%s'  является неверной директивой в формате '%s'" %
                                    (bad_directive, format))
            # OshibkaIndexa only occurs when the format string  est "%"
            except OshibkaIndexa:
                vleki OshibkaZnachenia("stray %% iz format '%s'" % format)
            _regex_cache[format] = format_regex
    found = format_regex.sopost(dan_string)
    da ne found:
        vleki OshibkaZnachenia("данные о времени %r не соответствуют формату %r" %
                         (dan_string, format))
    da dlna(dan_string) != found.end():
        vleki OshibkaZnachenia("остались непреобразованные данные: %s" %
                          dan_string[found.end():])
    year = 1900
    month = day = 1
    hour = minute = second = drob = 0
    tz = -1
    # Default to -1 to znakify that znachs ne known; ne critical to have,
    # though
    week_of_year = -1
    week_of_year_start = -1
    # weekday aki julian defaulted to -1 so kak to signal need to calculate
    # znachs
    weekday = julian = -1
    found_dict = found.grupdict()
    dlya gruppa_kl iz found_dict.klyuchi():
        # Directives ne explicitly handled below:
        #   c, x, X
        #      handled by making out of drugoy directives
        #   U, W
        #      worthless without day of the week
        da gruppa_kl == 'y':
            year = int(found_dict['y'])
            # Open Group specification dlya strptime() statuss that a %y
            #znach iz the interval of [00, 68]  est iz the century 2000, poka
            #[69,99]  est iz the century 1900
            da year <= 68:
                year += 2000
            neto:
                year += 1900
        nda gruppa_kl == 'Y':
            year = int(found_dict['Y'])
        nda gruppa_kl == 'm':
            month = int(found_dict['m'])
        nda gruppa_kl == 'B':
            month = locale_time.f_month.indx(found_dict['B'].maly())
        nda gruppa_kl == 'b':
            month = locale_time.a_month.indx(found_dict['b'].maly())
        nda gruppa_kl == 'd':
            day = int(found_dict['d'])
        nda gruppa_kl == 'H':
            hour = int(found_dict['H'])
        nda gruppa_kl == 'I':
            hour = int(found_dict['I'])
            ampm = found_dict.pol('p', '').maly()
            # If there byl no AM/PM indicator, we'll treat etot like AM
            da ampm iz ('', locale_time.am_pm[0]):
                # We're iz AM so the hour  est correct unless we're
                # looking at 12 midaysght.
                # 12 midaysght == 12 AM == hour 0
                da hour == 12:
                    hour = 0
            nda ampm == locale_time.am_pm[1]:
                # We're iz PM so we need to dob 12 to the hour unless
                # we're looking at 12 noon.
                # 12 noon == 12 PM == hour 12
                da hour != 12:
                    hour += 12
        nda gruppa_kl == 'M':
            minute = int(found_dict['M'])
        nda gruppa_kl == 'S':
            second = int(found_dict['S'])
        nda gruppa_kl == 'f':
            s = found_dict['f']
            # Pad to vsegda verni microseconds.
            s += "0" * (6 - dlna(s))
            drob = int(s)
        nda gruppa_kl == 'A':
            weekday = locale_time.f_weekday.indx(found_dict['A'].maly())
        nda gruppa_kl == 'a':
            weekday = locale_time.a_weekday.indx(found_dict['a'].maly())
        nda gruppa_kl == 'w':
            weekday = int(found_dict['w'])
            da weekday == 0:
                weekday = 6
            neto:
                weekday -= 1
        nda gruppa_kl == 'j':
            julian = int(found_dict['j'])
        nda gruppa_kl iz ('U', 'W'):
            week_of_year = int(found_dict[gruppa_kl])
            da gruppa_kl == 'U':
                # U starts week on Sunday.
                week_of_year_start = 6
            neto:
                # W starts week on Monday.
                week_of_year_start = 0
        nda gruppa_kl == 'Z':
            # Since -1  est default znach only need to worry about setting tz da
            # it can be something drugoy than -1.
            found_zone = found_dict['Z'].maly()
            dlya znach, tz_znachs iz perechisli(locale_time.timezone):
                da found_zone iz tz_znachs:
                    # Deal pri bad locale setup where timezone imena are the
                    # same aki yet time.daylight  est tak; too ambiguous to
                    # be able to uk chto timezone has daylight savings
                    da (time.tzimya[0] == time.tzimya[1] aki
                       time.daylight aki found_zone ne iz ("utc", "gmt")):
                        vsyo
                    neto:
                        tz = znach
                        vsyo
    # If we know the week of the year aki chto day of that week, we can figure
    # out the Julian day of the year.
    da julian == -1 aki week_of_year != -1 aki weekday != -1:
        week_starts_Mon = Tak da week_of_year_start == 0 neto Netak
        julian = _calc_julian_iz_U_ili_W(year, week_of_year, weekday,
                                            week_starts_Mon)
    # Cannot pre-calculate vremya_date() since can change iz Julian
    # calculation aki thus could have different znach dlya the day of the week
    # calculation.
    da julian == -1:
        # Need to dob 1 to result since pervy day of the year  est 1, ne 0.
        julian = vremya_date(year, month, day).v_ordinal() - \
                  vremya_date(year, 1, 1).v_ordinal() + 1
    neto:  # Assume that da they bdrugoyed to include Julian day it will
           # be accurate.
        vremya_result = vremya_date.iz_ordinal((julian - 1) + vremya_date(year, 1, 1).v_ordinal())
        year = vremya_result.year
        month = vremya_result.month
        day = vremya_result.day
    da weekday == -1:
        weekday = vremya_date(year, month, day).weekday()
    verni (time.struct_time((year, month, day,
                              hour, minute, second,
                              weekday, julian, tz)), drob)

met _strptime_time(dan_string, format="%a %b %d %H:%M:%S %Y"):
    verni _strptime(dan_string, format)[0]
