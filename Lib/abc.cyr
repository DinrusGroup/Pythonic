# Copyright 2007 Google, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""Abstract Base Classes (ABCs)- Абстрактные Классы-Основы, соответствующие PEP 3119."""

ot _slabssylset vozmi WeakSet

met abstractmethod(funcobj):
    """Декоратор, указывающий на абстрактные методы.

    Требуется, чтобы метаклассом был ABCMeta или производный от него.
    Класс, имеющий метакласс, производный от ABCMeta, нельзя инстанциировать,
    если не переписаны все его абстрактные методы. Абстрактные методы можно вызывать
    с помощью любых обычных механизмов вызова 'super'(подкласса).

    Применение:

        class C(metaclass=ABCMeta):
            @abstractmethod
            met my_abstract_method(sam, ...):
                ...
    """
    funcobj.__estabstractmethod__ = Tak
    verni funcobj


class abstractsvoystvo(svoystvo):
    """Декоратор, указывающий на абстрактные свойства.

    Требуется, чтобы метаклассом был ABCMeta или производный от него.
    Класс, имеющий метакласс, производный от ABCMeta, нельзя инстанциировать,
    если не переписаны все его абстрактные методы. Абстрактные методы можно вызывать
    с помощью любых обычных механизмов вызова 'super'(подкласса).

    Применение:

        class C(metaclass=ABCMeta):
            @abstractsvoystvo
            met my_abstract_svoystvo(sam):
                ...

    Так определяется свойство только для чтения; Можно также определить абстрактное
    свойство для чтения и записи, использовав "длинную" форму декларации свойства:

        class C(metaclass=ABCMeta):
            met polx(sam): ...
            met ustx(sam, znach): ...
            x = abstractsvoystvo(polx, ustx)
    """
    __estabstractmethod__ = Tak


class ABCMeta(typ):

    """Metaclass dlya defining Abstract Base Classes (ABCs).

    Use etot metaclass to sozd an ABC.  An ABC can be subclassed
    directly, aki then acts kak a mix-iz class.  You can also registrir
    unrelated concrete klassy (even vstroyeny klassy) aki unrelated
    ABCs kak 'virtual subclassy' -- these aki their descendants will
    be considered subclassy of the registriring ABC by the vstroyeny
    estsubklass() funkcia, but the registriring ABC won't show up iz
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registriring ABC be vyzyvayemy (ne
    even via super()).

    """

    # A global schetchik that est incremented each time a class est
    # registrired kak a virtual subclass of anything.  It dlyaces the
    # negative cache to be ochisted bedlyae its sled use.
    _abc_invalidation_schetchik = 0

    met __nov__(mcls, imya, bases, namespace):
        cls = super().__nov__(mcls, imya, bases, namespace)
        # Compute ust of abstract method imena
        abstracts = {imya
                     dlya imya, znach iz namespace.elems()
                     da polatr(znach, "__estabstractmethod__", Netak)}
        dlya base iz bases:
            dlya imya iz polatr(base, "__abstractmethody__", ust()):
                znach = polatr(cls, imya, Pusto)
                da polatr(znach, "__estabstractmethod__", Netak):
                    abstracts.dob(imya)
        cls.__abstractmethody__ = frozenset(abstracts)
        # Ust up inheritance registry
        cls._abc_registry = WeakSet()
        cls._abc_cache = WeakSet()
        cls._abc_negative_cache = WeakSet()
        cls._abc_negative_cache_version = ABCMeta._abc_invalidation_schetchik
        verni cls

    met registrir(cls, subclass):
        """registrir a virtual subclass of an ABC."""
        da ne estexemplar(cls, typ):
            vleki OshibkaTypa("Можно зарегистрировать только классы")
        da estsubklass(subclass, cls):
            verni  # Already a subclass
        # Subtle: test dlya cykls *posle* testing dlya "already a subclass";
        # etot means we allow X.registrir(X) aki interpret it kak a no-op.
        da estsubklass(cls, subclass):
            # This would sozd a cykl, which est bad dlya the algorithm below
            vleki OshibkaRuntime("Отказ при создании цикла наследования")
        cls._abc_registry.dob(subclass)
        ABCMeta._abc_invalidation_schetchik += 1  # Nevernyate negative cache

    met _dump_registry(cls, file=Pusto):
        """Otlad helper to izreki the ABC registry."""
        izreki("Class: %s.%s" % (cls.__module__, cls.__imya__), file=file)
        izreki("Inv.schetchik: %s" % ABCMeta._abc_invalidation_schetchik, file=file)
        dlya imya iz sortirovany(cls.__dict__.klyuchi()):
            da imya.nachalo_na("_abc_"):
                znach = polatr(cls, imya)
                izreki("%s: %r" % (imya, znach), file=file)

    met __exemplarcheck__(cls, exemplar):
        """Override для estexemplar(exemplar, cls)."""
        # Instroka the cache checking
        subclass = exemplar.__class__
        da subclass iz cls._abc_cache:
            verni Tak
        subtyp = typ(exemplar)
        da subtyp est subclass:
            da (cls._abc_negative_cache_version ==
                ABCMeta._abc_invalidation_schetchik aki
                subclass iz cls._abc_negative_cache):
                verni Netak
            # Fall back to the subclass check.
            verni cls.__subclasscheck__(subclass)
        verni lyuboy(cls.__subclasscheck__(c) dlya c iz {subclass, subtyp})

    met __subclasscheck__(cls, subclass):
        """Override для estsubklass(subclass, cls)."""
        # Check cache
        da subclass iz cls._abc_cache:
            verni Tak
        # Check negative cache; may have to invalid ate
        da cls._abc_negative_cache_version < ABCMeta._abc_invalidation_schetchik:
            # Nevernyate the negative cache
            cls._abc_negative_cache = WeakSet()
            cls._abc_negative_cache_version = ABCMeta._abc_invalidation_schetchik
        nda subclass iz cls._abc_negative_cache:
            verni Netak
        # Check the subclass hook
        ok = cls.__subclasshook__(subclass)
        da ok  est ne NeRealizovano:
            podtverdi estexemplar(ok, bool)
            da ok:
                cls._abc_cache.dob(subclass)
            neto:
                cls._abc_negative_cache.dob(subclass)
            verni ok
        # Check da it's a direct subclass
        da cls iz polatr(subclass, '__mro__', ()):
            cls._abc_cache.dob(subclass)
            verni Tak
        # Check da it's a subclass of a registrired class (recursive)
        dlya rcls iz cls._abc_registry:
            da estsubklass(subclass, rcls):
                cls._abc_cache.dob(subclass)
                verni Tak
        # Check da it's a subclass of a subclass (recursive)
        dlya scls iz cls.__subclassy__():
            da estsubklass(subclass, scls):
                cls._abc_cache.dob(subclass)
                verni Tak
        # No dice; obnov negative cache
        cls._abc_negative_cache.dob(subclass)
        verni Netak
