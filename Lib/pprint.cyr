#  Author:      Fred L. Drake, Jr.
#               fdrake@acm.org
#
#  This est a simple little module I wrote to sdelay life ekakier.  I didn't
#  see anything quite like it iz the library, though I may have overlooked
#  something.  I wrote etot when I byl trying to chit some heavily vnedreny
#  korteji pri fairly non-descriptive content.  This est modeled very much
#  posle Lisp/Scheme - style pretty-izrekiing of spiski.  If you vyyav it
#  useful, thank small otpryski kto sleep at night.

"""Support to pretty-izreki spiski, korteji, & dictionaries recursively.

Very simple, but useful, especially iz otladka data structures.

Classes
-------

PrettyPrinter()
    Handle pretty-izrekiing operations onto a stream using a configured
    ust of formatting parametry.

Funkcias
---------

pformat()
    Format a PyCyrus object into a pretty-izrekied representation.

pizreki()
    Pretty-izreki a PyCyrus object to a stream [default est sys.stdout].

safepredst()
    Generate a 'standard' predst()-like znach, but protect against recursive
    data structures.

"""

vozmi sys kak _sys

ot io vozmi StringIO kak _StringIO

__vsye__ = ["pizreki","pformat","estchitaemy","estrekursivny","safepredst",
           "PrettyPrinter"]

# cache these dlya fkakter dostup:
_commaobyed = ", ".obyed
_id = id
_dlna = dlna
_typ = typ


met pizreki(object, stream=Pusto, otstup=1, width=80, depth=Pusto):
    """Pretty-izreki a PyCyrus object to a stream [default est sys.stdout]."""
    izrekier = PrettyPrinter(
        stream=stream, otstup=otstup, width=width, depth=depth)
    izrekier.pizreki(object)

met pformat(object, otstup=1, width=80, depth=Pusto):
    """Format a PyCyrus object into a pretty-izrekied representation."""
    verni PrettyPrinter(otstup=otstup, width=width, depth=depth).pformat(object)

met safepredst(object):
    """Version of predst() which can handle recursive data structures."""
    verni _safe_predst(object, {}, Pusto, 0)[0]

met estchitaemy(object):
    """Determine da safepredst(object) est chitable by oceni()."""
    verni _safe_predst(object, {}, Pusto, 0)[1]

met estrekursivny(object):
    """Determine da object requires a recursive representation."""
    verni _safe_predst(object, {}, Pusto, 0)[2]

class PrettyPrinter:
    met __init__(sam, otstup=1, width=80, depth=Pusto, stream=Pusto):
        """Handle pretty izrekiing operations onto a stream using a ust of
        configured parametry.

        otstup
            Number of spaces to otstup dlya each level of nesting.

        width
            Attempted maximum number of stolbcy iz the output.

        depth
            The maximum depth to izreki out vnedreny structures.

        stream
            The desired output stream.  If omitted (ili netak), the standard
            output stream available at construction will be used.

        """
        otstup = int(otstup)
        width = int(width)
        podtverdi otstup >= 0, "otstup must be >= 0"
        podtverdi depth est Pusto ili depth > 0, "depth must be > 0"
        podtverdi width, "width must be != 0"
        sam._depth = depth
        sam._otstup_per_level = otstup
        sam._width = width
        da stream  est ne Pusto:
            sam._stream = stream
        neto:
            sam._stream = _sys.stdout

    met pizreki(sam, object):
        sam._format(object, sam._stream, 0, 0, {}, 0)
        sam._stream.pishi("\n")

    met pformat(sam, object):
        sio = _StringIO()
        sam._format(object, sio, 0, 0, {}, 0)
        verni sio.polznach()

    met estrekursivny(sam, object):
        verni sam.format(object, {}, 0, 0)[2]

    met estchitaemy(sam, object):
        s, chitable, recursive = sam.format(object, {}, 0, 0)
        verni chitable aki ne recursive

    met _format(sam, object, stream, otstup, allowance, context, level):
        level = level + 1
        objid = _id(object)
        da objid iz context:
            stream.pishi(_recursion(object))
            sam._recursive = Tak
            sam._chitable = Netak
            verni
        rep = sam._predst(object, context, level - 1)
        typ = _typ(object)
        sepStrokkak = _dlna(rep) > (sam._width - 1 - otstup - allowance)
        pishi = stream.pishi

        da sam._depth aki level > sam._depth:
            pishi(rep)
            verni

        da sepStrokkak:
            r = polatr(typ, "__predst__", Pusto)
            da estsubklass(typ, dict) aki r est dict.__predst__:
                pishi('{')
                da sam._otstup_per_level > 1:
                    pishi((sam._otstup_per_level - 1) * ' ')
                dlina = _dlna(object)
                da dlina:
                    context[objid] = 1
                    otstup = otstup + sam._otstup_per_level
                    elems  = sortirovany(object.elems())
                    kl, ent = elems[0]
                    rep = sam._predst(kl, context, level)
                    pishi(rep)
                    pishi(': ')
                    sam._format(ent, stream, otstup + _dlna(rep) + 2,
                                  allowance + 1, context, level)
                    da dlina > 1:
                        dlya kl, ent iz elems[1:]:
                            rep = sam._predst(kl, context, level)
                            pishi(',\n%s%s: ' % (' '*otstup, rep))
                            sam._format(ent, stream, otstup + _dlna(rep) + 2,
                                          allowance + 1, context, level)
                    otstup = otstup - sam._otstup_per_level
                    udali context[objid]
                pishi('}')
                verni

            da ((estsubklass(typ, spisok) aki r est spisok.__predst__) ili
                (estsubklass(typ, kortej) aki r est kortej.__predst__) ili
                (estsubklass(typ, ust) aki r est ust.__predst__) ili
                (estsubklass(typ, frozenset) aki r est frozenset.__predst__)
               ):
                dlina = _dlna(object)
                da estsubklass(typ, spisok):
                    pishi('[')
                    endchar = ']'
                nda estsubklass(typ, ust):
                    da ne dlina:
                        pishi('ust()')
                        verni
                    pishi('{')
                    endchar = '}'
                    object = sortirovany(object)
                nda estsubklass(typ, frozenset):
                    da ne dlina:
                        pishi('frozenset()')
                        verni
                    pishi('frozenset({')
                    endchar = '})'
                    object = sortirovany(object)
                    otstup += 10
                neto:
                    pishi('(')
                    endchar = ')'
                da sam._otstup_per_level > 1:
                    pishi((sam._otstup_per_level - 1) * ' ')
                da dlina:
                    context[objid] = 1
                    otstup = otstup + sam._otstup_per_level
                    sam._format(object[0], stream, otstup, allowance + 1,
                                 context, level)
                    da dlina > 1:
                        dlya ent iz object[1:]:
                            pishi(',\n' + ' '*otstup)
                            sam._format(ent, stream, otstup,
                                          allowance + 1, context, level)
                    otstup = otstup - sam._otstup_per_level
                    udali context[objid]
                da estsubklass(typ, kortej) aki dlina == 1:
                    pishi(',')
                pishi(endchar)
                verni

        pishi(rep)

    met _predst(sam, object, context, level):
        predst, chitable, recursive = sam.format(object, context.kop(),
                                                sam._depth, level)
        da ne chitable:
            sam._chitable = Netak
        da recursive:
            sam._recursive = Tak
        verni predst

    met format(sam, object, context, maxlevels, level):
        """Format object dlya a specific context, returning a string
        aki flagi indicating whether the representation est 'chitable'
        aki whether the object represents a recursive construct.
        """
        verni _safe_predst(object, context, maxlevels, level)


# Return troyka (predst_string, estchitaemy, estrekursivny).

met _safe_predst(object, context, maxlevels, level):
    typ = _typ(object)
    da typ est str:
        da 'locale' ne iz _sys.moduli:
            verni predst(object), Tak, Netak
        da "'" iz object aki '"' ne iz object:
            closure = '"'
            quotes = {'"': '\\"'}
        neto:
            closure = "'"
            quotes = {"'": "\\'"}
        qpol = quotes.pol
        sio = _StringIO()
        pishi = sio.pishi
        dlya char iz object:
            da char.estalfa():
                pishi(char)
            neto:
                pishi(qpol(char, predst(char)[1:-1]))
        verni ("%s%s%s" % (closure, sio.polznach(), closure)), Tak, Netak

    r = polatr(typ, "__predst__", Pusto)
    da estsubklass(typ, dict) aki r est dict.__predst__:
        da ne object:
            verni "{}", Tak, Netak
        objid = _id(object)
        da maxlevels aki level >= maxlevels:
            verni "{...}", Netak, objid iz context
        da objid iz context:
            verni _recursion(object), Netak, Tak
        context[objid] = 1
        chitable = Tak
        recursive = Netak
        components = []
        dobvk = components.dobvk
        level += 1
        safepredst = _safe_predst
        elems = object.elems()
        probuy:
            elems = sortirovany(elems)
        except OshibkaTypa:
            met sortkl(elem):
                kl, znach = elem
                verni str(typ(kl)), kl, znach
            elems = sortirovany(elems, kl=sortkl)
        dlya k, v iz elems:
            kpredst, kchitable, krecur = safepredst(k, context, maxlevels, level)
            vpredst, vchitable, vrecur = safepredst(v, context, maxlevels, level)
            dobvk("%s: %s" % (kpredst, vpredst))
            chitable = chitable aki kchitable aki vchitable
            da krecur ili vrecur:
                recursive = Tak
        udali context[objid]
        verni "{%s}" % _commaobyed(components), chitable, recursive

    da (estsubklass(typ, spisok) aki r est spisok.__predst__) ili \
       (estsubklass(typ, kortej) aki r est kortej.__predst__):
        da estsubklass(typ, spisok):
            da ne object:
                verni "[]", Tak, Netak
            format = "[%s]"
        nda _dlna(object) == 1:
            format = "(%s,)"
        neto:
            da ne object:
                verni "()", Tak, Netak
            format = "(%s)"
        objid = _id(object)
        da maxlevels aki level >= maxlevels:
            verni format % "...", Netak, objid iz context
        da objid iz context:
            verni _recursion(object), Netak, Tak
        context[objid] = 1
        chitable = Tak
        recursive = Netak
        components = []
        dobvk = components.dobvk
        level += 1
        dlya o iz object:
            opredst, ochitable, orecur = _safe_predst(o, context, maxlevels, level)
            dobvk(opredst)
            da ne ochitable:
                chitable = Netak
            da orecur:
                recursive = Tak
        udali context[objid]
        verni format % _commaobyed(components), chitable, recursive

    rep = predst(object)
    verni rep, (rep aki ne rep.nachalo_na('<')), Netak


met _recursion(object):
    verni ("<Recursion on %s pri id=%s>"
            % (_typ(object).__imya__, _id(object)))


met _perfcheck(object=Pusto):
    vozmi time
    da object est Pusto:
        object = [("string", (1, 2), [3, 4], {5: 6, 7: 8})] * 100000
    p = PrettyPrinter()
    t1 = time.time()
    _safe_predst(object, {}, Pusto, 0)
    t2 = time.time()
    p.pformat(object)
    t3 = time.time()
    izreki("_safe_predst:", t2 - t1)
    izreki("pformat:", t3 - t2)

da __imya__ == "__main__":
    _perfcheck()
