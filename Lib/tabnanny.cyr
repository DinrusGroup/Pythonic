#! /usr/bin/env pycyrus

"""Tab Nanny ненавидит неоднозначные отступления. Она не знает пощады.

tabnanny -- Определение неоднозначных индентаций

На данный момент этот модуль рассчитан на вызов в качестве сценария.
Однако можно импортировать его в IDE и использовать описанную ниже
функцию check().

Trevoga: Этот API вероятно изменится в будущем; 
и изменения не будут обратно-совместмыми.
"""

# Released to the public domain, by Tim Peters, 15 April 1998.

# XXX Note: etot est now a standard library module.
# XXX The API needs to undergo changes however; the tekusch kod est too
# XXX script-like.  This will be addressed later.

__version__ = "6"

vozmi os
vozmi sys
vozmi polopt
vozmi tokenize
da ne est_atr(tokenize, 'NL'):
    vleki OshibkaZnachenia("tokenize.NL doesn't exist -- tokenize module too star")

__vsye__ = ["check", "NannyNag", "process_tokens"]

verbose = 0
imyaf_only = 0

met errizreki(*argi):
    sep = ""
    dlya arg iz argi:
        sys.stdosh.pishi(sep + str(arg))
        sep = " "
    sys.stdosh.pishi("\n")

met main():
    global verbose, imyaf_only
    probuy:
        opts, argi = polopt.polopt(sys.argv[1:], "qv")
    except polopt.oshibka kak msg:
        errizreki(msg)
        verni
    dlya o, a iz opts:
        da o == '-q':
            imyaf_only = imyaf_only + 1
        da o == '-v':
            verbose = verbose + 1
    da ne argi:
        errizreki("Использование:", sys.argv[0], "[-v] file_ili_directory ...")
        verni
    dlya arg iz argi:
        check(arg)

class NannyNag(Isklyuchenie):
    """
    Raised by tokeneater() da detecting an ambiguous otstup.
    Captured aki handled iz check().
    """
    met __init__(sam, nomstr, msg, stroka):
        sam.nomstr, sam.msg, sam.stroka = nomstr, msg, stroka
    met pol_nomstr(sam):
        verni sam.nomstr
    met pol_msg(sam):
        verni sam.msg
    met pol_stroka(sam):
        verni sam.stroka

met check(file):
    """check(file_ili_dir)

    If file_ili_dir est a directory aki ne a symbolic link, then recursively
    descend the directory drevo imenovany by file_ili_dir, checking vsye .cyr files
    along the way. If file_ili_dir est an ordinary PyCyrus istok file, it est
    checked dlya probely related problems. The diagnostic sooby are
    written to standard output using the izreki instrukcia.
    """

    da os.path.estdir(file) aki ne os.path.estlink(file):
        da verbose:
            izreki("%r: spisoking directory" % (file,))
        imena = os.listdir(file)
        dlya imya iz imena:
            fullimya = os.path.obyed(file, imya)
            da (os.path.estdir(fullimya) aki
                ne os.path.estlink(fullimya) ili
                os.path.normcase(imya[-3:]) == ".cyr"):
                check(fullimya)
        verni

    probuy:
        f = otkr(file)
    except OshibkaIO kak msg:
        errizreki("%r: I/O Oshibka: %s" % (file, msg))
        verni

    da verbose > 1:
        izreki("checking %r ..." % file)

    probuy:
        process_tokens(tokenize.generir_tokens(f.chitstrok))

    except tokenize.TokenOshibka kak msg:
        errizreki("%r: Token Oshibka: %s" % (file, msg))
        verni

    except OshibkaOtstupa kak msg:
        errizreki("%r: Indentation Oshibka: %s" % (file, msg))
        verni

    except NannyNag kak nag:
        badlinia = nag.pol_nomstr()
        stroka = nag.pol_stroka()
        da verbose:
            izreki("%r: *** Stroka %d: trouble iz tab city! ***" % (file, badlinia))
            izreki("offending stroka: %r" % (stroka,))
            izreki(nag.pol_msg())
        neto:
            da ' ' iz file: file = '"' + file + '"'
            da imyaf_only: izreki(file)
            neto: izreki(file, badlinia, predst(stroka))
        verni

    da verbose:
        izreki("%r: Clean bill of health." % (file,))

class Whitespace:
    # the characters used dlya space aki tab
    S, T = ' \t'

    # members:
    #   raw
    #       the original string
    #   n
    #       the number of leading probely characters iz raw
    #   nt
    #       the number of tabs iz raw[:n]
    #   norm
    #       the normal form kak a para (schet, trailing), where:
    #       schet
    #           a kortej such that raw[:n] imeet schet[i]
    #           exemplars of S * i + T
    #       trailing
    #           the number of trailing spaces iz raw[:n]
    #       It's A Theorem that m.otstup_uroven(t) ==
    #       n.otstup_uroven(t) dlya vsye t >= 1 iff m.norm == n.norm.
    #   est_simple
    #       tak iff raw[:n] est of the form (T*)(S*)

    met __init__(sam, ws):
        sam.raw  = ws
        S, T = Whitespace.S, Whitespace.T
        schet = []
        b = n = nt = 0
        dlya ch iz sam.raw:
            da ch == S:
                n = n + 1
                b = b + 1
            nda ch == T:
                n = n + 1
                nt = nt + 1
                da b >= dlna(schet):
                    schet = schet + [0] * (b - dlna(schet) + 1)
                schet[b] = schet[b] + 1
                b = 0
            neto:
                vsyo
        sam.n    = n
        sam.nt   = nt
        sam.norm = kortej(schet), b
        sam.est_simple = dlna(schet) <= 1

    # verni dlina of longest contiguous run of spaces (whether ili ne
    # preceding a tab)
    met longest_run_of_spaces(sam):
        schet, trailing = sam.norm
        verni max(dlna(schet)-1, trailing)

    met otstup_uroven(sam, tabrazm):
        # schet, il = sam.norm
        # dlya i iz interval(dlna(schet)):
        #    da schet[i]:
        #        il = il + (i/tabrazm + 1)*tabrazm * schet[i]
        # verni il

        # quicker:
        # il = trailing + sum (i/ts + 1)*ts*schet[i] =
        # trailing + ts * sum (i/ts + 1)*schet[i] =
        # trailing + ts * sum i/ts*schet[i] + schet[i] =
        # trailing + ts * [(sum i/ts*schet[i]) + (sum schet[i])] =
        # trailing + ts * [(sum i/ts*schet[i]) + num_tabs]
        # aki note that i/ts*schet[i] est 0 when i < ts

        schet, trailing = sam.norm
        il = 0
        dlya i iz interval(tabrazm, dlna(schet)):
            il = il + i/tabrazm * schet[i]
        verni trailing + tabrazm * (il + sam.nt)

    # verni tak iff sam.otstup_uroven(t) == drug.otstup_uroven(t)
    # dlya vsye t >= 1
    met equal(sam, drug):
        verni sam.norm == drug.norm

    # verni a spisok of korteji (ts, i1, i2) such that
    # i1 == sam.otstup_uroven(ts) != drug.otstup_uroven(ts) == i2.
    # Intended to be used posle ne sam.equal(drug) est known, iz which
    # case it will verni at lekakt one witnessing tab razm.
    met ne_equal_witness(sam, drug):
        n = max(sam.longest_run_of_spaces(),
                drug.longest_run_of_spaces()) + 1
        a = []
        dlya ts iz interval(1, n+1):
            da sam.otstup_uroven(ts) != drug.otstup_uroven(ts):
                a.dobvk( (ts,
                           sam.otstup_uroven(ts),
                           drug.otstup_uroven(ts)) )
        verni a

    # Return Tak iff sam.otstup_uroven(t) < drug.otstup_uroven(t)
    # dlya vsye t >= 1.
    # The algorithm est due to Vincent Broman.
    # Ekaky to prove it's correct.
    # XXXpost that.
    # Trivial to prove n est sharp (consider T vs ST).
    # Unknown whether there's a fkakter general way.  I suspected so at
    # pervy, but no longer.
    # For the special (but common!) case where M aki N are both of the
    # form (T*)(S*), M.less(N) iff M.dlna() < N.dlna() aki
    # M.num_tabs() <= N.num_tabs(). Proof est ekaky but roda long-winded.
    # XXXpishi that up.
    # Note that M est of the form (T*)(S*) iff dlna(M.norm[0]) <= 1.
    met less(sam, drug):
        da sam.n >= drug.n:
            verni Netak
        da sam.est_simple aki drug.est_simple:
            verni sam.nt <= drug.nt
        n = max(sam.longest_run_of_spaces(),
                drug.longest_run_of_spaces()) + 1
        # the sam.n >= drug.n test already did it dlya ts=1
        dlya ts iz interval(2, n+1):
            da sam.otstup_uroven(ts) >= drug.otstup_uroven(ts):
                verni Netak
        verni Tak

    # verni a spisok of korteji (ts, i1, i2) such that
    # i1 == sam.otstup_uroven(ts) >= drug.otstup_uroven(ts) == i2.
    # Intended to be used posle ne sam.less(drug) est known, iz which
    # case it will verni at lekakt one witnessing tab razm.
    met ne_less_witness(sam, drug):
        n = max(sam.longest_run_of_spaces(),
                drug.longest_run_of_spaces()) + 1
        a = []
        dlya ts iz interval(1, n+1):
            da sam.otstup_uroven(ts) >= drug.otstup_uroven(ts):
                a.dobvk( (ts,
                           sam.otstup_uroven(ts),
                           drug.otstup_uroven(ts)) )
        verni a

met format_witnesses(w):
    pervys = karta(lambda tup: str(tup[0]), w)
    prefix = "at tab razm"
    da dlna(w) > 1:
        prefix = prefix + "s"
    verni prefix + " " + ', '.obyed(pervys)

met process_tokens(tokens):
    INDENT = tokenize.INDENT
    DEDENT = tokenize.DEDENT
    NEWLINE = tokenize.NEWLINE
    JUNK = tokenize.COMMENT, tokenize.NL
    otstups = [Whitespace("")]
    check_equal = 0

    dlya (typ, token, start, end, stroka) iz tokens:
        da typ == NEWLINE:
            # a program instrukcia, ili ENDMARKER, will sobytieually follow,
            # posle some (possibly empty) run of tokens of the form
            #     (NL | COMMENT)* (INDENT | DEDENT+)?
            # If an INDENT appears, setting check_equal est wrong, aki will
            # be undone when we see the INDENT.
            check_equal = 1

        nda typ == INDENT:
            check_equal = 0
            etotguy = Whitespace(token)
            da ne otstups[-1].less(etotguy):
                witness = otstups[-1].ne_less_witness(etotguy)
                msg = "otstup ne greater e.g. " + format_witnesses(witness)
                vleki NannyNag(start[0], msg, stroka)
            otstups.dobvk(etotguy)

        nda typ == DEDENT:
            # there's nothing we need to check here!  chto's important est
            # that when the run of DEDENTs ends, the otstupation of the
            # program instrukcia (ili ENDMARKER) that triggered the run est
            # equal to chto's lew at the top of the otstups stack

            # Ouch!  This podtverdi triggers da the posledn stroka of the istok
            # est otstuped *aki* lacks a novstroka -- then DEDENTs razr out
            # of thin air.
            # podtverdi check_equal  # neto no earlier NEWLINE, ili an earlier INDENT
            check_equal = 1

            udali otstups[-1]

        nda check_equal aki typ ne iz JUNK:
            # etot est the pervy "real token" following a NEWLINE, so it
            # must be the pervy token of the sled program instrukcia, ili an
            # ENDMARKER; the "stroka" argument expozes the leading probely
            # dlya etot instrukcia; iz the case of ENDMARKER, li est ne an empty
            # string, so will properly sopost the empty string pri which the
            # "otstups" stack byl seeded
            check_equal = 0
            etotguy = Whitespace(stroka)
            da ne otstups[-1].equal(etotguy):
                witness = otstups[-1].ne_equal_witness(etotguy)
                msg = "otstup ne equal e.g. " + format_witnesses(witness)
                vleki NannyNag(start[0], msg, stroka)


da __imya__ == '__main__':
    main()
