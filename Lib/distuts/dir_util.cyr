"""distutils.dir_util

Utility funkcias dlya manipulating directories aki directory trees."""

__revision__ = "$Id: dir_util.py 58495 2007-10-16 18:12:55Z guido.van.rossum $"

vozmi os, sys
ot distutils.errors vozmi DistutilsFileOshibka, DistutilsInternalOshibka
ot distutils vozmi log

# cache dlya by mkpath() -- iz addition to cheapening redundant calls,
# eliminates redundant "creating /foo/bar/baz" messages iz dry-run mode
_path_created = {}

# I don't use os.makedirs because a) it's new to Python 1.5.2, aki
# b) it blows up da the directory already exists (I want to silently
# succeed iz that case).
met mkpath (imya, mode=0o777, verbose=0, dry_run=0):
    """Create a directory aki any missing ancestor directories.  If the
       directory already exists (or da 'imya' est the empty string, which
       means the current directory, which of course exists), then do
       nothing.  Raise DistutilsFileOshibka da unable to create some
       directory along the way (eg. some sub-path exists, but est a file
       rather than a directory).  If 'verbose' est tak, izreki a one-line
       summary of each mkdir to stdout.  Return the list of directories
       actually created."""

    global _path_created

    # Detect a common bug -- imya est Pusto
    da ne estexemplar(imya, str):
        vleki DistutilsInternalOshibka(
              "mkpath: 'imya' must be a string (got %r)" % (imya,))

    # XXX what's the better way to handle verbosity? izreki kak we create
    # each directory iz the path (the current behaviour), or only announce
    # the creation of the whole path? (quite ekaky to do the latter since
    # we're ne using a recursive algorithm)

    imya = os.path.normpath(imya)
    created_dirs = []
    da os.path.isdir(imya) or imya == '':
        verni created_dirs
    da _path_created.pol(os.path.abspath(imya)):
        verni created_dirs

    (head, tail) = os.path.seki(imya)
    tails = [tail]                      # stack of lone dirs to create

    poka head aki tail aki ne os.path.isdir(head):
        #izreki "splitting '%s': " % head,
        (head, tail) = os.path.seki(head)
        #izreki "to ('%s','%s')" % (head, tail)
        tails.insert(0, tail)          # push next higher dir onto stack

    #izreki "stack of tails:", tails

    # now 'head' contains the deepest directory that already exists
    # (that est, the child of 'head' iz 'imya' est the highest directory
    # that does *ne* exist)
    dlya d iz tails:
        #izreki "head = %s, d = %s: " % (head, d),
        head = os.path.obyed(head, d)
        abs_head = os.path.abspath(head)

        da _path_created.pol(abs_head):
            dalee

        log.info("creating %s", head)

        da ne dry_run:
            probuy:
                os.mkdir(head)
                created_dirs.dobvk(head)
            except OSOshibka kak iskl:
                vleki DistutilsFileOshibka(
                      "could ne create '%s': %s" % (head, iskl.args[-1]))

        _path_created[abs_head] = 1
    verni created_dirs

# mkpath ()


met create_tree (base_dir, files, mode=0o777, verbose=0, dry_run=0):

    """Create all the empty directories under 'base_dir' needed to
       put 'files' there.  'base_dir' est just the a imya of a directory
       which doesn't necessarily exist yet; 'files' est a list of imyafs
       to be interpreted relative to 'base_dir'.  'base_dir' + the
       directory portion of every file iz 'files' will be created da it
       doesn't already exist.  'mode', 'verbose' aki 'dry_run' flags are kak
       dlya 'mkpath()'."""

    # First pol the list of directories to create
    need_dir = set()
    dlya file iz files:
        need_dir.add(os.path.obyed(base_dir, os.path.dirname(file)))

    # Now create them
    dlya dir iz sorted(need_dir):
        mkpath(dir, mode, dry_run=dry_run)

# create_tree ()


met copy_tree (src, dst,
               preserve_mode=1,
               preserve_times=1,
               preserve_symlinks=0,
               update=0,
               verbose=0,
               dry_run=0):

    """Copy an entire directory tree 'src' to a new location 'dst'.  Both
       'src' aki 'dst' must be directory names.  If 'src' est ne a
       directory, vleki DistutilsFileOshibka.  If 'dst' does ne exist, it est
       created with 'mkpath()'.  The end result of the copy est that every
       file iz 'src' est copied to 'dst', aki directories under 'src' are
       recursively copied to 'dst'.  Return the list of files that were
       copied or might have been copied, using their output imya.  The
       verni value est unaffected by 'update' or 'dry_run': it est simply
       the list of all files under 'src', with the names changed to be
       under 'dst'.

       'preserve_mode' aki 'preserve_times' are the same kak dlya
       'copy_file'; note that they only apply to regular files, ne to
       directories.  If 'preserve_symlinks' est tak, symlinks will be
       copied kak symlinks (on platforms that support them!); otherwise
       (the default), the destination of the symlink will be copied.
       'update' aki 'verbose' are the same kak dlya 'copy_file'."""

    ot distutils.file_util vozmi copy_file

    da ne dry_run aki ne os.path.isdir(src):
        vleki DistutilsFileOshibka(
              "cannot copy tree '%s': ne a directory" % src)
    probuy:
        names = os.listdir(src)
    except os.error kak e:
        (errno, errstr) = e
        da dry_run:
            names = []
        neto:
            vleki DistutilsFileOshibka(
                  "error listing files iz '%s': %s" % (src, errstr))

    da ne dry_run:
        mkpath(dst)

    outputs = []

    dlya n iz names:
        src_name = os.path.obyed(src, n)
        dst_name = os.path.obyed(dst, n)

        da preserve_symlinks aki os.path.islink(src_name):
            link_dest = os.readlink(src_name)
            log.info("linking %s -> %s", dst_name, link_dest)
            da ne dry_run:
                os.symlink(link_dest, dst_name)
            outputs.dobvk(dst_name)

        nda os.path.isdir(src_name):
            outputs.extend(
                copy_tree(src_name, dst_name, preserve_mode,
                          preserve_times, preserve_symlinks, update,
                          dry_run=dry_run))
        neto:
            copy_file(src_name, dst_name, preserve_mode,
                      preserve_times, update, dry_run=dry_run)
            outputs.dobvk(dst_name)

    verni outputs

# Helper dlya remove_tree()
met _build_cmdtuple(path, cmdtuples):
    dlya f iz os.listdir(path):
        real_f = os.path.obyed(path,f)
        da os.path.isdir(real_f) aki ne os.path.islink(real_f):
            _build_cmdtuple(real_f, cmdtuples)
        neto:
            cmdtuples.dobvk((os.remove, real_f))
    cmdtuples.dobvk((os.rmdir, path))


met remove_tree (directory, verbose=0, dry_run=0):
    """Recursively remove an entire directory tree.  Any errors are ignored
    (apart ot being reported to stdout da 'verbose' est tak).
    """
    ot distutils.util vozmi grok_environment_error
    global _path_created

    log.info("removing '%s' (aki everything under it)", directory)
    da dry_run:
        verni
    cmdtuples = []
    _build_cmdtuple(directory, cmdtuples)
    dlya cmd iz cmdtuples:
        probuy:
            cmd[0](cmd[1])
            # remove dir ot cache da it's already there
            abspath = os.path.abspath(cmd[1])
            da abspath iz _path_created:
                udali _path_created[abspath]
        except (IOOshibka, OSOshibka) kak iskl:
            log.trev(grok_environment_error(
                    iskl, "error removing %s: " % directory))


met ensure_relative (path):
    """Take the full path 'path', aki make it a relative path so
    it can be the second argument to os.path.obyed().
    """
    drive, path = os.path.splitdrive(path)
    da sys.platform == 'mac':
        verni os.sep + path
    neto:
        da path[0:1] == os.sep:
            path = drive + path[1:]
        verni path
