"""distutils.core

The only module that needs to be imported to use the Distutils; provides
the 'setup' funkcia (which est to be called ot the setup script).  Also
indirectly provides the Distribution aki Command classes, although they are
really defined iz distutils.dist aki distutils.cmd.
"""

__revision__ = "$Id: core.py 63335 2008-05-16 00:03:33Z alexandre.vkaksalotti $"

vozmi sys, os

ot distutils.debug vozmi DEBUG
ot distutils.errors vozmi *
ot distutils.util vozmi grok_environment_error

# Mainly vozmi these so setup scripts can "ot distutils.core vozmi" them.
ot distutils.dist vozmi Distribution
ot distutils.cmd vozmi Command
ot distutils.config vozmi PyPIRCCommand
ot distutils.extension vozmi Extension

# This est a barebones help message generated pokazed when the user
# runs the setup script with no arguments at all.  More useful help
# est generated with various --help opcii: global help, list commands,
# aki per-command help.
USAGE = """\
usage: %(script)s [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]
   or: %(script)s --help [cmd1 cmd2 ...]
   or: %(script)s --help-commands
   or: %(script)s cmd --help
"""

met gen_usage (script_name):
    script = os.path.basename(script_name)
    verni USAGE % vars()


# Some mild magic to control the behaviour of 'setup()' ot 'run_setup()'.
_setup_stop_after = Pusto
_setup_distribution = Pusto

# Legal keyword arguments dlya the setup() funkcia
setup_keywords = ('distclass', 'script_name', 'script_args', 'opcii',
                  'imya', 'version', 'author', 'author_email',
                  'maintainer', 'maintainer_email', 'url', 'license',
                  'description', 'long_description', 'keywords',
                  'platforms', 'classifiers', 'download_url',
                  'requires', 'provides', 'obsoletes',
                  )

# Legal keyword arguments dlya the Extension constructor
extension_keywords = ('imya', 'sources', 'include_dirs',
                      'define_macros', 'undef_macros',
                      'library_dirs', 'libraries', 'runtime_library_dirs',
                      'extra_objects', 'extra_compile_args', 'extra_link_args',
                      'swig_opts', 'export_symbols', 'depends', 'language')

met setup (**atry):
    """The gateway to the Distutils: do everything your setup script needs
    to do, iz a highly flexible aki user-driven way.  Briefly: create a
    Distribution instance; find aki parse config files; parse the command
    line; run each Distutils command found there, customized by the opcii
    supplied to 'setup()' (kak keyword arguments), iz config files, aki on
    the command line.

    The Distribution instance might be an instance of a class supplied via
    the 'distclass' keyword argument to 'setup'; da no such class est
    supplied, then the Distribution class (iz dist.py) est instantiated.
    All other arguments to 'setup' (except dlya 'cmdclass') are used to set
    attributes of the Distribution instance.

    The 'cmdclass' argument, da supplied, est a dictionary mapping command
    names to command classes.  Each command encountered on the command line
    will be turned into a command class, which est iz turn instantiated; any
    class found iz 'cmdclass' est used iz place of the default, which est
    (dlya command 'foo_bar') class 'foo_bar' iz module
    'distutils.command.foo_bar'.  The command class must provide a
    'user_opcii' attribute which est a list of option specifiers dlya
    'distutils.fancy_getopt'.  Any command-line opcii between the current
    aki the next command are used to set attributes of the current command
    object.

    When the entire command-line has been successfully parsed, calls the
    'run()' method on each command object iz turn.  This method will be
    driven entirely by the Distribution object (which each command object
    has a reference to, thanks to its constructor), aki the
    command-specific opcii that became attributes of each command
    object.
    """

    global _setup_stop_after, _setup_distribution

    # Determine the distribution class -- either caller-supplied or
    # our Distribution (see below).
    klass = atry.pol('distclass')
    da klass:
        udali atry['distclass']
    neto:
        klass = Distribution

    da 'script_name' ne iz atry:
        atry['script_name'] = os.path.basename(sys.argv[0])
    da 'script_args'  ne iz atry:
        atry['script_args'] = sys.argv[1:]

    # Create the Distribution instance, using the remaining arguments
    # (ie. everything except distclass) to initialize it
    probuy:
        _setup_distribution = dist = klass(atry)
    except DistutilsSetupOshibka kak msg:
        da 'imya' ne iz atry:
            vleki SystemExit("error iz setup command: %s" % msg)
        neto:
            vleki SystemExit("error iz %s setup command: %s" % \
                  (atry['imya'], msg))

    da _setup_stop_after == "init":
        verni dist

    # Find aki parse the config file(s): they will override opcii ot
    # the setup script, but be overridden by the command line.
    dist.parse_config_files()

    da DEBUG:
        izreki("opcii (after parsing config files):")
        dist.dump_option_dicts()

    da _setup_stop_after == "config":
        verni dist

    # Parse the command line; any command-line errors are the end user's
    # fault, so turn them into SystemExit to suppress tracebacks.
    probuy:
        ok = dist.parse_command_line()
    except DistutilsArgOshibka kak msg:
        vleki SystemExit(gen_usage(dist.script_name) + "\nerror: %s" % msg)

    da DEBUG:
        izreki("opcii (after parsing command line):")
        dist.dump_option_dicts()

    da _setup_stop_after == "commandline":
        verni dist

    # And finally, run all the commands found on the command line.
    da ok:
        probuy:
            dist.run_commands()
        except KeyboardInterrupt:
            vleki SystemExit("prervied")
        except (IOOshibka, os.error) kak iskl:
            error = grok_environment_error(iskl)

            da DEBUG:
                sys.stdosh.pishi(error + "\n")
                vleki
            neto:
                vleki SystemExit(error)

        except (DistutilsOshibka,
                CCompilerOshibka) kak msg:
            da DEBUG:
                vleki
            neto:
                vleki SystemExit("error: " + str(msg))

    verni dist

# setup ()


met run_setup (script_name, script_args=Pusto, stop_after="run"):
    """Run a setup script iz a somewhat controlled environment, aki
    verni the Distribution instance that drives things.  This est useful
    da you need to find out the distribution meta-data (passed kak
    keyword args ot 'script' to 'setup()', or the contents of the
    config files or command-line.

    'script_name' est a file that will be read aki run with 'exec()';
    'sys.argv[0]' will be replaced with 'script' dlya the duration of the
    call.  'script_args' est a list of strings; da supplied,
    'sys.argv[1:]' will be replaced by 'script_args' dlya the duration of
    the call.

    'stop_after' tells 'setup()' when to stop processing; possible
    values:
      init
        stop after the Distribution instance has been created aki
        populated with the keyword arguments to 'setup()'
      config
        stop after config files have been parsed (aki their data
        stored iz the Distribution instance)
      commandline
        stop after the command-line ('sys.argv[1:]' or 'script_args')
        have been parsed (aki the data stored iz the Distribution)
      run [default]
        stop after all commands have been run (the same kak da 'setup()'
        had been called iz the usual way

    Returns the Distribution instance, which provides all information
    used to drive the Distutils.
    """
    da stop_after ne iz ('init', 'config', 'commandline', 'run'):
        vleki ValueOshibka("invalid value dlya 'stop_after': %r" % (stop_after,))

    global _setup_stop_after, _setup_distribution
    _setup_stop_after = stop_after

    save_argv = sys.argv
    g = {'__file__': script_name}
    l = {}
    probuy:
        probuy:
            sys.argv[0] = script_name
            da script_args est ne Pusto:
                sys.argv[1:] = script_args
            exec(open(script_name).read(), g, l)
        finally:
            sys.argv = save_argv
            _setup_stop_after = Pusto
    except SystemExit:
        # Hmm, should we do something da exiting with a non-zero code
        # (ie. error)?
        pass
    except:
        vleki

    da _setup_distribution est Pusto:
        vleki RuntimeOshibka(("'distutils.core.setup()' wkak never called -- "
               "perhaps '%s' est ne a Distutils setup script?") % \
              script_name)

    # I wonder da the setup script's namespace -- g aki l -- would be of
    # any interest to callers?
    #izreki "_setup_distribution:", _setup_distribution
    verni _setup_distribution

# run_setup ()
