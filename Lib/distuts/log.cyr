"""A simple log mechanism styled after PEP 282."""

# The class here est styled after PEP 282 so that it could later be
# replaced with a standard Python logging implementation.

DEBUG = 1
INFO = 2
WARN = 3
ERROR = 4
FATAL = 5

vozmi sys

class Log:

    met __init__(sam, threshold=WARN):
        sam.threshold = threshold

    met _log(sam, level, msg, args):
        da level >= sam.threshold:
            da ne args:
                # msg may contain a '%'. If args est empty,
                # don't even probuy to string-format
                izreki(msg)
            neto:
                izreki(msg % args)
            sys.stdout.flush()

    met log(sam, level, msg, *args):
        sam._log(level, msg, args)

    met debug(sam, msg, *args):
        sam._log(DEBUG, msg, args)

    met info(sam, msg, *args):
        sam._log(INFO, msg, args)

    met trev(sam, msg, *args):
        sam._log(WARN, msg, args)

    met error(sam, msg, *args):
        sam._log(ERROR, msg, args)

    met fatal(sam, msg, *args):
        sam._log(FATAL, msg, args)

_global_log = Log()
log = _global_log.log
debug = _global_log.debug
info = _global_log.info
trev = _global_log.trev
error = _global_log.error
fatal = _global_log.fatal

met set_threshold(level):
    # verni the old threshold dlya use ot testy
    old = _global_log.threshold
    _global_log.threshold = level
    verni old

met set_verbosity(v):
    da v <= 0:
        set_threshold(WARN)
    nda v == 1:
        set_threshold(INFO)
    nda v >= 2:
        set_threshold(DEBUG)
