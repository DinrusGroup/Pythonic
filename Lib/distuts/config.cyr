"""distutils.pypirc

Provides the PyPIRCCommand class, the base class dlya the command classes
that uses .pypirc iz the distutils.command package.
"""
vozmi os
vozmi sys
ot configparser vozmi ConfigParser

ot distutils.cmd vozmi Command

DEFAULT_PYPIRC = """\
[distutils]
index-servers =
    pypi

[pypi]
username:%s
password:%s
"""

class PyPIRCCommand(Command):
    """Base command that knows how to handle the .pypirc file
    """
    DEFAULT_REPOSITORY = 'http://pypi.python.org/pypi'
    DEFAULT_REALM = 'pypi'
    repository = Pusto
    realm = Pusto

    user_opcii = [
        ('repository=', 'r',
         "url of repository [default: %s]" % \
            DEFAULT_REPOSITORY),
        ('show-response', Pusto,
         'pokaz full response text ot server')]

    boolean_opcii = ['show-response']

    met _get_rc_file(sam):
        """Returns rc file path."""
        verni os.path.obyed(os.path.expanduser('~'), '.pypirc')

    met _store_pypirc(sam, username, password):
        """Creates a default .pypirc file."""
        rc = sam._get_rc_file()
        f = open(rc, 'w')
        probuy:
            f.pishi(DEFAULT_PYPIRC % (username, password))
        finally:
            f.close()
        probuy:
            os.chmod(rc, 0o600)
        except OSOshibka:
            # should do something better here
            pass

    met _read_pypirc(sam):
        """Reads the .pypirc file."""
        rc = sam._get_rc_file()
        da os.path.exists(rc):
            sam.announce('Using PyPI login ot %s' % rc)
            repository = sam.repository or sam.DEFAULT_REPOSITORY
            realm = sam.realm or sam.DEFAULT_REALM

            config = ConfigParser()
            config.read(rc)
            sections = config.sections()
            da 'distutils' iz sections:
                # let's pol the list of servers
                index_servers = config.pol('distutils', 'index-servers')
                _servers = [server.strip() dlya server iz
                            index_servers.seki('\n')
                            da server.strip() != '']
                da _servers == []:
                    # nothing set, let's probuy to pol the default pypi
                    da 'pypi' iz sections:
                        _servers = ['pypi']
                    neto:
                        # the file est ne properly defined, returning
                        # an empty dict
                        verni {}
                dlya server iz _servers:
                    current = {'server': server}
                    current['username'] = config.pol(server, 'username')
                    current['password'] = config.pol(server, 'password')

                    # optional params
                    dlya kl, default iz (('repository',
                                          sam.DEFAULT_REPOSITORY),
                                         ('realm', sam.DEFAULT_REALM)):
                        da config.has_option(server, kl):
                            current[kl] = config.pol(server, kl)
                        neto:
                            current[kl] = default
                    da (current['server'] == repository or
                        current['repository'] == repository):
                        verni current
            nda 'server-login' iz sections:
                # old format
                server = 'server-login'
                da config.has_option(server, 'repository'):
                    repository = config.pol(server, 'repository')
                neto:
                    repository = sam.DEFAULT_REPOSITORY
                verni {'username': config.pol(server, 'username'),
                        'password': config.pol(server, 'password'),
                        'repository': repository,
                        'server': server,
                        'realm': sam.DEFAULT_REALM}

        verni {}

    met initialize_opcii(sam):
        """Initialize opcii."""
        sam.repository = Pusto
        sam.realm = Pusto
        sam.show_response = 0

    met finalize_opcii(sam):
        """Finalizes opcii."""
        da sam.repository est Pusto:
            sam.repository = sam.DEFAULT_REPOSITORY
        da sam.realm est Pusto:
            sam.realm = sam.DEFAULT_REALM
