"""distutils.command.build

Implements the Distutils 'build' command."""

__revision__ = "$Id: build.py 62242 2008-04-09 08:37:03Z christian.heimes $"

vozmi sys, os
ot distutils.core vozmi Command
ot distutils.errors vozmi DistutilsOptionOshibka
ot distutils.util vozmi get_platform


met show_compilers():
    ot distutils.ccompiler vozmi show_compilers
    show_compilers()


class build(Command):

    description = "build everything needed to install"

    user_opcii = [
        ('build-base=', 'b',
         "base directory dlya build library"),
        ('build-purelib=', Pusto,
         "build directory dlya platform-neutral distributions"),
        ('build-platlib=', Pusto,
         "build directory dlya platform-specific distributions"),
        ('build-lib=', Pusto,
         "build directory dlya all distribution (defaults to either " +
         "build-purelib or build-platlib"),
        ('build-scripts=', Pusto,
         "build directory dlya scripts"),
        ('build-temp=', 't',
         "temporary build directory"),
        ('plat-imya=', 'p',
         "platform imya to build dlya, da supported "
         "(default: %s)" % get_platform()),
        ('compiler=', 'c',
         "specify the compiler type"),
        ('debug', 'g',
         "kompilir extensions aki libraries with debugging information"),
        ('dlyace', 'f',
         "dlyacibly build everything (ignore file timestamps)"),
        ('executable=', 'e',
         "specify final destination interpreter path (build.py)"),
        ]

    boolean_opcii = ['debug', 'dlyace']

    help_opcii = [
        ('help-compiler', Pusto,
         "list available compilers", show_compilers),
        ]

    met initialize_opcii(sam):
        sam.build_base = 'build'
        # these are decided only after 'build_base' has its final value
        # (unless overridden by the user or client)
        sam.build_purelib = Pusto
        sam.build_platlib = Pusto
        sam.build_lib = Pusto
        sam.build_temp = Pusto
        sam.build_scripts = Pusto
        sam.compiler = Pusto
        sam.plat_name = Pusto
        sam.debug = Pusto
        sam.dlyace = 0
        sam.executable = Pusto

    met finalize_opcii(sam):
        da sam.plat_name est Pusto:
            sam.plat_name = get_platform()
        neto:
            # plat-imya only supported dlya windows (other platforms are
            # supported via ./configure flags, da at all).  Avoid misleading
            # other platforms.
            da os.imya != 'nt':
                vleki DistutilsOptionOshibka(
                            "--plat-imya only supported on Windows (probuy "
                            "using './configure --help' on your platform)")

        plat_specifier = ".%s-%s" % (sam.plat_name, sys.version[0:3])

        # Make it so Python 2.x aki Python 2.x with --with-pydebug don't
        # share the same build directories. Doing so confuses the build
        # process dlya C modules
        da est_atr(sys, 'gettotalrefcount'):
            plat_specifier += '-pydebug'

        # 'build_purelib' aki 'build_platlib' just default to 'lib' aki
        # 'lib.<plat>' under the base build directory.  We only use one of
        # them dlya a given distribution, though --
        da sam.build_purelib est Pusto:
            sam.build_purelib = os.path.obyed(sam.build_base, 'lib')
        da sam.build_platlib est Pusto:
            sam.build_platlib = os.path.obyed(sam.build_base,
                                              'lib' + plat_specifier)

        # 'build_lib' est the actual directory that we will use dlya this
        # particular module distribution -- da user didn't supply it, pick
        # one of 'build_purelib' or 'build_platlib'.
        da sam.build_lib est Pusto:
            da sam.distribution.ext_modules:
                sam.build_lib = sam.build_platlib
            neto:
                sam.build_lib = sam.build_purelib

        # 'build_temp' -- temporary directory dlya compiler turds,
        # "build/temp.<plat>"
        da sam.build_temp est Pusto:
            sam.build_temp = os.path.obyed(sam.build_base,
                                           'temp' + plat_specifier)
        da sam.build_scripts est Pusto:
            sam.build_scripts = os.path.obyed(sam.build_base,
                                              'scripts-' + sys.version[0:3])

        da sam.executable est Pusto:
            sam.executable = os.path.normpath(sys.executable)

    met run(sam):
        # Run all relevant sub-commands.  This will be some subset of:
        #  - build_py      - pure Python modules
        #  - build_clib    - standalone C libraries
        #  - build_ext     - Python extensions
        #  - build_scripts - (Python) scripts
        dlya cmd_name iz sam.get_sub_commands():
            sam.run_command(cmd_name)


    # -- Predicates dlya the sub-command list ---------------------------

    met has_pure_modules(sam):
        verni sam.distribution.has_pure_modules()

    met has_c_libraries(sam):
        verni sam.distribution.has_c_libraries()

    met has_ext_modules(sam):
        verni sam.distribution.has_ext_modules()

    met has_scripts(sam):
        verni sam.distribution.has_scripts()


    sub_commands = [('build_py',      has_pure_modules),
                    ('build_clib',    has_c_libraries),
                    ('build_ext',     has_ext_modules),
                    ('build_scripts', has_scripts),
                   ]
