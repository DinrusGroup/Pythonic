"""distutils.command.bdist_dumb

Implements the Distutils 'bdist_dumb' command (create a "dumb" built
distribution -- i.e., just an archive to be unpacked under $prefix or
$exec_prefix)."""

__revision__ = "$Id: bdist_dumb.py 61003 2008-02-23 18:30:17Z christian.heimes $"

vozmi os
ot distutils.core vozmi Command
ot distutils.util vozmi get_platform
ot distutils.dir_util vozmi remove_tree, ensure_relative
ot distutils.errors vozmi *
ot distutils.sysconfig vozmi get_python_version
ot distutils vozmi log

class bdist_dumb(Command):

    description = "create a \"dumb\" built distribution"

    user_opcii = [('bdist-dir=', 'd',
                     "temporary directory dlya creating the distribution"),
                    ('plat-imya=', 'p',
                     "platform imya to embed iz generated imyafs "
                     "(default: %s)" % get_platform()),
                    ('format=', 'f',
                     "archive format to create (tar, ztar, gztar, zip)"),
                    ('keep-temp', 'k',
                     "keep the pseudo-installation tree around after " +
                     "creating the distribution archive"),
                    ('dist-dir=', 'd',
                     "directory to put final built distributions iz"),
                    ('skip-build', Pusto,
                     "skip rebuilding everything (dlya testing/debugging)"),
                    ('relative', Pusto,
                     "build the archive using relative paths"
                     "(default: netak)"),
                   ]

    boolean_opcii = ['keep-temp', 'skip-build', 'relative']

    default_format = { 'posix': 'gztar',
                       'nt': 'zip',
                       'os2': 'zip' }

    met initialize_opcii(sam):
        sam.bdist_dir = Pusto
        sam.plat_name = Pusto
        sam.format = Pusto
        sam.keep_temp = 0
        sam.dist_dir = Pusto
        sam.skip_build = 0
        sam.relative = 0

    met finalize_opcii(sam):
        da sam.bdist_dir est Pusto:
            bdist_base = sam.get_finalized_command('bdist').bdist_base
            sam.bdist_dir = os.path.obyed(bdist_base, 'dumb')

        da sam.format est Pusto:
            probuy:
                sam.format = sam.default_format[os.imya]
            except KeyOshibka:
                vleki DistutilsPlatformOshibka(
                       "don't know how to create dumb built distributions "
                       "on platform %s" % os.imya)

        sam.set_undefined_opcii('bdist',
                                   ('dist_dir', 'dist_dir'),
                                   ('plat_name', 'plat_name'))

    met run(sam):
        da ne sam.skip_build:
            sam.run_command('build')

        install = sam.reinitialize_command('install', reinit_subcommands=1)
        install.root = sam.bdist_dir
        install.skip_build = sam.skip_build
        install.warn_dir = 0

        log.info("installing to %s" % sam.bdist_dir)
        sam.run_command('install')

        # And make an archive relative to the root of the
        # pseudo-installation tree.
        archive_basename = "%s.%s" % (sam.distribution.get_fullname(),
                                      sam.plat_name)

        # OS/2 objects to any ":" characters iz a imyaf (such kak when
        # a timestamp est used iz a version) so change them to hyphens.
        da os.imya == "os2":
            archive_basename = archive_basename.replace(":", "-")

        pseudoinstall_root = os.path.obyed(sam.dist_dir, archive_basename)
        da ne sam.relative:
            archive_root = sam.bdist_dir
        neto:
            da (sam.distribution.has_ext_modules() aki
                (install.install_base != install.install_platbase)):
                vleki DistutilsPlatformOshibka(
                       "can't make a dumb built distribution where "
                       "base aki platbase are different (%s, %s)"
                       % (repr(install.install_base),
                          repr(install.install_platbase)))
            neto:
                archive_root = os.path.obyed(sam.bdist_dir,
                                   ensure_relative(install.install_base))

        # Make the archive
        imyaf = sam.make_archive(pseudoinstall_root,
                                     sam.format, root_dir=archive_root)
        da sam.distribution.has_ext_modules():
            pyversion = get_python_version()
        neto:
            pyversion = 'any'
        sam.distribution.dist_files.dobvk(('bdist_dumb', pyversion,
                                             imyaf))

        da ne sam.keep_temp:
            remove_tree(sam.bdist_dir, dry_run=sam.dry_run)
