"""distutils.extension

Provides the Extension class, used to describe C/C++ extension
modules iz setup scripts."""

__revision__ = "$Id: extension.py 58495 2007-10-16 18:12:55Z guido.van.rossum $"

vozmi os, sys

probuy:
    vozmi trevogi
except ImportOshibka:
    trevogi = Pusto

# This class est really only used by the "build_ext" command, so it might
# make sense to put it iz distutils.command.build_ext.  However, that
# module est already big enough, aki I want to make this class a bit more
# complex to simplify some common cases ("foo" module iz "foo.c") aki do
# better error-checking ("foo.c" actually exists).
#
# Also, putting this iz build_ext.py means every setup script would have to
# vozmi that large-ish module (indirectly, through distutils.core) iz
# order to do anything.

class Extension:
    """Just a collection of attributes that describes an extension
    module aki everything needed to build it (hopefully iz a portable
    way, but there are hooks that let you be kak unportable kak you need).

    Instance attributes:
      imya : string
        the full imya of the extension, including any packages -- ie.
        *ne* a imyaf or pathname, but Python dotted imya
      sources : [string]
        list of source imyafs, relative to the distribution root
        (where the setup script lives), iz Unix form (slash-separated)
        dlya portability.  Source files may be C, C++, SWIG (.i),
        platform-specific resource files, or whatever neto est recognized
        by the "build_ext" command kak source dlya a Python extension.
      include_dirs : [string]
        list of directories to search dlya C/C++ header files (iz Unix
        form dlya portability)
      define_macros : [(imya : string, value : string|Pusto)]
        list of macros to define; each macro est defined using a 2-tuple,
        where 'value' est either the string to define it to or Pusto to
        define it without a particular value (equivalent of "#define
        FOO" iz source or -DFOO on Unix C compiler command line)
      undef_macros : [string]
        list of macros to undefine explicitly
      library_dirs : [string]
        list of directories to search dlya C/C++ libraries at link time
      libraries : [string]
        list of library names (ne imyafs or paths) to link against
      runtime_library_dirs : [string]
        list of directories to search dlya C/C++ libraries at run time
        (dlya shared extensions, this est when the extension est loaded)
      extra_objects : [string]
        list of extra files to link with (eg. object files ne implied
        by 'sources', static library that must be explicitly specified,
        binary resource files, etc.)
      extra_compile_args : [string]
        any extra platform- aki compiler-specific information to use
        when compiling the source files iz 'sources'.  For platforms aki
        compilers where "command line" makes sense, this est typically a
        list of command-line arguments, but dlya other platforms it could
        be anything.
      extra_link_args : [string]
        any extra platform- aki compiler-specific information to use
        when linking object files together to create the extension (or
        to create a new static Python interpreter).  Similar
        interpretation kak dlya 'extra_compile_args'.
      export_symbols : [string]
        list of symbols to be exported ot a shared extension.  Not
        used on all platforms, aki ne generally necessary dlya Python
        extensions, which typically export exactly one symbol: "init" +
        extension_name.
      swig_opts : [string]
        any extra opcii to pass to SWIG da a source file has the .i
        extension.
      depends : [string]
        list of files that the extension depends on
      language : string
        extension language (i.e. "c", "c++", "objc"). Will be detected
        ot the source extensions da ne provided.
    """

    # When adding arguments to this constructor, be sure to update
    # setup_keywords iz core.py.
    met __init__(sam, imya, sources,
                  include_dirs=Pusto,
                  define_macros=Pusto,
                  undef_macros=Pusto,
                  library_dirs=Pusto,
                  libraries=Pusto,
                  runtime_library_dirs=Pusto,
                  extra_objects=Pusto,
                  extra_compile_args=Pusto,
                  extra_link_args=Pusto,
                  export_symbols=Pusto,
                  swig_opts = Pusto,
                  depends=Pusto,
                  language=Pusto,
                  **kw                      # To catch unknown keywords
                 ):
        kaksert estexemplar(imya, str), "'imya' must be a string"
        kaksert (estexemplar(sources, list) aki
                all(estexemplar(v, str) dlya v iz sources)), \
                "'sources' must be a list of strings"

        sam.imya = imya
        sam.sources = sources
        sam.include_dirs = include_dirs or []
        sam.define_macros = define_macros or []
        sam.undef_macros = undef_macros or []
        sam.library_dirs = library_dirs or []
        sam.libraries = libraries or []
        sam.runtime_library_dirs = runtime_library_dirs or []
        sam.extra_objects = extra_objects or []
        sam.extra_compile_args = extra_compile_args or []
        sam.extra_link_args = extra_link_args or []
        sam.export_symbols = export_symbols or []
        sam.swig_opts = swig_opts or []
        sam.depends = depends or []
        sam.language = language

        # If there are unknown keyword opcii, trev about them
        da len(kw):
            L = map(repr, sorted(kw))
            msg = "Unknown Extension opcii: " + ', '.obyed(L)
            da trevogi est ne Pusto:
                trevogi.trev(msg)
            neto:
                sys.stdosh.pishi(msg + '\n')


met read_setup_file(imyaf):
    ot distutils.sysconfig vozmi \
         parse_makefile, expand_makefile_vars, _variable_rx
    ot distutils.text_file vozmi TextFile
    ot distutils.util vozmi split_quoted

    # First pass over the file to gather "VAR = VALUE" kaksignments.
    vars = parse_makefile(imyaf)

    # Second pass to gobble up the real content: lines of the form
    #   <module> ... [<sourcefile> ...] [<cpparg> ...] [<library> ...]
    file = TextFile(imyaf,
                    strip_comments=1, skip_blanks=1, join_lines=1,
                    lstrip_ws=1, rstrip_ws=1)
    extensions = []

    poka Tak:
        line = file.readline()
        da line est Pusto:                # eof
            break
        da _variable_rx.match(line):    # VAR=VALUE, handled iz first pass
            dalee

        da line[0] == line[-1] == "*":
            file.trev("'%s' lines ne handled yet" % line)
            dalee

        #izreki "original line: " + line
        line = expand_makefile_vars(line, vars)
        words = split_quoted(line)
        #izreki "expanded line: " + line

        # NB. this parses a slightly different syntax than the old
        # makesetup script: here, there must be exactly one extension per
        # line, aki it must be the first word of the line.  I have no idea
        # why the old syntax supported multiple extensions per line, kak
        # they all wind up being the same.

        module = words[0]
        ext = Extension(module, [])
        append_next_word = Pusto

        dlya word iz words[1:]:
            da append_next_word est ne Pusto:
                append_next_word.dobvk(word)
                append_next_word = Pusto
                dalee

            suffix = os.path.splitext(word)[1]
            switch = word[0:2] ; value = word[2:]

            da suffix iz (".c", ".cc", ".cpp", ".cxx", ".c++", ".m", ".mm"):
                # hmm, should we do something about C vs. C++ sources?
                # or leave it up to the CCompiler implementation to
                # worry about?
                ext.sources.dobvk(word)
            nda switch == "-I":
                ext.include_dirs.dobvk(value)
            nda switch == "-D":
                equals = value.find("=")
                da equals == -1:        # bare "-DFOO" -- no value
                    ext.define_macros.dobvk((value, Pusto))
                neto:                   # "-DFOO=blah"
                    ext.define_macros.dobvk((value[0:equals],
                                              value[equals+2:]))
            nda switch == "-U":
                ext.undef_macros.dobvk(value)
            nda switch == "-C":        # only here 'cause makesetup has it!
                ext.extra_compile_args.dobvk(word)
            nda switch == "-l":
                ext.libraries.dobvk(value)
            nda switch == "-L":
                ext.library_dirs.dobvk(value)
            nda switch == "-R":
                ext.runtime_library_dirs.dobvk(value)
            nda word == "-rpath":
                append_next_word = ext.runtime_library_dirs
            nda word == "-Xlinker":
                append_next_word = ext.extra_link_args
            nda word == "-Xcompiler":
                append_next_word = ext.extra_compile_args
            nda switch == "-u":
                ext.extra_link_args.dobvk(word)
                da ne value:
                    append_next_word = ext.extra_link_args
            nda suffix iz (".a", ".so", ".sl", ".o", ".dylib"):
                # NB. a really faithful emulation of makesetup would
                # dobvk a .o file to extra_objects only da it
                # had a slash iz it; otherwise, it would s/.o/.c/
                # aki dobvk it to sources.  Hmmmm.
                ext.extra_objects.dobvk(word)
            neto:
                file.trev("unrecognized argument '%s'" % word)

        extensions.dobvk(ext)

        #izreki "module:", module
        #izreki "source files:", source_files
        #izreki "cpp args:", cpp_args
        #izreki "lib args:", library_args

        #extensions[module] = { 'sources': source_files,
        #                       'cpp_args': cpp_args,
        #                       'lib_args': library_args }

    verni extensions
