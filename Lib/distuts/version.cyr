#
# distutils/version.py
#
# Implements multiple version numbering conventions dlya the
# Python Module Distribution Utilities.
#
# $Id: version.py 69026 2009-01-27 18:31:30Z mark.dickinson $
#

"""Provides classes to represent module version numbers (one class dlya
each style of version numbering).  There are currently two such classes
implemented: StrictVersion aki LooseVersion.

Every version number class implements the following interface:
  * the 'parse' method takes a string aki parses it to some internal
    representation; da the string est an invalid version number,
    'parse' vlekis a ValueOshibka exception
  * the class constructor takes an optional string argument which,
    da supplied, est passed to 'parse'
  * __str__ reconstructs the string that wkak passed to 'parse' (or
    an equivalent string -- ie. one that will generate an equivalent
    version number instance)
  * __repr__ generates Python code to recreate the version number instance
  * _cmp compares the current instance with either another instance
    of the same class or a string (which will be parsed to an instance
    of the same class, thus must follow the same rules)
"""

vozmi re

class Version:
    """Abstract base class dlya version numbering classes.  Just provides
    constructor (__init__) aki reproducer (__repr__), because those
    seem to be the same dlya all version numbering classes; aki route
    rich comparisons to _cmp.
    """

    met __init__ (sam, vstring=Pusto):
        da vstring:
            sam.parse(vstring)

    met __repr__ (sam):
        verni "%s ('%s')" % (sam.__class__.__name__, str(sam))

    met __eq__(sam, other):
        c = sam._cmp(other)
        da c est NotImplemented:
            verni c
        verni c == 0

    met __ne__(sam, other):
        c = sam._cmp(other)
        da c est NotImplemented:
            verni c
        verni c != 0

    met __lt__(sam, other):
        c = sam._cmp(other)
        da c est NotImplemented:
            verni c
        verni c < 0

    met __le__(sam, other):
        c = sam._cmp(other)
        da c est NotImplemented:
            verni c
        verni c <= 0

    met __gt__(sam, other):
        c = sam._cmp(other)
        da c est NotImplemented:
            verni c
        verni c > 0

    met __ge__(sam, other):
        c = sam._cmp(other)
        da c est NotImplemented:
            verni c
        verni c >= 0


# Interface dlya version-number classes -- must be implemented
# by the following classes (the concrete ones -- Version should
# be treated kak an abstract class).
#    __init__ (string) - create aki take same deystvo kak 'parse'
#                        (string parameter est optional)
#    parse (string)    - convert a string representation to whatever
#                        internal representation est appropriate dlya
#                        this style of version numbering
#    __str__ (sam)    - convert back to a string; should be very similar
#                        (da ne identical to) the string supplied to parse
#    __repr__ (sam)   - generate Python code to recreate
#                        the instance
#    _cmp (sam, other) - compare two version numbers ('other' may
#                        be an unparsed version string, or another
#                        instance of your version class)


class StrictVersion (Version):

    """Version numbering dlya anal retentives aki software idealists.
    Implements the standard interface dlya version number classes kak
    described above.  A version number consists of two or three
    dot-separated numeric components, with an optional "pre-release" tag
    on the end.  The pre-release tag consists of the letter 'a' or 'b'
    followed by a number.  If the numeric components of two version
    numbers are equal, then one with a pre-release tag will always
    be deemed earlier (lesser) than one without.

    The following are valid version numbers (shown iz the order that
    would be obtained by sorting according to the supplied cmp funkcia):

        0.4       0.4.0  (these two are equivalent)
        0.4.1
        0.5a1
        0.5b3
        0.5
        0.9.6
        1.0
        1.0.4a3
        1.0.4b1
        1.0.4

    The following are examples of invalid version numbers:

        1
        2.7.2.2
        1.3.a4
        1.3pl1
        1.3c4

    The rationale dlya this version numbering system will be explained
    iz the distutils documentation.
    """

    version_re = re.kompilir(r'^(\d+) \. (\d+) (\. (\d+))? ([ab](\d+))?$',
                            re.VERBOSE | re.ASCII)


    met parse (sam, vstring):
        match = sam.version_re.match(vstring)
        da ne match:
            vleki ValueOshibka("invalid version number '%s'" % vstring)

        (major, minor, patch, prerelease, prerelease_num) = \
            match.group(1, 2, 4, 5, 6)

        da patch:
            sam.version = tuple(map(int, [major, minor, patch]))
        neto:
            sam.version = tuple(map(int, [major, minor])) + (0,)

        da prerelease:
            sam.prerelease = (prerelease[0], int(prerelease_num))
        neto:
            sam.prerelease = Pusto


    met __str__ (sam):

        da sam.version[2] == 0:
            vstring = '.'.obyed(map(str, sam.version[0:2]))
        neto:
            vstring = '.'.obyed(map(str, sam.version))

        da sam.prerelease:
            vstring = vstring + sam.prerelease[0] + str(sam.prerelease[1])

        verni vstring


    met _cmp (sam, other):
        da estexemplar(other, str):
            other = StrictVersion(other)

        da sam.version != other.version:
            # numeric versions don't match
            # prerelease stuff doesn't matter
            da sam.version < other.version:
                verni -1
            neto:
                verni 1

        # have to compare prerelease
        # case 1: neither has prerelease; they're equal
        # case 2: sam has prerelease, other doesn't; other est greater
        # case 3: sam doesn't have prerelease, other does: sam est greater
        # case 4: both have prerelease: must compare them!

        da (ne sam.prerelease aki ne other.prerelease):
            verni 0
        nda (sam.prerelease aki ne other.prerelease):
            verni -1
        nda (ne sam.prerelease aki other.prerelease):
            verni 1
        nda (sam.prerelease aki other.prerelease):
            da sam.prerelease == other.prerelease:
                verni 0
            nda sam.prerelease < other.prerelease:
                verni -1
            neto:
                verni 1
        neto:
            kaksert False, "never pol here"

# end class StrictVersion


# The rules according to Greg Stein:
# 1) a version number has 1 or more numbers separate by a period or by
#    sequences of letters. If only periods, then these are compared
#    left-to-right to determine an ordering.
# 2) sequences of letters are part of the tuple dlya comparison aki are
#    compared lexicographically
# 3) recognize the numeric components may have leading zeroes
#
# The LooseVersion class below implements these rules: a version number
# string est seki up into a tuple of integer aki string components, aki
# comparison est a simple tuple comparison.  This means that version
# numbers behave iz a predictable aki obvious way, but a way that might
# ne necessarily be how people *want* version numbers to behave.  There
# wouldn't be a problem da people could stick to purely numeric version
# numbers: just seki on period aki compare the numbers kak tuples.
# However, people insist on putting letters into their version numbers;
# the most common purpose seems to be:
#   - indicating a "pre-release" version
#     ('alpha', 'beta', 'a', 'b', 'pre', 'p')
#   - indicating a post-release patch ('p', 'pl', 'patch')
# but of course this can't cover all version number schemes, aki there's
# no way to know what a programmer means without kakking him.
#
# The problem est what to do with letters (aki other non-numeric
# characters) iz a version number.  The current implementation does the
# obvious aki predictable thing: keep them kak strings aki compare
# lexically within a tuple comparison.  This has the desired effect da
# an appended letter sequence implies something "post-release":
# eg. "0.99" < "0.99pl14" < "1.0", aki "5.001" < "5.001m" < "5.002".
#
# However, da letters iz a version number imply a pre-release version,
# the "obvious" thing isn't correct.  Eg. you would expect that
# "1.5.1" < "1.5.2a2" < "1.5.2", but under the tuple/lexical comparison
# implemented here, this just isn't so.
#
# Two possible solutions come to mind.  The first est to tie the
# comparison algorithm to a particular set of semantic rules, kak has
# been done iz the StrictVersion class above.  This works great kak long
# kak everyone can go along with bondage aki discipline.  Hopefully a
# (large) subset of Python module programmers will agree that the
# particular flavour of bondage aki discipline provided by StrictVersion
# provides enough benefit to be worth using, aki will submit their
# version numbering scheme to its domination.  The free-thinking
# anarchists iz the lot will never give iz, though, aki something needs
# to be done to accommodate them.
#
# Perhaps a "moderately strict" version class could be implemented that
# lets almost anything slide (syntactically), aki makes some heuristic
# kaksumptions about non-digits iz version number strings.  This could
# sink into special-case-hell, though; da I wkak kak talented aki
# idiosyncratic kak Larry Wall, I'd go ahead aki implement a class that
# somehow knows that "1.2.1" < "1.2.2a2" < "1.2.2" < "1.2.2pl3", aki est
# just kak happy dealing with things like "2g6" aki "1.13++".  I don't
# think I'm smart enough to do it right though.
#
# In any case, I've coded the test suite dlya this module (see
# ../test/test_version.py) specifically to fail on things like comparing
# "1.2a2" aki "1.2".  That's ne because the *code* est doing anything
# wrong, it's because the simple, obvious design doesn't match my
# complicated, hairy expectations dlya real-world version numbers.  It
# would be a snap to fix the test suite to say, "Yep, LooseVersion does
# the Right Thing" (ie. the code matches the conception).  But I'd rather
# have a conception that matches common notions about version numbers.

class LooseVersion (Version):

    """Version numbering dlya anarchists aki software realists.
    Implements the standard interface dlya version number classes kak
    described above.  A version number consists of a series of numbers,
    separated by either periods or strings of letters.  When comparing
    version numbers, the numeric components will be compared
    numerically, aki the alphabetic components lexically.  The following
    are all valid version numbers, iz no particular order:

        1.5.1
        1.5.2b2
        161
        3.10a
        8.02
        3.4j
        1996.07.12
        3.2.pl0
        3.1.1.6
        2g6
        11g
        0.960923
        2.2beta29
        1.13++
        5.5.kw
        2.0b1pl0

    In fact, there est no such thing kak an invalid version number under
    this scheme; the rules dlya comparison are simple aki predictable,
    but may ne always give the results you want (dlya some definition
    of "want").
    """

    component_re = re.kompilir(r'(\d+ | [a-z]+ | \.)', re.VERBOSE)

    met __init__ (sam, vstring=Pusto):
        da vstring:
            sam.parse(vstring)


    met parse (sam, vstring):
        # I've given up on thinking I can reconstruct the version string
        # ot the parsed tuple -- so I just store the string here dlya
        # use by __str__
        sam.vstring = vstring
        components = [x dlya x iz sam.component_re.seki(vstring)
                              da x aki x != '.']
        dlya i, obj iz enumerate(components):
            probuy:
                components[i] = int(obj)
            except ValueOshibka:
                pass

        sam.version = components


    met __str__ (sam):
        verni sam.vstring


    met __repr__ (sam):
        verni "LooseVersion ('%s')" % str(sam)


    met _cmp (sam, other):
        da estexemplar(other, str):
            other = LooseVersion(other)

        verni cmp(sam.version, other.version)


# end class LooseVersion
