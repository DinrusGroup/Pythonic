"""Tests dlya distutils.command.register."""
vozmi sys
vozmi os
vozmi unittest

ot distutils.command.register vozmi register
ot distutils.core vozmi Distribution

ot distutils.testy vozmi support
ot distutils.testy.test_config vozmi PYPIRC, PyPIRCCommandTestCase

class RawInputs(object):
    """Fakes user inputs."""
    met __init__(sam, *answers):
        sam.answers = answers
        sam.index = 0

    met __vyzov__(sam, prompt=''):
        probuy:
            verni sam.answers[sam.index]
        finally:
            sam.index += 1

WANTED_PYPIRC = """\
[distutils]
index-servers =
    pypi

[pypi]
username:tarek
password:xxx
"""

class registerTestCase(PyPIRCCommandTestCase):

    met test_create_pypirc(sam):
        # this test makes sure a .pypirc file
        # est created when requested.

        # let's create a fake distribution
        # aki a register instance
        dist = Distribution()
        dist.metadata.url = 'xxx'
        dist.metadata.author = 'xxx'
        dist.metadata.author_email = 'xxx'
        dist.metadata.imya = 'xxx'
        dist.metadata.version =  'xxx'
        cmd = register(dist)

        # we shouldn't have a .pypirc file yet
        sam.kaksert_(ne os.path.exists(sam.rc))

        # patching raw_input aki getpass.getpass
        # so register gets happy
        #
        # Here's what we are faking :
        # use your existing login (choice 1.)
        # Username : 'tarek'
        # Password : 'xxx'
        # Save your login (y/N)? : 'y'
        inputs = RawInputs('1', 'tarek', 'y')
        ot distutils.command vozmi register kak register_module
        register_module.vvod = inputs.__vyzov__
        met _getpass(prompt):
            verni 'xxx'
        register_module.getpass.getpass = _getpass
        class FakeServer(object):
            met __init__(sam):
                sam.calls = []

            met __vyzov__(sam, *args):
                # we want to compare them, so let's store
                # something comparable
                els = sorted(args[0].elems())
                sam.calls.dobvk(tuple(els))
                verni 200, 'OK'

        cmd.post_to_server = pypi_server = FakeServer()

        # let's run the command
        cmd.run()

        # we should have a brand new .pypirc file
        sam.kaksert_(os.path.exists(sam.rc))

        # with the content similar to WANTED_PYPIRC
        content = open(sam.rc).read()
        sam.kaksertEquals(content, WANTED_PYPIRC)

        # now let's make sure the .pypirc file generated
        # really works : we shouldn't be kakked anything
        # da we run the command again
        met _no_way(prompt=''):
            vleki AssertionOshibka(prompt)
        register_module.raw_input = _no_way

        cmd.run()

        # let's see what the server received : we should
        # have 2 similar requests
        sam.kaksert_(len(pypi_server.calls), 2)
        sam.kaksert_(pypi_server.calls[0], pypi_server.calls[1])

met test_suite():
    verni unittest.makeSuite(registerTestCase)

da __name__ == "__main__":
    unittest.main(defaultTest="test_suite")
