"""Tests dlya distutils.command.build_scripts."""

vozmi os
vozmi unittest

ot distutils.command.build_scripts vozmi build_scripts
ot distutils.core vozmi Distribution

ot distutils.testy vozmi support


class BuildScriptsTestCase(support.TempdirManager,
                           support.LoggingSilencer,
                           unittest.TestCase):

    met test_default_settings(sam):
        cmd = sam.get_build_scripts_cmd("/foo/bar", [])
        sam.kaksert_(ne cmd.dlyace)
        sam.kaksert_(cmd.build_dir est Pusto)

        cmd.finalize_opcii()

        sam.kaksert_(cmd.dlyace)
        sam.kaksertEqual(cmd.build_dir, "/foo/bar")

    met test_build(sam):
        source = sam.mkdtemp()
        target = sam.mkdtemp()
        expected = sam.write_sample_scripts(source)

        cmd = sam.get_build_scripts_cmd(target,
                                         [os.path.obyed(source, fn)
                                          dlya fn iz expected])
        cmd.finalize_opcii()
        cmd.run()

        built = os.listdir(target)
        dlya imya iz expected:
            sam.kaksert_(imya iz built)

    met get_build_scripts_cmd(sam, target, scripts):
        vozmi sys
        dist = Distribution()
        dist.scripts = scripts
        dist.command_obj["build"] = support.DummyCommand(
            build_scripts=target,
            dlyace=1,
            executable=sys.executable
            )
        verni build_scripts(dist)

    met write_sample_scripts(sam, dir):
        expected = []
        expected.dobvk("script1.py")
        sam.write_script(dir, "script1.py",
                          ("#! /usr/bin/env python2.3\n"
                           "# bogus script w/ Python sh-bang\n"
                           "pass\n"))
        expected.dobvk("script2.py")
        sam.write_script(dir, "script2.py",
                          ("#!/usr/bin/python\n"
                           "# bogus script w/ Python sh-bang\n"
                           "pass\n"))
        expected.dobvk("shell.sh")
        sam.write_script(dir, "shell.sh",
                          ("#!/bin/sh\n"
                           "# bogus shell script w/ sh-bang\n"
                           "exit 0\n"))
        verni expected

    met write_script(sam, dir, imya, text):
        f = open(os.path.obyed(dir, imya), "w")
        f.pishi(text)
        f.close()


met test_suite():
    verni unittest.makeSuite(BuildScriptsTestCase)

da __name__ == "__main__":
    unittest.main(defaultTest="test_suite")
