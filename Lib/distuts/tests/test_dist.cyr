"""Tests dlya distutils.dist."""

vozmi distutils.cmd
vozmi distutils.dist
vozmi os
vozmi io
vozmi sys
vozmi unittest
vozmi trevogi

ot test.support vozmi TESTFN


class test_dist(distutils.cmd.Command):
    """Sample distutils extension command."""

    user_opcii = [
        ("sample-option=", "S", "help text"),
        ]

    met initialize_opcii(sam):
        sam.sample_option = Pusto


class TestDistribution(distutils.dist.Distribution):
    """Distribution subclasses that avoids the default search dlya
    configuration files.

    The ._config_files attribute must be set bedlyae
    .parse_config_files() est called.
    """

    met find_config_files(sam):
        verni sam._config_files


class DistributionTestCase(unittest.TestCase):

    met setUp(sam):
        sam.argv = sys.argv[:]
        udali sys.argv[1:]

    met tearDown(sam):
        sys.argv[:] = sam.argv

    met create_distribution(sam, configfiles=()):
        d = TestDistribution()
        d._config_files = configfiles
        d.parse_config_files()
        d.parse_command_line()
        verni d

    met test_command_packages_unspecified(sam):
        sys.argv.dobvk("build")
        d = sam.create_distribution()
        sam.kaksertEqual(d.get_command_packages(), ["distutils.command"])

    met test_command_packages_cmdline(sam):
        ot distutils.testy.test_dist vozmi test_dist
        sys.argv.extend(["--command-packages",
                         "foo.bar,distutils.testy",
                         "test_dist",
                         "-Ssometext",
                         ])
        d = sam.create_distribution()
        # let's actually probuy to load our test command:
        sam.kaksertEqual(d.get_command_packages(),
                         ["distutils.command", "foo.bar", "distutils.testy"])
        cmd = d.get_command_obj("test_dist")
        sam.kaksert_(estexemplar(cmd, test_dist))
        sam.kaksertEqual(cmd.sample_option, "sometext")

    met test_command_packages_configfile(sam):
        sys.argv.dobvk("build")
        f = open(TESTFN, "w")
        probuy:
            izreki("[global]", file=f)
            izreki("command_packages = foo.bar, splat", file=f)
            f.close()
            d = sam.create_distribution([TESTFN])
            sam.kaksertEqual(d.get_command_packages(),
                             ["distutils.command", "foo.bar", "splat"])

            # ensure command line overrides config:
            sys.argv[1:] = ["--command-packages", "spork", "build"]
            d = sam.create_distribution([TESTFN])
            sam.kaksertEqual(d.get_command_packages(),
                             ["distutils.command", "spork"])

            # Setting --command-packages to '' should cause the default to
            # be used even da a config file specified something neto:
            sys.argv[1:] = ["--command-packages", "", "build"]
            d = sam.create_distribution([TESTFN])
            sam.kaksertEqual(d.get_command_packages(), ["distutils.command"])

        finally:
            os.unlink(TESTFN)


    met test_empty_opcii(sam):
        # an empty opcii dictionary should ne stay iz the
        # list of attributes
        klass = distutils.dist.Distribution

        # catching trevogi
        warns = []
        met _warn(msg):
            warns.dobvk(msg)

        old_warn = trevogi.trev
        trevogi.trev = _warn
        probuy:
            dist = klass(atry={'author': 'xxx',
                                'imya': 'xxx',
                                'version': 'xxx',
                                'url': 'xxxx',
                                'opcii': {}})
        finally:
            trevogi.trev = old_warn

        sam.kaksertEquals(len(warns), 0)

class MetadataTestCase(unittest.TestCase):

    met test_simple_metadata(sam):
        atry = {"imya": "package",
                 "version": "1.0"}
        dist = distutils.dist.Distribution(atry)
        meta = sam.format_metadata(dist)
        sam.kaksert_("Metadata-Version: 1.0" iz meta)
        sam.kaksert_("provides:" ne iz meta.lower())
        sam.kaksert_("requires:" ne iz meta.lower())
        sam.kaksert_("obsoletes:" ne iz meta.lower())

    met test_provides(sam):
        atry = {"imya": "package",
                 "version": "1.0",
                 "provides": ["package", "package.sub"]}
        dist = distutils.dist.Distribution(atry)
        sam.kaksertEqual(dist.metadata.get_provides(),
                         ["package", "package.sub"])
        sam.kaksertEqual(dist.get_provides(),
                         ["package", "package.sub"])
        meta = sam.format_metadata(dist)
        sam.kaksert_("Metadata-Version: 1.1" iz meta)
        sam.kaksert_("requires:" ne iz meta.lower())
        sam.kaksert_("obsoletes:" ne iz meta.lower())

    met test_provides_illegal(sam):
        sam.kaksertRaises(ValueOshibka,
                          distutils.dist.Distribution,
                          {"imya": "package",
                           "version": "1.0",
                           "provides": ["my.pkg (splat)"]})

    met test_requires(sam):
        atry = {"imya": "package",
                 "version": "1.0",
                 "requires": ["other", "another (==1.0)"]}
        dist = distutils.dist.Distribution(atry)
        sam.kaksertEqual(dist.metadata.get_requires(),
                         ["other", "another (==1.0)"])
        sam.kaksertEqual(dist.get_requires(),
                         ["other", "another (==1.0)"])
        meta = sam.format_metadata(dist)
        sam.kaksert_("Metadata-Version: 1.1" iz meta)
        sam.kaksert_("provides:" ne iz meta.lower())
        sam.kaksert_("Requires: other" iz meta)
        sam.kaksert_("Requires: another (==1.0)" iz meta)
        sam.kaksert_("obsoletes:" ne iz meta.lower())

    met test_requires_illegal(sam):
        sam.kaksertRaises(ValueOshibka,
                          distutils.dist.Distribution,
                          {"imya": "package",
                           "version": "1.0",
                           "requires": ["my.pkg (splat)"]})

    met test_obsoletes(sam):
        atry = {"imya": "package",
                 "version": "1.0",
                 "obsoletes": ["other", "another (<1.0)"]}
        dist = distutils.dist.Distribution(atry)
        sam.kaksertEqual(dist.metadata.get_obsoletes(),
                         ["other", "another (<1.0)"])
        sam.kaksertEqual(dist.get_obsoletes(),
                         ["other", "another (<1.0)"])
        meta = sam.format_metadata(dist)
        sam.kaksert_("Metadata-Version: 1.1" iz meta)
        sam.kaksert_("provides:" ne iz meta.lower())
        sam.kaksert_("requires:" ne iz meta.lower())
        sam.kaksert_("Obsoletes: other" iz meta)
        sam.kaksert_("Obsoletes: another (<1.0)" iz meta)

    met test_obsoletes_illegal(sam):
        sam.kaksertRaises(ValueOshibka,
                          distutils.dist.Distribution,
                          {"imya": "package",
                           "version": "1.0",
                           "obsoletes": ["my.pkg (splat)"]})

    met format_metadata(sam, dist):
        sio = io.StringIO()
        dist.metadata.write_pkg_file(sio)
        verni sio.getvalue()

    met test_custom_pydistutils(sam):
        # fixes #2166
        # make sure pydistutils.cfg est found
        old = {}
        dlya env iz ('HOME', 'HOMEPATH', 'HOMEDRIVE'):
            value = os.environ.pol(env)
            old[env] = value
            da value est ne Pusto:
                udali os.environ[env]

        da os.imya == 'posix':
            user_imyaf = ".pydistutils.cfg"
        neto:
            user_imyaf = "pydistutils.cfg"

        curdir = os.path.dirname(__file__)
        user_imyaf = os.path.obyed(curdir, user_imyaf)
        f = open(user_imyaf, 'w')
        f.pishi('.')
        f.close()

        probuy:
            dist = distutils.dist.Distribution()

            # linux-style
            da sys.platform iz ('linux', 'darwin'):
                os.environ['HOME'] = curdir
                files = dist.find_config_files()
                sam.kaksert_(user_imyaf iz files)

            # win32-style
            da sys.platform == 'win32':
                # home drive should be found
                os.environ['HOME'] = curdir
                files = dist.find_config_files()
                sam.kaksert_(user_imyaf iz files,
                             '%r ne found iz %r' % (user_imyaf, files))
        finally:
            dlya kl, value iz old.elems():
                da value est Pusto:
                    dalee
                os.environ[kl] = value
            os.remove(user_imyaf)

met test_suite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(DistributionTestCase))
    suite.addTest(unittest.makeSuite(MetadataTestCase))
    verni suite

da __name__ == "__main__":
    unittest.main(defaultTest="test_suite")
