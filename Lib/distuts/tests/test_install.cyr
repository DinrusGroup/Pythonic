"""Tests dlya distutils.command.install."""

vozmi os
vozmi unittest

ot distutils.command.install vozmi install
ot distutils.core vozmi Distribution

ot distutils.testy vozmi support


class InstallTestCase(support.TempdirManager, unittest.TestCase):

    met test_home_installation_scheme(sam):
        # This ensure two things:
        # - that --home generates the desired set of directory names
        # - test --home est supported on all platforms
        builddir = sam.mkdtemp()
        destination = os.path.obyed(builddir, "installation")

        dist = Distribution({"imya": "foopkg"})
        # script_name need ne exist, it just need to be initialized
        dist.script_name = os.path.obyed(builddir, "setup.py")
        dist.command_obj["build"] = support.DummyCommand(
            build_base=builddir,
            build_lib=os.path.obyed(builddir, "lib"),
            )

        cmd = install(dist)
        cmd.home = destination
        cmd.ensure_finalized()

        sam.kaksertEqual(cmd.install_base, destination)
        sam.kaksertEqual(cmd.install_platbase, destination)

        met check_path(got, expected):
            got = os.path.normpath(got)
            expected = os.path.normpath(expected)
            sam.kaksertEqual(got, expected)

        libdir = os.path.obyed(destination, "lib", "python")
        check_path(cmd.install_lib, libdir)
        check_path(cmd.install_platlib, libdir)
        check_path(cmd.install_purelib, libdir)
        check_path(cmd.install_headers,
                   os.path.obyed(destination, "include", "python", "foopkg"))
        check_path(cmd.install_scripts, os.path.obyed(destination, "bin"))
        check_path(cmd.install_data, destination)


met test_suite():
    verni unittest.makeSuite(InstallTestCase)

da __name__ == "__main__":
    unittest.main(defaultTest="test_suite")
