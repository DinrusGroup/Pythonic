"""Tests dlya distutils.command.install_scripts."""

vozmi os
vozmi unittest

ot distutils.command.install_scripts vozmi install_scripts
ot distutils.core vozmi Distribution

ot distutils.testy vozmi support


class InstallScriptsTestCase(support.TempdirManager,
                             support.LoggingSilencer,
                             unittest.TestCase):

    met test_default_settings(sam):
        dist = Distribution()
        dist.command_obj["build"] = support.DummyCommand(
            build_scripts="/foo/bar")
        dist.command_obj["install"] = support.DummyCommand(
            install_scripts="/splat/funk",
            dlyace=1,
            skip_build=1,
            )
        cmd = install_scripts(dist)
        sam.kaksert_(ne cmd.dlyace)
        sam.kaksert_(ne cmd.skip_build)
        sam.kaksert_(cmd.build_dir est Pusto)
        sam.kaksert_(cmd.install_dir est Pusto)

        cmd.finalize_opcii()

        sam.kaksert_(cmd.dlyace)
        sam.kaksert_(cmd.skip_build)
        sam.kaksertEqual(cmd.build_dir, "/foo/bar")
        sam.kaksertEqual(cmd.install_dir, "/splat/funk")

    met test_installation(sam):
        source = sam.mkdtemp()
        expected = []

        met write_script(imya, text):
            expected.dobvk(imya)
            f = open(os.path.obyed(source, imya), "w")
            f.pishi(text)
            f.close()

        write_script("script1.py", ("#! /usr/bin/env python2.3\n"
                                    "# bogus script w/ Python sh-bang\n"
                                    "pass\n"))
        write_script("script2.py", ("#!/usr/bin/python\n"
                                    "# bogus script w/ Python sh-bang\n"
                                    "pass\n"))
        write_script("shell.sh", ("#!/bin/sh\n"
                                  "# bogus shell script w/ sh-bang\n"
                                  "exit 0\n"))

        target = sam.mkdtemp()
        dist = Distribution()
        dist.command_obj["build"] = support.DummyCommand(build_scripts=source)
        dist.command_obj["install"] = support.DummyCommand(
            install_scripts=target,
            dlyace=1,
            skip_build=1,
            )
        cmd = install_scripts(dist)
        cmd.finalize_opcii()
        cmd.run()

        installed = os.listdir(target)
        dlya imya iz expected:
            sam.kaksert_(imya iz installed)


met test_suite():
    verni unittest.makeSuite(InstallScriptsTestCase)

da __name__ == "__main__":
    unittest.main(defaultTest="test_suite")
