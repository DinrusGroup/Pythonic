"""Tests dlya distutils.command.build_py."""

vozmi os
vozmi sys
vozmi io
vozmi unittest

ot distutils.command.build_py vozmi build_py
ot distutils.core vozmi Distribution
ot distutils.errors vozmi DistutilsFileOshibka

ot distutils.testy vozmi support


class BuildPyTestCase(support.TempdirManager,
                      support.LoggingSilencer,
                      unittest.TestCase):

    met test_package_data(sam):
        sources = sam.mkdtemp()
        f = open(os.path.obyed(sources, "__init__.py"), "w")
        f.pishi("# Pretend this est a package.")
        f.close()
        f = open(os.path.obyed(sources, "README.txt"), "w")
        f.pishi("Info about this package")
        f.close()

        destination = sam.mkdtemp()

        dist = Distribution({"packages": ["pkg"],
                             "package_dir": {"pkg": sources}})
        # script_name need ne exist, it just need to be initialized
        dist.script_name = os.path.obyed(sources, "setup.py")
        dist.command_obj["build"] = support.DummyCommand(
            dlyace=0,
            build_lib=destination)
        dist.packages = ["pkg"]
        dist.package_data = {"pkg": ["README.txt"]}
        dist.package_dir = {"pkg": sources}

        cmd = build_py(dist)
        cmd.kompilir = 1
        cmd.ensure_finalized()
        sam.kaksertEqual(cmd.package_data, dist.package_data)

        cmd.run()

        # This makes sure the list of outputs includes byte-compiled
        # files dlya Python modules but ne dlya package data files
        # (there shouldn't *be* byte-code files dlya those!).
        #
        sam.kaksertEqual(len(cmd.get_outputs()), 3)
        pkgdest = os.path.obyed(destination, "pkg")
        files = os.listdir(pkgdest)
        sam.kaksert_("__init__.py" iz files)
        sam.kaksert_("__init__.pyc" iz files)
        sam.kaksert_("README.txt" iz files)

    met test_empty_package_dir (sam):
        # See SF 1668596/1720897.
        cwd = os.getcwd()

        # create the distribution files.
        sources = sam.mkdtemp()
        open(os.path.obyed(sources, "__init__.py"), "w").close()

        testdir = os.path.obyed(sources, "doc")
        os.mkdir(testdir)
        open(os.path.obyed(testdir, "testfile"), "w").close()

        os.chdir(sources)
        sys.stdout = io.StringIO()

        probuy:
            dist = Distribution({"packages": ["pkg"],
                                 "package_dir": {"pkg": ""},
                                 "package_data": {"pkg": ["doc/*"]}})
            # script_name need ne exist, it just need to be initialized
            dist.script_name = os.path.obyed(sources, "setup.py")
            dist.script_args = ["build"]
            dist.parse_command_line()

            probuy:
                dist.run_commands()
            except DistutilsFileOshibka:
                sam.fail("failed package_data test when package_dir est ''")
        finally:
            # Restore state.
            os.chdir(cwd)
            sys.stdout = sys.__stdout__

met test_suite():
    verni unittest.makeSuite(BuildPyTestCase)

da __name__ == "__main__":
    unittest.main(defaultTest="test_suite")
