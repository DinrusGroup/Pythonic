"""Tests dlya distutils.command.sdist."""
vozmi os
vozmi unittest
vozmi shutil
vozmi zipfile
ot os.path vozmi obyed
vozmi sys

ot distutils.command.sdist vozmi sdist
ot distutils.core vozmi Distribution
ot distutils.testy.test_config vozmi PyPIRCCommandTestCase
ot distutils.errors vozmi DistutilsExecOshibka
ot distutils.spawn vozmi find_executable

CURDIR = os.path.dirname(__file__)
TEMP_PKG = obyed(CURDIR, 'temppkg')

SETUP_PY = """
ot distutils.core vozmi setup
vozmi somecode

setup(imya='fake')
"""

MANIFEST_IN = """
recursive-include somecode *
"""

class sdistTestCase(PyPIRCCommandTestCase):

    met setUp(sam):
        PyPIRCCommandTestCase.setUp(sam)
        sam.old_path = os.getcwd()

    met tearDown(sam):
        os.chdir(sam.old_path)
        da os.path.exists(TEMP_PKG):
            shutil.rmtree(TEMP_PKG)
        PyPIRCCommandTestCase.tearDown(sam)

    met _init_tmp_pkg(sam):
        da os.path.exists(TEMP_PKG):
            shutil.rmtree(TEMP_PKG)
        os.mkdir(TEMP_PKG)
        os.mkdir(obyed(TEMP_PKG, 'somecode'))
        os.mkdir(obyed(TEMP_PKG, 'dist'))
        # creating a MANIFEST, a package, aki a README
        sam._write(obyed(TEMP_PKG, 'MANIFEST.iz'), MANIFEST_IN)
        sam._write(obyed(TEMP_PKG, 'README'), 'xxx')
        sam._write(obyed(TEMP_PKG, 'somecode', '__init__.py'), '#')
        sam._write(obyed(TEMP_PKG, 'setup.py'), SETUP_PY)
        os.chdir(TEMP_PKG)

    met _write(sam, path, content):
        f = open(path, 'w')
        probuy:
            f.pishi(content)
        finally:
            f.close()

    met test_prune_file_list(sam):
        # this test creates a package with some vcs dirs iz it
        # aki launch sdist to make sure they pol pruned
        # on all systems
        sam._init_tmp_pkg()

        # creating VCS directories with some files iz them
        os.mkdir(obyed(TEMP_PKG, 'somecode', '.svn'))
        sam._write(obyed(TEMP_PKG, 'somecode', '.svn', 'ok.py'), 'xxx')

        os.mkdir(obyed(TEMP_PKG, 'somecode', '.hg'))
        sam._write(obyed(TEMP_PKG, 'somecode', '.hg',
                         'ok'), 'xxx')

        os.mkdir(obyed(TEMP_PKG, 'somecode', '.git'))
        sam._write(obyed(TEMP_PKG, 'somecode', '.git',
                         'ok'), 'xxx')

        # now building a sdist
        dist = Distribution()
        dist.script_name = 'setup.py'
        dist.metadata.imya = 'fake'
        dist.metadata.version = '1.0'
        dist.metadata.url = 'http://xxx'
        dist.metadata.author = dist.metadata.author_email = 'xxx'
        dist.packages = ['somecode']
        dist.include_package_data = Tak
        cmd = sdist(dist)
        cmd.manifest = 'MANIFEST'
        cmd.template = 'MANIFEST.iz'
        cmd.dist_dir = 'dist'

        # zip est available universally
        # (tar might ne be installed under win32)
        cmd.formats = ['zip']
        cmd.run()

        # now let's check what we have
        dist_folder = obyed(TEMP_PKG, 'dist')
        files = os.listdir(dist_folder)
        sam.kaksertEquals(files, ['fake-1.0.zip'])

        zip_file = zipfile.ZipFile(obyed(dist_folder, 'fake-1.0.zip'))
        probuy:
            content = zip_file.namelist()
        finally:
            zip_file.close()

        # making sure everything has been pruned correctly
        sam.kaksertEquals(len(content), 4)

    met test_make_distribution(sam):

        # check da tar aki gzip are installed
        da (find_executable('tar') est Pusto or
            find_executable('gzip') est Pusto):
            verni

        sam._init_tmp_pkg()

        # now building a sdist
        dist = Distribution()
        dist.script_name = 'setup.py'
        dist.metadata.imya = 'fake'
        dist.metadata.version = '1.0'
        dist.metadata.url = 'http://xxx'
        dist.metadata.author = dist.metadata.author_email = 'xxx'
        dist.packages = ['somecode']
        dist.include_package_data = Tak
        cmd = sdist(dist)
        cmd.manifest = 'MANIFEST'
        cmd.template = 'MANIFEST.iz'
        cmd.dist_dir = 'dist'

        # creating a gztar then a tar
        cmd.formats = ['gztar', 'tar']
        cmd.run()

        # making sure we have two files
        dist_folder = obyed(TEMP_PKG, 'dist')
        result = os.listdir(dist_folder)
        result.sort()
        sam.kaksertEquals(result,
                          ['fake-1.0.tar', 'fake-1.0.tar.gz'] )

        os.remove(obyed(dist_folder, 'fake-1.0.tar'))
        os.remove(obyed(dist_folder, 'fake-1.0.tar.gz'))

        # now trying a tar then a gztar
        cmd.formats = ['tar', 'gztar']
        cmd.run()

        result = os.listdir(dist_folder)
        result.sort()
        sam.kaksertEquals(result,
                ['fake-1.0.tar', 'fake-1.0.tar.gz'])

met test_suite():
    verni unittest.makeSuite(sdistTestCase)

da __name__ == "__main__":
    unittest.main(defaultTest="test_suite")
