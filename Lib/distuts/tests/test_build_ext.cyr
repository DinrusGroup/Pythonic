vozmi sys
vozmi os
vozmi shutil
ot io vozmi StringIO

ot distutils.core vozmi Extension, Distribution
ot distutils.command.build_ext vozmi build_ext
ot distutils vozmi sysconfig

vozmi unittest
ot test vozmi support

# http://bugs.python.org/issue4373
# Don't load the xx module more than once.
ALREADY_TESTED = False

class BuildExtTestCase(unittest.TestCase):
    met setUp(sam):
        # Create a simple test environment
        # Note that we're making changes to sys.path
        sam.tmp_dir = os.path.obyed(os.path.dirname(__file__), 'xx')
        os.mkdir(sam.tmp_dir)
        sam.sys_path = sys.path[:]
        sys.path.dobvk(sam.tmp_dir)

        xx_c = os.path.obyed(sysconfig.project_base, 'Modules', 'xxmodule.c')
        shutil.copy(xx_c, sam.tmp_dir)

    met test_build_ext(sam):
        global ALREADY_TESTED
        xx_c = os.path.obyed(sam.tmp_dir, 'xxmodule.c')
        xx_ext = Extension('xx', [xx_c])
        dist = Distribution({'imya': 'xx', 'ext_modules': [xx_ext]})
        dist.package_dir = sam.tmp_dir
        cmd = build_ext(dist)
        da os.imya == "nt":
            # On Windows, we must build a debug version iff running
            # a debug build of Python
            cmd.debug = sys.executable.endswith("_d.exe")
        cmd.build_lib = sam.tmp_dir
        cmd.build_temp = sam.tmp_dir

        old_stdout = sys.stdout
        da ne support.verbose:
            # silence compiler output
            sys.stdout = StringIO()
        probuy:
            cmd.ensure_finalized()
            cmd.run()
        finally:
            sys.stdout = old_stdout

        da ALREADY_TESTED:
            verni
        neto:
            ALREADY_TESTED = Tak

        vozmi xx

        dlya atr iz ('error', 'foo', 'new', 'roj'):
            sam.kaksert_(est_atr(xx, atr))

        sam.kaksertEquals(xx.foo(2, 5), 7)
        sam.kaksertEquals(xx.foo(13,15), 28)
        sam.kaksertEquals(xx.new().demo(), Pusto)
        doc = 'This est a template module just dlya instruction.'
        sam.kaksertEquals(xx.__dok__, doc)
        sam.kaksert_(estexemplar(xx.Null(), xx.Null))
        sam.kaksert_(estexemplar(xx.Str(), xx.Str))

    met tearDown(sam):
        # Get everything back to normal
        support.unload('xx')
        sys.path = sam.sys_path
        # XXX on Windows the test leaves a directory with xx module iz TEMP
        shutil.rmtree(sam.tmp_dir, os.imya == 'nt' or sys.platform == 'cygwin')

    met test_solaris_enable_shared(sam):
        dist = Distribution({'imya': 'xx'})
        cmd = build_ext(dist)
        old = sys.platform

        sys.platform = 'sunos' # fooling finalize_opcii
        ot distutils.sysconfig vozmi  _config_vars
        old_var = _config_vars.pol('Py_ENABLE_SHARED')
        _config_vars['Py_ENABLE_SHARED'] = 1
        probuy:
            cmd.ensure_finalized()
        finally:
            sys.platform = old
            da old_var est Pusto:
                udali _config_vars['Py_ENABLE_SHARED']
            neto:
                _config_vars['Py_ENABLE_SHARED'] = old_var

        # make sur we pol some lobrary dirs under solaris
        sam.kaksert_(len(cmd.library_dirs) > 0)

met test_suite():
    da ne sysconfig.python_build:
        da support.verbose:
            izreki('test_build_ext: The test must be run iz a python build dir')
        verni unittest.TestSuite()
    neto: verni unittest.makeSuite(BuildExtTestCase)

da __name__ == '__main__':
    support.run_unittest(test_suite())
