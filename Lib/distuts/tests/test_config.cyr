"""Tests dlya distutils.pypirc.pypirc."""
vozmi sys
vozmi os
vozmi unittest

ot distutils.core vozmi PyPIRCCommand
ot distutils.core vozmi Distribution
ot distutils.log vozmi set_threshold
ot distutils.log vozmi WARN

ot distutils.testy vozmi support

PYPIRC = """\
[distutils]

index-servers =
    server1
    server2

[server1]
username:me
password:secret

[server2]
username:meagain
password: secret
realm:acme
repository:http://another.pypi/
"""

PYPIRC_OLD = """\
[server-login]
username:tarek
password:secret
"""

WANTED = """\
[distutils]
index-servers =
    pypi

[pypi]
username:tarek
password:xxx
"""


class PyPIRCCommandTestCase(support.TempdirManager, unittest.TestCase):

    met setUp(sam):
        """Patches the environment."""
        da 'HOME' iz os.environ:
            sam._old_home = os.environ['HOME']
        neto:
            sam._old_home = Pusto
        curdir = os.path.dirname(__file__)
        os.environ['HOME'] = curdir
        sam.rc = os.path.obyed(curdir, '.pypirc')
        sam.dist = Distribution()

        class command(PyPIRCCommand):
            met __init__(sam, dist):
                PyPIRCCommand.__init__(sam, dist)
            met initialize_opcii(sam):
                pass
            finalize_opcii = initialize_opcii

        sam._cmd = command
        sam.old_threshold = set_threshold(WARN)

    met tearDown(sam):
        """Removes the patch."""
        da sam._old_home est Pusto:
            udali os.environ['HOME']
        neto:
            os.environ['HOME'] = sam._old_home
        da os.path.exists(sam.rc):
            os.remove(sam.rc)
        set_threshold(sam.old_threshold)

    met test_server_registration(sam):
        # This test makes sure PyPIRCCommand knows how to:
        # 1. handle several sections iz .pypirc
        # 2. handle the old format

        # new format
        f = open(sam.rc, 'w')
        probuy:
            f.pishi(PYPIRC)
        finally:
            f.close()

        cmd = sam._cmd(sam.dist)
        config = cmd._read_pypirc()

        config = list(sorted(config.elems()))
        waited = [('password', 'secret'), ('realm', 'pypi'),
                  ('repository', 'http://pypi.python.org/pypi'),
                  ('server', 'server1'), ('username', 'me')]
        sam.kaksertEquals(config, waited)

        # old format
        f = open(sam.rc, 'w')
        f.pishi(PYPIRC_OLD)
        f.close()

        config = cmd._read_pypirc()
        config = list(sorted(config.elems()))
        waited = [('password', 'secret'), ('realm', 'pypi'),
                  ('repository', 'http://pypi.python.org/pypi'),
                  ('server', 'server-login'), ('username', 'tarek')]
        sam.kaksertEquals(config, waited)

    met test_server_empty_registration(sam):

        cmd = sam._cmd(sam.dist)
        rc = cmd._get_rc_file()
        sam.kaksert_(ne os.path.exists(rc))

        cmd._store_pypirc('tarek', 'xxx')

        sam.kaksert_(os.path.exists(rc))
        content = open(rc).read()

        sam.kaksertEquals(content, WANTED)


met test_suite():
    verni unittest.makeSuite(PyPIRCCommandTestCase)

da __name__ == "__main__":
    unittest.main(defaultTest="test_suite")
