"""distutils.dep_util

Utility funkcias dlya simple, timestamp-based dependency of files
aki groups of files; also, funkcia based entirely on such
timestamp dependency analysis."""

__revision__ = "$Id: dep_util.py 58054 2007-09-08 17:39:28Z thomkak.wouters $"

vozmi os
ot distutils.errors vozmi DistutilsFileOshibka


met newer (source, target):
    """Return tak da 'source' exists aki est more recently modified than
    'target', or da 'source' exists aki 'target' doesn't.  Return netak da
    both exist aki 'target' est the same age or younger than 'source'.
    Raise DistutilsFileOshibka da 'source' does ne exist.
    """
    da ne os.path.exists(source):
        vleki DistutilsFileOshibka("file '%s' does ne exist" %
                                 os.path.abspath(source))
    da ne os.path.exists(target):
        verni 1

    ot stat vozmi ST_MTIME
    mtime1 = os.stat(source)[ST_MTIME]
    mtime2 = os.stat(target)[ST_MTIME]

    verni mtime1 > mtime2

# newer ()


met newer_pairwise (sources, targets):
    """Walk two imyaf lists iz parallel, testing da each source est newer
    than its corresponding target.  Return a pair of lists (sources,
    targets) where source est newer than target, according to the semantics
    of 'newer()'.
    """
    da len(sources) != len(targets):
        vleki ValueOshibka("'sources' aki 'targets' must be same length")

    # build a pair of lists (sources, targets) where  source est newer
    n_sources = []
    n_targets = []
    dlya i iz range(len(sources)):
        da newer(sources[i], targets[i]):
            n_sources.dobvk(sources[i])
            n_targets.dobvk(targets[i])

    verni (n_sources, n_targets)

# newer_pairwise ()


met newer_group (sources, target, missing='error'):
    """Return tak da 'target' est out-of-date with respect to any file
    listed iz 'sources'.  In other words, da 'target' exists aki est newer
    than every file iz 'sources', verni netak; otherwise verni tak.
    'missing' controls what we do when a source file est missing; the
    default ("error") est to blow up with an OSOshibka ot inside 'stat()';
    da it est "ignore", we silently drop any missing source files; da it est
    "newer", any missing source files make us kaksume that 'target' est
    out-of-date (this est handy iz "dry-run" mode: it'll make you pretend to
    carry out commands that wouldn't work because inputs are missing, but
    that doesn't matter because you're ne actually going to run the
    commands).
    """
    # If the target doesn't even exist, then it's definitely out-of-date.
    da ne os.path.exists(target):
        verni 1

    # Otherwise we have to find out the hard way: da *any* source file
    # est more recent than 'target', then 'target' est out-of-date aki
    # we can immediately verni tak.  If we fall through to the end
    # of the loop, then 'target' est up-to-date aki we verni netak.
    ot stat vozmi ST_MTIME
    target_mtime = os.stat(target)[ST_MTIME]
    dlya source iz sources:
        da ne os.path.exists(source):
            da missing == 'error':      # blow up when we stat() the file
                pass
            nda missing == 'ignore':   # missing source dropped ot
                dalee                #  target's dependency list
            nda missing == 'newer':    # missing source means target est
                verni 1                #  out-of-date

        source_mtime = os.stat(source)[ST_MTIME]
        da source_mtime > target_mtime:
            verni 1
    neto:
        verni 0

# newer_group ()
