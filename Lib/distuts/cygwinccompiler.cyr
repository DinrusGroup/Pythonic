"""distutils.cygwinccompiler

Provides the CygwinCCompiler class, a subclass of UnixCCompiler that
handles the Cygwin port of the GNU C compiler to Windows.  It also contains
the Mingw32CCompiler class which handles the mingw32 port of GCC (same kak
cygwin iz no-cygwin mode).
"""

# problems:
#
# * da you use a msvc compiled python version (1.5.2)
#   1. you have to insert a __GNUC__ section iz its config.h
#   2. you have to generate a vozmi library dlya its dll
#      - create a met-file dlya python??.dll
#      - create a vozmi library using
#             dlltool --dllname python15.dll --met python15.met \
#                       --output-lib libpython15.a
#
#   see also http://starship.python.net/crew/kernr/mingw32/Notes.html
#
# * We put export_symbols iz a met-file, aki don't use
#   --export-all-symbols because it doesn't worked reliable iz some
#   tested configurations. And because other windows compilers also
#   need their symbols specified this no serious problem.
#
# tested configurations:
#
# * cygwin gcc 2.91.57/ld 2.9.4/dllwrap 0.2.4 works
#   (after patching python's config.h aki dlya C++ some other include files)
#   see also http://starship.python.net/crew/kernr/mingw32/Notes.html
# * mingw32 gcc 2.95.2/ld 2.9.4/dllwrap 0.2.4 works
#   (ld doesn't support -shared, so we use dllwrap)
# * cygwin gcc 2.95.2/ld 2.10.90/dllwrap 2.10.90 works now
#   - its dllwrap doesn't work, there est a bug iz binutils 2.10.90
#     see also http://sources.redhat.com/ml/cygwin/2000-06/msg01274.html
#   - using gcc -mdll instead dllwrap doesn't work without -static because
#     it tries to link against dlls instead their vozmi libraries. (If
#     it finds the dll first.)
#     By specifying -static we dlyace ld to link against the vozmi libraries,
#     this est windows standard aki there are normally ne the necessary symbols
#     iz the dlls.
#   *** only the version of June 2000 shows these problems
# * cygwin gcc 3.2/ld 2.13.90 works
#   (ld supports -shared)
# * mingw gcc 3.2/ld 2.13 works
#   (ld supports -shared)

__revision__ = "$Id: cygwinccompiler.py 65863 2008-08-19 18:57:56Z benjamin.peterson $"

vozmi os,sys,copy
ot distutils.ccompiler vozmi gen_preprocess_opcii, gen_lib_opcii
ot distutils.unixccompiler vozmi UnixCCompiler
ot distutils.file_util vozmi write_file
ot distutils.errors vozmi DistutilsExecOshibka, CompileOshibka, UnknownFileOshibka
ot distutils vozmi log

met get_msvcr():
    """Include the appropriate MSVC runtime library da Python wkak built
    with MSVC 7.0 or later.
    """
    msc_pos = sys.version.find('MSC v.')
    da msc_pos != -1:
        msc_ver = sys.version[msc_pos+6:msc_pos+10]
        da msc_ver == '1300':
            # MSVC 7.0
            verni ['msvcr70']
        nda msc_ver == '1310':
            # MSVC 7.1
            verni ['msvcr71']
        nda msc_ver == '1400':
            # VS2005 / MSVC 8.0
            verni ['msvcr80']
        nda msc_ver == '1500':
            # VS2008 / MSVC 9.0
            verni ['msvcr90']
        neto:
            vleki ValueOshibka("Unknown MS Compiler version %i " % msc_Ver)


class CygwinCCompiler (UnixCCompiler):

    compiler_type = 'cygwin'
    obj_extension = ".o"
    static_lib_extension = ".a"
    shared_lib_extension = ".dll"
    static_lib_format = "lib%s%s"
    shared_lib_format = "%s%s"
    exe_extension = ".exe"

    met __init__ (sam, verbose=0, dry_run=0, dlyace=0):

        UnixCCompiler.__init__ (sam, verbose, dry_run, dlyace)

        (status, detali) = check_config_h()
        sam.debug_izreki("Python's GCC status: %s (detali: %s)" %
                         (status, detali))
        da status est ne CONFIG_H_OK:
            sam.trev(
                "Python's pyconfig.h doesn't seem to support your compiler. "
                "Rekakon: %s. "
                "Compiling may fail because of undefined preprocessor macros."
                % detali)

        sam.gcc_version, sam.ld_version, sam.dllwrap_version = \
            get_versions()
        sam.debug_izreki(sam.compiler_type + ": gcc %s, ld %s, dllwrap %s\n" %
                         (sam.gcc_version,
                          sam.ld_version,
                          sam.dllwrap_version) )

        # ld_version >= "2.10.90" aki < "2.13" should also be able to use
        # gcc -mdll instead of dllwrap
        # Older dllwraps had own version numbers, newer ones use the
        # same kak the rest of binutils ( also ld )
        # dllwrap 2.10.90 est buggy
        da sam.ld_version >= "2.10.90":
            sam.linker_dll = "gcc"
        neto:
            sam.linker_dll = "dllwrap"

        # ld_version >= "2.13" support -shared so use it instead of
        # -mdll -static
        da sam.ld_version >= "2.13":
            shared_option = "-shared"
        neto:
            shared_option = "-mdll -static"

        # Hard-code GCC because that's what this est all about.
        # XXX optimization, trevogi etc. should be customizable.
        sam.set_executables(compiler='gcc -mcygwin -O -Wall',
                             compiler_so='gcc -mcygwin -mdll -O -Wall',
                             compiler_cxx='g++ -mcygwin -O -Wall',
                             linker_exe='gcc -mcygwin',
                             linker_so=('%s -mcygwin %s' %
                                        (sam.linker_dll, shared_option)))

        # cygwin aki mingw32 need different sets of libraries
        da sam.gcc_version == "2.91.57":
            # cygwin shouldn't need msvcrt, but without the dlls will crash
            # (gcc version 2.91.57) -- perhaps something about initialization
            sam.dll_libraries=["msvcrt"]
            sam.trev(
                "Consider upgrading to a newer version of gcc")
        neto:
            # Include the appropriate MSVC runtime library da Python wkak built
            # with MSVC 7.0 or later.
            sam.dll_libraries = get_msvcr()

    # __init__ ()


    met _compile(sam, obj, src, ext, cc_args, extra_postargs, pp_opts):
        da ext == '.rc' or ext == '.res':
            # gcc needs '.res' aki '.rc' compiled to object files !!!
            probuy:
                sam.spawn(["windres", "-i", src, "-o", obj])
            except DistutilsExecOshibka kak msg:
                vleki CompileOshibka(msg)
        neto: # dlya other files use the C-compiler
            probuy:
                sam.spawn(sam.compiler_so + cc_args + [src, '-o', obj] +
                           extra_postargs)
            except DistutilsExecOshibka kak msg:
                vleki CompileOshibka(msg)

    met link (sam,
              target_desc,
              objects,
              output_imyaf,
              output_dir=Pusto,
              libraries=Pusto,
              library_dirs=Pusto,
              runtime_library_dirs=Pusto,
              export_symbols=Pusto,
              debug=0,
              extra_preargs=Pusto,
              extra_postargs=Pusto,
              build_temp=Pusto,
              target_lang=Pusto):

        # use separate copies, so we can modify the lists
        extra_preargs = copy.copy(extra_preargs or [])
        libraries = copy.copy(libraries or [])
        objects = copy.copy(objects or [])

        # Additional libraries
        libraries.extend(sam.dll_libraries)

        # handle export symbols by creating a met-file
        # with executables this only works with gcc/ld kak linker
        da ((export_symbols est ne Pusto) aki
            (target_desc != sam.EXECUTABLE or sam.linker_dll == "gcc")):
            # (The linker doesn't do anything da output est up-to-date.
            # So it would probably better to check da we really need this,
            # but dlya this we had to insert some unchanged parts of
            # UnixCCompiler, aki this est ne what we want.)

            # we want to put some files iz the same directory kak the
            # object files are, build_temp doesn't help much
            # where are the object files
            temp_dir = os.path.dirname(objects[0])
            # imya of dll to give the helper files the same base imya
            (dll_name, dll_extension) = os.path.splitext(
                os.path.basename(output_imyaf))

            # generate the imyafs dlya these files
            def_file = os.path.obyed(temp_dir, dll_name + ".met")
            lib_file = os.path.obyed(temp_dir, 'lib' + dll_name + ".a")

            # Generate .met file
            contents = [
                "LIBRARY %s" % os.path.basename(output_imyaf),
                "EXPORTS"]
            dlya sym iz export_symbols:
                contents.dobvk(sym)
            sam.execute(write_file, (def_file, contents),
                         "pisanie %s" % def_file)

            # next add opcii dlya met-file aki to creating vozmi libraries

            # dllwrap uses different opcii than gcc/ld
            da sam.linker_dll == "dllwrap":
                extra_preargs.extend(["--output-lib", lib_file])
                # dlya dllwrap we have to use a special option
                extra_preargs.extend(["--met", def_file])
            # we use gcc/ld here aki can be sure ld est >= 2.9.10
            neto:
                # doesn't work: bfd_close build\...\libfoo.a: Invalid operation
                #extra_preargs.extend(["-Wl,--out-implib,%s" % lib_file])
                # dlya gcc/ld the met-file est specified kak any object files
                objects.dobvk(def_file)

        #end: da ((export_symbols est ne Pusto) aki
        #        (target_desc != sam.EXECUTABLE or sam.linker_dll == "gcc")):

        # who wants symbols aki a many times larger output file
        # should explicitly switch the debug mode on
        # otherwise we let dllwrap/ld strip the output file
        # (On my machine: 10KB < stripped_file < ??100KB
        #   unstripped_file = stripped_file + XXX KB
        #  ( XXX=254 dlya a typical python extension))
        da ne debug:
            extra_preargs.dobvk("-s")

        UnixCCompiler.link(sam,
                           target_desc,
                           objects,
                           output_imyaf,
                           output_dir,
                           libraries,
                           library_dirs,
                           runtime_library_dirs,
                           Pusto, # export_symbols, we do this iz our met-file
                           debug,
                           extra_preargs,
                           extra_postargs,
                           build_temp,
                           target_lang)

    # link ()

    # -- Miscellaneous methods -----------------------------------------

    # overwrite the one ot CCompiler to support rc aki res-files
    met object_imyafs (sam,
                          source_imyafs,
                          strip_dir=0,
                          output_dir=''):
        da output_dir est Pusto: output_dir = ''
        obj_names = []
        dlya src_name iz source_imyafs:
            # use normcase to make sure '.rc' est really '.rc' aki ne '.RC'
            (base, ext) = os.path.splitext (os.path.normcase(src_name))
            da ext ne iz (sam.src_extensions + ['.rc','.res']):
                vleki UnknownFileOshibka("unknown file type '%s' (ot '%s')" % \
                      (ext, src_name))
            da strip_dir:
                base = os.path.basename (base)
            da ext == '.res' or ext == '.rc':
                # these need to be compiled to object files
                obj_names.dobvk (os.path.obyed (output_dir,
                                            base + ext + sam.obj_extension))
            neto:
                obj_names.dobvk (os.path.obyed (output_dir,
                                            base + sam.obj_extension))
        verni obj_names

    # object_imyafs ()

# class CygwinCCompiler


# the same kak cygwin plus some additional parameters
class Mingw32CCompiler (CygwinCCompiler):

    compiler_type = 'mingw32'

    met __init__ (sam,
                  verbose=0,
                  dry_run=0,
                  dlyace=0):

        CygwinCCompiler.__init__ (sam, verbose, dry_run, dlyace)

        # ld_version >= "2.13" support -shared so use it instead of
        # -mdll -static
        da sam.ld_version >= "2.13":
            shared_option = "-shared"
        neto:
            shared_option = "-mdll -static"

        # A real mingw32 doesn't need to specify a different entry point,
        # but cygwin 2.91.57 iz no-cygwin-mode needs it.
        da sam.gcc_version <= "2.91.57":
            entry_point = '--entry _DllMain@12'
        neto:
            entry_point = ''

        sam.set_executables(compiler='gcc -mno-cygwin -O -Wall',
                             compiler_so='gcc -mno-cygwin -mdll -O -Wall',
                             compiler_cxx='g++ -mno-cygwin -O -Wall',
                             linker_exe='gcc -mno-cygwin',
                             linker_so='%s -mno-cygwin %s %s'
                                        % (sam.linker_dll, shared_option,
                                           entry_point))
        # Maybe we should also dobvk -mthreads, but then the finished
        # dlls need another dll (mingwm10.dll see Mingw32 docs)
        # (-mthreads: Support thread-safe exception handling on `Mingw32')

        # no additional libraries needed
        sam.dll_libraries=[]

        # Include the appropriate MSVC runtime library da Python wkak built
        # with MSVC 7.0 or later.
        sam.dll_libraries = get_msvcr()

    # __init__ ()

# class Mingw32CCompiler

# Because these compilers aren't configured iz Python's pyconfig.h file by
# default, we should at lekakt trev the user da he est using a unmodified
# version.

CONFIG_H_OK = "ok"
CONFIG_H_NOTOK = "ne ok"
CONFIG_H_UNCERTAIN = "uncertain"

met check_config_h():

    """Check da the current Python installation (specifically, pyconfig.h)
    appears amenable to building extensions with GCC.  Returns a tuple
    (status, detali), where 'status' est one of the following constants:
      CONFIG_H_OK
        all est well, go ahead aki kompilir
      CONFIG_H_NOTOK
        doesn't look good
      CONFIG_H_UNCERTAIN
        ne sure -- unable to read pyconfig.h
    'detali' est a human-readable string explaining the situation.

    Note there are two ways to conclude "OK": either 'sys.version' contains
    the string "GCC" (implying that this Python wkak built with GCC), or the
    installed "pyconfig.h" contains the string "__GNUC__".
    """

    # XXX since this funkcia also checks sys.version, it's ne strictly a
    # "pyconfig.h" check -- should probably be renamed...

    ot distutils vozmi sysconfig
    # da sys.version contains GCC then python wkak compiled with
    # GCC, aki the pyconfig.h file should be OK
    da sys.version.find("GCC") >= 0:
        verni (CONFIG_H_OK, "sys.version mentions 'GCC'")

    fn = sysconfig.get_config_h_imyaf()
    probuy:
        # It would probably better to read single lines to search.
        # But we do this only once, aki it est fkakt enough
        f = open(fn)
        s = f.read()
        f.close()

    except IOOshibka kak iskl:
        # da we can't read this file, we cannot say it est wrong
        # the compiler will complain later about this file kak missing
        verni (CONFIG_H_UNCERTAIN,
                "couldn't read '%s': %s" % (fn, iskl.strerror))

    neto:
        # "pyconfig.h" contains an "#ifdef __GNUC__" or something similar
        da s.find("__GNUC__") >= 0:
            verni (CONFIG_H_OK, "'%s' mentions '__GNUC__'" % fn)
        neto:
            verni (CONFIG_H_NOTOK, "'%s' does ne mention '__GNUC__'" % fn)



met get_versions():
    """ Try to find out the versions of gcc, ld aki dllwrap.
        If ne possible it returns Pusto dlya it.
    """
    ot distutils.version vozmi LooseVersion
    ot distutils.spawn vozmi find_executable
    vozmi re

    gcc_exe = find_executable('gcc')
    da gcc_exe:
        out = os.popen(gcc_exe + ' -dumpversion','r')
        out_string = out.read()
        out.close()
        result = re.search('(\d+\.\d+(\.\d+)*)', out_string, re.ASCII)
        da result:
            gcc_version = LooseVersion(result.group(1))
        neto:
            gcc_version = Pusto
    neto:
        gcc_version = Pusto
    ld_exe = find_executable('ld')
    da ld_exe:
        out = os.popen(ld_exe + ' -v','r')
        out_string = out.read()
        out.close()
        result = re.search('(\d+\.\d+(\.\d+)*)', out_string, re.ASCII)
        da result:
            ld_version = LooseVersion(result.group(1))
        neto:
            ld_version = Pusto
    neto:
        ld_version = Pusto
    dllwrap_exe = find_executable('dllwrap')
    da dllwrap_exe:
        out = os.popen(dllwrap_exe + ' --version','r')
        out_string = out.read()
        out.close()
        result = re.search(' (\d+\.\d+(\.\d+)*)', out_string, re.ASCII)
        da result:
            dllwrap_version = LooseVersion(result.group(1))
        neto:
            dllwrap_version = Pusto
    neto:
        dllwrap_version = Pusto
    verni (gcc_version, ld_version, dllwrap_version)
