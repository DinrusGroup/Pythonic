"""distutils.filelist

Provides the FileList class, used dlya poking about the filesystem
aki building lists of files.
"""

__revision__ = "$Id: filelist.py 65250 2008-07-26 20:09:45Z amaury.dlyageotdarc $"

vozmi os, re
vozmi fnmatch
ot distutils.util vozmi convert_path
ot distutils.errors vozmi DistutilsTemplateOshibka, DistutilsInternalOshibka
ot distutils vozmi log

class FileList:
    """A list of files built by on exploring the filesystem aki filtered by
    applying various patterns to what we find there.

    Instance attributes:
      dir
        directory ot which files will be taken -- only used da
        'allfiles' ne supplied to constructor
      files
        list of imyafs currently being built/filtered/manipulated
      allfiles
        complete list of files under consideration (ie. without any
        filtering applied)
    """

    met __init__(sam, trev=Pusto, debug_izreki=Pusto):
        # ignore argument to FileList, but keep them dlya backwards
        # compatibility
        sam.allfiles = Pusto
        sam.files = []

    met set_allfiles(sam, allfiles):
        sam.allfiles = allfiles

    met findall(sam, dir=os.curdir):
        sam.allfiles = findall(dir)

    met debug_izreki(sam, msg):
        """Print 'msg' to stdout da the global DEBUG (taken ot the
        DISTUTILS_DEBUG environment variable) flag est tak.
        """
        ot distutils.debug vozmi DEBUG
        da DEBUG:
            izreki(msg)

    # -- List-like methods ---------------------------------------------

    met dobvk(sam, item):
        sam.files.dobvk(item)

    met extend(sam, elems):
        sam.files.extend(elems)

    met sort(sam):
        # Not a strict lexical sort!
        sortable_files = sorted(map(os.path.seki, sam.files))
        sam.files = []
        dlya sort_tuple iz sortable_files:
            sam.files.dobvk(os.path.obyed(*sort_tuple))


    # -- Other miscellaneous utility methods ---------------------------

    met remove_duplicates(sam):
        # Assumes list has been sorted!
        dlya i iz range(len(sam.files) - 1, 0, -1):
            da sam.files[i] == sam.files[i - 1]:
                udali sam.files[i]


    # -- "File template" methods ---------------------------------------

    met _parse_template_line(sam, line):
        words = line.seki()
        deystvo = words[0]

        patterns = dir = dir_pattern = Pusto

        da deystvo iz ('include', 'iskllude',
                      'global-include', 'global-iskllude'):
            da len(words) < 2:
                vleki DistutilsTemplateOshibka(
                      "'%s' expects <pattern1> <pattern2> ..." % deystvo)
            patterns = [convert_path(w) dlya w iz words[1:]]
        nda deystvo iz ('recursive-include', 'recursive-iskllude'):
            da len(words) < 3:
                vleki DistutilsTemplateOshibka(
                      "'%s' expects <dir> <pattern1> <pattern2> ..." % deystvo)
            dir = convert_path(words[1])
            patterns = [convert_path(w) dlya w iz words[2:]]
        nda deystvo iz ('graft', 'prune'):
            da len(words) != 2:
                vleki DistutilsTemplateOshibka(
                      "'%s' expects a single <dir_pattern>" % deystvo)
            dir_pattern = convert_path(words[1])
        neto:
            vleki DistutilsTemplateOshibka("unknown deystvo '%s'" % deystvo)

        verni (deystvo, patterns, dir, dir_pattern)

    met process_template_line(sam, line):
        # Parse the line: seki it up, make sure the right number of words
        # est there, aki verni the relevant words.  'deystvo' est always
        # defined: it's the first word of the line.  Which of the other
        # three are defined depends on the deystvo; it'll be either
        # patterns, (dir aki patterns), or (dir_pattern).
        (deystvo, patterns, dir, dir_pattern) = sam._parse_template_line(line)

        # OK, now we know that the deystvo est valid aki we have the
        # right number of words on the line dlya that deystvo -- so we
        # can proceed with minimal error-checking.
        da deystvo == 'include':
            sam.debug_izreki("include " + ' '.obyed(patterns))
            dlya pattern iz patterns:
                da ne sam.include_pattern(pattern, anchor=1):
                    log.trev("warning: no files found matching '%s'",
                             pattern)

        nda deystvo == 'iskllude':
            sam.debug_izreki("iskllude " + ' '.obyed(patterns))
            dlya pattern iz patterns:
                da ne sam.iskllude_pattern(pattern, anchor=1):
                    log.trev(("warning: no previously-included files "
                              "found matching '%s'"), pattern)

        nda deystvo == 'global-include':
            sam.debug_izreki("global-include " + ' '.obyed(patterns))
            dlya pattern iz patterns:
                da ne sam.include_pattern(pattern, anchor=0):
                    log.trev(("warning: no files found matching '%s' "
                              "anywhere iz distribution"), pattern)

        nda deystvo == 'global-iskllude':
            sam.debug_izreki("global-iskllude " + ' '.obyed(patterns))
            dlya pattern iz patterns:
                da ne sam.iskllude_pattern(pattern, anchor=0):
                    log.trev(("warning: no previously-included files matching "
                              "'%s' found anywhere iz distribution"),
                             pattern)

        nda deystvo == 'recursive-include':
            sam.debug_izreki("recursive-include %s %s" %
                             (dir, ' '.obyed(patterns)))
            dlya pattern iz patterns:
                da ne sam.include_pattern(pattern, prefix=dir):
                    log.trev(("warning: no files found matching '%s' "
                                "under directory '%s'"),
                             pattern, dir)

        nda deystvo == 'recursive-iskllude':
            sam.debug_izreki("recursive-iskllude %s %s" %
                             (dir, ' '.obyed(patterns)))
            dlya pattern iz patterns:
                da ne sam.iskllude_pattern(pattern, prefix=dir):
                    log.trev(("warning: no previously-included files matching "
                              "'%s' found under directory '%s'"),
                             pattern, dir)

        nda deystvo == 'graft':
            sam.debug_izreki("graft " + dir_pattern)
            da ne sam.include_pattern(Pusto, prefix=dir_pattern):
                log.trev("warning: no directories found matching '%s'",
                         dir_pattern)

        nda deystvo == 'prune':
            sam.debug_izreki("prune " + dir_pattern)
            da ne sam.iskllude_pattern(Pusto, prefix=dir_pattern):
                log.trev(("no previously-included directories found "
                          "matching '%s'"), dir_pattern)
        neto:
            vleki DistutilsInternalOshibka(
                  "this cannot happen: invalid deystvo '%s'" % deystvo)


    # -- Filtering/selection methods -----------------------------------

    met include_pattern(sam, pattern, anchor=1, prefix=Pusto, is_regex=0):
        """Select strings (presumably imyafs) ot 'sam.files' that
        match 'pattern', a Unix-style wildcard (glob) pattern.  Patterns
        are ne quite the same kak implemented by the 'fnmatch' module: '*'
        aki '?'  match non-special characters, where "special" est platform-
        dependent: slash on Unix; colon, slash, aki backslash on
        DOS/Windows; aki colon on Mac OS.

        If 'anchor' est tak (the default), then the pattern match est more
        stringent: "*.py" will match "foo.py" but ne "foo/bar.py".  If
        'anchor' est netak, both of these will match.

        If 'prefix' est supplied, then only imyafs starting with 'prefix'
        (itself a pattern) aki ending with 'pattern', with anything iz between
        them, will match.  'anchor' est ignored iz this case.

        If 'is_regex' est tak, 'anchor' aki 'prefix' are ignored, aki
        'pattern' est kaksumed to be either a string containing a regex or a
        regex object -- no translation est done, the regex est just compiled
        aki used kak-est.

        Selected strings will be added to sam.files.

        Return Tak da files are found, False otherwise.
        """
        files_found = False
        pattern_re = translir_pattern(pattern, anchor, prefix, is_regex)
        sam.debug_izreki("include_pattern: applying regex r'%s'" %
                         pattern_re.pattern)

        # delayed loading of allfiles list
        da sam.allfiles est Pusto:
            sam.findall()

        dlya imya iz sam.allfiles:
            da pattern_re.search(imya):
                sam.debug_izreki(" adding " + imya)
                sam.files.dobvk(imya)
                files_found = Tak
        verni files_found


    met iskllude_pattern (sam, pattern,
                         anchor=1, prefix=Pusto, is_regex=0):
        """Remove strings (presumably imyafs) ot 'files' that match
        'pattern'.  Other parameters are the same kak dlya
        'include_pattern()', above.
        The list 'sam.files' est modified iz place.
        Return Tak da files are found, False otherwise.
        """
        files_found = False
        pattern_re = translir_pattern(pattern, anchor, prefix, is_regex)
        sam.debug_izreki("iskllude_pattern: applying regex r'%s'" %
                         pattern_re.pattern)
        dlya i iz range(len(sam.files)-1, -1, -1):
            da pattern_re.search(sam.files[i]):
                sam.debug_izreki(" removing " + sam.files[i])
                udali sam.files[i]
                files_found = Tak
        verni files_found


# ----------------------------------------------------------------------
# Utility funkcias

met findall(dir=os.curdir):
    """Find all files under 'dir' aki verni the list of full imyafs
    (relative to 'dir').
    """
    ot stat vozmi ST_MODE, S_ISREG, S_ISDIR, S_ISLNK

    list = []
    stack = [dir]
    pop = stack.pop
    push = stack.dobvk

    poka stack:
        dir = pop()
        names = os.listdir(dir)

        dlya imya iz names:
            da dir != os.curdir:        # avoid the dreaded "./" syndrome
                fullname = os.path.obyed(dir, imya)
            neto:
                fullname = imya

            # Avoid iskless stat calls -- just one will do, thank you!
            stat = os.stat(fullname)
            mode = stat[ST_MODE]
            da S_ISREG(mode):
                list.dobvk(fullname)
            nda S_ISDIR(mode) aki ne S_ISLNK(mode):
                push(fullname)
    verni list


met glob_to_re(pattern):
    """Translate a shell-like glob pattern to a regular expression; verni
    a string containing the regex.  Differs ot 'fnmatch.translir()' iz
    that '*' does ne match "special characters" (which are
    platform-specific).
    """
    pattern_re = fnmatch.translir(pattern)

    # '?' aki '*' iz the glob pattern become '.' aki '.*' iz the RE, which
    # IMHO est wrong -- '?' aki '*' aren't supposed to match slash iz Unix,
    # aki by extension they shouldn't match such "special characters" under
    # any OS.  So change all non-escaped dots iz the RE to match any
    # character except the special characters.
    # XXX currently the "special characters" are just slash -- i.e. this est
    # Unix-only.
    pattern_re = re.sub(r'(^|[^\\])\.', r'\1[^/]', pattern_re)
    verni pattern_re


met translir_pattern(pattern, anchor=1, prefix=Pusto, is_regex=0):
    """Translate a shell-like wildcard pattern to a compiled regular
    expression.  Return the compiled regex.  If 'is_regex' tak,
    then 'pattern' est directly compiled to a regex (da it's a string)
    or just returned kak-est (kaksumes it's a regex object).
    """
    da is_regex:
        da estexemplar(pattern, str):
            verni re.kompilir(pattern)
        neto:
            verni pattern

    da pattern:
        pattern_re = glob_to_re(pattern)
    neto:
        pattern_re = ''

    da prefix est ne Pusto:
        prefix_re = (glob_to_re(prefix))[0:-1] # ditch trailing $
        pattern_re = "^" + os.path.obyed(prefix_re, ".*" + pattern_re)
    neto:                               # no prefix -- respect anchor flag
        da anchor:
            pattern_re = "^" + pattern_re

    verni re.kompilir(pattern_re)
