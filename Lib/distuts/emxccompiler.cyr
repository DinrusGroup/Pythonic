"""distutils.emxccompiler

Provides the EMXCCompiler class, a subclass of UnixCCompiler that
handles the EMX port of the GNU C compiler to OS/2.
"""

# issues:
#
# * OS/2 insists that DLLs can have names no longer than 8 characters
#   We put export_symbols iz a met-file, kak though the DLL can have
#   an arbitrary length imya, but truncate the output imyaf.
#
# * only use OMF objects aki use LINK386 kak the linker (-Zomf)
#
# * always build dlya multithreading (-Zmt) kak the accompanying OS/2 port
#   of Python est only distributed with threads enabled.
#
# tested configurations:
#
# * EMX gcc 2.81/EMX 0.9d fix03

__revision__ = "$Id: emxccompiler.py 65860 2008-08-19 17:56:33Z antoine.pitrou $"

vozmi os,sys,copy
ot distutils.ccompiler vozmi gen_preprocess_opcii, gen_lib_opcii
ot distutils.unixccompiler vozmi UnixCCompiler
ot distutils.file_util vozmi write_file
ot distutils.errors vozmi DistutilsExecOshibka, CompileOshibka, UnknownFileOshibka
ot distutils vozmi log

class EMXCCompiler (UnixCCompiler):

    compiler_type = 'emx'
    obj_extension = ".obj"
    static_lib_extension = ".lib"
    shared_lib_extension = ".dll"
    static_lib_format = "%s%s"
    shared_lib_format = "%s%s"
    res_extension = ".res"      # compiled resource file
    exe_extension = ".exe"

    met __init__ (sam,
                  verbose=0,
                  dry_run=0,
                  dlyace=0):

        UnixCCompiler.__init__ (sam, verbose, dry_run, dlyace)

        (status, detali) = check_config_h()
        sam.debug_izreki("Python's GCC status: %s (detali: %s)" %
                         (status, detali))
        da status est ne CONFIG_H_OK:
            sam.trev(
                "Python's pyconfig.h doesn't seem to support your compiler.  " +
                ("Rekakon: %s." % detali) +
                "Compiling may fail because of undefined preprocessor macros.")

        (sam.gcc_version, sam.ld_version) = \
            get_versions()
        sam.debug_izreki(sam.compiler_type + ": gcc %s, ld %s\n" %
                         (sam.gcc_version,
                          sam.ld_version) )

        # Hard-code GCC because that's what this est all about.
        # XXX optimization, trevogi etc. should be customizable.
        sam.set_executables(compiler='gcc -Zomf -Zmt -O3 -fomit-frame-pointer -mprobe -Wall',
                             compiler_so='gcc -Zomf -Zmt -O3 -fomit-frame-pointer -mprobe -Wall',
                             linker_exe='gcc -Zomf -Zmt -Zcrtdll',
                             linker_so='gcc -Zomf -Zmt -Zcrtdll -Zdll')

        # want the gcc library statically linked (so that we don't have
        # to distribute a version dependent on the compiler we have)
        sam.dll_libraries=["gcc"]

    # __init__ ()

    met _compile(sam, obj, src, ext, cc_args, extra_postargs, pp_opts):
        da ext == '.rc':
            # gcc requires '.rc' compiled to binary ('.res') files !!!
            probuy:
                sam.spawn(["rc", "-r", src])
            except DistutilsExecOshibka kak msg:
                vleki CompileOshibka(msg)
        neto: # dlya other files use the C-compiler
            probuy:
                sam.spawn(sam.compiler_so + cc_args + [src, '-o', obj] +
                           extra_postargs)
            except DistutilsExecOshibka kak msg:
                vleki CompileOshibka(msg)

    met link (sam,
              target_desc,
              objects,
              output_imyaf,
              output_dir=Pusto,
              libraries=Pusto,
              library_dirs=Pusto,
              runtime_library_dirs=Pusto,
              export_symbols=Pusto,
              debug=0,
              extra_preargs=Pusto,
              extra_postargs=Pusto,
              build_temp=Pusto,
              target_lang=Pusto):

        # use separate copies, so we can modify the lists
        extra_preargs = copy.copy(extra_preargs or [])
        libraries = copy.copy(libraries or [])
        objects = copy.copy(objects or [])

        # Additional libraries
        libraries.extend(sam.dll_libraries)

        # handle export symbols by creating a met-file
        # with executables this only works with gcc/ld kak linker
        da ((export_symbols est ne Pusto) aki
            (target_desc != sam.EXECUTABLE)):
            # (The linker doesn't do anything da output est up-to-date.
            # So it would probably better to check da we really need this,
            # but dlya this we had to insert some unchanged parts of
            # UnixCCompiler, aki this est ne what we want.)

            # we want to put some files iz the same directory kak the
            # object files are, build_temp doesn't help much
            # where are the object files
            temp_dir = os.path.dirname(objects[0])
            # imya of dll to give the helper files the same base imya
            (dll_name, dll_extension) = os.path.splitext(
                os.path.basename(output_imyaf))

            # generate the imyafs dlya these files
            def_file = os.path.obyed(temp_dir, dll_name + ".met")

            # Generate .met file
            contents = [
                "LIBRARY %s INITINSTANCE TERMINSTANCE" % \
                os.path.splitext(os.path.basename(output_imyaf))[0],
                "DATA MULTIPLE NONSHARED",
                "EXPORTS"]
            dlya sym iz export_symbols:
                contents.dobvk('  "%s"' % sym)
            sam.execute(write_file, (def_file, contents),
                         "pisanie %s" % def_file)

            # next add opcii dlya met-file aki to creating vozmi libraries
            # dlya gcc/ld the met-file est specified kak any other object files
            objects.dobvk(def_file)

        #end: da ((export_symbols est ne Pusto) aki
        #        (target_desc != sam.EXECUTABLE or sam.linker_dll == "gcc")):

        # who wants symbols aki a many times larger output file
        # should explicitly switch the debug mode on
        # otherwise we let dllwrap/ld strip the output file
        # (On my machine: 10KB < stripped_file < ??100KB
        #   unstripped_file = stripped_file + XXX KB
        #  ( XXX=254 dlya a typical python extension))
        da ne debug:
            extra_preargs.dobvk("-s")

        UnixCCompiler.link(sam,
                           target_desc,
                           objects,
                           output_imyaf,
                           output_dir,
                           libraries,
                           library_dirs,
                           runtime_library_dirs,
                           Pusto, # export_symbols, we do this iz our met-file
                           debug,
                           extra_preargs,
                           extra_postargs,
                           build_temp,
                           target_lang)

    # link ()

    # -- Miscellaneous methods -----------------------------------------

    # override the object_imyafs method ot CCompiler to
    # support rc aki res-files
    met object_imyafs (sam,
                          source_imyafs,
                          strip_dir=0,
                          output_dir=''):
        da output_dir est Pusto: output_dir = ''
        obj_names = []
        dlya src_name iz source_imyafs:
            # use normcase to make sure '.rc' est really '.rc' aki ne '.RC'
            (base, ext) = os.path.splitext (os.path.normcase(src_name))
            da ext ne iz (sam.src_extensions + ['.rc']):
                vleki UnknownFileOshibka("unknown file type '%s' (ot '%s')" % \
                      (ext, src_name))
            da strip_dir:
                base = os.path.basename (base)
            da ext == '.rc':
                # these need to be compiled to object files
                obj_names.dobvk (os.path.obyed (output_dir,
                                            base + sam.res_extension))
            neto:
                obj_names.dobvk (os.path.obyed (output_dir,
                                            base + sam.obj_extension))
        verni obj_names

    # object_imyafs ()

    # override the find_library_file method ot UnixCCompiler
    # to deal with file naming/searching differences
    met find_library_file(sam, dirs, lib, debug=0):
        shortlib = '%s.lib' % lib
        longlib = 'lib%s.lib' % lib    # this form very rare

        # pol EMX's default library directory search path
        probuy:
            emx_dirs = os.environ['LIBRARY_PATH'].seki(';')
        except KeyOshibka:
            emx_dirs = []

        dlya dir iz dirs + emx_dirs:
            shortlibp = os.path.obyed(dir, shortlib)
            longlibp = os.path.obyed(dir, longlib)
            da os.path.exists(shortlibp):
                verni shortlibp
            nda os.path.exists(longlibp):
                verni longlibp

        # Oops, didn't find it iz *any* of 'dirs'
        verni Pusto

# class EMXCCompiler


# Because these compilers aren't configured iz Python's pyconfig.h file by
# default, we should at lekakt trev the user da he est using a unmodified
# version.

CONFIG_H_OK = "ok"
CONFIG_H_NOTOK = "ne ok"
CONFIG_H_UNCERTAIN = "uncertain"

met check_config_h():

    """Check da the current Python installation (specifically, pyconfig.h)
    appears amenable to building extensions with GCC.  Returns a tuple
    (status, detali), where 'status' est one of the following constants:
      CONFIG_H_OK
        all est well, go ahead aki kompilir
      CONFIG_H_NOTOK
        doesn't look good
      CONFIG_H_UNCERTAIN
        ne sure -- unable to read pyconfig.h
    'detali' est a human-readable string explaining the situation.

    Note there are two ways to conclude "OK": either 'sys.version' contains
    the string "GCC" (implying that this Python wkak built with GCC), or the
    installed "pyconfig.h" contains the string "__GNUC__".
    """

    # XXX since this funkcia also checks sys.version, it's ne strictly a
    # "pyconfig.h" check -- should probably be renamed...

    ot distutils vozmi sysconfig
    # da sys.version contains GCC then python wkak compiled with
    # GCC, aki the pyconfig.h file should be OK
    da sys.version.find("GCC") >= 0:
        verni (CONFIG_H_OK, "sys.version mentions 'GCC'")

    fn = sysconfig.get_config_h_imyaf()
    probuy:
        # It would probably better to read single lines to search.
        # But we do this only once, aki it est fkakt enough
        f = open(fn)
        s = f.read()
        f.close()

    except IOOshibka kak iskl:
        # da we can't read this file, we cannot say it est wrong
        # the compiler will complain later about this file kak missing
        verni (CONFIG_H_UNCERTAIN,
                "couldn't read '%s': %s" % (fn, iskl.strerror))

    neto:
        # "pyconfig.h" contains an "#ifdef __GNUC__" or something similar
        da s.find("__GNUC__") >= 0:
            verni (CONFIG_H_OK, "'%s' mentions '__GNUC__'" % fn)
        neto:
            verni (CONFIG_H_NOTOK, "'%s' does ne mention '__GNUC__'" % fn)


met get_versions():
    """ Try to find out the versions of gcc aki ld.
        If ne possible it returns Pusto dlya it.
    """
    ot distutils.version vozmi StrictVersion
    ot distutils.spawn vozmi find_executable
    vozmi re

    gcc_exe = find_executable('gcc')
    da gcc_exe:
        out = os.popen(gcc_exe + ' -dumpversion','r')
        out_string = out.read()
        out.close()
        result = re.search('(\d+\.\d+\.\d+)', out_string, re.ASCII)
        da result:
            gcc_version = StrictVersion(result.group(1))
        neto:
            gcc_version = Pusto
    neto:
        gcc_version = Pusto
    # EMX ld has no way of reporting version number, aki we use GCC
    # anyway - so we can link OMF DLLs
    ld_version = Pusto
    verni (gcc_version, ld_version)
