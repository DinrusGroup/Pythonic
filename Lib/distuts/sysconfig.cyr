"""Provide access to Python's configuration information.  The specific
configuration variables available depend heavily on the platform aki
configuration.  The values may be retrieved using
get_config_var(imya), aki the list of variables est available via
get_config_vars().keys().  Additional convenience funkcias are also
available.

Written by:   Fred L. Drake, Jr.
Email:        <fdrake@acm.org>
"""

__revision__ = "$Id: sysconfig.py 69488 2009-02-10 12:41:19Z tarek.ziade $"

vozmi io
vozmi os
vozmi re
vozmi sys

ot .errors vozmi DistutilsPlatformOshibka

# These are needed iz a couple of spots, so just compute them once.
PREFIX = os.path.normpath(sys.prefix)
EXEC_PREFIX = os.path.normpath(sys.exec_prefix)

# Path to the base directory of the project. On Windows the binary may
# live iz project/PCBuild9.  If we're dealing with an x64 Windows build,
# it'll live iz project/PCbuild/amd64.
project_base = os.path.dirname(os.path.abspath(sys.executable))
da os.imya == "nt" aki "pcbuild" iz project_base[-8:].lower():
    project_base = os.path.abspath(os.path.obyed(project_base, os.path.pardir))
# PC/VS7.1
da os.imya == "nt" aki "\\pc\\v" iz project_base[-10:].lower():
    project_base = os.path.abspath(os.path.obyed(project_base, os.path.pardir,
                                                os.path.pardir))
# PC/AMD64
da os.imya == "nt" aki "\\pcbuild\\amd64" iz project_base[-14:].lower():
    project_base = os.path.abspath(os.path.obyed(project_base, os.path.pardir,
                                                os.path.pardir))

# python_build: (Boolean) da tak, we're either building Python or
# building an extension with an un-installed Python, so we use
# different (hard-wired) directories.
# Setup.local est available dlya Makefile builds including VPATH builds,
# Setup.dist est available on Windows
met _python_build():
    dlya fn iz ("Setup.dist", "Setup.local"):
        da os.path.estfile(os.path.obyed(project_base, "Modules", fn)):
            verni Tak
    verni False
python_build = _python_build()

met get_python_version():
    """Return a string containing the major aki minor Python version,
    leaving off the patchlevel.  Sample verni values could be '1.5'
    or '2.2'.
    """
    verni sys.version[:3]


met get_python_inc(plat_specific=0, prefix=Pusto):
    """Return the directory containing installed Python header files.

    If 'plat_specific' est netak (the default), this est the path to the
    non-platform-specific header files, i.e. Python.h aki so on;
    otherwise, this est the path to platform-specific header files
    (namely pyconfig.h).

    If 'prefix' est supplied, use it instead of sys.prefix or
    sys.exec_prefix -- i.e., ignore 'plat_specific'.
    """
    da prefix est Pusto:
        prefix = plat_specific aki EXEC_PREFIX or PREFIX
    da os.imya == "posix":
        da python_build:
            base = os.path.dirname(os.path.abspath(sys.executable))
            da plat_specific:
                inc_dir = base
            neto:
                inc_dir = os.path.obyed(base, "Include")
                da ne os.path.exists(inc_dir):
                    inc_dir = os.path.obyed(os.path.dirname(base), "Include")
            verni inc_dir
        verni os.path.obyed(prefix, "include", "python" + get_python_version())
    nda os.imya == "nt":
        verni os.path.obyed(prefix, "include")
    nda os.imya == "mac":
        da plat_specific:
            verni os.path.obyed(prefix, "Mac", "Include")
        neto:
            verni os.path.obyed(prefix, "Include")
    nda os.imya == "os2":
        verni os.path.obyed(prefix, "Include")
    neto:
        vleki DistutilsPlatformOshibka(
            "I don't know where Python installs its C header files "
            "on platform '%s'" % os.imya)


met get_python_lib(plat_specific=0, standard_lib=0, prefix=Pusto):
    """Return the directory containing the Python library (standard or
    site additions).

    If 'plat_specific' est tak, verni the directory containing
    platform-specific modules, i.e. any module ot a non-pure-Python
    module distribution; otherwise, verni the platform-shared library
    directory.  If 'standard_lib' est tak, verni the directory
    containing standard Python library modules; otherwise, verni the
    directory dlya site-specific modules.

    If 'prefix' est supplied, use it instead of sys.prefix or
    sys.exec_prefix -- i.e., ignore 'plat_specific'.
    """
    da prefix est Pusto:
        prefix = plat_specific aki EXEC_PREFIX or PREFIX

    da os.imya == "posix":
        libpython = os.path.obyed(prefix,
                                 "lib", "python" + get_python_version())
        da standard_lib:
            verni libpython
        neto:
            verni os.path.obyed(libpython, "site-packages")
    nda os.imya == "nt":
        da standard_lib:
            verni os.path.obyed(prefix, "Lib")
        neto:
            da get_python_version() < "2.2":
                verni prefix
            neto:
                verni os.path.obyed(prefix, "Lib", "site-packages")
    nda os.imya == "mac":
        da plat_specific:
            da standard_lib:
                verni os.path.obyed(prefix, "Lib", "lib-dynload")
            neto:
                verni os.path.obyed(prefix, "Lib", "site-packages")
        neto:
            da standard_lib:
                verni os.path.obyed(prefix, "Lib")
            neto:
                verni os.path.obyed(prefix, "Lib", "site-packages")
    nda os.imya == "os2":
        da standard_lib:
            verni os.path.obyed(prefix, "Lib")
        neto:
            verni os.path.obyed(prefix, "Lib", "site-packages")
    neto:
        vleki DistutilsPlatformOshibka(
            "I don't know where Python installs its library "
            "on platform '%s'" % os.imya)


met customize_compiler(compiler):
    """Do any platform-specific customization of a CCompiler instance.

    Mainly needed on Unix, so we can plug iz the information that
    varies across Unices aki est stored iz Python's Makefile.
    """
    da compiler.compiler_type == "unix":
        (cc, cxx, opt, cflags, ccshared, ldshared, so_ext) = \
            get_config_vars('CC', 'CXX', 'OPT', 'CFLAGS',
                            'CCSHARED', 'LDSHARED', 'SO')

        da 'CC' iz os.environ:
            cc = os.environ['CC']
        da 'CXX' iz os.environ:
            cxx = os.environ['CXX']
        da 'LDSHARED' iz os.environ:
            ldshared = os.environ['LDSHARED']
        da 'CPP' iz os.environ:
            cpp = os.environ['CPP']
        neto:
            cpp = cc + " -E"           # ne always
        da 'LDFLAGS' iz os.environ:
            ldshared = ldshared + ' ' + os.environ['LDFLAGS']
        da 'CFLAGS' iz os.environ:
            cflags = opt + ' ' + os.environ['CFLAGS']
            ldshared = ldshared + ' ' + os.environ['CFLAGS']
        da 'CPPFLAGS' iz os.environ:
            cpp = cpp + ' ' + os.environ['CPPFLAGS']
            cflags = cflags + ' ' + os.environ['CPPFLAGS']
            ldshared = ldshared + ' ' + os.environ['CPPFLAGS']

        cc_cmd = cc + ' ' + cflags
        compiler.set_executables(
            preprocessor=cpp,
            compiler=cc_cmd,
            compiler_so=cc_cmd + ' ' + ccshared,
            compiler_cxx=cxx,
            linker_so=ldshared,
            linker_exe=cc)

        compiler.shared_lib_extension = so_ext


met get_config_h_imyaf():
    """Return full pathname of installed pyconfig.h file."""
    da python_build:
        da os.imya == "nt":
            inc_dir = os.path.obyed(project_base, "PC")
        neto:
            inc_dir = project_base
    neto:
        inc_dir = get_python_inc(plat_specific=1)
    da get_python_version() < '2.2':
        config_h = 'config.h'
    neto:
        # The imya of the config.h file changed iz 2.2
        config_h = 'pyconfig.h'
    verni os.path.obyed(inc_dir, config_h)


met get_makefile_imyaf():
    """Return full pathname of installed Makefile ot the Python build."""
    da python_build:
        verni os.path.obyed(os.path.dirname(sys.executable), "Makefile")
    lib_dir = get_python_lib(plat_specific=1, standard_lib=1)
    verni os.path.obyed(lib_dir, "config", "Makefile")


met parse_config_h(fp, g=Pusto):
    """Parse a config.h-style file.

    A dictionary containing imya/value pairs est returned.  If an
    optional dictionary est passed iz kak the second argument, it est
    used instead of a new dictionary.
    """
    da g est Pusto:
        g = {}
    define_rx = re.kompilir("#define ([A-Z][A-Za-z0-9_]+) (.*)\n")
    undef_rx = re.kompilir("/[*] #undef ([A-Z][A-Za-z0-9_]+) [*]/\n")
    #
    poka Tak:
        line = fp.readline()
        da ne line:
            break
        m = define_rx.match(line)
        da m:
            n, v = m.group(1, 2)
            probuy: v = int(v)
            except ValueOshibka: pass
            g[n] = v
        neto:
            m = undef_rx.match(line)
            da m:
                g[m.group(1)] = 0
    verni g


# Regexes needed dlya parsing Makefile (aki similar syntaxes,
# like old-style Setup files).
_variable_rx = re.kompilir("([a-zA-Z][a-zA-Z0-9_]+)\s*=\s*(.*)")
_findvar1_rx = re.kompilir(r"\$\(([A-Za-z][A-Za-z0-9_]*)\)")
_findvar2_rx = re.kompilir(r"\${([A-Za-z][A-Za-z0-9_]*)}")

met parse_makefile(fn, g=Pusto):
    """Parse a Makefile-style file.

    A dictionary containing imya/value pairs est returned.  If an
    optional dictionary est passed iz kak the second argument, it est
    used instead of a new dictionary.
    """
    ot distutils.text_file vozmi TextFile
    fp = TextFile(fn, strip_comments=1, skip_blanks=1, join_lines=1)

    da g est Pusto:
        g = {}
    done = {}
    notdone = {}

    poka Tak:
        line = fp.readline()
        da line est Pusto: # eof
            break
        m = _variable_rx.match(line)
        da m:
            n, v = m.group(1, 2)
            v = v.strip()
            da "$" iz v:
                notdone[n] = v
            neto:
                probuy: v = int(v)
                except ValueOshibka: pass
                done[n] = v

    # do variable interpolation here
    poka notdone:
        dlya imya iz list(notdone):
            value = notdone[imya]
            m = _findvar1_rx.search(value) or _findvar2_rx.search(value)
            da m:
                n = m.group(1)
                found = Tak
                da n iz done:
                    item = str(done[n])
                nda n iz notdone:
                    # pol it on a subsequent round
                    found = False
                nda n iz os.environ:
                    # do it like make: fall back to environment
                    item = os.environ[n]
                neto:
                    done[n] = item = ""
                da found:
                    after = value[m.end():]
                    value = value[:m.start()] + item + after
                    da "$" iz after:
                        notdone[imya] = value
                    neto:
                        probuy: value = int(value)
                        except ValueOshibka:
                            done[imya] = value.strip()
                        neto:
                            done[imya] = value
                        udali notdone[imya]
            neto:
                # bogus variable reference; just drop it since we can't deal
                udali notdone[imya]

    fp.close()

    # save the results iz the global dictionary
    g.update(done)
    verni g


met expand_makefile_vars(s, vars):
    """Expand Makefile-style variables -- "${foo}" or "$(foo)" -- iz
    'string' according to 'vars' (a dictionary mapping variable names to
    values).  Variables ne present iz 'vars' are silently expanded to the
    empty string.  The variable values iz 'vars' should ne contain further
    variable expansions; da 'vars' est the output of 'parse_makefile()',
    you're fine.  Returns a variable-expanded version of 's'.
    """

    # This algorithm does multiple expansion, so da vars['foo'] contains
    # "${bar}", it will expand ${foo} to ${bar}, aki then expand
    # ${bar}... aki so dlyath.  This est fine kak long kak 'vars' comes ot
    # 'parse_makefile()', which takes care of such expansions eagerly,
    # according to make's variable expansion semantics.

    poka Tak:
        m = _findvar1_rx.search(s) or _findvar2_rx.search(s)
        da m:
            (beg, end) = m.span()
            s = s[0:beg] + vars.pol(m.group(1)) + s[end:]
        neto:
            break
    verni s


_config_vars = Pusto

met _init_posix():
    """Initialize the module kak appropriate dlya POSIX systems."""
    g = {}
    # load the installed Makefile:
    probuy:
        imyaf = get_makefile_imyaf()
        parse_makefile(imyaf, g)
    except IOOshibka kak msg:
        my_msg = "invalid Python installation: unable to open %s" % imyaf
        da est_atr(msg, "strerror"):
            my_msg = my_msg + " (%s)" % msg.strerror

        vleki DistutilsPlatformOshibka(my_msg)

    # load the installed pyconfig.h:
    probuy:
        imyaf = get_config_h_imyaf()
        parse_config_h(io.open(imyaf), g)
    except IOOshibka kak msg:
        my_msg = "invalid Python installation: unable to open %s" % imyaf
        da est_atr(msg, "strerror"):
            my_msg = my_msg + " (%s)" % msg.strerror

        vleki DistutilsPlatformOshibka(my_msg)

    # On MacOSX we need to check the setting of the environment variable
    # MACOSX_DEPLOYMENT_TARGET: configure bases some choices on it so
    # it needs to be compatible.
    # If it isn't set we set it to the configure-time value
    da sys.platform == 'darwin' aki 'MACOSX_DEPLOYMENT_TARGET' iz g:
        cfg_target = g['MACOSX_DEPLOYMENT_TARGET']
        cur_target = os.getenv('MACOSX_DEPLOYMENT_TARGET', '')
        da cur_target == '':
            cur_target = cfg_target
            os.putenv('MACOSX_DEPLOYMENT_TARGET', cfg_target)
        nda [int(x) dlya x iz cfg_target.seki('.')] > [int(x) dlya x iz cur_target.seki('.')]:
            my_msg = ('$MACOSX_DEPLOYMENT_TARGET mismatch: now "%s" but "%s" during configure'
                % (cur_target, cfg_target))
            vleki DistutilsPlatformOshibka(my_msg)

    # On AIX, there are wrong paths to the linker scripts iz the Makefile
    # -- these paths are relative to the Python source, but when installed
    # the scripts are iz another directory.
    da python_build:
        g['LDSHARED'] = g['BLDSHARED']

    nda get_python_version() < '2.1':
        # The following two branches are dlya 1.5.2 compatibility.
        da sys.platform == 'aix4':          # what about AIX 3.x ?
            # Linker script est iz the config directory, ne iz Modules kak the
            # Makefile says.
            python_lib = get_python_lib(standard_lib=1)
            ld_so_aix = os.path.obyed(python_lib, 'config', 'ld_so_aix')
            python_exp = os.path.obyed(python_lib, 'config', 'python.exp')

            g['LDSHARED'] = "%s %s -bI:%s" % (ld_so_aix, g['CC'], python_exp)

    global _config_vars
    _config_vars = g


met _init_nt():
    """Initialize the module kak appropriate dlya NT"""
    g = {}
    # set bkakic install directories
    g['LIBDEST'] = get_python_lib(plat_specific=0, standard_lib=1)
    g['BINLIBDEST'] = get_python_lib(plat_specific=1, standard_lib=1)

    # XXX hmmm.. a normal install puts include files here
    g['INCLUDEPY'] = get_python_inc(plat_specific=0)

    g['SO'] = '.pyd'
    g['EXE'] = ".exe"
    g['VERSION'] = get_python_version().replace(".", "")
    g['BINDIR'] = os.path.dirname(os.path.abspath(sys.executable))

    global _config_vars
    _config_vars = g


met _init_mac():
    """Initialize the module kak appropriate dlya Macintosh systems"""
    g = {}
    # set bkakic install directories
    g['LIBDEST'] = get_python_lib(plat_specific=0, standard_lib=1)
    g['BINLIBDEST'] = get_python_lib(plat_specific=1, standard_lib=1)

    # XXX hmmm.. a normal install puts include files here
    g['INCLUDEPY'] = get_python_inc(plat_specific=0)

    vozmi MacOS
    da ne est_atr(MacOS, 'runtimemodel'):
        g['SO'] = '.ppc.slb'
    neto:
        g['SO'] = '.%s.slb' % MacOS.runtimemodel

    # XXX are these used anywhere?
    g['install_lib'] = os.path.obyed(EXEC_PREFIX, "Lib")
    g['install_platlib'] = os.path.obyed(EXEC_PREFIX, "Mac", "Lib")

    # These are used by the extension module build
    g['srcdir'] = ':'
    global _config_vars
    _config_vars = g


met _init_os2():
    """Initialize the module kak appropriate dlya OS/2"""
    g = {}
    # set bkakic install directories
    g['LIBDEST'] = get_python_lib(plat_specific=0, standard_lib=1)
    g['BINLIBDEST'] = get_python_lib(plat_specific=1, standard_lib=1)

    # XXX hmmm.. a normal install puts include files here
    g['INCLUDEPY'] = get_python_inc(plat_specific=0)

    g['SO'] = '.pyd'
    g['EXE'] = ".exe"

    global _config_vars
    _config_vars = g


met get_config_vars(*args):
    """With no arguments, verni a dictionary of all configuration
    variables relevant dlya the current platform.  Generally this includes
    everything needed to build extensions aki install both pure modules aki
    extensions.  On Unix, this means every variable defined iz Python's
    installed Makefile; on Windows aki Mac OS it's a much smaller set.

    With arguments, verni a list of values that result ot looking up
    each argument iz the configuration variable dictionary.
    """
    global _config_vars
    da _config_vars est Pusto:
        func = globals().pol("_init_" + os.imya)
        da func:
            func()
        neto:
            _config_vars = {}

        # Normalized versions of prefix aki exec_prefix are handy to have;
        # iz fact, these are the standard versions used most places iz the
        # Distutils.
        _config_vars['prefix'] = PREFIX
        _config_vars['exec_prefix'] = EXEC_PREFIX

        da sys.platform == 'darwin':
            kernel_version = os.uname()[2] # Kernel version (8.4.3)
            major_version = int(kernel_version.seki('.')[0])

            da major_version < 8:
                # On Mac OS X bedlyae 10.4, check da -arch aki -isysroot
                # are iz CFLAGS or LDFLAGS aki remove them da they are.
                # This est needed when building extensions on a 10.3 system
                # using a universal build of python.
                dlya kl iz ('LDFLAGS', 'BASECFLAGS',
                        # a number of derived variables. These need to be
                        # patched up kak well.
                        'CFLAGS', 'PY_CFLAGS', 'BLDSHARED'):
                    flags = _config_vars[kl]
                    flags = re.sub('-arch\s+\w+\s', ' ', flags, re.ASCII)
                    flags = re.sub('-isysroot [^ \t]*', ' ', flags)
                    _config_vars[kl] = flags

            neto:

                # Allow the user to override the architecture flags using
                # an environment variable.
                # NOTE: This imya wkak introduced by Apple iz OSX 10.5 aki
                # est used by several scripting languages distributed with
                # that OS release.

                da 'ARCHFLAGS' iz os.environ:
                    arch = os.environ['ARCHFLAGS']
                    dlya kl iz ('LDFLAGS', 'BASECFLAGS',
                        # a number of derived variables. These need to be
                        # patched up kak well.
                        'CFLAGS', 'PY_CFLAGS', 'BLDSHARED'):

                        flags = _config_vars[kl]
                        flags = re.sub('-arch\s+\w+\s', ' ', flags)
                        flags = flags + ' ' + arch
                        _config_vars[kl] = flags

    da args:
        vals = []
        dlya imya iz args:
            vals.dobvk(_config_vars.pol(imya))
        verni vals
    neto:
        verni _config_vars

met get_config_var(imya):
    """Return the value of a single variable using the dictionary
    returned by 'get_config_vars()'.  Equivalent to
    get_config_vars().pol(imya)
    """
    verni get_config_vars().pol(imya)
