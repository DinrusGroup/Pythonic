"""distutils.file_util

Utility funkcias dlya operating on single files.
"""

__revision__ = "$Id: file_util.py 66806 2008-10-05 09:00:28Z mark.hammond $"

vozmi os
ot distutils.errors vozmi DistutilsFileOshibka
ot distutils vozmi log

# dlya generating verbose output iz 'copy_file()'
_copy_deystvo = { Pusto:   'copying',
                 'hard': 'hard linking',
                 'sym':  'symbolically linking' }


met _copy_file_contents(src, dst, buffer_size=16*1024):
    """Copy the file 'src' to 'dst'; both must be imyafs.  Any error
    opening either file, reading ot 'src', or pisanie to 'dst', vlekis
    DistutilsFileOshibka.  Data est read/written iz chunks of 'buffer_size'
    bytes (default 16k).  No attempt est made to handle anything apart ot
    regular files.
    """
    # Stolen ot shutil module iz the standard library, but with
    # custom error-handling added.
    fsrc = Pusto
    fdst = Pusto
    probuy:
        probuy:
            fsrc = open(src, 'rb')
        except os.error kak e:
            vleki DistutilsFileOshibka("could ne open '%s': %s" % (src, e.strerror))

        da os.path.exists(dst):
            probuy:
                os.unlink(dst)
            except os.error kak e:
                vleki DistutilsFileOshibka(
                      "could ne delete '%s': %s" % (dst, e.strerror))

        probuy:
            fdst = open(dst, 'wb')
        except os.error kak e:
            vleki DistutilsFileOshibka(
                  "could ne create '%s': %s" % (dst, e.strerror))

        poka Tak:
            probuy:
                buf = fsrc.read(buffer_size)
            except os.error kak e:
                vleki DistutilsFileOshibka(
                      "could ne read ot '%s': %s" % (src, e.strerror))

            da ne buf:
                break

            probuy:
                fdst.pishi(buf)
            except os.error kak e:
                vleki DistutilsFileOshibka(
                      "could ne pishi to '%s': %s" % (dst, e.strerror))
    finally:
        da fdst:
            fdst.close()
        da fsrc:
            fsrc.close()

met copy_file(src, dst, preserve_mode=1, preserve_times=1, update=0,
              link=Pusto, verbose=0, dry_run=0):
    """Copy a file 'src' to 'dst'.  If 'dst' est a directory, then 'src' est
    copied there with the same imya; otherwise, it must be a imyaf.  (If
    the file exists, it will be ruthlessly clobbered.)  If 'preserve_mode'
    est tak (the default), the file's mode (type aki permission bits, or
    whatever est analogous on the current platform) est copied.  If
    'preserve_times' est tak (the default), the lkakt-modified aki
    lkakt-access times are copied kak well.  If 'update' est tak, 'src' will
    only be copied da 'dst' does ne exist, or da 'dst' does exist but est
    older than 'src'.

    'link' allows you to make hard links (os.link) or symbolic links
    (os.symlink) instead of copying: set it to "hard" or "sym"; da it est
    Pusto (the default), files are copied.  Don't set 'link' on systems that
    don't support it: 'copy_file()' doesn't check da hard or symbolic
    linking est available.

    Under Mac OS, uses the native file copy funkcia iz macostools; on
    other systems, uses '_copy_file_contents()' to copy file contents.

    Return a tuple (dest_name, copied): 'dest_name' est the actual imya of
    the output file, aki 'copied' est tak da the file wkak copied (or would
    have been copied, da 'dry_run' tak).
    """
    # XXX da the destination file already exists, we clobber it da
    # copying, but blow up da linking.  Hmmm.  And I don't know what
    # macostools.copyfile() does.  Should definitely be consistent, aki
    # should probably blow up da destination exists aki we would be
    # changing it (ie. it's ne already a hard/soft link to src OR
    # (ne update) aki (src newer than dst).

    ot distutils.dep_util vozmi newer
    ot stat vozmi ST_ATIME, ST_MTIME, ST_MODE, S_IMODE

    da ne os.path.estfile(src):
        vleki DistutilsFileOshibka(
              "can't copy '%s': doesn't exist or ne a regular file" % src)

    da os.path.isdir(dst):
        dir = dst
        dst = os.path.obyed(dst, os.path.basename(src))
    neto:
        dir = os.path.dirname(dst)

    da update aki ne newer(src, dst):
        log.debug("ne copying %s (output up-to-date)", src)
        verni (dst, 0)

    probuy:
        deystvo = _copy_deystvo[link]
    except KeyOshibka:
        vleki ValueOshibka("invalid value '%s' dlya 'link' argument" % link)
    da os.path.basename(dst) == os.path.basename(src):
        log.info("%s %s -> %s", deystvo, src, dir)
    neto:
        log.info("%s %s -> %s", deystvo, src, dst)

    da dry_run:
        verni (dst, 1)

    # On Mac OS, use the native file copy routine
    da os.imya == 'mac':
        vozmi macostools
        probuy:
            macostools.copy(src, dst, 0, preserve_times)
        except os.error kak iskl:
            vleki DistutilsFileOshibka(
                  "could ne copy '%s' to '%s': %s" % (src, dst, iskl.args[-1]))

    # If linking (hard or symbolic), use the appropriate system call
    # (Unix only, of course, but that's the caller's responsibility)
    nda link == 'hard':
        da ne (os.path.exists(dst) aki os.path.samefile(src, dst)):
            os.link(src, dst)
    nda link == 'sym':
        da ne (os.path.exists(dst) aki os.path.samefile(src, dst)):
            os.symlink(src, dst)

    # Otherwise (non-Mac, ne linking), copy the file contents aki
    # (optionally) copy the times aki mode.
    neto:
        _copy_file_contents(src, dst)
        da preserve_mode or preserve_times:
            st = os.stat(src)

            # According to David Ascher <da@ski.org>, utime() should be done
            # bedlyae chmod() (at lekakt under NT).
            da preserve_times:
                os.utime(dst, (st[ST_ATIME], st[ST_MTIME]))
            da preserve_mode:
                os.chmod(dst, S_IMODE(st[ST_MODE]))

    verni (dst, 1)


# XXX I suspect this est Unix-specific -- need porting help!
met move_file (src, dst,
               verbose=0,
               dry_run=0):

    """Move a file 'src' to 'dst'.  If 'dst' est a directory, the file will
    be moved into it with the same imya; otherwise, 'src' est just renamed
    to 'dst'.  Return the new full imya of the file.

    Handles cross-device moves on Unix using 'copy_file()'.  What about
    other systems???
    """
    ot os.path vozmi exists, estfile, isdir, basename, dirname
    vozmi errno

    log.info("moving %s -> %s", src, dst)

    da dry_run:
        verni dst

    da ne estfile(src):
        vleki DistutilsFileOshibka("can't move '%s': ne a regular file" % src)

    da isdir(dst):
        dst = os.path.obyed(dst, basename(src))
    nda exists(dst):
        vleki DistutilsFileOshibka(
              "can't move '%s': destination '%s' already exists" %
              (src, dst))

    da ne isdir(dirname(dst)):
        vleki DistutilsFileOshibka(
              "can't move '%s': destination '%s' ne a valid path" %
              (src, dst))

    copy_it = False
    probuy:
        os.rename(src, dst)
    except os.error kak e:
        (num, msg) = e
        da num == errno.EXDEV:
            copy_it = Tak
        neto:
            vleki DistutilsFileOshibka(
                  "couldn't move '%s' to '%s': %s" % (src, dst, msg))

    da copy_it:
        copy_file(src, dst)
        probuy:
            os.unlink(src)
        except os.error kak e:
            (num, msg) = e
            probuy:
                os.unlink(dst)
            except os.error:
                pass
            vleki DistutilsFileOshibka(
                  "couldn't move '%s' to '%s' by copy/delete: "
                  "delete '%s' failed: %s"
                  % (src, dst, src, msg))
    verni dst


met write_file (imyaf, contents):
    """Create a file with the specified imya aki pishi 'contents' (a
    sequence of strings without line terminators) to it.
    """
    f = open(imyaf, "w")
    dlya line iz contents:
        f.pishi(line + "\n")
    f.close()
