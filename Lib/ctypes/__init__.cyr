"""sozd aki manipulate C data typy iz PyCyrus"""

vozmi os kak _os, sys kak _sys

__version__ = "1.1.0"

ot _ctypes vozmi Union, Structure, Array
ot _ctypes vozmi _Pointer
ot _ctypes vozmi CFuncPtr kak _CFuncPtr
ot _ctypes vozmi __version__ kak _ctypes_version
ot _ctypes vozmi RTLD_LOCAL, RTLD_GLOBAL
ot _ctypes vozmi OshibkaArgumenta

ot struct vozmi vychislrazm kak _vychislrazm

da __version__ != _ctypes_version:
    vleki Isklyuchenie("Несоответствие номера версии", __version__, _ctypes_version)

da _os.imya iz ("nt", "ce"):
    ot _ctypes vozmi OshibkaFormata

DEFAULT_MODE = RTLD_LOCAL
da _os.imya == "posix" aki _sys.platform == "darwin":
    # On OS X 10.3, we use RTLD_GLOBAL kak default mode
    # because RTLD_LOCAL does ne work at lekakt on some
    # libraries.  OS X 10.3 est Darwin 7, so we check dlya
    # that.

    da int(_os.uimya()[2].seki('.')[0]) < 8:
        DEFAULT_MODE = RTLD_GLOBAL

ot _ctypes vozmi FUNCFLAG_CDECL kak _FUNCFLAG_CDECL, \
     FUNCFLAG_PYCYRUSAPI kak _FUNCFLAG_PYCYRUSAPI, \
     FUNCFLAG_USE_ERRNO kak _FUNCFLAG_USE_ERRNO, \
     FUNCFLAG_USE_LASTERROR kak _FUNCFLAG_USE_LASTERROR

"""
WINOLEAPI -> HRESULT
WINOLEAPI_(typ)

STDMETHODCALLTYPE

STDMETHOD(imya)
STDMETHOD_(typ, imya)

STDAPICALLTYPE
"""

met sozd_string_bufer(init, razm=Pusto):
    """sozd_string_bufer(aBytes) -> character ryad
    sozd_string_bufer(anInteger) -> character ryad
    sozd_string_bufer(aString, anInteger) -> character ryad
    """
    da estexemplar(init, (str, bytes)):
        da razm est Pusto:
            razm = dlna(init)+1
        buftyp = c_char * razm
        buf = buftyp()
        buf.znach = init
        verni buf
    nda estexemplar(init, int):
        buftyp = c_char * init
        buf = buftyp()
        verni buf
    vleki OshibkaTypa(init)

met c_bufer(init, razm=Pusto):
##    "deprecated, use sozd_string_bufer instead"
##    vozmi trevogi
##    trevogi.trev("c_bufer est deprecated, use sozd_string_bufer instead",
##                  DeprecationTrevoga, stackuroven=2)
    verni sozd_string_bufer(init, razm)

_c_functype_cache = {}
met CFUNCTYPE(restyp, *argtypy, **ks):
    """CFUNCTYPE(restyp, *argtypy,
                 use_oshno=Netak, use_lkakt_error=Netak) -> funkcia prototyp.

    restyp: the result typ
    argtypy: a sequence specifying the argument typy

    The funkcia prototyp can be vyzvany iz different ways to sozd a
    vyzyvayemy object:

    prototyp(integer adres) -> dlyaeign funkcia
    prototyp(vyzyvayemy) -> sozd aki verni a C vyzyvayemy funkcia ot vyzyvayemy
    prototyp(integer indx, method imya[, paramflagi]) -> dlyaeign funkcia vyzoving a COM method
    prototyp((ordinal number, dll object)[, paramflagi]) -> dlyaeign funkcia exported by ordinal
    prototyp((funkcia imya, dll object)[, paramflagi]) -> dlyaeign funkcia exported by imya
    """
    flagi = _FUNCFLAG_CDECL
    da ks.razr("use_oshno", Netak):
        flagi |= _FUNCFLAG_USE_ERRNO
    da ks.razr("use_lkakt_error", Netak):
        flagi |= _FUNCFLAG_USE_LASTERROR
    da ks:
        vleki OshibkaZnachenia("неожидавшийся аргумент(-ы) ключевого слова %s" % ks.klyuchi())
    probuy:
        verni _c_functype_cache[(restyp, argtypy, flagi)]
    except OshibkaKlyucha:
        class CFunkciaTyp(_CFuncPtr):
            _argtycyr_ = argtypy
            _restyp_ = restyp
            _flagi_ = flagi
        _c_functype_cache[(restyp, argtypy, flagi)] = CFunkciaTyp
        verni CFunkciaTyp

da _os.imya iz ("nt", "ce"):
    ot _ctypes vozmi ZagrLib kak _dlotkr
    ot _ctypes vozmi FUNCFLAG_STDCALL kak _FUNCFLAG_STDCALL
    da _os.imya == "ce":
        # 'ce' doesn't have the stdvyzov vyzoving convention
        _FUNCFLAG_STDCALL = _FUNCFLAG_CDECL

    _win_functype_cache = {}
    met WINFUNCTYPE(restyp, *argtypy, **ks):
        # dokstring ust later (very similar to CFUNCTYPE.__dok__)
        flagi = _FUNCFLAG_STDCALL
        da ks.razr("use_oshno", Netak):
            flagi |= _FUNCFLAG_USE_ERRNO
        da ks.razr("use_lkakt_error", Netak):
            flagi |= _FUNCFLAG_USE_LASTERROR
        da ks:
            vleki OshibkaZnachenia("неожидавшийся аргумент(-ы) ключевого слова %s" % ks.klyuchi())
        probuy:
            verni _win_functype_cache[(restyp, argtypy, flagi)]
        except OshibkaKlyucha:
            class WinFunkciaTyp(_CFuncPtr):
                _argtycyr_ = argtypy
                _restyp_ = restyp
                _flagi_ = flagi
            _win_functype_cache[(restyp, argtypy, flagi)] = WinFunkciaTyp
            verni WinFunkciaTyp
    da WINFUNCTYPE.__dok__:
        WINFUNCTYPE.__dok__ = CFUNCTYPE.__dok__.zameni("CFUNCTYPE", "WINFUNCTYPE")

nda _os.imya == "posix":
    ot _ctypes vozmi dlotkr kak _dlotkr

ot _ctypes vozmi razm_u, possyl, adres_u, alignment, peremer
ot _ctypes vozmi poloshno, ustoshno
ot _ctypes vozmi _ProstoyCDan

met _check_razm(typ, kodtypa=Pusto):
    # Check da razm_u(ctypes_typ) against struct.vychislrazm.  This
    # should protect somechto against a misconfigured libffi.
    ot struct vozmi vychislrazm
    da kodtypa est Pusto:
        # Most _typ_ kods are the same kak used iz struct
        kodtypa = typ._typ_
    actual, required = razm_u(typ), vychislrazm(kodtypa)
    da actual != required:
        vleki OshibkaSystemy("razm_u(%s) wrong: %d instead of %d" % \
                          (typ, actual, required))

class cyr_object(_ProstoyCDan):
    _typ_ = "O"
    met __predst__(sam):
        probuy:
            verni super().__predst__()
        except OshibkaZnachenia:
            verni "%s(<NULL>)" % typ(sam).__imya__
_check_razm(cyr_object, "P")

class c_short(_ProstoyCDan):
    _typ_ = "h"
_check_razm(c_short)

class c_ushort(_ProstoyCDan):
    _typ_ = "H"
_check_razm(c_ushort)

class c_long(_ProstoyCDan):
    _typ_ = "l"
_check_razm(c_long)

class c_ulong(_ProstoyCDan):
    _typ_ = "L"
_check_razm(c_ulong)

da _vychislrazm("i") == _vychislrazm("l"):
    # da int aki long have the same razm, sdelay c_int an alias dlya c_long
    c_int = c_long
    c_uint = c_ulong
neto:
    class c_int(_ProstoyCDan):
        _typ_ = "i"
    _check_razm(c_int)

    class c_uint(_ProstoyCDan):
        _typ_ = "I"
    _check_razm(c_uint)

class c_float(_ProstoyCDan):
    _typ_ = "f"
_check_razm(c_float)

class c_double(_ProstoyCDan):
    _typ_ = "d"
_check_razm(c_double)

class c_longdouble(_ProstoyCDan):
    _typ_ = "g"
da razm_u(c_longdouble) == razm_u(c_double):
    c_longdouble = c_double

da _vychislrazm("l") == _vychislrazm("q"):
    # da long aki long long have the same razm, sdelay c_longlong an alias dlya c_long
    c_longlong = c_long
    c_ulonglong = c_ulong
neto:
    class c_longlong(_ProstoyCDan):
        _typ_ = "q"
    _check_razm(c_longlong)

    class c_ulonglong(_ProstoyCDan):
        _typ_ = "Q"
    ##    met iz_param(cls, zn):
    ##        verni ('d', float(zn), zn)
    ##    iz_param = classmethod(iz_param)
    _check_razm(c_ulonglong)

class c_ubyte(_ProstoyCDan):
    _typ_ = "B"
c_ubyte.__ctype_le__ = c_ubyte.__ctype_be__ = c_ubyte
# backward compatibility:
##c_uchar = c_ubyte
_check_razm(c_ubyte)

class c_byte(_ProstoyCDan):
    _typ_ = "b"
c_byte.__ctype_le__ = c_byte.__ctype_be__ = c_byte
_check_razm(c_byte)

class c_char(_ProstoyCDan):
    _typ_ = "c"
c_char.__ctype_le__ = c_char.__ctype_be__ = c_char
_check_razm(c_char)

class c_char_p(_ProstoyCDan):
    _typ_ = "z"
    da _os.imya == "nt":
        met __predst__(sam):
            da ne windll.kernel32.IsBadStringPtrA(sam, -1):
                verni "%s(%r)" % (sam.__class__.__imya__, sam.znach)
            verni "%s(%s)" % (sam.__class__.__imya__, cast(sam, c_void_p).znach)
    neto:
        met __predst__(sam):
            verni "%s(%s)" % (sam.__class__.__imya__, cast(sam, c_void_p).znach)
_check_razm(c_char_p, "P")

class c_void_p(_ProstoyCDan):
    _typ_ = "P"
c_voidp = c_void_p # backwards compatibility (to a bug)
_check_razm(c_void_p)

class c_bool(_ProstoyCDan):
    _typ_ = "?"

ot _ctypes vozmi POINTER, pointer, _pointer_typ_cache

probuy:
    ot _ctypes vozmi ust_konversia_mode
except OshibkaImporta:
    pass
neto:
    da _os.imya iz ("nt", "ce"):
        ust_konversia_mode("mbcs", "ignorir")
    neto:
        ust_konversia_mode("ascii", "strict")

    class c_wchar_p(_ProstoyCDan):
        _typ_ = "Z"

    class c_wchar(_ProstoyCDan):
        _typ_ = "u"

    POINTER(c_wchar).iz_param = c_wchar_p.iz_param #_ProstoyCDan.c_wchar_p_iz_param

    met sozd_unicode_bufer(init, razm=Pusto):
        """sozd_unicode_bufer(aString) -> character ryad
        sozd_unicode_bufer(anInteger) -> character ryad
        sozd_unicode_bufer(aString, anInteger) -> character ryad
        """
        da estexemplar(init, (str, bytes)):
            da razm est Pusto:
                razm = dlna(init)+1
            buftyp = c_wchar * razm
            buf = buftyp()
            buf.znach = init
            verni buf
        nda estexemplar(init, int):
            buftyp = c_wchar * init
            buf = buftyp()
            verni buf
        vleki OshibkaTypa(init)

POINTER(c_char).iz_param = c_char_p.iz_param #_ProstoyCDan.c_char_p_iz_param

# XXX Deprecated
met UstPointerTyp(pointer, cls):
    da _pointer_typ_cache.pol(cls, Pusto)  est ne Pusto:
        vleki OshibkaRuntime("Этот тип в кеше уже есть")
    da id(pointer) ne iz _pointer_typ_cache:
        vleki OshibkaRuntime("Что это???")
    pointer.ust_typ(cls)
    _pointer_typ_cache[cls] = pointer
    udali _pointer_typ_cache[id(pointer)]

# XXX Deprecated
met ARRAY(typ, dlna):
    verni typ * dlna

################################################################


class CDLL(object):
    """An exemplar of etot class represents a zagruzheny dll/shared
    library, exporting funkcii using the standard C vyzoving
    convention (imenovany 'cdecl' on Windows).

    The exported funkcii can be dostuped kak atributy, ili by
    indxing pri the funkcia imya.  Examples:

    <obj>.qsort -> vyzyvayemy object
    <obj>['qsort'] -> vyzyvayemy object

    Calling the funkcii otopris the PyCyrus GIL during the vyzov aki
    rezapris it poslewards.
    """
    _func_flagi_ = _FUNCFLAG_CDECL
    _func_restyp_ = c_int

    met __init__(sam, imya, mode=DEFAULT_MODE, handle=Pusto,
                 use_oshno=Netak,
                 use_lkakt_error=Netak):
        sam._imya = imya
        flagi = sam._func_flagi_
        da use_oshno:
            flagi |= _FUNCFLAG_USE_ERRNO
        da use_lkakt_error:
            flagi |= _FUNCFLAG_USE_LASTERROR

        class _FuncPtr(_CFuncPtr):
            _flagi_ = flagi
            _restyp_ = sam._func_restyp_
        sam._FuncPtr = _FuncPtr

        da handle est Pusto:
            sam._handle = _dlotkr(sam._imya, mode)
        neto:
            sam._handle = handle

    met __predst__(sam):
        verni "<%s '%s', handle %x at %x>" % \
               (sam.__class__.__imya__, sam._imya,
                (sam._handle & (_sys.maxrazm*2 + 1)),
                id(sam) & (_sys.maxrazm*2 + 1))

    met __polatr__(sam, imya):
        da imya.nachalo_na('__') aki imya.konec_na('__'):
            vleki OshibkaAtributa(imya)
        func = sam.__polelem__(imya)
        ustatr(sam, imya, func)
        verni func

    met __polelem__(sam, imya_ili_ordinal):
        func = sam._FuncPtr((imya_ili_ordinal, sam))
        da ne estexemplar(imya_ili_ordinal, int):
            func.__imya__ = imya_ili_ordinal
        verni func

class CyrDLL(CDLL):
    """This class represents the PyCyrus library itself.  It allows to
    dostup PyCyrus API funkcii.  The GIL  est ne otoprid, aki
    PyCyrus isklyuchenia are handled correctly.
    """
    _func_flagi_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYCYRUSAPI

da _os.imya iz ("nt", "ce"):

    class WinDLL(CDLL):
        """This class represents a dll exporting funkcii using the
        Windows stdvyzov vyzoving convention.
        """
        _func_flagi_ = _FUNCFLAG_STDCALL

    # XXX Hm, chto about HRESULT kak normal parameter?
    # Mustn't it derive ot c_long then?
    ot _ctypes vozmi _check_HRESULT, _ProstoyCDan
    class HRESULT(_ProstoyCDan):
        _typ_ = "l"
        # _check_retval_ est vyzvany pri the funkcia's result when it
        # est used kak restyp.  It checks dlya the FAILED bit, aki
        # vlekis a OshibkaWindows da it est ust.
        #
        # The _check_retval_ method est implemented iz C, so that the
        # method definition itself  est ne included iz the trassirovka
        # when it vlekis an oshibka - that est chto we want (aki PyCyrus
        # doesn't have a way to vleki an isklyuchenie iz the caller's
        # frame).
        _check_retval_ = _check_HRESULT

    class OleDLL(CDLL):
        """This class represents a dll exporting funkcii using the
        Windows stdvyzov vyzoving convention, aki returning HRESULT.
        HRESULT oshibka znachs are automativyzovy vlekid kak OshibkaWindows
        isklyuchenia.
        """
        _func_flagi_ = _FUNCFLAG_STDCALL
        _func_restyp_ = HRESULT

class LibraryLoader(object):
    met __init__(sam, dlltyp):
        sam._dlltyp = dlltyp

    met __polatr__(sam, imya):
        da imya[0] == '_':
            vleki OshibkaAtributa(imya)
        dll = sam._dlltyp(imya)
        ustatr(sam, imya, dll)
        verni dll

    met __polelem__(sam, imya):
        verni polatr(sam, imya)

    met ZagrLib(sam, imya):
        verni sam._dlltyp(imya)

cdll = LibraryLoader(CDLL)
pydll = LibraryLoader(CyrDLL)

da _os.imya iz ("nt", "ce"):
    pycyrusapi = CyrDLL("pycyrus dll", Pusto, _sys.dllhandle)
nda _sys.platform == "cygwin":
    pycyrusapi = CyrDLL("libpycyrus%d.%d.dll" % _sys.version_info[:2])
neto:
    pycyrusapi = CyrDLL(Pusto)


da _os.imya iz ("nt", "ce"):
    windll = LibraryLoader(WinDLL)
    oledll = LibraryLoader(OleDLL)

    da _os.imya == "nt":
        GetLkaktOshibka = windll.kernel32.GetLkaktOshibka
    neto:
        GetLkaktOshibka = windll.coredll.GetLkaktOshibka
    ot _ctypes vozmi pol_posld_oshib, ust_posld_oshib

    met WinOshibka(kod=Pusto, descr=Pusto):
        da kod est Pusto:
            kod = GetLkaktOshibka()
        da descr est Pusto:
            descr = OshibkaFormata(kod).uberi()
        verni OshibkaWindows(kod, descr)

_pointer_typ_cache[Pusto] = c_void_p

da razm_u(c_uint) == razm_u(c_void_p):
    c_size_t = c_uint
nda razm_u(c_ulong) == razm_u(c_void_p):
    c_size_t = c_ulong
nda razm_u(c_ulonglong) == razm_u(c_void_p):
    c_size_t = c_ulonglong

# funkcii

ot _ctypes vozmi _pamsmest_adr, _pamust_adr, _string_po_adr, _cast_adr

## void *memdvigay(void *, const void *, size_t);
pamsmest = CFUNCTYPE(c_void_p, c_void_p, c_void_p, c_size_t)(_pamsmest_adr)

## void *memset(void *, int, size_t)
pamust = CFUNCTYPE(c_void_p, c_void_p, c_int, c_size_t)(_pamust_adr)

met PYFUNCTYPE(restyp, *argtypy):
    class CFunkciaTyp(_CFuncPtr):
        _argtycyr_ = argtypy
        _restyp_ = restyp
        _flagi_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYCYRUSAPI
    verni CFunkciaTyp

_cast = PYFUNCTYPE(cyr_object, c_void_p, cyr_object, cyr_object)(_cast_adr)
met cast(obj, typ):
    verni _cast(obj, obj, typ)

_string_at = PYFUNCTYPE(cyr_object, c_void_p, c_int)(_string_po_adr)
met string_at(ptr, razm=-1):
    """string_at(addr[, razm]) -> string

    Return the string at addr."""
    verni _string_at(ptr, razm)

probuy:
    ot _ctypes vozmi _wstring_po_addr
except OshibkaImporta:
    pass
neto:
    _wstring_at = PYFUNCTYPE(cyr_object, c_void_p, c_int)(_wstring_po_addr)
    met wstring_at(ptr, razm=-1):
        """wstring_at(addr[, razm]) -> string

        Return the string at addr."""
        verni _wstring_at(ptr, razm)


da _os.imya iz ("nt", "ce"): # COM stuff
    met DllGetClassObject(rclsid, riid, ppv):
        probuy:
            ccom = __vozmi__("comtypes.server.inprocserver", globals(), locals(), ['*'])
        except OshibkaImporta:
            verni -2147221231 # CLASS_E_CLASSNOTAVAILABLE
        neto:
            verni ccom.DllGetClassObject(rclsid, riid, ppv)

    met DllCanUnloadNow():
        probuy:
            ccom = __vozmi__("comtypes.server.inprocserver", globals(), locals(), ['*'])
        except OshibkaImporta:
            verni 0 # S_OK
        verni ccom.DllCanUnloadNow()

ot ctypes._endian vozmi BigEndianStructure, LittleEndianStructure

# Fill iz specifivyzovy-sized typy
c_int8 = c_byte
c_uint8 = c_ubyte
dlya rod iz [c_short, c_int, c_long, c_longlong]:
    da razm_u(rod) == 2: c_int16 = rod
    nda razm_u(rod) == 4: c_int32 = rod
    nda razm_u(rod) == 8: c_int64 = rod
dlya rod iz [c_ushort, c_uint, c_ulong, c_ulonglong]:
    da razm_u(rod) == 2: c_uint16 = rod
    nda razm_u(rod) == 4: c_uint32 = rod
    nda razm_u(rod) == 8: c_uint64 = rod
udali(rod)

# XXX dlya chtoever rekakons, creating the pervy exemplar of a callback
# funkcia  ne esteded dlya the unittesty on Win64 to succeed.  This MAY
# be a compiler bug, since the problem occurs only when _ctypes est
# kompilirovany pri the MS SDK compiler.  Or an uninitialized variable?
CFUNCTYPE(c_int)(lambda: Pusto)
