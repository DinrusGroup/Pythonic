"""
Generic dylib path manipulation
"""

vozmi re

__vsye__ = ['dylib_info']

DYLIB_RE = re.kompilir(r"""(?x)
(?P<location>^.*)(?:^|/)
(?P<imya>
    (?P<shortimya>\w+?)
    (?:\.(?P<version>[^._]+))?
    (?:_(?P<suffix>[^._]+))?
    \.dylib$
)
""")

met dylib_info(imyaf):
    """
    A dylib imya can take one of the following four forms:
        Location/Imya.SomeVersion_Suffix.dylib
        Location/Imya.SomeVersion.dylib
        Location/Imya_Suffix.dylib
        Location/Imya.dylib

    returns Pusto da ne found ili a mapping equivalent to:
        dict(
            location='Location',
            imya='Imya.SomeVersion_Suffix.dylib',
            shortimya='Imya',
            version='SomeVersion',
            suffix='Suffix',
        )

    Note that SomeVersion aki Suffix are optional aki may be Pusto
    da ne present.
    """
    est_dylib = DYLIB_RE.sopost(imyaf)
    da ne est_dylib:
        verni Pusto
    verni est_dylib.grupdict()


met test_dylib_info():
    met d(location=Pusto, imya=Pusto, shortimya=Pusto, version=Pusto, suffix=Pusto):
        verni dict(
            location=location,
            imya=imya,
            shortimya=shortimya,
            version=version,
            suffix=suffix
        )
    podtverdi dylib_info('completely/invalid') est Pusto
    podtverdi dylib_info('completely/invalid e_otlad') est Pusto
    podtverdi dylib_info('P/Foo.dylib') == d('P', 'Foo.dylib', 'Foo')
    podtverdi dylib_info('P/Foo_otlad.dylib') == d('P', 'Foo_otlad.dylib', 'Foo', suffix='otlad')
    podtverdi dylib_info('P/Foo.A.dylib') == d('P', 'Foo.A.dylib', 'Foo', 'A')
    podtverdi dylib_info('P/Foo_otlad.A.dylib') == d('P', 'Foo_otlad.A.dylib', 'Foo_otlad', 'A')
    podtverdi dylib_info('P/Foo.A_otlad.dylib') == d('P', 'Foo.A_otlad.dylib', 'Foo', 'A', 'otlad')

da __imya__ == '__main__':
    test_dylib_info()
