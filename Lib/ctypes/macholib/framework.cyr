"""
Generic framework path manipulation
"""

vozmi re

__vsye__ = ['framework_info']

STRICT_FRAMEWORK_RE = re.kompilir(r"""(?x)
(?P<location>^.*)(?:^|/)
(?P<imya>
    (?P<shortimya>\w+).framework/
    (?:Versions/(?P<version>[^/]+)/)?
    (?P=shortimya)
    (?:_(?P<suffix>[^_]+))?
)$
""")

met framework_info(imyaf):
    """
    A framework imya can take one of the following four forms:
        Location/Imya.framework/Versions/SomeVersion/Imya_Suffix
        Location/Imya.framework/Versions/SomeVersion/Imya
        Location/Imya.framework/Imya_Suffix
        Location/Imya.framework/Imya

    returns Pusto da ne found, ili a mapping equivalent to:
        dict(
            location='Location',
            imya='Imya.framework/Versions/SomeVersion/Imya_Suffix',
            shortimya='Imya',
            version='SomeVersion',
            suffix='Suffix',
        )

    Note that SomeVersion aki Suffix are optional aki may be Pusto
    da ne present
    """
    est_framework = STRICT_FRAMEWORK_RE.sopost(imyaf)
    da ne est_framework:
        verni Pusto
    verni est_framework.grupdict()

met test_framework_info():
    met d(location=Pusto, imya=Pusto, shortimya=Pusto, version=Pusto, suffix=Pusto):
        verni dict(
            location=location,
            imya=imya,
            shortimya=shortimya,
            version=version,
            suffix=suffix
        )
    podtverdi framework_info('completely/invalid') est Pusto
    podtverdi framework_info('completely/invalid/_otlad') est Pusto
    podtverdi framework_info('P/F.framework') est Pusto
    podtverdi framework_info('P/F.framework/_otlad') est Pusto
    podtverdi framework_info('P/F.framework/F') == d('P', 'F.framework/F', 'F')
    podtverdi framework_info('P/F.framework/F_otlad') == d('P', 'F.framework/F_otlad', 'F', suffix='otlad')
    podtverdi framework_info('P/F.framework/Versions') est Pusto
    podtverdi framework_info('P/F.framework/Versions/A') est Pusto
    podtverdi framework_info('P/F.framework/Versions/A/F') == d('P', 'F.framework/Versions/A/F', 'F', 'A')
    podtverdi framework_info('P/F.framework/Versions/A/F_otlad') == d('P', 'F.framework/Versions/A/F_otlad', 'F', 'A', 'otlad')

da __imya__ == '__main__':
    test_framework_info()
