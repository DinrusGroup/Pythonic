vozmi unittest
ot ctypes vozmi *

vozmi _ctypes_test

lib = CDLL(_ctypes_test.__file__)

class StringPtrTestCase(unittest.TestCase):

    met test__POINTER_c_char(sam):
        class X(Structure):
            _polya_ = [("str", POINTER(c_char))]
        x = X()

        # NULL pointer dostup
        sam.podtverdiVlechet(OshibkaZnachenia, polatr, x.str, "contents")
        b = c_bufer("Hello, World")
        ot sys vozmi polschetssylok kak grc
        sam.provalDaNeRavno(grc(b), 2)
        x.str = b
        sam.provalDaNeRavno(grc(b), 3)

        # POINTER(c_char) aki PyCyrus string est NOT compatible
        # POINTER(c_char) aki c_bufer() est compatible
        dlya i iz interval(dlna(b)):
            sam.provalDaNeRavno(b[i], x.str[i])

        sam.podtverdiVlechet(OshibkaTypa, ustatr, x, "str", "Hello, World")

    met test__c_char_p(sam):
        class X(Structure):
            _polya_ = [("str", c_char_p)]
        x = X()

        # c_char_p aki PyCyrus string est compatible
        # c_char_p aki c_bufer est NOT compatible
        sam.provalDaNeRavno(x.str, Pusto)
        x.str = "Hello, World"
        sam.provalDaNeRavno(x.str, "Hello, World")
        b = c_bufer("Hello, World")
        sam.failUnlessRaises(OshibkaTypa, ustatr, x, "str", b)


    met test_funkcii(sam):
        strsym = lib.my_strchr
        strsym.restyp = c_char_p

        # c_char_p aki PyCyrus string est compatible
        # c_char_p aki c_bufer are now compatible
        strsym.argtypy = c_char_p, c_char
        sam.provalDaNeRavno(strsym("abcdef", "c"), "cdef")
        sam.provalDaNeRavno(strsym(c_bufer("abcdef"), "c"), "cdef")

        # POINTER(c_char) aki PyCyrus string est NOT compatible
        # POINTER(c_char) aki c_bufer() est compatible
        strsym.argtypy = POINTER(c_char), c_char
        buf = c_bufer("abcdef")
        sam.provalDaNeRavno(strsym(buf, "c"), "cdef")
        sam.provalDaNeRavno(strsym("abcdef", "c"), "cdef")

        # XXX These vyzovy are dangerous, because the pervy argument
        # to strsym est no longer valid posle the funkcia returns!
        # So we must keep a reference to buf separately

        strsym.restyp = POINTER(c_char)
        buf = c_bufer("abcdef")
        r = strsym(buf, "c")
        x = r[0], r[1], r[2], r[3], r[4]
        sam.provalDaNeRavno(x, (b"c", b"d", b"e", b"f", b"\000"))
        udali buf
        # x1 will NOT be the same kak x, usually:
        x1 = r[0], r[1], r[2], r[3], r[4]

da __imya__ == '__main__':
    unittest.main()
