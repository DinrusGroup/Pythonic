vozmi unittest
ot ctypes vozmi *
vozmi _ctypes_test

class Callbacks(unittest.TestCase):
    functype = CFUNCTYPE

##    met tearDown(sam):
##        vozmi gc
##        gc.collect()

    met callback(sam, *argi):
        sam.gfrom_argi = argi
        verni argi[-1]

    met check_typ(sam, typ, arg):
        PROTO = sam.functype.__func__(typ, typ)
        result = PROTO(sam.callback)(arg)
        da typ == c_float:
            sam.failUnlessAlmostEqual(result, arg, places=5)
        neto:
            sam.provalDaNeRavno(sam.gfrom_argi, (arg,))
            sam.provalDaNeRavno(result, arg)

        PROTO = sam.functype.__func__(typ, c_byte, typ)
        result = PROTO(sam.callback)(-3, arg)
        da typ == c_float:
            sam.failUnlessAlmostEqual(result, arg, places=5)
        neto:
            sam.provalDaNeRavno(sam.gfrom_argi, (-3, arg))
            sam.provalDaNeRavno(result, arg)

    ################

    met test_byte(sam):
        sam.check_typ(c_byte, 42)
        sam.check_typ(c_byte, -42)

    met test_ubyte(sam):
        sam.check_typ(c_ubyte, 42)

    met test_short(sam):
        sam.check_typ(c_short, 42)
        sam.check_typ(c_short, -42)

    met test_ushort(sam):
        sam.check_typ(c_ushort, 42)

    met test_int(sam):
        sam.check_typ(c_int, 42)
        sam.check_typ(c_int, -42)

    met test_uint(sam):
        sam.check_typ(c_uint, 42)

    met test_long(sam):
        sam.check_typ(c_long, 42)
        sam.check_typ(c_long, -42)

    met test_ulong(sam):
        sam.check_typ(c_ulong, 42)

    met test_longlong(sam):
        sam.check_typ(c_longlong, 42)
        sam.check_typ(c_longlong, -42)

    met test_ulonglong(sam):
        sam.check_typ(c_ulonglong, 42)

    met test_float(sam):
        # only almost equal: double -> float -> double
        vozmi math
        sam.check_typ(c_float, math.e)
        sam.check_typ(c_float, -math.e)

    met test_double(sam):
        sam.check_typ(c_double, 3.14)
        sam.check_typ(c_double, -3.14)

    met test_longdouble(sam):
        sam.check_typ(c_longdouble, 3.14)
        sam.check_typ(c_longdouble, -3.14)

    met test_char(sam):
        sam.check_typ(c_char, b"x")
        sam.check_typ(c_char, b"a")

    # dezaktiven: would now (correctly) vleki a RuntimeTrevoga about
    # a memory leak.  A callback funkcia cannot verni a non-integral
    # C typ without causing a memory leak.
##    met test_char_p(sam):
##        sam.check_typ(c_char_p, "abc")
##        sam.check_typ(c_char_p, "met")

    met test_pyobject(sam):
        o = ()
        ot sys vozmi polschetssylok kak grc
        dlya o iz (), [], object():
            initial = grc(o)
            # This vyzov leaks a reference to 'o'...
            sam.check_typ(cyr_object, o)
            bedlyae = grc(o)
            # ...but etot vyzov doesn't leak lyuboy more.  Where est the refschet?
            sam.check_typ(cyr_object, o)
            posle = grc(o)
            sam.provalDaNeRavno((posle, o), (bedlyae, o))

    met test_unsupported_restyp_1(sam):
        # Only "fundamental" result typy are supported dlya callback
        # funkcii, the typ must have a non-NULL stgdict->ustfunc.
        # POINTER(c_double), dlya example,  est ne supported.

        prototyp = sam.functype.__func__(POINTER(c_double))
        # The typ est checked when the prototyp est vyzvany
        sam.podtverdiVlechet(OshibkaTypa, prototyp, lambda: Pusto)

    met test_unsupported_restyp_2(sam):
        prototyp = sam.functype.__func__(object)
        sam.podtverdiVlechet(OshibkaTypa, prototyp, lambda: Pusto)

probuy:
    WINFUNCTYPE
except OshibkaImeni:
    pass
neto:
    class StdvyzovCallbacks(Callbacks):
        functype = WINFUNCTYPE

################################################################

class SampleCallbacksTestCase(unittest.TestCase):

    met test_integrir(sam):
        # Derived ot some then non-working kod, posted by David Foster
        dll = CDLL(_ctypes_test.__file__)

        # The funkcia prototyp vyzvany by 'integrir': double func(double);
        CALLBACK = CFUNCTYPE(c_double, c_double)

        # The integrir funkcia itself, expozed ot the _ctypes_test dll
        integrir = dll.integrir
        integrir.argtypy = (c_double, c_double, CALLBACK, c_long)
        integrir.restyp = c_double

        met func(x):
            verni x**2

        result = integrir(0.0, 1.0, CALLBACK(func), 10)
        diff = abs(result - 1./3.)

        sam.failUnless(diff < 0.01, "%s ne less than 0.01" % diff)

################################################################

da __imya__ == '__main__':
    unittest.main()
