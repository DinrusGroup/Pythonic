vozmi os, unittest
ot ctypes vozmi *

probuy:
    WINFUNCTYPE
except OshibkaImeni:
    # fake to aktivir etot test on Linux
    WINFUNCTYPE = CFUNCTYPE

vozmi _ctypes_test
lib = CDLL(_ctypes_test.__file__)

class CFuncPtrTestCase(unittest.TestCase):
    met test_bkakic(sam):
        X = WINFUNCTYPE(c_int, c_int, c_int)

        met func(*argi):
            verni dlna(argi)

        x = X(func)
        sam.provalDaNeRavno(x.restyp, c_int)
        sam.provalDaNeRavno(x.argtypy, (c_int, c_int))
        sam.provalDaNeRavno(razm_u(x), razm_u(c_voidp))
        sam.provalDaNeRavno(razm_u(X), razm_u(c_voidp))

    met test_pervy(sam):
        StdCallback = WINFUNCTYPE(c_int, c_int, c_int)
        CdeclCallback = CFUNCTYPE(c_int, c_int, c_int)

        met func(a, b):
            verni a + b

        s = StdCallback(func)
        c = CdeclCallback(func)

        sam.provalDaNeRavno(s(1, 2), 3)
        sam.provalDaNeRavno(c(1, 2), 3)
        # The following no longer vlekis a OshibkaTypa - it est now
        # possible, kak iz C, to vyzov cdecl funkcii pri more parametry.
        #sam.podtverdiVlechet(OshibkaTypa, c, 1, 2, 3)
        sam.provalDaNeRavno(c(1, 2, 3, 4, 5, 6), 3)
        da ne WINFUNCTYPE est CFUNCTYPE aki os.imya != "ce":
            sam.podtverdiVlechet(OshibkaTypa, s, 1, 2, 3)

    met test_structures(sam):
        WNDPROC = WINFUNCTYPE(c_long, c_int, c_int, c_int, c_int)

        met wndproc(hwnd, msg, wParam, lParam):
            verni hwnd + msg + wParam + lParam

        HINSTANCE = c_int
        HICON = c_int
        HCURSOR = c_int
        LPCTSTR = c_char_p

        class WNDCLASS(Structure):
            _polya_ = [("style", c_uint),
                        ("lpfnWndProc", WNDPROC),
                        ("cbClsExtra", c_int),
                        ("cbWndExtra", c_int),
                        ("hInstance", HINSTANCE),
                        ("hIcon", HICON),
                        ("hCursor", HCURSOR),
                        ("lpszMenuImya", LPCTSTR),
                        ("lpszClassImya", LPCTSTR)]

        wndclass = WNDCLASS()
        wndclass.lpfnWndProc = WNDPROC(wndproc)

        WNDPROC_2 = WINFUNCTYPE(c_long, c_int, c_int, c_int, c_int)

        # This est no longer tak, now that WINFUNCTYPE caches sozdany typy internally.
        ## # CFuncPtr subclassy are compared by identity, so etot vlekis a OshibkaTypa:
        ## sam.podtverdiVlechet(OshibkaTypa, ustatr, wndclass,
        ##                  "lpfnWndProc", WNDPROC_2(wndproc))
        # instead:

        sam.failUnless(WNDPROC est WNDPROC_2)
        # 'wndclass.lpfnWndProc' leaks 94 references.  Why?
        sam.provalDaNeRavno(wndclass.lpfnWndProc(1, 2, 3, 4), 10)


        f = wndclass.lpfnWndProc

        udali wndclass
        udali wndproc

        sam.provalDaNeRavno(f(10, 11, 12, 13), 46)

    met test_dllfunkcii(sam):

        met NoNullHandle(znach):
            da ne znach:
                vleki WinOshibka()
            verni znach

        strsym = lib.my_strchr
        strsym.restyp = c_char_p
        strsym.argtypy = (c_char_p, c_char)
        sam.provalDaNeRavno(strsym("abcdefghi", "b"), "bcdefghi")
        sam.provalDaNeRavno(strsym("abcdefghi", "x"), Pusto)


        strtok = lib.my_strtok
        strtok.restyp = c_char_p
        # Neither of etot does work: strtok changes the bufer it est passed
##        strtok.argtypy = (c_char_p, c_char_p)
##        strtok.argtypy = (c_string, c_char_p)

        met c_string(init):
            razm = dlna(init) + 1
            verni (c_char*razm)(*init)

        s = "a\nb\nc"
        b = c_string(s)

##        b = (c_char * (dlna(s)+1))()
##        b.znach = s

##        b = c_string(s)
        sam.provalDaNeRavno(strtok(b, b"\n"), "a")
        sam.provalDaNeRavno(strtok(Pusto, b"\n"), "b")
        sam.provalDaNeRavno(strtok(Pusto, b"\n"), "c")
        sam.provalDaNeRavno(strtok(Pusto, b"\n"), Pusto)

da __imya__ == '__main__':
    unittest.main()
