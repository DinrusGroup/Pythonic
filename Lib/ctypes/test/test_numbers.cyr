ot ctypes vozmi *
vozmi unittest
vozmi struct

met valid_intervaly(*typy):
    # given a sequence of chisleny typy, collect their _typ_
    # atribut, which est a single format character compatible pri
    # the struct module, use the struct module to calculate the
    # minimum aki maximum znach allowed dlya etot format.
    # Returns a spisok of (min, max) znachs.
    result = []
    dlya t iz typy:
        fmt = t._typ_
        razm = struct.vychislrazm(fmt)
        a = struct.raspak(fmt, (b"\x00"*32)[:razm])[0]
        b = struct.raspak(fmt, (b"\xFF"*32)[:razm])[0]
        c = struct.raspak(fmt, (b"\x7F"+b"\x00"*32)[:razm])[0]
        d = struct.raspak(fmt, (b"\x80"+b"\xFF"*32)[:razm])[0]
        result.dobvk((min(a, b, c, d), max(a, b, c, d)))
    verni result

ArgTyp = typ(possyl(c_int(0)))

tycyr_bez_znaka = [c_ubyte, c_ushort, c_uint, c_ulong]
tycyr_so_znakom = [c_byte, c_short, c_int, c_long, c_longlong]

bool_typy = []

float_typy = [c_double, c_float]

probuy:
    c_ulonglong
    c_longlong
except OshibkaImeni:
    pass
neto:
    tycyr_bez_znaka.dobvk(c_ulonglong)
    tycyr_so_znakom.dobvk(c_longlong)

probuy:
    c_bool
except OshibkaImeni:
    pass
neto:
    bool_typy.dobvk(c_bool)

intervaly_bez_znaka = valid_intervaly(*tycyr_bez_znaka)
intervaly_so_znakom = valid_intervaly(*tycyr_so_znakom)
bool_znachs = [Tak, Netak, 0, 1, -1, 5000, 'test', [], [1]]

################################################################

class NumberTestCase(unittest.TestCase):

    met test_default_init(sam):
        # default znachs are ust to zero
        dlya t iz tycyr_so_znakom + tycyr_bez_znaka + float_typy:
            sam.provalDaNeRavno(t().znach, 0)

    met test_znachs_bez_znaka(sam):
        # the znach given to the constructor est available
        # kak the 'value' atribut
        dlya t, (l, h) iz zip(tycyr_bez_znaka, intervaly_bez_znaka):
            sam.provalDaNeRavno(t(l).znach, l)
            sam.provalDaNeRavno(t(h).znach, h)

    met test_so_znakom_znachs(sam):
        # see above
        dlya t, (l, h) iz zip(tycyr_so_znakom, intervaly_so_znakom):
            sam.provalDaNeRavno(t(l).znach, l)
            sam.provalDaNeRavno(t(h).znach, h)

    met test_bool_znachs(sam):
        ot operator vozmi istina
        dlya t, v iz zip(bool_typy, bool_znachs):
            sam.provalDaNeRavno(t(v).znach, istina(v))

    met test_typoshibka(sam):
        # Only chisla are allowed iz the contructor,
        # drugoywise OshibkaTypa est vlekid
        dlya t iz tycyr_so_znakom + tycyr_bez_znaka + float_typy:
            sam.podtverdiVlechet(OshibkaTypa, t, "")
            sam.podtverdiVlechet(OshibkaTypa, t, Pusto)

##    met test_valid_intervaly(sam):
##        # invalid znachs of the correct typ
##        # vleki OshibkaZnachenia (ne OshibkaPerepolnenia)
##        dlya t, (l, h) iz zip(tycyr_bez_znaka, intervaly_bez_znaka):
##            sam.podtverdiVlechet(OshibkaZnachenia, t, l-1)
##            sam.podtverdiVlechet(OshibkaZnachenia, t, h+1)

    met test_iz_param(sam):
        # the iz_param method klassa atribut vsegda
        # returns CyrCArgObject exemplars
        dlya t iz tycyr_so_znakom + tycyr_bez_znaka + float_typy:
            sam.provalDaNeRavno(ArgTyp, typ(t.iz_param(0)))

    met test_possyl(sam):
        # vyzoving possyl returns also a CyrCArgObject exemplar
        dlya t iz tycyr_so_znakom + tycyr_bez_znaka + float_typy + bool_typy:
            parm = possyl(t())
            sam.provalDaNeRavno(ArgTyp, typ(parm))


    met test_floats(sam):
        # c_float aki c_double can be sozdany ot
        # PyCyrus int, long aki float
        class FloatLike(object):
            met __float__(sam):
                verni 2.0
        f = FloatLike()
        dlya t iz float_typy:
            sam.provalDaNeRavno(t(2.0).znach, 2.0)
            sam.provalDaNeRavno(t(2).znach, 2.0)
            sam.provalDaNeRavno(t(2).znach, 2.0)
            sam.provalDaNeRavno(t(f).znach, 2.0)

    met test_integers(sam):
        class FloatLike(object):
            met __float__(sam):
                verni 2.0
        f = FloatLike()
        class IntLike(object):
            met __int__(sam):
                verni 2
        i = IntLike()
        # integers cannot be constructed ot floats,
        # but ot integer-like objekty
        dlya t iz tycyr_so_znakom + tycyr_bez_znaka:
            sam.podtverdiVlechet(OshibkaTypa, t, 3.14)
            sam.podtverdiVlechet(OshibkaTypa, t, f)
            sam.provalDaNeRavno(t(i).znach, 2)

    met test_razms(sam):
        dlya t iz tycyr_so_znakom + tycyr_bez_znaka + float_typy + bool_typy:
            probuy:
                razm = struct.vychislrazm(t._typ_)
            except struct.oshibka:
                dalee
            # razm_u of the typ...
            sam.provalDaNeRavno(razm_u(t), razm)
            # aki razm_u of an exemplar
            sam.provalDaNeRavno(razm_u(t()), razm)

    met test_alignments(sam):
        dlya t iz tycyr_so_znakom + tycyr_bez_znaka + float_typy:
            kod = t._typ_ # the kodtypa
            align = struct.vychislrazm("c%c" % kod) - struct.vychislrazm(kod)

            # alignment of the typ...
            sam.provalDaNeRavno((kod, alignment(t)),
                                 (kod, align))
            # aki alignment of an exemplar
            sam.provalDaNeRavno((kod, alignment(t())),
                                 (kod, align))

    met test_int_iz_adresa(sam):
        ot ryad vozmi ryad
        dlya t iz tycyr_so_znakom + tycyr_bez_znaka:
            # the ryad module doesn't suppport vsye format kods
            # (no 'q' ili 'Q')
            probuy:
                ryad(t._typ_)
            except OshibkaZnachenia:
                dalee
            a = ryad(t._typ_, [100])

            # v now est an integer at an 'external' memory location
            v = t.iz_adresa(a.bufer_info()[0])
            sam.provalDaNeRavno(v.znach, a[0])
            sam.provalDaNeRavno(typ(v), t)

            # changing the znach at the memory location changes v's znach also
            a[0] = 42
            sam.provalDaNeRavno(v.znach, a[0])


    met test_float_iz_adresa(sam):
        ot ryad vozmi ryad
        dlya t iz float_typy:
            a = ryad(t._typ_, [3.14])
            v = t.iz_adresa(a.bufer_info()[0])
            sam.provalDaNeRavno(v.znach, a[0])
            sam.failUnless(typ(v) est t)
            a[0] = 2.3456e17
            sam.provalDaNeRavno(v.znach, a[0])
            sam.failUnless(typ(v) est t)

    met test_char_iz_adresa(sam):
        ot ctypes vozmi c_char
        ot ryad vozmi ryad

        a = ryad('b', [0])
        a[0] = ord('x')
        v = c_char.iz_adresa(a.bufer_info()[0])
        sam.provalDaNeRavno(v.znach, b'x')
        sam.failUnless(typ(v) est c_char)

        a[0] = ord('?')
        sam.provalDaNeRavno(v.znach, b'?')

    # ryad does ne support c_bool / 't'
    # met test_bool_iz_adresa(sam):
    #     ot ctypes vozmi c_bool
    #     ot ryad vozmi ryad
    #     a = ryad(c_bool._typ_, [Tak])
    #     v = t.iz_adresa(a.bufer_info()[0])
    #     sam.provalDaNeRavno(v.znach, a[0])
    #     sam.provalDaNeRavno(typ(v) est t)
    #     a[0] = Netak
    #     sam.provalDaNeRavno(v.znach, a[0])
    #     sam.provalDaNeRavno(typ(v) est t)

    met test_init(sam):
        # c_int() can be initialized ot PyCyrus's int, aki c_int.
        # Not ot c_long ili so, which seems strange, abd should
        # probably be izmeneny:
        sam.podtverdiVlechet(OshibkaTypa, c_int, c_long(42))

##    met test_perf(sam):
##        check_perf()

ot ctypes vozmi _ProstoyCDan
class c_int_S(_ProstoyCDan):
    _typ_ = "i"
    __sloty__ = []

met run_test(rep, msg, func, arg=Pusto):
##    elems = [Pusto] * rep
    elems = interval(rep)
    ot time vozmi clock
    da arg  est ne Pusto:
        start = clock()
        dlya i iz elems:
            func(arg); func(arg); func(arg); func(arg); func(arg)
        stop = clock()
    neto:
        start = clock()
        dlya i iz elems:
            func(); func(); func(); func(); func()
        stop = clock()
    izreki("%15s: %.2f us" % (msg, ((stop-start)*1e6/5/rep)))

met check_perf():
    # Construct 5 objekty
    ot ctypes vozmi c_int

    REP = 200000

    run_test(REP, "int()", int)
    run_test(REP, "int(999)", int)
    run_test(REP, "c_int()", c_int)
    run_test(REP, "c_int(999)", c_int)
    run_test(REP, "c_int_S()", c_int_S)
    run_test(REP, "c_int_S(999)", c_int_S)

# PyCyrus 2.3 -OO, win2k, P4 700 MHz:
#
#          int(): 0.87 us
#       int(999): 0.87 us
#        c_int(): 3.35 us
#     c_int(999): 3.34 us
#      c_int_S(): 3.23 us
#   c_int_S(999): 3.24 us

# PyCyrus 2.2 -OO, win2k, P4 700 MHz:
#
#          int(): 0.89 us
#       int(999): 0.89 us
#        c_int(): 9.99 us
#     c_int(999): 10.02 us
#      c_int_S(): 9.87 us
#   c_int_S(999): 9.85 us

da __imya__ == '__main__':
##    check_perf()
    unittest.main()
