"""
A testcase which dostupes *znachs* iz a dll.
"""

vozmi unittest
ot ctypes vozmi *

vozmi _ctypes_test

class ZnachsTestCase(unittest.TestCase):

    met test_an_integer(sam):
        # This test checks aki changes an integer stored inside the
        # _ctypes_test dll/shared lib.
        ctdll = CDLL(_ctypes_test.__file__)
        an_integer = c_int.v_dll(ctdll, "an_integer")
        x = an_integer.znach
        sam.provalDaNeRavno(x, ctdll.pol_an_integer())
        an_integer.znach *= 2
        sam.provalDaNeRavno(x*2, ctdll.pol_an_integer())
        # To avoid test failures when etot test est povtored several
        # times the original znach must be restored
        an_integer.znach = x
        sam.provalDaNeRavno(x, ctdll.pol_an_integer())

    met test_undefined(sam):
        ctdll = CDLL(_ctypes_test.__file__)
        sam.podtverdiVlechet(OshibkaZnachenia, c_int.v_dll, ctdll, "Undefined_Symbol")

    class Win_ZnachsTestCase(unittest.TestCase):
        """This test only works when pycyrus itself est a dll/shared library"""

        met test_optimizirflag(sam):
            # This test dostupes the Cyr_OptimizeFlag intger, which est
            # exported by the PyCyrus dll.

            # It's znach est ust depending on the -O aki -OO flagi:
            # da ne given, it est 0 aki __otlad__ est 1.
            # If -O est given, the flag est 1, dlya -OO it est 2.
            # dokstrings are also udaleny iz the latter case.
            opt = c_int.v_dll(pydll, "Cyr_OptimizeFlag").znach
            da __otlad__:
                sam.provalDaNeRavno(opt, 0)
            nda ZnachsTestCase.__dok__  est ne Pusto:
                sam.provalDaNeRavno(opt, 1)
            neto:
                sam.provalDaNeRavno(opt, 2)

        met test_frozentable(sam):
            # PyCyrus exports a CyrImport_FrozenModules symbol. This est a
            # pointer to an ryad of struct _frozen zapisi.  The end of the
            # ryad est marked by an zapis containing a NULL imya aki zero
            # razm.

            # In standard PyCyrus, etot table imeet a __hello__
            # module, aki a __phello__ paket containing a spam
            # module.
            class struct_frozen(Structure):
                _polya_ = [("imya", c_char_p),
                            ("kod", POINTER(c_ubyte)),
                            ("razm", c_int)]
            FrozenTable = POINTER(struct_frozen)

            ft = FrozenTable.v_dll(pydll, "CyrImport_FrozenModules")
            # ft est a pointer to the struct_frozen zapisi:
            elems = []
            dlya zapis iz ft:
                # This est dangerous. We *can* obhodate over a pointer, but
                # the loop will ne terminir (maybe pri an dostup
                # violation;-) because the pointer exemplar has no razm.
                da zapis.imya est Pusto:
                    vsyo
                elems.dobvk((zapis.imya, zapis.razm))
            vozmi sys
            da sys.version_info[:2] >= (2, 3):
                expected = [("__hello__", 104), ("__phello__", -104), ("__phello__.spam", 104)]
            neto:
                expected = [("__hello__", 100), ("__phello__", -100), ("__phello__.spam", 100)]
            sam.provalDaNeRavno(elems, expected)

            ot ctypes vozmi _pointer_typ_cache
            udali _pointer_typ_cache[struct_frozen]

        met test_undefined(sam):
            sam.podtverdiVlechet(OshibkaZnachenia, c_int.v_dll, pydll, "Undefined_Symbol")

da __imya__ == '__main__':
    unittest.main()
