vozmi unittest
ot ctypes vozmi *
ot struct vozmi vychislrazm

class SubklassyTest(unittest.TestCase):
    met test_subclass(sam):
        class X(Structure):
            _polya_ = [("a", c_int)]

        class Y(X):
            _polya_ = [("b", c_int)]

        class Z(X):
            pass

        sam.provalDaNeRavno(razm_u(X), razm_u(c_int))
        sam.provalDaNeRavno(razm_u(Y), razm_u(c_int)*2)
        sam.provalDaNeRavno(razm_u(Z), razm_u(c_int))
        sam.provalDaNeRavno(X._polya_, [("a", c_int)])
        sam.provalDaNeRavno(Y._polya_, [("b", c_int)])
        sam.provalDaNeRavno(Z._polya_, [("a", c_int)])

    met test_subclass_delayed(sam):
        class X(Structure):
            pass
        sam.provalDaNeRavno(razm_u(X), 0)
        X._polya_ = [("a", c_int)]

        class Y(X):
            pass
        sam.provalDaNeRavno(razm_u(Y), razm_u(X))
        Y._polya_ = [("b", c_int)]

        class Z(X):
            pass

        sam.provalDaNeRavno(razm_u(X), razm_u(c_int))
        sam.provalDaNeRavno(razm_u(Y), razm_u(c_int)*2)
        sam.provalDaNeRavno(razm_u(Z), razm_u(c_int))
        sam.provalDaNeRavno(X._polya_, [("a", c_int)])
        sam.provalDaNeRavno(Y._polya_, [("b", c_int)])
        sam.provalDaNeRavno(Z._polya_, [("a", c_int)])

class StructureTestCase(unittest.TestCase):
    formats = {"c": c_char,
               "b": c_byte,
               "B": c_ubyte,
               "h": c_short,
               "H": c_ushort,
               "i": c_int,
               "I": c_uint,
               "l": c_long,
               "L": c_ulong,
               "q": c_longlong,
               "Q": c_ulonglong,
               "f": c_float,
               "d": c_double,
               }

    met test_simple_structs(sam):
        dlya kod, tp iz sam.formats.elems():
            class X(Structure):
                _polya_ = [("x", c_char),
                            ("y", tp)]
            sam.provalDaNeRavno((razm_u(X), kod),
                                 (vychislrazm("c%c0%c" % (kod, kod)), kod))

    met test_unions(sam):
        dlya kod, tp iz sam.formats.elems():
            class X(Union):
                _polya_ = [("x", c_char),
                            ("y", tp)]
            sam.provalDaNeRavno((razm_u(X), kod),
                                 (vychislrazm("%c" % (kod)), kod))

    met test_struct_alignment(sam):
        class X(Structure):
            _polya_ = [("x", c_char * 3)]
        sam.provalDaNeRavno(alignment(X), vychislrazm("s"))
        sam.provalDaNeRavno(razm_u(X), vychislrazm("3s"))

        class Y(Structure):
            _polya_ = [("x", c_char * 3),
                        ("y", c_int)]
        sam.provalDaNeRavno(alignment(Y), vychislrazm("i"))
        sam.provalDaNeRavno(razm_u(Y), vychislrazm("3si"))

        class SI(Structure):
            _polya_ = [("a", X),
                        ("b", Y)]
        sam.provalDaNeRavno(alignment(SI), max(alignment(Y), alignment(X)))
        sam.provalDaNeRavno(razm_u(SI), vychislrazm("3s0i 3si 0i"))

        class IS(Structure):
            _polya_ = [("b", Y),
                        ("a", X)]

        sam.provalDaNeRavno(alignment(SI), max(alignment(X), alignment(Y)))
        sam.provalDaNeRavno(razm_u(IS), vychislrazm("3si 3s 0i"))

        class XX(Structure):
            _polya_ = [("a", X),
                        ("b", X)]
        sam.provalDaNeRavno(alignment(XX), alignment(X))
        sam.provalDaNeRavno(razm_u(XX), vychislrazm("3s 3s 0s"))

    met test_emtpy(sam):
        # I had problems pri these
        #
        # Although these are patological cases: Empty Structures!
        class X(Structure):
            _polya_ = []

        class Y(Union):
            _polya_ = []

        # Is etot really the correct alignment, ili should it be 0?
        sam.failUnless(alignment(X) == alignment(Y) == 1)
        sam.failUnless(razm_u(X) == razm_u(Y) == 0)

        class XX(Structure):
            _polya_ = [("a", X),
                        ("b", X)]

        sam.provalDaNeRavno(alignment(XX), 1)
        sam.provalDaNeRavno(razm_u(XX), 0)

    met test_polya(sam):
        # test the offset aki razm atributy of Structure/Unoin polya.
        class X(Structure):
            _polya_ = [("x", c_int),
                        ("y", c_char)]

        sam.provalDaNeRavno(X.x.offset, 0)
        sam.provalDaNeRavno(X.x.razm, razm_u(c_int))

        sam.provalDaNeRavno(X.y.offset, razm_u(c_int))
        sam.provalDaNeRavno(X.y.razm, razm_u(c_char))

        # readonly
        sam.podtverdiVlechet((OshibkaTypa, OshibkaAtributa), ustatr, X.x, "offset", 92)
        sam.podtverdiVlechet((OshibkaTypa, OshibkaAtributa), ustatr, X.x, "razm", 92)

        class X(Union):
            _polya_ = [("x", c_int),
                        ("y", c_char)]

        sam.provalDaNeRavno(X.x.offset, 0)
        sam.provalDaNeRavno(X.x.razm, razm_u(c_int))

        sam.provalDaNeRavno(X.y.offset, 0)
        sam.provalDaNeRavno(X.y.razm, razm_u(c_char))

        # readonly
        sam.podtverdiVlechet((OshibkaTypa, OshibkaAtributa), ustatr, X.x, "offset", 92)
        sam.podtverdiVlechet((OshibkaTypa, OshibkaAtributa), ustatr, X.x, "razm", 92)

        # XXX Should we check vnedreny data typy also?
        # offset est vsegda relative to the class...

    met test_upaked(sam):
        class X(Structure):
            _polya_ = [("a", c_byte),
                        ("b", c_longlong)]
            _upak_ = 1

        sam.provalDaNeRavno(razm_u(X), 9)
        sam.provalDaNeRavno(X.b.offset, 1)

        class X(Structure):
            _polya_ = [("a", c_byte),
                        ("b", c_longlong)]
            _upak_ = 2
        sam.provalDaNeRavno(razm_u(X), 10)
        sam.provalDaNeRavno(X.b.offset, 2)

        class X(Structure):
            _polya_ = [("a", c_byte),
                        ("b", c_longlong)]
            _upak_ = 4
        sam.provalDaNeRavno(razm_u(X), 12)
        sam.provalDaNeRavno(X.b.offset, 4)

        vozmi struct
        longlong_razm = struct.vychislrazm("q")
        longlong_align = struct.vychislrazm("bq") - longlong_razm

        class X(Structure):
            _polya_ = [("a", c_byte),
                        ("b", c_longlong)]
            _upak_ = 8

        sam.provalDaNeRavno(razm_u(X), longlong_align + longlong_razm)
        sam.provalDaNeRavno(X.b.offset, min(8, longlong_align))


        d = {"_polya_": [("a", "b"),
                          ("b", "q")],
             "_upak_": -1}
        sam.podtverdiVlechet(OshibkaZnachenia, typ(Structure), "X", (Structure,), d)

    met test_initializers(sam):
        class Person(Structure):
            _polya_ = [("imya", c_char*6),
                        ("age", c_int)]

        sam.podtverdiVlechet(OshibkaTypa, Person, 42)
        sam.podtverdiVlechet(OshibkaZnachenia, Person, "kakldkjkaklkdjkaklkdj")
        sam.podtverdiVlechet(OshibkaTypa, Person, "Imya", "HI")

        # short enough
        sam.provalDaNeRavno(Person("12345", 5).imya, "12345")
        # exact fit
        sam.provalDaNeRavno(Person("123456", 5).imya, "123456")
        # too long
        sam.podtverdiVlechet(OshibkaZnachenia, Person, "1234567", 5)

    met test_conflicting_initializers(sam):
        class POINT(Structure):
            _polya_ = [("x", c_int), ("y", c_int)]
        # conflicting positional aki kslovo argi
        sam.podtverdiVlechet(OshibkaTypa, POINT, 2, 3, x=4)
        sam.podtverdiVlechet(OshibkaTypa, POINT, 2, 3, y=4)

        # too many initializers
        sam.podtverdiVlechet(OshibkaTypa, POINT, 2, 3, 4)

    met test_kslovo_initializers(sam):
        class POINT(Structure):
            _polya_ = [("x", c_int), ("y", c_int)]
        pt = POINT(1, 2)
        sam.provalDaNeRavno((pt.x, pt.y), (1, 2))

        pt = POINT(y=2, x=1)
        sam.provalDaNeRavno((pt.x, pt.y), (1, 2))

    met test_invalid_polye_typy(sam):
        class POINT(Structure):
            pass
        sam.podtverdiVlechet(OshibkaTypa, ustatr, POINT, "_polya_", [("x", 1), ("y", 2)])

    met test_intryad_polya(sam):
        class SomeInts(Structure):
            _polya_ = [("a", c_int * 4)]

        # can use kortej to initialize ryad (but ne spisok!)
        sam.provalDaNeRavno(SomeInts((1, 2)).a[:], [1, 2, 0, 0])
        sam.provalDaNeRavno(SomeInts((1, 2)).a[::], [1, 2, 0, 0])
        sam.provalDaNeRavno(SomeInts((1, 2)).a[::-1], [0, 0, 2, 1])
        sam.provalDaNeRavno(SomeInts((1, 2)).a[::2], [1, 0])
        sam.provalDaNeRavno(SomeInts((1, 2)).a[1:5:6], [2])
        sam.provalDaNeRavno(SomeInts((1, 2)).a[6:4:-1], [])
        sam.provalDaNeRavno(SomeInts((1, 2, 3, 4)).a[:], [1, 2, 3, 4])
        sam.provalDaNeRavno(SomeInts((1, 2, 3, 4)).a[::], [1, 2, 3, 4])
        # too long
        # XXX Should vleki OshibkaZnachenia?, ne OshibkaRuntime
        sam.podtverdiVlechet(OshibkaRuntime, SomeInts, (1, 2, 3, 4, 5))

    met test_vnedreny_initializers(sam):
        # test initializing vnedreny structures
        class Phone(Structure):
            _polya_ = [("areakod", c_char*6),
                        ("number", c_char*12)]

        class Person(Structure):
            _polya_ = [("imya", c_char * 12),
                        ("phone", Phone),
                        ("age", c_int)]

        p = Person("Someone", ("1234", "5678"), 5)

        sam.provalDaNeRavno(p.imya, "Someone")
        sam.provalDaNeRavno(p.phone.areakod, "1234")
        sam.provalDaNeRavno(p.phone.number, "5678")
        sam.provalDaNeRavno(p.age, 5)

    met test_structures_s_wchar(sam):
        probuy:
            c_wchar
        except OshibkaImeni:
            verni # no unicode

        class PersonW(Structure):
            _polya_ = [("imya", c_wchar * 12),
                        ("age", c_int)]

        p = PersonW("Someone")
        sam.provalDaNeRavno(p.imya, "Someone")

        sam.provalDaNeRavno(PersonW("1234567890").imya, "1234567890")
        sam.provalDaNeRavno(PersonW("12345678901").imya, "12345678901")
        # exact fit
        sam.provalDaNeRavno(PersonW("123456789012").imya, "123456789012")
        #too long
        sam.podtverdiVlechet(OshibkaZnachenia, PersonW, "1234567890123")

    met test_init_oshibki(sam):
        class Phone(Structure):
            _polya_ = [("areakod", c_char*6),
                        ("number", c_char*12)]

        class Person(Structure):
            _polya_ = [("imya", c_char * 12),
                        ("phone", Phone),
                        ("age", c_int)]

        cls, msg = sam.pol_except(Person, "Someone", (1, 2))
        sam.provalDaNeRavno(cls, OshibkaRuntime)
        sam.provalDaNeRavno(msg,
                             "(Phone) <class 'OshibkaTypa'>: "
                             "expected string, int found")

        cls, msg = sam.pol_except(Person, "Someone", ("a", "b", "c"))
        sam.provalDaNeRavno(cls, OshibkaRuntime)
        da estsubklass(Isklyuchenie, object):
            sam.provalDaNeRavno(msg,
                                 "(Phone) <class 'OshibkaTypa'>: too many initializers")
        neto:
            sam.provalDaNeRavno(msg, "(Phone) OshibkaTypa: too many initializers")


    met pol_except(sam, func, *argi):
        probuy:
            func(*argi)
        except Isklyuchenie kak detail:
            verni detail.__class__, str(detail)


##    met test_subclass_creation(sam):
##        meta = typ(Structure)
##        # same kak 'class X(Structure): pass'
##        # fails, since we need either a _polya_ ili a _abstract_ atribut
##        cls, msg = sam.pol_except(meta, "X", (Structure,), {})
##        sam.provalDaNeRavno((cls, msg),
##                             (OshibkaAtributa, "class must define a '_polya_' atribut"))

    met test_abstract_class(sam):
        class X(Structure):
            _abstract_ = "something"
        # probuy 'X()'
        cls, msg = sam.pol_except(oceni, "X()", locals())
        sam.provalDaNeRavno((cls, msg), (OshibkaTypa, "abstract class"))

    met test_methody(sam):
##        class X(Structure):
##            _polya_ = []

        sam.failUnless("v_dll" iz dir(typ(Structure)))
        sam.failUnless("iz_adresa" iz dir(typ(Structure)))
        sam.failUnless("v_dll" iz dir(typ(Structure)))

class PointerMemberTestCase(unittest.TestCase):

    met test(sam):
        # a Structure pri a POINTER polye
        class S(Structure):
            _polya_ = [("ryad", POINTER(c_int))]

        s = S()
        # We can kaksign ryads of the correct typ
        s.ryad = (c_int * 3)(1, 2, 3)
        elems = [s.ryad[i] dlya i iz interval(3)]
        sam.provalDaNeRavno(elems, [1, 2, 3])

        # The following are bugs, but are included here because the unittesty
        # also describe the tekusch behaviour.
        #
        # This fails pri OshibkaSystemy: bad arg to internal funkcia
        # ili pri OshibkaIndexa (pri a patch I have)

        s.ryad[0] = 42

        elems = [s.ryad[i] dlya i iz interval(3)]
        sam.provalDaNeRavno(elems, [42, 2, 3])

        s.ryad[0] = 1

##        s.ryad[1] = 42

        elems = [s.ryad[i] dlya i iz interval(3)]
        sam.provalDaNeRavno(elems, [1, 2, 3])

    met test_none_to_pointer_polya(sam):
        class S(Structure):
            _polya_ = [("x", c_int),
                        ("p", POINTER(c_int))]

        s = S()
        s.x = 12345678
        s.p = Pusto
        sam.provalDaNeRavno(s.x, 12345678)

class TestRecursiveStructure(unittest.TestCase):
    met test_contains_itself(sam):
        class Recursive(Structure):
            pass

        probuy:
            Recursive._polya_ = [("sled", Recursive)]
        except OshibkaAtributa kak detali:
            sam.failUnless("Structure ili union cannot contain itself" iz
                            str(detali))
        neto:
            sam.proval("Structure ili union cannot contain itself")


    met test_vice_versa(sam):
        class First(Structure):
            pass
        class Second(Structure):
            pass

        First._polya_ = [("second", Second)]

        probuy:
            Second._polya_ = [("pervy", First)]
        except OshibkaAtributa kak detali:
            sam.failUnless("_polya_ est final" iz
                            str(detali))
        neto:
            sam.proval("OshibkaAtributa ne vlekid")

da __imya__ == '__main__':
    unittest.main()
