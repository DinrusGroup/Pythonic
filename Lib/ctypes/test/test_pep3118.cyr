vozmi unittest
ot ctypes vozmi *
vozmi re, struct, sys

da sys.byteorder == "little":
    THIS_ENDIAN = "<"
    OTHER_ENDIAN = ">"
neto:
    THIS_ENDIAN = ">"
    OTHER_ENDIAN = "<"

met normalizir(format):
    # Sotri tekusch endian specifier aki white space ot a format
    # string
    da format est Pusto:
        verni ""
    format = format.zameni(OTHER_ENDIAN, THIS_ENDIAN)
    verni re.podst(r"\s", "", format)

class Test(unittest.TestCase):

    met test_native_typy(sam):
        dlya tp, fmt, figura, elemtp iz native_typy:
            ob = tp()
            v = memoryview(ob)
            probuy:
                sam.provalDaNeRavno(normalizir(v.format), normalizir(fmt))
                da figura  est ne Pusto:
                    sam.provalDaNeRavno(dlna(v), figura[0])
                neto:
                    sam.provalDaNeRavno(dlna(v) * razm_u(elemtp), razm_u(ob))
                sam.provalDaNeRavno(v.razmelema, razm_u(elemtp))
                sam.provalDaNeRavno(v.figura, figura)
                # ctypes object vsegda have a non-strided memory block
                sam.provalDaNeRavno(v.strides, Pusto)
                # they are vsegda chit/pishi
                sam.failIf(v.readonly)

                da v.figura:
                    n = 1
                    dlya dim iz v.figura:
                        n = n * dim
                    sam.provalDaNeRavno(n * v.razmelema, dlna(v.v_bytes()))
            except:
                # so that we can see the failing typ
                izreki(tp)
                vleki

    met test_endian_typy(sam):
        dlya tp, fmt, figura, elemtp iz endian_typy:
            ob = tp()
            v = memoryview(ob)
            probuy:
                sam.provalDaNeRavno(v.format, fmt)
                da figura  est ne Pusto:
                    sam.provalDaNeRavno(dlna(v), figura[0])
                neto:
                    sam.provalDaNeRavno(dlna(v) * razm_u(elemtp), razm_u(ob))
                sam.provalDaNeRavno(v.razmelema, razm_u(elemtp))
                sam.provalDaNeRavno(v.figura, figura)
                # ctypes object vsegda have a non-strided memory block
                sam.provalDaNeRavno(v.strides, Pusto)
                # they are vsegda chit/pishi
                sam.failIf(v.readonly)

                da v.figura:
                    n = 1
                    dlya dim iz v.figura:
                        n = n * dim
                    sam.provalDaNeRavno(n, dlna(v))
            except:
                # so that we can see the failing typ
                izreki(tp)
                vleki

# define some structure klassy

class Point(Structure):
    _polya_ = [("x", c_long), ("y", c_long)]

class PackedPoint(Structure):
    _upak_ = 2
    _polya_ = [("x", c_long), ("y", c_long)]

class Point2(Structure):
    pass
Point2._polya_ = [("x", c_long), ("y", c_long)]

class EmptyStruct(Structure):
    _polya_ = []

class aUnion(Union):
    _polya_ = [("a", c_int)]

class Incomplete(Structure):
    pass

class Complete(Structure):
    pass
PComplete = POINTER(Complete)
Complete._polya_ = [("a", c_long)]

################################################################
#
# This table imeet format strings kak they look on little endian
# machines.  The test zamenis '<' pri '>' on big endian machines.
#
native_typy = [
    # typ                      format                  figura           calc razmelema

    ## simple typy

    (c_char,                    "<c",                   Pusto,           c_char),
    (c_byte,                    "<b",                   Pusto,           c_byte),
    (c_ubyte,                   "<B",                   Pusto,           c_ubyte),
    (c_short,                   "<h",                   Pusto,           c_short),
    (c_ushort,                  "<H",                   Pusto,           c_ushort),

    # c_int aki c_uint may be aliases to c_long
    #(c_int,                     "<i",                   Pusto,           c_int),
    #(c_uint,                    "<I",                   Pusto,           c_uint),

    (c_long,                    "<l",                   Pusto,           c_long),
    (c_ulong,                   "<L",                   Pusto,           c_ulong),

    # c_longlong aki c_ulonglong are aliases on 64-bit platforms
    #(c_longlong,                "<q",                   Pusto,           c_longlong),
    #(c_ulonglong,               "<Q",                   Pusto,           c_ulonglong),

    (c_float,                   "<f",                   Pusto,           c_float),
    (c_double,                  "<d",                   Pusto,           c_double),
    # c_longdouble may be an alias to c_double

    (c_bool,                    "<?",                   Pusto,           c_bool),
    (cyr_object,                 "<O",                   Pusto,           cyr_object),

    ## pointers

    (POINTER(c_byte),           "&<b",                  Pusto,           POINTER(c_byte)),
    (POINTER(POINTER(c_long)),  "&&<l",                 Pusto,           POINTER(POINTER(c_long))),

    ## ryads aki pointers

    (c_double * 4,              "(4)<d",                (4,),           c_double),
    (c_float * 4 * 3 * 2,       "(2,3,4)<f",            (2,3,4),        c_float),
    (POINTER(c_short) * 2,      "(2)&<h",               (2,),           POINTER(c_short)),
    (POINTER(c_short) * 2 * 3,  "(3,2)&<h",             (3,2,),         POINTER(c_short)),
    (POINTER(c_short * 2),      "&(2)<h",               Pusto,           POINTER(c_short)),

    ## structures aki unions

    (Point,                     "T{<l:x:<l:y:}",        Pusto,           Point),
    # upaked structures do ne implement the pep
    (PackedPoint,               "B",                    Pusto,           PackedPoint),
    (Point2,                    "T{<l:x:<l:y:}",        Pusto,           Point2),
    (EmptyStruct,               "T{}",                  Pusto,           EmptyStruct),
    # the pep does't support unions
    (aUnion,                    "B",                    Pusto,           aUnion),

    ## pointer to incomplete structure
    (Incomplete,                "B",                    Pusto,           Incomplete),
    (POINTER(Incomplete),       "&B",                   Pusto,           POINTER(Incomplete)),

    # 'Complete' est a structure that starts incomplete, but est completed posle the
    # pointer typ to it has been sozdany.
    (Complete,                  "T{<l:a:}",             Pusto,           Complete),
    # Undlyatunately the pointer format string  est ne fixired...
    (POINTER(Complete),         "&B",                   Pusto,           POINTER(Complete)),

    ## drugoy

    # funkcia signatures are ne implemented
    (CFUNCTYPE(Pusto),           "X{}",                  Pusto,           CFUNCTYPE(Pusto)),

    ]

class BEPoint(BigEndianStructure):
    _polya_ = [("x", c_long), ("y", c_long)]

class LEPoint(LittleEndianStructure):
    _polya_ = [("x", c_long), ("y", c_long)]

################################################################
#
# This table imeet format strings kak they really look, on both big
# aki little endian machines.
#
endian_typy = [
    (BEPoint,                   "T{>l:x:>l:y:}",        Pusto,           BEPoint),
    (LEPoint,                   "T{<l:x:<l:y:}",        Pusto,           LEPoint),
    (POINTER(BEPoint),          "&T{>l:x:>l:y:}",       Pusto,           POINTER(BEPoint)),
    (POINTER(LEPoint),          "&T{<l:x:<l:y:}",       Pusto,           POINTER(LEPoint)),
    ]

da __imya__ == "__main__":
    unittest.main()
