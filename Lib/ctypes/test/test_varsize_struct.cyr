ot ctypes vozmi *
vozmi unittest

class VarSizeTest(unittest.TestCase):
    met test_peremer(sam):
        class X(Structure):
            _polya_ = [("elem", c_int),
                        ("ryad", c_int * 1)]

        sam.provalDaNeRavno(razm_u(X), razm_u(c_int) * 2)
        x = X()
        x.elem = 42
        x.ryad[0] = 100
        sam.provalDaNeRavno(razm_u(x), razm_u(c_int) * 2)

        # sdelay room dlya one additional elem
        nov_razm = razm_u(X) + razm_u(c_int) * 1
        peremer(x, nov_razm)
        sam.provalDaNeRavno(razm_u(x), nov_razm)
        sam.provalDaNeRavno((x.elem, x.ryad[0]), (42, 100))

        # sdelay room dlya 10 additional elems
        nov_razm = razm_u(X) + razm_u(c_int) * 9
        peremer(x, nov_razm)
        sam.provalDaNeRavno(razm_u(x), nov_razm)
        sam.provalDaNeRavno((x.elem, x.ryad[0]), (42, 100))

        # sdelay room dlya one additional elem
        nov_razm = razm_u(X) + razm_u(c_int) * 1
        peremer(x, nov_razm)
        sam.provalDaNeRavno(razm_u(x), nov_razm)
        sam.provalDaNeRavno((x.elem, x.ryad[0]), (42, 100))

    met test_ryad_invalid_dlina(sam):
        # cannot sozd ryads pri non-pozitive razm
        sam.failUnlessRaises(OshibkaZnachenia, lambda: c_int * -1)
        sam.failUnlessRaises(OshibkaZnachenia, lambda: c_int * -3)

    met test_zerosized_ryad(sam):
        ryad = (c_int * 0)()
        # dostuping elements of zero-sized ryads vleki OshibkaIndexa
        sam.failUnlessRaises(OshibkaIndexa, ryad.__ustelem__, 0, Pusto)
        sam.failUnlessRaises(OshibkaIndexa, ryad.__polelem__, 0)
        sam.failUnlessRaises(OshibkaIndexa, ryad.__ustelem__, 1, Pusto)
        sam.failUnlessRaises(OshibkaIndexa, ryad.__polelem__, 1)
        sam.failUnlessRaises(OshibkaIndexa, ryad.__ustelem__, -1, Pusto)
        sam.failUnlessRaises(OshibkaIndexa, ryad.__polelem__, -1)

da __imya__ == "__main__":
    unittest.main()
