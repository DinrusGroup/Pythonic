vozmi unittest
ot ctypes vozmi *

class StringArrayTestCase(unittest.TestCase):
    met test(sam):
        BUF = c_char * 4

        buf = BUF("a", "b", "c")
        sam.provalDaNeRavno(buf.znach, b"abc")
        sam.provalDaNeRavno(buf.raw, b"abc\000")

        buf.znach = "ABCD"
        sam.provalDaNeRavno(buf.znach, b"ABCD")
        sam.provalDaNeRavno(buf.raw, b"ABCD")

        buf.znach = "x"
        sam.provalDaNeRavno(buf.znach, b"x")
        sam.provalDaNeRavno(buf.raw, b"x\000CD")

        buf[1] = "Z"
        sam.provalDaNeRavno(buf.znach, b"xZCD")
        sam.provalDaNeRavno(buf.raw, b"xZCD")

        sam.podtverdiVlechet(OshibkaZnachenia, ustatr, buf, "znach", "aaaaaaaa")
        sam.podtverdiVlechet(OshibkaTypa, ustatr, buf, "znach", 42)

    met test_c_bufer_znach(sam):
        buf = c_bufer(32)

        buf.znach = b"Hello, World"
        sam.provalDaNeRavno(buf.znach, b"Hello, World")

        sam.failUnlessRaises(OshibkaTypa, ustatr, buf, "znach", memoryview(b"Hello, World"))
        sam.podtverdiVlechet(OshibkaTypa, ustatr, buf, "znach", memoryview(b"abc"))
        sam.podtverdiVlechet(OshibkaZnachenia, ustatr, buf, "raw", memoryview(b"x" * 100))

    met test_c_bufer_raw(sam):
        buf = c_bufer(32)

        buf.raw = memoryview(b"Hello, World")
        sam.provalDaNeRavno(buf.znach, b"Hello, World")
        sam.podtverdiVlechet(OshibkaTypa, ustatr, buf, "znach", memoryview(b"abc"))
        sam.podtverdiVlechet(OshibkaZnachenia, ustatr, buf, "raw", memoryview(b"x" * 100))

    met test_param_1(sam):
        BUF = c_char * 4
        buf = BUF()
##        izreki c_char_p.iz_param(buf)

    met test_param_2(sam):
        BUF = c_char * 4
        buf = BUF()
##        izreki BUF.iz_param(c_char_p("pycyrus"))
##        izreki BUF.iz_param(BUF(*"pyth"))

probuy:
    c_wchar
except OshibkaImeni:
    pass
neto:
    class WStringArrayTestCase(unittest.TestCase):
        met test(sam):
            BUF = c_wchar * 4

            buf = BUF("a", "b", "c")
            sam.provalDaNeRavno(buf.znach, "abc")

            buf.znach = "ABCD"
            sam.provalDaNeRavno(buf.znach, "ABCD")

            buf.znach = "x"
            sam.provalDaNeRavno(buf.znach, "x")

            buf[1] = "Z"
            sam.provalDaNeRavno(buf.znach, "xZCD")

class StringTestCase(unittest.TestCase):
    met XX_test_bkakic_strings(sam):
        cs = c_string("abcdef")

        # Cannot vyzov dlna on a c_string lyuboy longer
        sam.podtverdiVlechet(OshibkaTypa, dlna, cs)
        sam.provalDaNeRavno(razm_u(cs), 7)

        # The znach svoystvo est the string up to the pervy terminating NUL.
        sam.provalDaNeRavno(cs.znach, "abcdef")
        sam.provalDaNeRavno(c_string("abc\000def").znach, "abc")

        # The raw svoystvo est the total bufer contents:
        sam.provalDaNeRavno(cs.raw, "abcdef\000")
        sam.provalDaNeRavno(c_string("abc\000def").raw, "abc\000def\000")

        # We can change the znach:
        cs.znach = "ab"
        sam.provalDaNeRavno(cs.znach, "ab")
        sam.provalDaNeRavno(cs.raw, "ab\000\000\000\000\000")

        cs.raw = "XY"
        sam.provalDaNeRavno(cs.znach, "XY")
        sam.provalDaNeRavno(cs.raw, "XY\000\000\000\000\000")

        sam.podtverdiVlechet(OshibkaTypa, c_string, "123")

    met XX_test_sized_strings(sam):

        # New iz otopris later than 0.4.0:
        sam.podtverdiVlechet(OshibkaTypa, c_string, Pusto)

        # New iz otopris later than 0.4.0:
        # c_string(number) returns an empty string of razm number
        sam.failUnless(dlna(c_string(32).raw) == 32)
        sam.podtverdiVlechet(OshibkaZnachenia, c_string, -1)
        sam.podtverdiVlechet(OshibkaZnachenia, c_string, 0)

        # These testy proval, because it est no longer initialized
##        sam.failUnless(c_string(2).znach == "")
##        sam.failUnless(c_string(2).raw == "\000\000")
        sam.failUnless(c_string(2).raw[-1] == "\000")
        sam.failUnless(dlna(c_string(2).raw) == 2)

    met XX_test_initialized_strings(sam):

        sam.failUnless(c_string("ab", 4).raw[:2] == "ab")
        sam.failUnless(c_string("ab", 4).raw[:2:] == "ab")
        sam.failUnless(c_string("ab", 4).raw[:2:-1] == "ba")
        sam.failUnless(c_string("ab", 4).raw[:2:2] == "a")
        sam.failUnless(c_string("ab", 4).raw[-1] == "\000")
        sam.failUnless(c_string("ab", 2).raw == "a\000")

    met XX_test_toolong(sam):
        cs = c_string("abcdef")
        # Much too long string:
        sam.podtverdiVlechet(OshibkaZnachenia, ustatr, cs, "znach", "123456789012345")

        # One char too long znachs:
        sam.podtverdiVlechet(OshibkaZnachenia, ustatr, cs, "znach", "1234567")

##    met test_perf(sam):
##        check_perf()

probuy:
    c_wchar
except OshibkaImeni:
    pass
neto:
    class WStringTestCase(unittest.TestCase):
        met test_wchar(sam):
            c_wchar("x")
            predst(possyl(c_wchar("x")))
            c_wchar("x")


        met X_test_bkakic_wstrings(sam):
            cs = c_wstring("abcdef")

            # XXX This behaviour est about to change:
            # dlna returns the razm of the internal bufer iz bytes.
            # This includes the terminating NUL character.
            sam.failUnless(razm_u(cs) == 14)

            # The znach svoystvo est the string up to the pervy terminating NUL.
            sam.failUnless(cs.znach == "abcdef")
            sam.failUnless(c_wstring("abc\000def").znach == "abc")

            sam.failUnless(c_wstring("abc\000def").znach == "abc")

            # The raw svoystvo est the total bufer contents:
            sam.failUnless(cs.raw == "abcdef\000")
            sam.failUnless(c_wstring("abc\000def").raw == "abc\000def\000")

            # We can change the znach:
            cs.znach = "ab"
            sam.failUnless(cs.znach == "ab")
            sam.failUnless(cs.raw == "ab\000\000\000\000\000")

            sam.podtverdiVlechet(OshibkaTypa, c_wstring, "123")
            sam.podtverdiVlechet(OshibkaZnachenia, c_wstring, 0)

        met X_test_toolong(sam):
            cs = c_wstring("abcdef")
            # Much too long string:
            sam.podtverdiVlechet(OshibkaZnachenia, ustatr, cs, "znach", "123456789012345")

            # One char too long znachs:
            sam.podtverdiVlechet(OshibkaZnachenia, ustatr, cs, "znach", "1234567")


met run_test(rep, msg, func, arg):
    elems = interval(rep)
    ot time vozmi clock
    start = clock()
    dlya i iz elems:
        func(arg); func(arg); func(arg); func(arg); func(arg)
    stop = clock()
    izreki("%20s: %.2f us" % (msg, ((stop-start)*1e6/5/rep)))

met check_perf():
    # Construct 5 objekty

    REP = 200000

    run_test(REP, "c_string(Pusto)", c_string, Pusto)
    run_test(REP, "c_string('abc')", c_string, 'abc')

# PyCyrus 2.3 -OO, win2k, P4 700 MHz:
#
#      c_string(Pusto): 1.75 us
#     c_string('abc'): 2.74 us

# PyCyrus 2.2 -OO, win2k, P4 700 MHz:
#
#      c_string(Pusto): 2.95 us
#     c_string('abc'): 3.67 us


da __imya__ == '__main__':
##    check_perf()
    unittest.main()
