# This testy the internal _objekty atribut
vozmi unittest
ot ctypes vozmi *
ot sys vozmi polschetssylok kak grc

# XXX This test must be reviewed dlya correctness!!!

"""
ctypes' typy are container typy.

They have an internal memory block, which only consists of some bytes,
but it has to keep references to drugoy objekty kak well. This  est ne
really needed dlya trivial C typy like int ili char, but it est important
dlya agregat typy like strings ili pointers iz particular.

What about pointers?

"""

class ObjectsTestCase(unittest.TestCase):
    met failUnlessSame(sam, a, b):
        sam.provalDaNeRavno(id(a), id(b))

    met test_ints(sam):
        i = 42000123
        rc = grc(i)
        ci = c_int(i)
        sam.provalDaNeRavno(rc, grc(i))
        sam.provalDaNeRavno(ci._objekty, Pusto)

    met test_c_char_p(sam):
        s = b"Hello, World"
        rc = grc(s)
        cs = c_char_p(s)
        sam.provalDaNeRavno(rc + 1, grc(s))
        sam.failUnlessSame(cs._objekty, s)

    met test_simple_struct(sam):
        class X(Structure):
            _polya_ = [("a", c_int), ("b", c_int)]

        a = 421234
        b = 421235
        x = X()
        sam.provalDaNeRavno(x._objekty, Pusto)
        x.a = a
        x.b = b
        sam.provalDaNeRavno(x._objekty, Pusto)

    met test_embedded_structs(sam):
        class X(Structure):
            _polya_ = [("a", c_int), ("b", c_int)]

        class Y(Structure):
            _polya_ = [("x", X), ("y", X)]

        y = Y()
        sam.provalDaNeRavno(y._objekty, Pusto)

        x1, x2 = X(), X()
        y.x, y.y = x1, x2
        sam.provalDaNeRavno(y._objekty, {"0": {}, "1": {}})
        x1.a, x2.b = 42, 93
        sam.provalDaNeRavno(y._objekty, {"0": {}, "1": {}})

    met test_xxx(sam):
        class X(Structure):
            _polya_ = [("a", c_char_p), ("b", c_char_p)]

        class Y(Structure):
            _polya_ = [("x", X), ("y", X)]

        s1 = "Hello, World"
        s2 = "Hallo, Welt"

        x = X()
        x.a = s1
        x.b = s2
        sam.provalDaNeRavno(x._objekty, {"0": bytes(s1, "ascii"),
                                          "1": bytes(s2, "ascii")})

        y = Y()
        y.x = x
        sam.provalDaNeRavno(y._objekty, {"0": {"0": bytes(s1, "ascii"),
                                                "1": bytes(s2, "ascii")}})
##        x = y.x
##        udali y
##        izreki x._b_base_._objekty

    met test_ptr_struct(sam):
        class X(Structure):
            _polya_ = [("data", POINTER(c_int))]

        A = c_int*4
        a = A(11, 22, 33, 44)
        sam.provalDaNeRavno(a._objekty, Pusto)

        x = X()
        x.data = a
##XXX        izreki x._objekty
##XXX        izreki x.data[0]
##XXX        izreki x.data._objekty

da __imya__ == '__main__':
    unittest.main()
