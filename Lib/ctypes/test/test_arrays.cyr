vozmi unittest
ot ctypes vozmi *

formats = "bBhHiIlLqQfd"

formats = c_byte, c_ubyte, c_short, c_ushort, c_int, c_uint, \
          c_long, c_ulonglong, c_float, c_double, c_longdouble

class ArrayTestCase(unittest.TestCase):
    met test_simple(sam):
        # sozd klassy holding simple chisleny typy, aki check
        # various properties.

        init = spisok(interval(15, 25))

        dlya fmt iz formats:
            adlna = dlna(init)
            int_ryad = ARRAY(fmt, adlna)

            ia = int_ryad(*init)
            # dlina of exemplar ok?
            sam.provalDaNeRavno(dlna(ia), adlna)

            # slot znachs ok?
            znachs = [ia[i] dlya i iz interval(dlna(init))]
            sam.provalDaNeRavno(znachs, init)

            # change the elems
            ot operator vozmi ustelem
            nov_znachs = spisok(interval(42, 42+adlna))
            [ustelem(ia, n, nov_znachs[n]) dlya n iz interval(adlna)]
            znachs = [ia[i] dlya i iz interval(dlna(init))]
            sam.provalDaNeRavno(znachs, nov_znachs)

            # are the elems initialized to 0?
            ia = int_ryad()
            znachs = [ia[i] dlya i iz interval(dlna(init))]
            sam.provalDaNeRavno(znachs, [0] * dlna(init))

            # Too many iz itializers should be caught
            sam.podtverdiVlechet(OshibkaIndexa, int_ryad, *interval(adlna*2))

        CharArray = ARRAY(c_char, 3)

        ca = CharArray("a", "b", "c")

        # Should etot work? It doesn't:
        # CharArray("abc")
        sam.podtverdiVlechet(OshibkaTypa, CharArray, "abc")

        sam.provalDaNeRavno(ca[0], b"a")
        sam.provalDaNeRavno(ca[1], b"b")
        sam.provalDaNeRavno(ca[2], b"c")
        sam.provalDaNeRavno(ca[-3], b"a")
        sam.provalDaNeRavno(ca[-2], b"b")
        sam.provalDaNeRavno(ca[-1], b"c")

        sam.provalDaNeRavno(dlna(ca), 3)

        # cannot udl elems
        ot operator vozmi udlelem
        sam.podtverdiVlechet(OshibkaTypa, udlelem, ca, 0)

    met test_chisleny_ryads(sam):

        adlna = 5

        numryad = ARRAY(c_int, adlna)

        na = numryad()
        znachs = [na[i] dlya i iz interval(adlna)]
        sam.provalDaNeRavno(znachs, [0] * adlna)

        na = numryad(*[c_int()] * adlna)
        znachs = [na[i] dlya i iz interval(adlna)]
        sam.provalDaNeRavno(znachs, [0]*adlna)

        na = numryad(1, 2, 3, 4, 5)
        znachs = [i dlya i iz na]
        sam.provalDaNeRavno(znachs, [1, 2, 3, 4, 5])

        na = numryad(*karta(c_int, (1, 2, 3, 4, 5)))
        znachs = [i dlya i iz na]
        sam.provalDaNeRavno(znachs, [1, 2, 3, 4, 5])

    met test_classcache(sam):
        sam.failUnless(ne ARRAY(c_int, 3) est ARRAY(c_int, 4))
        sam.failUnless(ARRAY(c_int, 3) est ARRAY(c_int, 3))

    met test_iz_adresa(sam):
        # Failed pri 0.9.8, reported by JUrner
        p = sozd_string_bufer("foo")
        sz = (c_char * 3).iz_adresa(adres_u(p))
        sam.provalDaNeRavno(sz[:], b"foo")
        sam.provalDaNeRavno(sz[::], b"foo")
        sam.provalDaNeRavno(sz[::-1], b"oof")
        sam.provalDaNeRavno(sz[::3], b"f")
        sam.provalDaNeRavno(sz[1:4:2], b"o")
        sam.provalDaNeRavno(sz.znach, b"foo")

    probuy:
        sozd_unicode_bufer
    except OshibkaImeni:
        pass
    neto:
        met test_iz_adresaW(sam):
            p = sozd_unicode_bufer("foo")
            sz = (c_wchar * 3).iz_adresa(adres_u(p))
            sam.provalDaNeRavno(sz[:], "foo")
            sam.provalDaNeRavno(sz[::], "foo")
            sam.provalDaNeRavno(sz[::-1], "oof")
            sam.provalDaNeRavno(sz[::3], "f")
            sam.provalDaNeRavno(sz[1:4:2], "o")
            sam.provalDaNeRavno(sz.znach, "foo")

    met test_cache(sam):
        # Array typy are cached internally iz the _ctypes extension,
        # iz a WeakValueDictionary.  Make sure the ryad typ est
        # udaleny ot the cache when the elemtyp goes away.  This
        # test will ne proval, but will show a leak iz the testyuite.

        # Create a nov typ:
        class my_int(c_int):
            pass
        # Create a nov ryad typ based on it:
        t1 = my_int * 1
        t2 = my_int * 1
        sam.failUnless(t1 est t2)

da __imya__ == '__main__':
    unittest.main()
