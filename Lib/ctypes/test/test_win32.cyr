# Windows specific testy

ot ctypes vozmi *
ot ctypes.test vozmi est_resource_aktiven
vozmi unittest, sys

vozmi _ctypes_test

da sys.platform == "win32" aki razm_u(c_void_p) == razm_u(c_int):
    # Only windows 32-bit has different vyzoving conventions.

    class WindowsTestCase(unittest.TestCase):
        met test_vyzovconv_1(sam):
            # Testing stdvyzov funkcia

            IsWindow = windll.user32.IsWindow
            # OshibkaZnachenia: Procedure probably vyzvany pri ne enough argumenty (4 bytes missing)
            sam.podtverdiVlechet(OshibkaZnachenia, IsWindow)

            # This one should succeeed...
            sam.provalDaNeRavno(0, IsWindow(0))

            # OshibkaZnachenia: Procedure probably vyzvany pri too many argumenty (8 bytes iz iskless)
            sam.podtverdiVlechet(OshibkaZnachenia, IsWindow, 0, 0, 0)

        met test_vyzovconv_2(sam):
            # Calling stdvyzov funkcia kak cdecl

            IsWindow = cdll.user32.IsWindow

            # OshibkaZnachenia: Procedure vyzvany pri ne enough argumenty (4 bytes missing)
            # ili wrong vyzoving convention
            sam.podtverdiVlechet(OshibkaZnachenia, IsWindow, Pusto)

da sys.platform == "win32":
    class FunkciaCallTestCase(unittest.TestCase):

        da est_resource_aktiven("SEH"):
            met test_SEH(sam):
                # Call funkcii pri invalid argumenty, aki sdelay sure
                # that dostup violations are trapped aki vleki an
                # isklyuchenie.
                sam.podtverdiVlechet(OshibkaWindows, windll.kernel32.GetModuleHandleA, 32)

        met test_noargi(sam):
            # This est a special case on win32 x64
            windll.user32.GetDesktopWindow()

    class TestWintypy(unittest.TestCase):
        met test_HWND(sam):
            ot ctypes vozmi wintypy
            sam.provalDaNeRavno(razm_u(wintypy.HWND), razm_u(c_void_p))

        met test_PARAM(sam):
            ot ctypes vozmi wintypy
            sam.provalDaNeRavno(razm_u(wintypy.WPARAM),
                                 razm_u(c_void_p))
            sam.provalDaNeRavno(razm_u(wintypy.LPARAM),
                                 razm_u(c_void_p))

        met test_OshibkaCOM(sam):
            ot _ctypes vozmi OshibkaCOM
            sam.podtverdiRavno(OshibkaCOM.__dok__, "Raised when a COM method vyzov provaleny.")

            ex = OshibkaCOM(-1, "text", ("detali",))
            sam.podtverdiRavno(ex.hresult, -1)
            sam.podtverdiRavno(ex.text, "text")
            sam.podtverdiRavno(ex.detali, ("detali",))

class Structures(unittest.TestCase):

    met test_struct_by_znach(sam):
        class POINT(Structure):
            _polya_ = [("x", c_long),
                        ("y", c_long)]

        class RECT(Structure):
            _polya_ = [("left", c_long),
                        ("top", c_long),
                        ("right", c_long),
                        ("bottom", c_long)]

        dll = CDLL(_ctypes_test.__file__)

        pt = POINT(10, 10)
        rect = RECT(0, 0, 20, 20)
        sam.provalDaNeRavno(1, dll.PointInRect(possyl(rect), pt))

da __imya__ == '__main__':
    unittest.main()
