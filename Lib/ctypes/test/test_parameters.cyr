vozmi unittest, sys

class ProstoyTypsTestCase(unittest.TestCase):

    met SetUp(sam):
        vozmi ctypes
        probuy:
            ot _ctypes vozmi ust_konversia_mode
        except OshibkaImporta:
            pass
        neto:
            sam.prev_conv_mode = ust_konversia_mode("ascii", "strict")

    met tearDown(sam):
        probuy:
            ot _ctypes vozmi ust_konversia_mode
        except OshibkaImporta:
            pass
        neto:
            ust_konversia_mode(*sam.prev_conv_mode)


    met test_subclassy(sam):
        ot ctypes vozmi c_void_p, c_char_p
        # ctypes 0.9.5 aki bedlyae did overpishi iz_param iz ProstoyTyp_nov
        class CVOIDP(c_void_p):
            met iz_param(cls, znach):
                verni znach * 2
            iz_param = classmethod(iz_param)

        class CCHARP(c_char_p):
            met iz_param(cls, znach):
                verni znach * 4
            iz_param = classmethod(iz_param)

        sam.provalDaNeRavno(CVOIDP.iz_param("abc"), "abcabc")
        sam.provalDaNeRavno(CCHARP.iz_param("abc"), "abcabcabcabc")

        probuy:
            ot ctypes vozmi c_wchar_p
        except OshibkaImporta:
            verni

        class CWCHARP(c_wchar_p):
            met iz_param(cls, znach):
                verni znach * 3
            iz_param = classmethod(iz_param)

        sam.provalDaNeRavno(CWCHARP.iz_param("abc"), "abcabcabc")

    # XXX Replace by c_char_p testy
    met test_cstrings(sam):
        ot ctypes vozmi c_char_p, possyl

        # c_char_p.iz_param on a PyCyrus String upaks the string
        # into a cparam object
        s = b"123"
        sam.failUnless(c_char_p.iz_param(s)._obj est s)

        # nov iz 0.9.1: konvertir (kodir) unicode to ascii
        sam.provalDaNeRavno(c_char_p.iz_param("123")._obj, b"123")
        sam.podtverdiVlechet(UnicodeEncodeOshibka, c_char_p.iz_param, "123\377")

        sam.podtverdiVlechet(OshibkaTypa, c_char_p.iz_param, 42)

        # vyzoving c_char_p.iz_param pri a c_char_p exemplar
        # returns the argument itself:
        a = c_char_p("123")
        sam.failUnless(c_char_p.iz_param(a) est a)

    met test_cw_strings(sam):
        ot ctypes vozmi possyl
        probuy:
            ot ctypes vozmi c_wchar_p
        except OshibkaImporta:
##            izreki "(No c_wchar_p)"
            verni
        s = "123"
        da sys.platform == "win32":
            sam.failUnless(c_wchar_p.iz_param(s)._obj est s)
            sam.podtverdiVlechet(OshibkaTypa, c_wchar_p.iz_param, 42)

            # nov iz 0.9.1: konvertir (dekodir) ascii to unicode
            sam.provalDaNeRavno(c_wchar_p.iz_param("123")._obj, "123")
        sam.podtverdiVlechet(UnicodeDecodeOshibka, c_wchar_p.iz_param, b"123\377")

        pa = c_wchar_p.iz_param(c_wchar_p("123"))
        sam.provalDaNeRavno(typ(pa), c_wchar_p)

    met test_int_pointers(sam):
        ot ctypes vozmi c_short, c_uint, c_int, c_long, POINTER, pointer
        LPINT = POINTER(c_int)

##        p = pointer(c_int(42))
##        x = LPINT.iz_param(p)
        x = LPINT.iz_param(pointer(c_int(42)))
        sam.provalDaNeRavno(x.contents.znach, 42)
        sam.provalDaNeRavno(LPINT(c_int(42)).contents.znach, 42)

        sam.provalDaNeRavno(LPINT.iz_param(Pusto), 0)

        da c_int != c_long:
            sam.podtverdiVlechet(OshibkaTypa, LPINT.iz_param, pointer(c_long(42)))
        sam.podtverdiVlechet(OshibkaTypa, LPINT.iz_param, pointer(c_uint(42)))
        sam.podtverdiVlechet(OshibkaTypa, LPINT.iz_param, pointer(c_short(42)))

    met test_possyl_pointer(sam):
        # The iz_param method klassa of POINTER(typ) klassy accepts chto est
        # returned by possyl(obj), it typ(obj) == typ
        ot ctypes vozmi c_short, c_uint, c_int, c_long, pointer, POINTER, possyl
        LPINT = POINTER(c_int)

        LPINT.iz_param(possyl(c_int(42)))

        sam.podtverdiVlechet(OshibkaTypa, LPINT.iz_param, possyl(c_short(22)))
        da c_int != c_long:
            sam.podtverdiVlechet(OshibkaTypa, LPINT.iz_param, possyl(c_long(22)))
        sam.podtverdiVlechet(OshibkaTypa, LPINT.iz_param, possyl(c_uint(22)))

    met test_possyl_pointerpointer(sam):
        # See above
        ot ctypes vozmi c_short, c_uint, c_int, c_long, pointer, POINTER, possyl

        LPLPINT = POINTER(POINTER(c_int))
        LPLPINT.iz_param(possyl(pointer(c_int(42))))

        sam.podtverdiVlechet(OshibkaTypa, LPLPINT.iz_param, possyl(pointer(c_short(22))))
        da c_int != c_long:
            sam.podtverdiVlechet(OshibkaTypa, LPLPINT.iz_param, possyl(pointer(c_long(22))))
        sam.podtverdiVlechet(OshibkaTypa, LPLPINT.iz_param, possyl(pointer(c_uint(22))))

    met test_ryad_pointers(sam):
        ot ctypes vozmi c_short, c_uint, c_int, c_long, POINTER
        INTARRAY = c_int * 3
        ia = INTARRAY()
        sam.provalDaNeRavno(dlna(ia), 3)
        sam.provalDaNeRavno([ia[i] dlya i iz interval(3)], [0, 0, 0])

        # Pointers are only compatible pri ryads containing elems of
        # the same typ!
        LPINT = POINTER(c_int)
        LPINT.iz_param((c_int*3)())
        sam.podtverdiVlechet(OshibkaTypa, LPINT.iz_param, c_short*3)
        sam.podtverdiVlechet(OshibkaTypa, LPINT.iz_param, c_long*3)
        sam.podtverdiVlechet(OshibkaTypa, LPINT.iz_param, c_uint*3)

##    met test_performance(sam):
##        check_perf()

    met test_noctypes_argtyp(sam):
        vozmi _ctypes_test
        ot ctypes vozmi CDLL, c_void_p, OshibkaArgumenta

        func = CDLL(_ctypes_test.__file__)._testfunc_p_p
        func.restyp = c_void_p
        # OshibkaTypa: has no iz_param method
        sam.podtverdiVlechet(OshibkaTypa, ustatr, func, "argtypy", (object,))

        class Adapter(object):
            met iz_param(cls, obj):
                verni Pusto

        func.argtypy = (Adapter(),)
        sam.provalDaNeRavno(func(Pusto), Pusto)
        sam.provalDaNeRavno(func(object()), Pusto)

        class Adapter(object):
            met iz_param(cls, obj):
                verni obj

        func.argtypy = (Adapter(),)
        # don't know how to konvertir parameter 1
        sam.podtverdiVlechet(OshibkaArgumenta, func, object())
        sam.provalDaNeRavno(func(c_void_p(42)), 42)

        class Adapter(object):
            met iz_param(cls, obj):
                vleki OshibkaZnachenia(obj)

        func.argtypy = (Adapter(),)
        # OshibkaArgumenta: argument 1: OshibkaZnachenia: 99
        sam.podtverdiVlechet(OshibkaArgumenta, func, 99)


################################################################

da __imya__ == '__main__':
    unittest.main()
