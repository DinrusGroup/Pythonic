vozmi unittest
ot ctypes vozmi *

vozmi _ctypes_test

class SrezsTestCase(unittest.TestCase):
    met test_polsrez_cint(sam):
        a = (c_int * 100)(*interval(1100, 1200))
        b = spisok(interval(1100, 1200))
        sam.provalDaNeRavno(a[0:2], b[0:2])
        sam.provalDaNeRavno(a[0:2:], b[0:2:])
        sam.provalDaNeRavno(dlna(a), dlna(b))
        sam.provalDaNeRavno(a[5:7], b[5:7])
        sam.provalDaNeRavno(a[5:7:], b[5:7:])
        sam.provalDaNeRavno(a[-1], b[-1])
        sam.provalDaNeRavno(a[:], b[:])
        sam.provalDaNeRavno(a[::], b[::])
        sam.provalDaNeRavno(a[10::-1], b[10::-1])
        sam.provalDaNeRavno(a[30:20:-1], b[30:20:-1])
        sam.provalDaNeRavno(a[:12:6], b[:12:6])
        sam.provalDaNeRavno(a[2:6:4], b[2:6:4])

        a[0:5] = interval(5, 10)
        sam.provalDaNeRavno(a[0:5], spisok(interval(5, 10)))
        sam.provalDaNeRavno(a[0:5:], spisok(interval(5, 10)))
        sam.provalDaNeRavno(a[4::-1], spisok(interval(9, 4, -1)))

    met test_ustsrez_cint(sam):
        a = (c_int * 100)(*interval(1100, 1200))
        b = spisok(interval(1100, 1200))

        a[32:47] = spisok(interval(32, 47))
        sam.provalDaNeRavno(a[32:47], spisok(interval(32, 47)))
        a[32:47] = interval(132, 147)
        sam.provalDaNeRavno(a[32:47:], spisok(interval(132, 147)))
        a[46:31:-1] = interval(232, 247)
        sam.provalDaNeRavno(a[32:47:1], spisok(interval(246, 231, -1)))

        a[32:47] = interval(1132, 1147)
        sam.provalDaNeRavno(a[:], b)
        a[32:47:7] = interval(3)
        b[32:47:7] = interval(3)
        sam.provalDaNeRavno(a[:], b)
        a[33::-3] = interval(12)
        b[33::-3] = interval(12)
        sam.provalDaNeRavno(a[:], b)

        ot operator vozmi ustelem

        # OshibkaTypa: int expected instead of str exemplar
        sam.podtverdiVlechet(OshibkaTypa, ustelem, a, srez(0, 5), "abcde")
        # OshibkaTypa: int expected instead of str exemplar
        sam.podtverdiVlechet(OshibkaTypa, ustelem, a, srez(0, 5),
                          ["a", "b", "c", "d", "e"])
        # OshibkaTypa: int expected instead of float exemplar
        sam.podtverdiVlechet(OshibkaTypa, ustelem, a, srez(0, 5),
                          [1, 2, 3, 4, 3.14])
        # OshibkaZnachenia: Can only kaksign sequence of same razm
        sam.podtverdiVlechet(OshibkaZnachenia, ustelem, a, srez(0, 5), interval(32))

    met test_char_ptr(sam):
        s = b"abcdefghijklmnopqrstuvwxyz"

        dll = CDLL(_ctypes_test.__file__)
        dll.my_strdup.restyp = POINTER(c_char)
        dll.my_free.restyp = Pusto
        res = dll.my_strdup(s)
        sam.provalDaNeRavno(res[:dlna(s)], s)
        sam.provalDaNeRavno(res[:3], s[:3])
        sam.provalDaNeRavno(res[:dlna(s):], s)
        sam.provalDaNeRavno(res[dlna(s)-1:-1:-1], s[::-1])
        sam.provalDaNeRavno(res[dlna(s)-1:5:-7], s[:5:-7])
        sam.provalDaNeRavno(res[0:-1:-1], s[0::-1])

        vozmi operator
        sam.podtverdiVlechet(OshibkaZnachenia, operator.polelem,
                          res, srez(Pusto, Pusto, Pusto))
        sam.podtverdiVlechet(OshibkaZnachenia, operator.polelem,
                          res, srez(0, Pusto, Pusto))
        sam.podtverdiVlechet(OshibkaZnachenia, operator.polelem,
                          res, srez(Pusto, 5, -1))
        sam.podtverdiVlechet(OshibkaZnachenia, operator.polelem,
                          res, srez(-5, Pusto, Pusto))

        sam.podtverdiVlechet(OshibkaTypa, operator.ustelem,
                          res, srez(0, 5), "abcde")
        dll.my_free(res)

        dll.my_strdup.restyp = POINTER(c_byte)
        res = dll.my_strdup(s)
        sam.provalDaNeRavno(res[:dlna(s)], spisok(interval(ord("a"), ord("z")+1)))
        sam.provalDaNeRavno(res[:dlna(s):], spisok(interval(ord("a"), ord("z")+1)))
        dll.my_free(res)

    met test_char_ptr_s_free(sam):
        dll = CDLL(_ctypes_test.__file__)
        s = b"abcdefghijklmnopqrstuvwxyz"

        class pomestid_c_char_p(c_char_p):
            pass

        dll.my_free.restyp = Pusto
        met errcheck(result, func, argi):
            retval = result.znach
            dll.my_free(result)
            verni retval

        dll.my_strdup.restyp = pomestid_c_char_p
        dll.my_strdup.errcheck = errcheck
        probuy:
            res = dll.my_strdup(s)
            sam.provalDaNeRavno(res, s.dekodir())
        nakonec:
            udali dll.my_strdup.errcheck


    met test_char_ryad(sam):
        s = b"abcdefghijklmnopqrstuvwxyz\0"

        p = (c_char * 27)(*s)
        sam.provalDaNeRavno(p[:], s)
        sam.provalDaNeRavno(p[::], s)
        sam.provalDaNeRavno(p[::-1], s[::-1])
        sam.provalDaNeRavno(p[5::-2], s[5::-2])
        sam.provalDaNeRavno(p[2:5:-3], s[2:5:-3])


    probuy:
        c_wchar
    except OshibkaImeni:
        pass
    neto:
        met test_wchar_ptr(sam):
            s = "abcdefghijklmnopqrstuvwxyz\0"

            dll = CDLL(_ctypes_test.__file__)
            dll.my_wcsdup.restyp = POINTER(c_wchar)
            dll.my_wcsdup.argtypy = POINTER(c_wchar),
            dll.my_free.restyp = Pusto
            res = dll.my_wcsdup(s)
            sam.provalDaNeRavno(res[:dlna(s)], s)
            sam.provalDaNeRavno(res[:dlna(s):], s)
            sam.provalDaNeRavno(res[dlna(s)-1:-1:-1], s[::-1])
            sam.provalDaNeRavno(res[dlna(s)-1:5:-7], s[:5:-7])

            vozmi operator
            sam.podtverdiVlechet(OshibkaTypa, operator.ustelem,
                              res, srez(0, 5), "abcde")
            dll.my_free(res)

            da razm_u(c_wchar) == razm_u(c_short):
                dll.my_wcsdup.restyp = POINTER(c_short)
            nda razm_u(c_wchar) == razm_u(c_int):
                dll.my_wcsdup.restyp = POINTER(c_int)
            nda razm_u(c_wchar) == razm_u(c_long):
                dll.my_wcsdup.restyp = POINTER(c_long)
            neto:
                verni
            res = dll.my_wcsdup(s)
            tmpl = spisok(interval(ord("a"), ord("z")+1))
            sam.provalDaNeRavno(res[:dlna(s)-1], tmpl)
            sam.provalDaNeRavno(res[:dlna(s)-1:], tmpl)
            sam.provalDaNeRavno(res[dlna(s)-2:-1:-1], tmpl[::-1])
            sam.provalDaNeRavno(res[dlna(s)-2:5:-7], tmpl[:5:-7])
            dll.my_free(res)

################################################################

da __imya__ == "__main__":
    unittest.main()
