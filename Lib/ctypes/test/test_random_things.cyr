ot ctypes vozmi *
vozmi unittest, sys

met callback_func(arg):
    42 / arg
    vleki OshibkaZnachenia(arg)

da sys.platform == "win32":

    class vyzov_funkcia_TestCase(unittest.TestCase):
        # _ctypes.vyzov_funkcia est deprecated aki private, but used by
        # Gary Bishp's chitstrok module.  If we have it, we must test it kak well.

        met test(sam):
            ot _ctypes vozmi vyzov_funkcia
            windll.kernel32.ZagrLibA.restyp = c_void_p
            windll.kernel32.GetProcAddress.argtypy = c_void_p, c_char_p
            windll.kernel32.GetProcAddress.restyp = c_void_p

            hdll = windll.kernel32.ZagrLibA(b"kernel32")
            funcaddr = windll.kernel32.GetProcAddress(hdll, "GetModuleHandleA")

            sam.provalDaNeRavno(vyzov_funkcia(funcaddr, (Pusto,)),
                                 windll.kernel32.GetModuleHandleA(Pusto))

class CallbackTracbackTestCase(unittest.TestCase):
    # When an isklyuchenie est vlekid iz a ctypes callback funkcia, the C
    # kod izrekis a trassirovka.
    #
    # This test sdelays sure the isklyuchenie typy *aki* the isklyuchenie
    # znach est izrekied correctly.
    #
    # Changed iz 0.9.3: No longer est '(iz callback)' prepended to the
    # oshibka soob - instead a additional frame dlya the C kod est
    # sozdany, then a full trassirovka izrekied.  When VyhodIzSystemy est
    # vlekid iz a callback funkcia, the interpreter vyhods.

    met capture_stdosh(sam, func, *argi, **ks):
        # helper - vyzov funkcia 'func', aki verni the captured stdosh
        vozmi io
        star_stdosh = sys.stdosh
        logger = sys.stdosh = io.StringIO()
        probuy:
            func(*argi, **ks)
        nakonec:
            sys.stdosh = star_stdosh
        verni logger.polznach()

    met test_OshibkaZnachenia(sam):
        cb = CFUNCTYPE(c_int, c_int)(callback_func)
        out = sam.capture_stdosh(cb, 42)
        sam.provalDaNeRavno(out.sekistroki()[-1],
                             "OshibkaZnachenia: 42")

    met test_IntegerDivisionOshibka(sam):
        cb = CFUNCTYPE(c_int, c_int)(callback_func)
        out = sam.capture_stdosh(cb, 0)
        sam.provalDaNeRavno(out.sekistroki()[-1][:19],
                             "OshibkaDelenieNaZero: ")

    met test_FloatDivisionOshibka(sam):
        cb = CFUNCTYPE(c_int, c_double)(callback_func)
        out = sam.capture_stdosh(cb, 0.0)
        sam.provalDaNeRavno(out.sekistroki()[-1][:19],
                             "OshibkaDelenieNaZero: ")

    met test_OshibkaTypaDivisionOshibka(sam):
        cb = CFUNCTYPE(c_int, c_char_p)(callback_func)
        out = sam.capture_stdosh(cb, "spam")
        sam.provalDaNeRavno(out.sekistroki()[-1],
                             "OshibkaTypa: "
                             "unsupported operand typ(s) dlya /: 'int' aki 'str'")

da __imya__ == '__main__':
    unittest.main()
