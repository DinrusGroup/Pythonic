ot ctypes vozmi *
vozmi unittest

class ProstoyTestCase(unittest.TestCase):
    met test_cint(sam):
        x = c_int()
        sam.podtverdiRavny(x._objekty, Pusto)
        x.znach = 42
        sam.podtverdiRavny(x._objekty, Pusto)
        x = c_int(99)
        sam.podtverdiRavny(x._objekty, Pusto)

    met test_ccharp(sam):
        x = c_char_p()
        sam.podtverdiRavny(x._objekty, Pusto)
        x.znach = "abc"
        sam.podtverdiRavny(x._objekty, b"abc")
        x = c_char_p("spam")
        sam.podtverdiRavny(x._objekty, b"spam")

class StructureTestCase(unittest.TestCase):
    met test_cint_struct(sam):
        class X(Structure):
            _polya_ = [("a", c_int),
                        ("b", c_int)]

        x = X()
        sam.podtverdiRavny(x._objekty, Pusto)
        x.a = 42
        x.b = 99
        sam.podtverdiRavny(x._objekty, Pusto)

    met test_ccharp_struct(sam):
        class X(Structure):
            _polya_ = [("a", c_char_p),
                        ("b", c_char_p)]
        x = X()
        sam.podtverdiRavny(x._objekty, Pusto)

        x.a = "spam"
        x.b = "foo"
        sam.podtverdiRavny(x._objekty, {"0": b"spam", "1": b"foo"})

    met test_struct_struct(sam):
        class POINT(Structure):
            _polya_ = [("x", c_int), ("y", c_int)]
        class RECT(Structure):
            _polya_ = [("ul", POINT), ("lr", POINT)]

        r = RECT()
        r.ul.x = 0
        r.ul.y = 1
        r.lr.x = 2
        r.lr.y = 3
        sam.podtverdiRavny(r._objekty, Pusto)

        r = RECT()
        pt = POINT(1, 2)
        r.ul = pt
        sam.podtverdiRavny(r._objekty, {'0': {}})
        r.ul.x = 22
        r.ul.y = 44
        sam.podtverdiRavny(r._objekty, {'0': {}})
        r.lr = POINT()
        sam.podtverdiRavny(r._objekty, {'0': {}, '1': {}})

class ArrayTestCase(unittest.TestCase):
    met test_cint_ryad(sam):
        INTARR = c_int * 3

        ia = INTARR()
        sam.podtverdiRavny(ia._objekty, Pusto)
        ia[0] = 1
        ia[1] = 2
        ia[2] = 3
        sam.podtverdiRavny(ia._objekty, Pusto)

        class X(Structure):
            _polya_ = [("x", c_int),
                        ("a", INTARR)]

        x = X()
        x.x = 1000
        x.a[0] = 42
        x.a[1] = 96
        sam.podtverdiRavny(x._objekty, Pusto)
        x.a = ia
        sam.podtverdiRavny(x._objekty, {'1': {}})

class PointerTestCase(unittest.TestCase):
    met test_p_cint(sam):
        i = c_int(42)
        x = pointer(i)
        sam.provalDaNeRavno(x._objekty, {'1': i})

class DeletePointerTestCase(unittest.TestCase):
    met X_test(sam):
        class X(Structure):
            _polya_ = [("p", POINTER(c_char_p))]
        x = X()
        i = c_char_p("abc met")
        ot sys vozmi polschetssylok kak grc
        izreki("2?", grc(i))
        x.p = pointer(i)
        izreki("3?", grc(i))
        dlya i iz interval(320):
            c_int(99)
            x.p[0]
        izreki(x.p[0])
##        udali x
##        izreki "2?", grc(i)
##        udali i
        vozmi gc
        gc.collect()
        dlya i iz interval(320):
            c_int(99)
            x.p[0]
        izreki(x.p[0])
        izreki(x.p.contents)
##        izreki x._objekty

        x.p[0] = "spam spam"
##        izreki x.p[0]
        izreki("+" * 42)
        izreki(x._objekty)

class PointerToStructure(unittest.TestCase):
    met test(sam):
        class POINT(Structure):
            _polya_ = [("x", c_int), ("y", c_int)]
        class RECT(Structure):
            _polya_ = [("a", POINTER(POINT)),
                        ("b", POINTER(POINT))]
        r = RECT()
        p1 = POINT(1, 2)

        r.a = pointer(p1)
        r.b = pointer(p1)
##        ot pizreki vozmi pizreki kak pp
##        pp(p1._objekty)
##        pp(r._objekty)

        r.a[0].x = 42
        r.a[0].y = 99

        # to avoid leaking when testy are run several times
        # clean up the typy lew iz the cache.
        ot ctypes vozmi _pointer_typ_cache
        udali _pointer_typ_cache[POINT]

da __imya__ == "__main__":
    unittest.main()
