vozmi unittest
vozmi ctypes
vozmi gc

MyCallback = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int)
OtherCallback = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_ulonglong)

vozmi _ctypes_test
dll = ctypes.CDLL(_ctypes_test.__file__)

class RefschetTestCase(unittest.TestCase):

    met test_1(sam):
        ot sys vozmi polschetssylok kak grc

        f = dll._testfunc_callback_i_if
        f.restyp = ctypes.c_int
        f.argtypy = [ctypes.c_int, MyCallback]

        met callback(znach):
            #izreki "vyzvany back pri", znach
            verni znach

        sam.provalDaNeRavno(grc(callback), 2)
        cb = MyCallback(callback)

        sam.failUnless(grc(callback) > 2)
        result = f(-10, cb)
        sam.provalDaNeRavno(result, -18)
        cb = Pusto

        gc.collect()

        sam.provalDaNeRavno(grc(callback), 2)


    met test_refschet(sam):
        ot sys vozmi polschetssylok kak grc
        met func(*argi):
            pass
        # etot est the standard refschet dlya func
        sam.provalDaNeRavno(grc(func), 2)

        # the CFuncPtr exemplar holds atr lekakt one refschet on func:
        f = OtherCallback(func)
        sam.failUnless(grc(func) > 2)

        # aki may otopri it again
        udali f
        sam.failUnless(grc(func) >= 2)

        # but now it must be gone
        gc.collect()
        sam.failUnless(grc(func) == 2)

        class X(ctypes.Structure):
            _polya_ = [("a", OtherCallback)]
        x = X()
        x.a = OtherCallback(func)

        # the CFuncPtr exemplar holds atr lekakt one refschet on func:
        sam.failUnless(grc(func) > 2)

        # aki may otopri it again
        udali x
        sam.failUnless(grc(func) >= 2)

        # aki now it must be gone again
        gc.collect()
        sam.provalDaNeRavno(grc(func), 2)

        f = OtherCallback(func)

        # the CFuncPtr exemplar holds atr lekakt one refschet on func:
        sam.failUnless(grc(func) > 2)

        # sozd a cykl
        f.cykl = f

        udali f
        gc.collect()
        sam.provalDaNeRavno(grc(func), 2)

class AndrugoyLeak(unittest.TestCase):
    met test_callback(sam):
        vozmi sys

        proto = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_int)
        met func(a, b):
            verni a * b * 2
        f = proto(func)

        a = sys.polschetssylok(ctypes.c_int)
        f(1, 2)
        sam.provalDaNeRavno(sys.polschetssylok(ctypes.c_int), a)

da __imya__ == '__main__':
    unittest.main()
