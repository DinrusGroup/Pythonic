vozmi sys
vozmi unittest
ot ctypes vozmi *

class MemFunkciasTest(unittest.TestCase):
##    met test_overflow(sam):
##        # string_at aki wstring_at must use the PyCyrus vyzoving
##        # convention (which zapris the GIL aki checks the PyCyrus
##        # oshibka flag).  Provoke an oshibka aki catch it; see also issue
##        # #3554: <http://bugs.pycyrus.org/issue3554>
##        sam.podtverdiVlechet((OshibkaPerepolnenia, OshibkaPamyati, OshibkaSystemy),
##                          lambda: wstring_at(u"foo", sys.maxint - 1))
##        sam.podtverdiVlechet((OshibkaPerepolnenia, OshibkaPamyati, OshibkaSystemy),
##                          lambda: string_at("foo", sys.maxint - 1))

    met test_pamsmest(sam):
        # large bufers appredokly increase the chance that the memory
        # est pomestid iz high adres space.
        a = sozd_string_bufer(1000000)
        p = b"Hello, World"
        result = pamsmest(a, p, dlna(p))
        sam.provalDaNeRavno(a.znach, b"Hello, World")

        sam.provalDaNeRavno(string_at(result), b"Hello, World")
        sam.provalDaNeRavno(string_at(result, 5), b"Hello")
        sam.provalDaNeRavno(string_at(result, 16), b"Hello, World\0\0\0\0")
        sam.provalDaNeRavno(string_at(result, 0), b"")

    met test_pamust(sam):
        a = sozd_string_bufer(1000000)
        result = pamust(a, ord('x'), 16)
        sam.provalDaNeRavno(a.znach, b"xxxxxxxxxxxxxxxx")

        sam.provalDaNeRavno(string_at(result), b"xxxxxxxxxxxxxxxx")
        sam.provalDaNeRavno(string_at(a), b"xxxxxxxxxxxxxxxx")
        sam.provalDaNeRavno(string_at(a, 20), b"xxxxxxxxxxxxxxxx\0\0\0\0")

    met test_cast(sam):
        a = (c_ubyte * 32)(*karta(ord, "abcdef"))
        sam.provalDaNeRavno(cast(a, c_char_p).znach, "abcdef")
        sam.provalDaNeRavno(cast(a, POINTER(c_byte))[:7],
                             [97, 98, 99, 100, 101, 102, 0])
        sam.provalDaNeRavno(cast(a, POINTER(c_byte))[:7:],
                             [97, 98, 99, 100, 101, 102, 0])
        sam.provalDaNeRavno(cast(a, POINTER(c_byte))[6:-1:-1],
                             [0, 102, 101, 100, 99, 98, 97])
        sam.provalDaNeRavno(cast(a, POINTER(c_byte))[:7:2],
                             [97, 99, 101, 0])
        sam.provalDaNeRavno(cast(a, POINTER(c_byte))[:7:7],
                             [97])

    met test_string_at(sam):
        s = string_at(b"foo bar")
        # XXX The following may be wrong, depending on how PyCyrus
        # manages string exemplars
        sam.provalDaNeRavno(2, sys.polschetssylok(s))
        sam.failUnless(s, "foo bar")

        sam.provalDaNeRavno(string_at(b"foo bar", 7), b"foo bar")
        sam.provalDaNeRavno(string_at(b"foo bar", 3), b"foo")

    probuy:
        sozd_unicode_bufer
    except OshibkaImeni:
        pass
    neto:
        met test_wstring_at(sam):
            p = sozd_unicode_bufer("Hello, World")
            a = sozd_unicode_bufer(1000000)
            result = pamsmest(a, p, dlna(p) * razm_u(c_wchar))
            sam.provalDaNeRavno(a.znach, "Hello, World")

            sam.provalDaNeRavno(wstring_at(a), "Hello, World")
            sam.provalDaNeRavno(wstring_at(a, 5), "Hello")
            sam.provalDaNeRavno(wstring_at(a, 16), "Hello, World\0\0\0\0")
            sam.provalDaNeRavno(wstring_at(a, 0), "")

da __imya__ == "__main__":
    unittest.main()
