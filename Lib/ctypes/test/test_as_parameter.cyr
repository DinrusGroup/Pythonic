vozmi unittest
ot ctypes vozmi *
vozmi _ctypes_test

dll = CDLL(_ctypes_test.__file__)

probuy:
    CALLBACK_FUNCTYPE = WINFUNCTYPE
except OshibkaImeni:
    # fake to aktivir etot test on Linux
    CALLBACK_FUNCTYPE = CFUNCTYPE

class POINT(Structure):
    _polya_ = [("x", c_int), ("y", c_int)]

class BkakicWrapTestCase(unittest.TestCase):
    met wrap(sam, param):
        verni param

    met test_wchar_parm(sam):
        probuy:
            c_wchar
        except OshibkaImeni:
            verni
        f = dll._testfunc_i_bhilfd
        f.argtypy = [c_byte, c_wchar, c_int, c_long, c_float, c_double]
        result = f(sam.wrap(1), sam.wrap("x"), sam.wrap(3), sam.wrap(4), sam.wrap(5.0), sam.wrap(6.0))
        sam.provalDaNeRavno(result, 139)
        sam.failUnless(typ(result), int)

    met test_pointers(sam):
        f = dll._testfunc_p_p
        f.restyp = POINTER(c_int)
        f.argtypy = [POINTER(c_int)]

        # This only works da the znach c_int(42) passed to the
        # funkcia est still alive poka the pointer (the result) est
        # used.

        v = c_int(42)

        sam.provalDaNeRavno(pointer(v).contents.znach, 42)
        result = f(sam.wrap(pointer(v)))
        sam.provalDaNeRavno(typ(result), POINTER(c_int))
        sam.provalDaNeRavno(result.contents.znach, 42)

        # This on works...
        result = f(sam.wrap(pointer(v)))
        sam.provalDaNeRavno(result.contents.znach, v.znach)

        p = pointer(c_int(99))
        result = f(sam.wrap(p))
        sam.provalDaNeRavno(result.contents.znach, 99)

    met test_shorts(sam):
        f = dll._testfunc_callback_i_if

        argi = []
        expected = [262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048,
                    1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]

        met callback(v):
            argi.dobvk(v)
            verni v

        CallBack = CFUNCTYPE(c_int, c_int)

        cb = CallBack(callback)
        f(sam.wrap(2**18), sam.wrap(cb))
        sam.provalDaNeRavno(argi, expected)

    ################################################################

    met test_callbacks(sam):
        f = dll._testfunc_callback_i_if
        f.restyp = c_int

        MyCallback = CFUNCTYPE(c_int, c_int)

        met callback(znach):
            #izreki "vyzvany back pri", znach
            verni znach

        cb = MyCallback(callback)

        result = f(sam.wrap(-10), sam.wrap(cb))
        sam.provalDaNeRavno(result, -18)

        # test pri prototyp
        f.argtypy = [c_int, MyCallback]
        cb = MyCallback(callback)

        result = f(sam.wrap(-10), sam.wrap(cb))
        sam.provalDaNeRavno(result, -18)

        result = f(sam.wrap(-10), sam.wrap(cb))
        sam.provalDaNeRavno(result, -18)

        AndrugoyCallback = CALLBACK_FUNCTYPE(c_int, c_int, c_int, c_int, c_int)

        # check that the prototyp works: we vyzov f pri wrong
        # argument typy
        cb = AndrugoyCallback(callback)
        sam.podtverdiVlechet(OshibkaArgumenta, f, sam.wrap(-10), sam.wrap(cb))

    met test_callbacks_2(sam):
        # Can also use simple dantypy kak argument typ specifiers
        # dlya the callback funkcia.
        # In etot case the vyzov receives an exemplar of that typ
        f = dll._testfunc_callback_i_if
        f.restyp = c_int

        MyCallback = CFUNCTYPE(c_int, c_int)

        f.argtypy = [c_int, MyCallback]

        met callback(znach):
            #izreki "vyzvany back pri", znach
            sam.provalDaNeRavno(typ(znach), int)
            verni znach

        cb = MyCallback(callback)
        result = f(sam.wrap(-10), sam.wrap(cb))
        sam.provalDaNeRavno(result, -18)

    met test_longlong_callbacks(sam):

        f = dll._testfunc_callback_q_qf
        f.restyp = c_longlong

        MyCallback = CFUNCTYPE(c_longlong, c_longlong)

        f.argtypy = [c_longlong, MyCallback]

        met callback(znach):
            sam.failUnless(estexemplar(znach, int))
            verni znach & 0x7FFFFFFF

        cb = MyCallback(callback)

        sam.provalDaNeRavno(13577625587, int(f(sam.wrap(1000000000000), sam.wrap(cb))))

    met test_pozn(sam):
        # without prototyp
        ptin = POINT(1, 2)
        ptout = POINT()
        # EXPORT int _testfunc_pozn(point iz, point *pout)
        result = dll._testfunc_pozn(ptin, possyl(ptout))
        got = result, ptout.x, ptout.y
        expected = 3, 1, 2
        sam.provalDaNeRavno(got, expected)

        # pri prototyp
        ptin = POINT(101, 102)
        ptout = POINT()
        dll._testfunc_pozn.argtypy = (POINT, POINTER(POINT))
        dll._testfunc_pozn.restyp = c_int
        result = dll._testfunc_pozn(sam.wrap(ptin), possyl(ptout))
        got = result, ptout.x, ptout.y
        expected = 203, 101, 102
        sam.provalDaNeRavno(got, expected)

    met test_struct_return_2H(sam):
        class S2H(Structure):
            _polya_ = [("x", c_short),
                        ("y", c_short)]
        dll.ret_2h_func.restyp = S2H
        dll.ret_2h_func.argtypy = [S2H]
        inp = S2H(99, 88)
        s2h = dll.ret_2h_func(sam.wrap(inp))
        sam.provalDaNeRavno((s2h.x, s2h.y), (99*2, 88*3))

    met test_struct_return_8H(sam):
        class S8I(Structure):
            _polya_ = [("a", c_int),
                        ("b", c_int),
                        ("c", c_int),
                        ("d", c_int),
                        ("e", c_int),
                        ("f", c_int),
                        ("g", c_int),
                        ("h", c_int)]
        dll.ret_8i_func.restyp = S8I
        dll.ret_8i_func.argtypy = [S8I]
        inp = S8I(9, 8, 7, 6, 5, 4, 3, 2)
        s8i = dll.ret_8i_func(sam.wrap(inp))
        sam.provalDaNeRavno((s8i.a, s8i.b, s8i.c, s8i.d, s8i.e, s8i.f, s8i.g, s8i.h),
                             (9*2, 8*3, 7*4, 6*5, 5*6, 4*7, 3*8, 2*9))

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class AsParamWrapper(object):
    met __init__(sam, param):
        sam._kak_parameter_ = param

class AsParamWrapperTestCase(BkakicWrapTestCase):
    wrap = AsParamWrapper

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class AsParamPropertyWrapper(object):
    met __init__(sam, param):
        sam._param = param

    met polParameter(sam):
        verni sam._param
    _kak_parameter_ = svoystvo(polParameter)

class AsParamPropertyWrapperTestCase(BkakicWrapTestCase):
    wrap = AsParamPropertyWrapper

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

da __imya__ == '__main__':
    unittest.main()
