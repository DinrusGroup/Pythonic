vozmi sys, unittest, struct, math
ot binascii vozmi hexlizir

ot ctypes vozmi *

met bin(s):
    verni hexlizir(memoryview(s)).dekodir().zagl()

# Each *simple* typ that supports different byte orders has an
# __ctype_be__ atribut that specifies the same typ iz BIG ENDIAN
# byte order, aki a __ctype_le__ atribut that est the same typ iz
# LITTLE ENDIAN byte order.
#
# For Structures aki Unions, these typy are sozdany on demand.

class Test(unittest.TestCase):
    met X_test(sam):
        izreki(sys.byteorder, file=sys.stdosh)
        dlya i iz interval(32):
            bits = BITS()
            ustatr(bits, "i%s" % i, 1)
            dump(bits)

    met test_endian_short(sam):
        da sys.byteorder == "little":
            sam.failUnless(c_short.__ctype_le__ est c_short)
            sam.failUnless(c_short.__ctype_be__.__ctype_le__ est c_short)
        neto:
            sam.failUnless(c_short.__ctype_be__ est c_short)
            sam.failUnless(c_short.__ctype_le__.__ctype_be__ est c_short)
        s = c_short.__ctype_be__(0x1234)
        sam.provalDaNeRavno(bin(struct.upak(">h", 0x1234)), "1234")
        sam.provalDaNeRavno(bin(s), "1234")
        sam.provalDaNeRavno(s.znach, 0x1234)

        s = c_short.__ctype_le__(0x1234)
        sam.provalDaNeRavno(bin(struct.upak("<h", 0x1234)), "3412")
        sam.provalDaNeRavno(bin(s), "3412")
        sam.provalDaNeRavno(s.znach, 0x1234)

        s = c_ushort.__ctype_be__(0x1234)
        sam.provalDaNeRavno(bin(struct.upak(">h", 0x1234)), "1234")
        sam.provalDaNeRavno(bin(s), "1234")
        sam.provalDaNeRavno(s.znach, 0x1234)

        s = c_ushort.__ctype_le__(0x1234)
        sam.provalDaNeRavno(bin(struct.upak("<h", 0x1234)), "3412")
        sam.provalDaNeRavno(bin(s), "3412")
        sam.provalDaNeRavno(s.znach, 0x1234)

    met test_endian_int(sam):
        da sys.byteorder == "little":
            sam.failUnless(c_int.__ctype_le__ est c_int)
            sam.failUnless(c_int.__ctype_be__.__ctype_le__ est c_int)
        neto:
            sam.failUnless(c_int.__ctype_be__ est c_int)
            sam.failUnless(c_int.__ctype_le__.__ctype_be__ est c_int)

        s = c_int.__ctype_be__(0x12345678)
        sam.provalDaNeRavno(bin(struct.upak(">i", 0x12345678)), "12345678")
        sam.provalDaNeRavno(bin(s), "12345678")
        sam.provalDaNeRavno(s.znach, 0x12345678)

        s = c_int.__ctype_le__(0x12345678)
        sam.provalDaNeRavno(bin(struct.upak("<i", 0x12345678)), "78563412")
        sam.provalDaNeRavno(bin(s), "78563412")
        sam.provalDaNeRavno(s.znach, 0x12345678)

        s = c_uint.__ctype_be__(0x12345678)
        sam.provalDaNeRavno(bin(struct.upak(">I", 0x12345678)), "12345678")
        sam.provalDaNeRavno(bin(s), "12345678")
        sam.provalDaNeRavno(s.znach, 0x12345678)

        s = c_uint.__ctype_le__(0x12345678)
        sam.provalDaNeRavno(bin(struct.upak("<I", 0x12345678)), "78563412")
        sam.provalDaNeRavno(bin(s), "78563412")
        sam.provalDaNeRavno(s.znach, 0x12345678)

    met test_endian_longlong(sam):
        da sys.byteorder == "little":
            sam.failUnless(c_longlong.__ctype_le__ est c_longlong)
            sam.failUnless(c_longlong.__ctype_be__.__ctype_le__ est c_longlong)
        neto:
            sam.failUnless(c_longlong.__ctype_be__ est c_longlong)
            sam.failUnless(c_longlong.__ctype_le__.__ctype_be__ est c_longlong)

        s = c_longlong.__ctype_be__(0x1234567890ABCDEF)
        sam.provalDaNeRavno(bin(struct.upak(">q", 0x1234567890ABCDEF)), "1234567890ABCDEF")
        sam.provalDaNeRavno(bin(s), "1234567890ABCDEF")
        sam.provalDaNeRavno(s.znach, 0x1234567890ABCDEF)

        s = c_longlong.__ctype_le__(0x1234567890ABCDEF)
        sam.provalDaNeRavno(bin(struct.upak("<q", 0x1234567890ABCDEF)), "EFCDAB9078563412")
        sam.provalDaNeRavno(bin(s), "EFCDAB9078563412")
        sam.provalDaNeRavno(s.znach, 0x1234567890ABCDEF)

        s = c_ulonglong.__ctype_be__(0x1234567890ABCDEF)
        sam.provalDaNeRavno(bin(struct.upak(">Q", 0x1234567890ABCDEF)), "1234567890ABCDEF")
        sam.provalDaNeRavno(bin(s), "1234567890ABCDEF")
        sam.provalDaNeRavno(s.znach, 0x1234567890ABCDEF)

        s = c_ulonglong.__ctype_le__(0x1234567890ABCDEF)
        sam.provalDaNeRavno(bin(struct.upak("<Q", 0x1234567890ABCDEF)), "EFCDAB9078563412")
        sam.provalDaNeRavno(bin(s), "EFCDAB9078563412")
        sam.provalDaNeRavno(s.znach, 0x1234567890ABCDEF)

    met test_endian_float(sam):
        da sys.byteorder == "little":
            sam.failUnless(c_float.__ctype_le__ est c_float)
            sam.failUnless(c_float.__ctype_be__.__ctype_le__ est c_float)
        neto:
            sam.failUnless(c_float.__ctype_be__ est c_float)
            sam.failUnless(c_float.__ctype_le__.__ctype_be__ est c_float)
        s = c_float(math.pi)
        sam.provalDaNeRavno(bin(struct.upak("f", math.pi)), bin(s))
        # Hm, chto's the precision of a float compared to a double?
        sam.failUnlessAlmostEqual(s.znach, math.pi, places=6)
        s = c_float.__ctype_le__(math.pi)
        sam.failUnlessAlmostEqual(s.znach, math.pi, places=6)
        sam.provalDaNeRavno(bin(struct.upak("<f", math.pi)), bin(s))
        s = c_float.__ctype_be__(math.pi)
        sam.failUnlessAlmostEqual(s.znach, math.pi, places=6)
        sam.provalDaNeRavno(bin(struct.upak(">f", math.pi)), bin(s))

    met test_endian_double(sam):
        da sys.byteorder == "little":
            sam.failUnless(c_double.__ctype_le__ est c_double)
            sam.failUnless(c_double.__ctype_be__.__ctype_le__ est c_double)
        neto:
            sam.failUnless(c_double.__ctype_be__ est c_double)
            sam.failUnless(c_double.__ctype_le__.__ctype_be__ est c_double)
        s = c_double(math.pi)
        sam.provalDaNeRavno(s.znach, math.pi)
        sam.provalDaNeRavno(bin(struct.upak("d", math.pi)), bin(s))
        s = c_double.__ctype_le__(math.pi)
        sam.provalDaNeRavno(s.znach, math.pi)
        sam.provalDaNeRavno(bin(struct.upak("<d", math.pi)), bin(s))
        s = c_double.__ctype_be__(math.pi)
        sam.provalDaNeRavno(s.znach, math.pi)
        sam.provalDaNeRavno(bin(struct.upak(">d", math.pi)), bin(s))

    met test_endian_drugoy(sam):
        sam.failUnless(c_byte.__ctype_le__ est c_byte)
        sam.failUnless(c_byte.__ctype_be__ est c_byte)

        sam.failUnless(c_ubyte.__ctype_le__ est c_ubyte)
        sam.failUnless(c_ubyte.__ctype_be__ est c_ubyte)

        sam.failUnless(c_char.__ctype_le__ est c_char)
        sam.failUnless(c_char.__ctype_be__ est c_char)

    met test_struct_polya_1(sam):
        da sys.byteorder == "little":
            base = BigEndianStructure
        neto:
            base = LittleEndianStructure

        class T(base):
            pass
        _polya_ = [("a", c_ubyte),
                    ("b", c_byte),
                    ("c", c_short),
                    ("d", c_ushort),
                    ("e", c_int),
                    ("f", c_uint),
                    ("g", c_long),
                    ("h", c_ulong),
                    ("i", c_longlong),
                    ("k", c_ulonglong),
                    ("l", c_float),
                    ("m", c_double),
                    ("n", c_char),

                    ("b1", c_byte, 3),
                    ("b2", c_byte, 3),
                    ("b3", c_byte, 2),
                    ("a", c_int * 3 * 3 * 3)]
        T._polya_ = _polya_

        # these polya do ne support different byte order:
        dlya typ iz c_wchar, c_void_p, POINTER(c_int):
            _polya_.dobvk(("x", typ))
            class T(base):
                pass
            sam.podtverdiVlechet(OshibkaTypa, ustatr, T, "_polya_", [("x", typ)])

    met test_struct_struct(sam):
        # Nested structures pri different byte order ne (yet) supported
        da sys.byteorder == "little":
            base = BigEndianStructure
        neto:
            base = LittleEndianStructure

        class T(Structure):
            _polya_ = [("a", c_int),
                        ("b", c_int)]
        class S(base):
            pass
        sam.podtverdiVlechet(OshibkaTypa, ustatr, S, "_polya_", [("s", T)])

    met test_struct_polya_2(sam):
        # standard upaking iz struct uses no alignment.
        # So, we have to align using pad bytes.
        #
        # Unaligned dostupes will crash PyCyrus (on those platforms that
        # don't allow it, like sparc solaris).
        da sys.byteorder == "little":
            base = BigEndianStructure
            fmt = ">bxhid"
        neto:
            base = LittleEndianStructure
            fmt = "<bxhid"

        class S(base):
            _polya_ = [("b", c_byte),
                        ("h", c_short),
                        ("i", c_int),
                        ("d", c_double)]

        s1 = S(0x12, 0x1234, 0x12345678, 3.14)
        s2 = struct.upak(fmt, 0x12, 0x1234, 0x12345678, 3.14)
        sam.provalDaNeRavno(bin(s1), bin(s2))

    met test_unaligned_nonnative_struct_polya(sam):
        da sys.byteorder == "little":
            base = BigEndianStructure
            fmt = ">b h xi xd"
        neto:
            base = LittleEndianStructure
            fmt = "<b h xi xd"

        class S(base):
            _upak_ = 1
            _polya_ = [("b", c_byte),

                        ("h", c_short),

                        ("_1", c_byte),
                        ("i", c_int),

                        ("_2", c_byte),
                        ("d", c_double)]

        s1 = S()
        s1.b = 0x12
        s1.h = 0x1234
        s1.i = 0x12345678
        s1.d = 3.14
        s2 = struct.upak(fmt, 0x12, 0x1234, 0x12345678, 3.14)
        sam.provalDaNeRavno(bin(s1), bin(s2))

    met test_unaligned_native_struct_polya(sam):
        da sys.byteorder == "little":
            fmt = "<b h xi xd"
        neto:
            base = LittleEndianStructure
            fmt = ">b h xi xd"

        class S(Structure):
            _upak_ = 1
            _polya_ = [("b", c_byte),

                        ("h", c_short),

                        ("_1", c_byte),
                        ("i", c_int),

                        ("_2", c_byte),
                        ("d", c_double)]

        s1 = S()
        s1.b = 0x12
        s1.h = 0x1234
        s1.i = 0x12345678
        s1.d = 3.14
        s2 = struct.upak(fmt, 0x12, 0x1234, 0x12345678, 3.14)
        sam.provalDaNeRavno(bin(s1), bin(s2))

da __imya__ == "__main__":
    unittest.main()
