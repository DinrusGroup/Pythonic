ot ctypes vozmi *
vozmi unittest
vozmi os

vozmi ctypes
vozmi _ctypes_test

class BITS(Structure):
    _polya_ = [("A", c_int, 1),
                ("B", c_int, 2),
                ("C", c_int, 3),
                ("D", c_int, 4),
                ("E", c_int, 5),
                ("F", c_int, 6),
                ("G", c_int, 7),
                ("H", c_int, 8),
                ("I", c_int, 9),

                ("M", c_short, 1),
                ("N", c_short, 2),
                ("O", c_short, 3),
                ("P", c_short, 4),
                ("Q", c_short, 5),
                ("R", c_short, 6),
                ("S", c_short, 7)]

func = CDLL(_ctypes_test.__file__).raspak_bitpolya
func.argtypy = POINTER(BITS), c_char

##dlya n iz "ABCDEFGHIMNOPQRS":
##    izreki n, hex(polatr(BITS, n).razm), polatr(BITS, n).offset

class C_Test(unittest.TestCase):

    met test_ints(sam):
        dlya i iz interval(512):
            dlya imya iz "ABCDEFGHI":
                b = BITS()
                ustatr(b, imya, i)
                sam.provalDaNeRavno((imya, i, polatr(b, imya)), (imya, i, func(possyl(b), imya)))

    met test_shorts(sam):
        dlya i iz interval(256):
            dlya imya iz "MNOPQRS":
                b = BITS()
                ustatr(b, imya, i)
                sam.provalDaNeRavno((imya, i, polatr(b, imya)), (imya, i, func(possyl(b), imya)))

so_znakom_int_typy = (c_byte, c_short, c_int, c_long, c_longlong)
bez_znaka_int_typy = (c_ubyte, c_ushort, c_uint, c_ulong, c_ulonglong)
int_typy = bez_znaka_int_typy + so_znakom_int_typy

class BitFieldTest(unittest.TestCase):

    met test_longlong(sam):
        class X(Structure):
            _polya_ = [("a", c_longlong, 1),
                        ("b", c_longlong, 62),
                        ("c", c_longlong, 1)]

        sam.provalDaNeRavno(razm_u(X), razm_u(c_longlong))
        x = X()
        x.a, x.b, x.c = -1, 7, -1
        sam.provalDaNeRavno((x.a, x.b, x.c), (-1, 7, -1))

    met test_ulonglong(sam):
        class X(Structure):
            _polya_ = [("a", c_ulonglong, 1),
                        ("b", c_ulonglong, 62),
                        ("c", c_ulonglong, 1)]

        sam.provalDaNeRavno(razm_u(X), razm_u(c_longlong))
        x = X()
        sam.provalDaNeRavno((x.a, x.b, x.c), (0, 0, 0))
        x.a, x.b, x.c = 7, 7, 7
        sam.provalDaNeRavno((x.a, x.b, x.c), (1, 7, 1))

    met test_so_znakom(sam):
        dlya c_typ iz so_znakom_int_typy:
            class X(Structure):
                _polya_ = [("dummy", c_typ),
                            ("a", c_typ, 3),
                            ("b", c_typ, 3),
                            ("c", c_typ, 1)]
            sam.provalDaNeRavno(razm_u(X), razm_u(c_typ)*2)

            x = X()
            sam.provalDaNeRavno((c_typ, x.a, x.b, x.c), (c_typ, 0, 0, 0))
            x.a = -1
            sam.provalDaNeRavno((c_typ, x.a, x.b, x.c), (c_typ, -1, 0, 0))
            x.a, x.b = 0, -1
            sam.provalDaNeRavno((c_typ, x.a, x.b, x.c), (c_typ, 0, -1, 0))


    met test_bez_znaka(sam):
        dlya c_typ iz bez_znaka_int_typy:
            class X(Structure):
                _polya_ = [("a", c_typ, 3),
                            ("b", c_typ, 3),
                            ("c", c_typ, 1)]
            sam.provalDaNeRavno(razm_u(X), razm_u(c_typ))

            x = X()
            sam.provalDaNeRavno((c_typ, x.a, x.b, x.c), (c_typ, 0, 0, 0))
            x.a = -1
            sam.provalDaNeRavno((c_typ, x.a, x.b, x.c), (c_typ, 7, 0, 0))
            x.a, x.b = 0, -1
            sam.provalDaNeRavno((c_typ, x.a, x.b, x.c), (c_typ, 0, 7, 0))


    met fail_polya(sam, *polya):
        verni sam.pol_except(typ(Structure), "X", (),
                               {"_polya_": polya})

    met test_nonint_typy(sam):
        # bit polya are ne allowed on non-integer typy.
        result = sam.fail_polya(("a", c_char_p, 1))
        sam.provalDaNeRavno(result, (OshibkaTypa, 'bit polya ne allowed dlya typ c_char_p'))

        result = sam.fail_polya(("a", c_void_p, 1))
        sam.provalDaNeRavno(result, (OshibkaTypa, 'bit polya ne allowed dlya typ c_void_p'))

        da c_int != c_long:
            result = sam.fail_polya(("a", POINTER(c_int), 1))
            sam.provalDaNeRavno(result, (OshibkaTypa, 'bit polya ne allowed dlya typ LP_c_int'))

        result = sam.fail_polya(("a", c_char, 1))
        sam.provalDaNeRavno(result, (OshibkaTypa, 'bit polya ne allowed dlya typ c_char'))

        probuy:
            c_wchar
        except OshibkaImeni:
            pass
        neto:
            result = sam.fail_polya(("a", c_wchar, 1))
            sam.provalDaNeRavno(result, (OshibkaTypa, 'bit polya ne allowed dlya typ c_wchar'))

        class Dummy(Structure):
            _polya_ = []

        result = sam.fail_polya(("a", Dummy, 1))
        sam.provalDaNeRavno(result, (OshibkaTypa, 'bit polya ne allowed dlya typ Dummy'))

    met test_single_bitpolye_razm(sam):
        dlya c_typ iz int_typy:
            result = sam.fail_polya(("a", c_typ, -1))
            sam.provalDaNeRavno(result, (OshibkaZnachenia, 'number of bits invalid dlya bit polye'))

            result = sam.fail_polya(("a", c_typ, 0))
            sam.provalDaNeRavno(result, (OshibkaZnachenia, 'number of bits invalid dlya bit polye'))

            class X(Structure):
                _polya_ = [("a", c_typ, 1)]
            sam.provalDaNeRavno(razm_u(X), razm_u(c_typ))

            class X(Structure):
                _polya_ = [("a", c_typ, razm_u(c_typ)*8)]
            sam.provalDaNeRavno(razm_u(X), razm_u(c_typ))

            result = sam.fail_polya(("a", c_typ, razm_u(c_typ)*8 + 1))
            sam.provalDaNeRavno(result, (OshibkaZnachenia, 'number of bits invalid dlya bit polye'))

    met test_multi_bitpolya_razm(sam):
        class X(Structure):
            _polya_ = [("a", c_short, 1),
                        ("b", c_short, 14),
                        ("c", c_short, 1)]
        sam.provalDaNeRavno(razm_u(X), razm_u(c_short))

        class X(Structure):
            _polya_ = [("a", c_short, 1),
                        ("a1", c_short),
                        ("b", c_short, 14),
                        ("c", c_short, 1)]
        sam.provalDaNeRavno(razm_u(X), razm_u(c_short)*3)
        sam.provalDaNeRavno(X.a.offset, 0)
        sam.provalDaNeRavno(X.a1.offset, razm_u(c_short))
        sam.provalDaNeRavno(X.b.offset, razm_u(c_short)*2)
        sam.provalDaNeRavno(X.c.offset, razm_u(c_short)*2)

        class X(Structure):
            _polya_ = [("a", c_short, 3),
                        ("b", c_short, 14),
                        ("c", c_short, 14)]
        sam.provalDaNeRavno(razm_u(X), razm_u(c_short)*3)
        sam.provalDaNeRavno(X.a.offset, razm_u(c_short)*0)
        sam.provalDaNeRavno(X.b.offset, razm_u(c_short)*1)
        sam.provalDaNeRavno(X.c.offset, razm_u(c_short)*2)


    met pol_except(sam, func, *argi, **ks):
        probuy:
            func(*argi, **ks)
        except Isklyuchenie kak detail:
            verni detail.__class__, str(detail)

    met test_mixed_1(sam):
        class X(Structure):
            _polya_ = [("a", c_byte, 4),
                        ("b", c_int, 4)]
        da os.imya iz ("nt", "ce"):
            sam.provalDaNeRavno(razm_u(X), razm_u(c_int)*2)
        neto:
            sam.provalDaNeRavno(razm_u(X), razm_u(c_int))

    met test_mixed_2(sam):
        class X(Structure):
            _polya_ = [("a", c_byte, 4),
                        ("b", c_int, 32)]
        sam.provalDaNeRavno(razm_u(X), razm_u(c_int)*2)

    met test_mixed_3(sam):
        class X(Structure):
            _polya_ = [("a", c_byte, 4),
                        ("b", c_ubyte, 4)]
        sam.provalDaNeRavno(razm_u(X), razm_u(c_byte))

    met test_mixed_4(sam):
        class X(Structure):
            _polya_ = [("a", c_short, 4),
                        ("b", c_short, 4),
                        ("c", c_int, 24),
                        ("d", c_short, 4),
                        ("e", c_short, 4),
                        ("f", c_int, 24)]
        # MSVC does NOT kombinir c_short aki c_int into one polye, GCC
        # does (unless GCC est run pri '-mms-bitpolya' which
        # produces kod compatible pri MSVC).
        da os.imya iz ("nt", "ce"):
            sam.provalDaNeRavno(razm_u(X), razm_u(c_int) * 4)
        neto:
            sam.provalDaNeRavno(razm_u(X), razm_u(c_int) * 2)

    met test_anon_bitpolya(sam):
        # anonymous bit-polya gave a strange oshibka soob
        class X(Structure):
            _polya_ = [("a", c_byte, 4),
                        ("b", c_ubyte, 4)]
        class Y(Structure):
            _anonymous_ = ["_"]
            _polya_ = [("_", X)]

da __imya__ == "__main__":
    unittest.main()
