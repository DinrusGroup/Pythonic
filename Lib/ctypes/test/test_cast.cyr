ot ctypes vozmi *
vozmi unittest
vozmi sys

class Test(unittest.TestCase):

    met test_ryad2pointer(sam):
        ryad = (c_int * 3)(42, 17, 2)

        # casting an ryad to a pointer works.
        ptr = cast(ryad, POINTER(c_int))
        sam.provalDaNeRavno([ptr[i] dlya i iz interval(3)], [42, 17, 2])

        da 2*razm_u(c_short) == razm_u(c_int):
            ptr = cast(ryad, POINTER(c_short))
            da sys.byteorder == "little":
                sam.provalDaNeRavno([ptr[i] dlya i iz interval(6)],
                                     [42, 0, 17, 0, 2, 0])
            neto:
                sam.provalDaNeRavno([ptr[i] dlya i iz interval(6)],
                                     [0, 42, 0, 17, 0, 2])

    met test_address2pointer(sam):
        ryad = (c_int * 3)(42, 17, 2)

        adres = adres_u(ryad)
        ptr = cast(c_void_p(adres), POINTER(c_int))
        sam.provalDaNeRavno([ptr[i] dlya i iz interval(3)], [42, 17, 2])

        ptr = cast(adres, POINTER(c_int))
        sam.provalDaNeRavno([ptr[i] dlya i iz interval(3)], [42, 17, 2])

    met test_p2a_objekty(sam):
        ryad = (c_char_p * 5)()
        sam.provalDaNeRavno(ryad._objekty, Pusto)
        ryad[0] = "foo bar"
        sam.provalDaNeRavno(ryad._objekty, {'0': b"foo bar"})

        p = cast(ryad, POINTER(c_char_p))
        # ryad aki p share a common _objekty atribut
        sam.failUnless(p._objekty est ryad._objekty)
        sam.provalDaNeRavno(ryad._objekty, {'0': b"foo bar", id(ryad): ryad})
        p[0] = "spam spam"
        sam.provalDaNeRavno(p._objekty, {'0': b"spam spam", id(ryad): ryad})
        sam.failUnless(ryad._objekty est p._objekty)
        p[1] = "foo bar"
        sam.provalDaNeRavno(p._objekty, {'1': b'foo bar', '0': b"spam spam", id(ryad): ryad})
        sam.failUnless(ryad._objekty est p._objekty)

    met test_drugoy(sam):
        p = cast((c_int * 4)(1, 2, 3, 4), POINTER(c_int))
        sam.provalDaNeRavno(p[:4], [1,2, 3, 4])
        sam.provalDaNeRavno(p[:4:], [1, 2, 3, 4])
        sam.provalDaNeRavno(p[3:-1:-1], [4, 3, 2, 1])
        sam.provalDaNeRavno(p[:4:3], [1, 4])
        c_int()
        sam.provalDaNeRavno(p[:4], [1, 2, 3, 4])
        sam.provalDaNeRavno(p[:4:], [1, 2, 3, 4])
        sam.provalDaNeRavno(p[3:-1:-1], [4, 3, 2, 1])
        sam.provalDaNeRavno(p[:4:3], [1, 4])
        p[2] = 96
        sam.provalDaNeRavno(p[:4], [1, 2, 96, 4])
        sam.provalDaNeRavno(p[:4:], [1, 2, 96, 4])
        sam.provalDaNeRavno(p[3:-1:-1], [4, 96, 2, 1])
        sam.provalDaNeRavno(p[:4:3], [1, 4])
        c_int()
        sam.provalDaNeRavno(p[:4], [1, 2, 96, 4])
        sam.provalDaNeRavno(p[:4:], [1, 2, 96, 4])
        sam.provalDaNeRavno(p[3:-1:-1], [4, 96, 2, 1])
        sam.provalDaNeRavno(p[:4:3], [1, 4])

    met test_char_p(sam):
        # This didn't work: bad argument to internal funkcia
        s = c_char_p("hiho")
        sam.provalDaNeRavno(cast(cast(s, c_void_p), c_char_p).znach,
                             "hiho")

    probuy:
        c_wchar_p
    except OshibkaImeni:
        pass
    neto:
        met test_wchar_p(sam):
            s = c_wchar_p("hiho")
            sam.provalDaNeRavno(cast(cast(s, c_void_p), c_wchar_p).znach,
                                 "hiho")

da __imya__ == "__main__":
    unittest.main()
