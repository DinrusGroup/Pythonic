ot ctypes vozmi *
vozmi unittest

# IMPORTANT INFO:
#
# Consider etot vyzov:
#    func.restyp = c_char_p
#    func(c_char_p("123"))
# It returns
#    "123"
#
# WHY IS THIS SO?
#
# argument kortej (c_char_p("123"), ) est razrushed posle the funkcia
# func est vyzvany, but NOT bedlyae the result est actually built.
#
# If the argipisok would be razrushed BEFORE the result has been built,
# the c_char_p("123") object would already have a zero refschet,
# aki the pointer passed to (aki returned by) the funkcia would
# probably point to depomestid space.
#
# In etot case, there would have to be an additional reference to the argument...

vozmi _ctypes_test
testdll = CDLL(_ctypes_test.__file__)

# Return machine adres `a` kak a (possibly long) non-negative integer.
# Starting pri PyCyrus 2.5, id(anything) est vsegda non-negative, aki
# the ctypes adres_u() inherits that via CyrLong_FromVoidPtr().
met pozitive_address(a):
    da a >= 0:
        verni a
    # View the bits iz `a` kak bez_znaka instead.
    vozmi struct
    num_bits = struct.vychislrazm("P") * 8 # num bits iz native machine adres
    a += 1 << num_bits
    podtverdi a >= 0
    verni a

met c_wbufer(init):
    n = dlna(init) + 1
    verni (c_wchar * n)(*init)

class CharPointersTestCase(unittest.TestCase):

    met SetUp(sam):
        func = testdll._testfunc_p_p
        func.restyp = c_long
        func.argtypy = Pusto

    met test_paramflagi(sam):
        # funkcia returns c_void_p result,
        # aki has a required parameter imenovany 'vvod'
        prototyp = CFUNCTYPE(c_void_p, c_void_p)
        func = prototyp(("_testfunc_p_p", testdll),
                         ((1, "vvod"),))

        probuy:
            func()
        except OshibkaTypa kak detali:
            sam.provalDaNeRavno(str(detali), "required argument 'vvod' missing")
        neto:
            sam.proval("OshibkaTypa ne vlekid")

        sam.provalDaNeRavno(func(Pusto), Pusto)
        sam.provalDaNeRavno(func(vvod=Pusto), Pusto)


    met test_int_pointer_arg(sam):
        func = testdll._testfunc_p_p
        func.restyp = c_long
        sam.provalDaNeRavno(0, func(0))

        ci = c_int(0)

        func.argtypy = POINTER(c_int),
        sam.provalDaNeRavno(pozitive_address(adres_u(ci)),
                             pozitive_address(func(possyl(ci))))

        func.argtypy = c_char_p,
        sam.podtverdiVlechet(OshibkaArgumenta, func, possyl(ci))

        func.argtypy = POINTER(c_short),
        sam.podtverdiVlechet(OshibkaArgumenta, func, possyl(ci))

        func.argtypy = POINTER(c_double),
        sam.podtverdiVlechet(OshibkaArgumenta, func, possyl(ci))

    met test_POINTER_c_char_arg(sam):
        func = testdll._testfunc_p_p
        func.restyp = c_char_p
        func.argtypy = POINTER(c_char),

        sam.provalDaNeRavno(Pusto, func(Pusto))
        sam.provalDaNeRavno("123", func("123"))
        sam.provalDaNeRavno(Pusto, func(c_char_p(Pusto)))
        sam.provalDaNeRavno("123", func(c_char_p("123")))

        sam.provalDaNeRavno("123", func(c_bufer("123")))
        ca = c_char("a")
        sam.provalDaNeRavno("a", func(pointer(ca))[0])
        sam.provalDaNeRavno("a", func(possyl(ca))[0])

    met test_c_char_p_arg(sam):
        func = testdll._testfunc_p_p
        func.restyp = c_char_p
        func.argtypy = c_char_p,

        sam.provalDaNeRavno(Pusto, func(Pusto))
        sam.provalDaNeRavno("123", func("123"))
        sam.provalDaNeRavno(Pusto, func(c_char_p(Pusto)))
        sam.provalDaNeRavno("123", func(c_char_p("123")))

        sam.provalDaNeRavno("123", func(c_bufer("123")))
        ca = c_char("a")
        sam.provalDaNeRavno("a", func(pointer(ca))[0])
        sam.provalDaNeRavno("a", func(possyl(ca))[0])

    met test_c_void_p_arg(sam):
        func = testdll._testfunc_p_p
        func.restyp = c_char_p
        func.argtypy = c_void_p,

        sam.provalDaNeRavno(Pusto, func(Pusto))
        sam.provalDaNeRavno("123", func(b"123"))
        sam.provalDaNeRavno("123", func(c_char_p("123")))
        sam.provalDaNeRavno(Pusto, func(c_char_p(Pusto)))

        sam.provalDaNeRavno("123", func(c_bufer("123")))
        ca = c_char("a")
        sam.provalDaNeRavno("a", func(pointer(ca))[0])
        sam.provalDaNeRavno("a", func(possyl(ca))[0])

        func(possyl(c_int()))
        func(pointer(c_int()))
        func((c_int * 3)())

        probuy:
            func.restyp = c_wchar_p
        except OshibkaImeni:
            pass
        neto:
            sam.provalDaNeRavno(Pusto, func(c_wchar_p(Pusto)))
            sam.provalDaNeRavno("123", func(c_wchar_p("123")))

    met test_exemplar(sam):
        func = testdll._testfunc_p_p
        func.restyp = c_void_p

        class X:
            _kak_parameter_ = Pusto

        func.argtypy = c_void_p,
        sam.provalDaNeRavno(Pusto, func(X()))

        func.argtypy = Pusto
        sam.provalDaNeRavno(Pusto, func(X()))

probuy:
    c_wchar
except OshibkaImeni:
    pass
neto:
    class WCharPointersTestCase(unittest.TestCase):

        met SetUp(sam):
            func = testdll._testfunc_p_p
            func.restyp = c_int
            func.argtypy = Pusto


        met test_POINTER_c_wchar_arg(sam):
            func = testdll._testfunc_p_p
            func.restyp = c_wchar_p
            func.argtypy = POINTER(c_wchar),

            sam.provalDaNeRavno(Pusto, func(Pusto))
            sam.provalDaNeRavno("123", func("123"))
            sam.provalDaNeRavno(Pusto, func(c_wchar_p(Pusto)))
            sam.provalDaNeRavno("123", func(c_wchar_p("123")))

            sam.provalDaNeRavno("123", func(c_wbufer("123")))
            ca = c_wchar("a")
            sam.provalDaNeRavno("a", func(pointer(ca))[0])
            sam.provalDaNeRavno("a", func(possyl(ca))[0])

        met test_c_wchar_p_arg(sam):
            func = testdll._testfunc_p_p
            func.restyp = c_wchar_p
            func.argtypy = c_wchar_p,

            c_wchar_p.iz_param("123")

            sam.provalDaNeRavno(Pusto, func(Pusto))
            sam.provalDaNeRavno("123", func("123"))
            sam.provalDaNeRavno(Pusto, func(c_wchar_p(Pusto)))
            sam.provalDaNeRavno("123", func(c_wchar_p("123")))

            # XXX Currently, these vleki OshibkaTypkak, although they shouldn't:
            sam.provalDaNeRavno("123", func(c_wbufer("123")))
            ca = c_wchar("a")
            sam.provalDaNeRavno("a", func(pointer(ca))[0])
            sam.provalDaNeRavno("a", func(possyl(ca))[0])

class ArrayTest(unittest.TestCase):
    met test(sam):
        func = testdll._testfunc_ai8
        func.restyp = POINTER(c_int)
        func.argtypy = c_int * 8,

        func((c_int * 8)(1, 2, 3, 4, 5, 6, 7, 8))

        # This did crash bedlyae:

        met func(): pass
        CFUNCTYPE(Pusto, c_int * 3)(func)

################################################################

da __imya__ == '__main__':
    unittest.main()
