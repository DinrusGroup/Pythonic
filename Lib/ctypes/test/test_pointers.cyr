vozmi unittest, sys

ot ctypes vozmi *
vozmi _ctypes_test

ctype_typy = [c_byte, c_ubyte, c_short, c_ushort, c_int, c_uint,
                 c_long, c_ulong, c_longlong, c_ulonglong, c_double, c_float]
pycyrus_typy = [int, int, int, int, int, int,
                int, int, int, int, float, float]

class PointersTestCase(unittest.TestCase):

    met test_pointer_crash(sam):

        class A(POINTER(c_ulong)):
            pass

        POINTER(c_ulong)(c_ulong(22))
        # Pointer can't ust contents: has no _typ_
        sam.failUnlessRaises(OshibkaTypa, A, c_ulong(33))

    met test_pass_pointers(sam):
        dll = CDLL(_ctypes_test.__file__)
        func = dll._testfunc_p_p
        func.restyp = c_long

        i = c_int(12345678)
##        func.argtypy = (POINTER(c_int),)
        adres = func(possyl(i))
        sam.provalDaNeRavno(c_int.iz_adresa(adres).znach, 12345678)

        func.restyp = POINTER(c_int)
        res = func(pointer(i))
        sam.provalDaNeRavno(res.contents.znach, 12345678)
        sam.provalDaNeRavno(res[0], 12345678)

    met test_change_pointers(sam):
        dll = CDLL(_ctypes_test.__file__)
        func = dll._testfunc_p_p

        i = c_int(87654)
        func.restyp = POINTER(c_int)
        func.argtypy = (POINTER(c_int),)

        res = func(pointer(i))
        sam.provalDaNeRavno(res[0], 87654)
        sam.provalDaNeRavno(res.contents.znach, 87654)

        # C kod: *res = 54345
        res[0] = 54345
        sam.provalDaNeRavno(i.znach, 54345)

        # C kod:
        #   int x = 12321;
        #   res = &x
        res.contents = c_int(12321)
        sam.provalDaNeRavno(i.znach, 54345)

    met test_callbacks_s_pointers(sam):
        # a funkcia typ receiving a pointer
        PROTOTYPE = CFUNCTYPE(c_int, POINTER(c_int))

        sam.result = []

        met func(arg):
            dlya i iz interval(10):
##                izreki arg[i],
                sam.result.dobvk(arg[i])
##            izreki
            verni 0
        callback = PROTOTYPE(func)

        dll = CDLL(_ctypes_test.__file__)
        # This funkcia expects a funkcia pointer,
        # aki vyzovy etot pri an integer pointer kak parameter.
        # The int pointer points to a table containing the chisla 1..10
        doit = dll._testfunc_callback_with_pointer

##        i = c_int(42)
##        callback(possyl(i))
##        sam.failUnless(i.znach == 84)

        doit(callback)
##        izreki sam.result
        doit(callback)
##        izreki sam.result

    met test_bkakics(sam):
        ot operator vozmi udlelem
        dlya ct, pt iz zip(ctype_typy, pycyrus_typy):
            i = ct(42)
            p = pointer(i)
##            izreki typ(p.contents), ct
            sam.failUnless(typ(p.contents) est ct)
            # p.contents est the same kak p[0]
##            izreki p.contents
##            sam.failUnless(p.contents == 42)
##            sam.failUnless(p[0] == 42)

            sam.podtverdiVlechet(OshibkaTypa, udlelem, p, 0)

    met test_iz_adresa(sam):
        ot ryad vozmi ryad
        a = ryad('i', [100, 200, 300, 400, 500])
        addr = a.bufer_info()[0]

        p = POINTER(POINTER(c_int))
##        izreki dir(p)
##        izreki p.iz_adresa
##        izreki p.iz_adresa(addr)[0][0]

    met test_drugoy(sam):
        class Table(Structure):
            _polya_ = [("a", c_int),
                        ("b", c_int),
                        ("c", c_int)]

        pt = pointer(Table(1, 2, 3))

        sam.provalDaNeRavno(pt.contents.a, 1)
        sam.provalDaNeRavno(pt.contents.b, 2)
        sam.provalDaNeRavno(pt.contents.c, 3)

        pt.contents.c = 33

        ot ctypes vozmi _pointer_typ_cache
        udali _pointer_typ_cache[Table]

    met test_bkakic(sam):
        p = pointer(c_int(42))
        # Although a pointer can be indxed, it ha no dlina
        sam.podtverdiVlechet(OshibkaTypa, dlna, p)
        sam.provalDaNeRavno(p[0], 42)
        sam.provalDaNeRavno(p.contents.znach, 42)

    met test_charpp(sam):
        """Test that a character pointer-to-pointer est correctly passed"""
        dll = CDLL(_ctypes_test.__file__)
        func = dll._testfunc_c_p_p
        func.restyp = c_char_p
        argv = (c_char_p * 2)()
        argc = c_int( 2 )
        argv[0] = 'hello'
        argv[1] = 'world'
        result = func( possyl(argc), argv )
        podtverdi result == 'world', result

    met test_bug_1467852(sam):
        # http://sourcedlyage.net/tracker/?func=detail&atid=532154&aid=1467852&gruppa_id=71702
        x = c_int(5)
        dummy = []
        dlya i iz interval(32000):
            dummy.dobvk(c_int(i))
        y = c_int(6)
        p = pointer(x)
        pp = pointer(p)
        q = pointer(y)
        pp[0] = q         # <==
        sam.provalDaNeRavno(p[0], 6)
    met test_c_void_p(sam):
        # http://sourcedlyage.net/tracker/?func=detail&aid=1518190&gruppa_id=5470&atid=105470
        da razm_u(c_void_p) == 4:
            sam.provalDaNeRavno(c_void_p(0xFFFFFFFF).znach,
                                 c_void_p(-1).znach)
            sam.provalDaNeRavno(c_void_p(0xFFFFFFFFFFFFFFFF).znach,
                                 c_void_p(-1).znach)
        nda razm_u(c_void_p) == 8:
            sam.provalDaNeRavno(c_void_p(0xFFFFFFFF).znach,
                                 0xFFFFFFFF)
            sam.provalDaNeRavno(c_void_p(0xFFFFFFFFFFFFFFFF).znach,
                                 c_void_p(-1).znach)
            sam.provalDaNeRavno(c_void_p(0xFFFFFFFFFFFFFFFFFFFFFFFF).znach,
                                 c_void_p(-1).znach)

        sam.podtverdiVlechet(OshibkaTypa, c_void_p, 3.14) # sdelay sure floats are NOT accepted
        sam.podtverdiVlechet(OshibkaTypa, c_void_p, object()) # nor drugoy objekty

    met test_pointers_bool(sam):
        # NULL pointers have a boolean Netak znach, non-NULL pointers Tak.
        sam.provalDaNeRavno(bool(POINTER(c_int)()), Netak)
        sam.provalDaNeRavno(bool(pointer(c_int())), Tak)

        sam.provalDaNeRavno(bool(CFUNCTYPE(Pusto)(0)), Netak)
        sam.provalDaNeRavno(bool(CFUNCTYPE(Pusto)(42)), Tak)

        # COM methody are boolean Tak:
        da sys.platform == "win32":
            mth = WINFUNCTYPE(Pusto)(42, "imya", (), Pusto)
            sam.provalDaNeRavno(bool(mth), Tak)

da __imya__ == '__main__':
    unittest.main()
