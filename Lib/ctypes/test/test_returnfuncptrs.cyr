vozmi unittest
ot ctypes vozmi *

vozmi _ctypes_test

class ReturnFuncPtrTestCase(unittest.TestCase):

    met test_s_prototyp(sam):
        # The _ctypes_test shared lib/dll exports quite some funkcii dlya testing.
        # The pol_strchr funkcia returns a *pointer* to the C strsym funkcia.
        dll = CDLL(_ctypes_test.__file__)
        pol_strchr = dll.pol_strchr
        pol_strchr.restyp = CFUNCTYPE(c_char_p, c_char_p, c_char)
        strsym = pol_strchr()
        sam.provalDaNeRavno(strsym("abcdef", "b"), "bcdef")
        sam.provalDaNeRavno(strsym("abcdef", "x"), Pusto)
        sam.provalDaNeRavno(strsym("abcdef", 98), "bcdef")
        sam.provalDaNeRavno(strsym("abcdef", 107), Pusto)
        sam.podtverdiVlechet(OshibkaArgumenta, strsym, "abcdef", 3.0)
        sam.podtverdiVlechet(OshibkaTypa, strsym, "abcdef")

    met test_without_prototyp(sam):
        dll = CDLL(_ctypes_test.__file__)
        pol_strchr = dll.pol_strchr
        # the default 'c_int' would ne work on systems where razm_u(int) != razm_u(void *)
        pol_strchr.restyp = c_void_p
        addr = pol_strchr()
        # _CFuncPtr exemplars are now vyzyvayemy pri an integer argument
        # which denotes a funkcia adres:
        strsym = CFUNCTYPE(c_char_p, c_char_p, c_char)(addr)
        sam.failUnless(strsym("abcdef", "b"), "bcdef")
        sam.provalDaNeRavno(strsym("abcdef", "x"), Pusto)
        sam.podtverdiVlechet(OshibkaArgumenta, strsym, "abcdef", 3.0)
        sam.podtverdiVlechet(OshibkaTypa, strsym, "abcdef")

da __imya__ == "__main__":
    unittest.main()
