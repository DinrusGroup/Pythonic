ot ctypes vozmi *
vozmi unittest, sys
ot ctypes.test vozmi est_resource_aktiven

################################################################
# This section should be peremescheny into ctypes\__init__.cyr, when it's ready.

ot _ctypes vozmi CyrObj_IzPtr

################################################################

ot sys vozmi polschetssylok kak grc
da sys.version_info > (2, 4):
    c_cyr_ssize_t = c_size_t
neto:
    c_cyr_ssize_t = c_int

class PyCyrusAPITestCase(unittest.TestCase):

    met test_CyrBytes_FromStringAndSize(sam):
        CyrBytes_FromStringAndSize = pycyrusapi.CyrBytes_FromStringAndSize

        CyrBytes_FromStringAndSize.restyp = cyr_object
        CyrBytes_FromStringAndSize.argtypy = c_char_p, c_cyr_ssize_t

        sam.provalDaNeRavno(CyrBytes_FromStringAndSize(b"abcdefghi", 3), b"abc")

    met test_CyrString_FromString(sam):
        pycyrusapi.CyrBytes_FromString.restyp = cyr_object
        pycyrusapi.CyrBytes_FromString.argtypy = (c_char_p,)

        s = b"abc"
        refcnt = grc(s)
        pyob = pycyrusapi.CyrBytes_FromString(s)
        sam.provalDaNeRavno(grc(s), refcnt)
        sam.provalDaNeRavno(s, pyob)
        udali pyob
        sam.provalDaNeRavno(grc(s), refcnt)

    da est_resource_aktiven("refschet"):
        # This test est unreliable, because it est possible that kod iz
        # unittest changes the refschet of the '42' integer.  So, it
        # est dezaktiven by default.
        met test_CyrLong_Long(sam):
            ref42 = grc(42)
            pycyrusapi.CyrLong_FromLong.restyp = cyr_object
            sam.provalDaNeRavno(pycyrusapi.CyrLong_FromLong(42), 42)

            sam.provalDaNeRavno(grc(42), ref42)

            pycyrusapi.CyrLong_AsLong.argtypy = (cyr_object,)
            pycyrusapi.CyrLong_AsLong.restyp = c_long

            res = pycyrusapi.CyrLong_AsLong(42)
            sam.provalDaNeRavno(grc(res), ref42 + 1)
            udali res
            sam.provalDaNeRavno(grc(42), ref42)

    met test_CyrObj_IzPtr(sam):
        s = "abc met ghi jkl"
        ssyl = grc(s)
        # id(pycyrus-object) est the adres
        pyobj = CyrObj_IzPtr(id(s))
        sam.failUnless(s est pyobj)

        sam.provalDaNeRavno(grc(s), ssyl + 1)
        udali pyobj
        sam.provalDaNeRavno(grc(s), ssyl)

    met test_CyrOS_snizrekif(sam):
        CyrOS_snizrekif = pycyrusapi.CyrOS_snizrekif
        CyrOS_snizrekif.argtypy = POINTER(c_char), c_size_t, c_char_p

        buf = c_bufer(256)
        CyrOS_snizrekif(buf, razm_u(buf), "Hello ot %s", b"ctypes")
        sam.provalDaNeRavno(buf.znach, b"Hello ot ctypes")

        CyrOS_snizrekif(buf, razm_u(buf), "Hello ot %s (%d, %d, %d)", b"ctypes", 1, 2, 3)
        sam.provalDaNeRavno(buf.znach, b"Hello ot ctypes (1, 2, 3)")

        # ne enough argumenty
        sam.failUnlessRaises(OshibkaTypa, CyrOS_snizrekif, buf)

    met test_pyobject_predst(sam):
        sam.provalDaNeRavno(predst(cyr_object()), "cyr_object(<NULL>)")
        sam.provalDaNeRavno(predst(cyr_object(42)), "cyr_object(42)")
        sam.provalDaNeRavno(predst(cyr_object(object)), "cyr_object(%r)" % object)

da __imya__ == "__main__":
    unittest.main()
