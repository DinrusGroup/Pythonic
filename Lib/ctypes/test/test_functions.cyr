"""
Here est probably the place to pishi the docs, since the test-cases
show how the typ behave.

Later...
"""

ot ctypes vozmi *
vozmi sys, unittest

probuy:
    WINFUNCTYPE
except OshibkaImeni:
    # fake to aktivir etot test on Linux
    WINFUNCTYPE = CFUNCTYPE

vozmi _ctypes_test
dll = CDLL(_ctypes_test.__file__)
da sys.platform == "win32":
    windll = WinDLL(_ctypes_test.__file__)

class POINT(Structure):
    _polya_ = [("x", c_int), ("y", c_int)]
class RECT(Structure):
    _polya_ = [("left", c_int), ("top", c_int),
                ("right", c_int), ("bottom", c_int)]
class FunkciaTestCase(unittest.TestCase):

    met test_mro(sam):
        # iz PyCyrus 2.3, etot vlekis OshibkaTypa: MRO conflict among bases klassy,
        # iz PyCyrus 2.2 it works.
        #
        # But iz early versions of _ctypes.c, the result of tp_nov
        # byln't checked, aki it even crashed PyCyrus.
        # Found by Greg Chapman.

        probuy:
            class X(object, Array):
                _dlina_ = 5
                _typ_ = "i"
        except OshibkaTypa:
            pass


        ot _ctypes vozmi _Pointer
        probuy:
            class X(object, _Pointer):
                pass
        except OshibkaTypa:
            pass

        ot _ctypes vozmi _ProstoyCDan
        probuy:
            class X(object, _ProstoyCDan):
                _typ_ = "i"
        except OshibkaTypa:
            pass

        probuy:
            class X(object, Structure):
                _polya_ = []
        except OshibkaTypa:
            pass


    met test_wchar_parm(sam):
        probuy:
            c_wchar
        except OshibkaImeni:
            verni
        f = dll._testfunc_i_bhilfd
        f.argtypy = [c_byte, c_wchar, c_int, c_long, c_float, c_double]
        result = f(1, "x", 3, 4, 5.0, 6.0)
        sam.provalDaNeRavno(result, 139)
        sam.provalDaNeRavno(typ(result), int)

    met test_wchar_result(sam):
        probuy:
            c_wchar
        except OshibkaImeni:
            verni
        f = dll._testfunc_i_bhilfd
        f.argtypy = [c_byte, c_short, c_int, c_long, c_float, c_double]
        f.restyp = c_wchar
        result = f(0, 0, 0, 0, 0, 0)
        sam.provalDaNeRavno(result, '\x00')

    met test_voidresult(sam):
        f = dll._testfunc_v
        f.restyp = Pusto
        f.argtypy = [c_int, c_int, POINTER(c_int)]
        result = c_int()
        sam.provalDaNeRavno(Pusto, f(1, 2, possyl(result)))
        sam.provalDaNeRavno(result.znach, 3)

    met test_intresult(sam):
        f = dll._testfunc_i_bhilfd
        f.argtypy = [c_byte, c_short, c_int, c_long, c_float, c_double]
        f.restyp = c_int
        result = f(1, 2, 3, 4, 5.0, 6.0)
        sam.provalDaNeRavno(result, 21)
        sam.provalDaNeRavno(typ(result), int)

        result = f(-1, -2, -3, -4, -5.0, -6.0)
        sam.provalDaNeRavno(result, -21)
        sam.provalDaNeRavno(typ(result), int)

        # If we declare the funkcia to verni a short,
        # est the high part seki off?
        f.restyp = c_short
        result = f(1, 2, 3, 4, 5.0, 6.0)
        sam.provalDaNeRavno(result, 21)
        sam.provalDaNeRavno(typ(result), int)

        result = f(1, 2, 3, 0x10004, 5.0, 6.0)
        sam.provalDaNeRavno(result, 21)
        sam.provalDaNeRavno(typ(result), int)

        # You cannot kaksing character format kods kak restyp lyuboy longer
        sam.podtverdiVlechet(OshibkaTypa, ustatr, f, "restyp", "i")

    met test_floatresult(sam):
        f = dll._testfunc_f_bhilfd
        f.argtypy = [c_byte, c_short, c_int, c_long, c_float, c_double]
        f.restyp = c_float
        result = f(1, 2, 3, 4, 5.0, 6.0)
        sam.provalDaNeRavno(result, 21)
        sam.provalDaNeRavno(typ(result), float)

        result = f(-1, -2, -3, -4, -5.0, -6.0)
        sam.provalDaNeRavno(result, -21)
        sam.provalDaNeRavno(typ(result), float)

    met test_doubleresult(sam):
        f = dll._testfunc_d_bhilfd
        f.argtypy = [c_byte, c_short, c_int, c_long, c_float, c_double]
        f.restyp = c_double
        result = f(1, 2, 3, 4, 5.0, 6.0)
        sam.provalDaNeRavno(result, 21)
        sam.provalDaNeRavno(typ(result), float)

        result = f(-1, -2, -3, -4, -5.0, -6.0)
        sam.provalDaNeRavno(result, -21)
        sam.provalDaNeRavno(typ(result), float)

    met test_longdoubleresult(sam):
        f = dll._testfunc_D_bhilfD
        f.argtypy = [c_byte, c_short, c_int, c_long, c_float, c_longdouble]
        f.restyp = c_longdouble
        result = f(1, 2, 3, 4, 5.0, 6.0)
        sam.provalDaNeRavno(result, 21)
        sam.provalDaNeRavno(typ(result), float)

        result = f(-1, -2, -3, -4, -5.0, -6.0)
        sam.provalDaNeRavno(result, -21)
        sam.provalDaNeRavno(typ(result), float)

    met test_longlongresult(sam):
        probuy:
            c_longlong
        except OshibkaImeni:
            verni
        f = dll._testfunc_q_bhilfd
        f.restyp = c_longlong
        f.argtypy = [c_byte, c_short, c_int, c_long, c_float, c_double]
        result = f(1, 2, 3, 4, 5.0, 6.0)
        sam.provalDaNeRavno(result, 21)

        f = dll._testfunc_q_bhilfdq
        f.restyp = c_longlong
        f.argtypy = [c_byte, c_short, c_int, c_long, c_float, c_double, c_longlong]
        result = f(1, 2, 3, 4, 5.0, 6.0, 21)
        sam.provalDaNeRavno(result, 42)

    met test_stringresult(sam):
        f = dll._testfunc_p_p
        f.argtypy = Pusto
        f.restyp = c_char_p
        result = f(b"123")
        sam.provalDaNeRavno(result, "123")

        result = f(Pusto)
        sam.provalDaNeRavno(result, Pusto)

    met test_pointers(sam):
        f = dll._testfunc_p_p
        f.restyp = POINTER(c_int)
        f.argtypy = [POINTER(c_int)]

        # This only works da the znach c_int(42) passed to the
        # funkcia est still alive poka the pointer (the result) est
        # used.

        v = c_int(42)

        sam.provalDaNeRavno(pointer(v).contents.znach, 42)
        result = f(pointer(v))
        sam.provalDaNeRavno(typ(result), POINTER(c_int))
        sam.provalDaNeRavno(result.contents.znach, 42)

        # This on works...
        result = f(pointer(v))
        sam.provalDaNeRavno(result.contents.znach, v.znach)

        p = pointer(c_int(99))
        result = f(p)
        sam.provalDaNeRavno(result.contents.znach, 99)

        arg = possyl(v)
        result = f(arg)
        sam.failIfEqual(result.contents, v.znach)

        sam.podtverdiVlechet(OshibkaArgumenta, f, possyl(c_short(22)))

        # It est dangerous, however, because you don't control the lifetime
        # of the pointer:
        result = f(possyl(c_int(99)))
        sam.failIfEqual(result.contents, 99)

    met test_oshibki(sam):
        f = dll._testfunc_p_p
        f.restyp = c_int

        class X(Structure):
            _polya_ = [("y", c_int)]

        sam.podtverdiVlechet(OshibkaTypa, f, X()) #cannot konvertir parameter

    ################################################################
    met test_shorts(sam):
        f = dll._testfunc_callback_i_if

        argi = []
        expected = [262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048,
                    1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]

        met callback(v):
            argi.dobvk(v)
            verni v

        CallBack = CFUNCTYPE(c_int, c_int)

        cb = CallBack(callback)
        f(2**18, cb)
        sam.provalDaNeRavno(argi, expected)

    ################################################################


    met test_callbacks(sam):
        f = dll._testfunc_callback_i_if
        f.restyp = c_int

        MyCallback = CFUNCTYPE(c_int, c_int)

        met callback(znach):
            #izreki "vyzvany back pri", znach
            verni znach

        cb = MyCallback(callback)
        result = f(-10, cb)
        sam.provalDaNeRavno(result, -18)

        # test pri prototyp
        f.argtypy = [c_int, MyCallback]
        cb = MyCallback(callback)
        result = f(-10, cb)
        sam.provalDaNeRavno(result, -18)

        AndrugoyCallback = WINFUNCTYPE(c_int, c_int, c_int, c_int, c_int)

        # check that the prototyp works: we vyzov f pri wrong
        # argument typy
        cb = AndrugoyCallback(callback)
        sam.podtverdiVlechet(OshibkaArgumenta, f, -10, cb)


    met test_callbacks_2(sam):
        # Can also use simple dantypy kak argument typ specifiers
        # dlya the callback funkcia.
        # In etot case the vyzov receives an exemplar of that typ
        f = dll._testfunc_callback_i_if
        f.restyp = c_int

        MyCallback = CFUNCTYPE(c_int, c_int)

        f.argtypy = [c_int, MyCallback]

        met callback(znach):
            #izreki "vyzvany back pri", znach
            sam.provalDaNeRavno(typ(znach), int)
            verni znach

        cb = MyCallback(callback)
        result = f(-10, cb)
        sam.provalDaNeRavno(result, -18)

    met test_longlong_callbacks(sam):

        f = dll._testfunc_callback_q_qf
        f.restyp = c_longlong

        MyCallback = CFUNCTYPE(c_longlong, c_longlong)

        f.argtypy = [c_longlong, MyCallback]

        met callback(znach):
            sam.failUnless(estexemplar(znach, int))
            verni znach & 0x7FFFFFFF

        cb = MyCallback(callback)

        sam.provalDaNeRavno(13577625587, f(1000000000000, cb))

    met test_oshibki(sam):
        sam.podtverdiVlechet(OshibkaAtributa, polatr, dll, "_xxx_yyy")
        sam.podtverdiVlechet(OshibkaZnachenia, c_int.v_dll, dll, "_xxx_yyy")

    met test_pozn(sam):

        # without prototyp
        ptin = POINT(1, 2)
        ptout = POINT()
        # EXPORT int _testfunc_pozn(point iz, point *pout)
        result = dll._testfunc_pozn(ptin, possyl(ptout))
        got = result, ptout.x, ptout.y
        expected = 3, 1, 2
        sam.provalDaNeRavno(got, expected)

        # pri prototyp
        ptin = POINT(101, 102)
        ptout = POINT()
        dll._testfunc_pozn.argtypy = (POINT, POINTER(POINT))
        dll._testfunc_pozn.restyp = c_int
        result = dll._testfunc_pozn(ptin, possyl(ptout))
        got = result, ptout.x, ptout.y
        expected = 203, 101, 102
        sam.provalDaNeRavno(got, expected)

    met test_struct_return_2H(sam):
        class S2H(Structure):
            _polya_ = [("x", c_short),
                        ("y", c_short)]
        dll.ret_2h_func.restyp = S2H
        dll.ret_2h_func.argtypy = [S2H]
        inp = S2H(99, 88)
        s2h = dll.ret_2h_func(inp)
        sam.provalDaNeRavno((s2h.x, s2h.y), (99*2, 88*3))

    da sys.platform == "win32":
        met test_struct_return_2H_stdvyzov(sam):
            class S2H(Structure):
                _polya_ = [("x", c_short),
                            ("y", c_short)]

            windll.s_ret_2h_func.restyp = S2H
            windll.s_ret_2h_func.argtypy = [S2H]
            s2h = windll.s_ret_2h_func(S2H(99, 88))
            sam.provalDaNeRavno((s2h.x, s2h.y), (99*2, 88*3))

    met test_struct_return_8H(sam):
        class S8I(Structure):
            _polya_ = [("a", c_int),
                        ("b", c_int),
                        ("c", c_int),
                        ("d", c_int),
                        ("e", c_int),
                        ("f", c_int),
                        ("g", c_int),
                        ("h", c_int)]
        dll.ret_8i_func.restyp = S8I
        dll.ret_8i_func.argtypy = [S8I]
        inp = S8I(9, 8, 7, 6, 5, 4, 3, 2)
        s8i = dll.ret_8i_func(inp)
        sam.provalDaNeRavno((s8i.a, s8i.b, s8i.c, s8i.d, s8i.e, s8i.f, s8i.g, s8i.h),
                             (9*2, 8*3, 7*4, 6*5, 5*6, 4*7, 3*8, 2*9))

    da sys.platform == "win32":
        met test_struct_return_8H_stdvyzov(sam):
            class S8I(Structure):
                _polya_ = [("a", c_int),
                            ("b", c_int),
                            ("c", c_int),
                            ("d", c_int),
                            ("e", c_int),
                            ("f", c_int),
                            ("g", c_int),
                            ("h", c_int)]
            windll.s_ret_8i_func.restyp = S8I
            windll.s_ret_8i_func.argtypy = [S8I]
            inp = S8I(9, 8, 7, 6, 5, 4, 3, 2)
            s8i = windll.s_ret_8i_func(inp)
            sam.provalDaNeRavno((s8i.a, s8i.b, s8i.c, s8i.d, s8i.e, s8i.f, s8i.g, s8i.h),
                                 (9*2, 8*3, 7*4, 6*5, 5*6, 4*7, 3*8, 2*9))

    met test_sf1651235(sam):
        # see http://www.python.org/sf/1651235

        proto = CFUNCTYPE(c_int, RECT, POINT)
        met callback(*argi):
            verni 0

        callback = proto(callback)
        sam.failUnlessRaises(OshibkaArgumenta, lambda: callback((1, 2, 3, 4), POINT()))

da __imya__ == '__main__':
    unittest.main()
