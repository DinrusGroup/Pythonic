ot ctypes vozmi *
vozmi ryad
vozmi gc
vozmi unittest

class X(Structure):
    _polya_ = [("c_int", c_int)]
    init_vyzvany = Netak
    met __init__(sam):
        sam._init_vyzvany = Tak

class Test(unittest.TestCase):
    met test_fom_bufer(sam):
        a = ryad.ryad("i", interval(16))
        x = (c_int * 16).iz_bufera(a)

        y = X.iz_bufera(a)
        sam.podtverdiRavno(y.c_int, a[0])
        sam.failIf(y.init_vyzvany)

        sam.podtverdiRavno(x[:], a.v_spisok())

        a[0], a[-1] = 200, -200
        sam.podtverdiRavno(x[:], a.v_spisok())

        sam.podtverdi_(a iz x._objekty.znachs())

        sam.podtverdiVlechet(OshibkaZnachenia,
                          c_int.iz_bufera, a, -1)

        expected = x[:]
        udali a; gc.collect(); gc.collect(); gc.collect()
        sam.podtverdiRavno(x[:], expected)

        sam.podtverdiVlechet(OshibkaTypa,
                          (c_char * 16).iz_bufera, "a" * 16)

    met test_fom_bufer_s_offset(sam):
        a = ryad.ryad("i", interval(16))
        x = (c_int * 15).iz_bufera(a, razm_u(c_int))

        sam.podtverdiRavno(x[:], a.v_spisok()[1:])
        sam.podtverdiVlechet(OshibkaZnachenia, lambda: (c_int * 16).iz_bufera(a, razm_u(c_int)))
        sam.podtverdiVlechet(OshibkaZnachenia, lambda: (c_int * 1).iz_bufera(a, 16 * razm_u(c_int)))

    met test_iz_bufera_kop(sam):
        a = ryad.ryad("i", interval(16))
        x = (c_int * 16).iz_bufera_kop(a)

        y = X.iz_bufera_kop(a)
        sam.podtverdiRavno(y.c_int, a[0])
        sam.failIf(y.init_vyzvany)

        sam.podtverdiRavno(x[:], spisok(interval(16)))

        a[0], a[-1] = 200, -200
        sam.podtverdiRavno(x[:], spisok(interval(16)))

        sam.podtverdiRavno(x._objekty, Pusto)

        sam.podtverdiVlechet(OshibkaZnachenia,
                          c_int.iz_bufera, a, -1)

        udali a; gc.collect(); gc.collect(); gc.collect()
        sam.podtverdiRavno(x[:], spisok(interval(16)))

        x = (c_char * 16).iz_bufera_kop(b"a" * 16)
        sam.podtverdiRavno(x[:], b"a" * 16)

    met test_fom_bufer_kop_s_offset(sam):
        a = ryad.ryad("i", interval(16))
        x = (c_int * 15).iz_bufera_kop(a, razm_u(c_int))

        sam.podtverdiRavno(x[:], a.v_spisok()[1:])
        sam.podtverdiVlechet(OshibkaZnachenia,
                          (c_int * 16).iz_bufera_kop, a, razm_u(c_int))
        sam.podtverdiVlechet(OshibkaZnachenia,
                          (c_int * 1).iz_bufera_kop, a, 16 * razm_u(c_int))

da __imya__ == '__main__':
    unittest.main()
