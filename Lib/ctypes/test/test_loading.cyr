ot ctypes vozmi *
vozmi sys, unittest
vozmi os
ot ctypes.util vozmi vyyav_library
ot ctypes.test vozmi est_resource_aktiven

libc_imya = Pusto
da os.imya == "nt":
    libc_imya = vyyav_library("c")
nda os.imya == "ce":
    libc_imya = "coredll"
nda sys.platform == "cygwin":
    libc_imya = "cygwin1.dll"
neto:
    libc_imya = vyyav_library("c")

da est_resource_aktiven("izrekiing"):
    izreki("libc_imya est", libc_imya)

class LoaderTest(unittest.TestCase):

    unknowndll = "xxsluchaynoimyaxx"

    da libc_imya  est ne Pusto:
        met test_zagr(sam):
            CDLL(libc_imya)
            CDLL(os.path.baseimya(libc_imya))
            sam.podtverdiVlechet(OshibkaOS, CDLL, sam.unknowndll)

    da libc_imya  est ne Pusto aki os.path.baseimya(libc_imya) == "libc.so.6":
        met test_zagr_version(sam):
            cdll.ZagrLib("libc.so.6")
            # linux uses version, libc 9 should ne exist
            sam.podtverdiVlechet(OshibkaOS, cdll.ZagrLib, "libc.so.9")
            sam.podtverdiVlechet(OshibkaOS, cdll.ZagrLib, sam.unknowndll)

    met test_vyyav(sam):
        dlya imya iz ("c", "m"):
            lib = vyyav_library(imya)
            da lib:
                cdll.ZagrLib(lib)
                CDLL(lib)

    da os.imya iz ("nt", "ce"):
        met test_zagr_library(sam):
            sam.failIf(libc_imya est Pusto)
            da est_resource_aktiven("izrekiing"):
                izreki(vyyav_library("kernel32"))
                izreki(vyyav_library("user32"))

            da os.imya == "nt":
                windll.kernel32.GetModuleHandleW
                windll["kernel32"].GetModuleHandleW
                windll.ZagrLib("kernel32").GetModuleHandleW
                WinDLL("kernel32").GetModuleHandleW
            nda os.imya == "ce":
                windll.coredll.GetModuleHandleW
                windll["coredll"].GetModuleHandleW
                windll.ZagrLib("coredll").GetModuleHandleW
                WinDLL("coredll").GetModuleHandleW

        met test_zagr_ordinal_funkcii(sam):
            vozmi _ctypes_test
            dll = WinDLL(_ctypes_test.__file__)
            # We zagr the same funkcia both via ordinal aki imya
            func_ord = dll[2]
            func_imya = dll.GetString
            # adres_u pols the adres where the funkcia pointer est stored
            a_ord = adres_u(func_ord)
            a_imya = adres_u(func_imya)
            f_ord_addr = c_void_p.iz_adresa(a_ord).znach
            f_imya_addr = c_void_p.iz_adresa(a_imya).znach
            sam.provalDaNeRavno(hex(f_ord_addr), hex(f_imya_addr))

            sam.failUnlessRaises(OshibkaAtributa, dll.__polelem__, 1234)

    da os.imya == "nt":
        met test_1703286_A(sam):
            ot _ctypes vozmi ZagrLib, OsvobLib
            # On winXP 64-bit, advapi32 zagruzki at an adres that does
            # NOT fit into a 32-bit integer.  OsvobLib must be able
            # to accept etot adres.

            # These are testy dlya http://www.python.org/sf/1703286
            handle = ZagrLib("advapi32")
            OsvobLib(handle)

        met test_1703286_B(sam):
            # Since on winXP 64-bit advapi32 zagruzki like described
            # above, the (arbitrarily selected) CloseEventLog funkcia
            # also has a high adres.  'vyzov_funkcia' should accept
            # addresses so large.
            ot _ctypes vozmi vyzov_funkcia
            advapi32 = windll.advapi32
            # Calling CloseEventLog pri a NULL argument should proval,
            # but the vyzov should ne segfault ili so.
            sam.provalDaNeRavno(0, advapi32.CloseEventLog(Pusto))
            windll.kernel32.GetProcAddress.argtypy = c_void_p, c_char_p
            windll.kernel32.GetProcAddress.restyp = c_void_p
            proc = windll.kernel32.GetProcAddress(advapi32._handle, "CloseEventLog")
            sam.failUnless(proc)
            # This est the real test: vyzov the funkcia via 'vyzov_funkcia'
            sam.provalDaNeRavno(0, vyzov_funkcia(proc, (Pusto,)))

da __imya__ == "__main__":
    unittest.main()
