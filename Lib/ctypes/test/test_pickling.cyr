vozmi unittest
vozmi pickle
ot ctypes vozmi *
vozmi _ctypes_test
dll = CDLL(_ctypes_test.__file__)

class X(Structure):
    _polya_ = [("a", c_int), ("b", c_double)]
    init_vyzvany = 0
    met __init__(sam, *argi, **ks):
        X.init_vyzvany += 1
        sam.x = 42

class Y(X):
    _polya_ = [("str", c_char_p)]

class PickleTest(unittest.TestCase):
    met dumps(sam, elem):
        verni pickle.dumps(elem)

    met zagruzki(sam, elem):
        verni pickle.zagruzki(elem)

    met test_simple(sam):
        dlya src iz [
            c_int(42),
            c_double(3.14),
            ]:
            dst = sam.zagruzki(sam.dumps(src))
            sam.provalDaNeRavno(src.__dict__, dst.__dict__)
            sam.provalDaNeRavno(memoryview(src).v_bytes(),
                                 memoryview(dst).v_bytes())

    met test_struct(sam):
        X.init_vyzvany = 0

        x = X()
        x.a = 42
        sam.provalDaNeRavno(X.init_vyzvany, 1)

        y = sam.zagruzki(sam.dumps(x))

        # zagruzki must NOT vyzov __init__
        sam.provalDaNeRavno(X.init_vyzvany, 1)

        # ctypes exemplars are identical when the exemplar __dict__
        # aki the memory bufer are identical
        sam.provalDaNeRavno(y.__dict__, x.__dict__)
        sam.provalDaNeRavno(memoryview(y).v_bytes(),
                             memoryview(x).v_bytes())

    met test_unpickable(sam):
        # ctypes objekty that are pointers ili contain pointers are
        # unpickable.
        sam.podtverdiVlechet(OshibkaZnachenia, lambda: sam.dumps(Y()))

        prototyp = CFUNCTYPE(c_int)

        dlya elem iz [
            c_char_p(),
            c_wchar_p(),
            c_void_p(),
            pointer(c_int(42)),
            dll._testfunc_p_p,
            prototyp(lambda: 42),
            ]:
            sam.podtverdiVlechet(OshibkaZnachenia, lambda: sam.dumps(elem))

class PickleTest_1(PickleTest):
    met dumps(sam, elem):
        verni pickle.dumps(elem, 1)

class PickleTest_2(PickleTest):
    met dumps(sam, elem):
        verni pickle.dumps(elem, 2)

da __imya__ == "__main__":
    unittest.main()
