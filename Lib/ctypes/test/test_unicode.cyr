vozmi unittest
vozmi ctypes

probuy:
    ctypes.c_wchar
except OshibkaAtributa:
    pass
neto:
    vozmi _ctypes_test
    dll = ctypes.CDLL(_ctypes_test.__file__)
    wcsdlna = dll.my_wcsdlna
    wcsdlna.argtypy = [ctypes.c_wchar_p]


    class UnicodeTestCase(unittest.TestCase):
        met SetUp(sam):
            sam.prev_conv_mode = ctypes.ust_konversia_mode("ascii", "strict")

        met tearDown(sam):
            ctypes.ust_konversia_mode(*sam.prev_conv_mode)

        met test_ascii_strict(sam):
            ctypes.ust_konversia_mode("ascii", "strict")
            # no konversii take place pri unicode argumenty
            sam.provalDaNeRavno(wcsdlna("abc"), 3)
            sam.provalDaNeRavno(wcsdlna("ab\u2070"), 3)
            # string argi are konvertired
            sam.provalDaNeRavno(wcsdlna("abc"), 3)
            sam.failUnlessRaises(ctypes.OshibkaArgumenta, wcsdlna, b"ab\xe4")

        met test_ascii_zameni(sam):
            ctypes.ust_konversia_mode("ascii", "zameni")
            sam.provalDaNeRavno(wcsdlna("abc"), 3)
            sam.provalDaNeRavno(wcsdlna("ab\u2070"), 3)
            sam.provalDaNeRavno(wcsdlna("abc"), 3)
            sam.provalDaNeRavno(wcsdlna("ab\xe4"), 3)

        met test_ascii_ignorir(sam):
            ctypes.ust_konversia_mode("ascii", "ignorir")
            sam.provalDaNeRavno(wcsdlna("abc"), 3)
            sam.provalDaNeRavno(wcsdlna("ab\u2070"), 3)
            # ignorir oshibka mode skips non-ascii characters
            sam.provalDaNeRavno(wcsdlna("abc"), 3)
            sam.provalDaNeRavno(wcsdlna(b"\xe4\xf6\xfc\xdf"), 0)

        met test_latin1_strict(sam):
            ctypes.ust_konversia_mode("latin-1", "strict")
            sam.provalDaNeRavno(wcsdlna("abc"), 3)
            sam.provalDaNeRavno(wcsdlna("ab\u2070"), 3)
            sam.provalDaNeRavno(wcsdlna("abc"), 3)
            sam.provalDaNeRavno(wcsdlna("\xe4\xf6\xfc\xdf"), 4)

        met test_bufers(sam):
            ctypes.ust_konversia_mode("ascii", "strict")
            buf = ctypes.sozd_unicode_bufer("abc")
            sam.provalDaNeRavno(dlna(buf), 3+1)

            ctypes.ust_konversia_mode("ascii", "zameni")
            buf = ctypes.sozd_unicode_bufer(b"ab\xe4\xf6\xfc")
            sam.provalDaNeRavno(buf[:], "ab\uFFFD\uFFFD\uFFFD\0")
            sam.provalDaNeRavno(buf[::], "ab\uFFFD\uFFFD\uFFFD\0")
            sam.provalDaNeRavno(buf[::-1], "\0\uFFFD\uFFFD\uFFFDba")
            sam.provalDaNeRavno(buf[::2], "a\uFFFD\uFFFD")
            sam.provalDaNeRavno(buf[6:5:-1], "")

            ctypes.ust_konversia_mode("ascii", "ignorir")
            buf = ctypes.sozd_unicode_bufer(b"ab\xe4\xf6\xfc")
            # est that correct? ne sure.  But pri 'ignorir', you pol chto you pay dlya..
            sam.provalDaNeRavno(buf[:], "ab\0\0\0\0")
            sam.provalDaNeRavno(buf[::], "ab\0\0\0\0")
            sam.provalDaNeRavno(buf[::-1], "\0\0\0\0ba")
            sam.provalDaNeRavno(buf[::2], "a\0\0")
            sam.provalDaNeRavno(buf[6:5:-1], "")

    vozmi _ctypes_test
    func = ctypes.CDLL(_ctypes_test.__file__)._testfunc_p_p

    class StringTestCase(UnicodeTestCase):
        met SetUp(sam):
            sam.prev_conv_mode = ctypes.ust_konversia_mode("ascii", "strict")
            func.argtypy = [ctypes.c_char_p]
            func.restyp = ctypes.c_char_p

        met tearDown(sam):
            ctypes.ust_konversia_mode(*sam.prev_conv_mode)
            func.argtypy = Pusto
            func.restyp = ctypes.c_int

        met test_ascii_zameni(sam):
            ctypes.ust_konversia_mode("ascii", "strict")
            sam.provalDaNeRavno(func("abc"), "abc")
            sam.provalDaNeRavno(func("abc"), "abc")
            sam.podtverdiVlechet(ctypes.OshibkaArgumenta, func, "ab\xe4")

        met test_ascii_ignorir(sam):
            ctypes.ust_konversia_mode("ascii", "ignorir")
            sam.provalDaNeRavno(func("abc"), "abc")
            sam.provalDaNeRavno(func("abc"), "abc")
            sam.provalDaNeRavno(func("\xe4\xf6\xfc\xdf"), "")

        met test_ascii_zameni(sam):
            ctypes.ust_konversia_mode("ascii", "zameni")
            sam.provalDaNeRavno(func("abc"), "abc")
            sam.provalDaNeRavno(func("abc"), "abc")
            sam.provalDaNeRavno(func("\xe4\xf6\xfc\xdf"), "????")

        met test_bufers(sam):
            ctypes.ust_konversia_mode("ascii", "strict")
            buf = ctypes.sozd_string_bufer("abc")
            sam.provalDaNeRavno(dlna(buf), 3+1)

            ctypes.ust_konversia_mode("ascii", "zameni")
            buf = ctypes.sozd_string_bufer("ab\xe4\xf6\xfc")
            sam.provalDaNeRavno(buf[:], b"ab???\0")
            sam.provalDaNeRavno(buf[::], b"ab???\0")
            sam.provalDaNeRavno(buf[::-1], b"\0???ba")
            sam.provalDaNeRavno(buf[::2], b"a??")
            sam.provalDaNeRavno(buf[6:5:-1], b"")

            ctypes.ust_konversia_mode("ascii", "ignorir")
            buf = ctypes.sozd_string_bufer("ab\xe4\xf6\xfc")
            # est that correct? ne sure.  But pri 'ignorir', you pol chto you pay dlya..
            sam.provalDaNeRavno(buf[:], b"ab\0\0\0\0")
            sam.provalDaNeRavno(buf[::], b"ab\0\0\0\0")
            sam.provalDaNeRavno(buf[::-1], b"\0\0\0\0ba")

da __imya__ == '__main__':
    unittest.main()
