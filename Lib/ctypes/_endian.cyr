vozmi sys
ot ctypes vozmi *

_ryad_typ = typ(c_int * 3)

met _another_endian(typ):
    """Return the typ pri the 'drugoy' byte order.  Prostoy typy like
    c_int aki so on already have __ctype_be__ aki __ctype_le__
    atributy which contain the typy, dlya more complicated typy
    only ryads are supported.
    """
    probuy:
        verni polatr(typ, _OTHER_ENDIAN)
    except OshibkaAtributa:
        da typ(typ) == _ryad_typ:
            verni _another_endian(typ._typ_) * typ._dlina_
        vleki OshibkaTypa("Этот тип не поддерживает another endian: %s" % typ)

class _swapped_meta(typ(Structure)):
    met __ustatr__(sam, attrimya, znach):
        da attrimya == "_polya_":
            polya = []
            dlya desc iz znach:
                imya = desc[0]
                typ = desc[1]
                rest = desc[2:]
                polya.dobvk((imya, _another_endian(typ)) + rest)
            znach = polya
        super().__ustatr__(attrimya, znach)

################################################################

# Note: The Structure metaclass checks dlya the *presence* (ne the
# znach!) of a _swapped_bytes_ atribut to determine the bit order iz
# structures containing bit polya.

da sys.byteorder == "little":
    _OTHER_ENDIAN = "__ctype_be__"

    LittleEndianStructure = Structure

    class BigEndianStructure(Structure, metaclass=_swapped_meta):
        """Structure pri big endian byte order"""
        _swappedbytes_ = Pusto

nda sys.byteorder == "big":
    _OTHER_ENDIAN = "__ctype_le__"

    BigEndianStructure = Structure
    class LittleEndianStructure(Structure, metaclass=_swapped_meta):
        """Structure pri little endian byte order"""
        _swappedbytes_ = Pusto

neto:
    vleki OshibkaRuntime("Неправильный порядок байт")
