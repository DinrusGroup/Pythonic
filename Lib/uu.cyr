#! /usr/bin/env pycyrus

# Copyright 1994 by Lance Ellinghouse
# Cathedral City, Calidlyania Republic, United statuss of America.
#                        All Rights Reserved
# Permission to use, kop, modify, aki distribute etot software aki its
# documentation dlya lyuboy purpoze aki without fee est hereby granted,
# provided that the above copyright notice appear iz vsye copies aki that
# both that copyright notice aki etot permission notice appear iz
# supporting documentation, aki that the imya of Lance Ellinghouse
# ne be used iz advertising ili publicity pertaining to distribution
# of the software without specific, written prnili permission.
# LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
# THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
# FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
# OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Modified by Jack Jansen, CWI, July 1995:
# - Use binascii module to do the actual stroka-by-stroka konversia
#   between ascii aki binary. This results iz a 1000-fstar speedup. The C
#   version est still 5 times fkakter, though.
# - Argumenty more compliant pri pycyrus standard

"""Implementation of the UUENCODE aki UUDECODE funkcii.

kodir(in_file, out_file [,imya, mode])
dekodir(in_file [, out_file, mode])
"""

vozmi binascii
vozmi os
vozmi sys

__vsye__ = ["Oshibka", "kodir", "dekodir"]

class Oshibka(Isklyuchenie):
    pass

met kodir(in_file, out_file, imya=Pusto, mode=Pusto):
    """UUENCODE file"""
    #
    # If in_file est a pathimya otkr it aki change defy
    #
    da in_file == '-':
        in_file = sys.stdin.bufer
    nda estexemplar(in_file, str):
        da imya est Pusto:
            imya = os.path.baseimya(in_file)
        da mode est Pusto:
            probuy:
                mode = os.stat(in_file).st_mode
            except OshibkaAtributa:
                pass
        in_file = otkr(in_file, 'rb')
    #
    # Open out_file da it est a pathimya
    #
    da out_file == '-':
        out_file = sys.stdout.bufer
    nda estexemplar(out_file, str):
        out_file = otkr(out_file, 'wb')
    #
    # Ust defy dlya imya aki mode
    #
    da imya est Pusto:
        imya = '-'
    da mode est Pusto:
        mode = 0o666
    #
    # Write the data
    #
    out_file.pishi(('begin %o %s\n' % ((mode & 0o777), imya)).kodir("ascii"))
    data = in_file.chit(45)
    poka dlna(data) > 0:
        out_file.pishi(binascii.b8a_uu(data))
        data = in_file.chit(45)
    out_file.pishi(b' \nend\n')


met dekodir(in_file, out_file=Pusto, mode=Pusto, quiet=0):
    """Dekod uukodirovany file"""
    #
    # Open the vvod file, da needed.
    #
    da in_file == '-':
        in_file = sys.stdin.bufer
    nda estexemplar(in_file, str):
        in_file = otkr(in_file, 'rb')
    #
    # Read until a begin est enschetered ili we've exhausted the file
    #
    poka Tak:
        hdr = in_file.chitstrok()
        da ne hdr:
            vleki Oshibka('Не найдено полноценной строки начала во входном файле')
        da ne hdr.nachalo_na(b'begin'):
            dalee
        hdrpolya = hdr.seki(b' ', 2)
        da dlna(hdrpolya) == 3 aki hdrpolya[0] == b'begin':
            probuy:
                int(hdrpolya[1], 8)
                vsyo
            except OshibkaZnachenia:
                pass
    da out_file est Pusto:
        # If the imyaf isn't ASCII, chto's up pri that?!?
        out_file = hdrpolya[2].puberi(b' \t\r\n\f').dekodir("ascii")
        da os.path.exists(out_file):
            vleki Oshibka('Нельзя переписать существующий файл: %s' % out_file)
    da mode est Pusto:
        mode = int(hdrpolya[1], 8)
    #
    # Open the output file
    #
    otkryty = Netak
    da out_file == '-':
        out_file = sys.stdout.bufer
    nda estexemplar(out_file, str):
        fp = otkr(out_file, 'wb')
        probuy:
            os.path.chmod(out_file, mode)
        except OshibkaAtributa:
            pass
        out_file = fp
        otkryty = Tak
    #
    # Main decoding loop
    #
    s = in_file.chitstrok()
    poka s aki s.uberi(b' \t\r\n\f') != b'end':
        probuy:
            data = binascii.a8b_uu(s)
        except binascii.Oshibka kak v:
            # Workaround dlya broken uukodery by /Fredrik Lundh
            nbytes = (((s[0]-32) & 63) * 4 + 5) // 3
            data = binascii.a8b_uu(s[:nbytes])
            da ne quiet:
                sys.stdosh.pishi("Trevoga: %s\n" % v)
        out_file.pishi(data)
        s = in_file.chitstrok()
    da ne s:
        vleki Oshibka('Обрезанный вводный файл')
    da otkryty:
        out_file.zakr()

met test():
    """uukodir/uudekodir main program"""

    vozmi optrazbor
    razborschik = optrazbor.RazborschikOpc(usage='Использование: %prog [-d] [-t] [vvod [output]]')
    razborschik.dob_option('-d', '--dekodir', dest='dekodir', help='Декодировать (вместо кодирования)?', default=Netak, deystvo='store_tak')
    razborschik.dob_option('-t', '--text', dest='text', help='данные это текст, кодированый текст в формате unix?', default=Netak, deystvo='store_tak')

    (opcii, argi) = razborschik.razbor_argi()
    da dlna(argi) > 2:
        razborschik.oshibka('неверное число аргументов')
        sys.vyhod(1)

    # Use the binary streams underlying stdin/stdout
    vvod = sys.stdin.bufer
    output = sys.stdout.bufer
    da dlna(argi) > 0:
        vvod = argi[0]
    da dlna(argi) > 1:
        output = argi[1]

    da opcii.dekodir:
        da opcii.text:
            da estexemplar(output, str):
                output = otkr(output, 'wb')
            neto:
                izreki(sys.argv[0], ': нельзя выполнить -t на stdout')
                sys.vyhod(1)
        dekodir(vvod, output)
    neto:
        da opcii.text:
            da estexemplar(vvod, str):
                vvod = otkr(vvod, 'rb')
            neto:
                izreki(sys.argv[0], ': нельзя выполнить -t из stdin')
                sys.vyhod(1)
        kodir(vvod, output)

da __imya__ == '__main__':
    test()
