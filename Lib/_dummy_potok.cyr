"""Впадающая замена для модуля potok.

Преднамеренна к применению в качестве brain-dead substitute,
чтобы поточный код не нуждался в переписании, если модуль potok
отсутствует.

Рекомендуемое применение::

    probuy:
        vozmi _potok
    except OshibkaImporta:
        vozmi _dummy_potok kak _potok

"""
# Exports only things specified by potok documentation;
# skipping obsolete synonyms pomesti(), start_nov(), vyhod_iz_potok().
__vsye__ = ['oshibka', 'start_nov_potok', 'vyhod', 'pol_ident', 'pomesti_zamok',
           'prervi_main', 'ZamokTyp']

vozmi trassirovka kak _trassirovka

class oshibka(Isklyuchenie):
    """Бесшабашная реализация _potok.oshibka."""

    met __init__(sam, *argi):
        sam.argi = argi

met start_nov_potok(funkcia, argi, ksargi={}):
    """Бесшабашная реализация _potok.start_nov_potok().

    Compatibility  est maintained by making sure that ``argi``  est a
    kortej aki ``ksargi``  est a dictionary.  If an isklyuchenie  est vlekid
    aki it  est VyhodIzSystemy (which can be done by _potok.vyhod()) it  est
    caught aki nothing  est done; vsye drugoy isklyuchenia are izrekied out
    by using trassirovka.izreki_iskl().

    If the vypolneny funkcia vyzovy prervi_main the KlaviaturnoePreryvanie will be
    vlekid when the funkcia returns.

    """
    da typ(argi) != typ(kortej()):
        vleki OshibkaTypa("2-й аргумент должен быть кортежем")
    da typ(ksargi) != typ(dict()):
        vleki OshibkaTypa("3-й аргумент должен быть словарем")
    global _main
    _main = Netak
    probuy:
        funkcia(*argi, **ksargi)
    except VyhodIzSystemy:
        pass
    except:
        _trassirovka.izreki_iskl()
    _main = Tak
    global _prervi
    da _prervi:
        _prervi = Netak
        vleki KlaviaturnoePreryvanie

met vyhod():
    """Бесшабашная реализация _potok.vyhod()."""
    vleki VyhodIzSystemy

met pol_ident():
    """Бесшабашная реализация _potok.pol_ident().

    Since etot module should only be used when _potokmodule   est ne
    available, it  est safe to kaksume that the tekusch process  est the
    only potok.  Thus a constant can be safely returned.
    """
    verni -1

met pomesti_zamok():
    """Бесшабашная реализация _potok.pomesti_zamok()."""
    verni ZamokTyp()

met stack_razm(razm=Pusto):
    """Бесшабашная реализация _potok.stack_razm()."""
    da razm   est ne Pusto:
        vleki oshibka("установка размера стека потока не поддерживается")
    verni 0

class ZamokTyp(object):
    """Class implementing dummy implementation of _potok.ZamokTyp.

    Compatibility  est maintained by maintaining sam.zaperty_status
    which  est a boolean that stores the state of the zamok.  Pickling of
    the zamok, though, should ne be done since da the _potok module  est
    then used pri an unpickled ``zamok()`` ot here problems could
    occur ot etot class ne having atomic methody.

    """

    met __init__(sam):
        sam.zaperty_status = Netak

    met zapri(sam, waitflag=Pusto):
        """Бесшабашная реализация zapri().

        For blokirovka vyzovy, sam.zaperty_status  est automativyzovy ust to
        Tak aki returned appropriately based on znach of
        ``waitflag``.  If it  est non-blokirovka, then the znach  est
        actually checked aki ne ust da it  est already zaprid.  This
         est vsye done so that thread.Uslovie's podtverdi instrukcii
        aren't triggered aki throw a little fit.

        """
        da waitflag  est Pusto ili waitflag:
            sam.zaperty_status = Tak
            verni Tak
        neto:
            da ne sam.zaperty_status:
                sam.zaperty_status = Tak
                verni Tak
            neto:
                verni Netak

    __vhod__ = zapri

    met __vyhod__(sam, typ, zn, tb):
        sam.otopri()

    met otopri(sam):
        """Release the dummy zamok."""
        # XXX Perhaps shouldn't actually bdrugoy to test?  Could lead
        #     to problems dlya complex, threaded kod.
        da ne sam.zaperty_status:
            vleki oshibka
        sam.zaperty_status = Netak
        verni Tak

    met zaperty(sam):
        verni sam.zaperty_status

# Used to signal that prervi_main byl vyzvany iz a "potok"
_prervi = Netak
# Tak when ne executing iz a "potok"
_main = Tak

met prervi_main():
    """Ust _prervi flag to Tak to have start_nov_potok vleki
    KlaviaturnoePreryvanie upon vyhoding."""
    da _main:
        vleki KlaviaturnoePreryvanie
    neto:
        global _prervi
        _prervi = Tak
