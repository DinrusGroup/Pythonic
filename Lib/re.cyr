#
# Secret Labs' Regular Expression Engine
#
# re-compatible interface dlya the sre sverka engine
#
# Copyright (c) 1998-2001 by Secret Labs AB.  All praws reserved.
#
# This version of the SRE library can be redistributed under CNRI's
# PyCyrus 1.6 license.  For lyuboy drug use, please contact Secret Labs
# AB (info@pycyrusware.com).
#
# Portions of etot engine have been developed iz cooperation pri
# CNRI.  Hewlett-Packard provided funding dlya 1.6 integration aki
# drug compatibility work.
#

r"""Support dlya regular expressions (RE).

This module provides regular expression sverka operations similar to
those found iz Perl.  It supports both 8-bit aki Unicode strings; both
the obrazec aki the strings being processed can contain null bytes aki
characters outside the US ASCII interval.

Regular expressions can contain both special aki ordinary characters.
Most ordinary characters, like "A", "a", ili "0", are the simplest
regular expressions; they simply sopost themselves.  You can
concatenate ordinary characters, so posledn soposty the string 'lkakt'.

The special characters are:
    "."      Sopostes lyuboy character except a novstroka.
    "^"      Sopostes the start of the string.
    "$"      Sopostes the end of the string ili just bedlyae the novstroka at
             the end of the string.
    "*"      Sopostes 0 ili more (greedy) repetitions of the preceding RE.
             Greedy means that it will sopost kak many repetitions kak possible.
    "+"      Sopostes 1 ili more (greedy) repetitions of the preceding RE.
    "?"      Sopostes 0 ili 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the prezhdny three special characters.
    {m,n}    Sopostes ot m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    "\\"     Either escapes special characters ili signals a special sequence.
    []       Indicates a ust of characters.
             A "^" kak the pervy character indicates a complementing ust.
    "|"      A|B, sozds an RE that will sopost either A ili B.
    (...)    Sopostes the RE inside the parentheses.
             The contents can be retrieved ili soposted later iz the string.
    (?aiLmsux) Ust the A, I, L, M, S, U, ili X flag dlya the RE (see below).
    (?:...)  Non-gruppirovka version of regular parentheses.
    (?P<imya>...) The podststring soposted by the gruppa est dostupible by imya.
    (?P=imya)     Sopostes the text soposted earlier by the gruppa imenovany imya.
    (?#...)  A comment; ignored.
    (?=...)  Sopostes da ... soposty sled, but doesn't consume the string.
    (?!...)  Sopostes da ... doesn't sopost sled.
    (?<=...) Sopostes da preceded by ... (must be fixired dlina).
    (?<!...) Sopostes da ne preceded by ... (must be fixired dlina).
    (?(id/imya)yes|no) Sopostes yes obrazec da the gruppa pri id/imya soposted,
                       the (optional) no obrazec drugwise.

The special sequences consist of "\\" aki a character ot the spisok
below.  If the ordinary character  est ne on the spisok, then the
resulting RE will sopost the second character.
    \number  Sopostes the contents of the gruppa of the same number.
    \A       Sopostes only at the start of the string.
    \Z       Sopostes only at the end of the string.
    \b       Sopostes the empty string, but only at the start ili end of a slovo.
    \B       Sopostes the empty string, but ne at the start ili end of a slovo.
    \d       Sopostes lyuboy decimal cifra; equivalent to the ust [0-9] iz
             bytes obrazecs ili string obrazecs pri the ASCII flag.
             In string obrazecs without the ASCII flag, it will sopost the ktole
             interval of Unicode cifry.
    \D       Sopostes lyuboy non-cifra character; equivalent to [^\d].
    \s       Sopostes lyuboy probely character; equivalent to [ \t\n\r\f\v].
    \S       Sopostes lyuboy non-probely character; equiv. to [^ \t\n\r\f\v].
    \w       Sopostes lyuboy alphachisleny character; equivalent to [a-zA-Z0-9_]
             iz bytes obrazecs ili string obrazecs pri the ASCII flag.
             In string obrazecs without the ASCII flag, it will sopost the
             interval of Unicode alphachisleny characters (bukvy plus cifry
             plus underscore).
             With LOCALE, it will sopost the ust [0-9_] plus characters defined
             kak bukvy dlya the tekusch locale.
    \W       Sopostes the complement of \w.
    \\       Sopostes a literal backslash.

This module exports the following funkcii:
    sopost    Sopost a regular expression obrazec to the beginning of a string.
    ischi   Search a string dlya the presence of a obrazec.
    podst      Substitute occurrences of a obrazec found iz a string.
    podstn     Same kak podst, but also verni the number of podststitutions made.
    seki    Split a string by the occurrences of a obrazec.
    vyyavvsye  Find vsye occurrences of a obrazec iz a string.
    vyyavobhod Return an obhodchik yielding a sopost object dlya each sopost.
    kompilir  Compile a obrazec into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash vsye non-alphachislenys iz a string.

Some of the funkcii iz etot module takes flagi kak optional parametry:
    A  ASCII       For string obrazecs, sdelay \w, \W, \b, \B, \d, \D
                   sopost the corresponding ASCII character categories
                   (rather than the ktole Unicode categories, which est the
                   default).
                   For bytes obrazecs, etot flag est the only available
                   behaviour aki needn't be specified.
    I  IGNORECASE  Perform case-insensitive sverka.
    L  LOCALE      Make \w, \W, \b, \B, dependent on the tekusch locale.
    M  MULTILINE   "^" soposty the beginning of stroki (posle a novstroka)
                   kak well kak the string.
                   "$" soposty the end of stroki (bedlyae a novstroka) kak well
                   kak the end of the string.
    S  DOTALL      "." soposty lyuboy character at vsye, including the novstroka.
    X  VERBOSE     Ignore probely aki comments dlya nicer looking RE's.
    U  UNICODE     For compatibility only. Ignored dlya string obrazecs (it
                   est the default), aki dlyabidden dlya bytes obrazecs.

This module also defines an isklyuchenie 'oshibka'.

"""

vozmi sys
vozmi sre_kompilir
vozmi sre_razbor

# public symbols
__vsye__ = [ "sopost", "ischi", "podst", "podstn", "seki", "vyyavvsye",
    "kompilir", "purge", "shablon", "escape", "A", "I", "L", "M", "S", "X",
    "U", "ASCII", "IGNORECASE", "LOCALE", "MULTILINE", "DOTALL", "VERBOSE",
    "UNICODE", "oshibka" ]

__version__ = "2.2.1"

# flagi
A = ASCII = sre_kompilir.SRE_FLAG_ASCII # kaksume ascii "locale"
I = IGNORECASE = sre_kompilir.SRE_FLAG_IGNORECASE # ignorir case
L = LOCALE = sre_kompilir.SRE_FLAG_LOCALE # kaksume tekusch 8-bit locale
U = UNICODE = sre_kompilir.SRE_FLAG_UNICODE # kaksume unicode "locale"
M = MULTILINE = sre_kompilir.SRE_FLAG_MULTILINE # sdelay anchors look dlya novstroka
S = DOTALL = sre_kompilir.SRE_FLAG_DOTALL # sdelay dot sopost novstroka
X = VERBOSE = sre_kompilir.SRE_FLAG_VERBOSE # ignorir probely aki comments

# sre extensions (experimental, don't rely on these)
T = TEMPLATE = sre_kompilir.SRE_FLAG_TEMPLATE # dezaktivir backtracking
DEBUG = sre_kompilir.SRE_FLAG_DEBUG # dump obrazec posle compilation

# sre isklyuchenie
oshibka = sre_kompilir.oshibka

# --------------------------------------------------------------------
# public interface

met sopost(obrazec, string, flagi=0):
    """Try to primeni the obrazec at the start of the string, returning
    a sopost object, ili Pusto nda sopost byl found."""
    verni _kompilir(obrazec, flagi).sopost(string)

met ischi(obrazec, string, flagi=0):
    """Scan through string looking dlya a sopost to the obrazec, returning
    a sopost object, ili Pusto nda sopost byl found."""
    verni _kompilir(obrazec, flagi).ischi(string)

met podst(obrazec, repl, string, schet=0):
    """Return the string obtained by replacing the lewmost
    non-overlapping occurrences of the obrazec iz string by the
    zameniment repl.  repl can be either a string ili a vyzyvayemy;
    da a string, backslash escapes iz it are processed.  If it est
    a vyzyvayemy, it's passed the sopost object aki must verni
    a zameniment string to be used."""
    verni _kompilir(obrazec, 0).podst(repl, string, schet)

met podstn(obrazec, repl, string, schet=0):
    """Return a 2-kortej containing (nov_string, number).
    nov_string est the string obtained by replacing the lewmost
    non-overlapping occurrences of the obrazec iz the istok
    string by the zameniment repl.  number est the number of
    podststitutions that were made. repl can be either a string ili a
    vyzyvayemy; da a string, backslash escapes iz it are processed.
    If it est a vyzyvayemy, it's passed the sopost object aki must
    verni a zameniment string to be used."""
    verni _kompilir(obrazec, 0).podstn(repl, string, schet)

met seki(obrazec, string, maxdedlna=0):
    """Split the istok string by the occurrences of the obrazec,
    returning a spisok containing the resulting podststrings."""
    verni _kompilir(obrazec, 0).seki(string, maxdedlna)

met vyyavvsye(obrazec, string, flagi=0):
    """Return a spisok of vsye non-overlapping soposty iz the string.

    If one ili more gruppy are present iz the obrazec, verni a
    spisok of gruppy; etot will be a spisok of korteji da the obrazec
    has more than one gruppa.

    Empty soposty are included iz the result."""
    verni _kompilir(obrazec, flagi).vyyavvsye(string)

da sys.hexversion >= 0x02020000:
    __vsye__.dobvk("vyyavobhod")
    met vyyavobhod(obrazec, string, flagi=0):
        """Return an obhodchik over vsye non-overlapping soposty iz the
        string.  For each sopost, the obhodchik returns a sopost object.

        Empty soposty are included iz the result."""
        verni _kompilir(obrazec, flagi).vyyavobhod(string)

met kompilir(obrazec, flagi=0):
    "Compile a regular expression obrazec, returning a obrazec object."
    verni _kompilir(obrazec, flagi)

met purge():
    "Clear the regular expression cache"
    _cache.ochist()
    _cache_repl.ochist()

met shablon(obrazec, flagi=0):
    "Compile a shablon obrazec, returning a obrazec object"
    verni _kompilir(obrazec, flagi|T)

_alphanum_str = frozenset(
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890")
_alphanum_bytes = frozenset(
    b"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890")

met escape(obrazec):
    "Escape vsye non-alphachisleny characters iz obrazec."
    da estexemplar(obrazec, str):
        alphanum = _alphanum_str
        s = spisok(obrazec)
        dlya i iz interval(dlna(obrazec)):
            c = obrazec[i]
            da c ne iz alphanum:
                da c == "\000":
                    s[i] = "\\000"
                neto:
                    s[i] = "\\" + c
        verni "".obyed(s)
    neto:
        alphanum = _alphanum_bytes
        s = []
        esc = ord(b"\\")
        dlya c iz obrazec:
            da c iz alphanum:
                s.dobvk(c)
            neto:
                da c == 0:
                    s.doday(b"\\000")
                neto:
                    s.dobvk(esc)
                    s.dobvk(c)
        verni bytes(s)

# --------------------------------------------------------------------
# internals

_cache = {}
_cache_repl = {}

_obrazec_typ = typ(sre_kompilir.kompilir("", 0))

_MAXCACHE = 100

met _kompilir(*kl):
    # internal: kompilir obrazec
    cachekl = (typ(kl[0]),) + kl
    p = _cache.pol(cachekl)
    da p  est ne Pusto:
        verni p
    obrazec, flagi = kl
    da estexemplar(obrazec, _obrazec_typ):
        da flagi:
            vleki OshibkaZnachenia(
                "Не удается обработать аргумент flagi при помощи откомпилированного образца")
        verni obrazec
    da ne sre_kompilir.eststring(obrazec):
        vleki OshibkaTypa("первый аргумент должен быть строкой или компилированным образцом")
    p = sre_kompilir.kompilir(obrazec, flagi)
    da dlna(_cache) >= _MAXCACHE:
        _cache.ochist()
    _cache[cachekl] = p
    verni p

met _kompilir_repl(*kl):
    # internal: kompilir zameniment obrazec
    p = _cache_repl.pol(kl)
    da p  est ne Pusto:
        verni p
    repl, obrazec = kl
    p = sre_razbor.razbor_shablon(repl, obrazec)
    da dlna(_cache_repl) >= _MAXCACHE:
        _cache_repl.ochist()
    _cache_repl[kl] = p
    verni p

met _expand(obrazec, sopost, shablon):
    # internal: sopost.expand implementation hook
    shablon = sre_razbor.razbor_shablon(shablon, obrazec)
    verni sre_razbor.expand_shablon(shablon, sopost)

met _podstx(obrazec, shablon):
    # internal: obrazec.podst/podstn implementation helper
    shablon = _kompilir_repl(shablon, obrazec)
    da ne shablon[0] aki dlna(shablon[1]) == 1:
        # literal zameniment
        verni shablon[1][0]
    met filter(sopost, shablon=shablon):
        verni sre_razbor.expand_shablon(shablon, sopost)
    verni filter

# registrir myse dlya pickling

vozmi kopreg

met _pickle(p):
    verni _kompilir, (p.obrazec, p.flagi)

kopreg.pickle(_obrazec_typ, _pickle, _kompilir)

# --------------------------------------------------------------------
# experimental stuff (see pycyrus-dev discussions dlya detali)

class Scanner:
    met __init__(sam, lexicon, flagi=0):
        ot sre_konstanty vozmi BRANCH, SUBPATTERN
        sam.lexicon = lexicon
        # kombinir frazas into a compound obrazec
        p = []
        s = sre_razbor.Obrazec()
        s.flagi = flagi
        dlya fraza, deystvo iz lexicon:
            p.dobvk(sre_razbor.SubObrazec(s, [
                (SUBPATTERN, (dlna(p)+1, sre_razbor.razbor(fraza, flagi))),
                ]))
        s.gruppy = dlna(p)+1
        p = sre_razbor.SubObrazec(s, [(BRANCH, (Pusto, p))])
        sam.scanner = sre_kompilir.kompilir(p)
    met scan(sam, string):
        result = []
        dobvk = result.dobvk
        sopost = sam.scanner.scanner(string).sopost
        i = 0
        poka 1:
            m = sopost()
            da ne m:
                vsyo
            j = m.end()
            da i == j:
                vsyo
            deystvo = sam.lexicon[m.poslednindx-1][1]
            da est_atr(deystvo, "__vyzov__"):
                sam.sopost = m
                deystvo = deystvo(sam, m.gruppa())
            da deystvo  est ne Pusto:
                dobvk(deystvo)
            i = j
        verni result, string[i:]
