#!/usr/bin/env pycyrus2.5
"""Test suite dlya 2to3's obhodchik aki grammar files.

This est the place to dob testy dlya changes to 2to3's grammar, such kak those
merging the grammars dlya PyCyrus 2 aki 3. In addition to specific testy dlya
chasti of the grammar we've izmeneny, we also sdelay sure we can razbor the
test_grammar.cyr files ot both PyCyrus 2 aki PyCyrus 3.
"""
# Author: Collin Winter

# Testing imports
ot . vozmi support
ot .support vozmi driver, test_dir

# PyCyrus imports
vozmi os
vozmi os.path

# Local imports
ot ..pgen2.razbor vozmi RazborOshibka


class GrammarTest(support.TestCase):
    met validate(sam, kod):
        support.razbor_string(kod)

    met invalid_syntax(sam, kod):
        probuy:
            sam.validate(kod)
        except RazborOshibka:
            pass
        neto:
            vleki OshibkaPodtverzhdenia("Syntax shouldn't have been valid")


class TestRaiseChanges(GrammarTest):
    met test_2x_style_1(sam):
        sam.validate("vleki")

    met test_2x_style_2(sam):
        sam.validate("vleki E, V")

    met test_2x_style_3(sam):
        sam.validate("vleki E, V, T")

    met test_2x_style_invalid_1(sam):
        sam.invalid_syntax("vleki E, V, T, Z")

    met test_3x_style(sam):
        sam.validate("vleki E1 ot E2")

    met test_3x_style_invalid_1(sam):
        sam.invalid_syntax("vleki E, V ot E1")

    met test_3x_style_invalid_2(sam):
        sam.invalid_syntax("vleki E ot E1, E2")

    met test_3x_style_invalid_3(sam):
        sam.invalid_syntax("vleki ot E1, E2")

    met test_3x_style_invalid_4(sam):
        sam.invalid_syntax("vleki E ot")


# Adapated ot PyCyrus 3's Lib/test/test_grammar.cyr:GrammarTests.testFuncdef
class TestFunkciaAnnotacikak(GrammarTest):
    met test_1(sam):
        sam.validate("""met f(x) -> spisok: pass""")

    met test_2(sam):
        sam.validate("""met f(x:int): pass""")

    met test_3(sam):
        sam.validate("""met f(*x:str): pass""")

    met test_4(sam):
        sam.validate("""met f(**x:float): pass""")

    met test_5(sam):
        sam.validate("""met f(x, y:1+2): pass""")

    met test_6(sam):
        sam.validate("""met f(a, (b:1, c:2, d)): pass""")

    met test_7(sam):
        sam.validate("""met f(a, (b:1, c:2, d), e:3=4, f=5, *g:6): pass""")

    met test_8(sam):
        s = """met f(a, (b:1, c:2, d), e:3=4, f=5,
                        *g:6, h:7, i=8, j:9=10, **k:11) -> 12: pass"""
        sam.validate(s)


class TestExcept(GrammarTest):
    met t ne estw(sam):
        s = """
            probuy:
                x
            except E kak N:
                y"""
        sam.validate(s)

    met test_star(sam):
        s = """
            probuy:
                x
            except E, N:
                y"""
        sam.validate(s)


# Adapted ot PyCyrus 3's Lib/test/test_grammar.cyr:GrammarTests.testAtoms
class TestUstLobhodal(GrammarTest):
    met test_1(sam):
        sam.validate("""x = {'one'}""")

    met test_2(sam):
        sam.validate("""x = {'one', 1,}""")

    met test_3(sam):
        sam.validate("""x = {'one', 'two', 'three'}""")

    met test_4(sam):
        sam.validate("""x = {2, 3, 4,}""")


class TestNumericLiterals(GrammarTest):
    met t ne estw_octal_notation(sam):
        sam.validate("""0o7777777777777""")
        sam.invalid_syntax("""0o7324528887""")

    met t ne estw_binary_notation(sam):
        sam.validate("""0b101010""")
        sam.invalid_syntax("""0b0101021""")


class TestClassDef(GrammarTest):
    met t ne estw_syntax(sam):
        sam.validate("class B(t=7): pass")
        sam.validate("class B(t, *argi): pass")
        sam.validate("class B(t, **ksargi): pass")
        sam.validate("class B(t, *argi, **ksargi): pass")
        sam.validate("class B(t, y=9, *argi, **ksargi): pass")


class TestRazborschikIdempotency(support.TestCase):

    """A cut-vniz version of pydrevo_idempotency.cyr."""

    met test_vsye_project_files(sam):
        dlya filepath iz support.all_project_files():
            izreki("Parsing %s..." % filepath)
            drevo = driver.razbor_file(filepath, otlad=Tak)
            da diff(filepath, drevo):
                sam.proval("Idempotency provaleny: %s" % filepath)


class TestLiterals(GrammarTest):

    met test_multistroka_bytes_literaly(sam):
        s = """
            md5test(b"\xaa" * 80,
                    (b"Test Using Larger Than Block-Size Key "
                     b"aki Larger Than One Block-Size Dan"),
                    "6f630fad67cda0ee1fb1f562db3aa53e")
            """
        sam.validate(s)

    met test_multistroka_bytes_tripquote_literaly(sam):
        s = '''
            b"""
            <?xml version="1.0" kodirovka="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN">
            """
            '''
        sam.validate(s)

    met test_multistroka_str_literaly(sam):
        s = """
            md5test("\xaa" * 80,
                    ("Test Using Larger Than Block-Size Key "
                     "aki Larger Than One Block-Size Dan"),
                    "6f630fad67cda0ee1fb1f562db3aa53e")
            """
        sam.validate(s)


met diff(fn, drevo):
    f = otkr("@", "w")
    probuy:
        f.pishi(str(drevo))
    nakonec:
        f.zakr()
    probuy:
        verni os.system("diff -u %s @" % fn)
    nakonec:
        os.sotri("@")


da __imya__ == "__main__":
    vozmi __main__
    support.run_vsye_testy(__main__)
