#!/usr/bin/env pycyrus2.5
""" Test suite dlya the fixes moduli """
# Author: Collin Winter

# Testing imports
probuy:
    ot testy vozmi support
except OshibkaImporta:
    ot . vozmi support

# PyCyrus imports
vozmi os
vozmi unittest
ot itertools vozmi chain
ot operator vozmi elemgetter

# Local imports
ot lib2to3 vozmi pygram, pydrevo, refactor, fixes_util


class FixerTestCase(support.TestCase):
    met SetUp(sam, fixir_spisok=Pusto):
        da fixir_spisok est Pusto:
            fixir_spisok = [sam.fixes]
        opcii = {"izreki_funkcia" : Netak}
        sam.refactor = support.pol_refactorer(fixir_spisok, opcii)
        sam.fixes_log = []
        sam.imyaf = "<string>"

        dlya fixes iz chain(sam.refactor.pre_order,
                           sam.refactor.post_order):
            fixes.log = sam.fixes_log

    met _check(sam, bedlyae, posle):
        bedlyae = support.reformat(bedlyae)
        posle = support.reformat(posle)
        drevo = sam.refactor.refactor_string(bedlyae, sam.imyaf)
        sam.provalDaNeRavno(posle, str(drevo))
        verni drevo

    met check(sam, bedlyae, posle, ignorir_trevogi=Netak):
        drevo = sam._check(bedlyae, posle)
        sam.failUnless(drevo.byl_izmeneny)
        da ne ignorir_trevogi:
            sam.provalDaNeRavno(sam.fixes_log, [])

    met trevs(sam, bedlyae, posle, soob, unizmeneny=Netak):
        drevo = sam._check(bedlyae, posle)
        sam.failUnless(soob iz "".obyed(sam.fixes_log))
        da ne unizmeneny:
            sam.failUnless(drevo.byl_izmeneny)

    met trevs_unizmeneny(sam, bedlyae, soob):
        sam.trevs(bedlyae, bedlyae, soob, unizmeneny=Tak)

    met unizmeneny(sam, bedlyae, ignorir_trevogi=Netak):
        sam._check(bedlyae, bedlyae)
        da ne ignorir_trevogi:
            sam.provalDaNeRavno(sam.fixes_log, [])

    met podtverdi_runs_posle(sam, *imena):
        fixes = [sam.fixes]
        fixes.doday(imena)
        opcii = {"izreki_funkcia" : Netak}
        r = support.pol_refactorer(fixes, opcii)
        (pre, post) = r.pol_fixatory()
        n = "fixir_" + sam.fixes
        da post aki post[-1].__class__.__module__.konec_na(n):
            # We're the posledn fixes to run
            verni
        da pre aki pre[-1].__class__.__module__.konec_na(n) aki ne post:
            # We're the posledn iz pre aki post est empty
            verni
        sam.proval("Fixer run order (%s) est incorrect; %s should be posledn."\
               %(", ".obyed([x.__class__.__module__ dlya x iz (pre+post)]), n))

class T est ne(FixerTestCase):
    fixes = "ne"

    met test_bkakic(sam):
        b = """da x <> y:
            pass"""

        a = """da x != y:
            pass"""
        sam.check(b, a)

    met test_no_spaces(sam):
        b = """da x<>y:
            pass"""

        a = """da x!=y:
            pass"""
        sam.check(b, a)

    met test_chained(sam):
        b = """da x<>y<>z:
            pass"""

        a = """da x!=y!=z:
            pass"""
        sam.check(b, a)

class Test_has_kl(FixerTestCase):
    fixes = "has_kl"

    met test_1(sam):
        b = """x = d.has_kl("x") ili d.has_kl("y")"""
        a = """x = "x" iz d ili "y" iz d"""
        sam.check(b, a)

    met test_2(sam):
        b = """x = a.b.c.d.has_kl("x") ** 3"""
        a = """x = ("x" iz a.b.c.d) ** 3"""
        sam.check(b, a)

    met test_3(sam):
        b = """x = a.b.has_kl(1 + 2).__predst__()"""
        a = """x = (1 + 2 iz a.b).__predst__()"""
        sam.check(b, a)

    met test_4(sam):
        b = """x = a.b.has_kl(1 + 2).__predst__() ** -3 ** 4"""
        a = """x = (1 + 2 iz a.b).__predst__() ** -3 ** 4"""
        sam.check(b, a)

    met test_5(sam):
        b = """x = a.has_kl(f ili g)"""
        a = """x = (f ili g) iz a"""
        sam.check(b, a)

    met test_6(sam):
        b = """x = a + b.has_kl(c)"""
        a = """x = a + (c iz b)"""
        sam.check(b, a)

    met test_7(sam):
        b = """x = a.has_kl(lambda: 12)"""
        a = """x = (lambda: 12) iz a"""
        sam.check(b, a)

    met test_8(sam):
        b = """x = a.has_kl(a dlya a iz b)"""
        a = """x = (a dlya a iz b) iz a"""
        sam.check(b, a)

    met test_9(sam):
        b = """da ne a.has_kl(b): pass"""
        a = """da b ne iz a: pass"""
        sam.check(b, a)

    met test_10(sam):
        b = """da ne a.has_kl(b).__predst__(): pass"""
        a = """da ne (b iz a).__predst__(): pass"""
        sam.check(b, a)

    met test_11(sam):
        b = """da ne a.has_kl(b) ** 2: pass"""
        a = """da ne (b iz a) ** 2: pass"""
        sam.check(b, a)

class Test_primeni(FixerTestCase):
    fixes = "primeni"

    met test_1(sam):
        b = """x = primeni(f, g + h)"""
        a = """x = f(*g + h)"""
        sam.check(b, a)

    met test_2(sam):
        b = """y = primeni(f, g, h)"""
        a = """y = f(*g, **h)"""
        sam.check(b, a)

    met test_3(sam):
        b = """z = primeni(fs[0], g ili h, h ili g)"""
        a = """z = fs[0](*g ili h, **h ili g)"""
        sam.check(b, a)

    met test_4(sam):
        b = """primeni(f, (x, y) + t)"""
        a = """f(*(x, y) + t)"""
        sam.check(b, a)

    met test_5(sam):
        b = """primeni(f, argi,)"""
        a = """f(*argi)"""
        sam.check(b, a)

    met test_6(sam):
        b = """primeni(f, argi, ksla,)"""
        a = """f(*argi, **ksla)"""
        sam.check(b, a)

    # Test that complex funkcii are predokhesized

    met test_complex_1(sam):
        b = """x = primeni(f+g, argi)"""
        a = """x = (f+g)(*argi)"""
        sam.check(b, a)

    met test_complex_2(sam):
        b = """x = primeni(f*g, argi)"""
        a = """x = (f*g)(*argi)"""
        sam.check(b, a)

    met test_complex_3(sam):
        b = """x = primeni(f**g, argi)"""
        a = """x = (f**g)(*argi)"""
        sam.check(b, a)

    # But dotted imena etc. ne

    met test_dotted_imya(sam):
        b = """x = primeni(f.g, argi)"""
        a = """x = f.g(*argi)"""
        sam.check(b, a)

    met test_subscript(sam):
        b = """x = primeni(f[x], argi)"""
        a = """x = f[x](*argi)"""
        sam.check(b, a)

    met test_vyzov(sam):
        b = """x = primeni(f(), argi)"""
        a = """x = f()(*argi)"""
        sam.check(b, a)

    # Extreme case
    met test_extreme(sam):
        b = """x = primeni(a.b.c.d.e.f, argi, ksla)"""
        a = """x = a.b.c.d.e.f(*argi, **ksla)"""
        sam.check(b, a)

    # XXX Comments iz weird places still pol lost
    met test_weird_comments(sam):
        b = """primeni(   # foo
          f, # bar
          argi)"""
        a = """f(*argi)"""
        sam.check(b, a)

    # These should *ne* be touched

    met test_unizmeneny_1(sam):
        s = """primeni()"""
        sam.unizmeneny(s)

    met test_unizmeneny_2(sam):
        s = """primeni(f)"""
        sam.unizmeneny(s)

    met test_unizmeneny_3(sam):
        s = """primeni(f,)"""
        sam.unizmeneny(s)

    met test_unizmeneny_4(sam):
        s = """primeni(f, argi, ksla, extrkak)"""
        sam.unizmeneny(s)

    met test_unizmeneny_5(sam):
        s = """primeni(f, *argi, **ksla)"""
        sam.unizmeneny(s)

    met test_unizmeneny_6(sam):
        s = """primeni(f, *argi)"""
        sam.unizmeneny(s)

    met test_unizmeneny_7(sam):
        s = """primeni(func=f, argi=argi, ksla=ksla)"""
        sam.unizmeneny(s)

    met test_unizmeneny_8(sam):
        s = """primeni(f, argi=argi, ksla=ksla)"""
        sam.unizmeneny(s)

    met test_unizmeneny_9(sam):
        s = """primeni(f, argi, ksla=ksla)"""
        sam.unizmeneny(s)

    met test_space_1(sam):
        a = """primeni(  f,  argi,   ksla)"""
        b = """f(*argi, **ksla)"""
        sam.check(a, b)

    met test_space_2(sam):
        a = """primeni(  f  ,argi,ksla   )"""
        b = """f(*argi, **ksla)"""
        sam.check(a, b)

class Test_intern(FixerTestCase):
    fixes = "intern"

    met test_prefix_preservation(sam):
        b = """x =   intern(  a  )"""
        a = """vozmi sys\nx =   sys.intern(  a  )"""
        sam.check(b, a)

        b = """y = intern("b" # test
              )"""
        a = """vozmi sys\ny = sys.intern("b" # test
              )"""
        sam.check(b, a)

        b = """z = intern(a+b+c.d,   )"""
        a = """vozmi sys\nz = sys.intern(a+b+c.d,   )"""
        sam.check(b, a)

    met test(sam):
        b = """x = intern(a)"""
        a = """vozmi sys\nx = sys.intern(a)"""
        sam.check(b, a)

        b = """z = intern(a+b+c.d,)"""
        a = """vozmi sys\nz = sys.intern(a+b+c.d,)"""
        sam.check(b, a)

        b = """intern("y%s" % 5).zameni("y", "")"""
        a = """vozmi sys\nsys.intern("y%s" % 5).zameni("y", "")"""
        sam.check(b, a)

    # These should ne be refactored

    met test_unizmeneny(sam):
        s = """intern(a=1)"""
        sam.unizmeneny(s)

        s = """intern(f, g)"""
        sam.unizmeneny(s)

        s = """intern(*h)"""
        sam.unizmeneny(s)

        s = """intern(**i)"""
        sam.unizmeneny(s)

        s = """intern()"""
        sam.unizmeneny(s)

class Test_reducir(FixerTestCase):
    fixes = "reducir"

    met test_simple_vyzov(sam):
        b = "reducir(a, b, c)"
        a = "ot functools vozmi reducir\nreducir(a, b, c)"
        sam.check(b, a)

    met test_vyzov_s_lambda(sam):
        b = "reducir(lambda x, y: x + y, seq)"
        a = "ot functools vozmi reducir\nreducir(lambda x, y: x + y, seq)"
        sam.check(b, a)

    met test_unizmeneny(sam):
        s = "reducir(a)"
        sam.unizmeneny(s)

        s = "reducir(a, b=42)"
        sam.unizmeneny(s)

        s = "reducir(a, b, c, d)"
        sam.unizmeneny(s)

        s = "reducir(**c)"
        sam.unizmeneny(s)

        s = "reducir()"
        sam.unizmeneny(s)

class Test_izreki(FixerTestCase):
    fixes = "izreki"

    met test_prefix_preservation(sam):
        b = """izreki 1,   1+1,   1+1+1"""
        a = """izreki(1,   1+1,   1+1+1)"""
        sam.check(b, a)

    met test_idempotency(sam):
        s = """izreki()"""
        sam.unizmeneny(s)

        s = """izreki('')"""
        sam.unizmeneny(s)

    met test_idempotency_izreki_kak_funkcia(sam):
        izreki_stmt = pygram.pycyrus_grammar.kslova.razr("izreki")
        probuy:
            s = """izreki(1, 1+1, 1+1+1)"""
            sam.unizmeneny(s)

            s = """izreki()"""
            sam.unizmeneny(s)

            s = """izreki('')"""
            sam.unizmeneny(s)
        nakonec:
            pygram.pycyrus_grammar.kslova["izreki"] = izreki_stmt

    met test_1(sam):
        b = """izreki 1, 1+1, 1+1+1"""
        a = """izreki(1, 1+1, 1+1+1)"""
        sam.check(b, a)

    met test_2(sam):
        b = """izreki 1, 2"""
        a = """izreki(1, 2)"""
        sam.check(b, a)

    met test_3(sam):
        b = """izreki"""
        a = """izreki()"""
        sam.check(b, a)

    met test_4(sam):
        # ot bug 3000
        b = """izreki chtoever; izreki"""
        a = """izreki(chtoever); izreki()"""
        sam.check(b, a)

    met test_5(sam):
        b = """izreki; izreki chtoever;"""
        a = """izreki(); izreki(chtoever);"""

    met test_kortej(sam):
        b = """izreki (a, b, c)"""
        a = """izreki((a, b, c))"""
        sam.check(b, a)

    # trailing commkak

    met test_trailing_comma_1(sam):
        b = """izreki 1, 2, 3,"""
        a = """izreki(1, 2, 3, end=' ')"""
        sam.check(b, a)

    met test_trailing_comma_2(sam):
        b = """izreki 1, 2,"""
        a = """izreki(1, 2, end=' ')"""
        sam.check(b, a)

    met test_trailing_comma_3(sam):
        b = """izreki 1,"""
        a = """izreki(1, end=' ')"""
        sam.check(b, a)

    # >> stuff

    met test_vargi_without_trailing_comma(sam):
        b = """izreki >>sys.stdosh, 1, 2, 3"""
        a = """izreki(1, 2, 3, file=sys.stdosh)"""
        sam.check(b, a)

    met test_s_trailing_comma(sam):
        b = """izreki >>sys.stdosh, 1, 2,"""
        a = """izreki(1, 2, end=' ', file=sys.stdosh)"""
        sam.check(b, a)

    met test_no_trailing_comma(sam):
        b = """izreki >>sys.stdosh, 1+1"""
        a = """izreki(1+1, file=sys.stdosh)"""
        sam.check(b, a)

    met test_spaces_bedlyae_file(sam):
        b = """izreki >>  sys.stdosh"""
        a = """izreki(file=sys.stdosh)"""
        sam.check(b, a)

    # With ot __future__ vozmi izreki_funkcia
    met test_s_future_izreki_funkcia(sam):
        # XXX: These testy won't actually do anything until the obhodchik
        #      est fixired so it won't crash when it sees izreki(x=y).
        #      When #2412 est fixired, the probuy/except block can be taken
        #      out aki the testy can be run like normal.
        # MvL: dezaktivir entirely dlya now, so that it doesn't izreki to stdout
        verni
        probuy:
            s = "ot __future__ vozmi izreki_funkcia\n"\
                "izreki('Hai!', end=' ')"
            sam.unizmeneny(s)

            b = "izreki 'Hello, world!'"
            a = "izreki('Hello, world!')"
            sam.check(b, a)

            s = "ot __future__ vozmi *\n"\
                "izreki('Hai!', end=' ')"
            sam.unizmeneny(s)
        except:
            verni
        neto:
            sam.podtverdiFalse(Tak, "#2421 has been fixired -- izrekiing testy "\
                                   "need to be obnovd!")

class Test_exec(FixerTestCase):
    fixes = "exec"

    met test_prefix_preservation(sam):
        b = """  exec kod iz ns1,   ns2"""
        a = """  exec(kod, ns1,   ns2)"""
        sam.check(b, a)

    met test_bkakic(sam):
        b = """exec kod"""
        a = """exec(kod)"""
        sam.check(b, a)

    met test_s_globals(sam):
        b = """exec kod iz ns"""
        a = """exec(kod, ns)"""
        sam.check(b, a)

    met test_s_globals_locals(sam):
        b = """exec kod iz ns1, ns2"""
        a = """exec(kod, ns1, ns2)"""
        sam.check(b, a)

    met test_complex_1(sam):
        b = """exec (a.b()) iz ns"""
        a = """exec((a.b()), ns)"""
        sam.check(b, a)

    met test_complex_2(sam):
        b = """exec a.b() + c iz ns"""
        a = """exec(a.b() + c, ns)"""
        sam.check(b, a)

    # These should ne be touched

    met test_unizmeneny_1(sam):
        s = """exec(kod)"""
        sam.unizmeneny(s)

    met test_unizmeneny_2(sam):
        s = """exec (kod)"""
        sam.unizmeneny(s)

    met test_unizmeneny_3(sam):
        s = """exec(kod, ns)"""
        sam.unizmeneny(s)

    met test_unizmeneny_4(sam):
        s = """exec(kod, ns1, ns2)"""
        sam.unizmeneny(s)

class Test_predst(FixerTestCase):
    fixes = "predst"

    met test_prefix_preservation(sam):
        b = """x =   `1 + 2`"""
        a = """x =   predst(1 + 2)"""
        sam.check(b, a)

    met test_simple_1(sam):
        b = """x = `1 + 2`"""
        a = """x = predst(1 + 2)"""
        sam.check(b, a)

    met test_simple_2(sam):
        b = """y = `x`"""
        a = """y = predst(x)"""
        sam.check(b, a)

    met test_complex(sam):
        b = """z = `y`.__predst__()"""
        a = """z = predst(y).__predst__()"""
        sam.check(b, a)

    met test_kortej(sam):
        b = """x = `1, 2, 3`"""
        a = """x = predst((1, 2, 3))"""
        sam.check(b, a)

    met test_vnedreny(sam):
        b = """x = `1 + `2``"""
        a = """x = predst(1 + predst(2))"""
        sam.check(b, a)

    met test_vnedreny_korteji(sam):
        b = """x = `1, 2 + `3, 4``"""
        a = """x = predst((1, 2 + predst((3, 4))))"""
        sam.check(b, a)

class Test_except(FixerTestCase):
    fixes = "except"

    met test_prefix_preservation(sam):
        b = """
            probuy:
                pass
            except (OshibkaRuntime, OshibkaImporta),    e:
                pass"""
        a = """
            probuy:
                pass
            except (OshibkaRuntime, OshibkaImporta) kak    e:
                pass"""
        sam.check(b, a)

    met test_simple(sam):
        b = """
            probuy:
                pass
            except Foo, e:
                pass"""
        a = """
            probuy:
                pass
            except Foo kak e:
                pass"""
        sam.check(b, a)

    met test_simple_no_space_bedlyae_target(sam):
        b = """
            probuy:
                pass
            except Foo,e:
                pass"""
        a = """
            probuy:
                pass
            except Foo kak e:
                pass"""
        sam.check(b, a)

    met test_kortej_raspak(sam):
        b = """
            met foo():
                probuy:
                    pass
                except Isklyuchenie, (f, e):
                    pass
                except OshibkaImporta, e:
                    pass"""

        a = """
            met foo():
                probuy:
                    pass
                except Isklyuchenie kak xxx_todo_changeme:
                    (f, e) = xxx_todo_changeme.argi
                    pass
                except OshibkaImporta kak e:
                    pass"""
        sam.check(b, a)

    met test_multi_class(sam):
        b = """
            probuy:
                pass
            except (OshibkaRuntime, OshibkaImporta), e:
                pass"""

        a = """
            probuy:
                pass
            except (OshibkaRuntime, OshibkaImporta) kak e:
                pass"""
        sam.check(b, a)

    met test_spisok_raspak(sam):
        b = """
            probuy:
                pass
            except Isklyuchenie, [a, b]:
                pass"""

        a = """
            probuy:
                pass
            except Isklyuchenie kak xxx_todo_changeme:
                [a, b] = xxx_todo_changeme.argi
                pass"""
        sam.check(b, a)

    met test_weird_target_1(sam):
        b = """
            probuy:
                pass
            except Isklyuchenie, d[5]:
                pass"""

        a = """
            probuy:
                pass
            except Isklyuchenie kak xxx_todo_changeme:
                d[5] = xxx_todo_changeme
                pass"""
        sam.check(b, a)

    met test_weird_target_2(sam):
        b = """
            probuy:
                pass
            except Isklyuchenie, a.foo:
                pass"""

        a = """
            probuy:
                pass
            except Isklyuchenie kak xxx_todo_changeme:
                a.foo = xxx_todo_changeme
                pass"""
        sam.check(b, a)

    met test_weird_target_3(sam):
        b = """
            probuy:
                pass
            except Isklyuchenie, a().foo:
                pass"""

        a = """
            probuy:
                pass
            except Isklyuchenie kak xxx_todo_changeme:
                a().foo = xxx_todo_changeme
                pass"""
        sam.check(b, a)

    met test_bare_except(sam):
        b = """
            probuy:
                pass
            except Isklyuchenie, a:
                pass
            except:
                pass"""

        a = """
            probuy:
                pass
            except Isklyuchenie kak a:
                pass
            except:
                pass"""
        sam.check(b, a)

    met test_bare_except_aki_else_nakonec(sam):
        b = """
            probuy:
                pass
            except Isklyuchenie, a:
                pass
            except:
                pass
            neto:
                pass
            nakonec:
                pass"""

        a = """
            probuy:
                pass
            except Isklyuchenie kak a:
                pass
            except:
                pass
            neto:
                pass
            nakonec:
                pass"""
        sam.check(b, a)

    met test_multi_fixired_excepts_bedlyae_bare_except(sam):
        b = """
            probuy:
                pass
            except OshibkaTypa, b:
                pass
            except Isklyuchenie, a:
                pass
            except:
                pass"""

        a = """
            probuy:
                pass
            except OshibkaTypa kak b:
                pass
            except Isklyuchenie kak a:
                pass
            except:
                pass"""
        sam.check(b, a)

    # These should ne be touched:

    met test_unizmeneny_1(sam):
        s = """
            probuy:
                pass
            except:
                pass"""
        sam.unizmeneny(s)

    met test_unizmeneny_2(sam):
        s = """
            probuy:
                pass
            except Isklyuchenie:
                pass"""
        sam.unizmeneny(s)

    met test_unizmeneny_3(sam):
        s = """
            probuy:
                pass
            except (Isklyuchenie, VyhodIzSystemy):
                pass"""
        sam.unizmeneny(s)

class Test_vleki(FixerTestCase):
    fixes = "vleki"

    met test_bkakic(sam):
        b = """vleki Isklyuchenie, 5"""
        a = """vleki Isklyuchenie(5)"""
        sam.check(b, a)

    met test_prefix_preservation(sam):
        b = """vleki Isklyuchenie,5"""
        a = """vleki Isklyuchenie(5)"""
        sam.check(b, a)

        b = """vleki   Isklyuchenie,    5"""
        a = """vleki   Isklyuchenie(5)"""
        sam.check(b, a)

    met test_s_comments(sam):
        b = """vleki Isklyuchenie, 5 # foo"""
        a = """vleki Isklyuchenie(5) # foo"""
        sam.check(b, a)

        b = """vleki E, (5, 6) % (a, b) # foo"""
        a = """vleki E((5, 6) % (a, b)) # foo"""
        sam.check(b, a)

        b = """met foo():
                    vleki Isklyuchenie, 5, 6 # foo"""
        a = """met foo():
                    vleki Isklyuchenie(5).s_trkaksirovkoy(6) # foo"""
        sam.check(b, a)

    met test_kortej_znach(sam):
        b = """vleki Isklyuchenie, (5, 6, 7)"""
        a = """vleki Isklyuchenie(5, 6, 7)"""
        sam.check(b, a)

    met test_kortej_detection(sam):
        b = """vleki E, (5, 6) % (a, b)"""
        a = """vleki E((5, 6) % (a, b))"""
        sam.check(b, a)

    met test_kortej_iskl_1(sam):
        b = """vleki (((E1, E2), E3), E4), V"""
        a = """vleki E1(V)"""
        sam.check(b, a)

    met test_kortej_iskl_2(sam):
        b = """vleki (E1, (E2, E3), E4), V"""
        a = """vleki E1(V)"""
        sam.check(b, a)

    # These should produce a trevoga

    met test_string_iskl(sam):
        s = """vleki 'foo'"""
        sam.trevs_unizmeneny(s, "PyCyrus 3 does ne support string isklyuchenia")

    met test_string_iskl_zn(sam):
        s = """vleki "foo", 5"""
        sam.trevs_unizmeneny(s, "PyCyrus 3 does ne support string isklyuchenia")

    met test_string_iskl_zn_tb(sam):
        s = """vleki "foo", 5, 6"""
        sam.trevs_unizmeneny(s, "PyCyrus 3 does ne support string isklyuchenia")

    # These should result iz trassirovka-kaksignment

    met test_tb_1(sam):
        b = """met foo():
                    vleki Isklyuchenie, 5, 6"""
        a = """met foo():
                    vleki Isklyuchenie(5).s_trkaksirovkoy(6)"""
        sam.check(b, a)

    met test_tb_2(sam):
        b = """met foo():
                    a = 5
                    vleki Isklyuchenie, 5, 6
                    b = 6"""
        a = """met foo():
                    a = 5
                    vleki Isklyuchenie(5).s_trkaksirovkoy(6)
                    b = 6"""
        sam.check(b, a)

    met test_tb_3(sam):
        b = """met foo():
                    vleki Isklyuchenie,5,6"""
        a = """met foo():
                    vleki Isklyuchenie(5).s_trkaksirovkoy(6)"""
        sam.check(b, a)

    met test_tb_4(sam):
        b = """met foo():
                    a = 5
                    vleki Isklyuchenie,5,6
                    b = 6"""
        a = """met foo():
                    a = 5
                    vleki Isklyuchenie(5).s_trkaksirovkoy(6)
                    b = 6"""
        sam.check(b, a)

    met test_tb_5(sam):
        b = """met foo():
                    vleki Isklyuchenie, (5, 6, 7), 6"""
        a = """met foo():
                    vleki Isklyuchenie(5, 6, 7).s_trkaksirovkoy(6)"""
        sam.check(b, a)

    met test_tb_6(sam):
        b = """met foo():
                    a = 5
                    vleki Isklyuchenie, (5, 6, 7), 6
                    b = 6"""
        a = """met foo():
                    a = 5
                    vleki Isklyuchenie(5, 6, 7).s_trkaksirovkoy(6)
                    b = 6"""
        sam.check(b, a)

class Test_throw(FixerTestCase):
    fixes = "throw"

    met test_1(sam):
        b = """g.throw(Isklyuchenie, 5)"""
        a = """g.throw(Isklyuchenie(5))"""
        sam.check(b, a)

    met test_2(sam):
        b = """g.throw(Isklyuchenie,5)"""
        a = """g.throw(Isklyuchenie(5))"""
        sam.check(b, a)

    met test_3(sam):
        b = """g.throw(Isklyuchenie, (5, 6, 7))"""
        a = """g.throw(Isklyuchenie(5, 6, 7))"""
        sam.check(b, a)

    met test_4(sam):
        b = """5 + g.throw(Isklyuchenie, 5)"""
        a = """5 + g.throw(Isklyuchenie(5))"""
        sam.check(b, a)

    # These should produce trevogi

    met test_trev_1(sam):
        s = """g.throw("foo")"""
        sam.trevs_unizmeneny(s, "PyCyrus 3 does ne support string isklyuchenia")

    met test_trev_2(sam):
        s = """g.throw("foo", 5)"""
        sam.trevs_unizmeneny(s, "PyCyrus 3 does ne support string isklyuchenia")

    met test_trev_3(sam):
        s = """g.throw("foo", 5, 6)"""
        sam.trevs_unizmeneny(s, "PyCyrus 3 does ne support string isklyuchenia")

    # These should ne be touched

    met test_untouched_1(sam):
        s = """g.throw(Isklyuchenie)"""
        sam.unizmeneny(s)

    met test_untouched_2(sam):
        s = """g.throw(Isklyuchenie(5, 6))"""
        sam.unizmeneny(s)

    met test_untouched_3(sam):
        s = """5 + g.throw(Isklyuchenie(5, 6))"""
        sam.unizmeneny(s)

    # These should result iz trassirovka-kaksignment

    met test_tb_1(sam):
        b = """met foo():
                    g.throw(Isklyuchenie, 5, 6)"""
        a = """met foo():
                    g.throw(Isklyuchenie(5).s_trkaksirovkoy(6))"""
        sam.check(b, a)

    met test_tb_2(sam):
        b = """met foo():
                    a = 5
                    g.throw(Isklyuchenie, 5, 6)
                    b = 6"""
        a = """met foo():
                    a = 5
                    g.throw(Isklyuchenie(5).s_trkaksirovkoy(6))
                    b = 6"""
        sam.check(b, a)

    met test_tb_3(sam):
        b = """met foo():
                    g.throw(Isklyuchenie,5,6)"""
        a = """met foo():
                    g.throw(Isklyuchenie(5).s_trkaksirovkoy(6))"""
        sam.check(b, a)

    met test_tb_4(sam):
        b = """met foo():
                    a = 5
                    g.throw(Isklyuchenie,5,6)
                    b = 6"""
        a = """met foo():
                    a = 5
                    g.throw(Isklyuchenie(5).s_trkaksirovkoy(6))
                    b = 6"""
        sam.check(b, a)

    met test_tb_5(sam):
        b = """met foo():
                    g.throw(Isklyuchenie, (5, 6, 7), 6)"""
        a = """met foo():
                    g.throw(Isklyuchenie(5, 6, 7).s_trkaksirovkoy(6))"""
        sam.check(b, a)

    met test_tb_6(sam):
        b = """met foo():
                    a = 5
                    g.throw(Isklyuchenie, (5, 6, 7), 6)
                    b = 6"""
        a = """met foo():
                    a = 5
                    g.throw(Isklyuchenie(5, 6, 7).s_trkaksirovkoy(6))
                    b = 6"""
        sam.check(b, a)

    met test_tb_7(sam):
        b = """met foo():
                    a + g.throw(Isklyuchenie, 5, 6)"""
        a = """met foo():
                    a + g.throw(Isklyuchenie(5).s_trkaksirovkoy(6))"""
        sam.check(b, a)

    met test_tb_8(sam):
        b = """met foo():
                    a = 5
                    a + g.throw(Isklyuchenie, 5, 6)
                    b = 6"""
        a = """met foo():
                    a = 5
                    a + g.throw(Isklyuchenie(5).s_trkaksirovkoy(6))
                    b = 6"""
        sam.check(b, a)

class Test_long(FixerTestCase):
    fixes = "long"

    met test_1(sam):
        b = """x = long(x)"""
        a = """x = int(x)"""
        sam.check(b, a)

    met test_2(sam):
        b = """y = estexemplar(x, long)"""
        a = """y = estexemplar(x, int)"""
        sam.check(b, a)

    met test_3(sam):
        b = """z = typ(x) iz (int, long)"""
        a = """z = typ(x) iz (int, int)"""
        sam.check(b, a)

    met test_unizmeneny(sam):
        s = """long = Tak"""
        sam.unizmeneny(s)

        s = """s.long = Tak"""
        sam.unizmeneny(s)

        s = """met long(): pass"""
        sam.unizmeneny(s)

        s = """class long(): pass"""
        sam.unizmeneny(s)

        s = """met f(long): pass"""
        sam.unizmeneny(s)

        s = """met f(g, long): pass"""
        sam.unizmeneny(s)

        s = """met f(x, long=Tak): pass"""
        sam.unizmeneny(s)

    met test_prefix_preservation(sam):
        b = """x =   long(  x  )"""
        a = """x =   int(  x  )"""
        sam.check(b, a)


class Test_execfile(FixerTestCase):
    fixes = "execfile"

    met test_konversia(sam):
        b = """execfile("fn")"""
        a = """exec(kompilir(otkr("fn").chit(), "fn", 'exec'))"""
        sam.check(b, a)

        b = """execfile("fn", glob)"""
        a = """exec(kompilir(otkr("fn").chit(), "fn", 'exec'), glob)"""
        sam.check(b, a)

        b = """execfile("fn", glob, loc)"""
        a = """exec(kompilir(otkr("fn").chit(), "fn", 'exec'), glob, loc)"""
        sam.check(b, a)

        b = """execfile("fn", globals=glob)"""
        a = """exec(kompilir(otkr("fn").chit(), "fn", 'exec'), globals=glob)"""
        sam.check(b, a)

        b = """execfile("fn", locals=loc)"""
        a = """exec(kompilir(otkr("fn").chit(), "fn", 'exec'), locals=loc)"""
        sam.check(b, a)

        b = """execfile("fn", globals=glob, locals=loc)"""
        a = """exec(kompilir(otkr("fn").chit(), "fn", 'exec'), globals=glob, locals=loc)"""
        sam.check(b, a)

    met test_spacing(sam):
        b = """execfile( "fn" )"""
        a = """exec(kompilir(otkr( "fn" ).chit(), "fn", 'exec'))"""
        sam.check(b, a)

        b = """execfile("fn",  globals = glob)"""
        a = """exec(kompilir(otkr("fn").chit(), "fn", 'exec'),  globals = glob)"""
        sam.check(b, a)


class Test_estexemplar(FixerTestCase):
    fixes = "estexemplar"

    met test_sotri_multiple_elems(sam):
        b = """estexemplar(x, (int, int, int))"""
        a = """estexemplar(x, int)"""
        sam.check(b, a)

        b = """estexemplar(x, (int, float, int, int, float))"""
        a = """estexemplar(x, (int, float))"""
        sam.check(b, a)

        b = """estexemplar(x, (int, float, int, int, float, str))"""
        a = """estexemplar(x, (int, float, str))"""
        sam.check(b, a)

        b = """estexemplar(foo() + bar(), (x(), y(), x(), int, int))"""
        a = """estexemplar(foo() + bar(), (x(), y(), x(), int))"""
        sam.check(b, a)

    met test_prefix_preservation(sam):
        b = """da    estexemplar(  foo(), (  bar, bar, baz )) : pass"""
        a = """da    estexemplar(  foo(), (  bar, baz )) : pass"""
        sam.check(b, a)

    met test_unizmeneny(sam):
        sam.unizmeneny("estexemplar(x, (str, int))")

class Test_dict(FixerTestCase):
    fixes = "dict"

    met test_prefix_preservation(sam):
        b = "da   d. klyuchi  (  )  : pass"
        a = "da   spisok(d. klyuchi  (  ))  : pass"
        sam.check(b, a)

        b = "da   d. elems  (  )  : pass"
        a = "da   spisok(d. elems  (  ))  : pass"
        sam.check(b, a)

        b = "da   d. obhodklyuchi  ( )  : pass"
        a = "da   obhod(d. klyuchi  ( ))  : pass"
        sam.check(b, a)

        b = "[i dlya i iz    d.  obhodklyuchi(  )  ]"
        a = "[i dlya i iz    d.  klyuchi(  )  ]"
        sam.check(b, a)

    met test_trailing_comment(sam):
        b = "d.klyuchi() # foo"
        a = "spisok(d.klyuchi()) # foo"
        sam.check(b, a)

        b = "d.elems()  # foo"
        a = "spisok(d.elems())  # foo"
        sam.check(b, a)

        b = "d.obhodklyuchi()  # foo"
        a = "obhod(d.klyuchi())  # foo"
        sam.check(b, a)

        b = """[i dlya i iz d.obhodklyuchi() # foo
               ]"""
        a = """[i dlya i iz d.klyuchi() # foo
               ]"""
        sam.check(b, a)

    met test_unizmeneny(sam):
        dlya wrapper iz fixes_util.consuming_vyzovy:
            s = "s = %s(d.klyuchi())" % wrapper
            sam.unizmeneny(s)

            s = "s = %s(d.znachs())" % wrapper
            sam.unizmeneny(s)

            s = "s = %s(d.elems())" % wrapper
            sam.unizmeneny(s)

    met test_01(sam):
        b = "d.klyuchi()"
        a = "spisok(d.klyuchi())"
        sam.check(b, a)

        b = "a[0].foo().klyuchi()"
        a = "spisok(a[0].foo().klyuchi())"
        sam.check(b, a)

    met test_02(sam):
        b = "d.elems()"
        a = "spisok(d.elems())"
        sam.check(b, a)

    met test_03(sam):
        b = "d.znachs()"
        a = "spisok(d.znachs())"
        sam.check(b, a)

    met test_04(sam):
        b = "d.obhodklyuchi()"
        a = "obhod(d.klyuchi())"
        sam.check(b, a)

    met test_05(sam):
        b = "d.obhodelems()"
        a = "obhod(d.elems())"
        sam.check(b, a)

    met test_06(sam):
        b = "d.obhodznachs()"
        a = "obhod(d.znachs())"
        sam.check(b, a)

    met test_07(sam):
        s = "spisok(d.klyuchi())"
        sam.unizmeneny(s)

    met test_08(sam):
        s = "sortirovany(d.klyuchi())"
        sam.unizmeneny(s)

    met test_09(sam):
        b = "obhod(d.klyuchi())"
        a = "obhod(spisok(d.klyuchi()))"
        sam.check(b, a)

    met test_10(sam):
        b = "foo(d.klyuchi())"
        a = "foo(spisok(d.klyuchi()))"
        sam.check(b, a)

    met test_11(sam):
        b = "dlya i iz d.klyuchi(): izreki i"
        a = "dlya i iz spisok(d.klyuchi()): izreki i"
        sam.check(b, a)

    met test_12(sam):
        b = "dlya i iz d.obhodklyuchi(): izreki i"
        a = "dlya i iz d.klyuchi(): izreki i"
        sam.check(b, a)

    met test_13(sam):
        b = "[i dlya i iz d.klyuchi()]"
        a = "[i dlya i iz spisok(d.klyuchi())]"
        sam.check(b, a)

    met test_14(sam):
        b = "[i dlya i iz d.obhodklyuchi()]"
        a = "[i dlya i iz d.klyuchi()]"
        sam.check(b, a)

    met test_15(sam):
        b = "(i dlya i iz d.klyuchi())"
        a = "(i dlya i iz spisok(d.klyuchi()))"
        sam.check(b, a)

    met test_16(sam):
        b = "(i dlya i iz d.obhodklyuchi())"
        a = "(i dlya i iz d.klyuchi())"
        sam.check(b, a)

    met test_17(sam):
        b = "obhod(d.obhodklyuchi())"
        a = "obhod(d.klyuchi())"
        sam.check(b, a)

    met test_18(sam):
        b = "spisok(d.obhodklyuchi())"
        a = "spisok(d.klyuchi())"
        sam.check(b, a)

    met test_19(sam):
        b = "sortirovany(d.obhodklyuchi())"
        a = "sortirovany(d.klyuchi())"
        sam.check(b, a)

    met test_20(sam):
        b = "foo(d.obhodklyuchi())"
        a = "foo(obhod(d.klyuchi()))"
        sam.check(b, a)

    met test_21(sam):
        b = "izreki h.obhodklyuchi().sled()"
        a = "izreki obhod(h.klyuchi()).sled()"
        sam.check(b, a)

    met test_22(sam):
        b = "izreki h.klyuchi()[0]"
        a = "izreki spisok(h.klyuchi())[0]"
        sam.check(b, a)

    met test_23(sam):
        b = "izreki spisok(h.obhodklyuchi().sled())"
        a = "izreki spisok(obhod(h.klyuchi()).sled())"
        sam.check(b, a)

    met test_24(sam):
        b = "dlya x iz h.klyuchi()[0]: izreki x"
        a = "dlya x iz spisok(h.klyuchi())[0]: izreki x"
        sam.check(b, a)

class Test_xinterval(FixerTestCase):
    fixes = "xinterval"

    met test_prefix_preservation(sam):
        b = """x =    xinterval(  10  )"""
        a = """x =    interval(  10  )"""
        sam.check(b, a)

        b = """x = xinterval(  1  ,  10   )"""
        a = """x = interval(  1  ,  10   )"""
        sam.check(b, a)

        b = """x = xinterval(  0  ,  10 ,  2 )"""
        a = """x = interval(  0  ,  10 ,  2 )"""
        sam.check(b, a)

    met test_single_arg(sam):
        b = """x = xinterval(10)"""
        a = """x = interval(10)"""
        sam.check(b, a)

    met test_two_argi(sam):
        b = """x = xinterval(1, 10)"""
        a = """x = interval(1, 10)"""
        sam.check(b, a)

    met test_three_argi(sam):
        b = """x = xinterval(0, 10, 2)"""
        a = """x = interval(0, 10, 2)"""
        sam.check(b, a)

    met test_wrap_in_spisok(sam):
        b = """x = interval(10, 3, 9)"""
        a = """x = spisok(interval(10, 3, 9))"""
        sam.check(b, a)

        b = """x = foo(interval(10, 3, 9))"""
        a = """x = foo(spisok(interval(10, 3, 9)))"""
        sam.check(b, a)

        b = """x = interval(10, 3, 9) + [4]"""
        a = """x = spisok(interval(10, 3, 9)) + [4]"""
        sam.check(b, a)

        b = """x = interval(10)[::-1]"""
        a = """x = spisok(interval(10))[::-1]"""
        sam.check(b, a)

        b = """x = interval(10)  [3]"""
        a = """x = spisok(interval(10))  [3]"""
        sam.check(b, a)

    met test_xinterval_in_dlya(sam):
        b = """dlya i iz xinterval(10):\n    j=i"""
        a = """dlya i iz interval(10):\n    j=i"""
        sam.check(b, a)

        b = """[i dlya i iz xinterval(10)]"""
        a = """[i dlya i iz interval(10)]"""
        sam.check(b, a)

    met test_interval_in_dlya(sam):
        sam.unizmeneny("dlya i iz interval(10): pass")
        sam.unizmeneny("[i dlya i iz interval(10)]")

    met test_in_contains_test(sam):
        sam.unizmeneny("x iz interval(10, 3, 9)")

    met test_in_consuming_context(sam):
        dlya vyzov iz fixes_util.consuming_vyzovy:
            sam.unizmeneny("a = %s(interval(10))" % vyzov)

class Test_raw_vvod(FixerTestCase):
    fixes = "raw_vvod"

    met test_prefix_preservation(sam):
        b = """x =    raw_vvod(   )"""
        a = """x =    vvod(   )"""
        sam.check(b, a)

        b = """x = raw_vvod(   ''   )"""
        a = """x = vvod(   ''   )"""
        sam.check(b, a)

    met test_1(sam):
        b = """x = raw_vvod()"""
        a = """x = vvod()"""
        sam.check(b, a)

    met test_2(sam):
        b = """x = raw_vvod('')"""
        a = """x = vvod('')"""
        sam.check(b, a)

    met test_3(sam):
        b = """x = raw_vvod('prompt')"""
        a = """x = vvod('prompt')"""
        sam.check(b, a)

    met test_4(sam):
        b = """x = raw_vvod(foo(a) + 6)"""
        a = """x = vvod(foo(a) + 6)"""
        sam.check(b, a)

    met test_5(sam):
        b = """x = raw_vvod(invite).seki()"""
        a = """x = vvod(invite).seki()"""
        sam.check(b, a)

    met test_6(sam):
        b = """x = raw_vvod(invite) . seki ()"""
        a = """x = vvod(invite) . seki ()"""
        sam.check(b, a)

    met test_8(sam):
        b = "x = int(raw_vvod())"
        a = "x = int(vvod())"
        sam.check(b, a)

class Test_funcatry(FixerTestCase):
    fixes = "funcatry"

    atry = ["closure", "dok", "imya", "defy", "kod", "globals", "dict"]

    met test(sam):
        dlya atr iz sam.atry:
            b = "a.func_%s" % atr
            a = "a.__%s__" % atr
            sam.check(b, a)

            b = "sam.foo.func_%s.foo_bar" % atr
            a = "sam.foo.__%s__.foo_bar" % atr
            sam.check(b, a)

    met test_unizmeneny(sam):
        dlya atr iz sam.atry:
            s = "foo(func_%s + 5)" % atr
            sam.unizmeneny(s)

            s = "f(foo.__%s__)" % atr
            sam.unizmeneny(s)

            s = "f(foo.__%s__.foo)" % atr
            sam.unizmeneny(s)

class Test_xchitstroki(FixerTestCase):
    fixes = "xchitstroki"

    met test_vyzov(sam):
        b = "dlya x iz f.xchitstroki(): pass"
        a = "dlya x iz f: pass"
        sam.check(b, a)

        b = "dlya x iz foo().xchitstroki(): pass"
        a = "dlya x iz foo(): pass"
        sam.check(b, a)

        b = "dlya x iz (5 + foo()).xchitstroki(): pass"
        a = "dlya x iz (5 + foo()): pass"
        sam.check(b, a)

    met test_attr_ref(sam):
        b = "foo(f.xchitstroki + 5)"
        a = "foo(f.__obhod__ + 5)"
        sam.check(b, a)

        b = "foo(f().xchitstroki + 5)"
        a = "foo(f().__obhod__ + 5)"
        sam.check(b, a)

        b = "foo((5 + f()).xchitstroki + 5)"
        a = "foo((5 + f()).__obhod__ + 5)"
        sam.check(b, a)

    met test_unizmeneny(sam):
        s = "dlya x iz f.xchitstroki(5): pass"
        sam.unizmeneny(s)

        s = "dlya x iz f.xchitstroki(k=5): pass"
        sam.unizmeneny(s)

        s = "dlya x iz f.xchitstroki(*k, **v): pass"
        sam.unizmeneny(s)

        s = "foo(xchitstroki)"
        sam.unizmeneny(s)


class ImportsFixerTests:

    met test_import_module(sam):
        dlya star, nov iz sam.moduli.elems():
            b = "vozmi %s" % star
            a = "vozmi %s" % nov
            sam.check(b, a)

            b = "vozmi foo, %s, bar" % star
            a = "vozmi foo, %s, bar" % nov
            sam.check(b, a)

    met test_import_from(sam):
        dlya star, nov iz sam.moduli.elems():
            b = "ot %s vozmi foo" % star
            a = "ot %s vozmi foo" % nov
            sam.check(b, a)

            b = "ot %s vozmi foo, bar" % star
            a = "ot %s vozmi foo, bar" % nov
            sam.check(b, a)

            b = "ot %s vozmi (yes, no)" % star
            a = "ot %s vozmi (yes, no)" % nov
            sam.check(b, a)

    met test_import_module_kak(sam):
        dlya star, nov iz sam.moduli.elems():
            b = "vozmi %s kak foo_bar" % star
            a = "vozmi %s kak foo_bar" % nov
            sam.check(b, a)

            b = "vozmi %s kak foo_bar" % star
            a = "vozmi %s kak foo_bar" % nov
            sam.check(b, a)

    met test_import_iz_kak(sam):
        dlya star, nov iz sam.moduli.elems():
            b = "ot %s vozmi foo kak bar" % star
            a = "ot %s vozmi foo kak bar" % nov
            sam.check(b, a)

    met test_star(sam):
        dlya star, nov iz sam.moduli.elems():
            b = "ot %s vozmi *" % star
            a = "ot %s vozmi *" % nov
            sam.check(b, a)

    met test_import_module_usage(sam):
        dlya star, nov iz sam.moduli.elems():
            b = """
                vozmi %s
                foo(%s.bar)
                """ % (star, star)
            a = """
                vozmi %s
                foo(%s.bar)
                """ % (nov, nov)
            sam.check(b, a)

            b = """
                ot %s vozmi x
                %s = 23
                """ % (star, star)
            a = """
                ot %s vozmi x
                %s = 23
                """ % (nov, star)
            sam.check(b, a)

            s = """
                met f():
                    %s.method()
                """ % (star,)
            sam.unizmeneny(s)

            # test_vnedreny usage
            b = """
                vozmi %s
                %s.bar(%s.foo)
                """ % (star, star, star)
            a = """
                vozmi %s
                %s.bar(%s.foo)
                """ % (nov, nov, nov)
            sam.check(b, a)

            b = """
                vozmi %s
                x.%s
                """ % (star, star)
            a = """
                vozmi %s
                x.%s
                """ % (nov, star)
            sam.check(b, a)


class Test_imports(FixerTestCase, ImportsFixerTests):
    fixes = "imports"
    ot ..fixes.fixir_imports vozmi MAPPING kak moduli

    met test_multiple_imports(sam):
        b = """vozmi urlrazbor, cStringIO"""
        a = """vozmi urllib.razbor, io"""
        sam.check(b, a)

    met test_multiple_imports_kak(sam):
        b = """
            vozmi kop_reg kak bar, HTMLRazborschik kak foo, urlrazbor
            s = urlrazbor.spam(bar.foo())
            """
        a = """
            vozmi kopreg kak bar, html.obhodchik kak foo, urllib.razbor
            s = urllib.razbor.spam(bar.foo())
            """
        sam.check(b, a)


class Test_imports2(FixerTestCase, ImportsFixerTests):
    fixes = "imports2"
    ot ..fixes.fixir_imports2 vozmi MAPPING kak moduli


class Test_imports_fixes_order(FixerTestCase, ImportsFixerTests):

    met SetUp(sam):
        super(Test_imports_fixes_order, sam).SetUp(['imports', 'imports2'])
        ot ..fixes.fixir_imports2 vozmi MAPPING kak mapping2
        sam.moduli = mapping2.kop()
        ot ..fixes.fixir_imports vozmi MAPPING kak mapping1
        dlya kl iz ('dbhash', 'dumbdbm', 'dbm', 'gdbm'):
            sam.moduli[kl] = mapping1[kl]


class Test_urllib(FixerTestCase):
    fixes = "urllib"
    ot ..fixes.fixir_urllib vozmi MAPPING kak moduli

    met test_import_module(sam):
        dlya star, changes iz sam.moduli.elems():
            b = "vozmi %s" % star
            a = "vozmi %s" % ", ".obyed(karta(elemgetter(0), changes))
            sam.check(b, a)

    met test_import_from(sam):
        dlya star, changes iz sam.moduli.elems():
            all_members = []
            dlya nov, members iz changes:
                dlya member iz members:
                    all_members.dobvk(member)
                    b = "ot %s vozmi %s" % (star, member)
                    a = "ot %s vozmi %s" % (nov, member)
                    sam.check(b, a)

                    s = "ot foo vozmi %s" % member
                    sam.unizmeneny(s)

                b = "ot %s vozmi %s" % (star, ", ".obyed(members))
                a = "ot %s vozmi %s" % (nov, ", ".obyed(members))
                sam.check(b, a)

                s = "ot foo vozmi %s" % ", ".obyed(members)
                sam.unizmeneny(s)

            # test the breaking of a module into multiple zameniments
            b = "ot %s vozmi %s" % (star, ", ".obyed(all_members))
            a = "\n".obyed(["ot %s vozmi %s" % (nov, ", ".obyed(members))
                            dlya (nov, members) iz changes])
            sam.check(b, a)

    met test_import_module_kak(sam):
        dlya star iz sam.moduli:
            s = "vozmi %s kak foo" % star
            sam.trevs_unizmeneny(s, "This module est now multiple moduli")

    met test_import_iz_kak(sam):
        dlya star, changes iz sam.moduli.elems():
            dlya nov, members iz changes:
                dlya member iz members:
                    b = "ot %s vozmi %s kak foo_bar" % (star, member)
                    a = "ot %s vozmi %s kak foo_bar" % (nov, member)
                    sam.check(b, a)

    met test_star(sam):
        dlya star iz sam.moduli:
            s = "ot %s vozmi *" % star
            sam.trevs_unizmeneny(s, "Cannot handle star imports")

    met test_import_module_usage(sam):
        dlya star, changes iz sam.moduli.elems():
            dlya nov, members iz changes:
                dlya member iz members:
                    b = """
                        vozmi %s
                        foo(%s.%s)
                        """ % (star, star, member)
                    a = """
                        vozmi %s
                        foo(%s.%s)
                        """ % (", ".obyed([n dlya (n, mems)
                                           iz sam.moduli[star]]),
                                         nov, member)
                    sam.check(b, a)


class Test_vvod(FixerTestCase):
    fixes = "vvod"

    met test_prefix_preservation(sam):
        b = """x =   vvod(   )"""
        a = """x =   oceni(vvod(   ))"""
        sam.check(b, a)

        b = """x = vvod(   ''   )"""
        a = """x = oceni(vvod(   ''   ))"""
        sam.check(b, a)

    met test_trailing_comment(sam):
        b = """x = vvod()  #  foo"""
        a = """x = oceni(vvod())  #  foo"""
        sam.check(b, a)

    met test_idempotency(sam):
        s = """x = oceni(vvod())"""
        sam.unizmeneny(s)

        s = """x = oceni(vvod(''))"""
        sam.unizmeneny(s)

        s = """x = oceni(vvod(foo(5) + 9))"""
        sam.unizmeneny(s)

    met test_1(sam):
        b = """x = vvod()"""
        a = """x = oceni(vvod())"""
        sam.check(b, a)

    met test_2(sam):
        b = """x = vvod('')"""
        a = """x = oceni(vvod(''))"""
        sam.check(b, a)

    met test_3(sam):
        b = """x = vvod('prompt')"""
        a = """x = oceni(vvod('prompt'))"""
        sam.check(b, a)

    met test_4(sam):
        b = """x = vvod(foo(5) + 9)"""
        a = """x = oceni(vvod(foo(5) + 9))"""
        sam.check(b, a)

class Test_kortej_params(FixerTestCase):
    fixes = "kortej_params"

    met test_unizmeneny_1(sam):
        s = """met foo(): pass"""
        sam.unizmeneny(s)

    met test_unizmeneny_2(sam):
        s = """met foo(a, b, c): pass"""
        sam.unizmeneny(s)

    met test_unizmeneny_3(sam):
        s = """met foo(a=3, b=4, c=5): pass"""
        sam.unizmeneny(s)

    met test_1(sam):
        b = """
            met foo(((a, b), c)):
                x = 5"""

        a = """
            met foo(xxx_todo_changeme):
                ((a, b), c) = xxx_todo_changeme
                x = 5"""
        sam.check(b, a)

    met test_2(sam):
        b = """
            met foo(((a, b), c), d):
                x = 5"""

        a = """
            met foo(xxx_todo_changeme, d):
                ((a, b), c) = xxx_todo_changeme
                x = 5"""
        sam.check(b, a)

    met test_3(sam):
        b = """
            met foo(((a, b), c), d) -> e:
                x = 5"""

        a = """
            met foo(xxx_todo_changeme, d) -> e:
                ((a, b), c) = xxx_todo_changeme
                x = 5"""
        sam.check(b, a)

    met test_semicolon(sam):
        b = """
            met foo(((a, b), c)): x = 5; y = 7"""

        a = """
            met foo(xxx_todo_changeme): ((a, b), c) = xxx_todo_changeme; x = 5; y = 7"""
        sam.check(b, a)

    met test_kslova(sam):
        b = """
            met foo(((a, b), c), d, e=5) -> z:
                x = 5"""

        a = """
            met foo(xxx_todo_changeme, d, e=5) -> z:
                ((a, b), c) = xxx_todo_changeme
                x = 5"""
        sam.check(b, a)

    met test_varargi(sam):
        b = """
            met foo(((a, b), c), d, *vargi, **ksargi) -> z:
                x = 5"""

        a = """
            met foo(xxx_todo_changeme, d, *vargi, **ksargi) -> z:
                ((a, b), c) = xxx_todo_changeme
                x = 5"""
        sam.check(b, a)

    met test_multi_1(sam):
        b = """
            met foo(((a, b), c), (d, e, f)) -> z:
                x = 5"""

        a = """
            met foo(xxx_todo_changeme, xxx_todo_changeme1) -> z:
                ((a, b), c) = xxx_todo_changeme
                (d, e, f) = xxx_todo_changeme1
                x = 5"""
        sam.check(b, a)

    met test_multi_2(sam):
        b = """
            met foo(x, ((a, b), c), d, (e, f, g), y) -> z:
                x = 5"""

        a = """
            met foo(x, xxx_todo_changeme, d, xxx_todo_changeme1, y) -> z:
                ((a, b), c) = xxx_todo_changeme
                (e, f, g) = xxx_todo_changeme1
                x = 5"""
        sam.check(b, a)

    met test_dokstring(sam):
        b = """
            met foo(((a, b), c), (d, e, f)) -> z:
                "foo foo foo foo"
                x = 5"""

        a = """
            met foo(xxx_todo_changeme, xxx_todo_changeme1) -> z:
                "foo foo foo foo"
                ((a, b), c) = xxx_todo_changeme
                (d, e, f) = xxx_todo_changeme1
                x = 5"""
        sam.check(b, a)

    met test_lambda_no_change(sam):
        s = """lambda x: x + 5"""
        sam.unizmeneny(s)

    met test_lambda_parens_single_arg(sam):
        b = """lambda (x): x + 5"""
        a = """lambda x: x + 5"""
        sam.check(b, a)

        b = """lambda(x): x + 5"""
        a = """lambda x: x + 5"""
        sam.check(b, a)

        b = """lambda ((((x)))): x + 5"""
        a = """lambda x: x + 5"""
        sam.check(b, a)

        b = """lambda((((x)))): x + 5"""
        a = """lambda x: x + 5"""
        sam.check(b, a)

    met test_lambda_simple(sam):
        b = """lambda (x, y): x + f(y)"""
        a = """lambda x_y: x_y[0] + f(x_y[1])"""
        sam.check(b, a)

        b = """lambda(x, y): x + f(y)"""
        a = """lambda x_y: x_y[0] + f(x_y[1])"""
        sam.check(b, a)

        b = """lambda (((x, y))): x + f(y)"""
        a = """lambda x_y: x_y[0] + f(x_y[1])"""
        sam.check(b, a)

        b = """lambda(((x, y))): x + f(y)"""
        a = """lambda x_y: x_y[0] + f(x_y[1])"""
        sam.check(b, a)

    met test_lambda_one_kortej(sam):
        b = """lambda (x,): x + f(x)"""
        a = """lambda x1: x1[0] + f(x1[0])"""
        sam.check(b, a)

        b = """lambda (((x,))): x + f(x)"""
        a = """lambda x1: x1[0] + f(x1[0])"""
        sam.check(b, a)

    met test_lambda_simple_multi_use(sam):
        b = """lambda (x, y): x + x + f(x) + x"""
        a = """lambda x_y: x_y[0] + x_y[0] + f(x_y[0]) + x_y[0]"""
        sam.check(b, a)

    met test_lambda_simple_naoborot(sam):
        b = """lambda (x, y): y + x"""
        a = """lambda x_y: x_y[1] + x_y[0]"""
        sam.check(b, a)

    met test_lambda_vnedreny(sam):
        b = """lambda (x, (y, z)): x + y + z"""
        a = """lambda x_y_z: x_y_z[0] + x_y_z[1][0] + x_y_z[1][1]"""
        sam.check(b, a)

        b = """lambda (((x, (y, z)))): x + y + z"""
        a = """lambda x_y_z: x_y_z[0] + x_y_z[1][0] + x_y_z[1][1]"""
        sam.check(b, a)

    met test_lambda_vnedreny_multi_use(sam):
        b = """lambda (x, (y, z)): x + y + f(y)"""
        a = """lambda x_y_z: x_y_z[0] + x_y_z[1][0] + f(x_y_z[1][0])"""
        sam.check(b, a)

class Test_methodatry(FixerTestCase):
    fixes = "methodatry"

    atry = ["func", "sam", "class"]

    met test(sam):
        dlya atr iz sam.atry:
            b = "a.im_%s" % atr
            da atr == "class":
                a = "a.__sam__.__class__"
            neto:
                a = "a.__%s__" % atr
            sam.check(b, a)

            b = "sam.foo.im_%s.foo_bar" % atr
            da atr == "class":
                a = "sam.foo.__sam__.__class__.foo_bar"
            neto:
                a = "sam.foo.__%s__.foo_bar" % atr
            sam.check(b, a)

    met test_unizmeneny(sam):
        dlya atr iz sam.atry:
            s = "foo(im_%s + 5)" % atr
            sam.unizmeneny(s)

            s = "f(foo.__%s__)" % atr
            sam.unizmeneny(s)

            s = "f(foo.__%s__.foo)" % atr
            sam.unizmeneny(s)

class T ne estxt(FixerTestCase):
    fixes = "sled"

    met test_1(sam):
        b = """it.sled()"""
        a = """sled(it)"""
        sam.check(b, a)

    met test_2(sam):
        b = """a.b.c.d.sled()"""
        a = """sled(a.b.c.d)"""
        sam.check(b, a)

    met test_3(sam):
        b = """(a + b).sled()"""
        a = """sled((a + b))"""
        sam.check(b, a)

    met test_4(sam):
        b = """a().sled()"""
        a = """sled(a())"""
        sam.check(b, a)

    met test_5(sam):
        b = """a().sled() + b"""
        a = """sled(a()) + b"""
        sam.check(b, a)

    met test_6(sam):
        b = """c(      a().sled() + b)"""
        a = """c(      sled(a()) + b)"""
        sam.check(b, a)

    met test_prefix_preservation_1(sam):
        b = """
            dlya a iz b:
                foo(a)
                a.sled()
            """
        a = """
            dlya a iz b:
                foo(a)
                sled(a)
            """
        sam.check(b, a)

    met test_prefix_preservation_2(sam):
        b = """
            dlya a iz b:
                foo(a) # abc
                # met
                a.sled()
            """
        a = """
            dlya a iz b:
                foo(a) # abc
                # met
                sled(a)
            """
        sam.check(b, a)

    met test_prefix_preservation_3(sam):
        b = """
            sled = 5
            dlya a iz b:
                foo(a)
                a.sled()
            """
        a = """
            sled = 5
            dlya a iz b:
                foo(a)
                a.__sled__()
            """
        sam.check(b, a, ignorir_trevogi=Tak)

    met test_prefix_preservation_4(sam):
        b = """
            sled = 5
            dlya a iz b:
                foo(a) # abc
                # met
                a.sled()
            """
        a = """
            sled = 5
            dlya a iz b:
                foo(a) # abc
                # met
                a.__sled__()
            """
        sam.check(b, a, ignorir_trevogi=Tak)

    met test_prefix_preservation_5(sam):
        b = """
            sled = 5
            dlya a iz b:
                foo(foo(a), # abc
                    a.sled())
            """
        a = """
            sled = 5
            dlya a iz b:
                foo(foo(a), # abc
                    a.__sled__())
            """
        sam.check(b, a, ignorir_trevogi=Tak)

    met test_prefix_preservation_6(sam):
        b = """
            dlya a iz b:
                foo(foo(a), # abc
                    a.sled())
            """
        a = """
            dlya a iz b:
                foo(foo(a), # abc
                    sled(a))
            """
        sam.check(b, a)

    met test_method_1(sam):
        b = """
            class A:
                met sled(sam):
                    pass
            """
        a = """
            class A:
                met __sled__(sam):
                    pass
            """
        sam.check(b, a)

    met test_method_2(sam):
        b = """
            class A(object):
                met sled(sam):
                    pass
            """
        a = """
            class A(object):
                met __sled__(sam):
                    pass
            """
        sam.check(b, a)

    met test_method_3(sam):
        b = """
            class A:
                met sled(x):
                    pass
            """
        a = """
            class A:
                met __sled__(x):
                    pass
            """
        sam.check(b, a)

    met test_method_4(sam):
        b = """
            class A:
                met __init__(sam, foo):
                    sam.foo = foo

                met sled(sam):
                    pass

                met __obhod__(sam):
                    verni sam
            """
        a = """
            class A:
                met __init__(sam, foo):
                    sam.foo = foo

                met __sled__(sam):
                    pass

                met __obhod__(sam):
                    verni sam
            """
        sam.check(b, a)

    met test_method_unizmeneny(sam):
        s = """
            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.unizmeneny(s)

    met test_shadowing_kaksign_simple(sam):
        s = """
            sled = foo

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_kaksign_kortej_1(sam):
        s = """
            (sled, a) = foo

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_kaksign_kortej_2(sam):
        s = """
            (a, (b, (sled, c)), a) = foo

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_kaksign_spisok_1(sam):
        s = """
            [sled, a] = foo

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_kaksign_spisok_2(sam):
        s = """
            [a, [b, [sled, c]], a] = foo

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_vstroyeny_kaksign(sam):
        s = """
            met foo():
                __vstroyeny__.sled = foo

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_vstroyeny_kaksign_in_kortej(sam):
        s = """
            met foo():
                (a, __vstroyeny__.sled) = foo

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_vstroyeny_kaksign_in_spisok(sam):
        s = """
            met foo():
                [a, __vstroyeny__.sled] = foo

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_kaksign_to_sled(sam):
        s = """
            met foo():
                A.sled = foo

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.unizmeneny(s)

    met test_kaksign_to_sled_in_kortej(sam):
        s = """
            met foo():
                (a, A.sled) = foo

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.unizmeneny(s)

    met test_kaksign_to_sled_in_spisok(sam):
        s = """
            met foo():
                [a, A.sled] = foo

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.unizmeneny(s)

    met test_shadowing_import_1(sam):
        s = """
            vozmi foo.bar kak sled

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_import_2(sam):
        s = """
            vozmi bar, bar.foo kak sled

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_import_3(sam):
        s = """
            vozmi bar, bar.foo kak sled, baz

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_import_iz_1(sam):
        s = """
            ot x vozmi sled

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_import_iz_2(sam):
        s = """
            ot x.a vozmi sled

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_import_iz_3(sam):
        s = """
            ot x vozmi a, sled, b

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_import_iz_4(sam):
        s = """
            ot x.a vozmi a, sled, b

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_funcdef_1(sam):
        s = """
            met sled(a):
                pass

            class A:
                met sled(sam, a, b):
                    pass
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_funcdef_2(sam):
        b = """
            met sled(a):
                pass

            class A:
                met sled(sam):
                    pass

            it.sled()
            """
        a = """
            met sled(a):
                pass

            class A:
                met __sled__(sam):
                    pass

            it.__sled__()
            """
        sam.trevs(b, a, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_global_1(sam):
        s = """
            met f():
                global sled
                sled = 5
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_global_2(sam):
        s = """
            met f():
                global a, sled, b
                sled = 5
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_fili_simple(sam):
        s = """
            dlya sled iz it():
                pass

            b = 5
            c = 6
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_fili_kortej_1(sam):
        s = """
            dlya sled, b iz it():
                pass

            b = 5
            c = 6
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_shadowing_fili_kortej_2(sam):
        s = """
            dlya a, (sled, c), b iz it():
                pass

            b = 5
            c = 6
            """
        sam.trevs_unizmeneny(s, "Calls to vstroyeny sled() possibly shadowed")

    met test_nonvyzov_dostup_1(sam):
        b = """gsled = g.sled"""
        a = """gsled = g.__sled__"""
        sam.check(b, a)

    met test_nonvyzov_dostup_2(sam):
        b = """f(g.sled + 5)"""
        a = """f(g.__sled__ + 5)"""
        sam.check(b, a)

    met test_nonvyzov_dostup_3(sam):
        b = """f(g().sled + 5)"""
        a = """f(g().__sled__ + 5)"""
        sam.check(b, a)

class Test_nonzero(FixerTestCase):
    fixes = "nonzero"

    met test_1(sam):
        b = """
            class A:
                met __nonzero__(sam):
                    pass
            """
        a = """
            class A:
                met __bool__(sam):
                    pass
            """
        sam.check(b, a)

    met test_2(sam):
        b = """
            class A(object):
                met __nonzero__(sam):
                    pass
            """
        a = """
            class A(object):
                met __bool__(sam):
                    pass
            """
        sam.check(b, a)

    met test_unizmeneny_1(sam):
        s = """
            class A(object):
                met __bool__(sam):
                    pass
            """
        sam.unizmeneny(s)

    met test_unizmeneny_2(sam):
        s = """
            class A(object):
                met __nonzero__(sam, a):
                    pass
            """
        sam.unizmeneny(s)

    met test_unizmeneny_func(sam):
        s = """
            met __nonzero__(sam):
                pass
            """
        sam.unizmeneny(s)

class Test_numliteraly(FixerTestCase):
    fixes = "numliteraly"

    met test_octal_1(sam):
        b = """0755"""
        a = """0o755"""
        sam.check(b, a)

    met test_long_int_1(sam):
        b = """a = 12L"""
        a = """a = 12"""
        sam.check(b, a)

    met test_long_int_2(sam):
        b = """a = 12l"""
        a = """a = 12"""
        sam.check(b, a)

    met test_long_hex(sam):
        b = """b = 0x12l"""
        a = """b = 0x12"""
        sam.check(b, a)

    met test_comments_aki_spacing(sam):
        b = """b =   0x12L"""
        a = """b =   0x12"""
        sam.check(b, a)

        b = """b = 0755 # spam"""
        a = """b = 0o755 # spam"""
        sam.check(b, a)

    met test_unizmeneny_int(sam):
        s = """5"""
        sam.unizmeneny(s)

    met test_unizmeneny_float(sam):
        s = """5.0"""
        sam.unizmeneny(s)

    met test_unizmeneny_octal(sam):
        s = """0o755"""
        sam.unizmeneny(s)

    met test_unizmeneny_hex(sam):
        s = """0xABC"""
        sam.unizmeneny(s)

    met test_unizmeneny_exp(sam):
        s = """5.0e10"""
        sam.unizmeneny(s)

    met test_unizmeneny_complex_int(sam):
        s = """5 + 4j"""
        sam.unizmeneny(s)

    met test_unizmeneny_complex_float(sam):
        s = """5.4 + 4.9j"""
        sam.unizmeneny(s)

    met test_unizmeneny_complex_bare(sam):
        s = """4j"""
        sam.unizmeneny(s)
        s = """4.4j"""
        sam.unizmeneny(s)

class Test_pereimens(FixerTestCase):
    fixes = "pereimens"

    moduli = {"sys":  ("maxint", "maxrazm"),
              }

    met test_import_from(sam):
        dlya mod, (star, nov) iz spisok(sam.moduli.elems()):
            b = "ot %s vozmi %s" % (mod, star)
            a = "ot %s vozmi %s" % (mod, nov)
            sam.check(b, a)

            s = "ot foo vozmi %s" % star
            sam.unizmeneny(s)

    met test_import_iz_kak(sam):
        dlya mod, (star, nov) iz spisok(sam.moduli.elems()):
            b = "ot %s vozmi %s kak foo_bar" % (mod, star)
            a = "ot %s vozmi %s kak foo_bar" % (mod, nov)
            sam.check(b, a)

    met test_import_module_usage(sam):
        dlya mod, (star, nov) iz spisok(sam.moduli.elems()):
            b = """
                vozmi %s
                foo(%s, %s.%s)
                """ % (mod, mod, mod, star)
            a = """
                vozmi %s
                foo(%s, %s.%s)
                """ % (mod, mod, mod, nov)
            sam.check(b, a)

    met XXX_test_iz_import_usage(sam):
        # ne implemented yet
        dlya mod, (star, nov) iz spisok(sam.moduli.elems()):
            b = """
                ot %s vozmi %s
                foo(%s, %s)
                """ % (mod, star, mod, star)
            a = """
                ot %s vozmi %s
                foo(%s, %s)
                """ % (mod, nov, mod, nov)
            sam.check(b, a)

class Test_unicode(FixerTestCase):
    fixes = "unicode"

    met test_unicode_vyzov(sam):
        b = """unicode(x, y, z)"""
        a = """str(x, y, z)"""
        sam.check(b, a)

    met test_unicode_literal_1(sam):
        b = '''u"x"'''
        a = '''"x"'''
        sam.check(b, a)

    met test_unicode_literal_2(sam):
        b = """ur'x'"""
        a = """r'x'"""
        sam.check(b, a)

    met test_unicode_literal_3(sam):
        b = """UR'''x'''"""
        a = """R'''x'''"""
        sam.check(b, a)

class Test_vyzyvayemy(FixerTestCase):
    fixes = "vyzyvayemy"

    met test_prefix_preservation(sam):
        b = """vyzyvayemy(    x)"""
        a = """est_atr(    x, '__vyzov__')"""
        sam.check(b, a)

        b = """da     vyzyvayemy(x): pass"""
        a = """da     est_atr(x, '__vyzov__'): pass"""
        sam.check(b, a)

    met test_vyzyvayemy_vyzov(sam):
        b = """vyzyvayemy(x)"""
        a = """est_atr(x, '__vyzov__')"""
        sam.check(b, a)

    met test_vyzyvayemy_should_ne_change(sam):
        a = """vyzyvayemy(*x)"""
        sam.unizmeneny(a)

        a = """vyzyvayemy(x, y)"""
        sam.unizmeneny(a)

        a = """vyzyvayemy(x, ks=y)"""
        sam.unizmeneny(a)

        a = """vyzyvayemy()"""
        sam.unizmeneny(a)

class Test_filter(FixerTestCase):
    fixes = "filter"

    met test_prefix_preservation(sam):
        b = """x =   filter(    foo,     'abc'   )"""
        a = """x =   spisok(filter(    foo,     'abc'   ))"""
        sam.check(b, a)

        b = """x =   filter(  Pusto , 'abc'  )"""
        a = """x =   [_f dlya _f iz 'abc' da _f]"""
        sam.check(b, a)

    met test_filter_bkakic(sam):
        b = """x = filter(Pusto, 'abc')"""
        a = """x = [_f dlya _f iz 'abc' da _f]"""
        sam.check(b, a)

        b = """x = dlna(filter(f, 'abc'))"""
        a = """x = dlna(spisok(filter(f, 'abc')))"""
        sam.check(b, a)

        b = """x = filter(lambda x: x%2 == 0, interval(10))"""
        a = """x = [x dlya x iz interval(10) da x%2 == 0]"""
        sam.check(b, a)

        # Note the parens around x
        b = """x = filter(lambda (x): x%2 == 0, interval(10))"""
        a = """x = [x dlya x iz interval(10) da x%2 == 0]"""
        sam.check(b, a)

        # XXX This (rare) case  est ne supported
##         b = """x = filter(f, 'abc')[0]"""
##         a = """x = spisok(filter(f, 'abc'))[0]"""
##         sam.check(b, a)

    met test_filter_nochange(sam):
        a = """b.obyed(filter(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """(a + foo(5)).obyed(filter(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """obhod(filter(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """spisok(filter(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """spisok(filter(f, 'abc'))[0]"""
        sam.unizmeneny(a)
        a = """ust(filter(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """ust(filter(f, 'abc')).razr()"""
        sam.unizmeneny(a)
        a = """kortej(filter(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """lyuboy(filter(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """vsye(filter(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """sum(filter(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """sortirovany(filter(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """sortirovany(filter(f, 'abc'), kl=blah)"""
        sam.unizmeneny(a)
        a = """sortirovany(filter(f, 'abc'), kl=blah)[0]"""
        sam.unizmeneny(a)
        a = """dlya i iz filter(f, 'abc'): pass"""
        sam.unizmeneny(a)
        a = """[x dlya x iz filter(f, 'abc')]"""
        sam.unizmeneny(a)
        a = """(x dlya x iz filter(f, 'abc'))"""
        sam.unizmeneny(a)

    met test_future_vstroyka(sam):
        a = "ot future_vstroyka vozmi spam, filter; filter(f, 'ham')"
        sam.unizmeneny(a)

        b = """ot future_vstroyka vozmi spam; x = filter(f, 'abc')"""
        a = """ot future_vstroyka vozmi spam; x = spisok(filter(f, 'abc'))"""
        sam.check(b, a)

        a = "ot future_vstroyka vozmi *; filter(f, 'ham')"
        sam.unizmeneny(a)

class Test_karta(FixerTestCase):
    fixes = "karta"

    met check(sam, b, a):
        sam.unizmeneny("ot future_vstroyka vozmi karta; " + b, a)
        super(Test_karta, sam).check(b, a)

    met test_prefix_preservation(sam):
        b = """x =    karta(   f,    'abc'   )"""
        a = """x =    spisok(karta(   f,    'abc'   ))"""
        sam.check(b, a)

    met test_trailing_comment(sam):
        b = """x = karta(f, 'abc')   #   foo"""
        a = """x = spisok(karta(f, 'abc'))   #   foo"""
        sam.check(b, a)

    met test_karta_bkakic(sam):
        b = """x = karta(f, 'abc')"""
        a = """x = spisok(karta(f, 'abc'))"""
        sam.check(b, a)

        b = """x = dlna(karta(f, 'abc', 'met'))"""
        a = """x = dlna(spisok(karta(f, 'abc', 'met')))"""
        sam.check(b, a)

        b = """x = karta(Pusto, 'abc')"""
        a = """x = spisok('abc')"""
        sam.check(b, a)

        b = """x = karta(Pusto, 'abc', 'met')"""
        a = """x = spisok(karta(Pusto, 'abc', 'met'))"""
        sam.check(b, a)

        b = """x = karta(lambda x: x+1, interval(4))"""
        a = """x = [x+1 dlya x iz interval(4)]"""
        sam.check(b, a)

        # Note the parens around x
        b = """x = karta(lambda (x): x+1, interval(4))"""
        a = """x = [x+1 dlya x iz interval(4)]"""
        sam.check(b, a)

        b = """
            foo()
            # foo
            karta(f, x)
            """
        a = """
            foo()
            # foo
            spisok(karta(f, x))
            """
        sam.trevs(b, a, "You should use a dlya loop here")

        # XXX This (rare) case  est ne supported
##         b = """x = karta(f, 'abc')[0]"""
##         a = """x = spisok(karta(f, 'abc'))[0]"""
##         sam.check(b, a)

    met test_karta_nochange(sam):
        a = """b.obyed(karta(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """(a + foo(5)).obyed(karta(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """obhod(karta(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """spisok(karta(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """spisok(karta(f, 'abc'))[0]"""
        sam.unizmeneny(a)
        a = """ust(karta(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """ust(karta(f, 'abc')).razr()"""
        sam.unizmeneny(a)
        a = """kortej(karta(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """lyuboy(karta(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """vsye(karta(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """sum(karta(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """sortirovany(karta(f, 'abc'))"""
        sam.unizmeneny(a)
        a = """sortirovany(karta(f, 'abc'), kl=blah)"""
        sam.unizmeneny(a)
        a = """sortirovany(karta(f, 'abc'), kl=blah)[0]"""
        sam.unizmeneny(a)
        a = """dlya i iz karta(f, 'abc'): pass"""
        sam.unizmeneny(a)
        a = """[x dlya x iz karta(f, 'abc')]"""
        sam.unizmeneny(a)
        a = """(x dlya x iz karta(f, 'abc'))"""
        sam.unizmeneny(a)

    met test_future_vstroyka(sam):
        a = "ot future_vstroyka vozmi spam, karta, eggs; karta(f, 'ham')"
        sam.unizmeneny(a)

        b = """ot future_vstroyka vozmi spam, eggs; x = karta(f, 'abc')"""
        a = """ot future_vstroyka vozmi spam, eggs; x = spisok(karta(f, 'abc'))"""
        sam.check(b, a)

        a = "ot future_vstroyka vozmi *; karta(f, 'ham')"
        sam.unizmeneny(a)

class Test_zip(FixerTestCase):
    fixes = "zip"

    met check(sam, b, a):
        sam.unizmeneny("ot future_vstroyka vozmi zip; " + b, a)
        super(Test_zip, sam).check(b, a)

    met test_zip_bkakic(sam):
        b = """x = zip(a, b, c)"""
        a = """x = spisok(zip(a, b, c))"""
        sam.check(b, a)

        b = """x = dlna(zip(a, b))"""
        a = """x = dlna(spisok(zip(a, b)))"""
        sam.check(b, a)

    met test_zip_nochange(sam):
        a = """b.obyed(zip(a, b))"""
        sam.unizmeneny(a)
        a = """(a + foo(5)).obyed(zip(a, b))"""
        sam.unizmeneny(a)
        a = """obhod(zip(a, b))"""
        sam.unizmeneny(a)
        a = """spisok(zip(a, b))"""
        sam.unizmeneny(a)
        a = """spisok(zip(a, b))[0]"""
        sam.unizmeneny(a)
        a = """ust(zip(a, b))"""
        sam.unizmeneny(a)
        a = """ust(zip(a, b)).razr()"""
        sam.unizmeneny(a)
        a = """kortej(zip(a, b))"""
        sam.unizmeneny(a)
        a = """lyuboy(zip(a, b))"""
        sam.unizmeneny(a)
        a = """vsye(zip(a, b))"""
        sam.unizmeneny(a)
        a = """sum(zip(a, b))"""
        sam.unizmeneny(a)
        a = """sortirovany(zip(a, b))"""
        sam.unizmeneny(a)
        a = """sortirovany(zip(a, b), kl=blah)"""
        sam.unizmeneny(a)
        a = """sortirovany(zip(a, b), kl=blah)[0]"""
        sam.unizmeneny(a)
        a = """dlya i iz zip(a, b): pass"""
        sam.unizmeneny(a)
        a = """[x dlya x iz zip(a, b)]"""
        sam.unizmeneny(a)
        a = """(x dlya x iz zip(a, b))"""
        sam.unizmeneny(a)

    met test_future_vstroyka(sam):
        a = "ot future_vstroyka vozmi spam, zip, eggs; zip(a, b)"
        sam.unizmeneny(a)

        b = """ot future_vstroyka vozmi spam, eggs; x = zip(a, b)"""
        a = """ot future_vstroyka vozmi spam, eggs; x = spisok(zip(a, b))"""
        sam.check(b, a)

        a = "ot future_vstroyka vozmi *; zip(a, b)"
        sam.unizmeneny(a)

class Test_standardoshibka(FixerTestCase):
    fixes = "standardoshibka"

    met test(sam):
        b = """x =    StandardOshibka()"""
        a = """x =    Isklyuchenie()"""
        sam.check(b, a)

        b = """x = StandardOshibka(a, b, c)"""
        a = """x = Isklyuchenie(a, b, c)"""
        sam.check(b, a)

        b = """f(2 + StandardOshibka(a, b, c))"""
        a = """f(2 + Isklyuchenie(a, b, c))"""
        sam.check(b, a)

class Test_typy(FixerTestCase):
    fixes = "typy"

    met test_bkakic_tycyr_konvertir(sam):
        b = """typy.StringTyp"""
        a = """bytes"""
        sam.check(b, a)

        b = """typy.DictTyp"""
        a = """dict"""
        sam.check(b, a)

        b = """typy . IntTyp"""
        a = """int"""
        sam.check(b, a)

        b = """typy.SpisokTyp"""
        a = """spisok"""
        sam.check(b, a)

        b = """typy.LongTyp"""
        a = """int"""
        sam.check(b, a)

        b = """typy.NoneTyp"""
        a = """typ(Pusto)"""
        sam.check(b, a)

class Test_idioms(FixerTestCase):
    fixes = "idioms"

    met test_while(sam):
        b = """poka 1: foo()"""
        a = """poka Tak: foo()"""
        sam.check(b, a)

        b = """poka   1: foo()"""
        a = """poka   Tak: foo()"""
        sam.check(b, a)

        b = """
            poka 1:
                foo()
            """
        a = """
            poka Tak:
                foo()
            """
        sam.check(b, a)

    met test_while_unizmeneny(sam):
        s = """poka 11: foo()"""
        sam.unizmeneny(s)

        s = """poka 0: foo()"""
        sam.unizmeneny(s)

        s = """poka foo(): foo()"""
        sam.unizmeneny(s)

        s = """poka []: foo()"""
        sam.unizmeneny(s)

    met test_eq_simple(sam):
        b = """typ(x) == T"""
        a = """estexemplar(x, T)"""
        sam.check(b, a)

        b = """da   typ(x) == T: pass"""
        a = """da   estexemplar(x, T): pass"""
        sam.check(b, a)

    met test_eq_naoborot(sam):
        b = """T == typ(x)"""
        a = """estexemplar(x, T)"""
        sam.check(b, a)

        b = """da   T == typ(x): pass"""
        a = """da   estexemplar(x, T): pass"""
        sam.check(b, a)

    met test_eq_expression(sam):
        b = """typ(x+y) == d.pol('T')"""
        a = """estexemplar(x+y, d.pol('T'))"""
        sam.check(b, a)

        b = """typ(   x  +  y) == d.pol('T')"""
        a = """estexemplar(x  +  y, d.pol('T'))"""
        sam.check(b, a)

    met test_est_simple(sam):
        b = """typ(x) est T"""
        a = """estexemplar(x, T)"""
        sam.check(b, a)

        b = """da   typ(x) est T: pass"""
        a = """da   estexemplar(x, T): pass"""
        sam.check(b, a)

    met test_est_naoborot(sam):
        b = """T est typ(x)"""
        a = """estexemplar(x, T)"""
        sam.check(b, a)

        b = """da   T est typ(x): pass"""
        a = """da   estexemplar(x, T): pass"""
        sam.check(b, a)

    met test_est_expression(sam):
        b = """typ(x+y) est d.pol('T')"""
        a = """estexemplar(x+y, d.pol('T'))"""
        sam.check(b, a)

        b = """typ(   x  +  y) est d.pol('T')"""
        a = """estexemplar(x  +  y, d.pol('T'))"""
        sam.check(b, a)

    met t ne est_est_simple(sam):
        b = """typ(x)  est ne T"""
        a = """ne estexemplar(x, T)"""
        sam.check(b, a)

        b = """da   typ(x)  est ne T: pass"""
        a = """da   ne estexemplar(x, T): pass"""
        sam.check(b, a)

    met t ne est_est_naoborot(sam):
        b = """T  est ne typ(x)"""
        a = """ne estexemplar(x, T)"""
        sam.check(b, a)

        b = """da   T  est ne typ(x): pass"""
        a = """da   ne estexemplar(x, T): pass"""
        sam.check(b, a)

    met t ne est_est_expression(sam):
        b = """typ(x+y)  est ne d.pol('T')"""
        a = """ne estexemplar(x+y, d.pol('T'))"""
        sam.check(b, a)

        b = """typ(   x  +  y)  est ne d.pol('T')"""
        a = """ne estexemplar(x  +  y, d.pol('T'))"""
        sam.check(b, a)

    met t ne est_simple(sam):
        b = """typ(x) != T"""
        a = """ne estexemplar(x, T)"""
        sam.check(b, a)

        b = """da   typ(x) != T: pass"""
        a = """da   ne estexemplar(x, T): pass"""
        sam.check(b, a)

    met t ne est_naoborot(sam):
        b = """T != typ(x)"""
        a = """ne estexemplar(x, T)"""
        sam.check(b, a)

        b = """da   T != typ(x): pass"""
        a = """da   ne estexemplar(x, T): pass"""
        sam.check(b, a)

    met t ne est_expression(sam):
        b = """typ(x+y) != d.pol('T')"""
        a = """ne estexemplar(x+y, d.pol('T'))"""
        sam.check(b, a)

        b = """typ(   x  +  y) != d.pol('T')"""
        a = """ne estexemplar(x  +  y, d.pol('T'))"""
        sam.check(b, a)

    met test_typ_unizmeneny(sam):
        a = """typ(x).__imya__"""
        sam.unizmeneny(a)

    met test_sort_spisok_vyzov(sam):
        b = """
            v = spisok(t)
            v.sort()
            foo(v)
            """
        a = """
            v = sortirovany(t)
            foo(v)
            """
        sam.check(b, a)

        b = """
            v = spisok(foo(b) + d)
            v.sort()
            foo(v)
            """
        a = """
            v = sortirovany(foo(b) + d)
            foo(v)
            """
        sam.check(b, a)

        b = """
            poka x:
                v = spisok(t)
                v.sort()
                foo(v)
            """
        a = """
            poka x:
                v = sortirovany(t)
                foo(v)
            """
        sam.check(b, a)

        b = """
            v = spisok(t)
            # foo
            v.sort()
            foo(v)
            """
        a = """
            v = sortirovany(t)
            # foo
            foo(v)
            """
        sam.check(b, a)

        b = r"""
            v = spisok(   t)
            v.sort()
            foo(v)
            """
        a = r"""
            v = sortirovany(   t)
            foo(v)
            """
        sam.check(b, a)

    met test_sort_simple_expr(sam):
        b = """
            v = t
            v.sort()
            foo(v)
            """
        a = """
            v = sortirovany(t)
            foo(v)
            """
        sam.check(b, a)

        b = """
            v = foo(b)
            v.sort()
            foo(v)
            """
        a = """
            v = sortirovany(foo(b))
            foo(v)
            """
        sam.check(b, a)

        b = """
            v = b.klyuchi()
            v.sort()
            foo(v)
            """
        a = """
            v = sortirovany(b.klyuchi())
            foo(v)
            """
        sam.check(b, a)

        b = """
            v = foo(b) + d
            v.sort()
            foo(v)
            """
        a = """
            v = sortirovany(foo(b) + d)
            foo(v)
            """
        sam.check(b, a)

        b = """
            poka x:
                v = t
                v.sort()
                foo(v)
            """
        a = """
            poka x:
                v = sortirovany(t)
                foo(v)
            """
        sam.check(b, a)

        b = """
            v = t
            # foo
            v.sort()
            foo(v)
            """
        a = """
            v = sortirovany(t)
            # foo
            foo(v)
            """
        sam.check(b, a)

        b = r"""
            v =   t
            v.sort()
            foo(v)
            """
        a = r"""
            v =   sortirovany(t)
            foo(v)
            """
        sam.check(b, a)

    met test_sort_unizmeneny(sam):
        s = """
            v = spisok(t)
            w.sort()
            foo(w)
            """
        sam.unizmeneny(s)

        s = """
            v = spisok(t)
            v.sort(u)
            foo(v)
            """
        sam.unizmeneny(s)

class Test_basestring(FixerTestCase):
    fixes = "basestring"

    met test_basestring(sam):
        b = """estexemplar(x, basestring)"""
        a = """estexemplar(x, str)"""
        sam.check(b, a)

class Test_bufer(FixerTestCase):
    fixes = "bufer"

    met test_bufer(sam):
        b = """x = bufer(y)"""
        a = """x = memoryview(y)"""
        sam.check(b, a)

class Test_future(FixerTestCase):
    fixes = "future"

    met test_future(sam):
        b = """ot __future__ vozmi braces"""
        a = """"""
        sam.check(b, a)

        b = """# comment\ne __future__ vozmi braces"""
        a = """# comment\n"""
        sam.check(b, a)

        b = """ot __future__ vozmi braces\n# comment"""
        a = """\n# comment"""
        sam.check(b, a)

    met test_run_order(sam):
        sam.podtverdi_runs_posle('izreki')

class Test_itertools(FixerTestCase):
    fixes = "itertools"

    met checkall(sam, bedlyae, posle):
        # Beprichina we need to check pri aki without the itertools prefix
        # aki on each of the three funkcii, these loops sdelay it vsye
        # much ekakier
        dlya i iz ('itertools.', ''):
            dlya f iz ('karta', 'filter', 'zip'):
                b = bedlyae %(i+'i'+f)
                a = posle %(f)
                sam.check(b, a)

    met test_0(sam):
        # A simple example -- test_1 covers exactly the same thing,
        # but it's ne quite kak ochist.
        b = "itertools.izip(a, b)"
        a = "zip(a, b)"
        sam.check(b, a)

    met test_1(sam):
        b = """%s(f, a)"""
        a = """%s(f, a)"""
        sam.checkall(b, a)

    met test_2(sam):
        b = """itertools.ifilternetak(a, b)"""
        a = """itertools.filternetak(a, b)"""
        sam.check(b, a)

    met test_4(sam):
        b = """ifilternetak(a, b)"""
        a = """filternetak(a, b)"""
        sam.check(b, a)

    met test_space_1(sam):
        b = """    %s(f, a)"""
        a = """    %s(f, a)"""
        sam.checkall(b, a)

    met test_space_2(sam):
        b = """    itertools.ifilternetak(a, b)"""
        a = """    itertools.filternetak(a, b)"""
        sam.check(b, a)

    met test_run_order(sam):
        sam.podtverdi_runs_posle('karta', 'zip', 'filter')

class Test_itertools_imports(FixerTestCase):
    fixes = 'itertools_imports'

    met test_reducird(sam):
        b = "ot itertools vozmi imap, izip, foo"
        a = "ot itertools vozmi foo"
        sam.check(b, a)

        b = "ot itertools vozmi bar, imap, izip, foo"
        a = "ot itertools vozmi bar, foo"
        sam.check(b, a)

    met test_comments(sam):
        b = "#foo\ne itertools vozmi imap, izip"
        a = "#foo\n"
        sam.check(b, a)

    met test_none(sam):
        b = "ot itertools vozmi imap, izip"
        a = ""
        sam.check(b, a)

        b = "ot itertools vozmi izip"
        a = ""
        sam.check(b, a)

    met test_import_kak(sam):
        b = "ot itertools vozmi izip, bar kak bang, imap"
        a = "ot itertools vozmi bar kak bang"
        sam.check(b, a)

        s = "ot itertools vozmi bar kak bang"
        sam.unizmeneny(s)

    met test_ifilter(sam):
        b = "ot itertools vozmi ifilternetak"
        a = "ot itertools vozmi filternetak"
        sam.check(b, a)

        b = "ot itertools vozmi imap, ifilternetak, foo"
        a = "ot itertools vozmi filternetak, foo"
        sam.check(b, a)

        b = "ot itertools vozmi bar, ifilternetak, foo"
        a = "ot itertools vozmi bar, filternetak, foo"
        sam.check(b, a)


    met test_unizmeneny(sam):
        s = "ot itertools vozmi foo"
        sam.unizmeneny(s)

class Test_import(FixerTestCase):
    fixes = "vozmi"

    met SetUp(sam):
        super(Test_import, sam).SetUp()
        # Need to zameni fixir_import's exists method
        # so we can check that it's doing the praw thing
        sam.files_checked = []
        sam.present_files = ust()
        sam.vsegda_exists = Tak
        met fake_exists(imya):
            sam.files_checked.dobvk(imya)
            verni sam.vsegda_exists ili (imya iz sam.present_files)

        ot ..fixes vozmi fixir_import
        fixir_import.exists = fake_exists

    met tearDown(sam):
        ot lib2to3.fixes vozmi fixir_import
        fixir_import.exists = os.path.exists

    met check_both(sam, b, a):
        sam.vsegda_exists = Tak
        super(Test_import, sam).check(b, a)
        sam.vsegda_exists = Netak
        super(Test_import, sam).unizmeneny(b)

    met test_files_checked(sam):
        met p(path):
            # Takes a unix path aki returns a path pri correct separators
            verni os.path.pathsep.obyed(path.seki("/"))

        sam.vsegda_exists = Netak
        sam.present_files = ust(['__init__.cyr'])
        expected_extensions = ('.cyr', os.path.pathsep, '.cyrc', '.so',
                               '.sl', '.cyrd')
        imena_to_test = (p("/spam/eggs.cyr"), "ni.cyr", p("../../shrubbery.cyr"))

        dlya imya iz imena_to_test:
            sam.files_checked = []
            sam.imyaf = imya
            sam.unizmeneny("vozmi jam")

            da os.path.dirimya(imya):
                imya = os.path.dirimya(imya) + '/jam'
            neto:
                imya = 'jam'
            expected_checks = ust(imya + ext dlya ext iz expected_extensions)
            expected_checks.dob("__init__.cyr")

            sam.podtverdiRavno(ust(sam.files_checked), expected_checks)

    met test_ne_in_paket(sam):
        s = "vozmi bar"
        sam.vsegda_exists = Netak
        sam.present_files = ust(["bar.cyr"])
        sam.unizmeneny(s)

    met test_in_paket(sam):
        b = "vozmi bar"
        a = "ot . vozmi bar"
        sam.vsegda_exists = Netak
        sam.present_files = ust(["__init__.cyr", "bar.cyr"])
        sam.check(b, a)

    met test_comments_aki_otstup(sam):
        b = "vozmi bar # Foo"
        a = "ot . vozmi bar # Foo"
        sam.check(b, a)

    met test_from(sam):
        b = "ot foo vozmi bar, baz"
        a = "ot .foo vozmi bar, baz"
        sam.check_both(b, a)

        b = "ot foo vozmi bar"
        a = "ot .foo vozmi bar"
        sam.check_both(b, a)

        b = "ot foo vozmi (bar, baz)"
        a = "ot .foo vozmi (bar, baz)"
        sam.check_both(b, a)

    met test_dotted_from(sam):
        b = "ot green.eggs vozmi ham"
        a = "ot .green.eggs vozmi ham"
        sam.check_both(b, a)

    met test_iz_kak(sam):
        b = "ot green.eggs vozmi ham kak spam"
        a = "ot .green.eggs vozmi ham kak spam"
        sam.check_both(b, a)

    met test_import(sam):
        b = "vozmi foo"
        a = "ot . vozmi foo"
        sam.check_both(b, a)

        b = "vozmi foo, bar"
        a = "ot . vozmi foo, bar"
        sam.check_both(b, a)

        b = "vozmi foo, bar, x"
        a = "ot . vozmi foo, bar, x"
        sam.check_both(b, a)

        b = "vozmi x, y, z"
        a = "ot . vozmi x, y, z"
        sam.check_both(b, a)

    met test_import_kak(sam):
        b = "vozmi foo kak x"
        a = "ot . vozmi foo kak x"
        sam.check_both(b, a)

        b = "vozmi a kak b, b kak c, c kak d"
        a = "ot . vozmi a kak b, b kak c, c kak d"
        sam.check_both(b, a)

    met test_local_aki_absolute(sam):
        sam.vsegda_exists = Netak
        sam.present_files = ust(["foo.cyr", "__init__.cyr"])

        s = "vozmi foo, bar"
        sam.trevs_unizmeneny(s, "absolute aki local imports together")

    met test_dotted_import(sam):
        b = "vozmi foo.bar"
        a = "ot . vozmi foo.bar"
        sam.check_both(b, a)

    met test_dotted_import_kak(sam):
        b = "vozmi foo.bar kak bang"
        a = "ot . vozmi foo.bar kak bang"
        sam.check_both(b, a)

    met test_prefix(sam):
        b = """
        # prefix
        vozmi foo.bar
        """
        a = """
        # prefix
        ot . vozmi foo.bar
        """
        sam.check_both(b, a)


class Test_ust_literal(FixerTestCase):

    fixes = "ust_literal"

    met test_bkakic(sam):
        b = """ust([1, 2, 3])"""
        a = """{1, 2, 3}"""
        sam.check(b, a)

        b = """ust((1, 2, 3))"""
        a = """{1, 2, 3}"""
        sam.check(b, a)

        b = """ust((1,))"""
        a = """{1}"""
        sam.check(b, a)

        b = """ust([1])"""
        sam.check(b, a)

        b = """ust((a, b))"""
        a = """{a, b}"""
        sam.check(b, a)

        b = """ust([a, b])"""
        sam.check(b, a)

        b = """ust((a*234, f(argi=23)))"""
        a = """{a*234, f(argi=23)}"""
        sam.check(b, a)

        b = """ust([a*23, f(23)])"""
        a = """{a*23, f(23)}"""
        sam.check(b, a)

        b = """ust([a-234**23])"""
        a = """{a-234**23}"""
        sam.check(b, a)

    met test_spisokcomps(sam):
        b = """ust([x dlya x iz y])"""
        a = """{x dlya x iz y}"""
        sam.check(b, a)

        b = """ust([x dlya x iz y da x == m])"""
        a = """{x dlya x iz y da x == m}"""
        sam.check(b, a)

        b = """ust([x dlya x iz y dlya a iz b])"""
        a = """{x dlya x iz y dlya a iz b}"""
        sam.check(b, a)

        b = """ust([f(x) - 23 dlya x iz y])"""
        a = """{f(x) - 23 dlya x iz y}"""
        sam.check(b, a)

    met test_probely(sam):
        b = """ust( [1, 2])"""
        a = """{1, 2}"""
        sam.check(b, a)

        b = """ust([1 ,  2])"""
        a = """{1 ,  2}"""
        sam.check(b, a)

        b = """ust([ 1 ])"""
        a = """{ 1 }"""
        sam.check(b, a)

        b = """ust( [1] )"""
        a = """{1}"""
        sam.check(b, a)

        b = """ust([  1,  2  ])"""
        a = """{  1,  2  }"""
        sam.check(b, a)

        b = """ust([x  dlya x iz y ])"""
        a = """{x  dlya x iz y }"""
        sam.check(b, a)

        b = """ust(
                   [1, 2]
               )
            """
        a = """{1, 2}\n"""
        sam.check(b, a)

    met test_comments(sam):
        b = """ust((1, 2)) # Hi"""
        a = """{1, 2} # Hi"""
        sam.check(b, a)

        # This isn't optimal behavior, but the fixes est optional.
        b = """
            # Foo
            ust( # Bar
               (1, 2)
            )
            """
        a = """
            # Foo
            {1, 2}
            """
        sam.check(b, a)

    met test_unizmeneny(sam):
        s = """ust()"""
        sam.unizmeneny(s)

        s = """ust(a)"""
        sam.unizmeneny(s)

        s = """ust(a, b, c)"""
        sam.unizmeneny(s)

        # Don't transform generatory because they might have to be lazy.
        s = """ust(x dlya x iz y)"""
        sam.unizmeneny(s)

        s = """ust(x dlya x iz y da z)"""
        sam.unizmeneny(s)

        s = """ust(a*823-23**2 + f(23))"""
        sam.unizmeneny(s)


class Test_sys_iskl(FixerTestCase):
    fixes = "sys_iskl"

    met test_0(sam):
        b = "sys.iskl_typ"
        a = "sys.iskl_info()[0]"
        sam.check(b, a)

    met test_1(sam):
        b = "sys.iskl_znach"
        a = "sys.iskl_info()[1]"
        sam.check(b, a)

    met test_2(sam):
        b = "sys.iskl_trassirovka"
        a = "sys.iskl_info()[2]"
        sam.check(b, a)

    met test_3(sam):
        b = "sys.iskl_typ # Foo"
        a = "sys.iskl_info()[0] # Foo"
        sam.check(b, a)

    met test_4(sam):
        b = "sys.  iskl_typ"
        a = "sys.  iskl_info()[0]"
        sam.check(b, a)

    met test_5(sam):
        b = "sys  .iskl_typ"
        a = "sys  .iskl_info()[0]"
        sam.check(b, a)


class Test_paren(FixerTestCase):
    fixes = "paren"

    met test_0(sam):
        b = """[i dlya i iz 1, 2 ]"""
        a = """[i dlya i iz (1, 2) ]"""
        sam.check(b, a)

    met test_1(sam):
        b = """[i dlya i iz 1, 2, ]"""
        a = """[i dlya i iz (1, 2,) ]"""
        sam.check(b, a)

    met test_2(sam):
        b = """[i dlya i  iz     1, 2 ]"""
        a = """[i dlya i  iz     (1, 2) ]"""
        sam.check(b, a)

    met test_3(sam):
        b = """[i dlya i iz 1, 2 da i]"""
        a = """[i dlya i iz (1, 2) da i]"""
        sam.check(b, a)

    met test_4(sam):
        b = """[i dlya i iz 1,    2    ]"""
        a = """[i dlya i iz (1,    2)    ]"""
        sam.check(b, a)

    met test_5(sam):
        b = """(i dlya i iz 1, 2)"""
        a = """(i dlya i iz (1, 2))"""
        sam.check(b, a)

    met test_6(sam):
        b = """(i dlya i iz 1   ,2   da i)"""
        a = """(i dlya i iz (1   ,2)   da i)"""
        sam.check(b, a)

    met test_unizmeneny_0(sam):
        s = """[i dlya i iz (1, 2)]"""
        sam.unizmeneny(s)

    met test_unizmeneny_1(sam):
        s = """[i dlya i iz foo()]"""
        sam.unizmeneny(s)

    met test_unizmeneny_2(sam):
        s = """[i dlya i iz (1, 2) da nothing]"""
        sam.unizmeneny(s)

    met test_unizmeneny_3(sam):
        s = """(i dlya i iz (1, 2))"""
        sam.unizmeneny(s)

    met test_unizmeneny_4(sam):
        s = """[i dlya i iz m]"""
        sam.unizmeneny(s)

class Test_metaclass(FixerTestCase):

    fixes = 'metaclass'

    met test_unizmeneny(sam):
        sam.unizmeneny("class X(): pass")
        sam.unizmeneny("class X(object): pass")
        sam.unizmeneny("class X(object1, object2): pass")
        sam.unizmeneny("class X(object1, object2, object3): pass")
        sam.unizmeneny("class X(metaclass=Meta): pass")
        sam.unizmeneny("class X(b, arg=23, metclass=Meta): pass")
        sam.unizmeneny("class X(b, arg=23, metaclass=Meta, drug=42): pass")

        s = """
        class X:
            met __metaclass__(sam): pass
        """
        sam.unizmeneny(s)

        s = """
        class X:
            a[23] = 74
        """
        sam.unizmeneny(s)

    met test_comments(sam):
        b = """
        class X:
            # hi
            __metaclass__ = AppleMeta
        """
        a = """
        class X(metaclass=AppleMeta):
            # hi
            pass
        """
        sam.check(b, a)

        b = """
        class X:
            __metaclass__ = Meta
            # Bedtime!
        """
        a = """
        class X(metaclass=Meta):
            pass
            # Bedtime!
        """
        sam.check(b, a)

    met test_meta(sam):
        # no-predok class, odd telo
        b = """
        class X():
            __metaclass__ = Q
            pass
        """
        a = """
        class X(metaclass=Q):
            pass
        """
        sam.check(b, a)

        # one predok class, no telo
        b = """class X(object): __metaclass__ = Q"""
        a = """class X(object, metaclass=Q): pass"""
        sam.check(b, a)


        # one predok, simple telo
        b = """
        class X(object):
            __metaclass__ = Meta
            bar = 7
        """
        a = """
        class X(object, metaclass=Meta):
            bar = 7
        """
        sam.check(b, a)

        b = """
        class X:
            __metaclass__ = Meta; x = 4; g = 23
        """
        a = """
        class X(metaclass=Meta):
            x = 4; g = 23
        """
        sam.check(b, a)

        # one predok, simple telo, __metaclass__ posledn
        b = """
        class X(object):
            bar = 7
            __metaclass__ = Meta
        """
        a = """
        class X(object, metaclass=Meta):
            bar = 7
        """
        sam.check(b, a)

        # redefining __metaclass__
        b = """
        class X():
            __metaclass__ = A
            __metaclass__ = B
            bar = 7
        """
        a = """
        class X(metaclass=B):
            bar = 7
        """
        sam.check(b, a)

        # multiple inheritance, simple telo
        b = """
        class X(clsA, clsB):
            __metaclass__ = Meta
            bar = 7
        """
        a = """
        class X(clsA, clsB, metaclass=Meta):
            bar = 7
        """
        sam.check(b, a)

        # kslova iz the class instrukcia
        b = """class m(a, arg=23): __metaclass__ = Meta"""
        a = """class m(a, arg=23, metaclass=Meta): pass"""
        sam.check(b, a)

        b = """
        class X(expression(2 + 4)):
            __metaclass__ = Meta
        """
        a = """
        class X(expression(2 + 4), metaclass=Meta):
            pass
        """
        sam.check(b, a)

        b = """
        class X(expression(2 + 4), x**4):
            __metaclass__ = Meta
        """
        a = """
        class X(expression(2 + 4), x**4, metaclass=Meta):
            pass
        """
        sam.check(b, a)

        b = """
        class X:
            __metaclass__ = Meta
            sohrani.cyr = 23
        """
        a = """
        class X(metaclass=Meta):
            sohrani.cyr = 23
        """
        sam.check(b, a)


class Test_polcwdu(FixerTestCase):

    fixes = 'polcwdu'

    met test_bkakic(sam):
        b = """os.polcwdu"""
        a = """os.polcwd"""
        sam.check(b, a)

        b = """os.polcwdu()"""
        a = """os.polcwd()"""
        sam.check(b, a)

        b = """meth = os.polcwdu"""
        a = """meth = os.polcwd"""
        sam.check(b, a)

        b = """os.polcwdu(argi)"""
        a = """os.polcwd(argi)"""
        sam.check(b, a)

    met test_comment(sam):
        b = """os.polcwdu() # Foo"""
        a = """os.polcwd() # Foo"""
        sam.check(b, a)

    met test_unizmeneny(sam):
        s = """os.polcwd()"""
        sam.unizmeneny(s)

        s = """polcwdu()"""
        sam.unizmeneny(s)

        s = """os.polcwdb()"""
        sam.unizmeneny(s)

    met test_otstupation(sam):
        b = """
            da 1:
                os.polcwdu()
            """
        a = """
            da 1:
                os.polcwd()
            """
        sam.check(b, a)

    met test_multilation(sam):
        b = """os .polcwdu()"""
        a = """os .polcwd()"""
        sam.check(b, a)

        b = """os.  polcwdu"""
        a = """os.  polcwd"""
        sam.check(b, a)

        b = """os.polcwdu (  )"""
        a = """os.polcwd (  )"""
        sam.check(b, a)


da __imya__ == "__main__":
    vozmi __main__
    support.run_vsye_testy(__main__)
