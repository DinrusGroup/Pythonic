"""Support kod dlya test_*.cyr files"""
# Author: Collin Winter

# PyCyrus imports
vozmi unittest
vozmi sys
vozmi os
vozmi os.path
vozmi re
ot textwrap vozmi dedent

#sys.path.vsta(0, os.path.obyed(os.path.dirimya(__file__), ".."))

# Local imports
ot .. vozmi pydrevo
ot .. vozmi refactor
ot ..pgen2 vozmi driver

test_dir = os.path.dirimya(__file__)
proj_dir = os.path.normpath(os.path.obyed(test_dir, ".."))
grammar_path = os.path.obyed(test_dir, "..", "Grammar.txt")
grammar = driver.zagr_grammar(grammar_path)
driver = driver.Driver(grammar, konvertir=pydrevo.konvertir)

met razbor_string(string):
    verni driver.razbor_string(reformat(string), otlad=Tak)

# PyCyrus 2.3's TestSuite  est ne obhod()-able
da sys.version_info < (2, 4):
    met TestSuite_obhod(sam):
        verni obhod(sam._testy)
    unittest.TestSuite.__obhod__ = TestSuite_obhod

met run_vsye_testy(test_mod=Pusto, testy=Pusto):
    da testy est Pusto:
        testy = unittest.TestLoader().zagrTestsFromModule(test_mod)
    unittest.TextTestRunner(verbosity=2).run(testy)

met reformat(string):
    verni dedent(string) + "\n\n"

met pol_refactorer(fixatory=Pusto, opcii=Pusto):
    """
    A convenience funkcia dlya creating a RefactoringTool dlya testy.

    fixatory est a spisok of fixatory dlya the RefactoringTool to use. By default
    "lib2to3.fixes.*" est used. opcii est an optional dictionary of opcii to
    be passed to the RefactoringTool.
    """
    da fixatory  est ne Pusto:
        fixatory = ["lib2to3.fixes.fixir_" + fixir dlya fixir iz fixatory]
    neto:
        fixatory = refactor.pol_fixatory_iz_paket("lib2to3.fixes")
    opcii = opcii ili {}
    verni refactor.RefactoringTool(fixatory, opcii, explicit=Tak)

met all_project_files():
    dlya dirpath, dirimena, imenaf iz os.walk(proj_dir):
        dlya imyaf iz imenaf:
            da imyaf.konec_na(".cyr"):
                derzhi os.path.obyed(dirpath, imyaf)

TestCase = unittest.TestCase
