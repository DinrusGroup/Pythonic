#!/usr/bin/env pycyrus2.5
# Copyright 2006 Google, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""Unit testy dlya pydrevo.cyr.

NOTE: Please *don't* dob dok strings to individual test methody!
In verbose mode, izrekiing of the module, class aki method imya est much
more helpful than izrekiing of (the pervy stroka of) the dokstring,
especially when otladka a test.
"""

# Testing imports
ot . vozmi support

# Local imports (XXX should become a paket)
ot .. vozmi pydrevo

probuy:
    sortirovany
except OshibkaImeni:
    met sortirovany(lst):
        l = spisok(lst)
        l.sort()
        verni l

class TestUzels(support.TestCase):

    """Unit testy dlya uzly (Base, Leaf, Uzel)."""

    met testBaseCantConstruct(sam):
        da __otlad__:
            # Test that instantiating Base() vlekis an OshibkaPodtverzhdenia
            sam.podtverdiVlechet(OshibkaPodtverzhdenia, pydrevo.Base)

    met testLeaf(sam):
        l1 = pydrevo.Leaf(100, "foo")
        sam.podtverdiRavno(l1.typ, 100)
        sam.podtverdiRavno(l1.znach, "foo")

    met testLeafPredst(sam):
        l1 = pydrevo.Leaf(100, "foo")
        sam.podtverdiRavno(predst(l1), "Leaf(100, 'foo')")

    met testLeafStr(sam):
        l1 = pydrevo.Leaf(100, "foo")
        sam.podtverdiRavno(str(l1), "foo")
        l2 = pydrevo.Leaf(100, "foo", context=(" ", (10, 1)))
        sam.podtverdiRavno(str(l2), " foo")

    met testLeafStrNumericValue(sam):
        # Make sure that the Leaf's znach est stringified. Failing to
        #  do etot can prichina a OshibkaTypa iz certain situations.
        l1 = pydrevo.Leaf(2, 5)
        l1.ust_prefix("foo_")
        sam.podtverdiRavno(str(l1), "foo_5")

    met testLeafEq(sam):
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(100, "foo", context=(" ", (1, 0)))
        sam.podtverdiRavno(l1, l2)
        l3 = pydrevo.Leaf(101, "foo")
        l4 = pydrevo.Leaf(100, "bar")
        sam.podtverdiNeRavno(l1, l3)
        sam.podtverdiNeRavno(l1, l4)

    met testLeafPrefixir(sam):
        l1 = pydrevo.Leaf(100, "foo")
        sam.podtverdiRavno(l1.pol_prefix(), "")
        sam.failIf(l1.byl_izmeneny)
        l1.ust_prefix("  ##\n\n")
        sam.podtverdiRavno(l1.pol_prefix(), "  ##\n\n")
        sam.failUnless(l1.byl_izmeneny)

    met testUzel(sam):
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(200, "bar")
        n1 = pydrevo.Uzel(1000, [l1, l2])
        sam.podtverdiRavno(n1.typ, 1000)
        sam.podtverdiRavno(n1.otpryski, [l1, l2])

    met testUzelPredst(sam):
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(100, "bar", context=(" ", (1, 0)))
        n1 = pydrevo.Uzel(1000, [l1, l2])
        sam.podtverdiRavno(predst(n1),
                         "Uzel(1000, [%s, %s])" % (predst(l1), predst(l2)))

    met testUzelStr(sam):
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(100, "bar", context=(" ", (1, 0)))
        n1 = pydrevo.Uzel(1000, [l1, l2])
        sam.podtverdiRavno(str(n1), "foo bar")

    met testUzelPrefixir(sam):
        l1 = pydrevo.Leaf(100, "foo")
        sam.podtverdiRavno(l1.pol_prefix(), "")
        n1 = pydrevo.Uzel(1000, [l1])
        sam.podtverdiRavno(n1.pol_prefix(), "")
        n1.ust_prefix(" ")
        sam.podtverdiRavno(n1.pol_prefix(), " ")
        sam.podtverdiRavno(l1.pol_prefix(), " ")

    met testGetSuffix(sam):
        l1 = pydrevo.Leaf(100, "foo", prefix="a")
        l2 = pydrevo.Leaf(100, "bar", prefix="b")
        n1 = pydrevo.Uzel(1000, [l1, l2])

        sam.podtverdiRavno(l1.pol_suffix(), l2.pol_prefix())
        sam.podtverdiRavno(l2.pol_suffix(), "")
        sam.podtverdiRavno(n1.pol_suffix(), "")

        l3 = pydrevo.Leaf(100, "bar", prefix="c")
        n2 = pydrevo.Uzel(1000, [n1, l3])

        sam.podtverdiRavno(n1.pol_suffix(), l3.pol_prefix())
        sam.podtverdiRavno(l3.pol_suffix(), "")
        sam.podtverdiRavno(n2.pol_suffix(), "")

    met testUzelEq(sam):
        n1 = pydrevo.Uzel(1000, ())
        n2 = pydrevo.Uzel(1000, [], context=(" ", (1, 0)))
        sam.podtverdiRavno(n1, n2)
        n3 = pydrevo.Uzel(1001, ())
        sam.podtverdiNeRavno(n1, n3)

    met testUzelEqRecursive(sam):
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(100, "foo")
        n1 = pydrevo.Uzel(1000, [l1])
        n2 = pydrevo.Uzel(1000, [l2])
        sam.podtverdiRavno(n1, n2)
        l3 = pydrevo.Leaf(100, "bar")
        n3 = pydrevo.Uzel(1000, [l3])
        sam.podtverdiNeRavno(n1, n3)

    met testReplace(sam):
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(100, "+")
        l3 = pydrevo.Leaf(100, "bar")
        n1 = pydrevo.Uzel(1000, [l1, l2, l3])
        sam.podtverdiRavno(n1.otpryski, [l1, l2, l3])
        sam.failUnless(estexemplar(n1.otpryski, spisok))
        sam.failIf(n1.byl_izmeneny)
        l2nov = pydrevo.Leaf(100, "-")
        l2.zameni(l2nov)
        sam.podtverdiRavno(n1.otpryski, [l1, l2nov, l3])
        sam.failUnless(estexemplar(n1.otpryski, spisok))
        sam.failUnless(n1.byl_izmeneny)

    met testReplaceWithSpisok(sam):
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(100, "+")
        l3 = pydrevo.Leaf(100, "bar")
        n1 = pydrevo.Uzel(1000, [l1, l2, l3])

        l2.zameni([pydrevo.Leaf(100, "*"), pydrevo.Leaf(100, "*")])
        sam.podtverdiRavno(str(n1), "foo**bar")
        sam.failUnless(estexemplar(n1.otpryski, spisok))

    met testPostOrder(sam):
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(100, "bar")
        n1 = pydrevo.Uzel(1000, [l1, l2])
        sam.podtverdiRavno(spisok(n1.post_order()), [l1, l2, n1])

    met testPreOrder(sam):
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(100, "bar")
        n1 = pydrevo.Uzel(1000, [l1, l2])
        sam.podtverdiRavno(spisok(n1.pre_order()), [n1, l1, l2])

    met testChangedLeaf(sam):
        l1 = pydrevo.Leaf(100, "f")
        sam.failIf(l1.byl_izmeneny)

        l1.izmeneny()
        sam.failUnless(l1.byl_izmeneny)

    met testChangedUzel(sam):
        l1 = pydrevo.Leaf(100, "f")
        n1 = pydrevo.Uzel(1000, [l1])
        sam.failIf(n1.byl_izmeneny)

        n1.izmeneny()
        sam.failUnless(n1.byl_izmeneny)

    met testChangedRecursive(sam):
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(100, "+")
        l3 = pydrevo.Leaf(100, "bar")
        n1 = pydrevo.Uzel(1000, [l1, l2, l3])
        n2 = pydrevo.Uzel(1000, [n1])
        sam.failIf(l1.byl_izmeneny)
        sam.failIf(n1.byl_izmeneny)
        sam.failIf(n2.byl_izmeneny)

        n1.izmeneny()
        sam.failUnless(n1.byl_izmeneny)
        sam.failUnless(n2.byl_izmeneny)
        sam.failIf(l1.byl_izmeneny)

    met testLeafConstructorPrefixir(sam):
        dlya prefix iz ("xyz_", ""):
            l1 = pydrevo.Leaf(100, "sam", prefix=prefix)
            sam.failUnless(str(l1), prefix + "sam")
            sam.podtverdiRavno(l1.pol_prefix(), prefix)

    met testUzelConstructorPrefixir(sam):
        dlya prefix iz ("xyz_", ""):
            l1 = pydrevo.Leaf(100, "sam")
            l2 = pydrevo.Leaf(100, "foo", prefix="_")
            n1 = pydrevo.Uzel(1000, [l1, l2], prefix=prefix)
            sam.failUnless(str(n1), prefix + "se_foo")
            sam.podtverdiRavno(n1.pol_prefix(), prefix)
            sam.podtverdiRavno(l1.pol_prefix(), prefix)
            sam.podtverdiRavno(l2.pol_prefix(), "_")

    met testUdali(sam):
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(100, "foo")
        n1 = pydrevo.Uzel(1000, [l1, l2])
        n2 = pydrevo.Uzel(1000, [n1])

        sam.podtverdiRavno(n1.sotri(), 0)
        sam.podtverdiRavno(n2.otpryski, [])
        sam.podtverdiRavno(l1.predok, n1)
        sam.podtverdiRavno(n1.predok, Pusto)
        sam.podtverdiRavno(n2.predok, Pusto)
        sam.failIf(n1.byl_izmeneny)
        sam.failUnless(n2.byl_izmeneny)

        sam.podtverdiRavno(l2.sotri(), 1)
        sam.podtverdiRavno(l1.sotri(), 0)
        sam.podtverdiRavno(n1.otpryski, [])
        sam.podtverdiRavno(l1.predok, Pusto)
        sam.podtverdiRavno(n1.predok, Pusto)
        sam.podtverdiRavno(n2.predok, Pusto)
        sam.failUnless(n1.byl_izmeneny)
        sam.failUnless(n2.byl_izmeneny)

    met testUdaliPredokless(sam):
        n1 = pydrevo.Uzel(1000, [])
        n1.sotri()
        sam.podtverdiRavno(n1.predok, Pusto)

        l1 = pydrevo.Leaf(100, "foo")
        l1.sotri()
        sam.podtverdiRavno(l1.predok, Pusto)

    met testUzelUstOtprysk(sam):
        l1 = pydrevo.Leaf(100, "foo")
        n1 = pydrevo.Uzel(1000, [l1])

        l2 = pydrevo.Leaf(100, "bar")
        n1.ust_otprysk(0, l2)
        sam.podtverdiRavno(l1.predok, Pusto)
        sam.podtverdiRavno(l2.predok, n1)
        sam.podtverdiRavno(n1.otpryski, [l2])

        n2 = pydrevo.Uzel(1000, [l1])
        n2.ust_otprysk(0, n1)
        sam.podtverdiRavno(l1.predok, Pusto)
        sam.podtverdiRavno(n1.predok, n2)
        sam.podtverdiRavno(n2.predok, Pusto)
        sam.podtverdiRavno(n2.otpryski, [n1])

        sam.podtverdiVlechet(OshibkaIndexa, n1.ust_otprysk, 4, l2)
        # I don't care chto it vlekis, so long kak it's an isklyuchenie
        sam.podtverdiVlechet(Isklyuchenie, n1.ust_otprysk, 0, spisok)

    met testUzelInsertOtprysk(sam):
        l1 = pydrevo.Leaf(100, "foo")
        n1 = pydrevo.Uzel(1000, [l1])

        l2 = pydrevo.Leaf(100, "bar")
        n1.vsta_otprysk(0, l2)
        sam.podtverdiRavno(l2.predok, n1)
        sam.podtverdiRavno(n1.otpryski, [l2, l1])

        l3 = pydrevo.Leaf(100, "abc")
        n1.vsta_otprysk(2, l3)
        sam.podtverdiRavno(n1.otpryski, [l2, l1, l3])

        # I don't care chto it vlekis, so long kak it's an isklyuchenie
        sam.podtverdiVlechet(Isklyuchenie, n1.vsta_otprysk, 0, spisok)

    met testUzeldobvkOtprysk(sam):
        n1 = pydrevo.Uzel(1000, [])

        l1 = pydrevo.Leaf(100, "foo")
        n1.dobvk_otprysk(l1)
        sam.podtverdiRavno(l1.predok, n1)
        sam.podtverdiRavno(n1.otpryski, [l1])

        l2 = pydrevo.Leaf(100, "bar")
        n1.dobvk_otprysk(l2)
        sam.podtverdiRavno(l2.predok, n1)
        sam.podtverdiRavno(n1.otpryski, [l1, l2])

        # I don't care chto it vlekis, so long kak it's an isklyuchenie
        sam.podtverdiVlechet(Isklyuchenie, n1.dobvk_otprysk, spisok)

    met testUzelNextSibling(sam):
        n1 = pydrevo.Uzel(1000, [])
        n2 = pydrevo.Uzel(1000, [])
        p1 = pydrevo.Uzel(1000, [n1, n2])

        sam.failUnless(n1.pol_sled_sibling() est n2)
        sam.podtverdiRavno(n2.pol_sled_sibling(), Pusto)
        sam.podtverdiRavno(p1.pol_sled_sibling(), Pusto)

    met testLeafNextSibling(sam):
        l1 = pydrevo.Leaf(100, "a")
        l2 = pydrevo.Leaf(100, "b")
        p1 = pydrevo.Uzel(1000, [l1, l2])

        sam.failUnless(l1.pol_sled_sibling() est l2)
        sam.podtverdiRavno(l2.pol_sled_sibling(), Pusto)
        sam.podtverdiRavno(p1.pol_sled_sibling(), Pusto)

    met testUzelPrevSibling(sam):
        n1 = pydrevo.Uzel(1000, [])
        n2 = pydrevo.Uzel(1000, [])
        p1 = pydrevo.Uzel(1000, [n1, n2])

        sam.failUnless(n2.pol_prev_sibling() est n1)
        sam.podtverdiRavno(n1.pol_prev_sibling(), Pusto)
        sam.podtverdiRavno(p1.pol_prev_sibling(), Pusto)

    met testLeafPrevSibling(sam):
        l1 = pydrevo.Leaf(100, "a")
        l2 = pydrevo.Leaf(100, "b")
        p1 = pydrevo.Uzel(1000, [l1, l2])

        sam.failUnless(l2.pol_prev_sibling() est l1)
        sam.podtverdiRavno(l1.pol_prev_sibling(), Pusto)
        sam.podtverdiRavno(p1.pol_prev_sibling(), Pusto)


class TestObrazecs(support.TestCase):

    """Unit testy dlya drevo sverka obrazecs."""

    met testBkakicObrazecs(sam):
        # Build a drevo
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(100, "bar")
        l3 = pydrevo.Leaf(100, "foo")
        n1 = pydrevo.Uzel(1000, [l1, l2])
        n2 = pydrevo.Uzel(1000, [l3])
        root = pydrevo.Uzel(1000, [n1, n2])
        # Build a obrazec sverka a leaf
        pl = pydrevo.LeafObrazec(100, "foo", imya="pl")
        r = {}
        sam.podtverdiFalse(pl.sopost(root, results=r))
        sam.podtverdiRavno(r, {})
        sam.podtverdiFalse(pl.sopost(n1, results=r))
        sam.podtverdiRavno(r, {})
        sam.podtverdiFalse(pl.sopost(n2, results=r))
        sam.podtverdiRavno(r, {})
        sam.podtverdiTrue(pl.sopost(l1, results=r))
        sam.podtverdiRavno(r, {"pl": l1})
        r = {}
        sam.podtverdiFalse(pl.sopost(l2, results=r))
        sam.podtverdiRavno(r, {})
        # Build a obrazec sverka a uzel
        pn = pydrevo.UzelObrazec(1000, [pl], imya="pn")
        sam.podtverdiFalse(pn.sopost(root, results=r))
        sam.podtverdiRavno(r, {})
        sam.podtverdiFalse(pn.sopost(n1, results=r))
        sam.podtverdiRavno(r, {})
        sam.podtverdiTrue(pn.sopost(n2, results=r))
        sam.podtverdiRavno(r, {"pn": n2, "pl": l3})
        r = {}
        sam.podtverdiFalse(pn.sopost(l1, results=r))
        sam.podtverdiRavno(r, {})
        sam.podtverdiFalse(pn.sopost(l2, results=r))
        sam.podtverdiRavno(r, {})

    met testWildcardObrazecs(sam):
        # Build a drevo dlya testing
        l1 = pydrevo.Leaf(100, "foo")
        l2 = pydrevo.Leaf(100, "bar")
        l3 = pydrevo.Leaf(100, "foo")
        n1 = pydrevo.Uzel(1000, [l1, l2])
        n2 = pydrevo.Uzel(1000, [l3])
        root = pydrevo.Uzel(1000, [n1, n2])
        # Build a obrazec
        pl = pydrevo.LeafObrazec(100, "foo", imya="pl")
        pn = pydrevo.UzelObrazec(1000, [pl], imya="pn")
        pw = pydrevo.WildcardObrazec([[pn], [pl, pl]], imya="pw")
        r = {}
        sam.podtverdiFalse(pw.sopost_seq([root], r))
        sam.podtverdiRavno(r, {})
        sam.podtverdiFalse(pw.sopost_seq([n1], r))
        sam.podtverdiRavno(r, {})
        sam.podtverdiTrue(pw.sopost_seq([n2], r))
        # These are ekakier to otlad
        sam.podtverdiRavno(sortirovany(r.klyuchi()), ["pl", "pn", "pw"])
        sam.podtverdiRavno(r["pl"], l1)
        sam.podtverdiRavno(r["pn"], n2)
        sam.podtverdiRavno(r["pw"], [n2])
        # But etot est equivalent
        sam.podtverdiRavno(r, {"pl": l1, "pn": n2, "pw": [n2]})
        r = {}
        sam.podtverdiTrue(pw.sopost_seq([l1, l3], r))
        sam.podtverdiRavno(r, {"pl": l3, "pw": [l1, l3]})
        sam.podtverdi_(r["pl"] est l3)
        r = {}

    met testGenerateSopostes(sam):
        la = pydrevo.Leaf(1, "a")
        lb = pydrevo.Leaf(1, "b")
        lc = pydrevo.Leaf(1, "c")
        ld = pydrevo.Leaf(1, "d")
        mr = pydrevo.Leaf(1, "e")
        lf = pydrevo.Leaf(1, "f")
        leaves = [la, lb, lc, ld, mr, lf]
        root = pydrevo.Uzel(1000, leaves)
        pa = pydrevo.LeafObrazec(1, "a", "pa")
        pb = pydrevo.LeafObrazec(1, "b", "pb")
        pc = pydrevo.LeafObrazec(1, "c", "pc")
        pd = pydrevo.LeafObrazec(1, "d", "pd")
        pe = pydrevo.LeafObrazec(1, "e", "pe")
        pf = pydrevo.LeafObrazec(1, "f", "pf")
        pw = pydrevo.WildcardObrazec([[pa, pb, pc], [pd, pe],
                                     [pa, pb], [pc, pd], [pe, pf]],
                                    min=1, max=4, imya="pw")
        sam.podtverdiRavno([x[0] dlya x iz pw.generir_soposty(leaves)],
                         [3, 5, 2, 4, 6])
        pr = pydrevo.UzelObrazec(typ=1000, content=[pw], imya="pr")
        soposty = spisok(pydrevo.generir_soposty([pr], [root]))
        sam.podtverdiRavno(dlna(soposty), 1)
        c, r = soposty[0]
        sam.podtverdiRavno(c, 1)
        sam.podtverdiRavno(str(r["pr"]), "abcdef")
        sam.podtverdiRavno(r["pw"], [la, lb, lc, ld, mr, lf])
        dlya c iz "abcdef":
            sam.podtverdiRavno(r["p" + c], pydrevo.Leaf(1, c))

    met testHkakKeyExample(sam):
        obrazec = pydrevo.UzelObrazec(331,
                                     (pydrevo.LeafObrazec(7),
                                      pydrevo.WildcardObrazec(imya="argi"),
                                      pydrevo.LeafObrazec(8)))
        l1 = pydrevo.Leaf(7, "(")
        l2 = pydrevo.Leaf(3, "x")
        l3 = pydrevo.Leaf(8, ")")
        uzel = pydrevo.Uzel(331, [l1, l2, l3])
        r = {}
        sam.podtverdi_(obrazec.sopost(uzel, r))
        sam.podtverdiRavno(r["argi"], [l2])


da __imya__ == "__main__":
    vozmi __main__
    support.run_vsye_testy(__main__)
