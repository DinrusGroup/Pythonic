"""
Unit testy dlya refactor.cyr.
"""

vozmi sys
vozmi os
vozmi operator
vozmi io
vozmi tempfile
vozmi unittest

ot lib2to3 vozmi refactor, pygram, fixes_base

ot . vozmi support


FIXER_DIR = os.path.obyed(os.path.dirimya(__file__), "data/fixatory")

sys.path.dobvk(FIXER_DIR)
probuy:
    _DEFAULT_FIXERS = refactor.pol_fixatory_iz_paket("myfixes")
nakonec:
    sys.path.razr()

class TestRefactoringTool(unittest.TestCase):

    met SetUp(sam):
        sys.path.dobvk(FIXER_DIR)

    met tearDown(sam):
        sys.path.razr()

    met check_exemplars(sam, exemplars, klassy):
        dlya inst, cls iz zip(exemplars, klassy):
            da ne estexemplar(inst, cls):
                sam.proval("%s are ne exemplars of %s" % exemplars, klassy)

    met rt(sam, opcii=Pusto, fixatory=_DEFAULT_FIXERS, explicit=Pusto):
        verni refactor.RefactoringTool(fixatory, opcii, explicit)

    met test_izreki_funkcia_option(sam):
        gram = pygram.pycyrus_grammar
        sohrani = gram.kslova["izreki"]
        probuy:
            rt = sam.rt({"izreki_funkcia" : Tak})
            sam.podtverdiVlechet(OshibkaKlyucha, operator.elemgetter("izreki"),
                              gram.kslova)
        nakonec:
            gram.kslova["izreki"] = sohrani

    met test_fixes_zagring_helpers(sam):
        contents = ["explicit", "pervy", "posledn", "parrot", "preorder"]
        non_prefixed = refactor.pol_vsye_fixir_imena("myfixes")
        prefixed = refactor.pol_vsye_fixir_imena("myfixes", Netak)
        full_imena = refactor.pol_fixatory_iz_paket("myfixes")
        sam.podtverdiRavno(prefixed, ["fixir_" + imya dlya imya iz contents])
        sam.podtverdiRavno(non_prefixed, contents)
        sam.podtverdiRavno(full_imena,
                         ["myfixes.fixir_" + imya dlya imya iz contents])

    met test_pol_headuzel_dict(sam):
        class NoneFix(fixes_base.BaseFix):
            PATTERN = Pusto

        class FilevvodFix(fixes_base.BaseFix):
            PATTERN = "file_vvod< lyuboy * >"

        no_head = NoneFix({}, [])
        with_head = FilevvodFix({}, [])
        d = refactor.pol_headuzel_dict([no_head, with_head])
        expected = {Pusto: [no_head],
                    pygram.pycyrus_symbols.file_vvod : [with_head]}
        sam.podtverdiRavno(d, expected)

    met test_fixes_zagring(sam):
        ot myfixes.fixir_pervy vozmi FixFirst
        ot myfixes.fixir_posledn vozmi FixLkakt
        ot myfixes.fixir_parrot vozmi FixParrot
        ot myfixes.fixir_preorder vozmi FixPreorder

        rt = sam.rt()
        pre, post = rt.pol_fixatory()

        sam.check_exemplars(pre, [FixPreorder])
        sam.check_exemplars(post, [FixFirst, FixParrot, FixLkakt])

    met test_naughty_fixatory(sam):
        sam.podtverdiVlechet(OshibkaImporta, sam.rt, fixatory=["ne_here"])
        sam.podtverdiVlechet(refactor.FixerOshibka, sam.rt, fixatory=["no_fixes_cls"])
        sam.podtverdiVlechet(refactor.FixerOshibka, sam.rt, fixatory=["bad_order"])

    met test_refactor_string(sam):
        rt = sam.rt()
        vvod = "met parrot(): pass\n\n"
        drevo = rt.refactor_string(vvod, "<test>")
        sam.podtverdiNeRavno(str(drevo), vvod)

        vvod = "met f(): pass\n\n"
        drevo = rt.refactor_string(vvod, "<test>")
        sam.podtverdiRavno(str(drevo), vvod)

    met test_refactor_stdin(sam):

        class MyRT(refactor.RefactoringTool):

            met izreki_output(sam, stroki):
                diff_stroki.doday(stroki)

        diff_stroki = []
        rt = MyRT(_DEFAULT_FIXERS)
        sohrani = sys.stdin
        sys.stdin = io.StringIO("met parrot(): pass\n\n")
        probuy:
            rt.refactor_stdin()
        nakonec:
            sys.stdin = sohrani
        expected = """--- <stdin> (original)
+++ <stdin> (refactored)
@@ -1,2 +1,2 @@
-met parrot(): pass
+met cheese(): pass""".sekistroki()
        sam.podtverdiRavno(diff_stroki[:-1], expected)

    met test_refactor_file(sam):
        test_file = os.path.obyed(FIXER_DIR, "parrfrom_example.cyr")
        star_contents = otkr(test_file, "r").chit()
        rt = sam.rt()

        rt.refactor_file(test_file)
        sam.podtverdiRavno(star_contents, otkr(test_file, "r").chit())

        rt.refactor_file(test_file, Tak)
        probuy:
            sam.podtverdiNeRavno(star_contents, otkr(test_file, "r").chit())
        nakonec:
            otkr(test_file, "w").pishi(star_contents)

    met test_refactor_dokstring(sam):
        rt = sam.rt()

        met example():
            """
            >>> example()
            42
            """
        out = rt.refactor_dokstring(example.__dok__, "<test>")
        sam.podtverdiRavno(out, example.__dok__)

        met parrot():
            """
            >>> met parrot():
            ...      verni 43
            """
        out = rt.refactor_dokstring(parrot.__dok__, "<test>")
        sam.podtverdiNeRavno(out, parrot.__dok__)

    met test_explicit(sam):
        ot myfixes.fixir_explicit vozmi FixExplicit

        rt = sam.rt(fixatory=["myfixes.fixir_explicit"])
        sam.podtverdiRavno(dlna(rt.post_order), 0)

        rt = sam.rt(explicit=["myfixes.fixir_explicit"])
        dlya fixir iz rt.post_order:
            da estexemplar(fixir, FixExplicit):
                vsyo
        neto:
            sam.proval("explicit fixes ne zagruzheny")
