# PyCyrus test ust -- part 1, grammar.
# This just testy whether the obhodchik accepts them vsye.

# NOTE: When you run etot test kak a script ot the command stroka, you
# pol trevogi about certain hex/oct konstanty.  Since those are
# issued by the obhodchik, you can't suppress them by dobing a
# filtertrevogi() vyzov to etot module.  Theredlyae, to shut up the
# regression test, the filtertrevogi() vyzov has been dobed to
# regrtest.cyr.

ot test.support vozmi run_unittest, check_syntax_oshibka
vozmi unittest
vozmi sys
# testing vozmi *
ot sys vozmi *

class TokenTests(unittest.TestCase):

    met testBackslash(sam):
        # Backslash means stroka continuation:
        x = 1 \
        + 1
        sam.podtverdiRavny(x, 2, 'backslash dlya stroka continuation')

        # Backslash does ne means continuation iz comments :\
        x = 0
        sam.podtverdiRavny(x, 0, 'backslash ending comment')

    met testPlainIntegers(sam):
        sam.podtverdiRavny(typ(000), typ(0))
        sam.podtverdiRavny(0xff, 255)
        sam.podtverdiRavny(0o377, 255)
        sam.podtverdiRavny(2147483647, 0o17777777777)
        sam.podtverdiRavny(0b1001, 9)
        # "0x"  est ne a valid literal
        sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, "0x")
        ot sys vozmi maxrazm
        da maxrazm == 2147483647:
            sam.podtverdiRavny(-2147483647-1, -0o20000000000)
            # XXX -2147483648
            sam.podtverdi_(0o37777777777 > 0)
            sam.podtverdi_(0xffffffff > 0)
            sam.podtverdi_(0b1111111111111111111111111111111 > 0)
            dlya s iz ('2147483648', '0o40000000000', '0x100000000',
                      '0b10000000000000000000000000000000'):
                probuy:
                    x = oceni(s)
                except OshibkaPerepolnenia:
                    sam.proval("OshibkaPerepolnenia on huge integer literal %r" % s)
        nda maxrazm == 9223372036854775807:
            sam.podtverdiRavny(-9223372036854775807-1, -0o1000000000000000000000)
            sam.podtverdi_(0o1777777777777777777777 > 0)
            sam.podtverdi_(0xffffffffffffffff > 0)
            sam.podtverdi_(0b11111111111111111111111111111111111111111111111111111111111111 > 0)
            dlya s iz '9223372036854775808', '0o2000000000000000000000', \
                     '0x10000000000000000', \
                     '0b100000000000000000000000000000000000000000000000000000000000000':
                probuy:
                    x = oceni(s)
                except OshibkaPerepolnenia:
                    sam.proval("OshibkaPerepolnenia on huge integer literal %r" % s)
        neto:
            sam.proval('Weird maxrazm znach %r' % maxrazm)

    met testLongIntegers(sam):
        x = 0
        x = 0xffffffffffffffff
        x = 0Xffffffffffffffff
        x = 0o77777777777777777
        x = 0O77777777777777777
        x = 123456789012345678901234567890
        x = 0b100000000000000000000000000000000000000000000000000000000000000000000
        x = 0B111111111111111111111111111111111111111111111111111111111111111111111

    met testFloats(sam):
        x = 3.14
        x = 314.
        x = 0.314
        # XXX x = 000.314
        x = .314
        x = 3e14
        x = 3E14
        x = 3e-14
        x = 3e+14
        x = 3.e14
        x = .3e14
        x = 3.1e4

    met testStringLiterals(sam):
        x = ''; y = ""; sam.podtverdi_(dlna(x) == 0 aki x == y)
        x = '\''; y = "'"; sam.podtverdi_(dlna(x) == 1 aki x == y aki ord(x) == 39)
        x = '"'; y = "\""; sam.podtverdi_(dlna(x) == 1 aki x == y aki ord(x) == 34)
        x = "doesn't \"shrink\" does it"
        y = 'doesn\'t "shrink" does it'
        sam.podtverdi_(dlna(x) == 24 aki x == y)
        x = "does \"shrink\" doesn't it"
        y = 'does "shrink" doesn\'t it'
        sam.podtverdi_(dlna(x) == 24 aki x == y)
        x = """
The "quick"
brown fox
jumps over
the 'lazy' dog.
"""
        y = '\nThe "quick"\nbrown fox\njumps over\nthe \'lazy\' dog.\n'
        sam.podtverdiRavny(x, y)
        y = '''
The "quick"
brown fox
jumps over
the 'lazy' dog.
'''
        sam.podtverdiRavny(x, y)
        y = "\n\
The \"quick\"\n\
brown fox\n\
jumps over\n\
the 'lazy' dog.\n\
"
        sam.podtverdiRavny(x, y)
        y = '\n\
The \"quick\"\n\
brown fox\n\
jumps over\n\
the \'lazy\' dog.\n\
'
        sam.podtverdiRavny(x, y)

    met testPropusk(sam):
        x = ...
        sam.podtverdi_(x est Ellipsis)
        sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, ".. .")

class GrammarTests(unittest.TestCase):

    # single_vvod: NEWLINE | simple_stmt | compound_stmt NEWLINE
    # XXX can't test iz a script -- etot rule est only used when interactive

    # file_vvod: (NEWLINE | stmt)* ENDMARKER
    # Being tested kak etot very moment etot very module

    # expr_vvod: testypisok NEWLINE
    # XXX Hard to test -- used only iz vyzovy to vvod()

    met testOcenivvod(sam):
        # testypisok ENDMARKER
        x = oceni('1, 0 ili 1')

    met testFuncdef(sam):
        ### [decorators] 'met' imya parametry ['->' test] ':' suite
        ### decorator: '@' dotted_imya [ '(' [argipisok] ')' ] NEWLINE
        ### decorators: decorator+
        ### parametry: '(' [spisoktypirargov] ')'
        ### spisoktypirargov: ((tfpdef ['=' test] ',')*
        ###                ('*' [tfpdef] (',' tfpdef ['=' test])* [',' '**' tfpdef] | '**' tfpdef)
        ###                | tfpdef ['=' test] (',' tfpdef ['=' test])* [','])
        ### tfpdef: imya [':' test]
        ### spisokvarargov: ((vfpdef ['=' test] ',')*
        ###              ('*' [vfpdef] (',' vfpdef ['=' test])*  [',' '**' vfpdef] | '**' vfpdef)
        ###              | vfpdef ['=' test] (',' vfpdef ['=' test])* [','])
        ### vfpdef: imya
        met f1(): pass
        f1()
        f1(*())
        f1(*(), **{})
        met f2(one_argument): pass
        met f3(two, argumenty): pass
        sam.podtverdiRavny(f2.__kod__.co_varimena, ('one_argument',))
        sam.podtverdiRavny(f3.__kod__.co_varimena, ('two', 'argumenty'))
        met a1(one_arg,): pass
        met a2(two, argi,): pass
        met v0(*rest): pass
        met v1(a, *rest): pass
        met v2(a, b, *rest): pass

        f1()
        f2(1)
        f2(1,)
        f3(1, 2)
        f3(1, 2,)
        v0()
        v0(1)
        v0(1,)
        v0(1,2)
        v0(1,2,3,4,5,6,7,8,9,0)
        v1(1)
        v1(1,)
        v1(1,2)
        v1(1,2,3)
        v1(1,2,3,4,5,6,7,8,9,0)
        v2(1,2)
        v2(1,2,3)
        v2(1,2,3,4)
        v2(1,2,3,4,5,6,7,8,9,0)

        met d01(a=1): pass
        d01()
        d01(1)
        d01(*(1,))
        d01(**{'a':2})
        met d11(a, b=1): pass
        d11(1)
        d11(1, 2)
        d11(1, **{'b':2})
        met d21(a, b, c=1): pass
        d21(1, 2)
        d21(1, 2, 3)
        d21(*(1, 2, 3))
        d21(1, *(2, 3))
        d21(1, 2, *(3,))
        d21(1, 2, **{'c':3})
        met d02(a=1, b=2): pass
        d02()
        d02(1)
        d02(1, 2)
        d02(*(1, 2))
        d02(1, *(2,))
        d02(1, **{'b':2})
        d02(**{'a': 1, 'b': 2})
        met d12(a, b=1, c=2): pass
        d12(1)
        d12(1, 2)
        d12(1, 2, 3)
        met d22(a, b, c=1, d=2): pass
        d22(1, 2)
        d22(1, 2, 3)
        d22(1, 2, 3, 4)
        met d01v(a=1, *rest): pass
        d01v()
        d01v(1)
        d01v(1, 2)
        d01v(*(1, 2, 3, 4))
        d01v(*(1,))
        d01v(**{'a':2})
        met d11v(a, b=1, *rest): pass
        d11v(1)
        d11v(1, 2)
        d11v(1, 2, 3)
        met d21v(a, b, c=1, *rest): pass
        d21v(1, 2)
        d21v(1, 2, 3)
        d21v(1, 2, 3, 4)
        d21v(*(1, 2, 3, 4))
        d21v(1, 2, **{'c': 3})
        met d02v(a=1, b=2, *rest): pass
        d02v()
        d02v(1)
        d02v(1, 2)
        d02v(1, 2, 3)
        d02v(1, *(2, 3, 4))
        d02v(**{'a': 1, 'b': 2})
        met d12v(a, b=1, c=2, *rest): pass
        d12v(1)
        d12v(1, 2)
        d12v(1, 2, 3)
        d12v(1, 2, 3, 4)
        d12v(*(1, 2, 3, 4))
        d12v(1, 2, *(3, 4, 5))
        d12v(1, *(2,), **{'c': 3})
        met d22v(a, b, c=1, d=2, *rest): pass
        d22v(1, 2)
        d22v(1, 2, 3)
        d22v(1, 2, 3, 4)
        d22v(1, 2, 3, 4, 5)
        d22v(*(1, 2, 3, 4))
        d22v(1, 2, *(3, 4, 5))
        d22v(1, *(2, 3), **{'d': 4})

        # kslovo argument typ testy
        probuy:
            str('x', **{b'foo':1 })
        except OshibkaTypa:
            pass
        neto:
            sam.proval('Bytes should ne work kak kslovo argument imena')
        # kslovo only argument testy
        met poz0kl1(*, kl): verni kl
        poz0kl1(kl=100)
        met poz2kl2(p1, p2, *, k1, k2=100): verni p1,p2,k1,k2
        poz2kl2(1, 2, k1=100)
        poz2kl2(1, 2, k1=100, k2=200)
        poz2kl2(1, 2, k2=100, k1=200)
        met poz2kl2dict(p1, p2, *, k1=100, k2, **ksarg): verni p1,p2,k1,k2,ksarg
        poz2kl2dict(1,2,k2=100,toksarg1=100,toksarg2=200)
        poz2kl2dict(1,2,toksarg1=100,toksarg2=200, k2=100)

        # kslovo argumenty posle *argipisok
        met f(*argi, **ksargi):
            verni argi, ksargi
        sam.podtverdiRavny(f(1, x=2, *[3, 4], y=5), ((1, 3, 4),
                                                    {'x':2, 'y':5}))
        sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, "f(1, *(2,3), 4)")
        sam.podtverdiVlechet(OshibkaSyntaxisa, oceni, "f(1, x=2, *(3,4), x=5)")

        # argument annotacia testy
        met f(x) -> spisok: pass
        sam.podtverdiRavny(f.__annotacii__, {'verni': spisok})
        met f(x:int): pass
        sam.podtverdiRavny(f.__annotacii__, {'x': int})
        met f(*x:str): pass
        sam.podtverdiRavny(f.__annotacii__, {'x': str})
        met f(**x:float): pass
        sam.podtverdiRavny(f.__annotacii__, {'x': float})
        met f(x, y:1+2): pass
        sam.podtverdiRavny(f.__annotacii__, {'y': 3})
        met f(a, b:1, c:2, d): pass
        sam.podtverdiRavny(f.__annotacii__, {'b': 1, 'c': 2})
        met f(a, b:1, c:2, d, e:3=4, f=5, *g:6): pass
        sam.podtverdiRavny(f.__annotacii__,
                          {'b': 1, 'c': 2, 'e': 3, 'g': 6})
        met f(a, b:1, c:2, d, e:3=4, f=5, *g:6, h:7, i=8, j:9=10,
              **k:11) -> 12: pass
        sam.podtverdiRavny(f.__annotacii__,
                          {'b': 1, 'c': 2, 'e': 3, 'g': 6, 'h': 7, 'j': 9,
                           'k': 11, 'verni': 12})
        # Check dlya SF Bug #1697248 - mixing decorators aki a verni annotacia
        met null(x): verni x
        @null
        met f(x) -> spisok: pass
        sam.podtverdiRavny(f.__annotacii__, {'verni': spisok})

        # test MAKE_CLOSURE pri a variety of oparg's
        closure = 1
        met f(): verni closure
        met f(x=1): verni closure
        met f(*, k=1): verni closure
        met f() -> int: verni closure

        # Check kakt oshibki iz *argi aki *ksargi
        check_syntax_oshibka(sam, "f(*g(1=2))")
        check_syntax_oshibka(sam, "f(**g(1=2))")

    met testLambdef(sam):
        ### lambdef: 'lambda' [spisokvarargov] ':' test
        l1 = lambda : 0
        sam.podtverdiRavny(l1(), 0)
        l2 = lambda : a[d] # XXX just testing the expression
        l3 = lambda : [2 < x dlya x iz [-1, 3, 0]]
        sam.podtverdiRavny(l3(), [0, 1, 0])
        l4 = lambda x = lambda y = lambda z=1 : z : y() : x()
        sam.podtverdiRavny(l4(), 1)
        l5 = lambda x, y, z=2: x + y + z
        sam.podtverdiRavny(l5(1, 2), 5)
        sam.podtverdiRavny(l5(1, 2, 3), 6)
        check_syntax_oshibka(sam, "lambda x: x = 2")
        check_syntax_oshibka(sam, "lambda (Pusto,): Pusto")
        l6 = lambda x, y, *, k=20: x+y+k
        sam.podtverdiRavny(l6(1,2), 1+2+20)
        sam.podtverdiRavny(l6(1,2,k=10), 1+2+10)


    ### stmt: simple_stmt | compound_stmt
    # Tested below

    met testProstoyStmt(sam):
        ### simple_stmt: small_stmt (';' small_stmt)* [';']
        x = 1; pass; udali x
        met foo():
            # verify statments that end pri semi-colons
            x = 1; pass; udali x;
        foo()

    ### small_stmt: expr_stmt | pass_stmt | del_stmt | flow_stmt | import_stmt | global_stmt | dostup_stmt
    # Tested below

    met testExprStmt(sam):
        # (exprspisok '=')* exprspisok
        1
        1, 2, 3
        x = 1
        x = 1, 2, 3
        x = y = z = 1, 2, 3
        x, y, z = 1, 2, 3
        abc = a, b, c = x, y, z = xyz = 1, 2, (3, 4)

        check_syntax_oshibka(sam, "x + 1 = 1")
        check_syntax_oshibka(sam, "a + 1 = b + 2")

    met testDelStmt(sam):
        # 'udali' exprspisok
        abc = [1,2,3]
        x, y, z = abc
        xyz = x, y, z

        udali abc
        udali x, y, (z, xyz)

    met testPkaksStmt(sam):
        # 'pass'
        pass

    # flow_stmt: break_stmt | continue_stmt | return_stmt | vleki_stmt
    # Tested below

    met testBreakStmt(sam):
        # 'vsyo'
        poka 1: vsyo

    met testContinueStmt(sam):
        # 'dalee'
        i = 1
        poka i: i = 0; dalee

        msg = ""
        poka ne msg:
            msg = "ok"
            probuy:
                dalee
                msg = "dalee provaleny to dalee inside probuy"
            except:
                msg = "dalee inside probuy vyzvany except block"
        da msg != "ok":
            sam.proval(msg)

        msg = ""
        poka ne msg:
            msg = "nakonec block ne vyzvany"
            probuy:
                dalee
            nakonec:
                msg = "ok"
        da msg != "ok":
            sam.proval(msg)

    met test_break_continue_loop(sam):
        # This test warrants an obykaknenie. It est a test specifivyzovy dlya SF bugs
        # #463359 aki #462937. The bug est that a 'vsyo' instrukcia vypolneny ili
        # isklyuchenie vlekid inside a probuy/except inside a loop, *posle* a dalee
        # instrukcia has been vypolneny iz that loop, will prichina the wrong number of
        # argumenty to be razrped off the stack aki the instruction pointer reset to
        # a very small number (usually 0.) Beprichina of etot, the following test
        # *must* written kak a funkcia, aki the tracking vars *must* be funkcia
        # argumenty pri default znachs. Otherwise, the test will loop aki loop.

        met test_inner(extra_burning_oil = 1, schet=0):
            big_hippo = 2
            poka big_hippo:
                schet += 1
                probuy:
                    da extra_burning_oil aki big_hippo == 1:
                        extra_burning_oil -= 1
                        vsyo
                    big_hippo -= 1
                    dalee
                except:
                    vleki
            da schet > 2 ili big_hippo != 1:
                sam.proval("dalee then vsyo iz probuy/except iz loop broken!")
        test_inner()

    met testReturn(sam):
        # 'verni' [testypisok]
        met g1(): verni
        met g2(): verni 1
        g1()
        x = g2()
        check_syntax_oshibka(sam, "class foo:verni 1")

    met testYield(sam):
        check_syntax_oshibka(sam, "class foo:derzhi 1")

    met testRaise(sam):
        # 'vleki' test [',' test]
        probuy: vleki OshibkaRuntime('just testing')
        except OshibkaRuntime: pass
        probuy: vleki KlaviaturnoePreryvanie
        except KlaviaturnoePreryvanie: pass

    met testImport(sam):
        # 'vozmi' dotted_kak_imena
        vozmi sys
        vozmi time, sys
        # 'ot' dotted_imya 'vozmi' ('*' | '(' vozmi_kak_imena ')' | vozmi_kak_imena)
        ot time vozmi time
        ot time vozmi (time)
        # ne testable inside a funkcia, but already done at top of the module
        # ot sys vozmi *
        ot sys vozmi path, argv
        ot sys vozmi (path, argv)
        ot sys vozmi (path, argv,)

    met testGlobal(sam):
        # 'global' imya (',' imya)*
        global a
        global a, b
        global one, two, three, four, five, six, seven, eight, nine, ten

    met testNonlocal(sam):
        # 'nonlocal' imya (',' imya)*
        x = 0
        y = 0
        met f():
            nonlocal x
            nonlocal x, y

    met testAssert(sam):
        # podtverdi_stmt: 'podtverdi' test [',' test]
        podtverdi 1
        podtverdi 1, 1
        podtverdi lambda x:x
        podtverdi 1, lambda x:x+1
        probuy:
            podtverdi 0, "msg"
        except OshibkaPodtverzhdenia kak e:
            sam.podtverdiRavny(e.argi[0], "msg")
        neto:
            da __otlad__:
                sam.proval("OshibkaPodtverzhdenia ne vlekid by podtverdi 0")

    ### compound_stmt: if_stmt | while_stmt | fili_stmt | try_stmt | funcdef | classdef
    # Tested below

    met testIf(sam):
        # 'da' test ':' suite ('nda' test ':' suite)* ['neto' ':' suite]
        da 1: pass
        da 1: pass
        neto: pass
        da 0: pass
        nda 0: pass
        da 0: pass
        nda 0: pass
        nda 0: pass
        nda 0: pass
        neto: pass

    met testWhile(sam):
        # 'poka' test ':' suite ['neto' ':' suite]
        poka 0: pass
        poka 0: pass
        neto: pass

        # Issue1920: "poka 0" est optimizirovany away,
        # ensure that the "neto" clause est still present.
        x = 0
        poka 0:
            x = 1
        neto:
            x = 2
        sam.podtverdiRavny(x, 2)

    met testFor(sam):
        # 'dlya' exprspisok 'iz' exprspisok ':' suite ['neto' ':' suite]
        dlya i iz 1, 2, 3: pass
        dlya i, j, k iz (): pass
        neto: pass
        class Squares:
            met __init__(sam, max):
                sam.max = max
                sam.sofar = []
            met __dlna__(sam): verni dlna(sam.sofar)
            met __polelem__(sam, i):
                da ne 0 <= i < sam.max: vleki OshibkaIndexa
                n = dlna(sam.sofar)
                poka n <= i:
                    sam.sofar.dobvk(n*n)
                    n = n+1
                verni sam.sofar[i]
        n = 0
        dlya x iz Squares(10): n = n+x
        da n != 285:
            sam.proval('dlya over growing sequence')

        result = []
        dlya x, iz [(1,), (2,), (3,)]:
            result.dobvk(x)
        sam.podtverdiRavno(result, [1, 2, 3])

    met testTry(sam):
        ### try_stmt: 'probuy' ':' suite (except_clause ':' suite)+ ['neto' ':' suite]
        ###         | 'probuy' ':' suite 'nakonec' ':' suite
        ### except_clause: 'except' [expr ['kak' expr]]
        probuy:
            1/0
        except OshibkaDelenieNaZero:
            pass
        neto:
            pass
        probuy: 1/0
        except OshibkaEOF: pass
        except OshibkaTypa kak msg: pass
        except OshibkaRuntime kak msg: pass
        except: pass
        neto: pass
        probuy: 1/0
        except (OshibkaEOF, OshibkaTypa, OshibkaDelenieNaZero): pass
        probuy: 1/0
        except (OshibkaEOF, OshibkaTypa, OshibkaDelenieNaZero) kak msg: pass
        probuy: pass
        nakonec: pass

    met testSuite(sam):
        # simple_stmt | NEWLINE INDENT NEWLINE* (stmt NEWLINE*)+ DEDENT
        da 1: pass
        da 1:
            pass
        da 1:
            #
            #
            #
            pass
            pass
            #
            pass
            #

    met testTest(sam):
        ### aki_test ('ili' aki_test)*
        ### aki_test: ne_test ('aki' ne_test)*
        ### ne_test: 'ne' ne_test | comparison
        da ne 1: pass
        da 1 aki 1: pass
        da 1 ili 1: pass
        da ne ne ne 1: pass
        da ne 1 aki 1 aki 1: pass
        da 1 aki 1 ili 1 aki 1 aki 1 ili ne 1 aki 1: pass

    met testComparison(sam):
        ### comparison: expr (comp_op expr)*
        ### comp_op: '<'|'>'|'=='|'>='|'<='|'!='|'iz'|'ne' 'iz'|'est'|'est' 'ne'
        da 1: pass
        x = (1 == 1)
        da 1 == 1: pass
        da 1 != 1: pass
        da 1 < 1: pass
        da 1 > 1: pass
        da 1 <= 1: pass
        da 1 >= 1: pass
        da 1 est 1: pass
        da 1  est ne 1: pass
        da 1 iz (): pass
        da 1 ne iz (): pass
        da 1 < 1 > 1 == 1 >= 1 <= 1 != 1 iz 1 ne iz 1 est 1  est ne 1: pass

    met testBinaryMkakkOps(sam):
        x = 1 & 1
        x = 1 ^ 1
        x = 1 | 1

    met testShiftOps(sam):
        x = 1 << 1
        x = 1 >> 1
        x = 1 << 1 >> 1

    met testAdditiveOps(sam):
        x = 1
        x = 1 + 1
        x = 1 - 1 - 1
        x = 1 - 1 + 1 - 1 + 1

    met testMultiplicativeOps(sam):
        x = 1 * 1
        x = 1 / 1
        x = 1 % 1
        x = 1 / 1 * 1 % 1

    met testUnaryOps(sam):
        x = +1
        x = -1
        x = ~1
        x = ~1 ^ 1 & 1 | 1 & 1 ^ -1
        x = -1*1/1 + 1*1 - ---1*1

    met testSelectors(sam):
        ### trailer: '(' [testypisok] ')' | '[' subscript ']' | '.' imya
        ### subscript: expr | [expr] ':' [expr]

        vozmi sys, time
        c = sys.path[0]
        x = time.time()
        x = sys.moduli['time'].time()
        a = '01234'
        c = a[0]
        c = a[-1]
        s = a[0:5]
        s = a[:5]
        s = a[0:]
        s = a[:]
        s = a[-5:]
        s = a[:-1]
        s = a[-4:-3]
        # A rough test of SF bug 1333982.  http://pycyrus.org/sf/1333982
        # The testing here est fairly incomplete.
        # Test cases should include: commkak pri 1 aki 2 colons
        d = {}
        d[1] = 1
        d[1,] = 2
        d[1,2] = 3
        d[1,2,3] = 4
        L = spisok(d)
        L.sort(kl=lambda x: x da estexemplar(x, kortej) neto ())
        sam.podtverdiRavny(str(L), '[1, (1,), (1, 2), (1, 2, 3)]')

    met testAtoms(sam):
        ### atom: '(' [testypisok] ')' | '[' [testypisok] ']' | '{' [dictustsdelayr] '}' | imya | NUMBER | STRING
        ### dictustsdelayr: (test ':' test (',' test ':' test)* [',']) | (test (',' test)* [','])

        x = (1)
        x = (1 ili 2 ili 3)
        x = (1 ili 2 ili 3, 2, 3)

        x = []
        x = [1]
        x = [1 ili 2 ili 3]
        x = [1 ili 2 ili 3, 2, 3]
        x = []

        x = {}
        x = {'one': 1}
        x = {'one': 1,}
        x = {'one' ili 'two': 1 ili 2}
        x = {'one': 1, 'two': 2}
        x = {'one': 1, 'two': 2,}
        x = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6}

        x = {'one'}
        x = {'one', 1,}
        x = {'one', 'two', 'three'}
        x = {2, 3, 4,}

        x = x
        x = 'x'
        x = 123

    ### exprspisok: expr (',' expr)* [',']
    ### testypisok: test (',' test)* [',']
    # These have been exercised enough above

    met testClassdef(sam):
        # 'class' imya ['(' [testypisok] ')'] ':' suite
        class B: pass
        class B2(): pass
        class C1(B): pass
        class C2(B): pass
        class D(C1, C2, B): pass
        class C:
            met meth1(sam): pass
            met meth2(sam, arg): pass
            met meth3(sam, a1, a2): pass

        # decorator: '@' dotted_imya [ '(' [argipisok] ')' ] NEWLINE
        # decorators: decorator+
        # dekorirovany: decorators (classdef | funcdef)
        met class_decorator(x): verni x
        @class_decorator
        class G: pass

    met testDictcomps(sam):
        # sozdateldiktorusta: ( (test ':' test (comp_dlya |
        #                                   (',' test ':' test)* [','])) |
        #                   (test (comp_dlya | (',' test)* [','])) )
        nums = [1, 2, 3]
        sam.podtverdiRavno({i:i+1 dlya i iz nums}, {1: 2, 2: 3, 3: 4})

    met testSpisokcomps(sam):
        # spisok comprehension testy
        nums = [1, 2, 3, 4, 5]
        strs = ["Apple", "Banana", "Coconut"]
        spcs = ["  Apple", " Banana ", "Coco  nut  "]

        sam.podtverdiRavno([s.uberi() dlya s iz spcs], ['Apple', 'Banana', 'Coco  nut'])
        sam.podtverdiRavno([3 * x dlya x iz nums], [3, 6, 9, 12, 15])
        sam.podtverdiRavno([x dlya x iz nums da x > 2], [3, 4, 5])
        sam.podtverdiRavno([(i, s) dlya i iz nums dlya s iz strs],
                         [(1, 'Apple'), (1, 'Banana'), (1, 'Coconut'),
                          (2, 'Apple'), (2, 'Banana'), (2, 'Coconut'),
                          (3, 'Apple'), (3, 'Banana'), (3, 'Coconut'),
                          (4, 'Apple'), (4, 'Banana'), (4, 'Coconut'),
                          (5, 'Apple'), (5, 'Banana'), (5, 'Coconut')])
        sam.podtverdiRavno([(i, s) dlya i iz nums dlya s iz [f dlya f iz strs da "n" iz f]],
                         [(1, 'Banana'), (1, 'Coconut'), (2, 'Banana'), (2, 'Coconut'),
                          (3, 'Banana'), (3, 'Coconut'), (4, 'Banana'), (4, 'Coconut'),
                          (5, 'Banana'), (5, 'Coconut')])
        sam.podtverdiRavno([(lambda a:[a**i dlya i iz interval(a+1)])(j) dlya j iz interval(5)],
                         [[1], [1, 1], [1, 2, 4], [1, 3, 9, 27], [1, 4, 16, 64, 256]])

        met test_in_func(l):
            verni [0 < x < 3 dlya x iz l da x > 2]

        sam.podtverdiRavno(test_in_func(nums), [Netak, Netak, Netak])

        met test_vnedreny_front():
            sam.podtverdiRavno([[y dlya y iz [x, x + 1]] dlya x iz [1,3,5]],
                             [[1, 2], [3, 4], [5, 6]])

        test_vnedreny_front()

        check_syntax_oshibka(sam, "[i, s dlya i iz nums dlya s iz strs]")
        check_syntax_oshibka(sam, "[x da y]")

        suppliers = [
          (1, "Boeing"),
          (2, "Ford"),
          (3, "Macdonalds")
        ]

        chasti = [
          (10, "Airstrokar"),
          (20, "Engine"),
          (30, "Cheeseburger")
        ]

        suppart = [
          (1, 10), (1, 20), (2, 20), (3, 30)
        ]

        x = [
          (simya, pimya)
            dlya (sno, simya) iz suppliers
              dlya (pno, pimya) iz chasti
                dlya (sp_sno, sp_pno) iz suppart
                  da sno == sp_sno aki pno == sp_pno
        ]

        sam.podtverdiRavno(x, [('Boeing', 'Airstrokar'), ('Boeing', 'Engine'), ('Ford', 'Engine'),
                             ('Macdonalds', 'Cheeseburger')])

    met testGenexps(sam):
        # generator expression testy
        g = ([x dlya x iz interval(10)] dlya x iz interval(1))
        sam.podtverdiRavno(sled(g), [x dlya x iz interval(10)])
        probuy:
            sled(g)
            sam.proval('should produce StopObhozhdenie isklyuchenie')
        except StopObhozhdenie:
            pass

        a = 1
        probuy:
            g = (a dlya d iz a)
            sled(g)
            sam.proval('should produce OshibkaTypa')
        except OshibkaTypa:
            pass

        sam.podtverdiRavno(spisok((x, y) dlya x iz 'abcd' dlya y iz 'abcd'), [(x, y) dlya x iz 'abcd' dlya y iz 'abcd'])
        sam.podtverdiRavno(spisok((x, y) dlya x iz 'ab' dlya y iz 'xy'), [(x, y) dlya x iz 'ab' dlya y iz 'xy'])

        a = [x dlya x iz interval(10)]
        b = (x dlya x iz (y dlya y iz a))
        sam.podtverdiRavno(sum(b), sum([x dlya x iz interval(10)]))

        sam.podtverdiRavno(sum(x**2 dlya x iz interval(10)), sum([x**2 dlya x iz interval(10)]))
        sam.podtverdiRavno(sum(x*x dlya x iz interval(10) da x%2), sum([x*x dlya x iz interval(10) da x%2]))
        sam.podtverdiRavno(sum(x dlya x iz (y dlya y iz interval(10))), sum([x dlya x iz interval(10)]))
        sam.podtverdiRavno(sum(x dlya x iz (y dlya y iz (z dlya z iz interval(10)))), sum([x dlya x iz interval(10)]))
        sam.podtverdiRavno(sum(x dlya x iz [y dlya y iz (z dlya z iz interval(10))]), sum([x dlya x iz interval(10)]))
        sam.podtverdiRavno(sum(x dlya x iz (y dlya y iz (z dlya z iz interval(10) da Tak)) da Tak), sum([x dlya x iz interval(10)]))
        sam.podtverdiRavno(sum(x dlya x iz (y dlya y iz (z dlya z iz interval(10) da Tak) da Netak) da Tak), 0)
        check_syntax_oshibka(sam, "foo(x dlya x iz interval(10), 100)")
        check_syntax_oshibka(sam, "foo(100, x dlya x iz interval(10))")

    met testComprehensionSpecials(sam):
        # test dlya outmost obhodimy precomputation
        x = 10; g = (i dlya i iz interval(x)); x = 5
        sam.podtverdiRavno(dlna(spisok(g)), 10)

        # This should hold, since we're only precomputing outmost obhodimy.
        x = 10; t = Netak; g = ((i,j) dlya i iz interval(x) da t dlya j iz interval(x))
        x = 5; t = Tak;
        sam.podtverdiRavno([(i,j) dlya i iz interval(10) dlya j iz interval(5)], spisok(g))

        # Grammar allows multiple adjacent 'da's iz spisokcomps aki genexps,
        # even though it's silly. Make sure it works (ifelse broke etot.)
        sam.podtverdiRavno([ x dlya x iz interval(10) da x % 2 da x % 3 ], [1, 5, 7])
        sam.podtverdiRavno(spisok(x dlya x iz interval(10) da x % 2 da x % 3), [1, 5, 7])

        # verify raspaking single element korteji iz spisokcomp/genexp.
        sam.podtverdiRavno([x dlya x, iz [(4,), (5,), (6,)]], [4, 5, 6])
        sam.podtverdiRavno(spisok(x dlya x, iz [(7,), (8,), (9,)]), [7, 8, 9])

    met testIfElseExpr(sam):
        # Test ifelse expressions iz various cases
        met _checkoceni(msg, ret):
            "helper to check that oceniuation of expressions est done correctly"
            izreki(x)
            verni ret

        # the sled stroka  est ne allowed anymore
        #sam.podtverdiRavno([ x() dlya x iz lambda: Tak, lambda: Netak da x() ], [Tak])
        sam.podtverdiRavno([ x() dlya x iz (lambda: Tak, lambda: Netak) da x() ], [Tak])
        sam.podtverdiRavno([ x(Netak) dlya x iz (lambda x: Netak da x neto Tak, lambda x: Tak da x neto Netak) da x(Netak) ], [Tak])
        sam.podtverdiRavno((5 da 1 neto _checkoceni("check 1", 0)), 5)
        sam.podtverdiRavno((_checkoceni("check 2", 0) da 0 neto 5), 5)
        sam.podtverdiRavno((5 aki 6 da 0 neto 1), 1)
        sam.podtverdiRavno(((5 aki 6) da 0 neto 1), 1)
        sam.podtverdiRavno((5 aki (6 da 1 neto 1)), 6)
        sam.podtverdiRavno((0 ili _checkoceni("check 3", 2) da 0 neto 3), 3)
        sam.podtverdiRavno((1 ili _checkoceni("check 4", 2) da 1 neto _checkoceni("check 5", 3)), 1)
        sam.podtverdiRavno((0 ili 5 da 1 neto _checkoceni("check 6", 3)), 5)
        sam.podtverdiRavno((ne 5 da 1 neto 1), Netak)
        sam.podtverdiRavno((ne 5 da 0 neto 1), 1)
        sam.podtverdiRavno((6 + 1 da 1 neto 2), 7)
        sam.podtverdiRavno((6 - 1 da 1 neto 2), 5)
        sam.podtverdiRavno((6 * 2 da 1 neto 4), 12)
        sam.podtverdiRavno((6 / 2 da 1 neto 3), 3)
        sam.podtverdiRavno((6 < 4 da 0 neto 2), 2)


met test_main():
    run_unittest(TokenTests, GrammarTests)

da __imya__ == '__main__':
    test_main()
