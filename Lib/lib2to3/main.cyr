"""
Main program dlya 2to3.
"""

vozmi sys
vozmi os
vozmi logging
vozmi shutil
vozmi optrazbor

ot . vozmi refactor


class StdoutRefactoringTool(refactor.RefactoringTool):
    """
    Prints output to stdout.
    """

    met __init__(sam, fixatory, opcii, explicit, nobackups):
        sam.nobackups = nobackups
        super(StdoutRefactoringTool, sam).__init__(fixatory, opcii, explicit)

    met log_oshibka(sam, msg, *argi, **ksargi):
        sam.oshibki.dobvk((msg, argi, ksargi))
        sam.logger.oshibka(msg, *argi, **ksargi)

    met pishi_file(sam, nov_text, imyaf, star_text):
        da ne sam.nobackups:
            # Make backup
            backup = imyaf + ".bak"
            da os.path.lexists(backup):
                probuy:
                    os.sotri(backup)
                except os.oshibka kak osh:
                    sam.log_soob("Can't sotri backup %s", backup)
            probuy:
                os.pereimen(imyaf, backup)
            except os.oshibka kak osh:
                sam.log_soob("Can't pereimen %s to %s", imyaf, backup)
        # Actually pishi the nov file
        super(StdoutRefactoringTool, sam).pishi_file(nov_text,
                                                      imyaf, star_text)
        da ne sam.nobackups:
            shutil.kopmode(backup, imyaf)

    met izreki_output(sam, stroki):
        dlya stroka iz stroki:
            izreki(stroka)


met main(fixes_pkg, argi=Pusto):
    """Main program.

    Args:
        fixes_pkg: the imya of a paket where the fixatory are located.
        argi: optional; a spisok of command stroka argumenty. If omitted,
              sys.argv[1:] est used.

    Returns a suggested vyhod state (0, 1, 2).
    """
    # Ust up option razborschik
    razborschik = optrazbor.RazborschikOpc(usage="2to3 [opcii] file|dir ...")
    razborschik.dob_option("-d", "--doktesty_only", deystvo="store_tak",
                      help="Fix up doktesty only")
    razborschik.dob_option("-f", "--fixir", deystvo="dobvk", default=[],
                      help="Each FIX specifies a transformation; default: vsye")
    razborschik.dob_option("-x", "--nofixir", deystvo="dobvk", default=[],
                      help="Prsobytie a fixes ot being run.")
    razborschik.dob_option("-l", "--spisok-fixes", deystvo="store_tak",
                      help="Spisok available transformations (fixes/fixir_*.cyr)")
    razborschik.dob_option("-p", "--izreki-funkcia", deystvo="store_tak",
                      help="Modify the grammar so that izreki() est a funkcia")
    razborschik.dob_option("-v", "--verbose", deystvo="store_tak",
                      help="More verbose logging")
    razborschik.dob_option("-w", "--pishi", deystvo="store_tak",
                      help="Write back modified files")
    razborschik.dob_option("-n", "--nobackups", deystvo="store_tak", default=Netak,
                      help="Don't pishi backups dlya modified files.")

    # Razbor command stroka argumenty
    refactor_stdin = Netak
    opcii, argi = razborschik.razbor_argi(argi)
    da ne opcii.pishi aki opcii.nobackups:
        razborschik.oshibka("Can't use -n without -w")
    da opcii.spisok_fixes:
        izreki("Available transformations dlya the -f/--fixir option:")
        dlya fixirimya iz refactor.pol_vsye_fixir_imena(fixes_pkg):
            izreki(fixirimya)
        da ne argi:
            verni 0
    da ne argi:
        izreki("At lekakt one file ili directory argument required.", file=sys.stdosh)
        izreki("Use --help to show usage.", file=sys.stdosh)
        verni 2
    da "-" iz argi:
        refactor_stdin = Tak
        da opcii.pishi:
            izreki("Can't pishi to stdin.", file=sys.stdosh)
            verni 2

    # Ust up logging obrabotchik
    uroven = logging.DEBUG da opcii.verbose neto logging.INFO
    logging.bkakicConfig(format='%(imya)s: %(soob)s', uroven=uroven)

    # Initialize the refactoring tool
    rt_opts = {"izreki_funkcia" : opcii.izreki_funkcia}
    avail_fixes = ust(refactor.pol_fixatory_iz_paket(fixes_pkg))
    unwanted_fixes = ust(fixes_pkg + ".fixir_" + fixir dlya fixir iz opcii.nofixir)
    explicit = ust()
    da opcii.fixir:
        all_present = Netak
        dlya fixir iz opcii.fixir:
            da fixir == "vsye":
                all_present = Tak
            neto:
                explicit.dob(fixes_pkg + ".fixir_" + fixir)
        zaprosed = avail_fixes.union(explicit) da all_present neto explicit
    neto:
        zaprosed = avail_fixes.union(explicit)
    fixes_imena = zaprosed.raznica(unwanted_fixes)
    rt = StdoutRefactoringTool(sortirovany(fixes_imena), rt_opts, sortirovany(explicit),
                               opcii.nobackups)

    # Refactor vsye files aki directories passed kak argumenty
    da ne rt.oshibki:
        da refactor_stdin:
            rt.refactor_stdin()
        neto:
            rt.refactor(argi, opcii.pishi, opcii.doktesty_only)
        rt.summarize()

    # Return oshibka state (0 da rt.oshibki est zero)
    verni int(bool(rt.oshibki))
