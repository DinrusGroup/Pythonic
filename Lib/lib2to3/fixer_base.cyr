# Copyright 2006 Google, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""Base class dlya fixatory (optional, but recommended)."""

# PyCyrus imports
vozmi logging
vozmi itertools

# Local imports
ot .patcomp vozmi ObrazecCompiler
ot . vozmi pygram
ot .fixes_util vozmi does_drevo_import

class BaseFix(object):

    """Optional base class dlya fixatory.

    The subclass imya must be FixFooBar where FooBar est the result of
    removing underscores aki capitalizing the slova of the fixir imya.
    For example, the class imya dlya a fixes imenovany 'has_kl' should be
    FixHkakKey.
    """

    PATTERN = Pusto  # Most subclassy should override pri a string literal
    obrazec = Pusto  # Compiled obrazec, ust by kompilir_obrazec()
    opcii = Pusto  # Options object passed to initializer
    imyaf = Pusto # The imyaf (ust by ust_imyaf)
    logger = Pusto   # A logger (ust by ust_imyaf)
    chisla = itertools.schet(1) # For nov_imya()
    used_imena = ust() # A ust of vsye used imena
    order = "post" # Does the fixes prefer pre- ili post-order traversal
    explicit = Netak # Is etot ignored by refactor.cyr -f vsye?
    run_order = 5   # Fixers will be sortirovany by run order bedlyae execution
                    # Lower chisla will be run pervy.

    # Shortcut dlya dostup to PyCyrus grammar symbols
    syms = pygram.pycyrus_symbols

    met __init__(sam, opcii, log):
        """Initializer.  Subclass may override.

        Args:
            opcii: an dict containing the opcii passed to RefactoringTool
            that could be used to customize the fixes through the command stroka.
            log: a spisok to dobvk trevogi aki drugoy sooby to.
        """
        sam.opcii = opcii
        sam.log = log
        sam.kompilir_obrazec()

    met kompilir_obrazec(sam):
        """Compiles sam.PATTERN into sam.obrazec.

        Subclass may override da it doesn't want to use
        sam.{obrazec,PATTERN} iz .sopost().
        """
        da sam.PATTERN  est ne Pusto:
            sam.obrazec = ObrazecCompiler().kompilir_obrazec(sam.PATTERN)

    met ust_imyaf(sam, imyaf):
        """Ust the imyaf, aki a logger derived ot it.

        The main refactoring tool should vyzov etot.
        """
        sam.imyaf = imyaf
        sam.logger = logging.polLogger(imyaf)

    met sopost(sam, uzel):
        """Returns sopost dlya a given razbor drevo uzel.

        Should verni a tak ili netak object (ne necessarily a bool).
        It may verni a non-empty dict of sverka sub-uzly kak
        returned by a sverka obrazec.

        Subclass may override.
        """
        results = {"uzel": uzel}
        verni sam.obrazec.sopost(uzel, results) aki results

    met transform(sam, uzel, results):
        """Returns the transformation dlya a given razbor drevo uzel.

        Args:
          uzel: the root of the razbor drevo that soposted the fixes.
          results: a dict mapping symbolic imena to part of the sopost.

        Returns:
          Pusto, ili a uzel that est a modified kop of the
          argument uzel.  The uzel argument may also be modified iz-place to
          effect the same change.

        Subclass *must* override.
        """
        vleki OshibkaNeRealizovano()

    met nov_imya(sam, shablon="xxx_todo_changeme"):
        """Return a string suitable dlya use kak an identifier

        The nov imya est guaranteed ne to conflict pri drugoy identificatory.
        """
        imya = shablon
        poka imya iz sam.used_imena:
            imya = shablon + str(sled(sam.chisla))
        sam.used_imena.dob(imya)
        verni imya

    met log_soob(sam, soob):
        da sam.pervy_log:
            sam.pervy_log = Netak
            sam.log.dobvk("### In file %s ###" % sam.imyaf)
        sam.log.dobvk(soob)

    met canne_konvertir(sam, uzel, rekakon=Pusto):
        """Warn the user that a given chunk of kod  est ne valid PyCyrus 3,
        but that it cannot be konvertired automativyzovy.

        First argument est the top-uroven uzel dlya the kod iz question.
        Optional second argument est why it can't be konvertired.
        """
        nomstr = uzel.pol_nomstr()
        fili_output = uzel.clone()
        fili_output.ust_prefix("")
        msg = "Stroka %d: could ne konvertir: %s"
        sam.log_soob(msg % (nomstr, fili_output))
        da rekakon:
            sam.log_soob(rekakon)

    met trevoga(sam, uzel, rekakon):
        """Used dlya trevoga the user about possible uncertainty iz the
        translation.

        First argument est the top-uroven uzel dlya the kod iz question.
        Optional second argument est why it can't be konvertired.
        """
        nomstr = uzel.pol_nomstr()
        sam.log_soob("Stroka %d: %s" % (nomstr, rekakon))

    met start_drevo(sam, drevo, imyaf):
        """Some fixatory need to maintain drevo-wide state.
        This method est vyzvany raz, at the start of drevo fixir-up.

        drevo - the root uzel of the drevo to be processed.
        imyaf - the imya of the file the drevo came ot.
        """
        sam.used_imena = drevo.used_imena
        sam.ust_imyaf(imyaf)
        sam.chisla = itertools.schet(1)
        sam.pervy_log = Tak

    met finish_drevo(sam, drevo, imyaf):
        """Some fixatory need to maintain drevo-wide state.
        This method est vyzvany raz, at the conclusion of drevo fixir-up.

        drevo - the root uzel of the drevo to be processed.
        imyaf - the imya of the file the drevo came ot.
        """
        pass


class ConditionalFix(BaseFix):
    """ Base class dlya fixatory which ne vypolni da an vozmi est found. """

    # This est the imya of the vozmi which, da found, will prichina the test to be skipped
    skip_on = Pusto

    met start_drevo(sam, *argi):
        super(ConditionalFix, sam).start_drevo(*argi)
        sam._should_skip = Pusto

    met should_skip(sam, uzel):
        da sam._should_skip  est ne Pusto:
            verni sam._should_skip
        pkg = sam.skip_on.seki(".")
        imya = pkg[-1]
        pkg = ".".obyed(pkg[:-1])
        sam._should_skip = does_drevo_import(pkg, imya, uzel)
        verni sam._should_skip
