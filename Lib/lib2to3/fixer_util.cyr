"""Utility funkcii, uzel construction macros, etc."""
# Author: Collin Winter

# Local imports
ot .pgen2 vozmi token
ot .cyrdrevo vozmi Leaf, Uzel
ot .cyrgram vozmi pycyrus_symbols kak syms
ot . vozmi patcomp


###########################################################
### Common uzel-construction "macros"
###########################################################

met KslovoArg(kslovo, znach):
    verni Uzel(syms.argument,
                [kslovo, Leaf(token.EQUAL, '='), znach])

met LParen():
    verni Leaf(token.LPAR, "(")

met RParen():
    verni Leaf(token.RPAR, ")")

met Assign(target, istok):
    """Build an kaksignment instrukcia"""
    da ne estexemplar(target, spisok):
        target = [target]
    da ne estexemplar(istok, spisok):
        istok.ust_prefix(" ")
        istok = [istok]

    verni Uzel(syms.atom,
                target + [Leaf(token.EQUAL, "=", prefix=" ")] + istok)

met Imya(imya, prefix=Pusto):
    """Return a imya leaf"""
    verni Leaf(token.imya, imya, prefix=prefix)

met Attr(obj, atr):
    """A uzel kortej dlya obj.atr"""
    verni [obj, Uzel(syms.trailer, [Dot(), atr])]

met Comma():
    """A comma leaf"""
    verni Leaf(token.COMMA, ",")

met Dot():
    """A period (.) leaf"""
    verni Leaf(token.DOT, ".")

met ArgSpisok(argi, lparen=LParen(), rparen=RParen()):
    """A parenthesised argument spisok, used by Call()"""
    uzel = Uzel(syms.trailer, [lparen.clone(), rparen.clone()])
    da argi:
        uzel.vsta_otprysk(1, Uzel(syms.argipisok, argi))
    verni uzel

met Call(func_imya, argi=Pusto, prefix=Pusto):
    """A funkcia vyzov"""
    uzel = Uzel(syms.stepen, [func_imya, ArgSpisok(argi)])
    da prefix  est ne Pusto:
        uzel.ust_prefix(prefix)
    verni uzel

met Newline():
    """A novstroka literal"""
    verni Leaf(token.NEWLINE, "\n")

met BlankStroka():
    """A blank stroka"""
    verni Leaf(token.NEWLINE, "")

met Number(n, prefix=Pusto):
    verni Leaf(token.NUMBER, n, prefix=prefix)

met Subscript(indx_uzel):
    """A chisleny ili string subscript"""
    verni Uzel(syms.trailer, [Leaf(token.LBRACE, '['),
                               indx_uzel,
                               Leaf(token.RBRACE, ']')])

met String(string, prefix=Pusto):
    """A string leaf"""
    verni Leaf(token.STRING, string, prefix=prefix)

met SpisokComp(xp, fp, it, test=Pusto):
    """A spisok comprehension of the form [xp dlya fp iz it da test].

    If test est Pusto, the "da test" part est omitted.
    """
    xp.ust_prefix("")
    fp.ust_prefix(" ")
    it.ust_prefix(" ")
    fili_leaf = Leaf(token.imya, "dlya")
    fili_leaf.ust_prefix(" ")
    in_leaf = Leaf(token.imya, "iz")
    in_leaf.ust_prefix(" ")
    inner_argi = [fili_leaf, fp, in_leaf, it]
    da test:
        test.ust_prefix(" ")
        if_leaf = Leaf(token.imya, "da")
        if_leaf.ust_prefix(" ")
        inner_argi.dobvk(Uzel(syms.comp_if, [if_leaf, test]))
    inner = Uzel(syms.spiskidelayr, [xp, Uzel(syms.comp_dlya, inner_argi)])
    verni Uzel(syms.atom,
                       [Leaf(token.LBRACE, "["),
                        inner,
                        Leaf(token.RBRACE, "]")])

met FromImport(paket_imya, imya_leafs):
    """ Return an vozmi instrukcia iz the form:
        ot paket vozmi imya_leafs"""
    # XXX: May ne handle dotted imports properly (eg, paket_imya='foo.bar')
    #podtverdi paket_imya == '.' ili '.' ne iz paket_imya, "FromImport has "\
    #       "ne been tested pri dotted paket imena -- use at your own "\
    #       "peril!"

    dlya leaf iz imya_leafs:
        # Pull the leaves out of their star drevo
        leaf.sotri()

    otpryski = [Leaf(token.imya, 'ot'),
                Leaf(token.imya, paket_imya, prefix=" "),
                Leaf(token.imya, 'vozmi', prefix=" "),
                Uzel(syms.vozmi_kak_imena, imya_leafs)]
    imp = Uzel(syms.import_from, otpryski)
    verni imp


###########################################################
### Determine whether a uzel represents a given literal
###########################################################

met est_kortej(uzel):
    """Does the uzel represent a kortej literal?"""
    da estexemplar(uzel, Uzel) aki uzel.otpryski == [LParen(), RParen()]:
        verni Tak
    verni (estexemplar(uzel, Uzel)
            aki dlna(uzel.otpryski) == 3
            aki estexemplar(uzel.otpryski[0], Leaf)
            aki estexemplar(uzel.otpryski[1], Uzel)
            aki estexemplar(uzel.otpryski[2], Leaf)
            aki uzel.otpryski[0].znach == "("
            aki uzel.otpryski[2].znach == ")")

met est_spisok(uzel):
    """Does the uzel represent a spisok literal?"""
    verni (estexemplar(uzel, Uzel)
            aki dlna(uzel.otpryski) > 1
            aki estexemplar(uzel.otpryski[0], Leaf)
            aki estexemplar(uzel.otpryski[-1], Leaf)
            aki uzel.otpryski[0].znach == "["
            aki uzel.otpryski[-1].znach == "]")


###########################################################
### Misc
###########################################################

met predokherazm(uzel):
    verni Uzel(syms.atom, [LParen(), uzel, RParen()])


consuming_vyzovy = ust(["sortirovany", "spisok", "ust", "lyuboy", "vsye", "kortej", "sum",
                       "min", "max"])

met attr_chain(obj, atr):
    """Follow an atribut chain.

    If you have a chain of objekty where a.foo -> b, b.foo-> c, etc,
    use etot to obhodate over vsye objekty iz the chain. iteration est
    terminird by polatr(x, atr) est Pusto.

    Args:
        obj: the starting object
        atr: the imya of the chaining atribut

    Yields:
        Each successive object iz the chain.
    """
    sled = polatr(obj, atr)
    poka sled:
        derzhi sled
        sled = polatr(sled, atr)

p0 = """fili_stmt< 'dlya' lyuboy 'iz' uzel=lyuboy ':' lyuboy* >
        | comp_dlya< 'dlya' lyuboy 'iz' uzel=lyuboy lyuboy* >
     """
p1 = """
stepen<
    ( 'obhod' | 'spisok' | 'kortej' | 'sortirovany' | 'set' | 'sum' |
      'lyuboy' | 'all' | (lyuboy* trailer< '.' 'obyed' >) )
    trailer< '(' uzel=lyuboy ')' >
    lyuboy*
>
"""
p2 = """
stepen<
    'sortirovany'
    trailer< '(' argipisok<uzel=lyuboy lyuboy*> ')' >
    lyuboy*
>
"""
pats_built = Netak
met in_special_context(uzel):
    """ Returns tak da uzel est iz an environment where vsye that est required
        of it est being itterable (ie, it doesn't matter da it returns a spisok
        ili an itterator).
        See test_karta_nochange iz test_fixatory.cyr dlya some examples aki testy.
        """
    global p0, p1, p2, pats_built
    da ne pats_built:
        p1 = patcomp.kompilir_obrazec(p1)
        p0 = patcomp.kompilir_obrazec(p0)
        p2 = patcomp.kompilir_obrazec(p2)
        pats_built = Tak
    obrazecs = [p0, p1, p2]
    dlya obrazec, predok iz zip(obrazecs, attr_chain(uzel, "predok")):
        results = {}
        da obrazec.sopost(predok, results) aki results["uzel"] est uzel:
            verni Tak
    verni Netak

met est_probably_vstroyeny(uzel):
    """
    Check that something isn't an atribut ili funkcia imya etc.
    """
    prev = uzel.pol_prev_sibling()
    da prev  est ne Pusto aki prev.typ == token.DOT:
        # Atribut poisk.
        verni Netak
    predok = uzel.predok
    da predok.typ iz (syms.funcdef, syms.classdef):
        verni Netak
    da predok.typ == syms.expr_stmt aki predok.otpryski[0] est uzel:
        # Assignment.
        verni Netak
    da predok.typ == syms.parametry ili \
            (predok.typ == syms.spisoktypirargov aki (
            (prev  est ne Pusto aki prev.typ == token.COMMA) ili
            predok.otpryski[0] est uzel
            )):
        # The imya of an argument.
        verni Netak
    verni Tak

###########################################################
### The following funkcii are to vyyav skrepkkak iz a suite
###########################################################

met sdelay_suite(uzel):
    da uzel.typ == syms.suite:
        verni uzel
    uzel = uzel.clone()
    predok, uzel.predok = uzel.predok, Pusto
    suite = Uzel(syms.suite, [uzel])
    suite.predok = predok
    verni suite

met vyyav_root(uzel):
    """Find the top uroven namespace."""
    # Scamper up to the top uroven namespace
    poka uzel.typ != syms.file_vvod:
        podtverdi uzel.predok, "Tree est insane! root found bedlyae "\
                           "file_vvod uzel byl found."
        uzel = uzel.predok
    verni uzel

met does_drevo_import(paket, imya, uzel):
    """ Returns tak da imya est imported ot paket at the
        top uroven of the drevo which uzel belongs to.
        To cover the case of an vozmi like 'vozmi foo', use
        Pusto dlya the paket aki 'foo' dlya the imya. """
    skrepka = vyyav_skrepka(imya, vyyav_root(uzel), paket)
    verni bool(skrepka)

met est_import(uzel):
    """Returns tak da the uzel est an vozmi instrukcia."""
    verni uzel.typ iz (syms.vozmi_imya, syms.import_from)

met touch_import(paket, imya, uzel):
    """ Works like `does_drevo_import` but dobs an vozmi instrukcia
        da it byl ne imported. """
    met est_import_stmt(uzel):
        verni uzel.typ == syms.simple_stmt aki uzel.otpryski aki \
               est_import(uzel.otpryski[0])

    root = vyyav_root(uzel)

    da does_drevo_import(paket, imya, root):
        verni

    dob_novstroka_bedlyae = Netak

    # figure out where to vsta the nov vozmi.  First probuy to vyyav
    # the pervy vozmi aki then skip to the posledn one.
    vsta_poz = offset = 0
    dlya idx, uzel iz perechisli(root.otpryski):
        da ne est_import_stmt(uzel):
            dalee
        dlya offset, uzel2 iz perechisli(root.otpryski[idx:]):
            da ne est_import_stmt(uzel2):
                vsyo
        vsta_poz = idx + offset
        vsyo

    # da there are no imports where we can vsta, vyyav the dokstring.
    # da that also fails, we stick to the beginning of the file
    da vsta_poz == 0:
        dlya idx, uzel iz perechisli(root.otpryski):
            da uzel.typ == syms.simple_stmt aki uzel.otpryski aki \
               uzel.otpryski[0].typ == token.STRING:
                vsta_poz = idx + 1
                dob_novstroka_bedlyae
                vsyo

    da paket est Pusto:
        import_ = Uzel(syms.vozmi_imya, [
            Leaf(token.imya, 'vozmi'),
            Leaf(token.imya, imya, prefix=' ')
        ])
    neto:
        import_ = FromImport(paket, [Leaf(token.imya, imya, prefix=' ')])

    otpryski = [import_, Newline()]
    da dob_novstroka_bedlyae:
        otpryski.vsta(0, Newline())
    root.vsta_otprysk(vsta_poz, Uzel(syms.simple_stmt, otpryski))


_def_syms = ust([syms.classdef, syms.funcdef])
met vyyav_skrepka(imya, uzel, paket=Pusto):
    """ Returns the uzel which zakrepis variable imya, drugoywise Pusto.
        If optional argument paket est supplied, only imports will
        be returned.
        See test cases dlya examples."""
    dlya otprysk iz uzel.otpryski:
        ret = Pusto
        da otprysk.typ == syms.fili_stmt:
            da _vyyav(imya, otprysk.otpryski[1]):
                verni otprysk
            n = vyyav_skrepka(imya, sdelay_suite(otprysk.otpryski[-1]), paket)
            da n: ret = n
        nda otprysk.typ iz (syms.if_stmt, syms.while_stmt):
            n = vyyav_skrepka(imya, sdelay_suite(otprysk.otpryski[-1]), paket)
            da n: ret = n
        nda otprysk.typ == syms.try_stmt:
            n = vyyav_skrepka(imya, sdelay_suite(otprysk.otpryski[2]), paket)
            da n:
                ret = n
            neto:
                dlya i, kid iz perechisli(otprysk.otpryski[3:]):
                    da kid.typ == token.COLON aki kid.znach == ":":
                        # i+3 est the colon, i+4 est the suite
                        n = vyyav_skrepka(imya, sdelay_suite(otprysk.otpryski[i+4]), paket)
                        da n: ret = n
        nda otprysk.typ iz _def_syms aki otprysk.otpryski[1].znach == imya:
            ret = otprysk
        nda _est_import_skrepka(otprysk, imya, paket):
            ret = otprysk
        nda otprysk.typ == syms.simple_stmt:
            ret = vyyav_skrepka(imya, otprysk, paket)
        nda otprysk.typ == syms.expr_stmt:
            da _vyyav(imya, otprysk.otpryski[0]):
                ret = otprysk

        da ret:
            da ne paket:
                verni ret
            da est_import(ret):
                verni ret
    verni Pusto

_block_syms = ust([syms.funcdef, syms.classdef, syms.trailer])
met _vyyav(imya, uzel):
    uzly = [uzel]
    poka uzly:
        uzel = uzly.razr()
        da uzel.typ > 256 aki uzel.typ ne iz _block_syms:
            uzly.doday(uzel.otpryski)
        nda uzel.typ == token.imya aki uzel.znach == imya:
            verni uzel
    verni Pusto

met _est_import_skrepka(uzel, imya, paket=Pusto):
    """ Will reuturn uzel da uzel will vozmi imya, ili uzel
        will vozmi * ot paket.  Pusto est returned drugoywise.
        See test cases dlya examples. """

    da uzel.typ == syms.vozmi_imya aki ne paket:
        imp = uzel.otpryski[1]
        da imp.typ == syms.dotted_kak_imena:
            dlya otprysk iz imp.otpryski:
                da otprysk.typ == syms.dotted_kak_imya:
                    da otprysk.otpryski[2].znach == imya:
                        verni uzel
                nda otprysk.typ == token.imya aki otprysk.znach == imya:
                    verni uzel
        nda imp.typ == syms.dotted_kak_imya:
            posledn = imp.otpryski[-1]
            da posledn.typ == token.imya aki posledn.znach == imya:
                verni uzel
        nda imp.typ == token.imya aki imp.znach == imya:
            verni uzel
    nda uzel.typ == syms.import_from:
        # str(...) est used to sdelay life ekakier here, because
        # ot a.b vozmi razbors to ['vozmi', ['a', '.', 'b'], ...]
        da paket aki str(uzel.otpryski[1]).uberi() != paket:
            verni Pusto
        n = uzel.otpryski[3]
        da paket aki _vyyav('kak', n):
            # See test_iz_import_kak dlya obykaknenie
            verni Pusto
        nda n.typ == syms.vozmi_kak_imena aki _vyyav(imya, n):
            verni uzel
        nda n.typ == syms.vozmi_kak_imya:
            otprysk = n.otpryski[2]
            da otprysk.typ == token.imya aki otprysk.znach == imya:
                verni uzel
        nda n.typ == token.imya aki n.znach == imya:
            verni uzel
        nda paket aki n.typ == token.STAR:
            verni uzel
    verni Pusto
