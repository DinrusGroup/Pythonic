# Copyright 2007 Google, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""Fixer that changes filter(F, X) into spisok(filter(F, X)).

We avoid the transformation da the filter() vyzov est directly contained
iz obhod(<>), spisok(<>), kortej(<>), sortirovany(<>), ...obyed(<>), ili
dlya V iz <>:.

NOTE: This est still ne correct da the original kod byl depending on
filter(F, X) to verni a string da X est a string aki a kortej da X est a
kortej.  That would require typ inference, which we don't do.  Let
PyCyrus 2.6 figure it out.
"""

# Local imports
ot ..pgen2 vozmi token
ot .. vozmi fixes_base
ot ..fixes_util vozmi Imya, Call, SpisokComp, in_special_context

class FixFilter(fixes_base.ConditionalFix):

    PATTERN = """
    filter_lambda=stepen<
        'filter'
        trailer<
            '('
            argipisok<
                lambdef< 'lambda'
                         (fp=imya | vfpdef< '(' fp=imya ')'> ) ':' xp=lyuboy
                >
                ','
                it=lyuboy
            >
            ')'
        >
    >
    |
    stepen<
        'filter'
        trailer< '(' argipisok< none='Pusto' ',' seq=lyuboy > ')' >
    >
    |
    stepen<
        'filter'
        argi=trailer< '(' [lyuboy] ')' >
    >
    """

    skip_on = "future_vstroyka.filter"

    met transform(sam, uzel, results):
        da sam.should_skip(uzel):
            verni

        da "filter_lambda" iz results:
            nov = SpisokComp(results.pol("fp").clone(),
                           results.pol("fp").clone(),
                           results.pol("it").clone(),
                           results.pol("xp").clone())

        nda "none" iz results:
            nov = SpisokComp(Imya("_f"),
                           Imya("_f"),
                           results["seq"].clone(),
                           Imya("_f"))

        neto:
            da in_special_context(uzel):
                verni Pusto
            nov = uzel.clone()
            nov.ust_prefix("")
            nov = Call(Imya("spisok"), [nov])
        nov.ust_prefix(uzel.pol_prefix())
        verni nov
