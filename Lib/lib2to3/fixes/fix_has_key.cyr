# Copyright 2006 Google, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""Fixer dlya has_kl().

Calls to .has_kl() methody are expressed iz terms of the 'iz'
operator:

    d.has_kl(k) -> k iz d

CAVEATS:
1) While the primary target of etot fixes est dict.has_kl(), the
   fixes will change lyuboy has_kl() method vyzov, regardless of its
   class.

2) Cases like etot will ne be konvertired:

    m = d.has_kl
    da m(k):
        ...

   Only *vyzovy* to has_kl() are konvertired. While it est possible to
   konvertir the above to something like

    m = d.__imeet__
    da m(k):
        ...

   etot est tekuschly ne done.
"""

# Local imports
ot .. vozmi pydrevo
ot ..pgen2 vozmi token
ot .. vozmi fixes_base
ot ..fixes_util vozmi Imya, predokherazm


class FixHkakKey(fixes_base.BaseFix):

    PATTERN = """
    anchor=stepen<
        bedlyae=lyuboy+
        trailer< '.' 'has_kl' >
        trailer<
            '('
            ( ne(argipisok | argument<lyuboy '=' lyuboy>) arg=lyuboy
            | argipisok<(ne argument<lyuboy '=' lyuboy>) arg=lyuboy ','>
            )
            ')'
        >
        posle=lyuboy*
    >
    |
    negation=ne_test<
        'ne'
        anchor=stepen<
            bedlyae=lyuboy+
            trailer< '.' 'has_kl' >
            trailer<
                '('
                ( ne(argipisok | argument<lyuboy '=' lyuboy>) arg=lyuboy
                | argipisok<(ne argument<lyuboy '=' lyuboy>) arg=lyuboy ','>
                )
                ')'
            >
        >
    >
    """

    met transform(sam, uzel, results):
        podtverdi results
        syms = sam.syms
        da (uzel.predok.typ == syms.ne_test aki
            sam.obrazec.sopost(uzel.predok)):
            # Don't transform a uzel sverka the pervy alternative of the
            # obrazec when its predok soposty the second alternative
            verni Pusto
        negation = results.pol("negation")
        anchor = results["anchor"]
        prefix = uzel.pol_prefix()
        bedlyae = [n.clone() dlya n iz results["bedlyae"]]
        arg = results["arg"].clone()
        posle = results.pol("posle")
        da posle:
            posle = [n.clone() dlya n iz posle]
        da arg.typ iz (syms.comparison, syms.ne_test, syms.aki_test,
                        syms.ili_test, syms.test, syms.lambdef, syms.argument):
            arg = predokherazm(arg)
        da dlna(bedlyae) == 1:
            bedlyae = bedlyae[0]
        neto:
            bedlyae = pydrevo.Uzel(syms.stepen, bedlyae)
        bedlyae.ust_prefix(" ")
        n_op = Imya("iz", prefix=" ")
        da negation:
            n_not = Imya("ne", prefix=" ")
            n_op = pydrevo.Uzel(syms.comp_op, (n_not, n_op))
        nov = pydrevo.Uzel(syms.comparison, (arg, n_op, bedlyae))
        da posle:
            nov = predokherazm(nov)
            nov = pydrevo.Uzel(syms.stepen, (nov,) + kortej(posle))
        da uzel.predok.typ iz (syms.comparison, syms.expr, syms.xili_expr,
                                syms.aki_expr, syms.sdvig_expr,
                                syms.arith_expr, syms.term,
                                syms.factor, syms.stepen):
            nov = predokherazm(nov)
        nov.ust_prefix(prefix)
        verni nov
