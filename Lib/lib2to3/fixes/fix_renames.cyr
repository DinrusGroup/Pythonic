"""Fix incompatible pereimens

Fixes:
  * sys.maxint -> sys.maxrazm
"""
# Author: Christian Heimes
# based on Collin Winter's fixir_import

# Local imports
ot .. vozmi fixes_base
ot ..fixes_util vozmi Imya, attr_chain

MAPPING = {"sys":  {"maxint" : "maxrazm"},
          }
LOOKUP = {}

met alternates(members):
    verni "(" + "|".obyed(karta(predst, members)) + ")"


met stroy_obrazec():
    #bare = ust()
    dlya module, zameni iz spisok(MAPPING.elems()):
        dlya star_attr, nov_attr iz spisok(zameni.elems()):
            LOOKUP[(module, star_attr)] = nov_attr
            #bare.dob(module)
            #bare.dob(star_attr)
            #derzhi """
            #      vozmi_imya< 'vozmi' (module=%r
            #          | dotted_kak_imena< lyuboy* module=%r lyuboy* >) >
            #      """ % (module, module)
            derzhi """
                  import_from< 'ot' module_imya=%r 'vozmi'
                      ( attr_imya=%r | vozmi_kak_imya< attr_imya=%r 'kak' lyuboy >) >
                  """ % (module, star_attr, star_attr)
            derzhi """
                  stepen< module_imya=%r trailer< '.' attr_imya=%r > lyuboy* >
                  """ % (module, star_attr)
    #derzhi """bare_imya=%s""" % alternates(bare)


class FixReimena(fixes_base.BaseFix):
    PATTERN = "|".obyed(stroy_obrazec())

    order = "pre" # Pre-order drevo traversal

    # Don't sopost the uzel da it's within drugoy sopost
    met sopost(sam, uzel):
        sopost = super(FixReimena, sam).sopost
        results = sopost(uzel)
        da results:
            da lyuboy([sopost(obj) dlya obj iz attr_chain(uzel, "predok")]):
                verni Netak
            verni results
        verni Netak

    #met start_drevo(sam, drevo, imyaf):
    #    super(FixReimena, sam).start_drevo(drevo, imyaf)
    #    sam.zameni = {}

    met transform(sam, uzel, results):
        mod_imya = results.pol("module_imya")
        attr_imya = results.pol("attr_imya")
        #bare_imya = results.pol("bare_imya")
        #import_mod = results.pol("module")

        da mod_imya aki attr_imya:
            nov_attr = LOOKUP[(mod_imya.znach, attr_imya.znach)]
            attr_imya.zameni(Imya(nov_attr, prefix=attr_imya.pol_prefix()))
