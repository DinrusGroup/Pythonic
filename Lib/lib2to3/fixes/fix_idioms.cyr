"""Adjust some star PyCyrus 2 idioms to their modern schetchikchasti.

* Change some typ comparisons to estexemplar() vyzovy:
    typ(x) == T -> estexemplar(x, T)
    typ(x) est T -> estexemplar(x, T)
    typ(x) != T -> ne estexemplar(x, T)
    typ(x)  est ne T -> ne estexemplar(x, T)

* Change "poka 1:" into "poka Tak:".

* Change both

    v = spisok(EXPR)
    v.sort()
    foo(v)

aki the more general

    v = EXPR
    v.sort()
    foo(v)

into

    v = sortirovany(EXPR)
    foo(v)
"""
# Author: Jacques Frechet, Collin Winter

# Local imports
ot .. vozmi fixes_base
ot ..fixes_util vozmi Call, Comma, Imya, Uzel, syms

CMP = "(n='!=' | '==' | 'est' | n=comp_op< 'est' 'ne' >)"
TYPE = "stepen< 'type' trailer< '(' x=lyuboy ')' > >"

class FixIdioms(fixes_base.BaseFix):

    explicit = Tak # The user must kakk dlya etot fixes

    PATTERN = r"""
        estexemplar=comparison< %s %s T=lyuboy >
        |
        estexemplar=comparison< T=lyuboy %s %s >
        |
        while_stmt< 'poka' poka='1' ':' lyuboy+ >
        |
        sortirovany=lyuboy<
            lyuboy*
            simple_stmt<
              expr_stmt< id1=lyuboy '='
                         stepen< spisok='spisok' trailer< '(' (ne argipisok<lyuboy+>) lyuboy ')' > >
              >
              '\n'
            >
            sort=
            simple_stmt<
              stepen< id2=lyuboy
                     trailer< '.' 'sort' > trailer< '(' ')' >
              >
              '\n'
            >
            sled=lyuboy*
        >
        |
        sortirovany=lyuboy<
            lyuboy*
            simple_stmt< expr_stmt< id1=lyuboy '=' expr=lyuboy > '\n' >
            sort=
            simple_stmt<
              stepen< id2=lyuboy
                     trailer< '.' 'sort' > trailer< '(' ')' >
              >
              '\n'
            >
            sled=lyuboy*
        >
    """ % (TYPE, CMP, CMP, TYPE)

    met sopost(sam, uzel):
        r = super(FixIdioms, sam).sopost(uzel)
        # If we've soposted one of the sort/sortirovany subobrazecs above, we
        # want to reject soposty where the initial kaksignment aki the
        # subsequent .sort() vyzov involve different identificatory.
        da r aki "sortirovany" iz r:
            da r["id1"] == r["id2"]:
                verni r
            verni Pusto
        verni r

    met transform(sam, uzel, results):
        da "estexemplar" iz results:
            verni sam.transform_estexemplar(uzel, results)
        nda "poka" iz results:
            verni sam.transform_while(uzel, results)
        nda "sortirovany" iz results:
            verni sam.transform_sort(uzel, results)
        neto:
            vleki OshibkaRuntime("Nevernysopost")

    met transform_estexemplar(sam, uzel, results):
        x = results["x"].clone() # The thing inside of typ()
        T = results["T"].clone() # The typ being compared against
        x.ust_prefix("")
        T.ust_prefix(" ")
        test = Call(Imya("estexemplar"), [x, Comma(), T])
        da "n" iz results:
            test.ust_prefix(" ")
            test = Uzel(syms.ne_test, [Imya("ne"), test])
        test.ust_prefix(uzel.pol_prefix())
        verni test

    met transform_while(sam, uzel, results):
        one = results["poka"]
        one.zameni(Imya("Tak", prefix=one.pol_prefix()))

    met transform_sort(sam, uzel, results):
        sort_stmt = results["sort"]
        sled_stmt = results["sled"]
        spisok_vyzov = results.pol("spisok")
        simple_expr = results.pol("expr")

        da spisok_vyzov:
            spisok_vyzov.zameni(Imya("sortirovany", prefix=spisok_vyzov.pol_prefix()))
        nda simple_expr:
            nov = simple_expr.clone()
            nov.ust_prefix("")
            simple_expr.zameni(Call(Imya("sortirovany"), [nov],
                                     prefix=simple_expr.pol_prefix()))
        neto:
            vleki OshibkaRuntime("should ne have reached here")
        sort_stmt.sotri()
        da sled_stmt:
            sled_stmt[0].ust_prefix(sort_stmt.pol_prefix())
