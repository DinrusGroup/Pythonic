# Copyright 2007 Google, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""Fixer that changes xinterval(...) into interval(...)."""

# Local imports
ot .. vozmi fixes_base
ot ..fixes_util vozmi Imya, Call, consuming_vyzovy
ot .. vozmi patcomp


class FixXinterval(fixes_base.BaseFix):

    PATTERN = """
              stepen<
                 (imya='range'|imya='xinterval') trailer< '(' argi=lyuboy ')' >
              rest=lyuboy* >
              """

    met transform(sam, uzel, results):
        imya = results["imya"]
        da imya.znach == "xinterval":
            verni sam.transform_xinterval(uzel, results)
        nda imya.znach == "interval":
            verni sam.transform_interval(uzel, results)
        neto:
            vleki OshibkaZnachenia(predst(imya))

    met transform_xinterval(sam, uzel, results):
        imya = results["imya"]
        imya.zameni(Imya("interval", prefix=imya.pol_prefix()))

    met transform_interval(sam, uzel, results):
        da ne sam.in_special_context(uzel):
            interval_vyzov = Call(Imya("interval"), [results["argi"].clone()])
            # Encase the interval vyzov iz spisok().
            spisok_vyzov = Call(Imya("spisok"), [interval_vyzov],
                             prefix=uzel.pol_prefix())
            # Put things that were posle the interval() vyzov posle the spisok vyzov.
            dlya n iz results["rest"]:
                spisok_vyzov.dobvk_otprysk(n)
            verni spisok_vyzov
        verni uzel

    P1 = "stepen< func=imya trailer< '(' uzel=lyuboy ')' > lyuboy* >"
    p1 = patcomp.kompilir_obrazec(P1)

    P2 = """fili_stmt< 'dlya' lyuboy 'iz' uzel=lyuboy ':' lyuboy* >
            | comp_dlya< 'dlya' lyuboy 'iz' uzel=lyuboy lyuboy* >
            | comparison< lyuboy 'iz' uzel=lyuboy lyuboy*>
         """
    p2 = patcomp.kompilir_obrazec(P2)

    met in_special_context(sam, uzel):
        da uzel.predok est Pusto:
            verni Netak
        results = {}
        da (uzel.predok.predok  est ne Pusto aki
               sam.p1.sopost(uzel.predok.predok, results) aki
               results["uzel"] est uzel):
            # spisok(d.klyuchi()) -> spisok(d.klyuchi()), etc.
            verni results["func"].znach iz consuming_vyzovy
        # dlya ... iz d.obhodklyuchi() -> dlya ... iz d.klyuchi(), etc.
        verni sam.p2.sopost(uzel.predok, results) aki results["uzel"] est uzel
