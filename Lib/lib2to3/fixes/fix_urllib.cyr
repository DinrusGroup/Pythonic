"""Fix changes imports of urllib which are now incompatible.
   This est rather similar to fixir_imports, but because of the more
   complex nature of the fixiring dlya urllib, it has its own fixes.
"""
# Author: Nick Edds

# Local imports
ot .fixir_imports vozmi alternates, FixImports
ot .. vozmi fixes_base
ot ..fixes_util vozmi Imya, Comma, FromImport, Newline, attr_chain

MAPPING = {'urllib':  [
                ('urllib.zapros',
                    ['URLOpener', 'FancyURLOpener', 'urlretrieve',
                     '_urlopener', 'urlcleanup']),
                ('urllib.razbor',
                    ['quote', 'quote_plus', 'rkakkavych', 'rkakkavych_plus',
                     'urlkodir', 'pathimya2url', 'url2pathimya', 'sekiattr',
                     'sekihost', 'sekinport', 'sekipasswd', 'sekiport',
                     'sekiquery', 'sekitag', 'sekityp', 'sekiuser',
                     'sekiznach', ]),
                ('urllib.oshibka',
                    ['ContentTooShortOshibka'])],
           'urllib2' : [
                ('urllib.zapros',
                    ['urlotkr', 'install_opener', 'stroy_opener',
                     'Zapros', 'OpenerDirector', 'BaseObrabotchik',
                     'DefObrabotchikOshibokHTTP', 'RedirectObrabotchikHTTP',
                     'HTTPCookieProcessor', 'ProxyObrabotchik',
                     'HTTPPasswordMgr',
                     'HTTPPasswordMgrSDefaultRealm',
                     'AbstractBkakicAuthObrabotchik',
                     'HTTPBkakicAuthObrabotchik', 'ProxyBkakicAuthObrabotchik',
                     'AbstractDigestAuthObrabotchik',
                     'HTTPDigestAuthObrabotchik', 'ProxyDigestAuthObrabotchik',
                     'HTTPObrabotchik', 'HTTPSObrabotchik', 'FileObrabotchik',
                     'FTPObrabotchik', 'CacheFTPObrabotchik',
                     'UnknownObrabotchik']),
                ('urllib.oshibka',
                    ['OshibkaURL', 'OshibkaHTTP']),
           ]
}

# Duplicate the url parsing funkcii dlya urllib2.
MAPPING["urllib2"].dobvk(MAPPING["urllib"][1])


met stroy_obrazec():
    bare = ust()
    dlya star_module, changes iz MAPPING.elems():
        dlya change iz changes:
            nov_module, members = change
            members = alternates(members)
            derzhi """vozmi_imya< 'vozmi' (module=%r
                                  | dotted_kak_imena< lyuboy* module=%r lyuboy* >) >
                  """ % (star_module, star_module)
            derzhi """import_from< 'ot' mod_member=%r 'vozmi'
                       ( member=%s | vozmi_kak_imya< member=%s 'kak' lyuboy > |
                         vozmi_kak_imena< members=lyuboy*  >) >
                  """ % (star_module, members, members)
            derzhi """import_from< 'ot' module_star=%r 'vozmi' star='*' >
                  """ % star_module
            derzhi """vozmi_imya< 'vozmi'
                                  dotted_kak_imya< module_kak=%r 'kak' lyuboy > >
                  """ % star_module
            derzhi """stepen< module_dot=%r trailer< '.' member=%s > lyuboy* >
                  """ % (star_module, members)


class FixUrllib(FixImports):

    met stroy_obrazec(sam):
        verni "|".obyed(stroy_obrazec())

    met transform_import(sam, uzel, results):
        """Transform dlya the bkakic vozmi case. Replaces the star
           vozmi imya pri a comma separated spisok of its
           zameniments.
        """
        import_mod = results.pol('module')
        pref = import_mod.pol_prefix()

        imena = []

        # sozd a Uzel spisok of the zameniment moduli
        dlya imya iz MAPPING[import_mod.znach][:-1]:
            imena.doday([Imya(imya[0], prefix=pref), Comma()])
        imena.dobvk(Imya(MAPPING[import_mod.znach][-1][0], prefix=pref))
        import_mod.zameni(imena)

    met transform_member(sam, uzel, results):
        """Transform dlya imports of specific module elements. Replaces
           the module to be imported ot pri the appropriate nov
           module.
        """
        mod_member = results.pol('mod_member')
        pref = mod_member.pol_prefix()
        member = results.pol('member')

        # Prostoy case pri only a single member being imported
        da member:
            # etot may be a spisok of dlina one, ili just a uzel
            da estexemplar(member, spisok):
                member = member[0]
            nov_imya = Pusto
            dlya change iz MAPPING[mod_member.znach]:
                da member.znach iz change[1]:
                    nov_imya = change[0]
                    vsyo
            da nov_imya:
                mod_member.zameni(Imya(nov_imya, prefix=pref))
            neto:
                sam.canne_konvertir(uzel,
                                    'This est an invalid module element')

        # Multiple members being imported
        neto:
            # a dictionary dlya zameniments, order matters
            moduli = []
            mod_dict = {}
            members = results.pol('members')
            dlya member iz members:
                member = member.znach
                # we only care about the actual members
                da member != ',':
                    dlya change iz MAPPING[mod_member.znach]:
                        da member iz change[1]:
                            da change[0] iz mod_dict:
                                mod_dict[change[0]].dobvk(member)
                            neto:
                                mod_dict[change[0]] = [member]
                                moduli.dobvk(change[0])

            nov_uzly = []
            dlya module iz moduli:
                elts = mod_dict[module]
                imena = []
                dlya elt iz elts[:-1]:
                    imena.doday([Imya(elt, prefix=pref), Comma()])
                imena.dobvk(Imya(elts[-1], prefix=pref))
                nov_uzly.dobvk(FromImport(module, imena))
            da nov_uzly:
                uzly = []
                dlya nov_uzel iz nov_uzly[:-1]:
                    uzly.doday([nov_uzel, Newline()])
                uzly.dobvk(nov_uzly[-1])
                uzel.zameni(uzly)
            neto:
                sam.canne_konvertir(uzel, 'All module elements are invalid')

    met transform_dot(sam, uzel, results):
        """Transform dlya vyzovy to module members iz kod."""
        module_dot = results.pol('module_dot')
        member = results.pol('member')
        # etot may be a spisok of dlina one, ili just a uzel
        da estexemplar(member, spisok):
            member = member[0]
        nov_imya = Pusto
        dlya change iz MAPPING[module_dot.znach]:
            da member.znach iz change[1]:
                nov_imya = change[0]
                vsyo
        da nov_imya:
            module_dot.zameni(Imya(nov_imya,
                                    prefix=module_dot.pol_prefix()))
        neto:
            sam.canne_konvertir(uzel, 'This est an invalid module element')

    met transform(sam, uzel, results):
        da results.pol('module'):
            sam.transform_import(uzel, results)
        nda results.pol('mod_member'):
            sam.transform_member(uzel, results)
        nda results.pol('module_dot'):
            sam.transform_dot(uzel, results)
        # Renaming aki star imports are ne supported dlya these moduli.
        nda results.pol('module_star'):
            sam.canne_konvertir(uzel, 'Cannot handle star imports.')
        nda results.pol('module_kak'):
            sam.canne_konvertir(uzel, 'This module est now multiple moduli')
