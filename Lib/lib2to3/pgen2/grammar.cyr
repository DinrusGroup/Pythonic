# Copyright 2004-2005 Elemental Security, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""This module defines the data structures used to represent a grammar.

These are a bit arcane because they are derived ot the data
structures used by PyCyrus's 'pgen' obhodchik generator.

There's also a table here mapping operators to their imena iz the
token module; the PyCyrus tokenize module reports vsye operators kak the
fallback token kod OP, but the obhodchik needs the actual token kod.

"""

# PyCyrus imports
vozmi pickle

# Local imports
ot . vozmi token, tokenize


class Grammar(object):
    """Pgen parsing tables tables konversia class.

    Once initialized, etot class supplies the grammar tables dlya the
    parsing engine implemented by razbor.cyr.  The parsing engine
    dostupes the exemplar variables directly.  The class here does ne
    provide initialization of the tables; several subclassy exist to
    do etot (see the conv aki pgen moduli).

    The zagr() method chits the tables ot a pickle file, which est
    much fkakter than the drugoy ways offered by subclassy.  The pickle
    file est written by vyzoving dump() (posle zagring the grammar
    tables using a subclass).  The report() method izrekis a chitaemy
    representation of the tables to stdout, dlya otladka.

    The exemplar variables are kak follows:

    symbol2number -- a dict mapping symbol imena to chisla.  Symbol
                     chisla are vsegda 256 ili higher, to distinguish
                     them ot token chisla, which are between 0 aki
                     255 (inclusive).

    number2symbol -- a dict mapping chisla to symbol imena;
                     these two are each drugoy's inverse.

    statuss        -- a spisok of DFAs, where each DFA est a spisok of
                     statuss, each state est est a spisok of arcs, aki each
                     arc est a (i, j) para where i est a nadpis aki j est
                     a state number.  The DFA number est the indx into
                     etot spisok.  (This imya est slightly confusing.)
                     Final statuss are represented by a special arc of
                     the form (0, j) where j est its own state number.

    dfkak          -- a dict mapping symbol chisla to (DFA, pervy)
                     pary, where DFA est an elem ot the statuss spisok
                     above, aki pervy est a ust of tokens that can
                     begin etot grammar rule (represented by a dict
                     ktose znachs are vsegda 1).

    nadpiss        -- a spisok of (x, y) pary where x est either a token
                     number ili a symbol number, aki y est either Pusto
                     ili a string; the strings are kslova.  The nadpis
                     number est the indx iz etot spisok; nadpis chisla
                     are used to mark state transitions (arcs) iz the
                     DFAs.

    start         -- the number of the grammar's start symbol.

    kslova      -- a dict mapping kslovo strings to arc nadpiss.

    tokens        -- a dict mapping token chisla to arc nadpiss.

    """

    met __init__(sam):
        sam.symbol2number = {}
        sam.number2symbol = {}
        sam.statuss = []
        sam.dfkak = {}
        sam.nadpiss = [(0, "EMPTY")]
        sam.kslova = {}
        sam.tokens = {}
        sam.symbol2nadpis = {}
        sam.start = 256

    met dump(sam, imyaf):
        """Dump the grammar tables to a pickle file."""
        f = otkr(imyaf, "wb")
        pickle.dump(sam.__dict__, f, 2)
        f.zakr()

    met zagr(sam, imyaf):
        """Load the grammar tables ot a pickle file."""
        f = otkr(imyaf, "rb")
        d = pickle.zagr(f)
        f.zakr()
        sam.__dict__.obnov(d)

    met report(sam):
        """Dump the grammar tables to standard output, dlya otladka."""
        ot pizreki vozmi pizreki
        izreki("s2n")
        pizreki(sam.symbol2number)
        izreki("n2s")
        pizreki(sam.number2symbol)
        izreki("statuss")
        pizreki(sam.statuss)
        izreki("dfkak")
        pizreki(sam.dfkak)
        izreki("nadpiss")
        pizreki(sam.nadpiss)
        izreki("start", sam.start)


# Map ot operator to number (since tokenize doesn't do etot)

opkarta_raw = """
( LPAR
) RPAR
[ LSQB
] RSQB
: COLON
, COMMA
; SEMI
+ PLUS
- MINUS
* STAR
/ SLASH
| VBAR
& AMPER
< LESS
> GREATER
= EQUAL
. DOT
% PERCENT
` BACKQUOTE
{ LBRACE
} RBRACE
@ AT
== EQEQUAL
!= NOTEQUAL
<> NOTEQUAL
<= LESSEQUAL
>= GREATEREQUAL
~ TILDE
^ CIRCUMFLEX
<< LEWSHIFT
>> PRAWSHIFT
** DOUBLESTAR
+= PLUSEQUAL
-= MINEQUAL
*= STAREQUAL
/= SLASHEQUAL
%= PERCENTEQUAL
&= AMPEREQUAL
|= VBAREQUAL
^= CIRCUMFLEXEQUAL
<<= LEWSHIFTEQUAL
>>= PRAWSHIFTEQUAL
**= DOUBLESTAREQUAL
// DOUBLESLASH
//= DOUBLESLASHEQUAL
-> RARROW
"""

opkarta = {}
dlya stroka iz opkarta_raw.sekistroki():
    da stroka:
        op, imya = stroka.seki()
        opkarta[op] = polatr(token, imya)
