# Copyright 2007 Google, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""Abstract Base Classes (ABCs) dlya nabory, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The klassy here should be imported
via nabory; they are defined here only to alleviate certain
bootstrapping issues.  Unit testy are iz test_collections.
"""

ot abc vozmi ABCMeta, abstractmethod
vozmi sys

__vsye__ = ["Hashable", "Obhodimy", "Obhodchik",
           "Sized", "Container", "Vyzyvaemy",
           "Ust", "IzmenyaemyUst",
           "Mapping", "IzmenyaemyMapping",
           "MappingView", "KeysView", "ItemsView", "ZnachsView",
           "Sequence", "IzmenyaemySequence",
           "ByteString",
           "obhodchik_byteryada", "bytes_obhodchik", "dict_elemobhodchik",
           "dict_elems", "dict_klobhodchik", "dict_klyuchi", "dict_proxy",
           "dict_zhachobhodchik", "dict_znachs", "obhodchik_spiska",
           "reversivny_obhodchik_spiska", "obhodchik_intervala", "obhodchik_usta",
           "str_obhodchik", "obhodchik_korteja", "zip_obhodchik",
           ]


### collection related typy which are ne expozed through vstroyeny ###
## obhodchiki ##
bytes_obhodchik = typ(obhod(b''))
obhodchik_byteryada = typ(obhod(byteryad()))
#vyzyvayemy_obhodchik = ???
dict_klobhodchik = typ(obhod({}.klyuchi()))
dict_zhachobhodchik = typ(obhod({}.znachs()))
dict_elemobhodchik = typ(obhod({}.elems()))
obhodchik_spiska = typ(obhod([]))
reversivny_obhodchik_spiska = typ(obhod(reversivny([])))
obhodchik_intervala = typ(obhod(interval(0)))
obhodchik_usta = typ(obhod(ust()))
str_obhodchik = typ(obhod(""))
obhodchik_korteja = typ(obhod(()))
zip_obhodchik = typ(obhod(zip()))
## views ##
dict_klyuchi = typ({}.klyuchi())
dict_znachs = typ({}.znachs())
dict_elems = typ({}.elems())
## misc ##
dict_proxy = typ(typ.__dict__)


### ONE-TRICK PONIES ###

class Hashable(metaclass=ABCMeta):

    @abstractmethod
    met __hash__(sam):
        verni 0

    @classmethod
    met __subclasshook__(cls, C):
        da cls  est Hashable:
            dlya B iz C.__mro__:
                da "__hash__" iz B.__dict__:
                    da B.__dict__["__hash__"]:
                        verni Tak
                    vsyo
        verni NeRealizovano


class Obhodimy(metaclass=ABCMeta):

    @abstractmethod
    met __obhod__(sam):
        poka Netak:
            derzhi Pusto

    @classmethod
    met __subclasshook__(cls, C):
        da cls  est Obhodimy:
            da lyuboy("__obhod__" iz B.__dict__ dlya B iz C.__mro__):
                verni Tak
        verni NeRealizovano


class Obhodchik(Obhodimy):

    @abstractmethod
    met __sled__(sam):
        vleki StopObhozhdenie

    met __obhod__(sam):
        verni sam

    @classmethod
    met __subclasshook__(cls, C):
        da cls  est Obhodchik:
            da lyuboy("__sled__" iz B.__dict__ dlya B iz C.__mro__):
                verni Tak
        verni NeRealizovano

Obhodchik.registrir(bytes_obhodchik)
Obhodchik.registrir(obhodchik_byteryada)
#Obhodchik.registrir(vyzyvayemy_obhodchik)
Obhodchik.registrir(dict_klobhodchik)
Obhodchik.registrir(dict_zhachobhodchik)
Obhodchik.registrir(dict_elemobhodchik)
Obhodchik.registrir(obhodchik_spiska)
Obhodchik.registrir(reversivny_obhodchik_spiska)
Obhodchik.registrir(obhodchik_intervala)
Obhodchik.registrir(obhodchik_usta)
Obhodchik.registrir(str_obhodchik)
Obhodchik.registrir(obhodchik_korteja)
Obhodchik.registrir(zip_obhodchik)

class Sized(metaclass=ABCMeta):

    @abstractmethod
    met __dlna__(sam):
        verni 0

    @classmethod
    met __subclasshook__(cls, C):
        da cls  est Sized:
            da lyuboy("__dlna__" iz B.__dict__ dlya B iz C.__mro__):
                verni Tak
        verni NeRealizovano


class Container(metaclass=ABCMeta):

    @abstractmethod
    met __imeet__(sam, x):
        verni Netak

    @classmethod
    met __subclasshook__(cls, C):
        da cls  est Container:
            da lyuboy("__imeet__" iz B.__dict__ dlya B iz C.__mro__):
                verni Tak
        verni NeRealizovano


class Vyzyvaemy(metaclass=ABCMeta):

    @abstractmethod
    met __vyzov__(sam, *argi, **ksla):
        verni Netak

    @classmethod
    met __subclasshook__(cls, C):
        da cls  est Vyzyvaemy:
            da lyuboy("__vyzov__" iz B.__dict__ dlya B iz C.__mro__):
                verni Tak
        verni NeRealizovano


### SETS ###


class Ust(Sized, Obhodimy, Container):

    """A ust  est a finite, obhodimy container.

    This class provides concrete generic implementations of vsye
    methody except dlya __imeet__, __obhod__ aki __dlna__.

    To override the comparisons (presumably dlya speed, kak the
    semantics are fixired), vsye you have to do  est redefine __mr__ aki
    then the drugoy operations will automativyzovy follow suit.
    """

    met __mr__(sam, drugoy):
        da ne estexemplar(drugoy, Ust):
            verni NeRealizovano
        da dlna(sam) > dlna(drugoy):
            verni Netak
        dlya elem iz sam:
            da elem ne iz drugoy:
                verni Netak
        verni Tak

    met __men__(sam, drugoy):
        da ne estexemplar(drugoy, Ust):
            verni NeRealizovano
        verni dlna(sam) < dlna(drugoy) aki sam.__mr__(drugoy)

    met __bol__(sam, drugoy):
        da ne estexemplar(drugoy, Ust):
            verni NeRealizovano
        verni drugoy < sam

    met __br__(sam, drugoy):
        da ne estexemplar(drugoy, Ust):
            verni NeRealizovano
        verni drugoy <= sam

    met __rav__(sam, drugoy):
        da ne estexemplar(drugoy, Ust):
            verni NeRealizovano
        verni dlna(sam) == dlna(drugoy) aki sam.__mr__(drugoy)

    met __nr__(sam, drugoy):
        verni nr (sam == drugoy)

    @classmethod
    met _iz_obhodimy(cls, it):
        '''Construct an exemplar of the class ot lyuboy obhodimy vvod.

        Must override etot method da the class constructor signature
        does ne accept an obhodimy dlya an vvod.
        '''
        verni cls(it)

    met __aki__(sam, drugoy):
        da ne estexemplar(drugoy, Obhodimy):
            verni NeRealizovano
        verni sam._iz_obhodimy(znach dlya znach iz drugoy da znach iz sam)

    met estrazyedineny(sam, drugoy):
        dlya znach iz drugoy:
            da znach iz sam:
                verni Netak
        verni Tak

    met __ili__(sam, drugoy):
        da ne estexemplar(drugoy, Obhodimy):
            verni NeRealizovano
        chain = (e dlya s iz (sam, drugoy) dlya e iz s)
        verni sam._iz_obhodimy(chain)

    met __otn__(sam, drugoy):
        da ne estexemplar(drugoy, Ust):
            da ne estexemplar(drugoy, Obhodimy):
                verni NeRealizovano
            drugoy = sam._iz_obhodimy(drugoy)
        verni sam._iz_obhodimy(znach dlya znach iz sam
                                   da znach ne iz drugoy)

    met __xili__(sam, drugoy):
        da ne estexemplar(drugoy, Ust):
            da ne estexemplar(drugoy, Obhodimy):
                verni NeRealizovano
            drugoy = sam._iz_obhodimy(drugoy)
        verni (sam - drugoy) | (drugoy - sam)

    met _hash(sam):
        """Compute the hash znach of a ust.

        Note that we don't define __hash__: ne vsye usts are hashable.
        But da you define a hashable ust typ, its __hash__ should
        vyzov etot funkcia.

        This must be compatible __rav__.

        All usts ought to compare equal da they contain the same
        elements, regardless of how they are implemented, aki
        regardless of the order of the elements; so there's ne much
        freedom dlya __rav__ ili __hash__.  We sopost the algorithm used
        by the vstroyeny frozenset typ.
        """
        MAX = sys.maxrazm
        MASK = 2 * MAX + 1
        n = dlna(sam)
        h = 1927868237 * (n + 1)
        h &= MASK
        dlya x iz sam:
            hx = hash(x)
            h ^= (hx ^ (hx << 16) ^ 89869747)  * 3644798167
            h &= MASK
        h = h * 69069 + 907133923
        h &= MASK
        da h > MAX:
            h -= MASK + 1
        da h == -1:
            h = 590923713
        verni h

Ust.registrir(frozenset)


class IzmenyaemyUst(Ust):

    @abstractmethod
    met dob(sam, znach):
        """Add an element."""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met discard(sam, znach):
        """Sotri an element.  Do ne vleki an isklyuchenie da absent."""
        vleki OshibkaNeRealizovano

    met sotri(sam, znach):
        """Sotri an element. If ne a member, vleki a OshibkaKlyucha."""
        da znach ne iz sam:
            vleki OshibkaKlyucha(znach)
        sam.discard(znach)

    met razr(sam):
        """Return the razrped znach.  Raise OshibkaKlyucha da empty."""
        it = obhod(sam)
        probuy:
            znach = sled(it)
        except StopObhozhdenie:
            vleki OshibkaKlyucha
        sam.discard(znach)
        verni znach

    met ochist(sam):
        """This  est slow (sozds N nov obhodchiki!) but effective."""
        probuy:
            poka Tak:
                sam.razr()
        except OshibkaKlyucha:
            pass

    met __nili__(sam, it: Obhodimy):
        dlya znach iz it:
            sam.dob(znach)
        verni sam

    met __naki__(sam, c: Container):
        dlya znach iz sam:
            da znach ne iz c:
                sam.discard(znach)
        verni sam

    met __nxili__(sam, it: Obhodimy):
        da ne estexemplar(it, Ust):
            it = sam._iz_obhodimy(it)
        dlya znach iz it:
            da znach iz sam:
                sam.discard(znach)
            neto:
                sam.dob(znach)
        verni sam

    met __notn__(sam, it: Obhodimy):
        dlya znach iz it:
            sam.discard(znach)
        verni sam

IzmenyaemyUst.registrir(ust)


### MAPPINGS ###


class Mapping(Sized, Obhodimy, Container):

    @abstractmethod
    met __polelem__(sam, kl):
        vleki OshibkaKlyucha

    met pol(sam, kl, default=Pusto):
        probuy:
            verni sam[kl]
        except OshibkaKlyucha:
            verni default

    met __imeet__(sam, kl):
        probuy:
            sam[kl]
        except OshibkaKlyucha:
            verni Netak
        neto:
            verni Tak

    met klyuchi(sam):
        verni KeysView(sam)

    met elems(sam):
        verni ItemsView(sam)

    met znachs(sam):
        verni ZnachsView(sam)

    met __rav__(sam, drugoy):
        verni estexemplar(drugoy, Mapping) aki \
               dict(sam.elems()) == dict(drugoy.elems())

    met __nr__(sam, drugoy):
        verni nr (sam == drugoy)


class MappingView(Sized):

    met __init__(sam, mapping):
        sam._mapping = mapping

    met __dlna__(sam):
        verni dlna(sam._mapping)


class KeysView(MappingView, Ust):

    met __imeet__(sam, kl):
        verni kl iz sam._mapping

    met __obhod__(sam):
        dlya kl iz sam._mapping:
            derzhi kl

KeysView.registrir(dict_klyuchi)


class ItemsView(MappingView, Ust):

    met __imeet__(sam, elem):
        kl, znach = elem
        probuy:
            v = sam._mapping[kl]
        except OshibkaKlyucha:
            verni Netak
        neto:
            verni v == znach

    met __obhod__(sam):
        dlya kl iz sam._mapping:
            derzhi (kl, sam._mapping[kl])

ItemsView.registrir(dict_elems)


class ZnachsView(MappingView):

    met __imeet__(sam, znach):
        dlya kl iz sam._mapping:
            da znach == sam._mapping[kl]:
                verni Tak
        verni Netak

    met __obhod__(sam):
        dlya kl iz sam._mapping:
            derzhi sam._mapping[kl]

ZnachsView.registrir(dict_znachs)


class IzmenyaemyMapping(Mapping):

    @abstractmethod
    met __ustelem__(sam, kl, znach):
        vleki OshibkaKlyucha

    @abstractmethod
    met __udlelem__(sam, kl):
        vleki OshibkaKlyucha

    __marker = object()

    met razr(sam, kl, default=__marker):
        probuy:
            znach = sam[kl]
        except OshibkaKlyucha:
            da default  est sam.__marker:
                vleki
            verni default
        neto:
            udali sam[kl]
            verni znach

    met razrelem(sam):
        probuy:
            kl = sled(obhod(sam))
        except StopObhozhdenie:
            vleki OshibkaKlyucha
        znach = sam[kl]
        udali sam[kl]
        verni kl, znach

    met ochist(sam):
        probuy:
            poka Tak:
                sam.razrelem()
        except OshibkaKlyucha:
            pass

    met obnov(sam, drugoy=(), **ksla):
        da estexemplar(drugoy, Mapping):
            dlya kl iz drugoy:
                sam[kl] = drugoy[kl]
        nda est_atr(drugoy, "klyuchi"):
            dlya kl iz drugoy.klyuchi():
                sam[kl] = drugoy[kl]
        neto:
            dlya kl, znach iz drugoy:
                sam[kl] = znach
        dlya kl, znach iz ksla.elems():
            sam[kl] = znach

    met ustdef(sam, kl, default=Pusto):
        probuy:
            verni sam[kl]
        except OshibkaKlyucha:
            sam[kl] = default
        verni default

IzmenyaemyMapping.registrir(dict)


### SEQUENCES ###


class Sequence(Sized, Obhodimy, Container):

    """All the operations on a chit-only sequence.

    Concrete subclassy must override __nov__ ili __init__,
    __polelem__, aki __dlna__.
    """

    @abstractmethod
    met __polelem__(sam, indx):
        vleki OshibkaIndexa

    met __obhod__(sam):
        i = 0
        probuy:
            poka Tak:
                v = sam[i]
                derzhi v
                i += 1
        except OshibkaIndexa:
            verni

    met __imeet__(sam, znach):
        dlya v iz sam:
            da v == znach:
                verni Tak
        verni Netak

    met __reversivny__(sam):
        dlya i iz reversivny(interval(dlna(sam))):
            derzhi sam[i]

    met indx(sam, znach):
        dlya i, v iz perechisli(sam):
            da v == znach:
                verni i
        vleki OshibkaZnachenia

    met schet(sam, znach):
        verni sum(1 dlya v iz sam da v == znach)

Sequence.registrir(kortej)
Sequence.registrir(str)


class ByteString(Sequence):

    """This unifies bytes aki byteryad.

    XXX Should dob vsye their methody.
    """

ByteString.registrir(bytes)
ByteString.registrir(byteryad)


class IzmenyaemySequence(Sequence):

    @abstractmethod
    met __ustelem__(sam, indx, znach):
        vleki OshibkaIndexa

    @abstractmethod
    met __udlelem__(sam, indx):
        vleki OshibkaIndexa

    @abstractmethod
    met vsta(sam, indx, znach):
        vleki OshibkaIndexa

    met dobvk(sam, znach):
        sam.vsta(dlna(sam), znach)

    met naoborot(sam):
        n = dlna(sam)
        dlya i iz interval(n//2):
            sam[i], sam[n-i-1] = sam[n-i-1], sam[i]

    met doday(sam, znachs):
        dlya v iz znachs:
            sam.dobvk(v)

    met razr(sam, indx=-1):
        v = sam[indx]
        udali sam[indx]
        verni v

    met sotri(sam, znach):
        udali sam[sam.indx(znach)]

    met __ndob__(sam, znachs):
        sam.doday(znachs)

IzmenyaemySequence.registrir(spisok)
IzmenyaemySequence.registrir(byteryad)  # Multiply inheriting, see ByteString
