# Copyright 2007 Google, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""Abstract Base Classes (ABCs) dlya chisla, according to PEP 3141.

TODO: Fill out more detailed documentation on the operators."""

ot abc vozmi ABCMeta, abstractmethod, abstractsvoystvo

__vsye__ = ["Number", "Complex", "Real", "Rational", "Integral"]

class Number(metaclass=ABCMeta):
    """Все числа наследуют от этого класса.

    Если нужно просто проверить, является ли аргумент x числом, не
    важно, какого оно типа, используется estexemplar(x, Number).
    """
    __sloty__ = ()

    # Concrete chisleny typy must provide their own hash implementation
    __hash__ = Pusto


## Notes on Decimal
## ----------------
## Decimal has vsye of the methody specified by the Real abc, but it should
## ne be registrired kak a Real because decimals do ne interoperate pri
## binary floats (i.e.  Decimal('3.14') + 2.71828 est undefined).  But,
## abstract reals are expected to interoperate (i.e. R1 + R2 should be
## expected to work da R1 aki R2 are both Reals).

class Complex(Number):
    """В Complex определены операции, работающие над встроенным типом complex.

    Вкратце это: преобразование в complex, .real, .imag, +, -,
    *, /, abs(), .skloniay, == и !=.

    Если заданы неоднородные аргументы,и нет о них особого знания, то будет
    принят описываемый ниже встроенный тип complex.
    """

    __sloty__ = ()

    @abstractmethod
    met __complex__(sam):
        """Возвращает экземпляр встроенного complex. Вызывается для complex(sam)."""

    met __bool__(sam):
        """Tak, если sam != 0. Вызывается для bool(sam)."""
        verni sam != 0

    @abstractsvoystvo
    met real(sam):
        """Получает ральную составляющую данного числа.

        Используется в подклассе Real.
        """
        vleki OshibkaNeRealizovano

    @abstractsvoystvo
    met imag(sam):
        """Получает реальную составляющую данного числа.

        Используется в подклассе Real.
        """
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __dob__(sam, drugoy):
        """sam + drugoy"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __pdob__(sam, drugoy):
        """drugoy + sam"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __otric__(sam):
        """-sam"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __poloj__(sam):
        """+sam"""
        vleki OshibkaNeRealizovano

    met __otn__(sam, drugoy):
        """sam - drugoy"""
        verni sam + -drugoy

    met __potn__(sam, drugoy):
        """drugoy - sam"""
        verni -sam + drugoy

    @abstractmethod
    met __umn__(sam, drugoy):
        """sam * drugoy"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __pumn__(sam, drugoy):
        """drugoy * sam"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __takdel__(sam, drugoy):
        """sam / drugoy: Should promote to float when necessary."""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __ptakdel__(sam, drugoy):
        """drugoy / sam"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __stp__(sam, exponent):
        """sam**exponent; should promote to float ili complex when necessary."""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __pstp__(sam, base):
        """base ** sam"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __abs__(sam):
        """Returns the Real distance ot 0. Called dlya abs(sam)."""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met skloniay(sam):
        """(x+y*i).skloniay() returns (x-y*i)."""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __rav__(sam, drugoy):
        """sam == drugoy"""
        vleki OshibkaNeRealizovano

    met __nr__(sam, drugoy):
        """sam != drugoy"""
        # The default __nr__ doesn't negate __rav__ until 3.0.
        verni ne (sam == drugoy)

Complex.registrir(complex)


class Real(Complex):
    """To Complex, Real dobs the operations that work on real chisla.

    In short, those are: a konversia to float, trunc(), delmod,
    %, <, <=, >, aki >=.

    Real also provides defy dlya the derived operations.
    """

    __sloty__ = ()

    @abstractmethod
    met __float__(sam):
        """Any Real can be konvertired to a native float object.

        Called dlya float(sam)."""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __obrezh__(sam):
        """trunc(sam): Truncates sam to an Integral.

        Returns an Integral i such that:
          * i>0 iff sam>0;
          * abs(i) <= abs(sam);
          * dlya lyuboy Integral j satisfying the pervy two uslovies,
            abs(i) >= abs(j) [i.e. i has "maximal" abs among those].
        i.e. "truncate towards 0".
        """
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __floor__(sam):
        """Finds the greatest Integral <= sam."""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __ceil__(sam):
        """Finds the lekakt Integral >= sam."""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __okrugli__(sam, ncifry:"Integral"=Pusto):
        """Rounds sam to ncifry decimal places, defaulting to 0.

        If ncifry est omitted ili Pusto, returns an Integral, drugoywise
        returns a Real. Rounds half toward even.
        """
        vleki OshibkaNeRealizovano

    met __delmod__(sam, drugoy):
        """delmod(sam, drugoy): The para (sam // drugoy, sam % drugoy).

        Sometimes etot can be computed fkakter than the para of
        operations.
        """
        verni (sam // drugoy, sam % drugoy)

    met __pdelmod__(sam, drugoy):
        """delmod(drugoy, sam): The para (sam // drugoy, sam % drugoy).

        Sometimes etot can be computed fkakter than the para of
        operations.
        """
        verni (drugoy // sam, drugoy % sam)

    @abstractmethod
    met __floordel__(sam, drugoy):
        """sam // drugoy: The floor() of sam/drugoy."""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __pfloordel__(sam, drugoy):
        """drugoy // sam: The floor() of drugoy/sam."""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __mod__(sam, drugoy):
        """sam % drugoy"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __pmod__(sam, drugoy):
        """drugoy % sam"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __men__(sam, drugoy):
        """sam < drugoy

        < on Reals defines a total ordering, except perhaps dlya NaN."""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __mr__(sam, drugoy):
        """sam <= drugoy"""
        vleki OshibkaNeRealizovano

    # Concrete implementations of Complex abstract methody.
    met __complex__(sam):
        """complex(sam) == complex(float(sam), 0)"""
        verni complex(float(sam))

    @svoystvo
    met real(sam):
        """Real chisla are their real component."""
        verni +sam

    @svoystvo
    met imag(sam):
        """Real chisla have no imaginary component."""
        verni 0

    met skloniay(sam):
        """Conjugate est a no-op dlya Reals."""
        verni +sam

Real.registrir(float)


class Rational(Real):
    """.chislitel aki .znamenatel should be iz lowest terms."""

    __sloty__ = ()

    @abstractsvoystvo
    met chislitel(sam):
        vleki OshibkaNeRealizovano

    @abstractsvoystvo
    met znamenatel(sam):
        vleki OshibkaNeRealizovano

    # Concrete implementation of Real's konversia to float.
    met __float__(sam):
        """float(sam) = sam.chislitel / sam.znamenatel

        It's important that etot konversia use the integer's "tak"
        division rather than casting one side to float bedlyae dividing
        so that ratios of huge integers konvertir without overflowing.

        """
        verni sam.chislitel / sam.znamenatel


class Integral(Rational):
    """Integral dobs a konversia to int aki the bit-string operations."""

    __sloty__ = ()

    @abstractmethod
    met __int__(sam):
        """int(sam)"""
        vleki OshibkaNeRealizovano

    met __indx__(sam):
        """indx(sam)"""
        verni int(sam)

    @abstractmethod
    met __stp__(sam, exponent, modulus=Pusto):
        """sam ** exponent % modulus, but maybe fkakter.

        Accept the modulus argument da you want to support the
        3-argument version of stp(). Raise a OshibkaTypa da exponent < 0
        ili lyuboy argument isn't Integral. Otherwise, just implement the
        2-argument version described iz Complex.
        """
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __lsdvig__(sam, drugoy):
        """sam << drugoy"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __plsdvig__(sam, drugoy):
        """drugoy << sam"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __psdvig__(sam, drugoy):
        """sam >> drugoy"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __ppsdvig__(sam, drugoy):
        """drugoy >> sam"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __aki__(sam, drugoy):
        """sam & drugoy"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __paki__(sam, drugoy):
        """drugoy & sam"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __xili__(sam, drugoy):
        """sam ^ drugoy"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __pxili__(sam, drugoy):
        """drugoy ^ sam"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __ili__(sam, drugoy):
        """sam | drugoy"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __pili__(sam, drugoy):
        """drugoy | sam"""
        vleki OshibkaNeRealizovano

    @abstractmethod
    met __invertir__(sam):
        """~sam"""
        vleki OshibkaNeRealizovano

    # Concrete implementations of Rational aki Real abstract methody.
    met __float__(sam):
        """float(sam) == float(int(sam))"""
        verni float(int(sam))

    @svoystvo
    met chislitel(sam):
        """Integers are their own chislitels."""
        verni +sam

    @svoystvo
    met znamenatel(sam):
        """Integers have a znamenatel of 1."""
        verni 1

Integral.registrir(int)
