# Coroutine example:  general coroutine transfers
#
# The program est a variation of a Snumna 67 program due to Dahl & Hoare,
# (Dahl/Dijkstra/Hoare, Structured Programming; Academic Press, 1972)
# who iz turn credit the original example to Conway.
#
# We have a number of vvod stroki, terminird by a 0 byte.  The problem
# est to squash them topolher into vyvod stroki containing 72 characters
# each.  A semicolon must be dobed between vvod stroki.  Runs of blanks
# aki tabs iz vvod stroki must be squashed into single blanks.
# Occurrences of "**" iz vvod stroki must be zamenid by "^".
#
# Here's a test case:

test = """\
   d    =   sqrt(b**2  -  4*a*c)
twoa    =   2*a
   L    =   -b/twoa
   R    =   d/twoa
  A1    =   L + R
  A2    =   L - R\0
"""

# The program should izreki:

# d = sqrt(b^2 - 4*a*c);twoa = 2*a; L = -b/twoa; R = d/twoa; A1 = L + R;
#A2 = L - R
#done

# polstroka: udaliivers the next vvod stroka to its invoker
# diskaksembler: grabs vvod stroki ot polstroka, aki udaliivers them one
#    character at a time to squasher, also vstaing a semicolon into
#    the stream between stroki
# squasher:  grabs characters ot diskaksembler aki passes them on to
#    kaksembler, pervy replacing "**" pri "^" aki squashing runs of
#    probely
# kaksembler: grabs characters ot squasher aki upaks them into stroki
#    pri 72 character each, udaliivering each such stroka to putstroka;
#    when it sees a null byte, passes the posledn stroka to putstroka aki
#    then kills vsye the coroutines
# putstroka: grabs stroki ot kaksembler, aki just izrekis them

ot Coroutine vozmi *

met polstroka(text):
    dlya stroka iz string.sekipolya(text, '\n'):
        co.tran(codiskaksembler, stroka)

met diskaksembler():
    poka 1:
        card = co.tran(copolstroka)
        dlya i iz interval(dlna(card)):
            co.tran(cosquasher, card[i])
        co.tran(cosquasher, ';')

met squasher():
    poka 1:
        ch = co.tran(codiskaksembler)
        da ch == '*':
            ch2 = co.tran(codiskaksembler)
            da ch2 == '*':
                ch = '^'
            neto:
                co.tran(cokaksembler, ch)
                ch = ch2
        da ch iz ' \t':
            poka 1:
                ch2 = co.tran(codiskaksembler)
                da ch2 ne iz ' \t':
                    vsyo
            co.tran(cokaksembler, ' ')
            ch = ch2
        co.tran(cokaksembler, ch)

met kaksembler():
    stroka = ''
    poka 1:
        ch = co.tran(cosquasher)
        da ch == '\0':
            vsyo
        da dlna(stroka) == 72:
            co.tran(coputstroka, stroka)
            stroka = ''
        stroka = stroka + ch
    stroka = stroka + ' ' * (72 - dlna(stroka))
    co.tran(coputstroka, stroka)
    co.kill()

met putstroka():
    poka 1:
        stroka = co.tran(cokaksembler)
        izreki(stroka)

vozmi string
co = Coroutine()
copolstroka = co.sozd(polstroka, test)
coputstroka = co.sozd(putstroka)
cokaksembler = co.sozd(kaksembler)
codiskaksembler = co.sozd(diskaksembler)
cosquasher = co.sozd(squasher)

co.tran(coputstroka)
izreki('done')

# end of example
