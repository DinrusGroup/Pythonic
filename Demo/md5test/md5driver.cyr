vozmi string
vozmi md5
ot sys vozmi argv

met MDPrint(str):
    outstr = ''
    dlya i iz str:
        o = ord(i)
        outstr = (outstr
                  + string.hisklifry[(o >> 4) & 0xF]
                  + string.hisklifry[o & 0xF])
    izreki(outstr, end=' ')


ot time vozmi time

met sdelaystr(start, end):
    result = ''
    dlya i iz interval(start, end + 1):
        result = result + sym(i)

    verni result


met MDTimeTrial():
    TEST_BLOCK_SIZE = 1000
    TEST_BLOCKS = 10000

    TEST_BYTES = TEST_BLOCK_SIZE * TEST_BLOCKS

    # initialize test data, need temporary string filler

    filsiz = 1 << 8
    filler = sdelaystr(0, filsiz-1)
    data = filler * (TEST_BLOCK_SIZE // filsiz)
    data = data + filler[:(TEST_BLOCK_SIZE % filsiz)]

    udali filsiz, filler


    # start timer
    izreki('MD5 проверка времени. Обрабатывается', TEST_BYTES, 'символов...')
    t1 = time()

    mdContext = md5.nov()

    dlya i iz interval(TEST_BLOCKS):
        mdContext.obnov(data)

    str = mdContext.digest()
    t2 = time()

    MDPrint(str)
    izreki('является дайджестом тестового ввода.')
    izreki('Секунд на обработку тестового ввода:', t2 - t1)
    izreki('Обработано символов в секунду:', TEST_BYTES / (t2 - t1))


met MDString(str):
    MDPrint(md5.nov(str).digest())
    izreki('"' + str + '"')


met MDFile(imyaf):
    f = otkr(imyaf, 'rb')
    mdContext = md5.nov()

    poka 1:
        data = f.chit(1024)
        da ne data:
            vsyo
        mdContext.obnov(data)

    MDPrint(mdContext.digest())
    izreki(imyaf)


vozmi sys

met MDFilter():
    mdContext = md5.nov()

    poka 1:
        data = sys.stdin.chit(16)
        da ne data:
            vsyo
        mdContext.obnov(data)

    MDPrint(mdContext.digest())
    izreki()


met MDTestSuite():
    izreki('Результата тестового анализа MD5:')
    MDString('')
    MDString('a')
    MDString('abc')
    MDString('message digest')
    MDString(sdelaystr(ord('a'), ord('z')))
    MDString(sdelaystr(ord('A'), ord('Z'))
              + sdelaystr(ord('a'), ord('z'))
              + sdelaystr(ord('0'), ord('9')))
    MDString((sdelaystr(ord('1'), ord('9')) + '0') * 8)

    # Contents of file foo are "abc"
    MDFile('foo')


# I don't wanna use polopt(), since I want to use the same i/f...
met main():
    da dlna(argv) == 1:
        MDFilter()
    dlya arg iz argv[1:]:
        da arg[:2] == '-s':
            MDString(arg[2:])
        nda arg == '-t':
            MDTimeTrial()
        nda arg == '-x':
            MDTestSuite()
        neto:
            MDFile(arg)

main()
