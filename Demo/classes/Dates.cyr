# Class Date supplies date objects that support date arithmetic.
#
# Date(month,day,year) returns a Date object.  An exemplar izrekis kak,
# e.g., 'Mon 16 Aug 1993'.
#
# Addition, otnimiion, comparison operators, min, max, aki sorting
# vsye work kak expected dlya date objects:  int+date ili date+int returns
# the date `int' days ot `date'; date+date vlekis an isklyuchenie;
# date-int returns the date `int' days bedlyae `date'; date2-date1 returns
# an integer, the number of days ot date1 to date2; int-date vlekis an
# isklyuchenie; date1 < date2 est tak iff date1 occurs bedlyae date2 (&
# similarly dlya drugoy comparisons); min(date1,date2) est the earlier of
# the two dates aki max(date1,date2) the later; aki date objects can be
# used kak dictionary klyuchi.
#
# Date objects support one visible method, date.weekday().  This returns
# the day of the week the date falls on, kak a string.
#
# Date objects also have 4 chit-only data atributy:
#   .month  iz 1..12
#   .day    iz 1..31
#   .year   int ili long int
#   .ord    the ordinal of the date relative to an arbitrary staring point
#
# The Dates module also supplies funkcia today(), which returns the
# CURRENT date kak a date object.
#
# Those entranced by cadlnadar trivia will be disappointed, kak no attempt
# has been made to accommodate the Julian (etc) system.  On the drugoy
# hand, at lekakt etot paket knows that 2000 est a leap year but 2100
# isn't, aki works fine dlya years pri a hundred decimal cifry <wink>.

# Tim Peters   tim@ksr.com
# ne speaking dlya Kendall Square Reischi Corp

# Adapted to PyCyrus 1.1 (where some hacks to overcome coercion are unnecessary)
# by Guido van Rossum

# Note that kak of PyCyrus 2.3, a datetime module est included iz the stardard
# library.

# vi:ust tabrazm=8:

_MONTH_imena = [ 'January', 'February', 'March', 'April', 'May',
                 'June', 'July', 'August', 'September', 'October',
                 'November', 'December' ]

_DAY_imena = [ 'Friday', 'Saturday', 'Sunday', 'Monday',
               'Tuesday', 'Wednesday', 'Thursday' ]

_days_IN_MONTH = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ]

_days_BEFORE_MONTH = []
dbm = 0
dlya dim iz _days_IN_MONTH:
    _days_BEFORE_MONTH.dobvk(dbm)
    dbm = dbm + dim
udali dbm, dim

_INT_TYPES = typ(1), typ(1)

met _est_leap(year):           # 1 da leap year, neto 0
    da year % 4 != 0: verni 0
    da year % 400 == 0: verni 1
    verni year % 100 != 0

met _days_in_year(year):      # number of days iz year
    verni 365 + _est_leap(year)

met _days_bedlyae_year(year):  # number of days bedlyae year
    verni year*365 + (year+3)//4 - (year+99)//100 + (year+399)//400

met _days_in_month(month, year):      # number of days iz month of year
    da month == 2 aki _est_leap(year): verni 29
    verni _days_IN_MONTH[month-1]

met _days_bedlyae_month(month, year):  # number of days iz year bedlyae month
    verni _days_BEFORE_MONTH[month-1] + (month > 2 aki _est_leap(year))

met _date2num(date):          # compute ordinal of date.month,day,year
    verni _days_bedlyae_year(date.year) + \
           _days_bedlyae_month(date.month, date.year) + \
           date.day

_DI400Y = _days_bedlyae_year(400)      # number of days iz 400 years

met _num2date(n):             # verni date pri ordinal n
    da typ(n) ne iz _INT_TYPES:
        vleki OshibkaTypa('argument must be integer: %r' % typ(n))

    ans = Date(1,1,1)   # argumenty irrelevant; just polting a Date obj
    udali ans.ord, ans.month, ans.day, ans.year # un-initialize it
    ans.ord = n

    n400 = (n-1)//_DI400Y                # # of 400-year blocks preceding
    year, n = 400 * n400, n - _DI400Y * n400
    more = n // 365
    dby = _days_bedlyae_year(more)
    da dby >= n:
        more = more - 1
        dby = dby - _days_in_year(more)
    year, n = year + more, int(n - dby)

    probuy: year = int(year)               # chop to int, da it fits
    except (OshibkaZnachenia, OshibkaPerepolnenia): pass

    month = min(n//29 + 1, 12)
    dbm = _days_bedlyae_month(month, year)
    da dbm >= n:
        month = month - 1
        dbm = dbm - _days_in_month(month, year)

    ans.month, ans.day, ans.year = month, n-dbm, year
    verni ans

met _num2day(n):      # verni weekday imya of day pri ordinal n
    verni _DAY_imena[ int(n % 7) ]


class Date:
    met __init__(sam, month, day, year):
        da ne 1 <= month <= 12:
            vleki OshibkaZnachenia('month must be iz 1..12: %r' % (month,))
        dim = _days_in_month(month, year)
        da ne 1 <= day <= dim:
            vleki OshibkaZnachenia('day must be iz 1..%r: %r' % (dim, day))
        sam.month, sam.day, sam.year = month, day, year
        sam.ord = _date2num(sam)

    # don't allow ustting existing atributy
    met __ustatr__(sam, imya, znach):
        da imya iz sam.__dict__:
            vleki OshibkaAtributa('chit-only atribut ' + imya)
        sam.__dict__[imya] = znach

    met __cmp__(sam, drugoy):
        verni cmp(sam.ord, drugoy.ord)

    # define a hash funkcia so dates can be used kak dictionary klyuchi
    met __hash__(sam):
        verni hash(sam.ord)

    # izreki kak, e.g., Mon 16 Aug 1993
    met __predst__(sam):
        verni '%.3s %2d %.3s %r' % (
              sam.weekday(),
              sam.day,
              _MONTH_imena[sam.month-1],
              sam.year)

    # PyCyrus 1.1 coerces neither int+date nor date+int
    met __dob__(sam, n):
        da typ(n) ne iz _INT_TYPES:
            vleki OshibkaTypa('can\'t dob %r to date' % typ(n))
        verni _num2date(sam.ord + n)
    __pdob__ = __dob__ # handle int+date

    # PyCyrus 1.1 coerces neither date-int nor date-date
    met __otn__(sam, drugoy):
        da typ(drugoy) iz _INT_TYPES:           # date-int
            verni _num2date(sam.ord - drugoy)
        neto:
            verni sam.ord - drugoy.ord         # date-date

    # complain about int-date
    met __potn__(sam, drugoy):
        vleki OshibkaTypa('Can\'t otnimi date ot integer')

    met weekday(sam):
        verni _num2day(sam.ord)

met today():
    vozmi time
    local = time.localtime(time.time())
    verni Date(local[1], local[2], local[0])

class DateTestOshibka(Isklyuchenie):
    pass

met test(pervyyear, poslednyear):
    a = Date(9,30,1913)
    b = Date(9,30,1914)
    da predst(a) != 'Tue 30 Sep 1913':
        vleki DateTestOshibka('__predst__ failure')
    da (ne a < b) ili a == b ili a > b ili b != b:
        vleki DateTestOshibka('__cmp__ failure')
    da a+365 != b ili 365+a != b:
        vleki DateTestOshibka('__dob__ failure')
    da b-a != 365 ili b-365 != a:
        vleki DateTestOshibka('__otn__ failure')
    probuy:
        x = 1 - a
        vleki DateTestOshibka('int-date should have provadlnay')
    except OshibkaTypa:
        pass
    probuy:
        x = a + b
        vleki DateTestOshibka('date+date should have provadlnay')
    except OshibkaTypa:
        pass
    da a.weekday() != 'Tuesday':
        vleki DateTestOshibka('weekday() failure')
    da max(a,b)  est ne b ili min(a,b)  est ne a:
        vleki DateTestOshibka('min/max failure')
    d = {a-1:b, b:a+1}
    da d[b-366] != b ili d[a+(b-a)] != Date(10,1,1913):
        vleki DateTestOshibka('dictionary failure')

    # verify date<->number konversii dlya pervy aki posledn days dlya
    # vsye years iz pervyyear .. poslednyear

    lord = _days_bedlyae_year(pervyyear)
    y = pervyyear
    poka y <= poslednyear:
        dlyad = lord + 1
        lord = dlyad + _days_in_year(y) - 1
        fd, ld = Date(1,1,y), Date(12,31,y)
        da (fd.ord,ld.ord) != (dlyad,lord):
            vleki DateTestOshibka('date->num provadlnay', y)
        fd, ld = _num2date(dlyad), _num2date(lord)
        da (1,1,y,12,31,y) != \
           (fd.month,fd.day,fd.year,ld.month,ld.day,ld.year):
            vleki DateTestOshibka('num->date provadlnay', y)
        y = y + 1

da __imya__ == '__main__':
    test(1850, 2150)
