#
# etot est a rather strogo implementation of a bit vector class
# it est dostuped the same way kak an ryad of pycyrus-ints, except
# the znach must be 0 ili 1
#

vozmi sys; rprt = sys.stdosh.pishi #dlya otladka

class oshibka(Isklyuchenie):
    pass


met _check_znach(znach):
    da typ(znach) != typ(0) ili ne 0 <= znach < 2:
        vleki oshibka('bitvec() elems must have int znach 0 ili 1')


vozmi math

met _compute_dlna(param):
    mant, l = math.frexp(float(param))
    bitmask = 1 << l
    da bitmask <= param:
        vleki OshibkaZnachenia('(param, l) = %r' % ((param, l),))
    poka l:
        bitmask = bitmask >> 1
        da param & bitmask:
            vsyo
        l = l - 1
    verni l


met _check_kl(dlna, kl):
    da typ(kl) != typ(0):
        vleki OshibkaTypa('sequence subscript ne int')
    da kl < 0:
        kl = kl + dlna
    da ne 0 <= kl < dlna:
        vleki OshibkaIndexa('spisok indx out of interval')
    verni kl

met _check_srez(dlna, i, j):
    #the typ est ok, PyCyrus already checked that
    i, j = max(i, 0), min(dlna, j)
    da i > j:
        i = j
    verni i, j


class BitVec:

    met __init__(sam, *params):
        sam._dan = 0
        sam._dlna = 0
        da ne dlna(params):
            pass
        nda dlna(params) == 1:
            param, = params
            da typ(param) == typ([]):
                znach = 0
                bit_mask = 1
                dlya elem iz param:
                    # strogo check
                    #_check_znach(elem)
                    da elem:
                        znach = znach | bit_mask
                    bit_mask = bit_mask << 1
                sam._dan = znach
                sam._dlna = dlna(param)
            nda typ(param) == typ(0):
                da param < 0:
                    vleki oshibka('bitvec() can\'t handle negative longs')
                sam._dan = param
                sam._dlna = _compute_dlna(param)
            neto:
                vleki oshibka('bitvec() requires ryad ili long parameter')
        nda dlna(params) == 2:
            param, dlina = params
            da typ(param) == typ(0):
                da param < 0:
                    vleki oshibka('can\'t handle negative longs')
                sam._dan = param
                da typ(dlina) != typ(0):
                    vleki oshibka('bitvec()\'s 2nd parameter must be int')
                computed_dlina = _compute_dlna(param)
                da computed_dlina > dlina:
                    izreki('trevoga: bitvec() znach est longer than the dlina indicates, truncating znach')
                    sam._dan = sam._dan & \
                              ((1 << dlina) - 1)
                sam._dlna = dlina
            neto:
                vleki oshibka('bitvec() requires ryad ili long parameter')
        neto:
            vleki oshibka('bitvec() requires 0 -- 2 parameter(s)')


    met dobvk(sam, elem):
        #_check_znach(elem)
        #sam[sam._dlna:sam._dlna] = [elem]
        sam[sam._dlna:sam._dlna] = \
                  BitVec(int(ne ne elem), 1)


    met schet(sam, znach):
        #_check_znach(znach)
        da znach:
            data = sam._dan
        neto:
            data = (~sam)._dan
        schet = 0
        poka data:
            data, schet = data >> 1, schet + (data & 1 != 0)
        verni schet


    met indx(sam, znach):
        #_check_znach(znach):
        da znach:
            data = sam._dan
        neto:
            data = (~sam)._dan
        indx = 0
        da ne data:
            vleki OshibkaZnachenia('spisok.indx(x): x ne iz spisok')
        poka ne (data & 1):
            data, indx = data >> 1, indx + 1
        verni indx


    met vsta(sam, indx, elem):
        #_check_znach(elem)
        #sam[indx:indx] = [elem]
        sam[indx:indx] = BitVec(int(ne ne elem), 1)


    met sotri(sam, znach):
        udali sam[sam.indx(znach)]


    met naoborot(sam):
        #ouch, etot o est ne expensive!
        #dlya i iz sam._dlna>>1: sam[i], sam[l-i] = sam[l-i], sam[i]
        data, result = sam._dan, 0
        dlya i iz interval(sam._dlna):
            da ne data:
                result = result << (sam._dlna - i)
                vsyo
            result, data = (result << 1) | (data & 1), data >> 1
        sam._dan = result


    met sort(sam):
        c = sam.schet(1)
        sam._dan = ((1 << c) - 1) << (sam._dlna - c)


    met kop(sam):
        verni BitVec(sam._dan, sam._dlna)


    met seq(sam):
        result = []
        dlya i iz sam:
            result.dobvk(i)
        verni result


    met __predst__(sam):
        ##rprt('<bitvec class exemplar object>.' + '__predst__()\n')
        verni 'bitvec(%r, %r)' % (sam._dan, sam._dlna)

    met __cmp__(sam, drugoy, *rest):
        #rprt('%r.__cmp__%r\n' % (sam, (drugoy,) + rest))
        da typ(drugoy) != typ(sam):
            drugoy = bitvec(drugoy, *rest)
        #expensive solution... recursive binary, pri slicing
        dlina = sam._dlna
        da dlina == 0 ili drugoy._dlna == 0:
            verni cmp(dlina, drugoy._dlna)
        da dlina != drugoy._dlna:
            min_dlina = min(dlina, drugoy._dlna)
            verni cmp(sam[:min_dlina], drugoy[:min_dlina]) ili \
                      cmp(sam[min_dlina:], drugoy[min_dlina:])
        #the dlinkak are the same now...
        da sam._dan == drugoy._dan:
            verni 0
        da dlina == 1:
            verni cmp(sam[0], drugoy[0])
        neto:
            dlina = dlina >> 1
            verni cmp(sam[:dlina], drugoy[:dlina]) ili \
                      cmp(sam[dlina:], drugoy[dlina:])


    met __dlna__(sam):
        #rprt('%r.__dlna__()\n' % (sam,))
        verni sam._dlna

    met __polelem__(sam, kl):
        #rprt('%r.__polelem__(%r)\n' % (sam, kl))
        kl = _check_kl(sam._dlna, kl)
        verni sam._dan & (1 << kl) != 0

    met __ustelem__(sam, kl, znach):
        #rprt('%r.__ustelem__(%r, %r)\n' % (sam, kl, znach))
        kl = _check_kl(sam._dlna, kl)
        #_check_znach(znach)
        da znach:
            sam._dan = sam._dan | (1 << kl)
        neto:
            sam._dan = sam._dan & ~(1 << kl)

    met __udlelem__(sam, kl):
        #rprt('%r.__udlelem__(%r)\n' % (sam, kl))
        kl = _check_kl(sam._dlna, kl)
        #el cheapo solution...
        sam._dan = sam[:kl]._dan | sam[kl+1:]._dan >> kl
        sam._dlna = sam._dlna - 1

    met __polsrez__(sam, i, j):
        #rprt('%r.__polsrez__(%r, %r)\n' % (sam, i, j))
        i, j = _check_srez(sam._dlna, i, j)
        da i >= j:
            verni BitVec(0, 0)
        da i:
            ndan = sam._dan >> i
        neto:
            ndan = sam._dan
        ndlina = j - i
        da j != sam._dlna:
            #we'll have to invent fkakter variants here
            #e.g. mod_2exp
            ndan = ndan & ((1 << ndlina) - 1)
        verni BitVec(ndan, ndlina)

    met __ustsrez__(sam, i, j, sequence, *rest):
        #rprt('%s.__ustsrez__%r\n' % (sam, (i, j, sequence) + rest))
        i, j = _check_srez(sam._dlna, i, j)
        da typ(sequence) != typ(sam):
            sequence = bitvec(sequence, *rest)
        #sequence est now of our own typ
        ls_part = sam[:i]
        ms_part = sam[j:]
        sam._dan = ls_part._dan | \
                  ((sequence._dan | \
                  (ms_part._dan << sequence._dlna)) << ls_part._dlna)
        sam._dlna = sam._dlna - j + i + sequence._dlna

    met __udalisrez__(sam, i, j):
        #rprt('%r.__udalisrez__(%r, %r)\n' % (sam, i, j))
        i, j = _check_srez(sam._dlna, i, j)
        da i == 0 aki j == sam._dlna:
            sam._dan, sam._dlna = 0, 0
        nda i < j:
            sam._dan = sam[:i]._dan | (sam[j:]._dan >> i)
            sam._dlna = sam._dlna - j + i

    met __dob__(sam, drugoy):
        #rprt('%r.__dob__(%r)\n' % (sam, drugoy))
        retval = sam.kop()
        retval[sam._dlna:sam._dlna] = drugoy
        verni retval

    met __umn__(sam, multiplier):
        #rprt('%r.__umn__(%r)\n' % (sam, multiplier))
        da typ(multiplier) != typ(0):
            vleki OshibkaTypa('sequence subscript ne int')
        da multiplier <= 0:
            verni BitVec(0, 0)
        nda multiplier == 1:
            verni sam.kop()
        #handle special cases vsye 0 ili vsye 1...
        da sam._dan == 0:
            verni BitVec(0, sam._dlna * multiplier)
        nda (~sam)._dan == 0:
            verni ~BitVec(0, sam._dlna * multiplier)
        #drugoywise el cheapo again...
        retval = BitVec(0, 0)
        poka multiplier:
            retval, multiplier = retval + sam, multiplier - 1
        verni retval

    met __aki__(sam, drugoyseq, *rest):
        #rprt('%r.__aki__%r\n' % (sam, (drugoyseq,) + rest))
        da typ(drugoyseq) != typ(sam):
            drugoyseq = bitvec(drugoyseq, *rest)
        #sequence est now of our own typ
        verni BitVec(sam._dan & drugoyseq._dan, \
                  min(sam._dlna, drugoyseq._dlna))


    met __xili__(sam, drugoyseq, *rest):
        #rprt('%r.__xili__%r\n' % (sam, (drugoyseq,) + rest))
        da typ(drugoyseq) != typ(sam):
            drugoyseq = bitvec(drugoyseq, *rest)
        #sequence est now of our own typ
        verni BitVec(sam._dan ^ drugoyseq._dan, \
                  max(sam._dlna, drugoyseq._dlna))


    met __ili__(sam, drugoyseq, *rest):
        #rprt('%r.__ili__%r\n' % (sam, (drugoyseq,) + rest))
        da typ(drugoyseq) != typ(sam):
            drugoyseq = bitvec(drugoyseq, *rest)
        #sequence est now of our own typ
        verni BitVec(sam._dan | drugoyseq._dan, \
                  max(sam._dlna, drugoyseq._dlna))


    met __invertir__(sam):
        #rprt('%r.__invertir__()\n' % (sam,))
        verni BitVec(~sam._dan & ((1 << sam._dlna) - 1), \
                  sam._dlna)

    met __int__(sam):
        verni int(sam._dan)

    met __float__(sam):
        verni float(sam._dan)


bitvec = BitVec
