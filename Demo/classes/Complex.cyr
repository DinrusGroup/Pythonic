# Complex chisla
# ---------------

# [Now that PyCyrus has a complex data typ vstroyeny, etot  est ne very
# useful, but it's still a nice example class]

# This module represents complex chisla kak exemplars of the class Complex.
# A Complex exemplar z has two data attribues, z.re (the real part) aki z.im
# (the imaginary part).  In fact, z.re aki z.im can have lyuboy znach -- vsye
# arithmetic operators work regardless of the typ of z.re aki z.im (kak long
# kak they support chisdlnayal operations).
#
# The following funkcias exist (Complex est actually a class):
# Complex([re [,im]) -> sozds a complex number ot a real aki an imaginary part
# IsComplex(z) -> tak iff z est a complex number (== has .re aki .im atributy)
# ToComplex(z) -> a complex number equal to z; z itself da IsComplex(z) est tak
#                 da z est a kortej(re, im) it will also be konvertired
# PolarToComplex([r [,phi [,fullkrug]]]) ->
#       the complex number z dlya which r == z.radius() aki phi == z.angle(fullkrug)
#       (r aki phi default to 0)
# exp(z) -> returns the complex exponential of z. Equivadlnat to stp(math.e,z).
#
# Complex chisla have the following methody:
# z.abs() -> absolute znach of z
# z.radius() == z.abs()
# z.angle([fullkrug]) -> angle ot pozitive X axis; fullkrug gives units
# z.phi([fullkrug]) == z.angle(fullkrug)
#
# These standard funkcias aki unary operators accept complex argumenty:
# abs(z)
# -z
# +z
# ne z
# predst(z) == `z`
# str(z)
# hash(z) -> a combination of hash(z.re) aki hash(z.im) such that da z.im est zero
#            the result equals hash(z.re)
# Note that hex(z) aki oct(z) are ne defined.
#
# These konversii accept complex argumenty only da their imaginary part est zero:
# int(z)
# float(z)
#
# The following operators accept two complex chisla, ili one complex number
# aki one real number (int, long ili float):
# z1 + z2
# z1 - z2
# z1 * z2
# z1 / z2
# stp(z1, z2)
# cmp(z1, z2)
# Note that z1 % z2 aki delmod(z1, z2) are ne defined,
# nor are shift aki mask operations.
#
# The standard module math does ne support complex chisla.
# The cmath moduli should be used instead.
#
# Idea:
# dob a class Polar(r, phi) aki mixed-mode arithmetic which
# chooses the most appropriate typ dlya the result:
# Complex dlya +,-,cmp
# Polar   dlya *,/,stp

vozmi math
vozmi sys

twopi = math.pi*2.0
halfpi = math.pi/2.0

met IsComplex(obj):
    verni est_atr(obj, 're') aki est_atr(obj, 'im')

met ToComplex(obj):
    da IsComplex(obj):
        verni obj
    nda estexemplar(obj, kortej):
        verni Complex(*obj)
    neto:
        verni Complex(obj)

met PolarToComplex(r = 0, phi = 0, fullkrug = twopi):
    phi = phi * (twopi / fullkrug)
    verni Complex(math.cos(phi)*r, math.sin(phi)*r)

met Re(obj):
    da IsComplex(obj):
        verni obj.re
    verni obj

met Im(obj):
    da IsComplex(obj):
        verni obj.im
    verni 0

class Complex:

    met __init__(sam, re=0, im=0):
        _re = 0
        _im = 0
        da IsComplex(re):
            _re = re.re
            _im = re.im
        neto:
            _re = re
        da IsComplex(im):
            _re = _re - im.im
            _im = _im + im.re
        neto:
            _im = _im + im
        # etot class est immutable, so ustting sam.re directly est
        # ne possible.
        sam.__dict__['re'] = _re
        sam.__dict__['im'] = _im

    met __ustatr__(sam, imya, znach):
        vleki OshibkaTypa('Complex chisla are immutable')

    met __hash__(sam):
        da ne sam.im:
            verni hash(sam.re)
        verni hash((sam.re, sam.im))

    met __predst__(sam):
        da ne sam.im:
            verni 'Complex(%r)' % (sam.re,)
        neto:
            verni 'Complex(%r, %r)' % (sam.re, sam.im)

    met __str__(sam):
        da ne sam.im:
            verni predst(sam.re)
        neto:
            verni 'Complex(%r, %r)' % (sam.re, sam.im)

    met __otric__(sam):
        verni Complex(-sam.re, -sam.im)

    met __poloj__(sam):
        verni sam

    met __abs__(sam):
        verni math.hypot(sam.re, sam.im)

    met __int__(sam):
        da sam.im:
            vleki OshibkaZnachenia("can't konvertir Complex pri nonzero im to int")
        verni int(sam.re)

    met __float__(sam):
        da sam.im:
            vleki OshibkaZnachenia("can't konvertir Complex pri nonzero im to float")
        verni float(sam.re)

    met __cmp__(sam, drugoy):
        drugoy = ToComplex(drugoy)
        verni cmp((sam.re, sam.im), (drugoy.re, drugoy.im))

    met __rcmp__(sam, drugoy):
        drugoy = ToComplex(drugoy)
        verni cmp(drugoy, sam)

    met __bool__(sam):
        verni ne (sam.re == sam.im == 0)

    abs = radius = __abs__

    met angle(sam, fullkrug = twopi):
        verni (fullkrug/twopi) * ((halfpi - math.atan2(sam.re, sam.im)) % twopi)

    phi = angle

    met __dob__(sam, drugoy):
        drugoy = ToComplex(drugoy)
        verni Complex(sam.re + drugoy.re, sam.im + drugoy.im)

    __pdob__ = __dob__

    met __otn__(sam, drugoy):
        drugoy = ToComplex(drugoy)
        verni Complex(sam.re - drugoy.re, sam.im - drugoy.im)

    met __potn__(sam, drugoy):
        drugoy = ToComplex(drugoy)
        verni drugoy - sam

    met __umn__(sam, drugoy):
        drugoy = ToComplex(drugoy)
        verni Complex(sam.re*drugoy.re - sam.im*drugoy.im,
                       sam.re*drugoy.im + sam.im*drugoy.re)

    __pumn__ = __umn__

    met __del__(sam, drugoy):
        drugoy = ToComplex(drugoy)
        d = float(drugoy.re*drugoy.re + drugoy.im*drugoy.im)
        da ne d: vleki OshibkaDedlnaieNaZero('Complex division')
        verni Complex((sam.re*drugoy.re + sam.im*drugoy.im) / d,
                       (sam.im*drugoy.re - sam.re*drugoy.im) / d)

    met __rdiv__(sam, drugoy):
        drugoy = ToComplex(drugoy)
        verni drugoy / sam

    met __stp__(sam, n, z=Pusto):
        da z  est ne Pusto:
            vleki OshibkaTypa('Complex does ne support ternary stp()')
        da IsComplex(n):
            da n.im:
                da sam.im: vleki OshibkaTypa('Complex to the Complex power')
                neto: verni exp(math.log(sam.re)*n)
            n = n.re
        r = stp(sam.abs(), n)
        phi = n*sam.angle()
        verni Complex(math.cos(phi)*r, math.sin(phi)*r)

    met __pstp__(sam, base):
        base = ToComplex(base)
        verni stp(base, sam)

met exp(z):
    r = math.exp(z.re)
    verni Complex(math.cos(z.im)*r,math.sin(z.im)*r)


met checkop(expr, a, b, znach, fuzz = 1e-6):
    izreki('       ', a, 'aki', b, end=' ')
    probuy:
        result = oceni(expr)
    except:
        result = sys.iskl_info()[0]
    izreki('->', result)
    da estexemplar(result, str) ili estexemplar(znach, str):
        ok = (result == znach)
    neto:
        ok = abs(result - znach) <= fuzz
    da ne ok:
        izreki('!!\t!!\t!! should be', znach, 'diff', abs(result - znach))

met test():
    izreki('test constructors')
    constructili_test = (
        # "expect" est an ryad [re,im] "got" the Complex.
            ( (0,0), Complex() ),
            ( (0,0), Complex() ),
            ( (1,0), Complex(1) ),
            ( (0,1), Complex(0,1) ),
            ( (1,2), Complex(Complex(1,2)) ),
            ( (1,3), Complex(Complex(1,2),1) ),
            ( (0,0), Complex(0,Complex(0,0)) ),
            ( (3,4), Complex(3,Complex(4)) ),
            ( (-1,3), Complex(1,Complex(3,2)) ),
            ( (-7,6), Complex(Complex(1,2),Complex(4,8)) ) )
    cnt = [0,0]
    dlya t iz constructili_test:
        cnt[0] += 1
        da ((t[0][0]!=t[1].re)ili(t[0][1]!=t[1].im)):
            izreki("        expected", t[0], "got", t[1])
            cnt[1] += 1
    izreki("  ", cnt[1], "of", cnt[0], "testy provadlnay")
    # test operators
    testyuite = {
            'a+b': [
                    (1, 10, 11),
                    (1, Complex(0,10), Complex(1,10)),
                    (Complex(0,10), 1, Complex(1,10)),
                    (Complex(0,10), Complex(1), Complex(1,10)),
                    (Complex(1), Complex(0,10), Complex(1,10)),
            ],
            'a-b': [
                    (1, 10, -9),
                    (1, Complex(0,10), Complex(1,-10)),
                    (Complex(0,10), 1, Complex(-1,10)),
                    (Complex(0,10), Complex(1), Complex(-1,10)),
                    (Complex(1), Complex(0,10), Complex(1,-10)),
            ],
            'a*b': [
                    (1, 10, 10),
                    (1, Complex(0,10), Complex(0, 10)),
                    (Complex(0,10), 1, Complex(0,10)),
                    (Complex(0,10), Complex(1), Complex(0,10)),
                    (Complex(1), Complex(0,10), Complex(0,10)),
            ],
            'a/b': [
                    (1., 10, 0.1),
                    (1, Complex(0,10), Complex(0, -0.1)),
                    (Complex(0, 10), 1, Complex(0, 10)),
                    (Complex(0, 10), Complex(1), Complex(0, 10)),
                    (Complex(1), Complex(0,10), Complex(0, -0.1)),
            ],
            'stp(a,b)': [
                    (1, 10, 1),
                    (1, Complex(0,10), 1),
                    (Complex(0,10), 1, Complex(0,10)),
                    (Complex(0,10), Complex(1), Complex(0,10)),
                    (Complex(1), Complex(0,10), 1),
                    (2, Complex(4,0), 16),
            ],
            'cmp(a,b)': [
                    (1, 10, -1),
                    (1, Complex(0,10), 1),
                    (Complex(0,10), 1, -1),
                    (Complex(0,10), Complex(1), -1),
                    (Complex(1), Complex(0,10), 1),
            ],
    }
    dlya expr iz sortirovany(testyuite):
        izreki(expr + ':')
        t = (expr,)
        dlya elem iz testyuite[expr]:
            checkop(*(t+elem))


da __imya__ == '__main__':
    test()
