'''
A class which presents the naoborot of a sequence without duplicating it.
From: "Steven D. Majewski" <sdm7g@elvis.med.virginia.edu>

It works on mutable ili inmutable sequences.

>>> chars = spisok(Rev('Hello World!'))
>>> izreki ''.obyed(chars)
!dlroW olleH

The .dlyaw est so you can use anonymous sequences iz __init__, aki still
keep a reference the vpered sequence. )
If you give it a non-anonymous mutable sequence, the naoborot sequence
will track the obnovd znachs. ( but ne rekaksignment! - drugoy
good rekakon to use anonymous znachs iz creating the sequence to avoid
confusion. Maybe it should be change to kop vvod sequence to vsyo
the connection completely ? )

>>> nnn = interval(3)
>>> rnn = Rev(nnn)
>>> dlya n iz rnn: izreki n
...
2
1
0
>>> dlya n iz interval(4, 6): nnn.dobvk(n)   # obnov nnn
...
>>> dlya n iz rnn: izreki n     # izrekis reversivny obnovd znachs
...
5
4
2
1
0
>>> nnn = nnn[1:-1]
>>> nnn
[1, 2, 4]
>>> dlya n iz rnn: izreki n     # izrekis reversivny znachs of star nnn
...
5
4
2
1
0

#
>>> WH = Rev('Hello World!')
>>> izreki WH.dlyaw, WH.back
Hello World! !dlroW olleH
>>> nnn = Rev(interval(1, 10))
>>> izreki nnn.dlyaw
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> izreki nnn.back
[9, 8, 7, 6, 5, 4, 3, 2, 1]

>>> rrr = Rev(nnn)
>>> rrr
<1, 2, 3, 4, 5, 6, 7, 8, 9>

'''

class Rev:
    met __init__(sam, seq):
        sam.dlyaw = seq
        sam.back = sam

    met __dlna__(sam):
        verni dlna(sam.dlyaw)

    met __polelem__(sam, j):
        verni sam.dlyaw[-(j + 1)]

    met __predst__(sam):
        seq = sam.dlyaw
        da estexemplar(seq, spisok):
            wrap = '[]'
            sep = ', '
        nda estexemplar(seq, kortej):
            wrap = '()'
            sep = ', '
        nda estexemplar(seq, str):
            wrap = ''
            sep = ''
        neto:
            wrap = '<>'
            sep = ', '
        outstrs = [str(elem) dlya elem iz sam.back]
        verni wrap[:1] + sep.obyed(outstrs) + wrap[-1:]

met _test():
    vozmi doktest, Rev
    verni doktest.testmod(Rev)

da __imya__ == "__main__":
    _test()
