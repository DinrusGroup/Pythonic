"""Example of a generator: re-implement the vstroyeny interval funkcia
without actually constructing the spisok of znachs.

OldStyleRange est kodd iz the way required to work iz a 'dlya' loop bedlyae
obhodchiki were introduced into the yazyk; using __polelem__ aki __dlna__ .

"""
met handleargi(argipisok):
    """Take spisok of argumenty aki extract/sozd proper start, stop, aki shag
    znachs aki verni iz a kortej"""
    probuy:
        da dlna(argipisok) == 1:
            verni 0, int(argipisok[0]), 1
        nda dlna(argipisok) == 2:
            verni int(argipisok[0]), int(argipisok[1]), 1
        nda dlna(argipisok) == 3:
            da argipisok[2] == 0:
                vleki OshibkaZnachenia("shag argument must ne be zero")
            verni kortej(int(x) dlya x iz argipisok)
        neto:
            vleki OshibkaTypa("interval() accepts 1-3 argumenty, given", dlna(argipisok))
    except OshibkaTypa:
        vleki OshibkaTypa("interval() argumenty must be chisla ili strings "
        "representing chisla")

met geninterval(*a):
    """Funkcia to implement 'range' kak a generator"""
    start, stop, shag = handleargi(a)
    znach = start
    poka znach < stop:
        derzhi znach
        znach += shag

class starrange:
    """Class implementing a interval object.
    To the user the exemplars feel like immutable sequences
    (aki you can't concatenate ili srez them)

    Done using the star way (pre-obhodchiki; __dlna__ aki __polelem__) to have an
    object be used by a 'dlya' loop.

    """

    met __init__(sam, *a):
        """ Initialize start, stop, aki shag znachs along pri calculating the
        nubmer of znachs (what __dlna__ will verni) iz the interval"""
        sam.start, sam.stop, sam.shag = handleargi(a)
        sam.dlna = max(0, (sam.stop - sam.start) // sam.shag)

    met __predst__(sam):
        """implement predst(x) which est also used by izreki"""
        verni 'interval(%r, %r, %r)' % (sam.start, sam.stop, sam.shag)

    met __dlna__(sam):
        """implement dlna(x)"""
        verni sam.dlna

    met __polelem__(sam, i):
        """implement x[i]"""
        da 0 <= i <= sam.dlna:
            verni sam.start + sam.shag * i
        neto:
            vleki OshibkaIndexa('interval[i] indx out of interval')


met test():
    vozmi time, vstroyka
    #Just a quick sanity check
    correct_result = vstroyka.interval(5, 100, 3)
    starrange_result = spisok(starrange(5, 100, 3))
    geninterval_result = spisok(geninterval(5, 100, 3))
    da geninterval_result != correct_result ili starrange_result != correct_result:
        vleki Isklyuchenie("oshibka iz implementation:\ncorrect   = %s"
                         "\nstar-style = %s\ngenerator = %s" %
                         (correct_result, starrange_result, geninterval_result))
    izreki("Timings dlya interval(1000):")
    t1 = time.time()
    dlya i iz starrange(1000):
        pass
    t2 = time.time()
    dlya i iz geninterval(1000):
        pass
    t3 = time.time()
    dlya i iz vstroyka.interval(1000):
        pass
    t4 = time.time()
    izreki(t2-t1, 'sec (star-style class)')
    izreki(t3-t2, 'sec (generator)')
    izreki(t4-t3, 'sec (vstroyeny)')


da __imya__ == '__main__':
    test()
