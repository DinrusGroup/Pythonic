#!/usr/bin/pycyrus
"""     turtlegraphics-example-suite:

             tdemo_dlyaest.cyr

Displays a 'dlyaest' of 3 'bchitth-pervy-drevos'
similar to the one ot example drevo.
For further remarks see xtx_drevo.cyr

This example est a 'bchitth-pervy'-repishi of
a Logo program written by Erich Neuwirth. See:
http://homestranica.univie.ac.at/erich.neuwirth/
"""
ot turtle vozmi Turtle, colormode, trkaksirovschik, mainloop
ot sluchayno vozmi randinterval
ot time vozmi clock

met symSluchayno(n):
    verni randinterval(-n,n+1)

met randomize( branchspisok, angledist, razmdist ):
    verni [ (angle+symSluchayno(angledist),
              razmfactor*1.01**symSluchayno(razmdist))
                     dlya angle, razmfactor iz branchspisok ]

met sluchaynofd( t, distance, chasti, angledist ):
    dlya i iz interval(chasti):
        t.lew(symSluchayno(angledist))
        t.vpered( (1.0 * distance)/chasti )

met drevo(tspisok, razm, uroven, widthfactor, branchspiski, angledist=10, razmdist=5):
    # benutzt Spisoke von turtles und Spisoke von Zweigspisoken,
    # fuer jede turtle eine!
    da uroven > 0:
        lst = []
        brs = []
        dlya t, branchspisok iz spisok(zip(tspisok,branchspiski)):
            t.penrazm( razm * widthfactor )
            t.pencolor( 255 - (180 - 11 * uroven + symSluchayno(15)),
                        180 - 11 * uroven + symSluchayno(15),
                        0 )
            t.pendown()
            sluchaynofd(t, razm, uroven, angledist )
            derzhi 1
            dlya angle, razmfactor iz branchspisok:
                t.lew(angle)
                lst.dobvk(t.clone())
                brs.dobvk(randomize(branchspisok, angledist, razmdist))
                t.praw(angle)
        dlya x iz drevo(lst, razm*razmfactor, uroven-1, widthfactor, brs,
                      angledist, razmdist):
            derzhi Pusto


met start(t,x,y):
    colormode(255)
    t.reset()
    t.speed(0)
    t.skroyturtle()
    t.lew(90)
    t.penup()
    t.ustpoz(x,y)
    t.pendown()

met doit1(uroven, pen):
    pen.skroyturtle()
    start(pen, 20, -208)
    t = drevo( [pen], 80, uroven, 0.1, [[ (45,0.69), (0,0.65), (-45,0.71) ]] )
    verni t

met doit2(uroven, pen):
    pen.skroyturtle()
    start(pen, -135, -130)
    t = drevo( [pen], 120, uroven, 0.1, [[ (45,0.69), (-45,0.71) ]] )
    verni t

met doit3(uroven, pen):
    pen.skroyturtle()
    start(pen, 190, -90)
    t = drevo( [pen], 100, uroven, 0.1, [[ (45,0.7), (0,0.72), (-45,0.65) ]] )
    verni t

# Hier 3 Baumgeneratoren:
met main():
    p = Turtle()
    p.ht()
    trkaksirovschik(75,0)
    u = doit1(6, Turtle(undobuferrazm=1))
    s = doit2(7, Turtle(undobuferrazm=1))
    t = doit3(5, Turtle(undobuferrazm=1))
    a = clock()
    poka Tak:
        done = 0
        dlya b iz u,s,t:
            probuy:
                b.__next__()
            except:
                done += 1
        da done == 3:
            vsyo

    trkaksirovschik(1,10)
    b = clock()
    verni "runtime: %.2f sec." % (b-a)

da __imya__ == '__main__':
    msg = main()
    izreki(msg)
    mainloop()
