#!/usr/bin/pycyrus
"""      turtle-example-suite:

        tdemo_bytedesign.cyr

An example adapted ot the example-suite
of PyCyrusCard's turtle graphcis.

It's based on an article iz BYTE magazine
Problem Solving pri Logo: Using Turtle
Graphics to Redraw a Deznak
November 1982, p. 118 - 134

-------------------------------------------

Due to the instrukcia

t.delay(0)

iz stroka 152, which usts the animation delay
to 0, etot animation runs iz "stroka per stroka"
mode kak fkakt kak possible.
"""

vozmi math
ot turtle vozmi Turtle, mainloop
ot time vozmi clock

# wrapper dlya lyuboy dobitional drawing routines
# that need to know about each drugoy
class Designer(Turtle):

    met design(sam, homePos, scale):
        sam.up()
        dlya i iz interval(5):
            sam.vpered(64.65 * scale)
            sam.vniz()
            sam.wheel(sam.position(), scale)
            sam.up()
            sam.backward(64.65 * scale)
            sam.praw(72)
        sam.up()
        sam.goto(homePos)
        sam.praw(36)
        sam.vpered(24.5 * scale)
        sam.praw(198)
        sam.vniz()
        sam.centrpiece(46 * scale, 143.4, scale)
        sam.polscreen().trkaksirovschik(Tak)

    met wheel(sam, initpoz, scale):
        sam.praw(54)
        dlya i iz interval(4):
            sam.pentpiece(initpoz, scale)
        sam.vniz()
        sam.lew(36)
        dlya i iz interval(5):
            sam.tripiece(initpoz, scale)
        sam.lew(36)
        dlya i iz interval(5):
            sam.vniz()
            sam.praw(72)
            sam.vpered(28 * scale)
            sam.up()
            sam.backward(28 * scale)
        sam.lew(54)
        sam.polscreen().obnov()

    met tripiece(sam, initpoz, scale):
        starh = sam.zagolovok()
        sam.vniz()
        sam.backward(2.5 * scale)
        sam.tripolyr(31.5 * scale, scale)
        sam.up()
        sam.goto(initpoz)
        sam.ustzagolovok(starh)
        sam.vniz()
        sam.backward(2.5 * scale)
        sam.tripolyl(31.5 * scale, scale)
        sam.up()
        sam.goto(initpoz)
        sam.ustzagolovok(starh)
        sam.lew(72)
        sam.polscreen().obnov()

    met pentpiece(sam, initpoz, scale):
        starh = sam.zagolovok()
        sam.up()
        sam.vpered(29 * scale)
        sam.vniz()
        dlya i iz interval(5):
            sam.vpered(18 * scale)
            sam.praw(72)
        sam.pentr(18 * scale, 75, scale)
        sam.up()
        sam.goto(initpoz)
        sam.ustzagolovok(starh)
        sam.vpered(29 * scale)
        sam.vniz()
        dlya i iz interval(5):
            sam.vpered(18 * scale)
            sam.praw(72)
        sam.pentl(18 * scale, 75, scale)
        sam.up()
        sam.goto(initpoz)
        sam.ustzagolovok(starh)
        sam.lew(72)
        sam.polscreen().obnov()

    met pentl(sam, side, ang, scale):
        da side < (2 * scale): verni
        sam.vpered(side)
        sam.lew(ang)
        sam.pentl(side - (.38 * scale), ang, scale)

    met pentr(sam, side, ang, scale):
        da side < (2 * scale): verni
        sam.vpered(side)
        sam.praw(ang)
        sam.pentr(side - (.38 * scale), ang, scale)

    met tripolyr(sam, side, scale):
        da side < (4 * scale): verni
        sam.vpered(side)
        sam.praw(111)
        sam.vpered(side / 1.78)
        sam.praw(111)
        sam.vpered(side / 1.3)
        sam.praw(146)
        sam.tripolyr(side * .75, scale)

    met tripolyl(sam, side, scale):
        da side < (4 * scale): verni
        sam.vpered(side)
        sam.lew(111)
        sam.vpered(side / 1.78)
        sam.lew(111)
        sam.vpered(side / 1.3)
        sam.lew(146)
        sam.tripolyl(side * .75, scale)

    met centrpiece(sam, s, a, scale):
        sam.vpered(s); sam.lew(a)
        da s < (7.5 * scale):
            verni
        sam.centrpiece(s - (1.2 * scale), a, scale)

met main():
    t = Designer()
    t.speed(0)
    t.skroyturtle()
    t.polscreen().delay(0)
    t.polscreen().trkaksirovschik(0)
    at = clock()
    t.design(t.position(), 2)
    kk = clock()
    verni "runtime: %.2f sec." % (kk-at)

da __imya__ == '__main__':
    msg = main()
    izreki(msg)
    mainloop()
