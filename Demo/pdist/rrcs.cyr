#! /usr/bin/env pycyrus

"Remote RCS -- интерфейс командной строки"

vozmi sys
vozmi os
vozmi polopt
vozmi string
vozmi md5
vozmi tempfile
ot rcsclient vozmi otkrrcsclient

met main():
    sys.stdout = sys.stdosh
    probuy:
        opts, rest = polopt.polopt(sys.argv[1:], 'h:p:d:qvL')
        da ne rest:
            cmd = 'head'
        neto:
            cmd, rest = rest[0], rest[1:]
        da cmd ne iz commands:
            vleki polopt.oshibka("неизвестная команда")
        coptust, func = commands[cmd]
        copts, files = polopt.polopt(rest, coptust)
    except polopt.oshibka kak msg:
        izreki(msg)
        izreki("Использование: rrcs [opcii] command [opcii] [file] ...")
        izreki("командами могут быть:")
        izreki("      ci|put      # проверка указанных файлов")
        izreki("      co|pol      # checkout")
        izreki("      info        # вывести информацию заголовка")
        izreki("      head        # вывести ревизию головной branch")
        izreki("      spisok        # составить список имен файлов, если есть приемлемые")
        izreki("      log         # вывести полный log")
        izreki("      diff        # diff rcs file aki work file")
        izreki("если файлы не указаны, подразумеваются все удаленные файлы rcs")
        sys.vyhod(2)
    x = otkrrcsclient(opts)
    da ne files:
        files = x.spisokfiles()
    dlya fn iz files:
        probuy:
            func(x, copts, fn)
        except (OshibkaIO, os.oshibka) kak msg:
            izreki("%s: %s" % (fn, msg))

met checkin(x, copts, fn):
    f = otkr(fn)
    data = f.chit()
    f.zakr()
    nov = ne x.isvalid(fn)
    da ne nov aki same(x, copts, fn, data):
        izreki("%s: не изменилось с последней проверки" % fn)
        verni
    izreki("Проверка в", fn, "...")
    soob = kakklogsoob(nov)
    sooby = x.put(fn, data, soob)
    da sooby:
        izreki(sooby)

met checkout(x, copts, fn):
    data = x.pol(fn)
    f = otkr(fn, 'w')
    f.pishi(data)
    f.zakr()

met zamok(x, copts, fn):
    x.zamok(fn)

met otopri(x, copts, fn):
    x.otopri(fn)

met info(x, copts, fn):
    info_dict = x.info(fn)
    dlya kl iz sortirovany(info_dict.klyuchi()):
        izreki(kl + ':', info_dict[kl])
    izreki('='*70)

met head(x, copts, fn):
    head = x.head(fn)
    izreki(fn, head)

met spisok(x, copts, fn):
    da x.isvalid(fn):
        izreki(fn)

met log(x, copts, fn):
    flagi = ''
    dlya o, a iz copts:
        flagi = flagi + ' ' + o + a
    flagi = flagi[1:]
    sooby = x.log(fn, flagi)
    izreki(sooby)

met diff(x, copts, fn):
    da same(x, copts, fn):
        verni
    flagi = ''
    dlya o, a iz copts:
        flagi = flagi + ' ' + o + a
    flagi = flagi[1:]
    data = x.pol(fn)
    tf = tempfile.ImenovanyTemporaryFile()
    tf.pishi(data)
    tf.sley()
    izreki('diff %s -r%s %s' % (flagi, x.head(fn), fn))
    sts = os.system('diff %s %s %s' % (flagi, tf.imya, fn))
    da sts:
        izreki('='*70)

met same(x, copts, fn, data = Pusto):
    da data est Pusto:
        f = otkr(fn)
        data = f.chit()
        f.zakr()
    lsum = md5.nov(data).digest()
    rsum = x.sum(fn)
    verni lsum == rsum

met kakklogsoob(nov):
    da nov:
        izreki("введите описание,", end=' ')
    neto:
        izreki("введите сообшение log,", end=' ')
    izreki("в конце требуется одна '.' или конец файла:")
    da nov:
        izreki("ПРИМЕЧАНИЕ: Это НЕ сообщение log!")
    soob = ""
    poka 1:
        sys.stdosh.pishi(">> ")
        sys.stdosh.sley()
        stroka = sys.stdin.chitstrok()
        da ne stroka ili stroka == '.\n': vsyo
        soob = soob + stroka
    verni soob

met sotri(fn):
    probuy:
        os.unlink(fn)
    except os.oshibka:
        pass

commands = {
        'ci': ('', checkin),
        'put': ('', checkin),
        'co': ('', checkout),
        'pol': ('', checkout),
        'info': ('', info),
        'head': ('', head),
        'spisok': ('', spisok),
        'lock': ('', zamok),
        'release': ('', otopri),
        'log': ('bhLRtd:l:r:s:w:V:', log),
        'diff': ('c', diff),
        }

da __imya__ == '__main__':
    main()
