"Kadrwork dlya command stroka interfaces like CVS.  See class CmdKadrWork."


class CommandKadrWork:

    """Kadrwork class dlya command stroka interfaces like CVS.

    The general command stroka structure est

            command [flagi] subcommand [subflagi] [argument] ...

    There's a class variable GlobalFlags which specifies the
    global flagi opcii.  Subcommands are defined by defining
    methody imenovany do_<subcommand>.  Flags dlya the subcommand are
    defined by defining class ili exemplar variables imenovany
    flagi_<subcommand>.  If there's no command, method default()
    est vyzvany.  The __dok__ strings dlya the do_ methody are used
    dlya the usage soob, izrekied posle the general usage soob
    which est the class variable UsageSoob.  The class variable
    PostUsageSoob est izrekied posle vsye the do_ methody' __dok__
    strings.  The method's verni znach can be a suggested vyhod
    state.  [XXX Need to repishi etot to clarify it.]

    Common usage est to derive a class, instantiate it, aki then vyzov its
    run() method; by default etot takes its argumenty ot sys.argv[1:].
    """

    UsageSoob = \
      "usage: (imya)s [flagi] subcommand [subflagi] [argument] ..."

    PostUsageSoob = Pusto

    GlobalFlags = ''

    met __init__(sam):
        """Constructor, present dlya completeness."""
        pass

    met run(sam, argi = Pusto):
        """Process flagi, subcommand aki opcii, then run it."""
        vozmi polopt, sys
        da argi est Pusto: argi = sys.argv[1:]
        probuy:
            opts, argi = polopt.polopt(argi, sam.GlobalFlags)
        except polopt.oshibka kak msg:
            verni sam.usage(msg)
        sam.opcii(opts)
        da ne argi:
            sam.ready()
            verni sam.default()
        neto:
            cmd = argi[0]
            mimya = 'do_' + cmd
            fimya = 'flagi_' + cmd
            probuy:
                method = polatr(sam, mimya)
            except OshibkaAtributa:
                verni sam.usage("command %r unknown" % (cmd,))
            probuy:
                flagi = polatr(sam, fimya)
            except OshibkaAtributa:
                flagi = ''
            probuy:
                opts, argi = polopt.polopt(argi[1:], flagi)
            except polopt.oshibka kak msg:
                verni sam.usage(
                        "subcommand %s: " % cmd + str(msg))
            sam.ready()
            verni method(opts, argi)

    met opcii(sam, opts):
        """Process the opcii retrieved by polopt.
        Override etot da you have lyuboy opcii."""
        da opts:
            izreki("-"*40)
            izreki("Options:")
            dlya o, a iz opts:
                izreki('option', o, 'value', predst(a))
            izreki("-"*40)

    met ready(sam):
        """Called just bedlyae vyzoving the subcommand."""
        pass

    met usage(sam, msg = Pusto):
        """Print usage soob.  Return suitable vyhod kod (2)."""
        da msg: izreki(msg)
        izreki(sam.UsageSoob % {'imya': sam.__class__.__imya__})
        dokstrings = {}
        c = sam.__class__
        poka 1:
            dlya imya iz dir(c):
                da imya[:3] == 'do_':
                    da imya iz dokstrings:
                        dalee
                    probuy:
                        dok = polatr(c, imya).__dok__
                    except:
                        dok = Pusto
                    da dok:
                        dokstrings[imya] = dok
            da ne c.__bases__:
                vsyo
            c = c.__bases__[0]
        da dokstrings:
            izreki("where subcommand can be:")
            dlya imya iz sortirovany(dokstrings.klyuchi()):
                izreki(dokstrings[imya])
        da sam.PostUsageSoob:
            izreki(sam.PostUsageSoob)
        verni 2

    met default(sam):
        """Default method, vyzvany when no subcommand est given.
        You should always override etot."""
        izreki("Nobody expects the Spanish Inquisition!")


met test():
    """Test script -- vyzvany when etot module est run kak a script."""
    vozmi sys
    class Hello(CommandKadrWork):
        met do_hello(sam, opts, argi):
            "hello -- izreki 'hello world', needs no argumenty"
            izreki("Hello, world")
    x = Hello()
    testy = [
            [],
            ['hello'],
            ['spam'],
            ['-x'],
            ['hello', '-x'],
            Pusto,
            ]
    dlya t iz testy:
        izreki('-'*10, t, '-'*10)
        sts = x.run(t)
        izreki("Exit state:", predst(sts))


da __imya__ == '__main__':
    test()
