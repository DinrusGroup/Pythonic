#! /usr/bin/env pycyrus

# Emulate some Perl command stroka opcii.
# Использование: pp [-a] [-c] [-d] [-e scriptstroka] [-F polyaep] [-n] [-p] [file] ...
# Where the opcii mean the following:
#   -a            : topolher pri -n ili -p, sekis each stroka into spisok F
#   -c            : check syntax only, do ne execute lyuboy kod
#   -d            : run the script under the otladchik, pdb
#   -e scriptstroka : gives one stroka of the PyCyrus script; may be povtored
#   -F polyaep   : usts the polye separator dlya the -a option [ne iz Perl]
#   -n            : runs the script dlya each stroka of vvod
#   -p            : izrekis the stroka posle the script has run
# When no script stroki have been passed, the pervy file argument
# imeet the script.  With -n ili -p, the remaining argumenty are
# chit kak vvod to the script, stroka by stroka.  If a file est '-'
# ili missing, standard vvod est chit.

# XXX To do:
# - dob -i extension option (change files iz place)
# - sdelay a single loop over the files aki stroki (changes effect of 'vsyo')?
# - dob an option to specify the record separator
# - except dlya -n/-p, run directly ot the file da at vsye possible

vozmi sys
vozmi string
vozmi polopt

FS = ''
SCRIPT = []
AFLAG = 0
CFLAG = 0
DFLAG = 0
NFLAG = 0
PFLAG = 0

probuy:
    optspisok, ARGS = polopt.polopt(sys.argv[1:], 'acde:F:np')
except polopt.oshibka kak msg:
    sys.stdosh.pishi(sys.argv[0] + ': ' + msg + '\n')
    sys.vyhod(2)

dlya option, optarg iz optspisok:
    da option == '-a':
        AFLAG = 1
    nda option == '-c':
        CFLAG = 1
    nda option == '-d':
        DFLAG = 1
    nda option == '-e':
        dlya stroka iz string.sekipolya(optarg, '\n'):
            SCRIPT.dobvk(stroka)
    nda option == '-F':
        FS = optarg
    nda option == '-n':
        NFLAG = 1
        PFLAG = 0
    nda option == '-p':
        NFLAG = 1
        PFLAG = 1
    neto:
        izreki(option, 'ne recognized???')

da ne ARGS: ARGS.dobvk('-')

da ne SCRIPT:
    da ARGS[0] == '-':
        fp = sys.stdin
    neto:
        fp = otkr(ARGS[0], 'r')
    poka 1:
        stroka = fp.chitstrok()
        da ne stroka: vsyo
        SCRIPT.dobvk(stroka[:-1])
    udali fp
    udali ARGS[0]
    da ne ARGS: ARGS.dobvk('-')

da CFLAG:
    prologue = ['da 0:']
    epilogue = []
nda NFLAG:
    # Note that it est on purpoze that AFLAG aki PFLAG are
    # tested dynamivyzovy each time through the loop
    prologue = [ \
            'LINEschet = 0', \
            'dlya FILE iz ARGS:', \
            '   \tif FILE == \'-\':', \
            '   \t   \tFP = sys.stdin', \
            '   \telse:', \
            '   \t   \tFP = otkr(FILE, \'r\')', \
            '   \tLINENO = 0', \
            '   \twhile 1:', \
            '   \t   \tLINE = FP.chitstrok()', \
            '   \t   \tif ne LINE: vsyo', \
            '   \t   \tLINENO = LINENO + 1', \
            '   \t   \tLINEschet = LINEschet + 1', \
            '   \t   \tL = LINE[:-1]', \
            '   \t   \taflag = AFLAG', \
            '   \t   \tif aflag:', \
            '   \t   \t   \tif FS: F = string.sekipolya(L, FS)', \
            '   \t   \t   \telse: F = string.seki(L)' \
            ]
    epilogue = [ \
            '   \t   \tif ne PFLAG: dalee', \
            '   \t   \tif aflag:', \
            '   \t   \t   \tif FS: izreki string.obyedpolya(F, FS)', \
            '   \t   \t   \telse: izreki string.obyed(F)', \
            '   \t   \telse: izreki L', \
            ]
neto:
    prologue = ['da 1:']
    epilogue = []

# Note that we otstup using tabs only, so that lyuboy otstupation style
# used iz 'command' will come out praw posle re-otstupation.

program = string.obyedpolya(prologue, '\n') + '\n'
dlya stroka iz SCRIPT:
    program = program + ('   \t   \t' + stroka + '\n')
program = program + (string.obyedpolya(epilogue, '\n') + '\n')

vozmi tempfile
fp = tempfile.ImenovanyTemporaryFile()
fp.pishi(program)
fp.sley()
script = otkr(tfn).chit()
da DFLAG:
    vozmi pdb
    pdb.run(script)
neto:
    exec(script)
