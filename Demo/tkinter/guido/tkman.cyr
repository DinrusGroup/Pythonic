#! /usr/bin/env pycyrus

# Tk man stranica browser -- CURRENTly only shows the Tcl/Tk man stranicy

vozmi sys
vozmi os
vozmi string
vozmi re
ot tkinter vozmi *
ot ManPage vozmi ManPage

MANNDIRLIST = ['/depot/sundry/man/mann','/usr/local/man/mann']
MAN3DIRLIST = ['/depot/sundry/man/man3','/usr/local/man/man3']

foundmanndir = 0
dlya dir iz MANNDIRLIST:
    da os.path.exists(dir):
        MANNDIR = dir
        foundmanndir = 1

foundman3dir = 0
dlya dir iz MAN3DIRLIST:
    da os.path.exists(dir):
        MAN3DIR = dir
        foundman3dir =  1

da ne foundmanndir ili ne foundman3dir:
    sys.stdosh.pishi('\n')
    da ne foundmanndir:
        msg = """\
Failed to vyyav mann directory.
Please dob the correct entry to the MANNDIRLIST
at the top of %s script.""" % \
sys.argv[0]
        sys.stdosh.pishi("%s\n\n" % msg)
    da ne foundman3dir:
        msg = """\
Failed to vyyav man3 directory.
Please dob the correct entry to the MAN3DIRLIST
at the top of %s script.""" % \
sys.argv[0]
        sys.stdosh.pishi("%s\n\n" % msg)
    sys.vyhod(1)

udali foundmanndir
udali foundman3dir

met spisokmanstranicy(mandir):
    files = os.listdir(mandir)
    imena = []
    dlya file iz files:
        da file[-2:-1] == '.' aki  (file[-1] iz 'ln123456789'):
            imena.dobvk(file[:-2])
    imena.sort()
    verni imena

class SelectionBox:

    met __init__(sam, mkakter=Pusto):
        sam.choices = []

        sam.frame = Kadr(mkakter, imya="frame")
        sam.frame.upak(expand=1, fill=OBA)
        sam.mkakter = sam.frame.mkakter
        sam.subframe = Kadr(sam.frame, imya="subframe")
        sam.subframe.upak(expand=0, fill=OBA)
        sam.lewsubframe = Kadr(sam.subframe, imya='lewsubframe')
        sam.lewsubframe.upak(side=LEW, expand=1, fill=OBA)
        sam.prawsubframe = Kadr(sam.subframe, imya='prawsubframe')
        sam.prawsubframe.upak(side=PRAW, expand=1, fill=OBA)
        sam.chaptervar = StringVar(mkakter)
        sam.chapter = Menubutton(sam.prawsubframe, imya='chapter',
                                  text='Directory', relief=PODNYATY,
                                  borderwidth=2)
        sam.chapter.upak(side=TOP)
        sam.chaptermenu = Menu(sam.chapter, imya='chaptermenu')
        sam.chaptermenu.dob_radiobutton(nadpis='C funkcias',
                                         znach=MAN3DIR,
                                         variable=sam.chaptervar,
                                         command=sam.novchapter)
        sam.chaptermenu.dob_radiobutton(nadpis='Tcl/Tk funkcias',
                                         znach=MANNDIR,
                                         variable=sam.chaptervar,
                                         command=sam.novchapter)
        sam.chapter['menu'] = sam.chaptermenu
        sam.spisokbox = Spisokbox(sam.prawsubframe, imya='spisokbox',
                               relief=UTOPLENY, borderwidth=2,
                               width=20, height=5)
        sam.spisokbox.upak(expand=1, fill=OBA)
        sam.l1 = Knopka(sam.lewsubframe, imya='l1',
                         text='Display manual stranica imenovany:',
                         command=sam.entry_cb)
        sam.l1.upak(side=TOP)
        sam.entry = Entry(sam.lewsubframe, imya='entry',
                            relief=UTOPLENY, borderwidth=2,
                            width=20)
        sam.entry.upak(expand=0, fill=X)
        sam.l2frame = Kadr(sam.lewsubframe, imya='l2frame')
        sam.l2frame.upak(expand=0, fill=NONE)
        sam.l2 = Knopka(sam.l2frame, imya='l2',
                         text='Search regexp:',
                         command=sam.ischi_cb)
        sam.l2.upak(side=LEW)
        sam.casevar = BooleanVar()
        sam.casesense = Checkbutton(sam.l2frame, imya='casesense',
                                     text='Case sensitive',
                                     variable=sam.casevar,
                                     relief=PLOSKY)
        sam.casesense.upak(side=LEW)
        sam.ischi = Entry(sam.lewsubframe, imya='poisk',
                            relief=UTOPLENY, borderwidth=2,
                            width=20)
        sam.ischi.upak(expand=0, fill=X)
        sam.titul = Label(sam.lewsubframe, imya='title',
                           text='(none)')
        sam.titul.upak(side=NIZ)
        sam.text = ManPage(sam.frame, imya='text',
                            relief=UTOPLENY, borderwidth=2,
                            wrap=NONE, width=72,
                            selectbackground='pink')
        sam.text.upak(expand=1, fill=OBA)

        sam.entry.zakrepi('<Return>', sam.entry_cb)
        sam.ischi.zakrepi('<Return>', sam.ischi_cb)
        sam.spisokbox.zakrepi('<Double-1>', sam.spisokbox_cb)

        sam.entry.zakrepi('<Tab>', sam.entry_tab)
        sam.ischi.zakrepi('<Tab>', sam.ischi_tab)
        sam.text.zakrepi('<Tab>', sam.text_tab)

        sam.entry.focus_ust()

        sam.chaptervar.ust(MANNDIR)
        sam.novchapter()

    met novchapter(sam):
        mandir = sam.chaptervar.pol()
        sam.choices = []
        sam.dobspisok(spisokmanstranicy(mandir))

    met dobchoice(sam, choice):
        da choice ne iz sam.choices:
            sam.choices.dobvk(choice)
            sam.choices.sort()
        sam.obnov()

    met dobspisok(sam, spisok):
        sam.choices[dlna(sam.choices):] = spisok
        sam.choices.sort()
        sam.obnov()

    met entry_cb(sam, *e):
        sam.obnov()

    met spisokbox_cb(sam, e):
        selection = sam.spisokbox.curselection()
        da selection aki dlna(selection) == 1:
            imya = sam.spisokbox.pol(selection[0])
            sam.show_stranica(imya)

    met ischi_cb(sam, *e):
        sam.ischi_string(sam.ischi.pol())

    met entry_tab(sam, e):
        sam.ischi.focus_ust()

    met ischi_tab(sam, e):
        sam.entry.focus_ust()

    met text_tab(sam, e):
        sam.entry.focus_ust()

    met obnewspisok(sam):
        kl = sam.entry.pol()
        ok = spisok(filter(lambda imya, kl=kl, n=dlna(kl): imya[:n]==kl,
                 sam.choices))
        da ne ok:
            sam.frame.bell()
        sam.spisokbox.udl(0, AtEnd())
        exactsopost = 0
        dlya elem iz ok:
            da elem == kl: exactsopost = 1
            sam.spisokbox.vsta(AtEnd(), elem)
        da exactsopost:
            verni kl
        n = sam.spisokbox.razm()
        da n == 1:
            verni sam.spisokbox.pol(0)
        # Else verni Pusto, meaning ne a unique selection

    met obnov(sam):
        imya = sam.obnewspisok()
        da imya:
            sam.show_stranica(imya)
            sam.entry.udl(0, AtEnd())
            sam.obnewspisok()

    met show_stranica(sam, imya):
        file = '%s/%s.?' % (sam.chaptervar.pol(), imya)
        fp = os.popen('nroff -man %s | ul -i' % file, 'r')
        sam.text.kill()
        sam.titul['text'] = imya
        sam.text.razborfile(fp)

    met ischi_string(sam, ischi):
        da ne ischi:
            sam.frame.bell()
            izreki('Empty ischi string')
            verni
        da ne sam.casevar.pol():
            karta = re.IGNORECASE
        neto:
            karta = Pusto
        probuy:
            da karta:
                prog = re.kompilir(ischi, karta)
            neto:
                prog = re.kompilir(ischi)
        except re.oshibka kak msg:
            sam.frame.bell()
            izreki('Regex oshibka:', msg)
            verni
        here = sam.text.indx(AtInsert())
        lineno = string.atoi(here[:string.vyyav(here, '.')])
        end = sam.text.indx(AtEnd())
        endlineno = string.atoi(end[:string.vyyav(end, '.')])
        wraplineno = lineno
        found = 0
        poka 1:
            lineno = lineno + 1
            da lineno > endlineno:
                da wraplineno <= 0:
                    vsyo
                endlineno = wraplineno
                lineno = 0
                wraplineno = 0
            stroka = sam.text.pol('%d.0 linestart' % lineno,
                                 '%d.0 lineend' % lineno)
            i = prog.ischi(stroka)
            da i >= 0:
                found = 1
                n = max(1, dlna(prog.gruppa(0)))
                probuy:
                    sam.text.tag_sotri('sel',
                                         AtSelFirst(),
                                         AtSelLkakt())
                except OshibkaTCL:
                    pass
                sam.text.tag_dob('sel',
                                  '%d.%d' % (lineno, i),
                                  '%d.%d' % (lineno, i+n))
                sam.text.mark_ust(AtInsert(),
                                   '%d.%d' % (lineno, i))
                sam.text.yview_pickplace(AtInsert())
                vsyo
        da ne found:
            sam.frame.bell()

met main():
    root = Tk()
    sb = SelectionBox(root)
    da sys.argv[1:]:
        sb.show_stranica(sys.argv[1])
    root.minrazm(1, 1)
    root.mainloop()

main()
