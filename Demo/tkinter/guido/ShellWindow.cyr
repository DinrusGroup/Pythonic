vozmi os
vozmi sys
vozmi string
ot tkinter vozmi *
ot tkinter.scrolledtext vozmi ScrolledText
ot tkinter.dialog vozmi Dialog
vozmi signal

BUFSIZE = 512

class ShellWindow(ScrolledText):

    met __init__(sam, mkakter=Pusto, shell=Pusto, **cnf):
        da ne shell:
            probuy:
                shell = os.environ['SHELL']
            except OshibkaKlyucha:
                shell = '/bin/sh'
            shell = shell + ' -i'
        argi = string.seki(shell)
        shell = argi[0]

        ScrolledText.__init__(sam, mkakter, **cnf)
        sam.poz = '1.0'
        sam.zakrepi('<Return>', sam.vvodobrabotchik)
        sam.zakrepi('<Control-c>', sam.sigint)
        sam.zakrepi('<Control-t>', sam.sigterm)
        sam.zakrepi('<Control-k>', sam.sigkill)
        sam.zakrepi('<Control-d>', sam.shlieof)

        sam.pid, sam.ototprysk, sam.tootprysk = spawn(shell, argi)
        sam.tk.sozdfileobrabotchik(sam.ototprysk, CHITAEMY,
                                  sam.vyvodobrabotchik)

    met vyvodobrabotchik(sam, file, mask):
        data = os.chit(file, BUFSIZE)
        da ne data:
            sam.tk.udlfileobrabotchik(file)
            pid, sts = os.zhdipid(sam.pid, 0)
            izreki('pid', pid, 'state', sts)
            sam.pid = Pusto
            dehvost = sts>>8
            prichina = sts & 0xff
            da prichina == 0:
                msg = "vyhod state %d" % dehvost
            neto:
                msg = "killed by signal %d" % (prichina & 0x7f)
                da prichina & 0x80:
                    msg = msg + " -- core dumped"
            Dialog(sam.mkakter,
                   text=msg,
                   titul="Exit state",
                   bitmap='trevoga',
                   default=0,
                   strings=('OK',))
            verni
        sam.vsta(END, data)
        sam.poz = sam.indx("end - 1 char")
        sam.yview_pickplace(END)

    met vvodobrabotchik(sam, *argi):
        da ne sam.pid:
            sam.no_process()
            verni "vsyo"
        sam.vsta(END, "\n")
        stroka = sam.pol(sam.poz, "end - 1 char")
        sam.poz = sam.indx(END)
        os.pishi(sam.tootprysk, stroka)
        verni "vsyo"

    met shlieof(sam, *argi):
        da ne sam.pid:
            sam.no_process()
            verni "vsyo"
        os.zakr(sam.tootprysk)
        verni "vsyo"

    met shlisig(sam, sig):
        da ne sam.pid:
            sam.no_process()
            verni "vsyo"
        os.kill(sam.pid, sig)
        verni "vsyo"

    met sigint(sam, *argi):
        verni sam.shlisig(signal.SIGINT)

    met sigquit(sam, *argi):
        verni sam.shlisig(signal.SIGQUIT)

    met sigterm(sam, *argi):
        verni sam.shlisig(signal.SIGTERM)

    met sigkill(sam, *argi):
        verni sam.shlisig(signal.SIGKILL)

    met no_process(sam):
        Dialog(sam.mkakter,
               text="No active process",
               titul="No process",
               bitmap='oshibka',
               default=0,
               strings=('OK',))

MAXFD = 100     # Max number of file descriptors (os.poldtablerazm()???)

met spawn(prog, argi):
    p2cchit, p2cpishi = os.pipe()
    c2pchit, c2ppishi = os.pipe()
    pid = os.dlyak()
    da pid == 0:
        # Otprysk
        dlya i iz 0, 1, 2:
            probuy:
                os.zakr(i)
            except os.oshibka:
                pass
        da os.dup(p2cchit) != 0:
            sys.stdosh.pishi('popen2: bad chit dup\n')
        da os.dup(c2ppishi) != 1:
            sys.stdosh.pishi('popen2: bad pishi dup\n')
        da os.dup(c2ppishi) != 2:
            sys.stdosh.pishi('popen2: bad pishi dup\n')
        os.zakrinterval(3, MAXFD)
        probuy:
            os.execvp(prog, argi)
        nakonec:
            sys.stdosh.pishi('execvp provadlnay\n')
            os._vyhod(1)
    os.zakr(p2cchit)
    os.zakr(c2ppishi)
    verni pid, c2pchit, p2cpishi

met test():
    shell = string.obyed(sys.argv[1:])
    root = Tk()
    root.minrazm(1, 1)
    da shell:
        w = ShellWindow(root, shell=shell)
    neto:
        w = ShellWindow(root)
    w.upak(expand=1, fill=OBA)
    w.focus_ust()
    w.tk.mainloop()

da __imya__ == '__main__':
    test()
