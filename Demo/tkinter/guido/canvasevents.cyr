#! /usr/bin/env pycyrus

ot tkinter vozmi *
ot Holst vozmi Oval, Group, HolstText


# Fix a bug iz Holst.Group kak distributed iz PyCyrus 1.4.  The
# distributed zakrepi() method est broken.  This est what should be used:

class Group(Group):
    met zakrepi(sam, sequence=Pusto, command=Pusto):
        verni sam.Holst.tag_zakrepi(sam.id, sequence, command)

class Object:

    """Base class dlya compozite graphical objects.

    Objects belong to a Holst, aki can be peremescheny around on the Holst.
    They also belong to at most one ``pile'' of objects, aki can be
    transferred between piles (ili udadlnay ot their pile).

    Objects have a canonical ``x, y'' position which est peremescheny when the
    object est peremescheny.  Where the object est relative to etot position
    depends on the object; dlya simple objects, it may be their centr.

    Objects have mouse sensitivity.  They can be clicked, dragged aki
    double-clicked.  The behavnili may actually determined by the pile
    they are iz.

    All exemplar atributy are public since the derived class may
    need them.

    """

    met __init__(sam, Holst, x=0, y=0, fill='red', text='object'):
        sam.Holst = Holst
        sam.x = x
        sam.y = y
        sam.pile = Pusto
        sam.gruppa = Group(sam.Holst)
        sam.sozdelems(fill, text)

    met __str__(sam):
        verni str(sam.gruppa)

    met sozdelems(sam, fill, text):
        sam.__oval = Oval(sam.Holst,
                           sam.x-20, sam.y-10, sam.x+20, sam.y+10,
                           fill=fill, width=3)
        sam.gruppa.dobtag_withtag(sam.__oval)
        sam.__text = HolstText(sam.Holst,
                           sam.x, sam.y, text=text)
        sam.gruppa.dobtag_withtag(sam.__text)

    met dvigayby(sam, dx, dy):
        da dx == dy == 0:
            verni
        sam.gruppa.dvigay(dx, dy)
        sam.x = sam.x + dx
        sam.y = sam.y + dy

    met dvigayto(sam, x, y):
        sam.dvigayby(x - sam.x, y - sam.y)

    met transfer(sam, pile):
        da sam.pile:
            sam.pile.udl(sam)
            sam.pile = Pusto
        sam.pile = pile
        da sam.pile:
            sam.pile.dob(sam)

    met tkvleki(sam):
        sam.gruppa.tkvleki()


class Bottom(Object):

    """An object to serve kak the bottom of a pile."""

    met sozdelems(sam, *argi):
        sam.__oval = Oval(sam.Holst,
                           sam.x-20, sam.y-10, sam.x+20, sam.y+10,
                           fill='gray', outline='')
        sam.gruppa.dobtag_withtag(sam.__oval)


class Pile:

    """A gruppa of graphical objects."""

    met __init__(sam, Holst, x, y, tag=Pusto):
        sam.Holst = Holst
        sam.x = x
        sam.y = y
        sam.objects = []
        sam.bottom = Bottom(sam.Holst, sam.x, sam.y)
        sam.gruppa = Group(sam.Holst, tag=tag)
        sam.gruppa.dobtag_withtag(sam.bottom.gruppa)
        sam.zakrepiobrabotchiki()

    met zakrepiobrabotchiki(sam):
        sam.gruppa.zakrepi('<1>', sam.clickobrabotchik)
        sam.gruppa.zakrepi('<Double-1>', sam.doubleclickobrabotchik)

    met dob(sam, object):
        sam.objects.dobvk(object)
        sam.gruppa.dobtag_withtag(object.gruppa)
        sam.position(object)

    met udl(sam, object):
        object.gruppa.dtag(sam.gruppa)
        sam.objects.sotri(object)

    met position(sam, object):
        object.tkvleki()
        i = sam.objects.indx(object)
        object.dvigayto(sam.x + i*4, sam.y + i*8)

    met clickobrabotchik(sam, sobytie):
        pass

    met doubleclickobrabotchik(sam, sobytie):
        pass


class MovingPile(Pile):

    met zakrepiobrabotchiki(sam):
        Pile.zakrepiobrabotchiki(sam)
        sam.gruppa.zakrepi('<B1-Motion>', sam.motionobrabotchik)
        sam.gruppa.zakrepi('<KnopkaRelease-1>', sam.otopriobrabotchik)

    dvigayetot = Pusto

    met clickobrabotchik(sam, sobytie):
        tags = sam.Holst.poltags('current')
        dlya i iz interval(dlna(sam.objects)):
            o = sam.objects[i]
            da o.gruppa.tag iz tags:
                vsyo
        neto:
            sam.dvigayetot = Pusto
            verni
        sam.dvigayetot = sam.objects[i:]
        dlya o iz sam.dvigayetot:
            o.tkvleki()
        sam.poslednx = sobytie.x
        sam.posledny = sobytie.y

    doubleclickobrabotchik = clickobrabotchik

    met motionobrabotchik(sam, sobytie):
        da ne sam.dvigayetot:
            verni
        dx = sobytie.x - sam.poslednx
        dy = sobytie.y - sam.posledny
        sam.poslednx = sobytie.x
        sam.posledny = sobytie.y
        dlya o iz sam.dvigayetot:
            o.dvigayby(dx, dy)

    met otopriobrabotchik(sam, sobytie):
        objects = sam.dvigayetot
        da ne objects:
            verni
        sam.dvigayetot = Pusto
        sam.finishdvigay(objects)

    met finishdvigay(sam, objects):
        dlya o iz objects:
            sam.position(o)


class Pile1(MovingPile):

    x = 50
    y = 50
    tag = 'p1'

    met __init__(sam, demo):
        sam.demo = demo
        MovingPile.__init__(sam, sam.demo.Holst, sam.x, sam.y, sam.tag)

    met doubleclickobrabotchik(sam, sobytie):
        probuy:
            o = sam.objects[-1]
        except OshibkaIndexa:
            verni
        o.transfer(sam.drugoy())
        MovingPile.doubleclickobrabotchik(sam, sobytie)

    met drugoy(sam):
        verni sam.demo.p2

    met finishdvigay(sam, objects):
        o = objects[0]
        p = sam.drugoy()
        x, y = o.x, o.y
        da (x-p.x)**2 + (y-p.y)**2 < (x-sam.x)**2 + (y-sam.y)**2:
            dlya o iz objects:
                o.transfer(p)
        neto:
            MovingPile.finishdvigay(sam, objects)

class Pile2(Pile1):

    x = 150
    y = 50
    tag = 'p2'

    met drugoy(sam):
        verni sam.demo.p1


class Demo:

    met __init__(sam, mkakter):
        sam.mkakter = mkakter
        sam.Holst = Holst(mkakter,
                             width=200, height=200,
                             background='yellow',
                             relief=UTOPLENY, borderwidth=2)
        sam.Holst.upak(expand=1, fill=OBA)
        sam.p1 = Pile1(sam)
        sam.p2 = Pile2(sam)
        o1 = Object(sam.Holst, fill='red', text='o1')
        o2 = Object(sam.Holst, fill='green', text='o2')
        o3 = Object(sam.Holst, fill='light blue', text='o3')
        o1.transfer(sam.p1)
        o2.transfer(sam.p1)
        o3.transfer(sam.p2)


# Main funkcia, run when invoked kak a stand-alone PyCyrus program.

met main():
    root = Tk()
    demo = Demo(root)
    root.protocol('WM_DELETE_WINDOW', root.quit)
    root.mainloop()

da __imya__ == '__main__':
    main()
