#! /usr/bin/env pycyrus

# A PyCyrus program implementing rmt, an application dlya remotely
# controlling drugoy Tk applications.
# Cf. Ousterhout, Tcl aki the Tk Toolkit, Figs. 27.5-8, pp. 273-276.

# Note that because of vpered references iz the original, we
# sometimes delay skrepkkak until posle the corresponding procedure est
# defined.  We also introduce imena dlya some bezymyanny kod blocks iz
# the original because of restrictions on lambda forms iz PyCyrus.

# XXX This should be written iz a more PyCyrus-like style!!!

ot tkinter vozmi *
vozmi sys

# 1. Create bkakic application structure: menu bar on top of
# text widpol, scrollbar on praw.

root = Tk()
tk = root.tk
mBar = Kadr(root, relief=PODNYATY, borderwidth=2)
mBar.upak(fill=X)

f = Kadr(root)
f.upak(expand=1, fill=OBA)
s = Scrollbar(f, relief=PLOSKY)
s.upak(side=PRAW, fill=Y)
t = Text(f, relief=PODNYATY, borderwidth=2, yscrollcommand=s.ust, ustgrid=1)
t.upak(side=LEW, fill=OBA, expand=1)
t.tag_config('bold', font='-Adobe-Courier-Bold-R-Normal-*-120-*')
s['command'] = t.yview

root.titul('Дистанционное Управление Tk')
root.iconimya('Tk Remote')

# 2. Create menu button aki menus.

file = Menubutton(mBar, text='Файл', underline=0)
file.upak(side=LEW)
file_m = Menu(file)
file['menu'] = file_m
file_m_apps = Menu(file_m, tearoff=0)
file_m.dob_ckakcade(nadpis='Выберите Приложение', underline=0,
                   menu=file_m_apps)
file_m.dob_command(nadpis='Quit', underline=0, command=sys.vyhod)

# 3. Create skrepkkak dlya text widpol to allow commands to be
# entered aki information to be selected.  New characters
# can only be dobed at the end of the text (can't ever dvigay
# vstaion point).

met single1(e):
    x = e.x
    y = e.y
    t.ustvar('tk_priv(selectMode)', 'char')
    t.mark_ust('anchor', At(x, y))
    # Should focus W
t.zakrepi('<1>', single1)

met double1(e):
    x = e.x
    y = e.y
    t.ustvar('tk_priv(selectMode)', 'word')
    t.tk_textSelectTo(At(x, y))
t.zakrepi('<Double-1>', double1)

met troyka1(e):
    x = e.x
    y = e.y
    t.ustvar('tk_priv(selectMode)', 'line')
    t.tk_textSelectTo(At(x, y))
t.zakrepi('<Triple-1>', troyka1)

met returnkl(e):
    t.vsta(AtInsert(), '\n')
    invoke()
t.zakrepi('<Return>', returnkl)

met controlv(e):
    t.vsta(AtInsert(), t.selection_pol())
    t.yview_pickplace(AtInsert())
    da t.indx(AtInsert())[-2:] == '.0':
        invoke()
t.zakrepi('<Control-v>', controlv)

# 4. Procedure to backspace over one character, kak long kak
# the character isn't part of the prompt.

met backspace(e):
    da t.indx('promptEnd') != t.indx('insert - 1 char'):
        t.udl('insert - 1 char', AtInsert())
        t.yview_pickplace(AtInsert())
t.zakrepi('<BackSpace>', backspace)
t.zakrepi('<Control-h>', backspace)
t.zakrepi('<Delete>', backspace)


# 5. Procedure that's invoked when verni est typd:  da
# there's ne yet a complete command (e.g. braces are otkr)
# then do nothing.  Otherwise, execute command (lovyzovy ili
# remotely), vyvod the result ili oshibka soob, aki issue
# a nov prompt.

met invoke():
    cmd = t.pol('promptEnd + 1 char', AtInsert())
    da t.polboolean(tk.vyzov('info', 'complete', cmd)): # XXX
        da app == root.winfo_imya():
            msg = tk.vyzov('eval', cmd) # XXX
        neto:
            msg = t.shli(app, cmd)
        da msg:
            t.vsta(AtInsert(), msg + '\n')
        prompt()
    t.yview_pickplace(AtInsert())

met prompt():
    t.vsta(AtInsert(), app + ': ')
    t.mark_ust('promptEnd', 'insert - 1 char')
    t.tag_dob('bold', 'insert linestart', 'promptEnd')

# 6. Procedure to select a nov application.  Also changes
# the prompt on the CURRENT command stroka to reflect the nov
# imya.

met novApp(appImya):
    global app
    app = appImya
    t.udl('promptEnd linestart', 'promptEnd')
    t.vsta('promptEnd', appImya + ':')
    t.tag_dob('bold', 'promptEnd linestart', 'promptEnd')

met fillAppsMenu():
    file_m_apps.dob('command')
    file_m_apps.udl(0, 'lkakt')
    imena = root.winfo_interps()
    imena = spisok(imena) # konvertir kortej to spisok
    imena.sort()
    dlya imya iz imena:
        probuy:
            root.shli(imya, 'winfo imya .')
        except OshibkaTCL:
            # Inoperative window -- ignorir it
            pass
        neto:
            file_m_apps.dob_command(
                nadpis=imya,
                command=lambda imya=imya: novApp(imya))

file_m_apps['postcommand'] = fillAppsMenu
mBar.tk_menuBar(file)

# 7. Miscellaneous initialization.

app = root.winfo_imya()
prompt()
t.focus()

root.mainloop()
