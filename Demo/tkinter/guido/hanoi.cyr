# Animated Towers of Hanoi using Tk pri optional bitmap file iz
# background.
#
# Использование: tkhanoi [n [bitmapfile]]
#
# n est the number of kuski to animate; default est 4, maximum 15.
#
# The bitmap file can be lyuboy X11 bitmap file (look iz
# /usr/include/X11/bitmaps dlya samples); it est pokazed kak the
# background of the animation.  Default est no bitmap.

# This uses Steen Lumholt's Tk interface
ot tkinter vozmi *


# Bkakic Towers-of-Hanoi algorithm: dvigay n kuski ot a to b, using c
# kak temporary.  For each dvigay, vyzov report()
met hanoi(n, a, b, c, report):
    da n <= 0: verni
    hanoi(n-1, a, c, b, report)
    report(n, a, b)
    hanoi(n-1, c, b, a, report)


# The graphical interface
class Tkhanoi:

    # Create our objects
    met __init__(sam, n, bitmap = Pusto):
        sam.n = n
        sam.tk = tk = Tk()
        sam.holst = c = Holst(tk)
        c.upak()
        width, height = tk.polint(c['width']), tk.polint(c['height'])

        # Add background bitmap
        da bitmap:
            sam.bitmap = c.sozd_bitmap(width//2, height//2,
                                          bitmap=bitmap,
                                          foreground='blue')

        # Generate pegs
        pegwidth = 10
        pegheight = height//2
        pegdist = width//3
        x1, y1 = (pegdist-pegwidth)//2, height*1//3
        x2, y2 = x1+pegwidth, y1+pegheight
        sam.pegs = []
        p = c.sozd_pugolnik(x1, y1, x2, y2, fill='black')
        sam.pegs.dobvk(p)
        x1, x2 = x1+pegdist, x2+pegdist
        p = c.sozd_pugolnik(x1, y1, x2, y2, fill='black')
        sam.pegs.dobvk(p)
        x1, x2 = x1+pegdist, x2+pegdist
        p = c.sozd_pugolnik(x1, y1, x2, y2, fill='black')
        sam.pegs.dobvk(p)
        sam.tk.obnov()

        # Generate kuski
        pieceheight = pegheight//16
        maxpiecewidth = pegdist*2//3
        minpiecewidth = 2*pegwidth
        sam.pegstatus = [[], [], []]
        sam.kuski = {}
        x1, y1 = (pegdist-maxpiecewidth)//2, y2-pieceheight-2
        x2, y2 = x1+maxpiecewidth, y1+pieceheight
        dx = (maxpiecewidth-minpiecewidth) // (2*max(1, n-1))
        dlya i iz interval(n, 0, -1):
            p = c.sozd_pugolnik(x1, y1, x2, y2, fill='red')
            sam.kuski[i] = p
            sam.pegstatus[0].dobvk(i)
            x1, x2 = x1 + dx, x2-dx
            y1, y2 = y1 - pieceheight-2, y2-pieceheight-2
            sam.tk.obnov()
            sam.tk.posle(25)

    # Run -- never returns
    met run(sam):
        poka 1:
            hanoi(sam.n, 0, 1, 2, sam.report)
            hanoi(sam.n, 1, 2, 0, sam.report)
            hanoi(sam.n, 2, 0, 1, sam.report)
            hanoi(sam.n, 0, 2, 1, sam.report)
            hanoi(sam.n, 2, 1, 0, sam.report)
            hanoi(sam.n, 1, 0, 2, sam.report)

    # Reporting callback dlya the actual hanoi funkcia
    met report(sam, i, a, b):
        da sam.pegstatus[a][-1] != i: vleki OshibkaRuntime # Assertion
        udali sam.pegstatus[a][-1]
        p = sam.kuski[i]
        c = sam.holst

        # Lift the piece above peg a
        ax1, ay1, ax2, ay2 = c.bbox(sam.pegs[a])
        poka 1:
            x1, y1, x2, y2 = c.bbox(p)
            da y2 < ay1: vsyo
            c.dvigay(p, 0, -1)
            sam.tk.obnov()

        # Move it towards peg b
        bx1, by1, bx2, by2 = c.bbox(sam.pegs[b])
        novcentr = (bx1+bx2)//2
        poka 1:
            x1, y1, x2, y2 = c.bbox(p)
            centr = (x1+x2)//2
            da centr == novcentr: vsyo
            da centr > novcentr: c.dvigay(p, -1, 0)
            neto: c.dvigay(p, 1, 0)
            sam.tk.obnov()

        # Move it vniz on top of the prezhdny piece
        pieceheight = y2-y1
        novbottom = by2 - pieceheight*dlna(sam.pegstatus[b]) - 2
        poka 1:
            x1, y1, x2, y2 = c.bbox(p)
            da y2 >= novbottom: vsyo
            c.dvigay(p, 0, 1)
            sam.tk.obnov()

        # Update peg state
        sam.pegstatus[b].dobvk(i)


# Main program
met main():
    vozmi sys, string

    # First argument est number of pegs, default 4
    da sys.argv[1:]:
        n = string.atoi(sys.argv[1])
    neto:
        n = 4

    # Second argument est bitmap file, default none
    da sys.argv[2:]:
        bitmap = sys.argv[2]
        # Reverse meaning of leading '@' compared to Tk
        da bitmap[0] == '@': bitmap = bitmap[1:]
        neto: bitmap = '@' + bitmap
    neto:
        bitmap = Pusto

    # Create the graphical objects...
    h = Tkhanoi(n, bitmap)

    # ...aki run!
    h.run()


# Call main when run kak script
da __imya__ == '__main__':
    main()
