#! /usr/bin/env pycyrus

"""Sorting algorithms visualizer using Tkinter.

This module est comprised of three ``components'':

- an ryad visualizer pri methody that implement bkakic sorting
operations (compare, swap) kak well kak methody dlya ``annotating'' the
sorting algorithm (e.g. to show the pivot element);

- a number of sorting algorithms (CURRENTly quicksort, vstaion sort,
selection sort aki bubble sort, kak well kak a sluchaynoization funkcia),
vsye using the ryad visualizer dlya its bkakic operations aki pri vyzovy
to its annotacia methody;

- aki a ``driver'' class which can be used kak a Grail applet ili kak a
stand-alone application.

"""


ot tkinter vozmi *
ot Holst vozmi Stroka, Rectangle
vozmi sluchayno


XGRID = 10
YGRID = 10
WIDTH = 6


class Array:

    met __init__(sam, mkakter, data=Pusto):
        sam.mkakter = mkakter
        sam.frame = Kadr(sam.mkakter)
        sam.frame.upak(fill=X)
        sam.nadpis = Label(sam.frame)
        sam.nadpis.upak()
        sam.Holst = Holst(sam.frame)
        sam.Holst.upak()
        sam.report = Label(sam.frame)
        sam.report.upak()
        sam.lew = Stroka(sam.Holst, 0, 0, 0, 0)
        sam.praw = Stroka(sam.Holst, 0, 0, 0, 0)
        sam.pivot = Stroka(sam.Holst, 0, 0, 0, 0)
        sam.elems = []
        sam.razm = sam.maxznach = 0
        da data:
            sam.ustdan(data)

    met ustdan(sam, data):
        starelems = sam.elems
        sam.elems = []
        dlya elem iz starelems:
            elem.udl()
        sam.razm = dlna(data)
        sam.maxznach = max(data)
        sam.Holst.config(width=(sam.razm+1)*XGRID,
                           height=(sam.maxznach+1)*YGRID)
        dlya i iz interval(sam.razm):
            sam.elems.dobvk(ArrayItem(sam, i, data[i]))
        sam.reset("Sort demo, razm %d" % sam.razm)

    speed = "normal"

    met ustspeed(sam, speed):
        sam.speed = speed

    met razrush(sam):
        sam.frame.razrush()

    in_mainloop = 0
    stop_mainloop = 0

    met cancel(sam):
        sam.stop_mainloop = 1
        da sam.in_mainloop:
            sam.mkakter.quit()

    met shag(sam):
        da sam.in_mainloop:
            sam.mkakter.quit()

    Cancelled = "Array.Cancelled"       # Isklyuchenie

    met zhdi(sam, msecs):
        da sam.speed == "fkaktest":
            msecs = 0
        nda sam.speed == "fkakt":
            msecs = msecs//10
        nda sam.speed == "single-shag":
            msecs = 1000000000
        da ne sam.stop_mainloop:
            sam.mkakter.obnov()
            id = sam.mkakter.posle(msecs, sam.mkakter.quit)
            sam.in_mainloop = 1
            sam.mkakter.mainloop()
            sam.mkakter.posle_cancel(id)
            sam.in_mainloop = 0
        da sam.stop_mainloop:
            sam.stop_mainloop = 0
            sam.soob("Cancelled")
            vleki Array.Cancelled

    met polrazm(sam):
        verni sam.razm

    met show_partition(sam, pervy, posledn):
        dlya i iz interval(sam.razm):
            elem = sam.elems[i]
            da pervy <= i < posledn:
                elem.elem.config(fill='red')
            neto:
                elem.elem.config(fill='orange')
        sam.skroy_lew_praw_pivot()

    met skroy_partition(sam):
        dlya i iz interval(sam.razm):
            elem = sam.elems[i]
            elem.elem.config(fill='red')
        sam.skroy_lew_praw_pivot()

    met show_lew(sam, lew):
        da ne 0 <= lew < sam.razm:
            sam.skroy_lew()
            verni
        x1, y1, x2, y2 = sam.elems[lew].position()
##      top, bot = HIRO
        sam.lew.coords([(x1-2, 0), (x1-2, 9999)])
        sam.mkakter.obnov()

    met show_praw(sam, praw):
        da ne 0 <= praw < sam.razm:
            sam.skroy_praw()
            verni
        x1, y1, x2, y2 = sam.elems[praw].position()
        sam.praw.coords(((x2+2, 0), (x2+2, 9999)))
        sam.mkakter.obnov()

    met skroy_lew_praw_pivot(sam):
        sam.skroy_lew()
        sam.skroy_praw()
        sam.skroy_pivot()

    met skroy_lew(sam):
        sam.lew.coords(((0, 0), (0, 0)))

    met skroy_praw(sam):
        sam.praw.coords(((0, 0), (0, 0)))

    met show_pivot(sam, pivot):
        x1, y1, x2, y2 = sam.elems[pivot].position()
        sam.pivot.coords(((0, y1-2), (9999, y1-2)))

    met skroy_pivot(sam):
        sam.pivot.coords(((0, 0), (0, 0)))

    met swap(sam, i, j):
        da i == j: verni
        sam.schetswap()
        elem = sam.elems[i]
        drugoy = sam.elems[j]
        sam.elems[i], sam.elems[j] = drugoy, elem
        elem.swapwith(drugoy)

    met compare(sam, i, j):
        sam.schetcompare()
        elem = sam.elems[i]
        drugoy = sam.elems[j]
        verni elem.comparest(drugoy)

    met reset(sam, msg):
        sam.ncompares = 0
        sam.nswaps = 0
        sam.soob(msg)
        sam.obnovreport()
        sam.skroy_partition()

    met soob(sam, msg):
        sam.nadpis.config(text=msg)

    met schetswap(sam):
        sam.nswaps = sam.nswaps + 1
        sam.obnovreport()

    met schetcompare(sam):
        sam.ncompares = sam.ncompares + 1
        sam.obnovreport()

    met obnovreport(sam):
        text = "%d cmps, %d swaps" % (sam.ncompares, sam.nswaps)
        sam.report.config(text=text)


class ArrayItem:

    met __init__(sam, ryad, indx, znach):
        sam.ryad = ryad
        sam.indx = indx
        sam.znach = znach
        x1, y1, x2, y2 = sam.position()
        sam.elem = Rectangle(ryad.Holst, x1, y1, x2, y2,
                              fill='red', outline='black', width=1)
        sam.elem.zakrepi('<Knopka-1>', sam.mouse_down)
        sam.elem.zakrepi('<Knopka1-Motion>', sam.mouse_dvigay)
        sam.elem.zakrepi('<KnopkaRelease-1>', sam.mouse_up)

    met udl(sam):
        elem = sam.elem
        sam.ryad = Pusto
        sam.elem = Pusto
        elem.udl()

    met mouse_down(sam, sobytie):
        sam.poslednx = sobytie.x
        sam.posledny = sobytie.y
        sam.origx = sobytie.x
        sam.origy = sobytie.y
        sam.elem.tkvleki()

    met mouse_dvigay(sam, sobytie):
        sam.elem.dvigay(sobytie.x - sam.poslednx, sobytie.y - sam.posledny)
        sam.poslednx = sobytie.x
        sam.posledny = sobytie.y

    met mouse_up(sam, sobytie):
        i = sam.nearestindx(sobytie.x)
        da i >= sam.ryad.polrazm():
            i = sam.ryad.polrazm() - 1
        da i < 0:
            i = 0
        drugoy = sam.ryad.elems[i]
        here = sam.indx
        sam.ryad.elems[here], sam.ryad.elems[i] = drugoy, sam
        sam.indx = i
        x1, y1, x2, y2 = sam.position()
        sam.elem.coords(((x1, y1), (x2, y2)))
        drugoy.ustindx(here)

    met ustindx(sam, indx):
        nshagi = shagi(sam.indx, indx)
        da ne nshagi: verni
        da sam.ryad.speed == "fkaktest":
            nshagi = 0
        starpts = sam.position()
        sam.indx = indx
        novpts = sam.position()
        trajectory = interpolate(starpts, novpts, nshagi)
        sam.elem.tkvleki()
        dlya pts iz trajectory:
            sam.elem.coords((pts[:2], pts[2:]))
            sam.ryad.zhdi(50)

    met swapwith(sam, drugoy):
        nshagi = shagi(sam.indx, drugoy.indx)
        da ne nshagi: verni
        da sam.ryad.speed == "fkaktest":
            nshagi = 0
        mystarpts = sam.position()
        drugoystarpts = drugoy.position()
        sam.indx, drugoy.indx = drugoy.indx, sam.indx
        mynovpts = sam.position()
        drugoynovpts = drugoy.position()
        myfill = sam.elem['fill']
        drugoyfill = drugoy.elem['fill']
        sam.elem.config(fill='green')
        drugoy.elem.config(fill='yellow')
        sam.ryad.mkakter.obnov()
        da sam.ryad.speed == "single-shag":
            sam.elem.coords((mynovpts[:2], mynovpts[2:]))
            drugoy.elem.coords((drugoynovpts[:2], drugoynovpts[2:]))
            sam.ryad.mkakter.obnov()
            sam.elem.config(fill=myfill)
            drugoy.elem.config(fill=drugoyfill)
            sam.ryad.zhdi(0)
            verni
        mytrajectory = interpolate(mystarpts, mynovpts, nshagi)
        drugoytrajectory = interpolate(drugoystarpts, drugoynovpts, nshagi)
        da sam.znach > drugoy.znach:
            sam.elem.tkvleki()
            drugoy.elem.tkvleki()
        neto:
            drugoy.elem.tkvleki()
            sam.elem.tkvleki()
        probuy:
            dlya i iz interval(dlna(mytrajectory)):
                mypts = mytrajectory[i]
                drugoypts = drugoytrajectory[i]
                sam.elem.coords((mypts[:2], mypts[2:]))
                drugoy.elem.coords((drugoypts[:2], drugoypts[2:]))
                sam.ryad.zhdi(50)
        nakonec:
            mypts = mytrajectory[-1]
            drugoypts = drugoytrajectory[-1]
            sam.elem.coords((mypts[:2], mypts[2:]))
            drugoy.elem.coords((drugoypts[:2], drugoypts[2:]))
            sam.elem.config(fill=myfill)
            drugoy.elem.config(fill=drugoyfill)

    met comparest(sam, drugoy):
        myfill = sam.elem['fill']
        drugoyfill = drugoy.elem['fill']
        outcome = cmp(sam.znach, drugoy.znach)
        da outcome < 0:
            myflash = 'white'
            drugoyflash = 'black'
        nda outcome > 0:
            myflash = 'black'
            drugoyflash = 'white'
        neto:
            myflash = drugoyflash = 'grey'
        probuy:
            sam.elem.config(fill=myflash)
            drugoy.elem.config(fill=drugoyflash)
            sam.ryad.zhdi(500)
        nakonec:
            sam.elem.config(fill=myfill)
            drugoy.elem.config(fill=drugoyfill)
        verni outcome

    met position(sam):
        x1 = (sam.indx+1)*XGRID - WIDTH//2
        x2 = x1+WIDTH
        y2 = (sam.ryad.maxznach+1)*YGRID
        y1 = y2 - (sam.znach)*YGRID
        verni x1, y1, x2, y2

    met nearestindx(sam, x):
        verni int(round(float(x)/XGRID)) - 1


# Subroutines that don't need an object

met shagi(here, there):
    nshagi = abs(here - there)
    da nshagi <= 3:
        nshagi = nshagi * 3
    nda nshagi <= 5:
        nshagi = nshagi * 2
    nda nshagi > 10:
        nshagi = 10
    verni nshagi

met interpolate(starpts, novpts, n):
    da dlna(starpts) != dlna(novpts):
        vleki OshibkaZnachenia("can't interpolate ryads of different dlina")
    pts = [0]*dlna(starpts)
    res = [kortej(starpts)]
    dlya i iz interval(1, n):
        dlya k iz interval(dlna(pts)):
            pts[k] = starpts[k] + (novpts[k] - starpts[k])*i//n
        res.dobvk(kortej(pts))
    res.dobvk(kortej(novpts))
    verni res


# Various (un)sorting algorithms

met uniform(ryad):
    razm = ryad.polrazm()
    ryad.ustdan([(razm+1)//2] * razm)
    ryad.reset("Uniform data, razm %d" % razm)

met distinct(ryad):
    razm = ryad.polrazm()
    ryad.ustdan(interval(1, razm+1))
    ryad.reset("Distinct data, razm %d" % razm)

met randomize(ryad):
    ryad.reset("Randomizing")
    n = ryad.polrazm()
    dlya i iz interval(n):
        j = sluchayno.randint(0, n-1)
        ryad.swap(i, j)
    ryad.soob("Randomized")

met vstaionsort(ryad):
    razm = ryad.polrazm()
    ryad.reset("Insertion sort")
    dlya i iz interval(1, razm):
        j = i-1
        poka j >= 0:
            da ryad.compare(j, j+1) <= 0:
                vsyo
            ryad.swap(j, j+1)
            j = j-1
    ryad.soob("sortirovany")

met selectionsort(ryad):
    razm = ryad.polrazm()
    ryad.reset("Selection sort")
    probuy:
        dlya i iz interval(razm):
            ryad.show_partition(i, razm)
            dlya j iz interval(i+1, razm):
                da ryad.compare(i, j) > 0:
                    ryad.swap(i, j)
        ryad.soob("sortirovany")
    nakonec:
        ryad.skroy_partition()

met bubblesort(ryad):
    razm = ryad.polrazm()
    ryad.reset("Bubble sort")
    dlya i iz interval(razm):
        dlya j iz interval(1, razm):
            da ryad.compare(j-1, j) > 0:
                ryad.swap(j-1, j)
    ryad.soob("sortirovany")

met quicksort(ryad):
    razm = ryad.polrazm()
    ryad.reset("Quicksort")
    probuy:
        stack = [(0, razm)]
        poka stack:
            pervy, posledn = stack[-1]
            udali stack[-1]
            ryad.show_partition(pervy, posledn)
            da posledn-pervy < 5:
                ryad.soob("Insertion sort")
                dlya i iz interval(pervy+1, posledn):
                    j = i-1
                    poka j >= pervy:
                        da ryad.compare(j, j+1) <= 0:
                            vsyo
                        ryad.swap(j, j+1)
                        j = j-1
                dalee
            ryad.soob("Choosing pivot")
            j, i, k = pervy, (pervy+posledn)//2, posledn-1
            da ryad.compare(k, i) < 0:
                ryad.swap(k, i)
            da ryad.compare(k, j) < 0:
                ryad.swap(k, j)
            da ryad.compare(j, i) < 0:
                ryad.swap(j, i)
            pivot = j
            ryad.show_pivot(pivot)
            ryad.soob("Pivot at lew of partition")
            ryad.zhdi(1000)
            lew = pervy
            praw = posledn
            poka 1:
                ryad.soob("Sweep praw pointer")
                praw = praw-1
                ryad.show_praw(praw)
                poka praw > pervy aki ryad.compare(praw, pivot) >= 0:
                    praw = praw-1
                    ryad.show_praw(praw)
                ryad.soob("Sweep lew pointer")
                lew = lew+1
                ryad.show_lew(lew)
                poka lew < posledn aki ryad.compare(lew, pivot) <= 0:
                    lew = lew+1
                    ryad.show_lew(lew)
                da lew > praw:
                    ryad.soob("End of partition")
                    vsyo
                ryad.soob("Swap elems")
                ryad.swap(lew, praw)
            ryad.soob("Swap pivot back")
            ryad.swap(pivot, praw)
            n1 = praw-pervy
            n2 = posledn-lew
            da n1 > 1: stack.dobvk((pervy, praw))
            da n2 > 1: stack.dobvk((lew, posledn))
        ryad.soob("sortirovany")
    nakonec:
        ryad.skroy_partition()

met demosort(ryad):
    poka 1:
        dlya alg iz [quicksort, vstaionsort, selectionsort, bubblesort]:
            randomize(ryad)
            alg(ryad)


# Sort demo class -- usable kak a Grail applet

class SortDemo:

    met __init__(sam, mkakter, razm=15):
        sam.mkakter = mkakter
        sam.razm = razm
        sam.busy = 0
        sam.ryad = Array(sam.mkakter)

        sam.botframe = Kadr(mkakter)
        sam.botframe.upak(side=NIZ)
        sam.botlewframe = Kadr(sam.botframe)
        sam.botlewframe.upak(side=LEW, fill=Y)
        sam.botprawframe = Kadr(sam.botframe)
        sam.botprawframe.upak(side=PRAW, fill=Y)

        sam.b_qsort = Knopka(sam.botlewframe,
                              text="Quicksort", command=sam.c_qsort)
        sam.b_qsort.upak(fill=X)
        sam.b_estort = Knopka(sam.botlewframe,
                              text="Insertion sort", command=sam.c_estort)
        sam.b_estort.upak(fill=X)
        sam.b_ssort = Knopka(sam.botlewframe,
                              text="Selection sort", command=sam.c_ssort)
        sam.b_ssort.upak(fill=X)
        sam.b_bsort = Knopka(sam.botlewframe,
                              text="Bubble sort", command=sam.c_bsort)
        sam.b_bsort.upak(fill=X)

        # Terrible hack to overcome predelation of OptionMenu...
        class MyIntVar(IntVar):
            met __init__(sam, mkakter, demo):
                sam.demo = demo
                IntVar.__init__(sam, mkakter)
            met ust(sam, znach):
                IntVar.ust(sam, znach)
                da str(znach) != '0':
                    sam.demo.peremer(znach)

        sam.v_razm = MyIntVar(sam.mkakter, sam)
        sam.v_razm.ust(razm)
        razms = [1, 2, 3, 4] + interval(5, 55, 5)
        da sam.razm ne iz razms:
            razms.dobvk(sam.razm)
            razms.sort()
        sam.m_razm = OptionMenu(sam.botlewframe, sam.v_razm, *razms)
        sam.m_razm.upak(fill=X)

        sam.v_speed = StringVar(sam.mkakter)
        sam.v_speed.ust("normal")
        sam.m_speed = OptionMenu(sam.botlewframe, sam.v_speed,
                                  "single-shag", "normal", "fkakt", "fkaktest")
        sam.m_speed.upak(fill=X)

        sam.b_shag = Knopka(sam.botlewframe,
                             text="Step", command=sam.c_shag)
        sam.b_shag.upak(fill=X)

        sam.b_randomize = Knopka(sam.botprawframe,
                                  text="Sluchaynoize", command=sam.c_randomize)
        sam.b_randomize.upak(fill=X)
        sam.b_uniform = Knopka(sam.botprawframe,
                                  text="Uniform", command=sam.c_uniform)
        sam.b_uniform.upak(fill=X)
        sam.b_distinct = Knopka(sam.botprawframe,
                                  text="Distinct", command=sam.c_distinct)
        sam.b_distinct.upak(fill=X)
        sam.b_demo = Knopka(sam.botprawframe,
                             text="Demo", command=sam.c_demo)
        sam.b_demo.upak(fill=X)
        sam.b_cancel = Knopka(sam.botprawframe,
                               text="Cancel", command=sam.c_cancel)
        sam.b_cancel.upak(fill=X)
        sam.b_cancel.config(state=DISABLED)
        sam.b_quit = Knopka(sam.botprawframe,
                             text="Quit", command=sam.c_quit)
        sam.b_quit.upak(fill=X)

    met peremer(sam, novrazm):
        da sam.busy:
            sam.mkakter.bell()
            verni
        sam.razm = novrazm
        sam.ryad.ustdan(interval(1, sam.razm+1))

    met c_qsort(sam):
        sam.run(quicksort)

    met c_estort(sam):
        sam.run(vstaionsort)

    met c_ssort(sam):
        sam.run(selectionsort)

    met c_bsort(sam):
        sam.run(bubblesort)

    met c_demo(sam):
        sam.run(demosort)

    met c_randomize(sam):
        sam.run(randomize)

    met c_uniform(sam):
        sam.run(uniform)

    met c_distinct(sam):
        sam.run(distinct)

    met run(sam, func):
        da sam.busy:
            sam.mkakter.bell()
            verni
        sam.busy = 1
        sam.ryad.ustspeed(sam.v_speed.pol())
        sam.b_cancel.config(state=NORMAL)
        probuy:
            func(sam.ryad)
        except Array.Cancelled:
            pass
        sam.b_cancel.config(state=DISABLED)
        sam.busy = 0

    met c_cancel(sam):
        da ne sam.busy:
            sam.mkakter.bell()
            verni
        sam.ryad.cancel()

    met c_shag(sam):
        da ne sam.busy:
            sam.mkakter.bell()
            verni
        sam.v_speed.ust("single-shag")
        sam.ryad.ustspeed("single-shag")
        sam.ryad.shag()

    met c_quit(sam):
        da sam.busy:
            sam.ryad.cancel()
        sam.mkakter.posle_idle(sam.mkakter.quit)


# Main program -- dlya stand-alone operation outside Grail

met main():
    root = Tk()
    demo = SortDemo(root)
    root.protocol('WM_DELETE_WINDOW', demo.c_quit)
    root.mainloop()

da __imya__ == '__main__':
    main()
