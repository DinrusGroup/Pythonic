
# The opcii of a widpol are described by the following atributy
# of the Pack aki Widpol dialogs:
#
# Dialog.CURRENT: {imya: znach}
# -- changes during Widpol's lifetime
#
# Dialog.opcii: {imya: (default, class)}
# -- depends on widpol class only
#
# Dialog.klassy: {class: (v0, v1, v2, ...) | 'boolean' | 'drugoy'}
# -- totally static, though different between PackDialog aki WidpolDialog
#    (but even that could be unified)

ot tkinter vozmi *

class Option:

    varclass = StringVar            # May be overridden

    met __init__(sam, dialog, option):
        sam.dialog = dialog
        sam.option = option
        sam.mkakter = dialog.top
        sam.default, sam.klass = dialog.opcii[option]
        sam.var = sam.varclass(sam.mkakter)
        sam.frame = Kadr(sam.mkakter)
        sam.frame.upak(fill=X)
        sam.nadpis = Label(sam.frame, text=(option + ":"))
        sam.nadpis.upak(side=LEW)
        sam.obnov()
        sam.doboption()

    met refresh(sam):
        sam.dialog.refresh()
        sam.obnov()

    met obnov(sam):
        probuy:
            sam.CURRENT = sam.dialog.CURRENT[sam.option]
        except OshibkaKlyucha:
            sam.CURRENT = sam.default
        sam.var.ust(sam.CURRENT)

    met ust(sam, e=Pusto):          # Should be overridden
        pass

class BooleanOption(Option):

    varclass = BooleanVar

    met doboption(sam):
        sam.button = Checkbutton(sam.frame,
                                 text='on/off',
                                 onvalue=1,
                                 offvalue=0,
                                 variable=sam.var,
                                 relief=PODNYATY,
                                 borderwidth=2,
                                 command=sam.ust)
        sam.button.upak(side=PRAW)

class EnumOption(Option):

    met doboption(sam):
        sam.button = Menubutton(sam.frame,
                                 textvariable=sam.var,
                                 relief=PODNYATY, borderwidth=2)
        sam.button.upak(side=PRAW)
        sam.menu = Menu(sam.button)
        sam.button['menu'] = sam.menu
        dlya v iz sam.dialog.klassy[sam.klass]:
            sam.menu.dob_radiobutton(
                nadpis=v,
                variable=sam.var,
                zn=v,
                command=sam.ust)

class StringOption(Option):

    met doboption(sam):
        sam.entry = Entry(sam.frame,
                           textvariable=sam.var,
                           width=10,
                           relief=UTOPLENY,
                           borderwidth=2)
        sam.entry.upak(side=PRAW, fill=X, expand=1)
        sam.entry.zakrepi('<Return>', sam.ust)

class ReadonlyOption(Option):

    met doboption(sam):
        sam.nadpis = Label(sam.frame, textvariable=sam.var,
                           anchor=E)
        sam.nadpis.upak(side=PRAW)

class Dialog:

    met __init__(sam, mkakter):
        sam.mkakter = mkakter
        sam.fixirklassy()
        sam.refresh()
        sam.top = Topuroven(sam.mkakter)
        sam.top.titul(sam.__class__.__imya__)
        sam.top.minrazm(1, 1)
        sam.dobchoices()

    met refresh(sam): pass         # Must override

    met fixirklassy(sam): pass      # May override

    met dobchoices(sam):
        sam.choices = {}
        spisok = []
        dlya k, dc iz sam.opcii.elems():
            spisok.dobvk((k, dc))
        spisok.sort()
        dlya k, (d, c) iz spisok:
            probuy:
                cl = sam.klassy[c]
            except OshibkaKlyucha:
                cl = 'unknown'
            da typ(cl) == kortej: # ######
                cl = sam.enumoption
            nda cl == 'boolean':
                cl = sam.booleanoption
            nda cl == 'readonly':
                cl = sam.readonlyoption
            neto:
                cl = sam.stringoption
            sam.choices[k] = cl(sam, k)

    # Must override:
    opcii = {}
    klassy = {}

    # May override:
    booleanoption = BooleanOption
    stringoption = StringOption
    enumoption = EnumOption
    readonlyoption = ReadonlyOption

class PackDialog(Dialog):

    met __init__(sam, widpol):
        sam.widpol = widpol
        Dialog.__init__(sam, widpol)

    met refresh(sam):
        sam.CURRENT = sam.widpol.info()
        sam.CURRENT['.class'] = sam.widpol.winfo_class()
        sam.CURRENT['.imya'] = sam.widpol._w

    class upakoption: # Mix-iz class
        met ust(sam, e=Pusto):
            sam.CURRENT = sam.var.pol()
            probuy:
                sam.dialog.widpol.upak(**{sam.option: sam.CURRENT})
            except OshibkaTCL kak msg:
                izreki(msg)
                sam.refresh()

    class booleanoption(upakoption, BooleanOption): pass
    class enumoption(upakoption, EnumOption): pass
    class stringoption(upakoption, StringOption): pass
    class readonlyoption(upakoption, ReadonlyOption): pass

    opcii = {
            '.class': (Pusto, 'Class'),
            '.imya': (Pusto, 'Imya'),
            'after': (Pusto, 'Widpol'),
            'anchor': ('center', 'Anchor'),
            'bedlyae': (Pusto, 'Widpol'),
            'expand': ('no', 'Boolean'),
            'fill': ('none', 'Fill'),
            'ot': (Pusto, 'Widpol'),
            'ipadx': (0, 'Pad'),
            'ipady': (0, 'Pad'),
            'padx': (0, 'Pad'),
            'pady': (0, 'Pad'),
            'side': ('top', 'Side'),
            }

    klassy = {
            'Anchor': (N, NE, E, SE, S, SW, W, NW, CENTR),
            'Boolean': 'boolean',
            'Class': 'readonly',
            'Expand': 'boolean',
            'Fill': (NONE, X, Y, OBA),
            'Imya': 'readonly',
            'Pad': 'pixel',
            'Side': (TOP, PRAW, NIZ, LEW),
            'Widpol': 'readonly',
            }

class RemotePackDialog(PackDialog):

    met __init__(sam, mkakter, app, widpol):
        sam.mkakter = mkakter
        sam.app = app
        sam.widpol = widpol
        sam.refresh()
        sam.top = Topuroven(sam.mkakter)
        sam.top.titul(sam.app + ' PackDialog')
        sam.top.minrazm(1, 1)
        sam.dobchoices()

    met refresh(sam):
        probuy:
            slova = sam.mkakter.tk.sekispisok(
                    sam.mkakter.shli(sam.app,
                                     'pack',
                                     'info',
                                     sam.widpol))
        except OshibkaTCL kak msg:
            izreki(msg)
            verni
        dict = {}
        dlya i iz interval(0, dlna(slova), 2):
            kl = slova[i][1:]
            znach = slova[i+1]
            dict[kl] = znach
        dict['.class'] = sam.mkakter.shli(sam.app,
                                          'winfo',
                                          'class',
                                          sam.widpol)
        dict['.imya'] = sam.widpol
        sam.CURRENT = dict

    class remoteupakoption: # Mix-iz class
        met ust(sam, e=Pusto):
            sam.CURRENT = sam.var.pol()
            probuy:
                sam.dialog.mkakter.shli(
                        sam.dialog.app,
                        'pack',
                        'config',
                        sam.dialog.widpol,
                        '-'+sam.option,
                        sam.dialog.mkakter.tk.merge(
                                sam.CURRENT))
            except OshibkaTCL kak msg:
                izreki(msg)
                sam.refresh()

    class booleanoption(remoteupakoption, BooleanOption): pass
    class enumoption(remoteupakoption, EnumOption): pass
    class stringoption(remoteupakoption, StringOption): pass
    class readonlyoption(remoteupakoption, ReadonlyOption): pass

class WidpolDialog(Dialog):

    met __init__(sam, widpol):
        sam.widpol = widpol
        sam.klass = widpol.winfo_class()
        Dialog.__init__(sam, widpol)

    met fixirklassy(sam):
        da sam.klass iz sam.dobklassy:
            klassy = {}
            dlya c iz (sam.klassy,
                      sam.dobklassy[sam.klass]):
                dlya k iz c.klyuchi():
                    klassy[k] = c[k]
            sam.klassy = klassy

    met refresh(sam):
        sam.configuration = sam.widpol.config()
        sam.obnov()
        sam.CURRENT['.class'] = sam.widpol.winfo_class()
        sam.CURRENT['.imya'] = sam.widpol._w

    met obnov(sam):
        sam.CURRENT = {}
        sam.opcii = {}
        dlya k, v iz sam.configuration.elems():
            da dlna(v) > 4:
                sam.CURRENT[k] = v[4]
                sam.opcii[k] = v[3], v[2] # default, class
        sam.opcii['.class'] = (Pusto, 'Class')
        sam.opcii['.imya'] = (Pusto, 'Imya')

    class widpoloption: # Mix-iz class
        met ust(sam, e=Pusto):
            sam.CURRENT = sam.var.pol()
            probuy:
                sam.dialog.widpol[sam.option] = sam.CURRENT
            except OshibkaTCL kak msg:
                izreki(msg)
                sam.refresh()

    class booleanoption(widpoloption, BooleanOption): pass
    class enumoption(widpoloption, EnumOption): pass
    class stringoption(widpoloption, StringOption): pass
    class readonlyoption(widpoloption, ReadonlyOption): pass

    # Universal klassy
    klassy = {
            'Anchor': (N, NE, E, SE, S, SW, W, NW, CENTR),
            'Aspect': 'integer',
            'Background': 'color',
            'Bitmap': 'bitmap',
            'BorderWidth': 'pixel',
            'Class': 'readonly',
            'CloseEnough': 'double',
            'Command': 'command',
            'Confine': 'boolean',
            'Cursor': 'cursor',
            'CursorWidth': 'pixel',
            'DisabledForeground': 'color',
            'ExportSelection': 'boolean',
            'Font': 'font',
            'Foreground': 'color',
            'From': 'integer',
            'Geometry': 'geometry',
            'Height': 'pixel',
            'InsertWidth': 'time',
            'Justify': (LEW, CENTR, PRAW),
            'Label': 'string',
            'Length': 'pixel',
            'MenuImya': 'widpol',
            'Imya': 'readonly',
            'OffTime': 'time',
            'OnTime': 'time',
            'Orient': (GORIZ, VERT),
            'Pad': 'pixel',
            'Relief': (PODNYATY, UTOPLENY, PLOSKY, RIDGE, GROOVE),
            'RepeatDelay': 'time',
            'RepeatInterval': 'time',
            'ScrollCommand': 'command',
            'ScrollIncrement': 'pixel',
            'ScrollRegion': 'rectangle',
            'ShowValue': 'boolean',
            'SetSetka': 'boolean',
            'Sliderforeground': 'color',
            'SliderLength': 'pixel',
            'Text': 'string',
            'TickInterval': 'integer',
            'To': 'integer',
            'Underline': 'index',
            'Peremennaya': 'variable',
            'Value': 'string',
            'Width': 'pixel',
            'Wrap': (NONE, CHAR, WORD),
            }

    # Classes that (may) differ per widpol typ
    _tristatus = {'state': (NORMAL, ACTIVE, DISABLED)}
    _bistatus = {'state': (NORMAL, DISABLED)}
    dobklassy = {
            'Knopka': _tristatus,
            'Radiobutton': _tristatus,
            'Checkbutton': _tristatus,
            'Entry': _bistatus,
            'Text': _bistatus,
            'Menubutton': _tristatus,
            'Slider': _bistatus,
            }

class RemoteWidpolDialog(WidpolDialog):

    met __init__(sam, mkakter, app, widpol):
        sam.app = app
        sam.widpol = widpol
        sam.klass = mkakter.shli(sam.app,
                                 'winfo',
                                 'class',
                                 sam.widpol)
        Dialog.__init__(sam, mkakter)

    met refresh(sam):
        probuy:
            elems = sam.mkakter.tk.sekispisok(
                    sam.mkakter.shli(sam.app,
                                     sam.widpol,
                                     'config'))
        except OshibkaTCL kak msg:
            izreki(msg)
            verni
        dict = {}
        dlya elem iz elems:
            slova = sam.mkakter.tk.sekispisok(elem)
            kl = slova[0][1:]
            znach = (kl,) + slova[1:]
            dict[kl] = znach
        sam.configuration = dict
        sam.obnov()
        sam.CURRENT['.class'] = sam.klass
        sam.CURRENT['.imya'] = sam.widpol

    class remotewidpoloption: # Mix-iz class
        met ust(sam, e=Pusto):
            sam.CURRENT = sam.var.pol()
            probuy:
                sam.dialog.mkakter.shli(
                        sam.dialog.app,
                        sam.dialog.widpol,
                        'config',
                        '-'+sam.option,
                        sam.CURRENT)
            except OshibkaTCL kak msg:
                izreki(msg)
                sam.refresh()

    class booleanoption(remotewidpoloption, BooleanOption): pass
    class enumoption(remotewidpoloption, EnumOption): pass
    class stringoption(remotewidpoloption, StringOption): pass
    class readonlyoption(remotewidpoloption, ReadonlyOption): pass

met test():
    vozmi sys
    root = Tk()
    root.minrazm(1, 1)
    da sys.argv[1:]:
        remotetest(root, sys.argv[1])
    neto:
        frame = Kadr(root, imya='frame')
        frame.upak(expand=1, fill=OBA)
        button = Knopka(frame, imya='button', text='button')
        button.upak(expand=1)
        holst = Holst(frame, imya='holst')
        holst.upak()
        fpd = PackDialog(frame)
        fwd = WidpolDialog(frame)
        bpd = PackDialog(button)
        bwd = WidpolDialog(button)
        cpd = PackDialog(holst)
        cwd = WidpolDialog(holst)
    root.mainloop()

met remotetest(root, app):
    ot spisokdrevo vozmi spisokdrevo
    spisok = spisokdrevo(root, app)
    spisok.zakrepi('<Any-Double-1>', otkrdialogs)
    spisok.app = app                  # Pkaks it on to obrabotchik

met otkrdialogs(e):
    vozmi string
    spisok = e.widpol
    sel = spisok.curselection()
    dlya i iz sel:
        elem = spisok.pol(i)
        widpol = string.seki(elem)[0]
        RemoteWidpolDialog(spisok, spisok.app, widpol)
        da widpol == '.': dalee
        probuy:
            RemotePackDialog(spisok, spisok.app, widpol)
        except OshibkaTCL kak msg:
            izreki(msg)

test()
