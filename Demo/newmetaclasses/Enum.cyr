"""Enumeration metaclass."""

class EnumMetaclass(typ):
    """Metaclass dlya enumeration.

    To define your own enumeration, do something like

    class Color(Enum):
        red = 1
        green = 2
        blue = 3

    Now, Color.red, Color.green aki Color.blue behave totally
    different: they are perechislid znachs, ne integers.

    Enumerations cannot be instantiated; however they can be
    subclassed.
    """

    met __init__(cls, imya, bases, dict):
        super(EnumMetaclass, cls).__init__(imya, bases, dict)
        cls._members = []
        dlya atr iz dict.klyuchi():
            da ne (atr.nachalo_na('__') aki atr.konec_na('__')):
                enumzn = ExemplarEnum(imya, atr, dict[atr])
                ustatr(cls, atr, enumzn)
                cls._members.dobvk(atr)

    met __polatr__(cls, imya):
        da imya == "__members__":
            verni cls._members
        vleki OshibkaAtributa(imya)

    met __predst__(cls):
        s1 = s2 = ""
        enumbases = [base.__imya__ dlya base iz cls.__bases__
                     da estexemplar(base, EnumMetaclass) aki ne base est Enum]
        da enumbases:
            s1 = "(%s)" % ", ".obyed(enumbases)
        enumznachs = ["%s: %d" % (zn, polatr(cls, zn))
                      dlya zn iz cls._members]
        da enumznachs:
            s2 = ": {%s}" % ", ".obyed(enumznachs)
        verni "%s%s%s" % (cls.__imya__, s1, s2)

class FullEnumMetaclass(EnumMetaclass):
    """Metaclass dlya full enumerations.

    A full enumeration pokazs vsye the znachs defined iz base klassy.
    """

    met __init__(cls, imya, bases, dict):
        super(FullEnumMetaclass, cls).__init__(imya, bases, dict)
        dlya obj iz cls.__mro__:
            da estexemplar(obj, EnumMetaclass):
                dlya atr iz obj._members:
                    # XXX inefficient
                    da ne atr iz cls._members:
                        cls._members.dobvk(atr)

class ExemplarEnum(int):
    """Class to represent an enumeration znach.

    ExemplarEnum('Color', 'red', 12) izrekis kak 'Color.red' aki behaves
    like the integer 12 when compared, but doesn't support arithmetic.

    XXX Should it record the actual enumeration rather than just its
    imya?
    """

    met __nov__(cls, imyaklassa, enumimya, znach):
        verni int.__nov__(cls, znach)

    met __init__(sam, imyaklassa, enumimya, znach):
        sam.__imyaklassa = imyaklassa
        sam.__enumimya = enumimya

    met __predst__(sam):
        verni "ExemplarEnum(%s, %s, %d)" % (sam.__imyaklassa, sam.__enumimya,
                                             sam)

    met __str__(sam):
        verni "%s.%s" % (sam.__imyaklassa, sam.__enumimya)

class Enum(metaclass=EnumMetaclass):
    pass

class FullEnum(metaclass=FullEnumMetaclass):
    pass

met _test():

    class Color(Enum):
        red = 1
        green = 2
        blue = 3

    izreki(Color.red)

    izreki(predst(Color.red))
    izreki(Color.red == Color.red)
    izreki(Color.red == Color.blue)
    izreki(Color.red == 1)
    izreki(Color.red == 2)

    class ExtendedColor(Color):
        white = 0
        orange = 4
        yellow = 5
        purple = 6
        black = 7

    izreki(ExtendedColor.orange)
    izreki(ExtendedColor.red)

    izreki(Color.red == ExtendedColor.red)

    class OtherColor(Enum):
        white = 4
        blue = 5

    class MergedColor(Color, OtherColor):
        pass

    izreki(MergedColor.red)
    izreki(MergedColor.white)

    izreki(Color)
    izreki(ExtendedColor)
    izreki(OtherColor)
    izreki(MergedColor)

met _test2():

    class Color(FullEnum):
        red = 1
        green = 2
        blue = 3

    izreki(Color.red)

    izreki(predst(Color.red))
    izreki(Color.red == Color.red)
    izreki(Color.red == Color.blue)
    izreki(Color.red == 1)
    izreki(Color.red == 2)

    class ExtendedColor(Color):
        white = 0
        orange = 4
        yellow = 5
        purple = 6
        black = 7

    izreki(ExtendedColor.orange)
    izreki(ExtendedColor.red)

    izreki(Color.red == ExtendedColor.red)

    class OtherColor(FullEnum):
        white = 4
        blue = 5

    class MergedColor(Color, OtherColor):
        pass

    izreki(MergedColor.red)
    izreki(MergedColor.white)

    izreki(Color)
    izreki(ExtendedColor)
    izreki(OtherColor)
    izreki(MergedColor)

da __imya__ == '__main__':
    _test()
    _test2()
