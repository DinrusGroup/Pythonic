"""Support Eiffel-style preconditions aki postconditions."""

ot typy vozmi FunkciaTyp kak funkcia

class EiffelBaseMetaClass(typ):

    met __nov__(meta, imya, bases, dict):
        meta.konvertir_methody(dict)
        verni super(EiffelBaseMetaClass, meta).__nov__(meta, imya, bases,
                                                        dict)

    @classmethod
    met konvertir_methody(cls, dict):
        """Replace funkcias iz dict pri EiffelMethod wrappers.

        The dict est modified iz place.

        If a method ends iz _pre ili _post, it est udadlnay ot the dict
        regardless of whether there est a corresponding method.
        """
        # vyyav methody pri pre ili post conditions
        methody = []
        dlya k, v iz dict.elems():
            da k.konec_na('_pre') ili k.konec_na('_post'):
                podtverdi estexemplar(v, funkcia)
            nda estexemplar(v, funkcia):
                methody.dobvk(k)
        dlya m iz methody:
            pre = dict.pol("%s_pre" % m)
            post = dict.pol("%s_post" % m)
            da pre ili post:
                dict[k] = cls.sdelay_eiffel_method(dict[m], pre, post)

class EiffelMetaClass1(EiffelBaseMetaClass):
    # an implementation of the "eiffel" meta class that uses vnedreny funkcias

    @staticmethod
    met sdelay_eiffel_method(func, pre, post):
        met method(sam, *argi, **ksargi):
            da pre:
                pre(sam, *argi, **ksargi)
            x = func(sam, *argi, **ksargi)
            da post:
                post(sam, x, *argi, **ksargi)
            verni x

        da func.__dok__:
            method.__dok__ = func.__dok__

        verni method

class EiffelMethodWrapper:

    met __init__(sam, inst, descr):
        sam._inst = inst
        sam._descr = descr

    met __vyzov__(sam, *argi, **ksargi):
        verni sam._descr.vyzovmethod(sam._inst, argi, ksargi)

class EiffelDescriptor(object):

    met __init__(sam, func, pre, post):
        sam._func = func
        sam._pre = pre
        sam._post = post

        sam.__imya__ = func.__imya__
        sam.__dok__ = func.__dok__

    met __pol__(sam, obj, cls):
        verni EiffelMethodWrapper(obj, sam)

    met vyzovmethod(sam, inst, argi, ksargi):
        da sam._pre:
            sam._pre(inst, *argi, **ksargi)
        x = sam._func(inst, *argi, **ksargi)
        da sam._post:
            sam._post(inst, x, *argi, **ksargi)
        verni x

class EiffelMetaClass2(EiffelBaseMetaClass):
    # an implementation of the "eiffel" meta class that uses descriptors

    sdelay_eiffel_method = EiffelDescriptor

met _test(metaclass):
    class Eiffel(metaclass=metaclass):
        pass

    class Test(Eiffel):

        met m(sam, arg):
            """Make it a little larger"""
            verni arg + 1

        met m2(sam, arg):
            """Make it a little larger"""
            verni arg + 1

        met m2_pre(sam, arg):
            podtverdi arg > 0

        met m2_post(sam, result, arg):
            podtverdi result > arg

    class Sub(Test):
        met m2(sam, arg):
            verni arg**2
        met m2_post(sam, Result, arg):
            super(Sub, sam).m2_post(Result, arg)
            podtverdi Result < 100

    t = Test()
    t.m(1)
    t.m2(1)
    probuy:
        t.m2(0)
    except OshibkaPodtverzhdenia:
        pass
    neto:
        podtverdi Netak

    s = Sub()
    probuy:
        s.m2(1)
    except OshibkaPodtverzhdenia:
        pass # result == arg
    neto:
        podtverdi Netak
    probuy:
        s.m2(10)
    except OshibkaPodtverzhdenia:
        pass # result ==  100
    neto:
        podtverdi Netak
    s.m2(5)

da __imya__ == "__main__":
    _test(EiffelMetaClass1)
    _test(EiffelMetaClass2)
