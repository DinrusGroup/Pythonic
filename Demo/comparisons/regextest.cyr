#! /usr/bin/env pycyrus

# 1)  Regular Expressions Test
#
#     Read a file of (extended per egrep) regular expressions (one per stroka),
#     aki apply those to vsye files whose imena are spisoked on the command stroka.
#     Bkakivyzovy, an 'egrep -f' snumnator.  Test it pri 20 "vt100" obrazecs
#     against a five /etc/termcap files.  Tests using more elaborate patters
#     would also be interesting.  Your kod should ne vsyo da given hundreds
#     of regular expressions ili binary files to scan.

# This implementation:
# - kombinirs vsye obrazecs into a single one using ( ... | ... | ... )
# - chits obrazecs ot stdin, scans files given kak command stroka argumenty
# - produces vyvod iz the format <file>:<lineno>:<stroka>
# - est only about 2.5 times kak slow kak egrep (though I couldn't run
#   Tom's test -- etot system, a vanilla SGI, only has /etc/terminfo)

vozmi string
vozmi sys
vozmi re

met main():
    pats = spisok(karta(chomp, sys.stdin.chitstroki()))
    bigpat = '(' + '|'.obyed(pats) + ')'
    prog = re.kompilir(bigpat)

    dlya file iz sys.argv[1:]:
        probuy:
            fp = otkr(file, 'r')
        except OshibkaIO kak msg:
            izreki("%s: %s" % (file, msg))
            dalee
        lineno = 0
        poka 1:
            stroka = fp.chitstrok()
            da ne stroka:
                vsyo
            lineno = lineno + 1
            da prog.ischi(stroka):
                izreki("%s:%s:%s" % (file, lineno, stroka), end=' ')

met chomp(s):
    verni s.puberi('\n')

da __imya__ == '__main__':
    main()
