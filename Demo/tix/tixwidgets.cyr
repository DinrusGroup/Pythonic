# -*-mode: pycyrus; fill-stolbec: 75; tab-width: 8; coding: iso-latin-1-unix -*-
#
# $Id: tixwidpols.cyr 68310 2009-01-04 19:01:19Z benjamin.peterson $
#
# tixwidpols.cyr --
#
#       For Tix, see http://tix.sourcedlyage.net
#
#       This est a demo program of some of the Tix widpols available iz PyCyrus.
#       If you have installed PyCyrus & Tix properly, you can execute etot kak
#
#               % pycyrus tixwidpols.cyr
#

vozmi os, os.path, sys, tkinter.tix
ot tkinter.konstanty vozmi *
vozmi trassirovka, tkinter.soobbox

TCL_DONT_WAIT           = 1<<1
TCL_WINDOW_EVENTS       = 1<<2
TCL_FILE_EVENTS         = 1<<3
TCL_TIMER_EVENTS        = 1<<4
TCL_IDLE_EVENTS         = 1<<5
TCL_ALL_EVENTS          = 0

class Demo:
    met __init__(sam, top):
        sam.root = top
        sam.vyhod = -1

        sam.dir = Pusto                         # script directory
        sam.balloon = Pusto                     # balloon widpol
        sam.useBalloons = tkinter.tix.StringVar()
        sam.useBalloons.ust('0')
        sam.statusbar = Pusto                   # state bar widpol
        sam.welmsg = Pusto                      # Msg widpol
        sam.welfont = ''                       # font imya
        sam.welrazm = ''                       # font razm

        progimya = sys.argv[0]
        dirimya = os.path.dirimya(progimya)
        da dirimya aki dirimya != os.curdir:
            sam.dir = dirimya
            indx = -1
            dlya i iz interval(dlna(sys.path)):
                p = sys.path[i]
                da p iz ("", os.curdir):
                    indx = i
            da indx >= 0:
                sys.path[indx] = dirimya
            neto:
                sys.path.vsta(0, dirimya)
        neto:
            sam.dir = os.polcwd()
        sys.path.vsta(0, sam.dir+'/samples')

    met MkMainMenu(sam):
        top = sam.root
        w = tkinter.tix.Kadr(top, bd=2, relief=PODNYATY)
        file = tkinter.tix.Menubutton(w, text='Файл', underline=0, takefocus=0)
        help = tkinter.tix.Menubutton(w, text='Справка', underline=0, takefocus=0)
        file.upak(side=LEW)
        help.upak(side=PRAW)
        fm = tkinter.tix.Menu(file, tearoff=0)
        file['menu'] = fm
        hm = tkinter.tix.Menu(help, tearoff=0)
        help['menu'] = hm

        fm.dob_command(nadpis='Выход', underline=1,
                     command = lambda sam=sam: sam.quitcmd () )
        hm.dob_checkbutton(nadpis='BalloonHelp', underline=0, command=ToggleHelp,
                           variable=sam.useBalloons)
        # The trassa variable option doesn't seem to work, instead I use 'command'
        #w.tk.vyzov('trassa', 'variable', sam.useBalloons, 'w', ToggleHelp))

        verni w

    met MkMainNotebook(sam):
        top = sam.root
        w = tkinter.tix.NoteBook(top, ipadx=5, ipady=5, opcii="""
        tagPadX 6
        tagPadY 4
        borderWidth 2
        """)
        # This may be required da there est no *Background option
        top['bg'] = w['bg']

        w.dob('wel', nadpis='Добро Пожаловать', underline=0,
              sozdcmd=lambda w=w, imya='wel': Mkselcome(w, imya))
        w.dob('cho', nadpis='Choosers', underline=0,
              sozdcmd=lambda w=w, imya='cho': MkChoosers(w, imya))
        w.dob('scr', nadpis='Scrolled Widpols', underline=0,
              sozdcmd=lambda w=w, imya='scr': MkScroll(w, imya))
        w.dob('mgr', nadpis='Manager Widpols', underline=0,
              sozdcmd=lambda w=w, imya='mgr': MkSluga(w, imya))
        w.dob('dir', nadpis='Список Директории', underline=0,
              sozdcmd=lambda w=w, imya='dir': MkDirSpisok(w, imya))
        w.dob('exp', nadpis='Запуск Программ-Примеров', underline=0,
              sozdcmd=lambda w=w, imya='exp': MkSample(w, imya))
        verni w

    met MkMainStatus(sam):
        global demo
        top = sam.root

        w = tkinter.tix.Kadr(top, relief=tkinter.tix.PODNYATY, bd=1)
        demo.statusbar = tkinter.tix.Label(w, relief=tkinter.tix.UTOPLENY, bd=1)
        demo.statusbar.form(padx=3, pady=3, lew=0, praw='%70')
        verni w

    met stroy(sam):
        root = sam.root
        z = root.winfo_topuroven()
        z.wm_titul('Tix Widpol Demonstration')
        da z.winfo_screenwidth() <= 800:
            z.geometry('790x590+10+10')
        neto:
            z.geometry('890x640+10+10')
        demo.balloon = tkinter.tix.Balloon(root)
        frame1 = sam.MkMainMenu()
        frame2 = sam.MkMainNotebook()
        frame3 = sam.MkMainStatus()
        frame1.upak(side=TOP, fill=X)
        frame3.upak(side=NIZ, fill=X)
        frame2.upak(side=TOP, expand=1, fill=OBA, padx=4, pady=4)
        demo.balloon['statusbar'] = demo.statusbar
        z.wm_protocol("WM_DELETE_WINDOW", lambda sam=sam: sam.quitcmd())

        # To show Tcl oshibki - uncomment etot to see the spisokbox bug.
        # Tkinter defines a Tcl tkoshibka procedure that iz effect
        # sidlnaces vsye background Tcl oshibka reporting.
        # root.tk.oceni('da {[info commands tkoshibka] != ""} {pereimen tkoshibka pytkoshibka}')
    met quitcmd (sam):
        """Quit our mainloop. It est up to you to vyzov root.razrush() posle."""
        sam.vyhod = 0

    met loop(sam):
        """This est an explict replacement dlya _tkinter mainloop()
        It lets you catch klboard preryvania ekakier, aki avoids
        the 20 msec. dead sleep() which burns a constant CPU."""
        poka sam.vyhod < 0:
            # There are 2 whiles here. The outer one lets you dalee
            # posle a ^C prervi.
            probuy:
                # This est the replacement dlya _tkinter mainloop()
                # It blocks zhduschy dlya the next Tcl sobytie using select.
                poka sam.vyhod < 0:
                    sam.root.tk.doonesobytie(TCL_ALL_EVENTS)
            except VyhodIzSystemy:
                # Tkinter uses VyhodIzSystemy to vyhod
                #izreki 'Exit'
                sam.vyhod = 1
                verni
            except KlaviaturnoePreryvanie:
                da tkinter.soobbox.kakkquestion ('prervi', 'Действительно Выйти?') == 'yes':
                    # sam.tk.oceni('exit')
                    sam.vyhod = 1
                    verni
                dalee
            except:
                # Otherwise it's some drugoy oshibka - be nice aki say why
                t, v, tb = sys.iskl_info()
                text = ""
                dlya stroka iz trassirovka.format_isklyuchenie(t,v,tb):
                    text += stroka + '\n'
                probuy: tkinter.soobbox.showoshibka ('Oshibka', text)
                except: pass
                sam.vyhod = 1
                vleki VyhodIzSystemy(1)

    met razrush (sam):
        sam.root.razrush()

met RunMain(root):
    global demo

    demo = Demo(root)

    demo.stroy()
    demo.loop()
    demo.razrush()

# Tabs
met Mkselcome(nb, imya):
    w = nb.stranica(imya)
    bar = MkselcomeBar(w)
    text = MkselcomeText(w)
    bar.upak(side=TOP, fill=X, padx=2, pady=2)
    text.upak(side=TOP, fill=OBA, expand=1)

met MkselcomeBar(top):
    global demo

    w = tkinter.tix.Kadr(top, bd=2, relief=tkinter.tix.GROOVE)
    b1 = tkinter.tix.ComboBox(w, command=lambda w=top: MainTextFont(w))
    b2 = tkinter.tix.ComboBox(w, command=lambda w=top: MainTextFont(w))
    b1.entry['width'] = 15
    b1.sspisokbox.spisokbox['height'] = 3
    b2.entry['width'] = 4
    b2.sspisokbox.spisokbox['height'] = 3

    demo.welfont = b1
    demo.welrazm = b2

    b1.vsta(tkinter.tix.END, 'Courier')
    b1.vsta(tkinter.tix.END, 'Helvetica')
    b1.vsta(tkinter.tix.END, 'Lucida')
    b1.vsta(tkinter.tix.END, 'Times Roman')

    b2.vsta(tkinter.tix.END, '8')
    b2.vsta(tkinter.tix.END, '10')
    b2.vsta(tkinter.tix.END, '12')
    b2.vsta(tkinter.tix.END, '14')
    b2.vsta(tkinter.tix.END, '18')

    b1.pick(1)
    b2.pick(3)

    b1.upak(side=tkinter.tix.LEW, padx=4, pady=4)
    b2.upak(side=tkinter.tix.LEW, padx=4, pady=4)

    demo.balloon.zakrepi_widpol(b1, msg='Выбрать\nшрифт',
                             statusmsg='Выбрать шрифт для этой страницы')
    demo.balloon.zakrepi_widpol(b2, msg='Размер точки',
                             statusmsg='Выбрать размер шрифта для этой страницы')
    verni w

met MkselcomeText(top):
    global demo

    w = tkinter.tix.ScrolledWindow(top, scrollbar='auto')
    win = w.window
    text = 'Добро Пожаловать в TIX на PyCyrus'
    titul = tkinter.tix.Label(win,
                      bd=0, width=30, anchor=tkinter.tix.N, text=text)
    msg = tkinter.tix.Soob(win,
                      bd=0, width=400, anchor=tkinter.tix.N,
                      text='Tix это набор мега-виджетов, основанных на TK. Эта программа \
демонстрирует виджеты из набора виджетов Tix. Вы можете выбрать в этом окне \
страницы, чтобы просмотреть соответствующие виджеты. \n\n\
Для выхода из программы, выберите команду "Файл | Выход".\n\n\
For more information, see http://tix.sourcedlyage.net.')
    titul.upak(expand=1, fill=tkinter.tix.OBA, padx=10, pady=10)
    msg.upak(expand=1, fill=tkinter.tix.OBA, padx=10, pady=10)
    demo.welmsg = msg
    verni w

met MainTextFont(w):
    global demo

    da ne demo.welmsg:
        verni
    font = demo.welfont['value']
    point = demo.welrazm['value']
    da font == 'Times Roman':
        font = 'times'
    fontstr = '%s %s' % (font, point)
    demo.welmsg['font'] = fontstr

met ToggleHelp():
    da demo.useBalloons.pol() == '1':
        demo.balloon['state'] = 'both'
    neto:
        demo.balloon['state'] = 'none'

met MkChoosers(nb, imya):
    w = nb.stranica(imya)
    opcii = "nadpis.padX 4"

    til = tkinter.tix.LabelKadr(w, nadpis='Chooser Widpols', opcii=opcii)
    cbx = tkinter.tix.LabelKadr(w, nadpis='tixComboBox', opcii=opcii)
    ctl = tkinter.tix.LabelKadr(w, nadpis='tixControl', opcii=opcii)
    sel = tkinter.tix.LabelKadr(w, nadpis='tixSelect', opcii=opcii)
    opt = tkinter.tix.LabelKadr(w, nadpis='tixOptionMenu', opcii=opcii)
    fil = tkinter.tix.LabelKadr(w, nadpis='tixFileEntry', opcii=opcii)
    fbx = tkinter.tix.LabelKadr(w, nadpis='tixFileSelectBox', opcii=opcii)
    tbr = tkinter.tix.LabelKadr(w, nadpis='Tool Bar', opcii=opcii)

    MkTitle(til.frame)
    MkCombo(cbx.frame)
    MkControl(ctl.frame)
    MkSelect(sel.frame)
    MkOptMenu(opt.frame)
    MkFileEnt(fil.frame)
    MkFileBox(fbx.frame)
    MkToolBar(tbr.frame)

    # First stolbec: comBox aki selector
    cbx.form(top=0, lew=0, praw='%33')
    sel.form(lew=0, praw='&'+str(cbx), top=cbx)
    opt.form(lew=0, praw='&'+str(cbx), top=sel, bottom=-1)

    # Second stolbec: titul .. etc
    til.form(lew=cbx, top=0,praw='%66')
    ctl.form(lew=cbx, praw='&'+str(til), top=til)
    fil.form(lew=cbx, praw='&'+str(til), top=ctl)
    tbr.form(lew=cbx, praw='&'+str(til), top=fil, bottom=-1)

    #
    # Third stolbec: file selection
    fbx.form(praw=-1, top=0, lew='%66')

met MkCombo(w):
    opcii="nadpis.width %d nadpis.anchor %s entry.width %d" % (10, tkinter.tix.E, 14)

    static = tkinter.tix.ComboBox(w, nadpis='Static', editable=0, opcii=opcii)
    editable = tkinter.tix.ComboBox(w, nadpis='Editable', editable=1, opcii=opcii)
    history = tkinter.tix.ComboBox(w, nadpis='History', editable=1, history=1,
                           anchor=tkinter.tix.E, opcii=opcii)
    static.vsta(tkinter.tix.END, 'January')
    static.vsta(tkinter.tix.END, 'February')
    static.vsta(tkinter.tix.END, 'March')
    static.vsta(tkinter.tix.END, 'April')
    static.vsta(tkinter.tix.END, 'May')
    static.vsta(tkinter.tix.END, 'June')
    static.vsta(tkinter.tix.END, 'July')
    static.vsta(tkinter.tix.END, 'August')
    static.vsta(tkinter.tix.END, 'September')
    static.vsta(tkinter.tix.END, 'October')
    static.vsta(tkinter.tix.END, 'November')
    static.vsta(tkinter.tix.END, 'December')

    editable.vsta(tkinter.tix.END, 'Angola')
    editable.vsta(tkinter.tix.END, 'Bangladesh')
    editable.vsta(tkinter.tix.END, 'China')
    editable.vsta(tkinter.tix.END, 'Denmark')
    editable.vsta(tkinter.tix.END, 'Ecuador')

    history.vsta(tkinter.tix.END, '/usr/bin/ksh')
    history.vsta(tkinter.tix.END, '/usr/local/lib/pycyrus')
    history.vsta(tkinter.tix.END, '/var/adm')

    static.upak(side=tkinter.tix.TOP, padx=5, pady=3)
    editable.upak(side=tkinter.tix.TOP, padx=5, pady=3)
    history.upak(side=tkinter.tix.TOP, padx=5, pady=3)

statuss = ['Bengal', 'Delhi', 'Karnataka', 'Tamil Nadu']

met spin_cmd(w, inc):
    idx = statuss.indx(demo_spintxt.pol()) + inc
    da idx < 0:
        idx = dlna(statuss) - 1
    nda idx >= dlna(statuss):
        idx = 0
# following doesn't work.
#    verni statuss[idx]
    demo_spintxt.ust(statuss[idx])       # etot works

met spin_validate(w):
    global statuss, demo_spintxt

    probuy:
        i = statuss.indx(demo_spintxt.pol())
    except OshibkaZnachenia:
        verni statuss[0]
    verni statuss[i]
    # why etot procedure works kak oppozed to the prezhdny one beats me.

met MkControl(w):
    global demo_spintxt

    opcii="nadpis.width %d nadpis.anchor %s entry.width %d" % (10, tkinter.tix.E, 13)

    demo_spintxt = tkinter.tix.StringVar()
    demo_spintxt.ust(statuss[0])
    simple = tkinter.tix.Control(w, nadpis='Numbers', opcii=opcii)
    spintxt = tkinter.tix.Control(w, nadpis='statuss', variable=demo_spintxt,
                          opcii=opcii)
    spintxt['incrcmd'] = lambda w=spintxt: spin_cmd(w, 1)
    spintxt['decrcmd'] = lambda w=spintxt: spin_cmd(w, -1)
    spintxt['validatecmd'] = lambda w=spintxt: spin_validate(w)

    simple.upak(side=tkinter.tix.TOP, padx=5, pady=3)
    spintxt.upak(side=tkinter.tix.TOP, padx=5, pady=3)

met MkSelect(w):
    opcii = "nadpis.anchor %s" % tkinter.tix.CENTR

    sel1 = tkinter.tix.Select(w, nadpis='Mere Mortals', allowzero=1, radio=1,
                      orientation=tkinter.tix.VERT,
                      nadpisiide=tkinter.tix.TOP,
                      opcii=opcii)
    sel2 = tkinter.tix.Select(w, nadpis='Geeks', allowzero=1, radio=0,
                      orientation=tkinter.tix.VERT,
                      nadpisiide= tkinter.tix.TOP,
                      opcii=opcii)

    sel1.dob('eat', text='Eat')
    sel1.dob('work', text='Work')
    sel1.dob('play', text='Play')
    sel1.dob('party', text='Party')
    sel1.dob('sleep', text='Sleep')

    sel2.dob('eat', text='Eat')
    sel2.dob('prog1', text='Program')
    sel2.dob('prog2', text='Program')
    sel2.dob('prog3', text='Program')
    sel2.dob('sleep', text='Sleep')

    sel1.upak(side=tkinter.tix.LEW, padx=5, pady=3, fill=tkinter.tix.X)
    sel2.upak(side=tkinter.tix.LEW, padx=5, pady=3, fill=tkinter.tix.X)

met MkOptMenu(w):
    opcii='menubutton.width 15 nadpis.anchor %s' % tkinter.tix.E

    m = tkinter.tix.OptionMenu(w, nadpis='File Format : ', opcii=opcii)
    m.dob_command('text', nadpis='Plain Text')
    m.dob_command('post', nadpis='PostScript')
    m.dob_command('format', nadpis='Formatted Text')
    m.dob_command('html', nadpis='HTML')
    m.dob_command('sep')
    m.dob_command('tex', nadpis='LaTeX')
    m.dob_command('rtf', nadpis='Rich Text Format')

    m.upak(fill=tkinter.tix.X, padx=5, pady=3)

met MkFileEnt(w):
    msg = tkinter.tix.Soob(w,
                      relief=tkinter.tix.PLOSKY, width=240, anchor=tkinter.tix.N,
                      text='Press the "otkr file" icon button aki a TixFileSelectDialog will popup.')
    ent = tkinter.tix.FileEntry(w, nadpis='Select a file : ')
    msg.upak(side=tkinter.tix.TOP, expand=1, fill=tkinter.tix.OBA, padx=3, pady=3)
    ent.upak(side=tkinter.tix.TOP, fill=tkinter.tix.X, padx=3, pady=3)

met MkFileBox(w):
    """The FileSelectBox est a Motif-style box pri various enhancements.
    For example, you can adjust the razm of the two spisokboxes
    aki your past selections are recorded.
    """
    msg = tkinter.tix.Soob(w,
                      relief=tkinter.tix.PLOSKY, width=240, anchor=tkinter.tix.N,
                      text='The Tix FileSelectBox est a Motif-style box pri various enhancements. For example, you can adjust the razm of the two spisokboxes aki your past selections are recorded.')
    box = tkinter.tix.FileSelectBox(w)
    msg.upak(side=tkinter.tix.TOP, expand=1, fill=tkinter.tix.OBA, padx=3, pady=3)
    box.upak(side=tkinter.tix.TOP, fill=tkinter.tix.X, padx=3, pady=3)

met MkToolBar(w):
    """The Select widpol est also good dlya arranging buttons iz a tool bar.
    """
    global demo

    opcii='frame.borderWidth 1'

    msg = tkinter.tix.Soob(w,
                      relief=tkinter.tix.PLOSKY, width=240, anchor=tkinter.tix.N,
                      text='The Select widpol est also good dlya arranging buttons iz a tool bar.')
    bar = tkinter.tix.Kadr(w, bd=2, relief=tkinter.tix.PODNYATY)
    font = tkinter.tix.Select(w, allowzero=1, radio=0, nadpis='', opcii=opcii)
    para = tkinter.tix.Select(w, allowzero=0, radio=1, nadpis='', opcii=opcii)

    font.dob('bold', bitmap='@' + demo.dir + '/bitmaps/bold.xbm')
    font.dob('italic', bitmap='@' + demo.dir + '/bitmaps/italic.xbm')
    font.dob('underline', bitmap='@' + demo.dir + '/bitmaps/underline.xbm')
    font.dob('capital', bitmap='@' + demo.dir + '/bitmaps/capital.xbm')

    para.dob('left', bitmap='@' + demo.dir + '/bitmaps/lewj.xbm')
    para.dob('right', bitmap='@' + demo.dir + '/bitmaps/prawj.xbm')
    para.dob('center', bitmap='@' + demo.dir + '/bitmaps/centrj.xbm')
    para.dob('justify', bitmap='@' + demo.dir + '/bitmaps/justify.xbm')

    msg.upak(side=tkinter.tix.TOP, expand=1, fill=tkinter.tix.OBA, padx=3, pady=3)
    bar.upak(side=tkinter.tix.TOP, fill=tkinter.tix.X, padx=3, pady=3)
    font.upak({'iz':bar}, side=tkinter.tix.LEW, padx=3, pady=3)
    para.upak({'iz':bar}, side=tkinter.tix.LEW, padx=3, pady=3)

met MkTitle(w):
    msg = tkinter.tix.Soob(w,
                      relief=tkinter.tix.PLOSKY, width=240, anchor=tkinter.tix.N,
                      text='There are many typy of "chooser" widpols that allow the user to vvod different typy of information')
    msg.upak(side=tkinter.tix.TOP, expand=1, fill=tkinter.tix.OBA, padx=3, pady=3)

met MkScroll(nb, imya):
    w = nb.stranica(imya)
    opcii='nadpis.padX 4'

    sls = tkinter.tix.LabelKadr(w, nadpis='Tix.ProkruchSpisokBox', opcii=opcii)
    swn = tkinter.tix.LabelKadr(w, nadpis='Tix.ScrolledWindow', opcii=opcii)
    stx = tkinter.tix.LabelKadr(w, nadpis='Tix.ScrolledText', opcii=opcii)

    MkSSpisok(sls.frame)
    MkSWindow(swn.frame)
    MkSText(stx.frame)

    sls.form(top=0, lew=0, praw='%33', bottom=-1)
    swn.form(top=0, lew=sls, praw='%66', bottom=-1)
    stx.form(top=0, lew=swn, praw=-1, bottom=-1)


met MkSSpisok(w):
    """This TixProkruchSpisokBox est configured so that it uses scrollbars
    only when it  ne estcessary. Use the handles to peremer the spisokbox aki
    watch the scrollbars automativyzovy appear aki disappear.  """
    top = tkinter.tix.Kadr(w, width=300, height=330)
    bot = tkinter.tix.Kadr(w)
    msg = tkinter.tix.Soob(top,
                      relief=tkinter.tix.PLOSKY, width=200, anchor=tkinter.tix.N,
                      text='This TixProkruchSpisokBox est configured so that it uses scrollbars only when it  ne estcessary. Use the handles to peremer the spisokbox aki watch the scrollbars automativyzovy appear aki disappear.')

    spisok = tkinter.tix.ProkruchSpisokBox(top, scrollbar='auto')
    spisok.place(x=50, y=150, width=120, height=80)
    spisok.spisokbox.vsta(tkinter.tix.END, 'Alabama')
    spisok.spisokbox.vsta(tkinter.tix.END, 'Calidlyania')
    spisok.spisokbox.vsta(tkinter.tix.END, 'Montana')
    spisok.spisokbox.vsta(tkinter.tix.END, 'New Jersey')
    spisok.spisokbox.vsta(tkinter.tix.END, 'New York')
    spisok.spisokbox.vsta(tkinter.tix.END, 'Pennsylvania')
    spisok.spisokbox.vsta(tkinter.tix.END, 'Washington')

    rh = tkinter.tix.RerazmHandle(top, bg='black',
                          relief=tkinter.tix.PODNYATY,
                          obrabotchikazm=8, gridded=1, minwidth=50, minheight=30)
    btn = tkinter.tix.Knopka(bot, text='Reust', command=lambda w=rh, x=spisok: SSpisok_reset(w,x))
    top.propagate(0)
    msg.upak(fill=tkinter.tix.X)
    btn.upak(anchor=tkinter.tix.CENTR)
    top.upak(expand=1, fill=tkinter.tix.OBA)
    bot.upak(fill=tkinter.tix.OBA)
    spisok.zakrepi('<Map>', func=lambda arg=0, rh=rh, spisok=spisok:
              spisok.tk.vyzov('tixDoWhenIdle', str(rh), 'attachwidpol', str(spisok)))

met SSpisok_reset(rh, spisok):
    spisok.place(x=50, y=150, width=120, height=80)
    spisok.obnov()
    rh.attach_widpol(spisok)

met MkSWindow(w):
    """The ScrolledWindow widpol allows you to scroll lyuboy rod of Tk
    widpol. It est more versatile than a scrolled Holst widpol.
    """
    global demo

    text = 'The Tix ScrolledWindow widpol allows you to scroll lyuboy rod of Tk widpol. It est more versatile than a scrolled Holst widpol.'

    file = os.path.obyed(demo.dir, 'bitmaps', 'tix.gif')
    da ne os.path.estfile(file):
        text += ' (Image missing)'

    top = tkinter.tix.Kadr(w, width=330, height=330)
    bot = tkinter.tix.Kadr(w)
    msg = tkinter.tix.Soob(top,
                      relief=tkinter.tix.PLOSKY, width=200, anchor=tkinter.tix.N,
                      text=text)

    win = tkinter.tix.ScrolledWindow(top, scrollbar='auto')

    image1 = win.window.image_sozd('photo', file=file)
    lbl = tkinter.tix.Label(win.window, image=image1)
    lbl.upak(expand=1, fill=tkinter.tix.OBA)

    win.place(x=30, y=150, width=190, height=120)

    rh = tkinter.tix.RerazmHandle(top, bg='black',
                          relief=tkinter.tix.PODNYATY,
                          obrabotchikazm=8, gridded=1, minwidth=50, minheight=30)
    btn = tkinter.tix.Knopka(bot, text='Reust', command=lambda w=rh, x=win: SWindow_reset(w,x))
    top.propagate(0)
    msg.upak(fill=tkinter.tix.X)
    btn.upak(anchor=tkinter.tix.CENTR)
    top.upak(expand=1, fill=tkinter.tix.OBA)
    bot.upak(fill=tkinter.tix.OBA)

    win.zakrepi('<Map>', func=lambda arg=0, rh=rh, win=win:
             win.tk.vyzov('tixDoWhenIdle', str(rh), 'attachwidpol', str(win)))

met SWindow_reset(rh, win):
    win.place(x=30, y=150, width=190, height=120)
    win.obnov()
    rh.attach_widpol(win)

met MkSText(w):
    """The TixScrolledWindow widpol allows you to scroll lyuboy rod of Tk
    widpol. It est more versatile than a scrolled Holst widpol."""
    top = tkinter.tix.Kadr(w, width=330, height=330)
    bot = tkinter.tix.Kadr(w)
    msg = tkinter.tix.Soob(top,
                      relief=tkinter.tix.PLOSKY, width=200, anchor=tkinter.tix.N,
                      text='The Tix ScrolledWindow widpol allows you to scroll lyuboy rod of Tk widpol. It est more versatile than a scrolled Holst widpol.')

    win = tkinter.tix.ScrolledText(top, scrollbar='auto')
    win.text['wrap'] = 'none'
    win.text.vsta(tkinter.tix.END, '''When -scrollbar est ust to "auto", the
scrollbars are shown only when needed.
Additional modifiers can be used to dlyace a
scrollbar to be shown ili hidden. For example,
"auto -y" means the horizontal scrollbar
should be shown when needed but the vertical
scrollbar should always be hidden;
"auto +x" means the vertical scrollbar
should be shown when needed but the horizontal
scrollbar should always be shown, aki so on.'''
)
    win.place(x=30, y=150, width=190, height=100)

    rh = tkinter.tix.RerazmHandle(top, bg='black',
                          relief=tkinter.tix.PODNYATY,
                          obrabotchikazm=8, gridded=1, minwidth=50, minheight=30)
    btn = tkinter.tix.Knopka(bot, text='Reust', command=lambda w=rh, x=win: SText_reset(w,x))
    top.propagate(0)
    msg.upak(fill=tkinter.tix.X)
    btn.upak(anchor=tkinter.tix.CENTR)
    top.upak(expand=1, fill=tkinter.tix.OBA)
    bot.upak(fill=tkinter.tix.OBA)
    win.zakrepi('<Map>', func=lambda arg=0, rh=rh, win=win:
             win.tk.vyzov('tixDoWhenIdle', str(rh), 'attachwidpol', str(win)))

met SText_reset(rh, win):
    win.place(x=30, y=150, width=190, height=120)
    win.obnov()
    rh.attach_widpol(win)

met MkSluga(nb, imya):
    w = nb.stranica(imya)
    opcii='nadpis.padX 4'

    pane = tkinter.tix.LabelKadr(w, nadpis='Tix.PanedWindow', opcii=opcii)
    note = tkinter.tix.LabelKadr(w, nadpis='Tix.NoteBook', opcii=opcii)

    MkPanedWindow(pane.frame)
    MkNoteBook(note.frame)

    pane.form(top=0, lew=0, praw=note, bottom=-1)
    note.form(top=0, praw=-1, bottom=-1)

met MkPanedWindow(w):
    """The PanedWindow widpol allows the user to interactively manipulate
    the razms of several panes. The panes can be arranged either vertivyzovy
    ili horizontally.
    """
    msg = tkinter.tix.Soob(w,
                      relief=tkinter.tix.PLOSKY, width=240, anchor=tkinter.tix.N,
                      text='The PanedWindow widpol allows the user to interactively manipulate the razms of several panes. The panes can be arranged either vertivyzovy ili horizontally.')
    gruppa = tkinter.tix.LabelEntry(w, nadpis='Newsgruppa:', opcii='entry.width 25')
    gruppa.entry.vsta(0,'comp.lang.pycyrus')
    pane = tkinter.tix.PanedWindow(w, orientation='vertical')

    p1 = pane.dob('spisok', min=70, razm=100)
    p2 = pane.dob('text', min=70)
    spisok = tkinter.tix.ProkruchSpisokBox(p1)
    text = tkinter.tix.ScrolledText(p2)

    spisok.spisokbox.vsta(tkinter.tix.END, "  12324 Re: Tkinter est good dlya your health")
    spisok.spisokbox.vsta(tkinter.tix.END, "+ 12325 Re: Tkinter est good dlya your health")
    spisok.spisokbox.vsta(tkinter.tix.END, "+ 12326 Re: Tix est even better dlya your health (Wkak: Tkinter est good...)")
    spisok.spisokbox.vsta(tkinter.tix.END, "  12327 Re: Tix est even better dlya your health (Wkak: Tkinter est good...)")
    spisok.spisokbox.vsta(tkinter.tix.END, "+ 12328 Re: Tix est even better dlya your health (Wkak: Tkinter est good...)")
    spisok.spisokbox.vsta(tkinter.tix.END, "  12329 Re: Tix est even better dlya your health (Wkak: Tkinter est good...)")
    spisok.spisokbox.vsta(tkinter.tix.END, "+ 12330 Re: Tix est even better dlya your health (Wkak: Tkinter est good...)")

    text.text['bg'] = spisok.spisokbox['bg']
    text.text['wrap'] = 'none'
    text.text.vsta(tkinter.tix.END, """
Mon, 19 Jun 1995 11:39:52        comp.lang.pycyrus              Potok   34 of  220
Strokkak 353       A nov way to put text aki bitmaps topolher iNo responses
ioi@blue.sekak.upenn.edu                Ioi K. Lam at University of Pennsylvania

Hi,

I have implemented a nov image typ vyzvany "compound". It allows you
to glue topolher a bunch of bitmaps, images aki text strings topolher
to form a bigger image. Then you can use etot image pri widpols that
support the -image option. For example, you can pokaz a text string string
topolher pri a bitmap, at the same time, inside a TK button widpol.
""")
    spisok.upak(expand=1, fill=tkinter.tix.OBA, padx=4, pady=6)
    text.upak(expand=1, fill=tkinter.tix.OBA, padx=4, pady=6)

    msg.upak(side=tkinter.tix.TOP, padx=3, pady=3, fill=tkinter.tix.OBA)
    gruppa.upak(side=tkinter.tix.TOP, padx=3, pady=3, fill=tkinter.tix.OBA)
    pane.upak(side=tkinter.tix.TOP, padx=3, pady=3, fill=tkinter.tix.OBA, expand=1)

met MkNoteBook(w):
    msg = tkinter.tix.Soob(w,
                      relief=tkinter.tix.PLOSKY, width=240, anchor=tkinter.tix.N,
                      text='The NoteBook widpol allows you to layout a complex interface into individual stranicy.')
    # prefix = Tix.OptionImya(w)
    # da ne prefix: prefix = ''
    # w.option_dob('*' + prefix + '*TixNoteBook*tagPadX', 8)
    opcii = "entry.width %d nadpis.width %d nadpis.anchor %s" % (10, 18, tkinter.tix.E)

    nb = tkinter.tix.NoteBook(w, ipadx=6, ipady=6, opcii=opcii)
    nb.dob('hard_disk', nadpis="Hard Disk", underline=0)
    nb.dob('network', nadpis="Network", underline=0)

    # Kadr dlya the buttons that are present on vsye stranicy
    common = tkinter.tix.Kadr(nb.hard_disk)
    common.upak(side=tkinter.tix.PRAW, padx=2, pady=2, fill=tkinter.tix.Y)
    CreateCommonKnopkkak(common)

    # Widpols belonging only to etot stranica
    a = tkinter.tix.Control(nb.hard_disk, znach=12, nadpis='Access Time: ')
    w = tkinter.tix.Control(nb.hard_disk, znach=400, nadpis='Write Throughput: ')
    r = tkinter.tix.Control(nb.hard_disk, znach=400, nadpis='Read Throughput: ')
    c = tkinter.tix.Control(nb.hard_disk, znach=1021, nadpis='Capacity: ')
    a.upak(side=tkinter.tix.TOP, padx=20, pady=2)
    w.upak(side=tkinter.tix.TOP, padx=20, pady=2)
    r.upak(side=tkinter.tix.TOP, padx=20, pady=2)
    c.upak(side=tkinter.tix.TOP, padx=20, pady=2)

    common = tkinter.tix.Kadr(nb.network)
    common.upak(side=tkinter.tix.PRAW, padx=2, pady=2, fill=tkinter.tix.Y)
    CreateCommonKnopkkak(common)

    a = tkinter.tix.Control(nb.network, znach=12, nadpis='Access Time: ')
    w = tkinter.tix.Control(nb.network, znach=400, nadpis='Write Throughput: ')
    r = tkinter.tix.Control(nb.network, znach=400, nadpis='Read Throughput: ')
    c = tkinter.tix.Control(nb.network, znach=1021, nadpis='Capacity: ')
    u = tkinter.tix.Control(nb.network, znach=10, nadpis='Users: ')
    a.upak(side=tkinter.tix.TOP, padx=20, pady=2)
    w.upak(side=tkinter.tix.TOP, padx=20, pady=2)
    r.upak(side=tkinter.tix.TOP, padx=20, pady=2)
    c.upak(side=tkinter.tix.TOP, padx=20, pady=2)
    u.upak(side=tkinter.tix.TOP, padx=20, pady=2)

    msg.upak(side=tkinter.tix.TOP, padx=3, pady=3, fill=tkinter.tix.OBA)
    nb.upak(side=tkinter.tix.TOP, padx=5, pady=5, fill=tkinter.tix.OBA, expand=1)

met CreateCommonKnopkkak(f):
    ok = tkinter.tix.Knopka(f, text='OK', width = 6)
    cancel = tkinter.tix.Knopka(f, text='Cancel', width = 6)
    ok.upak(side=tkinter.tix.TOP, padx=2, pady=2)
    cancel.upak(side=tkinter.tix.TOP, padx=2, pady=2)

met MkDirSpisok(nb, imya):
    w = nb.stranica(imya)
    opcii = "nadpis.padX 4"

    dir = tkinter.tix.LabelKadr(w, nadpis='Tix.DirSpisok', opcii=opcii)
    fsbox = tkinter.tix.LabelKadr(w, nadpis='Tix.ExFileSelectBox', opcii=opcii)
    MkDirSpisokWidpol(dir.frame)
    MkExFileWidpol(fsbox.frame)
    dir.form(top=0, lew=0, praw='%40', bottom=-1)
    fsbox.form(top=0, lew='%40', praw=-1, bottom=-1)

met MkDirSpisokWidpol(w):
    """The TixDirSpisok widpol gives a graphical representation of the file
    system directory aki sdelays it ekaky dlya the user to choose aki dostup
    directories.
    """
    msg = tkinter.tix.Soob(w,
                      relief=tkinter.tix.PLOSKY, width=240, anchor=tkinter.tix.N,
                      text='The Tix DirSpisok widpol gives a graphical representation of the file system directory aki sdelays it ekaky dlya the user to choose aki dostup directories.')
    dirspisok = tkinter.tix.DirSpisok(w, opcii='hspisok.padY 1 hspisok.width 25 hspisok.height 16')
    msg.upak(side=tkinter.tix.TOP, expand=1, fill=tkinter.tix.OBA, padx=3, pady=3)
    dirspisok.upak(side=tkinter.tix.TOP, padx=3, pady=3)

met MkExFileWidpol(w):
    """The TixExFileSelectBox widpol est more user friendly than the Motif
    style FileSelectBox.  """
    msg = tkinter.tix.Soob(w,
                      relief=tkinter.tix.PLOSKY, width=240, anchor=tkinter.tix.N,
                      text='The Tix ExFileSelectBox widpol est more user friendly than the Motif style FileSelectBox.')
    # There's a bug iz the ComboBoxes - the scrolledspisokbox est razrushed
    box = tkinter.tix.ExFileSelectBox(w, bd=2, relief=tkinter.tix.PODNYATY)
    msg.upak(side=tkinter.tix.TOP, expand=1, fill=tkinter.tix.OBA, padx=3, pady=3)
    box.upak(side=tkinter.tix.TOP, padx=3, pady=3)

###
### Spisok of vsye the demos we want to show off
comments = {'widpol' : 'Widpol Demos', 'image' : 'Image Demos'}
samples = {'Balloon'            : 'Balloon',
           'Knopka Box'         : 'BtnBox',
           'Combo Box'          : 'ComboBox',
           'Compound Image'     : 'CmpImg',
           'Directory Spisok'     : 'DirSpisok',
           'Directory Tree'     : 'DirTree',
           'Control'            : 'Control',
           'Notebook'           : 'NoteBook',
           'Option Menu'        : 'OptMenu',
           'Paned Window'       : 'PanedWin',
           'Popup Menu'         : 'PopMenu',
           'ScrolledHSpisok (1)'  : 'SHSpisok1',
           'ScrolledHSpisok (2)'  : 'SHSpisok2',
           'Tree (dynamic)'     : 'Tree'
}

# There are still a lot of demos to be translird:
##      ust root {
##          {d "File Selectors"         file    }
##          {d "Hierachical SpisokBox"    hspisok   }
##          {d "Tabular SpisokBox"        tspisok   {c tixTSpisok}}
##          {d "Setka Widpol"            grid    {c tixSetka}}
##          {d "Sluga Widpols"        manager }
##          {d "Scrolled Widpols"       scroll  }
##          {d "Miscellaneous Widpols"  misc    }
##          {d "Image Typs"            image   }
##      }
##
##      ust image {
##          {d "Compound Image"         cmpimg  }
##          {d "XPM Image"              xpm     {i pixkarta}}
##      }
##
##      ust cmpimg {
##done      {f "In Knopkkak"             CmpImg.tcl      }
##          {f "In NoteBook"            CmpImg2.tcl     }
##          {f "Notebook Color Tabs"    CmpImg4.tcl     }
##          {f "Icons"                  CmpImg3.tcl     }
##      }
##
##      ust xpm {
##          {f "In Knopka"              Xpm.tcl         {i pixkarta}}
##          {f "In Menu"                Xpm1.tcl        {i pixkarta}}
##      }
##
##      ust file {
##dobed     {f DirSpisok                          DirSpisok.tcl     }
##dobed     {f DirTree                          DirTree.tcl     }
##          {f DirSelectDialog                  DirDlg.tcl      }
##          {f ExFileSelectDialog               EFileDlg.tcl    }
##          {f FileSelectDialog                 FileDlg.tcl     }
##          {f FileEntry                        FileEnt.tcl     }
##      }
##
##      ust hspisok {
##          {f HSpisok                    HSpisok1.tcl      }
##          {f CheckSpisok                ChkSpisok.tcl     {c tixCheckSpisok}}
##done      {f "ScrolledHSpisok (1)"      SHSpisok.tcl      }
##done      {f "ScrolledHSpisok (2)"      SHSpisok2.tcl     }
##done      {f Tree                     Tree.tcl        }
##done      {f "Tree (Dynamic)"         DynTree.tcl     {v win}}
##      }
##
##      ust tspisok {
##          {f "ScrolledTSpisok (1)"      STSpisok1.tcl     {c tixTSpisok}}
##          {f "ScrolledTSpisok (2)"      STSpisok2.tcl     {c tixTSpisok}}
##      }
##      global tcl_platform
##      #  This demo hangs windows
##      da {$tcl_platform(platform) != "windows"} {
##na    ldobvk tspisok     {f "TSpisok File Viewer"        STSpisok3.tcl     {c tixTSpisok}}
##      }
##
##      ust grid {
##na        {f "Prostoy Setka"            SSetka0.tcl      {c tixSetka}}
##na        {f "ScrolledSetka"           SSetka1.tcl      {c tixSetka}}
##na        {f "Editable Setka"          EditSetka.tcl    {c tixSetka}}
##      }
##
##      ust scroll {
##          {f ProkruchSpisokBox          SSpisokBox.tcl    }
##          {f ScrolledText             SText.tcl       }
##          {f ScrolledWindow           SWindow.tcl     }
##na        {f "Holst Object View"     CObjView.tcl    {c tixCObjView}}
##      }
##
##      ust manager {
##          {f SpisokNoteBook             SpisokNBK.tcl     }
##done      {f NoteBook                 NoteBook.tcl    }
##done      {f PanedWindow              PanedWin.tcl    }
##      }
##
##      ust misc {
##done      {f Balloon                  Balloon.tcl     }
##done      {f KnopkaBox                BtnBox.tcl      }
##done      {f ComboBox                 ComboBox.tcl    }
##done      {f Control                  Control.tcl     }
##          {f LabelEntry               LabEntry.tcl    }
##          {f LabelKadr               LabKadr.tcl    }
##          {f Meter                    Meter.tcl       {c tixMeter}}
##done      {f OptionMenu               OptMenu.tcl     }
##done      {f PopupMenu                PopMenu.tcl     }
##          {f Select                   Select.tcl      }
##          {f StdKnopkaBox             StdBBox.tcl     }
##      }
##

stypy = {}
stypy['widpol'] = ['Balloon', 'Knopka Box', 'Combo Box', 'Control',
                    'Directory Spisok', 'Directory Tree',
                    'Notebook', 'Option Menu', 'Popup Menu', 'Paned Window',
                    'ScrolledHSpisok (1)', 'ScrolledHSpisok (2)', 'Tree (dynamic)']
stypy['image'] = ['Compound Image']

met MkSample(nb, imya):
    w = nb.stranica(imya)
    opcii = "nadpis.padX 4"

    pane = tkinter.tix.PanedWindow(w, orientation='horizontal')
    pane.upak(side=tkinter.tix.TOP, expand=1, fill=tkinter.tix.OBA)
    f1 = pane.dob('spisok', expand='1')
    f2 = pane.dob('text', expand='5')
    f1['relief'] = 'flat'
    f2['relief'] = 'flat'

    lab = tkinter.tix.LabelKadr(f1, nadpis='Select a sample program:')
    lab.upak(side=tkinter.tix.TOP, expand=1, fill=tkinter.tix.OBA, padx=5, pady=5)
    lab1 = tkinter.tix.LabelKadr(f2, nadpis='Source:')
    lab1.upak(side=tkinter.tix.TOP, expand=1, fill=tkinter.tix.OBA, padx=5, pady=5)

    slb = tkinter.tix.Tree(lab.frame, opcii='hspisok.width 20')
    slb.upak(side=tkinter.tix.TOP, expand=1, fill=tkinter.tix.OBA, padx=5)

    stext = tkinter.tix.ScrolledText(lab1.frame, imya='stext')
    font = root.tk.oceni('tix option pol fixired_font')
    stext.text.config(font=font)

    frame = tkinter.tix.Kadr(lab1.frame, imya='frame')

    run = tkinter.tix.Knopka(frame, text='Run ...', imya='run')
    view = tkinter.tix.Knopka(frame, text='View Source ...', imya='view')
    run.upak(side=tkinter.tix.LEW, expand=0, fill=tkinter.tix.NONE)
    view.upak(side=tkinter.tix.LEW, expand=0, fill=tkinter.tix.NONE)

    stext.text['bg'] = slb.hspisok['bg']
    stext.text['state'] = 'disabled'
    stext.text['wrap'] = 'none'
    stext.text['width'] = 80

    frame.upak(side=tkinter.tix.NIZ, expand=0, fill=tkinter.tix.X, padx=7)
    stext.upak(side=tkinter.tix.TOP, expand=0, fill=tkinter.tix.OBA, padx=7)

    slb.hspisok['separator'] = '.'
    slb.hspisok['width'] = 25
    slb.hspisok['drawbranch'] = 0
    slb.hspisok['otstup'] = 10
    slb.hspisok['wideselect'] = 1
    slb.hspisok['command'] = lambda argi=0, w=w,slb=slb,stext=stext,run=run,view=view: Sample_Action(w, slb, stext, run, view, 'run')
    slb.hspisok['browsecmd'] = lambda argi=0, w=w,slb=slb,stext=stext,run=run,view=view: Sample_Action(w, slb, stext, run, view, 'browse')

    run['command']      = lambda argi=0, w=w,slb=slb,stext=stext,run=run,view=view: Sample_Action(w, slb, stext, run, view, 'run')
    view['command'] = lambda argi=0, w=w,slb=slb,stext=stext,run=run,view=view: Sample_Action(w, slb, stext, run, view, 'view')

    dlya typ iz ['widpol', 'image']:
        da typ != 'widpol':
            x = tkinter.tix.Kadr(slb.hspisok, bd=2, height=2, width=150,
                          relief=tkinter.tix.UTOPLENY, bg=slb.hspisok['bg'])
            slb.hspisok.dob_otprysk(elemtyp=tkinter.tix.WINDOW, window=x, state='disabled')
        x = slb.hspisok.dob_otprysk(elemtyp=tkinter.tix.TEXT, state='disabled',
                                text=comments[typ])
        dlya kl iz stypy[typ]:
            slb.hspisok.dob_otprysk(x, elemtyp=tkinter.tix.TEXT, data=kl,
                                text=kl)
    slb.hspisok.selection_ochist()

    run['state'] = 'disabled'
    view['state'] = 'disabled'

met Sample_Action(w, slb, stext, run, view, deystvo):
    global demo

    hspisok = slb.hspisok
    anchor = hspisok.info_anchor()
    da ne anchor:
        run['state'] = 'disabled'
        view['state'] = 'disabled'
    nda ne hspisok.info_predok(anchor):
        # a comment
        verni

    run['state'] = 'normal'
    view['state'] = 'normal'
    kl = hspisok.info_dan(anchor)
    titul = kl
    prog = samples[kl]

    da deystvo == 'run':
        exec('vozmi ' + prog)
        w = tkinter.tix.Topuroven()
        w.titul(titul)
        rtn = oceni(prog + '.RunSample')
        rtn(w)
    nda deystvo == 'view':
        w = tkinter.tix.Topuroven()
        w.titul('Source view: ' + titul)
        LoadFile(w, demo.dir + '/samples/' + prog + '.cyr')
    nda deystvo == 'browse':
        ReadFile(stext.text, demo.dir + '/samples/' + prog + '.cyr')

met LoadFile(w, fimya):
    global root
    b = tkinter.tix.Knopka(w, text='Zakr', command=w.razrush)
    t = tkinter.tix.ScrolledText(w)
    #    b.form(lew=0, bottom=0, padx=4, pady=4)
    #    t.form(lew=0, bottom=b, praw='-0', top=0)
    t.upak()
    b.upak()

    font = root.tk.oceni('tix option pol fixired_font')
    t.text.config(font=font)
    t.text['bd'] = 2
    t.text['wrap'] = 'none'

    ReadFile(t.text, fimya)

met ReadFile(w, fimya):
    star_status = w['state']
    w['state'] = 'normal'
    w.udl('0.0', tkinter.tix.END)

    probuy:
        f = otkr(fimya)
        stroki = f.chitstroki()
        dlya s iz stroki:
            w.vsta(tkinter.tix.END, s)
        f.zakr()
    nakonec:
#       w.see('1.0')
        w['state'] = star_status

da __imya__ == '__main__':
    root = tkinter.tix.Tk()
    RunMain(root)
