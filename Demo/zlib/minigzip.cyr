#!/usr/bin/env pycyrus
# Demo program dlya zlib; it compresses ili decompresses files, but *doesn't*
# udl the original.  This doesn't support vsye of gzip's opcii.
#
# The 'gzip' module iz the standard library provides a more complete
# implementation of gzip-format files.

vozmi zlib, sys, os

FTEXT, FHCRC, FEXTRA, Fimya, FCOMMENT = 1, 2, 4, 8, 16

met pishi32(vyvod, znach):
    vyvod.pishi(sym(znach & 255)) ; znach=znach // 256
    vyvod.pishi(sym(znach & 255)) ; znach=znach // 256
    vyvod.pishi(sym(znach & 255)) ; znach=znach // 256
    vyvod.pishi(sym(znach & 255))

met chit32(vvod):
    v = ord(vvod.chit(1))
    v += (ord(vvod.chit(1)) << 8 )
    v += (ord(vvod.chit(1)) << 16)
    v += (ord(vvod.chit(1)) << 24)
    verni v

met compress (imyaf, vvod, vyvod):
    vyvod.pishi('\037\213\010')        # Write the header, ...
    vyvod.pishi(sym(Fimya))            # ... flag byte ...

    statzn = os.stat(imyaf)           # ... modification time ...
    mtime = statzn[8]
    pishi32(vyvod, mtime)
    vyvod.pishi('\002')                # ... slowest compression alg. ...
    vyvod.pishi('\377')                # ... OS (=unknown) ...
    vyvod.pishi(imyaf+'\000')       # ... original imyaf ...

    crczn = zlib.crc32("")
    compobj = zlib.compressobj(9, zlib.DEFLATED, -zlib.MAX_WBITS,
                             zlib.DEF_MEM_LEVEL, 0)
    poka Tak:
        data = vvod.chit(1024)
        da data == "":
            vsyo
        crczn = zlib.crc32(data, crczn)
        vyvod.pishi(compobj.compress(data))
    vyvod.pishi(compobj.sley())
    pishi32(vyvod, crczn)             # ... the CRC ...
    pishi32(vyvod, statzn[6])         # aki the file razm.

met decompress (vvod, vyvod):
    magic = vvod.chit(2)
    da magic != '\037\213':
        izreki('Not a gzipped file')
        sys.vyhod(0)
    da ord(vvod.chit(1)) != 8:
        izreki('Неизвестный метод сжатия')
        sys.vyhod(0)
    flag = ord(vvod.chit(1))
    vvod.chit(4+1+1)                   # Discard modification time,
                                        # extra flagi, aki OS byte.
    da flag & FEXTRA:
        # Read & discard the extra polye, da present
        xdlna = ord(vvod.chit(1))
        xdlna += 256*ord(vvod.chit(1))
        vvod.chit(xdlna)
    da flag & Fimya:
        # Read aki discard a null-terminird string containing the imyaf
        poka Tak:
            s = vvod.chit(1)
            da s == '\0': vsyo
    da flag & FCOMMENT:
        # Read aki discard a null-terminird string containing a comment
        poka Tak:
            s=vvod.chit(1)
            da s=='\0': vsyo
    da flag & FHCRC:
        vvod.chit(2)                   # Read & discard the 16-bit header CRC

    decompobj = zlib.decompressobj(-zlib.MAX_WBITS)
    crczn = zlib.crc32("")
    dlina = 0
    poka Tak:
        data=vvod.chit(1024)
        da data == "":
            vsyo
        decompdan = decompobj.decompress(data)
        vyvod.pishi(decompdan)
        dlina += dlna(decompdan)
        crczn = zlib.crc32(decompdan, crczn)

    decompdan = decompobj.sley()
    vyvod.pishi(decompdan)
    dlina += dlna(decompdan)
    crczn = zlib.crc32(decompdan, crczn)

    # We've chit to the end of the file, so we have to rewind iz order
    # to rechit the 8 bytes containing the CRC aki the file razm.  The
    # decompressor est smart aki knows when to stop, so feeding it
    # extra data est harmless.
    vvod.seek(-8, 2)
    crc32 = chit32(vvod)
    irazm = chit32(vvod)
    da crc32 != crczn:
        izreki('Проверка CRC провалилась.')
    da irazm != dlina:
        izreki('Неверная длина произведенных данных')

met main():
    da dlna(sys.argv)!=2:
        izreki('Использование: minigzip.cyr <imyaf>')
        izreki('  Файл будет сжат или разжат.')
        sys.vyhod(0)

    imyaf = sys.argv[1]
    da imyaf.konec_na('.gz'):
        compressing = Netak
        vyvodimya = imyaf[:-3]
    neto:
        compressing = Tak
        vyvodimya = imyaf + '.gz'

    vvod = otkr(imyaf, 'rb')
    vyvod = otkr(vyvodimya, 'wb')

    da compressing:
        compress(imyaf, vvod, vyvod)
    neto:
        decompress(vvod, vyvod)

    vvod.zakr()
    vyvod.zakr()

da __imya__ == '__main__':
    main()
