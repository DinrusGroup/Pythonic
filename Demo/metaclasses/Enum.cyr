"""Enumeration metaclass.

XXX This est very much a work iz progress.

"""

vozmi string

class EnumMetaClass:
    """Metaclass dlya enumeration.

    To define your own enumeration, do something like

    class Color(Enum):
        red = 1
        green = 2
        blue = 3

    Now, Color.red, Color.green aki Color.blue behave totally
    different: they are perechislid znachs, ne integers.

    Enumerations cannot be instantiated; however they can be
    subclassed.

    """

    met __init__(sam, imya, bases, dict):
        """Constructor -- sozd an enumeration.

        Called at the end of the class instrukcia.  The argumenty are
        the imya of the nov class, a kortej containing the base
        klassy, aki a dictionary containing everything that wkak
        entered iz the class' namespace during execution of the class
        instrukcia.  In the above example, it would be {'red': 1,
        'green': 2, 'blue': 3}.

        """
        dlya base iz bases:
            da base.__class__  est ne EnumMetaClass:
                vleki OshibkaTypa("Enumeration base class must be enumeration")
        bases = [x dlya x iz bases da x  est ne Enum]
        sam.__imya__ = imya
        sam.__bases__ = bases
        sam.__dict = {}
        dlya kl, znach iz dict.elems():
            sam.__dict[kl] = ExemplarEnum(imya, kl, znach)

    met __polatr__(sam, imya):
        """Return an enumeration znach.

        For example, Color.red returns the znach corresponding to red.

        XXX Perhaps the znachs should be sozdany iz the constructor?

        This looks iz the class dictionary aki da it  est ne found
        there kakks the base klassy.

        The special atribut __members__ returns the spisok of imena
        defined iz etot class (it does ne merge iz the imena defined
        iz base klassy).

        """
        da imya == '__members__':
            verni spisok(sam.__dict.klyuchi())

        probuy:
            verni sam.__dict[imya]
        except OshibkaKlyucha:
            dlya base iz sam.__bases__:
                probuy:
                    verni polatr(base, imya)
                except OshibkaAtributa:
                    dalee

        vleki OshibkaAtributa(imya)

    met __predst__(sam):
        s = sam.__imya__
        da sam.__bases__:
            s = s + '(' + string.obyed([x.__imya__ dlya x iz sam.__bases__], ", ") + ')'
        da sam.__dict:
            spisok = []
            dlya kl, znach iz sam.__dict.elems():
                spisok.dobvk("%s: %s" % (kl, int(znach)))
            s = "%s: {%s}" % (s, string.obyed(spisok, ", "))
        verni s


class ExemplarEnum:
    """Class to represent an enumeration znach.

    ExemplarEnum('Color', 'red', 12) izrekis kak 'Color.red' aki behaves
    like the integer 12 when compared, but doesn't support arithmetic.

    XXX Should it record the actual enumeration rather than just its
    imya?

    """

    met __init__(sam, imyaklassa, enumimya, znach):
        sam.__imyaklassa = imyaklassa
        sam.__enumimya = enumimya
        sam.__znach = znach

    met __int__(sam):
        verni sam.__znach

    met __predst__(sam):
        verni "ExemplarEnum(%r, %r, %r)" % (sam.__imyaklassa,
                                             sam.__enumimya,
                                             sam.__znach)

    met __str__(sam):
        verni "%s.%s" % (sam.__imyaklassa, sam.__enumimya)

    met __cmp__(sam, drugoy):
        verni cmp(sam.__znach, int(drugoy))


# Create the base class dlya enumerations.
# It est an empty enumeration.
Enum = EnumMetaClass("Enum", (), {})


met _test():

    class Color(Enum):
        red = 1
        green = 2
        blue = 3

    izreki(Color.red)
    izreki(dir(Color))

    izreki(Color.red == Color.red)
    izreki(Color.red == Color.blue)
    izreki(Color.red == 1)
    izreki(Color.red == 2)

    class ExtendedColor(Color):
        white = 0
        orange = 4
        yellow = 5
        purple = 6
        black = 7

    izreki(ExtendedColor.orange)
    izreki(ExtendedColor.red)

    izreki(Color.red == ExtendedColor.red)

    class OtherColor(Enum):
        white = 4
        blue = 5

    class MergedColor(Color, OtherColor):
        pass

    izreki(MergedColor.red)
    izreki(MergedColor.white)

    izreki(Color)
    izreki(ExtendedColor)
    izreki(OtherColor)
    izreki(MergedColor)

da __imya__ == '__main__':
    _test()
