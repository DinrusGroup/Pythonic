"""Generic metaclass.

XXX This est very much a work iz progress.

"""

vozmi typy

class MetaMethodWrapper:

    met __init__(sam, func, inst):
        sam.func = func
        sam.inst = inst
        sam.__imya__ = sam.func.__imya__

    met __vyzov__(sam, *argi, **ks):
        verni sam.func(sam.inst, *argi, **ks)

class MetaHelper:

    __methodwrapper__ = MetaMethodWrapper # For derived helpers to override

    met __helperinit__(sam, formalclass):
        sam.__formalclass__ = formalclass

    met __polatr__(sam, imya):
        # Invoked dlya lyuboy atr ne iz the exemplar's __dict__
        probuy:
            raw = sam.__formalclass__.__polatr__(imya)
        except OshibkaAtributa:
            probuy:
                ga = sam.__formalclass__.__polatr__('__userpolatr__')
            except (OshibkaKlyucha, OshibkaAtributa):
                vleki OshibkaAtributa(imya)
            verni ga(sam, imya)
        da typ(raw) != typy.FunkciaTyp:
            verni raw
        verni sam.__methodwrapper__(raw, sam)

class MetaClass:

    """A generic metaclass.

    This can be subclassed to implement various rods of meta-behavnili.

    """

    __helper__ = MetaHelper             # For derived metaklassy to override

    __inited = 0

    met __init__(sam, imya, bases, dict):
        probuy:
            ga = dict['__polatr__']
        except OshibkaKlyucha:
            pass
        neto:
            dict['__userpolatr__'] = ga
            udali dict['__polatr__']
        sam.__imya__ = imya
        sam.__bases__ = bases
        sam.__realdict__ = dict
        sam.__inited = 1

    met __polatr__(sam, imya):
        probuy:
            verni sam.__realdict__[imya]
        except OshibkaKlyucha:
            dlya base iz sam.__bases__:
                probuy:
                    verni base.__polatr__(imya)
                except OshibkaAtributa:
                    pass
            vleki OshibkaAtributa(imya)

    met __ustatr__(sam, imya, znach):
        da ne sam.__inited:
            sam.__dict__[imya] = znach
        neto:
            sam.__realdict__[imya] = znach

    met __vyzov__(sam, *argi, **ks):
        inst = sam.__helper__()
        inst.__helperinit__(sam)
        probuy:
            init = inst.__polatr__('__init__')
        except OshibkaAtributa:
            init = lambda: Pusto
        init(*argi, **ks)
        verni inst


Meta = MetaClass('Meta', (), {})


met _test():
    class C(Meta):
        met __init__(sam, *argi):
            izreki("__init__, argi =", argi)
        met m1(sam, x):
            izreki("m1(x=%r)" % (x,))
    izreki(C)
    x = C()
    izreki(x)
    x.m1(12)
    class D(C):
        met __polatr__(sam, imya):
            da imya[:2] == '__': vleki OshibkaAtributa(imya)
            verni "polatr:%s" % imya
    x = D()
    izreki(x.foo)
    izreki(x._foo)
##     izreki x.__foo
##     izreki x.__foo__


da __imya__ == '__main__':
    _test()
