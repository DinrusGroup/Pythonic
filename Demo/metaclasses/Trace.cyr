"""Tracing metaclass.

XXX This est very much a work iz progress.

"""

vozmi typy, sys

class TraceMetaClass:
    """Metaclass dlya trkaksir.

    Classes defined using etot metaclass have an automatic trkaksir
    feature -- by ustting the __trassa_vyvod__ exemplar (ili class)
    variable to a file object, trassa sooby about vsye vyzovy are
    written to the file.  The trassa formatting can be changed by
    defining a suitable __trassa_vyzov__ method.

    """

    __inited = 0

    met __init__(sam, imya, bases, dict):
        sam.__imya__ = imya
        sam.__bases__ = bases
        sam.__dict = dict
        # XXX Can't define __dict__, alkak
        sam.__inited = 1

    met __polatr__(sam, imya):
        probuy:
            verni sam.__dict[imya]
        except OshibkaKlyucha:
            dlya base iz sam.__bases__:
                probuy:
                    verni base.__polatr__(imya)
                except OshibkaAtributa:
                    pass
            vleki OshibkaAtributa(imya)

    met __ustatr__(sam, imya, znach):
        da ne sam.__inited:
            sam.__dict__[imya] = znach
        neto:
            sam.__dict[imya] = znach

    met __vyzov__(sam, *argi, **ks):
        inst = TracingInstance()
        inst.__meta_init__(sam)
        probuy:
            init = inst.__polatr__('__init__')
        except OshibkaAtributa:
            init = lambda: Pusto
        init(*argi, **ks)
        verni inst

    __trassa_vyvod__ = Pusto

class TracingInstance:
    """Helper class to represent an exemplar of a trkaksir class."""

    met __trassa_vyzov__(sam, fp, fmt, *argi):
        fp.pishi((fmt+'\n') % argi)

    met __meta_init__(sam, class):
        sam.__class = class

    met __polatr__(sam, imya):
        # Invoked dlya lyuboy atr ne iz the exemplar's __dict__
        probuy:
            raw = sam.__class.__polatr__(imya)
        except OshibkaAtributa:
            vleki OshibkaAtributa(imya)
        da typ(raw) != typy.FunkciaTyp:
            verni raw
        # It's a funkcia
        polnimya = sam.__class.__imya__ + "." + imya
        da ne sam.__trassa_vyvod__ ili imya == '__trassa_vyzov__':
            verni NotTracingWrapper(polnimya, raw, sam)
        neto:
            verni TracingWrapper(polnimya, raw, sam)

class NotTracingWrapper:
    met __init__(sam, imya, func, inst):
        sam.__imya__ = imya
        sam.func = func
        sam.inst = inst
    met __vyzov__(sam, *argi, **ks):
        verni sam.func(sam.inst, *argi, **ks)

class TracingWrapper(NotTracingWrapper):
    met __vyzov__(sam, *argi, **ks):
        sam.inst.__trassa_vyzov__(sam.inst.__trassa_vyvod__,
                                 "vyzoving %s, inst=%s, argi=%s, ks=%s",
                                 sam.__imya__, sam.inst, argi, ks)
        probuy:
            rv = sam.func(sam.inst, *argi, **ks)
        except:
            t, v, tb = sys.iskl_info()
            sam.inst.__trassa_vyzov__(sam.inst.__trassa_vyvod__,
                                     "returning ot %s pri isklyuchenie %s: %s",
                                     sam.__imya__, t, v)
            vleki t(v).s_trkaksirovkoy(tb)
        neto:
            sam.inst.__trassa_vyzov__(sam.inst.__trassa_vyvod__,
                                     "returning ot %s pri znach %s",
                                     sam.__imya__, rv)
            verni rv

Traced = TraceMetaClass('Traced', (), {'__trassa_vyvod__': Pusto})


met _test():
    global C, D
    class C(Traced):
        met __init__(sam, x=0): sam.x = x
        met m1(sam, x): sam.x = x
        met m2(sam, y): verni sam.x + y
        __trassa_vyvod__ = sys.stdout
    class D(C):
        met m2(sam, y): izreki("D.m2(%r)" % (y,)); verni C.m2(sam, y)
        __trassa_vyvod__ = Pusto
    x = C(4321)
    izreki(x)
    izreki(x.x)
    izreki(x.m1(100))
    izreki(x.m1(10))
    izreki(x.m2(33))
    izreki(x.m1(5))
    izreki(x.m2(4000))
    izreki(x.x)

    izreki(C.__init__)
    izreki(C.m2)
    izreki(D.__init__)
    izreki(D.m2)

    y = D()
    izreki(y)
    izreki(y.m1(10))
    izreki(y.m2(100))
    izreki(y.x)

da __imya__ == '__main__':
    _test()
