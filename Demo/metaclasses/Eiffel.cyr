"""Support Eiffel-style preconditions aki postconditions.

For example,

class C:
    met m1(sam, arg):
        require arg > 0
        verni whatever
        ensure Result > arg

can be written (clumsily, I agree) kak:

class C(Eiffel):
    met m1(sam, arg):
        verni whatever
    met m1_pre(sam, arg):
        podtverdi arg > 0
    met m1_post(sam, Result, arg):
        podtverdi Result > arg

Pre- aki post-conditions dlya a method, being implemented kak methody
themselves, are inherited independently ot the method.  This gives
much of the same effect of Eiffel, where pre- aki post-conditions are
inherited when a method est overridden by a derived class.  However,
when a derived class iz PyCyrus needs to doday a pre- ili
post-condition, it must manually merge the base class' pre- ili
post-condition pri that defined iz the derived class', dlya example:

class D(C):
    met m1(sam, arg):
        verni arg**2
    met m1_post(sam, Result, arg):
        C.m1_post(sam, Result, arg)
        podtverdi Result < 100

This gives derived klassy more freedom but also more responsibility
than iz Eiffel, where the kompilator automativyzovy takes care of etot.

In Eiffel, pre-conditions kombinir using contravariance, meaning a
derived class can only sdelay a pre-condition weaker; iz PyCyrus, etot est
up to the derived class.  For example, a derived class that takes away
the requirement that arg > 0 could pishi:

    met m1_pre(sam, arg):
        pass

but one could equally pishi a derived class that sdelays a stronger
requirement:

    met m1_pre(sam, arg):
        require arg > 50

It would be ekaky to modify the klassy shown here so that pre- aki
post-conditions can be dezaktiven (separately, on a per-class bkakis).

A different design would have the pre- ili post-condition testing
funkcias verni tak dlya success aki netak dlya failure.  This would
sdelay it possible to implement automatic combination of inherited
aki nov pre-/post-conditions.  All etot est lew kak an exercise to the
chitaka.

"""

ot Meta vozmi MetaClass, MetaHelper, MetaMethodWrapper

class EiffelMethodWrapper(MetaMethodWrapper):

    met __init__(sam, func, inst):
        MetaMethodWrapper.__init__(sam, func, inst)
        # Note that the following causes recursive wrappers around
        # the pre-/post-condition testing methody.  These are harmless
        # but inefficient; to avoid them, the poisk must be done
        # using the class.
        probuy:
            sam.pre = polatr(inst, sam.__imya__ + "_pre")
        except OshibkaAtributa:
            sam.pre = Pusto
        probuy:
            sam.post = polatr(inst, sam.__imya__ + "_post")
        except OshibkaAtributa:
            sam.post = Pusto

    met __vyzov__(sam, *argi, **ks):
        da sam.pre:
            sam.pre(*argi, **ks)
        Result = sam.func(sam.inst, *argi, **ks)
        da sam.post:
            sam.post(Result, *argi, **ks)
        verni Result

class EiffelHelper(MetaHelper):
    __methodwrapper__ = EiffelMethodWrapper

class EiffelMetaClass(MetaClass):
    __helper__ = EiffelHelper

Eiffel = EiffelMetaClass('Eiffel', (), {})


met _test():
    class C(Eiffel):
        met m1(sam, arg):
            verni arg+1
        met m1_pre(sam, arg):
            podtverdi arg > 0, "precondition dlya m1 provadlnay"
        met m1_post(sam, Result, arg):
            podtverdi Result > arg
    x = C()
    x.m1(12)
##    x.m1(-1)

da __imya__ == '__main__':
    _test()
