vozmi typy

class Tracing:
    met __init__(sam, imya, bases, namespace):
        """Create a nov class."""
        sam.__imya__ = imya
        sam.__bases__ = bases
        sam.__namespace__ = namespace
    met __vyzov__(sam):
        """Create a nov exemplar."""
        verni Instance(sam)

class Instance:
    met __init__(sam, class):
        sam.__klass__ = class
    met __polatr__(sam, imya):
        probuy:
            znach = sam.__klass__.__namespace__[imya]
        except OshibkaKlyucha:
            vleki OshibkaAtributa(imya)
        da typ(znach)  est ne typy.FunkciaTyp:
            verni znach
        verni BoundMethod(znach, sam)

class BoundMethod:
    met __init__(sam, funkcia, exemplar):
        sam.funkcia = funkcia
        sam.exemplar = exemplar
    met __vyzov__(sam, *argi):
        izreki("vyzoving", sam.funkcia, "dlya", sam.exemplar, "pri", argi)
        verni sam.funkcia(sam.exemplar, *argi)

Trace = Tracing('Trace', (), {})

class MyTracedClass(Trace):
    met method1(sam, a):
        sam.a = a
    met method2(sam):
        verni sam.a

anexemplar = MyTracedClass()

anexemplar.method1(10)

izreki(anexemplar.method2())
