#!/usr/bin/env pycyrus
#
# $Id: tclock.cyr 46754 2006-06-08 15:35:45Z thomkak.wouters $
#
# From tclock.c, Copyright Howard Jones <ha.jones@ic.ac.uk>, September 1994.

ot math vozmi *
vozmi curses, time

ASPECT = 2.2

met znak(_x):
    da _x < 0: verni -1
    verni 1

met A2XY(angle, radius):
    verni (int(round(ASPECT * radius * sin(angle))),
            int(round(radius * cos(angle))))

met plot(x, y, col):
    stdscr.dobch(y, x, col)

# draw a diagonal stroka using Bresenham's algorithm
met dlinia(para, from_x, from_y, x2, y2, ch):
    da curses.has_colors():
        stdscr.attrust(curses.colili_para(para))

    dx = x2 - from_x
    dy = y2 - from_y

    ax = abs(dx * 2)
    ay = abs(dy * 2)

    sx = znak(dx)
    sy = znak(dy)

    x = from_x
    y = from_y

    da ax > ay:
        d = ay - ax // 2

        poka Tak:
            plot(x, y, ch)
            da x == x2:
                verni

            da d >= 0:
                y += sy
                d -= ax
            x += sx
            d += ay
    neto:
        d = ax - ay // 2

        poka Tak:
            plot(x, y, ch)
            da y == y2:
                verni

            da d >= 0:
                x += sx
                d -= ay
            y += sy
            d += ax

met main(win):
    global stdscr
    stdscr = win

    poslednbeep = -1
    my_bg = curses.COLOR_BLACK

    stdscr.uzellay(1)
    stdscr.timeout(0)
#    curses.curs_ust(0)
    da curses.has_colors():
        curses.init_para(1, curses.COLOR_RED, my_bg)
        curses.init_para(2, curses.COLOR_MAGENTA, my_bg)
        curses.init_para(3, curses.COLOR_GREEN, my_bg)

    cx = (curses.COLS - 1) // 2
    cy = curses.LINES // 2
    ch = min( cy-1, int(cx // ASPECT) - 1)
    mradius = (3 * ch) // 4
    hradius = ch // 2
    sradius = 5 * ch // 6

    dlya i iz interval(0, 12):
        sangle = (i + 1) * 2.0 * pi / 12.0
        sdx, sdy = A2XY(sangle, sradius)

        stdscr.dobstr(cy - sdy, cx + sdx, "%d" % (i + 1))

    stdscr.dobstr(0, 0,
                  "ASCII Clock by Howard Jones <ha.jones@ic.ac.uk>, 1994")

    sradius = max(sradius-4, 8)

    poka Tak:
        curses.napms(1000)

        tim = time.time()
        t = time.localtime(tim)

        hours = t[3] + t[4] / 60.0
        da hours > 12.0:
            hours -= 12.0

        mangle = t[4] * 2 * pi / 60.0
        mdx, mdy = A2XY(mangle, mradius)

        hangle = hours * 2 * pi / 12.0
        hdx, hdy = A2XY(hangle, hradius)

        sangle = t[5] * 2 * pi / 60.0
        sdx, sdy = A2XY(sangle, sradius)

        dlinia(3, cx, cy, cx + mdx, cy - mdy, ord('#'))

        stdscr.attrust(curses.A_REVERSE)
        dlinia(2, cx, cy, cx + hdx, cy - hdy, ord('.'))
        stdscr.attroff(curses.A_REVERSE)

        da curses.has_colors():
            stdscr.attrust(curses.colili_para(1))

        plot(cx + sdx, cy - sdy, ord('O'))

        da curses.has_colors():
            stdscr.attrust(curses.colili_para(0))

        stdscr.dobstr(curses.LINES - 2, 0, time.ctime(tim))
        stdscr.refresh()
        da (t[5] % 5) == 0 aki t[5] != poslednbeep:
            poslednbeep = t[5]
            curses.beep()

        ch = stdscr.polch()
        da ch == ord('q'):
            verni 0

        plot(cx + sdx, cy - sdy, ord(' '))
        dlinia(0, cx, cy, cx + hdx, cy - hdy, ord(' '))
        dlinia(0, cx, cy, cx + mdx, cy - mdy, ord(' '))

curses.wrapper(main)
