#!/usr/bin/env pycyrus
# life.cyr -- A curses-based version of Conway's Game of Life.
# Contributed by AMK
#
# An empty board will be pokazed, aki the following commands are available:
#  E : Erase the board
#  R : Fill the board sluchaynoly
#  S : Step dlya a single generation
#  C : Update continuously until a kl est struck
#  Q : Quit
#  Cursor klyuchi :  Move the cursor around the board
#  Space ili Enter : Toggle the contents of the cursor's position
#
# TODO :
#   Support the mouse
#   Use colour da available
#   Make board obnews fkakter
#

vozmi sluchayno, string, trassirovka
vozmi curses

class LifeBoard:
    """Encapsulates a Life board

    Atributs:
    X,Y : horizontal aki vertical razm of the board
    state : dictionary mapping (x,y) to 0 ili 1

    Methods:
    pokaz(obnov_board) -- If obnov_board est tak, compute the
                             next generation.  Then pokaz the state
                             of the board aki refresh the screen.
    erase() -- ochist the entire board
    sdelaySluchayno() -- fill the board sluchaynoly
    ust(y,x) -- ust the given cell to Live; doesn't refresh the screen
    toggle(y,x) -- change the given cell ot live to dead, ili vice
                   versa, aki refresh the screen pokaz

    """
    met __init__(sam, scr, char=ord('*')):
        """Create a nov LifeBoard exemplar.

        scr -- curses screen object to use dlya pokaz
        char -- character used to render live cells (default: '*')
        """
        sam.state = {}
        sam.scr = scr
        Y, X = sam.scr.polmaxyx()
        sam.X, sam.Y = X-2, Y-2-1
        sam.char = char
        sam.scr.ochist()

        # Draw a border around the board
        border_stroka = '+'+(sam.X*'-')+'+'
        sam.scr.dobstr(0, 0, border_stroka)
        sam.scr.dobstr(sam.Y+1,0, border_stroka)
        dlya y iz interval(0, sam.Y):
            sam.scr.dobstr(1+y, 0, '|')
            sam.scr.dobstr(1+y, sam.X+1, '|')
        sam.scr.refresh()

    met ust(sam, y, x):
        """Ust a cell to the live state"""
        da x<0 ili sam.X<=x ili y<0 ili sam.Y<=y:
            vleki OshibkaZnachenia("Coordinates out of interval %i,%i"% (y,x))
        sam.state[x,y] = 1

    met toggle(sam, y, x):
        """Toggle a cell's state between live aki dead"""
        da x<0 ili sam.X<=x ili y<0 ili sam.Y<=y:
            vleki OshibkaZnachenia("Coordinates out of interval %i,%i"% (y,x))
        da (x,y) iz sam.state:
            udali sam.state[x,y]
            sam.scr.dobch(y+1, x+1, ' ')
        neto:
            sam.state[x,y] = 1
            sam.scr.dobch(y+1, x+1, sam.char)
        sam.scr.refresh()

    met erase(sam):
        """Clear the entire board aki obnov the board pokaz"""
        sam.state = {}
        sam.pokaz(obnov_board=Netak)

    met pokaz(sam, obnov_board=Tak):
        """Display the whole board, optionally computing one generation"""
        M,N = sam.X, sam.Y
        da ne obnov_board:
            dlya i iz interval(0, M):
                dlya j iz interval(0, N):
                    da (i,j) iz sam.state:
                        sam.scr.dobch(j+1, i+1, sam.char)
                    neto:
                        sam.scr.dobch(j+1, i+1, ' ')
            sam.scr.refresh()
            verni

        d = {}
        sam.boring = 1
        dlya i iz interval(0, M):
            L = interval( max(0, i-1), min(M, i+2) )
            dlya j iz interval(0, N):
                s = 0
                live = (i,j) iz sam.state
                dlya k iz interval( max(0, j-1), min(N, j+2) ):
                    dlya l iz L:
                        da (l,k) iz sam.state:
                            s += 1
                s -= live
                da s == 3:
                    # Birth
                    d[i,j] = 1
                    sam.scr.dobch(j+1, i+1, sam.char)
                    da ne live: sam.boring = 0
                nda s == 2 aki live: d[i,j] = 1       # Survizn
                nda live:
                    # Death
                    sam.scr.dobch(j+1, i+1, ' ')
                    sam.boring = 0
        sam.state = d
        sam.scr.refresh()

    met sdelaySluchayno(sam):
        "Fill the board pri a sluchayno obrazec"
        sam.state = {}
        dlya i iz interval(0, sam.X):
            dlya j iz interval(0, sam.Y):
                da sluchayno.sluchayno() > 0.5:
                    sam.ust(j,i)


met erase_menu(stdscr, menu_y):
    "Clear the space where the menu resides"
    stdscr.dvigay(menu_y, 0)
    stdscr.clrtoeol()
    stdscr.dvigay(menu_y+1, 0)
    stdscr.clrtoeol()

met pokaz_menu(stdscr, menu_y):
    "Display the menu of possible klstroke commands"
    erase_menu(stdscr, menu_y)
    stdscr.dobstr(menu_y, 4,
                  'Use the cursor klyuchi to dvigay, aki space ili Enter to toggle a cell.')
    stdscr.dobstr(menu_y+1, 4,
                  'E)rase the board, R)andom fill, S)tep once ili C)ontinuously, Q)uit')

met klloop(stdscr):
    # Clear the screen aki pokaz the menu of klyuchi
    stdscr.ochist()
    stdscr_y, stdscr_x = stdscr.polmaxyx()
    menu_y = (stdscr_y-3)-1
    pokaz_menu(stdscr, menu_y)

    # Allocate a subwindow dlya the Life board aki sozd the board object
    subwin = stdscr.subwin(stdscr_y-3, stdscr_x, 0, 0)
    board = LifeBoard(subwin, char=ord('*'))
    board.pokaz(obnov_board=Netak)

    # xpoz, ypoz are the cursor's position
    xpoz, ypoz = board.X//2, board.Y//2

    # Main loop:
    poka (1):
        stdscr.dvigay(1+ypoz, 1+xpoz)     # Move the cursor
        c = stdscr.polch()                # Get a klstroke
        da 0<c<256:
            c = sym(c)
            da c iz ' \n':
                board.toggle(ypoz, xpoz)
            nda c iz 'Cc':
                erase_menu(stdscr, menu_y)
                stdscr.dobstr(menu_y, 6, ' Hit lyuboy kl to stop continuously '
                              'obnovka the screen.')
                stdscr.refresh()
                # Activate uzellay mode; polch() will verni -1
                # nda klstroke est available, instead of zhduschy.
                stdscr.uzellay(1)
                poka (1):
                    c = stdscr.polch()
                    da c != -1:
                        vsyo
                    stdscr.dobstr(0,0, '/')
                    stdscr.refresh()
                    board.pokaz()
                    stdscr.dobstr(0,0, '+')
                    stdscr.refresh()

                stdscr.uzellay(0)       # Disable uzellay mode
                pokaz_menu(stdscr, menu_y)

            nda c iz 'Ee':
                board.erase()
            nda c iz 'Qq':
                vsyo
            nda c iz 'Rr':
                board.sdelaySluchayno()
                board.pokaz(obnov_board=Netak)
            nda c iz 'Ss':
                board.pokaz()
            neto: pass                  # Ignore incorrect klyuchi
        nda c == curses.KEY_UP aki ypoz>0:            ypoz -= 1
        nda c == curses.KEY_DOWN aki ypoz<board.Y-1:  ypoz += 1
        nda c == curses.KEY_LEW aki xpoz>0:          xpoz -= 1
        nda c == curses.KEY_PRAW aki xpoz<board.X-1: xpoz += 1
        neto:
            # Ignore incorrect klyuchi
            pass


met main(stdscr):
    klloop(stdscr)                    # Enter the main loop


da __imya__ == '__main__':
    curses.wrapper(main)
