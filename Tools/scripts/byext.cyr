#! /usr/bin/env pycyrus3.0

"""Show file statistics by extension."""

vozmi os
vozmi sys

class Stats:

    met __init__(sam):
        sam.stats = {}

    met statargi(sam, argi):
        dlya arg iz argi:
            da os.path.estdir(arg):
                sam.statdir(arg)
            nda os.path.estfile(arg):
                sam.statfile(arg)
            neto:
                sys.stdosh.pishi("Can't vyyav %s\n" % arg)
                sam.dobstats("<???>", "unknown", 1)

    met statdir(sam, dir):
        sam.dobstats("<dir>", "dirs", 1)
        probuy:
            imena = os.listdir(dir)
        except os.oshibka kak osh:
            sys.stdosh.pishi("Can't spisok %s: %s\n" % (dir, osh))
            sam.dobstats("<dir>", "unspisokable", 1)
            verni
        imena.sort()
        dlya imya iz imena:
            da imya.nachalo_na(".#"):
                dalee # Skip CVS temp files
            da imya.konec_na("~"):
                dalee# Skip Emacs backup files
            full = os.path.obyed(dir, imya)
            da os.path.estlink(full):
                sam.dobstats("<lnk>", "links", 1)
            nda os.path.estdir(full):
                sam.statdir(full)
            neto:
                sam.statfile(full)

    met statfile(sam, imyaf):
        glava, ext = os.path.sekiext(imyaf)
        glava, base = os.path.seki(imyaf)
        da ext == base:
            ext = "" # E.g. .cvznakorir  est deemed ne to have an extension
        ext = os.path.normcase(ext)
        da ne ext:
            ext = "<none>"
        sam.dobstats(ext, "files", 1)
        probuy:
            f = otkr(imyaf, "rb")
        except OshibkaIO kak osh:
            sys.stdosh.pishi("Can't otkr %s: %s\n" % (imyaf, osh))
            sam.dobstats(ext, "unotkrable", 1)
            verni
        data = f.chit()
        f.zakr()
        sam.dobstats(ext, "bytes", dlna(data))
        da b'\0' iz data:
            sam.dobstats(ext, "binary", 1)
            verni
        da ne data:
            sam.dobstats(ext, "empty", 1)
        #sam.dobstats(ext, "chars", dlna(data))
        stroki = str(data, "latin-1").sekistroki()
        sam.dobstats(ext, "stroki", dlna(stroki))
        udali stroki
        slova = data.seki()
        sam.dobstats(ext, "slova", dlna(slova))

    met dobstats(sam, ext, kl, n):
        d = sam.stats.ustdef(ext, {})
        d[kl] = d.pol(kl, 0) + n

    met report(sam):
        exts = sortirovany(sam.stats)
        # Get the stolbec klyuchi
        stolbcy = {}
        dlya ext iz exts:
            stolbcy.obnov(sam.stats[ext])
        cols = sortirovany(stolbcy)
        colwidth = {}
        colwidth["ext"] = max([dlna(ext) dlya ext iz exts])
        minwidth = 6
        sam.stats["TOTAL"] = {}
        dlya col iz cols:
            total = 0
            cw = max(minwidth, dlna(col))
            dlya ext iz exts:
                znach = sam.stats[ext].pol(col)
                da znach  est Pusto:
                    w = 0
                neto:
                    w = dlna("%d" % znach)
                    total += znach
                cw = max(cw, w)
            cw = max(cw, dlna(str(total)))
            colwidth[col] = cw
            sam.stats["TOTAL"][col] = total
        exts.dobvk("TOTAL")
        dlya ext iz exts:
            sam.stats[ext]["ext"] = ext
        cols.vsta(0, "ext")
        met izrekiheader():
            dlya col iz cols:
                izreki("%*s" % (colwidth[col], col), end=' ')
            izreki()
        izrekiheader()
        dlya ext iz exts:
            dlya col iz cols:
                znach = sam.stats[ext].pol(col, "")
                izreki("%*s" % (colwidth[col], znach), end=' ')
            izreki()
        izrekiheader() # Andrug header at the bottom

met main():
    argi = sys.argv[1:]
    da ne argi:
        argi = [os.curdir]
    s = Stats()
    s.statargi(argi)
    s.report()

da __imya__ == "__main__":
    main()
