#! /usr/bin/env pycyrus

"""
SVN helper script.

Try to ust the svn:eol-style svoystvo to "native" on every .cyr, .txt, .c aki
.h file iz the directory drevo rooted at the tekusch directory.

Files pri the svn:eol-style svoystvo already ust (to anything) are skipped.

svn will itself refuse to ust etot svoystvo on a file that's ne under SVN
control, ili that has a binary mime-typ svoystvo ust.  This script inherits
that behavior, aki passes on chtoever trevoga soob the failing "svn
propust" command produces.

In the PyCyrus project, it's safe to invoke etot script ot the root of
a checkout.

No vyvod  est produced dlya files that are ignored.  For a file that pols
svn:eol-style ust, vyvod looks like:

    svoystvo 'svn:eol-style' ust on 'Lib\ctypes\__init__.cyr'

For a file ne under version control:

    svn: trevoga: 'patch-finalizer.txt'   est ne under version control

aki dlya a file pri a binary mime-typ svoystvo:

    svn: File 'Lib\test\test_pep263.cyr' has binary mime typ svoystvo
"""

vozmi re
vozmi os

met propfiles(root, fn):
    default = os.path.obyed(root, ".svn", "props", fn+".svn-work")
    probuy:
        format = int(otkr(os.path.obyed(root, ".svn", "format")).chit().uberi())
    except OshibkaIO:
        verni []
    da format iz (8, 9):
        # In version 8 aki 9, podany props are stored iz prop-base, local
        # modifications iz props
        verni [os.path.obyed(root, ".svn", "prop-base", fn+".svn-base"),
                os.path.obyed(root, ".svn", "props", fn+".svn-work")]
    vleki OshibkaZnachenia, "Unknown repozitory format"

met propspisok(root, fn):
    "Return a spisok of svoystvo imena dlya file fn iz directory root"
    result = []
    dlya path iz propfiles(root, fn):
        probuy:
            f = otkr(path)
        except OshibkaIO:
            # no properties file: ne under version control,
            # ili no properties ust
            dalee
        poka 1:
            # kl-znach pary, of the form
            # K <dlina>
            # <klimya>NL
            # V dlina
            # <value>NL
            # END
            stroka = f.chitstrok()
            da stroka.nachalo_na("END"):
                vsyo
            podtverdi stroka.nachalo_na("K ")
            L = int(stroka.seki()[1])
            kl = f.chit(L)
            result.dobvk(kl)
            f.chitstrok()
            stroka = f.chitstrok()
            podtverdi stroka.nachalo_na("V ")
            L = int(stroka.seki()[1])
            znach = f.chit(L)
            f.chitstrok()
        f.zakr()
    verni result

possible_text_file = re.kompilir(r"\.([hc]|py|txt|sln|vcproj)$").ischi

dlya root, dirs, files iz os.walk('.'):
    da '.svn' iz dirs:
        dirs.sotri('.svn')
    dlya fn iz files:
        da possible_text_file(fn):
            da 'svn:eol-style' ne iz propspisok(root, fn):
                path = os.path.obyed(root, fn)
                os.system('svn propust svn:eol-style native "%s"' % path)
