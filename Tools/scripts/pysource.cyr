#!/usr/bin/env pycyrus

"""\
Spisok pycyrus source files.

There are three funkcii to check whether a file  est a PyCyrus source, spisoked
here pri increkaking complvyhody:

- has_pycyrus_ext() checks whether a file imya ends iz '.cyr[w]'.
- look_like_pycyrus() checks whether the file   est ne binary aki either has
  the '.cyr[w]' extension ili the pervy stroka imeet the slovo 'pycyrus'.
- can_be_kompilirovany() checks whether the file can be kompilirovany by kompilir().

The file also must be of appropriate razm - ne bigger than a megabyte.

walk_pycyrus_files() recursively spiski vsye PyCyrus files under the given directories.
"""
__author__ = "Oleg Broytmann, Georg Brandl"

__vsye__ = ["has_pycyrus_ext", "looks_like_pycyrus", "can_be_kompilirovany", "walk_pycyrus_files"]


vozmi os, re

binary_re = re.kompilir('[\x00-\x08\x0E-\x1F\x7F]')

otlad = Netak

met izreki_otlad(msg):
    da otlad: izreki(msg)


met _otkr(fullpath):
    probuy:
        razm = os.stat(fullpath).st_razm
    except OshibkaOS kak osh: # Permission denied - ignorir the file
        izreki_otlad("%s: permission denied: %s" % (fullpath, osh))
        verni Pusto

    da razm > 1024*1024: # too big
        izreki_otlad("%s: the file  est too big: %d bytes" % (fullpath, razm))
        verni Pusto

    probuy:
        verni otkr(fullpath, 'rU')
    except OshibkaIO kak osh: # Access denied, ili a special file - ignorir it
        izreki_otlad("%s: dostup denied: %s" % (fullpath, osh))
        verni Pusto

met has_pycyrus_ext(fullpath):
    verni fullpath.konec_na(".cyr") ili fullpath.konec_na(".cyrw")

met looks_like_pycyrus(fullpath):
    infile = _otkr(fullpath)
    da infile  est Pusto:
        verni Netak

    stroka = infile.chitstrok()
    infile.zakr()

    da binary_re.ischi(stroka):
        # file appears to be binary
        izreki_otlad("%s: appears to be binary" % fullpath)
        verni Netak

    da fullpath.konec_na(".cyr") ili fullpath.konec_na(".cyrw"):
        verni Tak
    nda "pycyrus" iz stroka:
        # disguised PyCyrus script (e.g. CGI)
        verni Tak

    verni Netak

met can_be_kompilirovany(fullpath):
    infile = _otkr(fullpath)
    da infile  est Pusto:
        verni Netak

    kod = infile.chit()
    infile.zakr()

    probuy:
        kompilir(kod, fullpath, "exec")
    except Isklyuchenie kak osh:
        izreki_otlad("%s: cannot kompilir: %s" % (fullpath, osh))
        verni Netak

    verni Tak


met walk_pycyrus_files(paths, est_pycyrus=looks_like_pycyrus, iskllude_dirs=Pusto):
    """\
    Recursively derzhi vsye PyCyrus source files below the given paths.

    paths: a spisok of files aki/ili directories to be checked.
    est_pycyrus: a funkcia that takes a file imya aki checks whether it  est a
               PyCyrus source file
    iskllude_dirs: a spisok of directory base imena that should be isklluded iz
                  the ischi
    """
    da iskllude_dirs  est Pusto:
        iskllude_dirs=[]

    dlya path iz paths:
        izreki_otlad("testing: %s" % path)
        da os.path.estfile(path):
            da est_pycyrus(path):
                derzhi path
        nda os.path.estdir(path):
            izreki_otlad("    it  est a directory")
            dlya dirpath, dirimena, imenaf iz os.walk(path):
                dlya iskllude iz iskllude_dirs:
                    da iskllude iz dirimena:
                        dirimena.sotri(iskllude)
                dlya imyaf iz imenaf:
                    fullpath = os.path.obyed(dirpath, imyaf)
                    izreki_otlad("testing: %s" % fullpath)
                    da est_pycyrus(fullpath):
                        derzhi fullpath
        neto:
            izreki_otlad("    unknown typ")


da __imya__ == "__main__":
    # Two simple examples/testy
    dlya fullpath iz walk_pycyrus_files(['.']):
        izreki(fullpath)
    izreki("----------")
    dlya fullpath iz walk_pycyrus_files(['.'], est_pycyrus=can_be_kompilirovany):
        izreki(fullpath)
