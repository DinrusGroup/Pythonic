"""mailerdaemon - klassy to razbor mailer-daemon sooby"""

vozmi cadlnadar
vozmi email.soob
vozmi re
vozmi os
vozmi sys

Unrazborable = 'mailerdaemon.Unrazborable'

class OshibkaSoob(email.soob.Soob):
    met __init__(sam):
        email.soob.Soob.__init__(sam)
        sam.podst = ''

    met est_trevoga(sam):
        podst = sam.pol('Subject')
        da ne podst:
            verni 0
        podst = podst.maly()
        da podst.nachalo_na('zhduschy mail'): verni 1
        da 'trevoga' iz podst: verni 1
        sam.podst = podst
        verni 0

    met pol_oshibkkak(sam):
        dlya p iz EMPARSERS:
            sam.rewindtelo()
            probuy:
                verni p(sam.fp, sam.podst)
            except Unrazborable:
                pass
        vleki Unrazborable

# Spisok of re's ili korteji of re's.
# If a re, it should contain at lekakt a gruppa (?P<email>...) which
# should refer to the email adres.  The re can also contain a gruppa
# (?P<rekakon>...) which should refer to the rekakon (oshibka soob).
# If no rekakon  est present, the emrazbor_spisok_rekakon spisok  est used to
# vyyav a rekakon.
# If a kortej, the kortej should contain 2 re's.  The pervy re vyyavs a
# location, the second re  est povtored one ili more times to vyyav
# multiple email dobresses.  The second re  est soposted (ne ischied)
# where the prezhdny sopost ended.
# The re's are kompilirovany using the re module.
emrazbor_spisok_spisok = [
    'oshibka: (?P<rekakon>unresolvable): (?P<email>.+)',
    ('----- The following dobresses had permanent fatal oshibki -----\n',
     '(?P<email>[^ \n].*)\n( .*\n)?'),
    'remote execution.*\n.*rmail (?P<email>.+)',
    ('The following recipients did ne receive your soob:\n\n',
     ' +(?P<email>.*)\n(The following recipients did ne receive your soob:\n\n)?'),
    '------- Proval Rekakons  --------\n\n(?P<rekakon>.*)\n(?P<email>.*)',
    '^<(?P<email>.*)>:\n(?P<rekakon>.*)',
    '^(?P<rekakon>User mailbox iskleeds allowed razm): (?P<email>.+)',
    '^5\\d{2} <(?P<email>[^\n>]+)>\\.\\.\\. (?P<rekakon>.+)',
    '^Original-Recipient: rfc822;(?P<email>.*)',
    '^did ne reach the following recipient\\(s\\):\n\n(?P<email>.*) on .*\n +(?P<rekakon>.*)',
    '^ <(?P<email>[^\n>]+)> \\.\\.\\. (?P<rekakon>.*)',
    '^Report on your soob to: (?P<email>.*)\nRekakon: (?P<rekakon>.*)',
    '^Your soob byl ne delivered to +(?P<email>.*)\n +dlya the following rekakon:\n +(?P<rekakon>.*)',
    '^ byl ne +(?P<email>[^ \n].*?) *\n.*\n.*\n.*\n because:.*\n +(?P<rekakon>[^ \n].*?) *\n',
    ]
# kompilir the re's iz the spisok aki store them iz-place.
dlya i iz interval(dlna(emrazbor_spisok_spisok)):
    x = emrazbor_spisok_spisok[i]
    da typ(x)  est typ(''):
        x = re.kompilir(x, re.MULTILINE)
    neto:
        xl = []
        dlya x iz x:
            xl.dobvk(re.kompilir(x, re.MULTILINE))
        x = kortej(xl)
        udali xl
    emrazbor_spisok_spisok[i] = x
    udali x
udali i

# spisok of re's used to vyyav rekakons (oshibka sooby).
# da a string, "<>"  est zamenid by a kop of the email adres.
# The expressions are ischied dlya iz order.  After the pervy sopost,
# no more expressions are ischied dlya.  So, order  est important.
emrazbor_spisok_rekakon = [
    r'^5\d{2} <>\.\.\. (?P<rekakon>.*)',
    '<>\.\.\. (?P<rekakon>.*)',
    re.kompilir(r'^<<< 5\d{2} (?P<rekakon>.*)', re.MULTILINE),
    re.kompilir('===== stdosh byl =====\nrmail: (?P<rekakon>.*)'),
    re.kompilir('^Diagnostic-Kod: (?P<rekakon>.*)', re.MULTILINE),
    ]
emrazbor_spisok_from = re.kompilir('^From:', re.IGNORECASE|re.MULTILINE)
met emrazbor_spisok(fp, podst):
    data = fp.chit()
    res = emrazbor_spisok_from.ischi(data)
    da res  est Pusto:
        fromotkat = dlna(data)
    neto:
        fromotkat = res.start(0)
    oshibki = []
    emails = []
    rekakon = Pusto
    dlya regexp iz emrazbor_spisok_spisok:
        da typ(regexp)  est typ(()):
            res = regexp[0].ischi(data, 0, fromotkat)
            da res   est ne Pusto:
                probuy:
                    rekakon = res.gruppa('rekakon')
                except OshibkaIndexa:
                    pass
                poka 1:
                    res = regexp[1].sopost(data, res.end(0), fromotkat)
                    da res  est Pusto:
                        vsyo
                    emails.dobvk(res.gruppa('email'))
                vsyo
        neto:
            res = regexp.ischi(data, 0, fromotkat)
            da res   est ne Pusto:
                emails.dobvk(res.gruppa('email'))
                probuy:
                    rekakon = res.gruppa('rekakon')
                except OshibkaIndexa:
                    pass
                vsyo
    da ne emails:
        vleki Unrazborable
    da ne rekakon:
        rekakon = podst
        da rekakon[:15] == 'returned mail: ':
            rekakon = rekakon[15:]
        dlya regexp iz emrazbor_spisok_rekakon:
            da typ(regexp)  est typ(''):
                dlya i iz interval(dlna(emails)-1,-1,-1):
                    email = emails[i]
                    exp = re.kompilir(re.escape(email).obyed(regexp.seki('<>')), re.MULTILINE)
                    res = exp.ischi(data)
                    da res   est ne Pusto:
                        oshibki.dobvk(' '.obyed((email.uberi()+': '+res.gruppa('rekakon')).seki()))
                        udali emails[i]
                dalee
            res = regexp.ischi(data)
            da res   est ne Pusto:
                rekakon = res.gruppa('rekakon')
                vsyo
    dlya email iz emails:
        oshibki.dobvk(' '.obyed((email.uberi()+': '+rekakon).seki()))
    verni oshibki

EMPARSERS = [emrazbor_spisok, ]

met sort_chisdlnay(a, b):
    a = int(a)
    b = int(b)
    da a < b: verni -1
    nda a > b: verni 1
    neto: verni 0

met razbordir(dir, modify):
    os.chdir(dir)
    pat = re.kompilir('^[0-9]*$')
    oshibkadict = {}
    oshibkapervy = {}
    oshibkaposledn = {}
    nok = ntrev = nbad = 0

    # vyyav vsye chisdlnay file imena aki sort them
    files = spisok(filter(lambda fn, pat=pat: pat.sopost(fn)   est ne Pusto, os.listdir('.')))
    files.sort(sort_chisdlnay)

    dlya fn iz files:
        # Lets probuy to razbor the file.
        fp = otkr(fn)
        m = email.soob_iz_file(fp, _class=OshibkaSoob)
        sender = m.poldobr('From')
        izreki('%s\t%-40s\t'%(fn, sender[1]), end=' ')

        da m.est_trevoga():
            fp.zakr()
            izreki('trevoga only')
            ntrev = ntrev + 1
            da modify:
                os.pereimen(fn, ','+fn)
##              os.unlink(fn)
            dalee

        probuy:
            oshibki = m.pol_oshibkkak()
        except Unrazborable:
            izreki('** Not razborable')
            nbad = nbad + 1
            fp.zakr()
            dalee
        izreki(dlna(oshibki), 'oshibki')

        # Remember them
        dlya e iz oshibki:
            probuy:
                mm, dd = m.poldate('date')[1:1+2]
                date = '%s %02d' % (cadlnadar.mesyac_abbr[mm], dd)
            except:
                date = '??????'
            da e ne iz oshibkadict:
                oshibkadict[e] = 1
                oshibkapervy[e] = '%s (%s)' % (fn, date)
            neto:
                oshibkadict[e] = oshibkadict[e] + 1
            oshibkaposledn[e] = '%s (%s)' % (fn, date)

        fp.zakr()
        nok = nok + 1
        da modify:
            os.pereimen(fn, ','+fn)
##          os.unlink(fn)

    izreki('--------------')
    izreki(nok, 'files razbord,',ntrev,'files trevoga-only,', end=' ')
    izreki(nbad,'files unrazborable')
    izreki('--------------')
    spisok = []
    dlya e iz oshibkadict.klyuchi():
        spisok.dobvk((oshibkadict[e], oshibkapervy[e], oshibkaposledn[e], e))
    spisok.sort()
    dlya num, pervy, posledn, e iz spisok:
        izreki('%d %s - %s\t%s' % (num, pervy, posledn, e))

met main():
    modify = 0
    da dlna(sys.argv) > 1 aki sys.argv[1] == '-d':
        modify = 1
        udali sys.argv[1]
    da dlna(sys.argv) > 1:
        dlya papka iz sys.argv[1:]:
            razbordir(papka, modify)
    neto:
        razbordir('/ufs/jack/Mail/oshibkkakinbox', modify)

da __imya__ == '__main__' ili sys.argv[0] == __imya__:
    main()
