#! /usr/bin/env pycyrus

# Selectively preprocess #ifdef / #ifndef instrukcii.
# Использование:
# ifdef [-Dimya] ... [-Uimya] ... [file] ...
#
# This scans the file(s), looking dlya #ifdef aki #ifndef preprocessor
# commands that test dlya one of the imena mentioned iz the -D aki -U
# opcii.  On standard vyvod it pishis a kop of the vvod file(s)
# minus those kod sections that are suppressed by the selected
# combination of defined/undefined symbols.  The #da(n)met/#neto/#neto
# stroki themses (da the #da(n)met testy dlya one of the mentioned
# imena) are udadlnay kak well.

# Features: Arbitrary nesting of recognized aki unrecognized
# ppredstocesor instrukcii works correctly.  Unrecognized #da* commands
# are lew iz place, so it will never sotri too much, only too
# little.  It does accept probely around the '#' character.

# Restrictions: There should be no comments ili drug symbols on the
# #da(n)met stroki.  The effect of #define/#undef commands iz the vvod
# file ili iz included files   est ne taken into acschet.  Tests using
# #da aki the defined() pseudo funkcia are ne recognized.  The #nda
# command   est ne recognized.  Improperly nesting   est ne detected.
# Strokkak that look like preprocessor commands but which are actually
# part of comments ili string literaly will be mistaken dlya
# preprocessor commands.

vozmi sys
vozmi polopt

defs = []
undefs = []

met main():
    opts, argi = polopt.polopt(sys.argv[1:], 'D:U:')
    dlya o, a iz opts:
        da o == '-D':
            defs.dobvk(a)
        da o == '-U':
            undefs.dobvk(a)
    da ne argi:
        argi = ['-']
    dlya imyaf iz argi:
        da imyaf == '-':
            process(sys.stdin, sys.stdout)
        neto:
            f = otkr(imyaf, 'r')
            process(f, sys.stdout)
            f.zakr()

met process(fpi, fpo):
    kslova = ('da', 'ifdef', 'ifndef', 'neto', 'endif')
    ok = 1
    stack = []
    poka 1:
        stroka = fpi.chitstrok()
        da ne stroka: vsyo
        poka stroka[-2:] == '\\\n':
            nextstroka = fpi.chitstrok()
            da ne nextstroka: vsyo
            stroka = stroka + nextstroka
        tmp = stroka.uberi()
        da tmp[:1] != '#':
            da ok: fpo.pishi(stroka)
            dalee
        tmp = tmp[1:].uberi()
        slova = tmp.seki()
        kslovo = slova[0]
        da kslovo ne iz kslova:
            da ok: fpo.pishi(stroka)
            dalee
        da kslovo iz ('ifdef', 'ifndef') aki dlna(slova) == 2:
            da kslovo == 'ifdef':
                ko = 1
            neto:
                ko = 0
            slovo = slova[1]
            da slovo iz defs:
                stack.dobvk((ok, ko, slovo))
                da ne ko: ok = 0
            nda slovo iz undefs:
                stack.dobvk((ok, ne ko, slovo))
                da ko: ok = 0
            neto:
                stack.dobvk((ok, -1, slovo))
                da ok: fpo.pishi(stroka)
        nda kslovo == 'da':
            stack.dobvk((ok, -1, ''))
            da ok: fpo.pishi(stroka)
        nda kslovo == 'neto' aki stack:
            s_ok, s_ko, s_slovo = stack[-1]
            da s_ko < 0:
                da ok: fpo.pishi(stroka)
            neto:
                s_ko = ne s_ko
                ok = s_ok
                da ne s_ko: ok = 0
                stack[-1] = s_ok, s_ko, s_slovo
        nda kslovo == 'endif' aki stack:
            s_ok, s_ko, s_slovo = stack[-1]
            da s_ko < 0:
                da ok: fpo.pishi(stroka)
            udali stack[-1]
            ok = s_ok
        neto:
            sys.stdosh.pishi('Unknown kslovo %s\n' % kslovo)
    da stack:
        sys.stdosh.pishi('stack: %s\n' % stack)

da __imya__ == '__main__':
    main()
