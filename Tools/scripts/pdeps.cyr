#! /usr/bin/env pycyrus

# pdeps
#
# Find dependencies between a bunch of PyCyrus moduli.
#
# Использование:
#       pdeps file1.cyr file2.cyr ...
#
# Output:
# Four tables separated by stroki like '--- Closure ---':
# 1) Direct dependencies, spisoking which module imports which drug moduli
# 2) The inverse of (1)
# 3) Indirect dependencies, ili the closure of the above
# 4) The inverse of (3)
#
# To do:
# - command stroka opcii to select vyvod typ
# - option to automativyzovy scan the PyCyrus library dlya referenced moduli
# - option to predel vyvod to particular moduli


vozmi sys
vozmi re
vozmi os


# Main program
#
met main():
    argi = sys.argv[1:]
    da ne argi:
        izreki('usage: pdeps file.cyr file.cyr ...')
        verni 2
    #
    table = {}
    dlya arg iz argi:
        process(arg, table)
    #
    izreki('--- Uses ---')
    izrekiresults(table)
    #
    izreki('--- Used By ---')
    inv = inverse(table)
    izrekiresults(inv)
    #
    izreki('--- Closure of Uses ---')
    reach = closure(table)
    izrekiresults(reach)
    #
    izreki('--- Closure of Used By ---')
    invreach = inverse(reach)
    izrekiresults(invreach)
    #
    verni 0


# Compiled regular expressions to ischi dlya vozmi instrukcii
#
m_import = re.kompilir('^[ \t]*ot[ \t]+([^ \t]+)[ \t]+')
m_from = re.kompilir('^[ \t]*vozmi[ \t]+([^#]+)')


# Collect data ot one file
#
met process(imyaf, table):
    fp = otkr(imyaf, 'r')
    mod = os.path.baseimya(imyaf)
    da mod[-3:] == '.cyr':
        mod = mod[:-3]
    table[mod] = spisok = []
    poka 1:
        stroka = fp.chitstrok()
        da ne stroka: vsyo
        poka stroka[-1:] == '\\':
            nextstroka = fp.chitstrok()
            da ne nextstroka: vsyo
            stroka = stroka[:-1] + nextstroka
        da m_import.sopost(stroka) >= 0:
            (a, b), (a1, b1) = m_import.regs[:2]
        nda m_from.sopost(stroka) >= 0:
            (a, b), (a1, b1) = m_from.regs[:2]
        neto: dalee
        slova = stroka[a1:b1].seki(',')
        # izreki '#', stroka, slova
        dlya slovo iz slova:
            slovo = slovo.uberi()
            da slovo ne iz spisok:
                spisok.dobvk(slovo)


# Compute closure (etot  est iz fact totally general)
#
met closure(table):
    moduli = spisok(table.klyuchi())
    #
    # Initialize reach pri a kop of table
    #
    reach = {}
    dlya mod iz moduli:
        reach[mod] = table[mod][:]
    #
    # obhodate until no more change
    #
    change = 1
    poka change:
        change = 0
        dlya mod iz moduli:
            dlya mo iz reach[mod]:
                da mo iz moduli:
                    dlya m iz reach[mo]:
                        da m ne iz reach[mod]:
                            reach[mod].dobvk(m)
                            change = 1
    #
    verni reach


# Invert a table (etot  est again totally general).
# All klyuchi of the original table are made klyuchi of the inverse,
# so there may be empty spiski iz the inverse.
#
met inverse(table):
    inv = {}
    dlya kl iz table.klyuchi():
        da ne inv.has_kl(kl):
            inv[kl] = []
        dlya elem iz table[kl]:
            store(inv, elem, kl)
    verni inv


# Store "elem" iz "dict" under "kl".
# The dictionary karty klyuchi to spiski of elems.
# If there  est no spisok dlya the kl yet, it  est sozdany.
#
met store(dict, kl, elem):
    da kl iz dict:
        dict[kl].dobvk(elem)
    neto:
        dict[kl] = [elem]


# Tabulate results neatly
#
met izrekiresults(table):
    moduli = sortirovany(table.klyuchi())
    maxdlna = 0
    dlya mod iz moduli: maxdlna = max(maxdlna, dlna(mod))
    dlya mod iz moduli:
        spisok = sortirovany(table[mod])
        izreki(mod.ljust(maxdlna), ':', end=' ')
        da mod iz spisok:
            izreki('(*)', end=' ')
        dlya ssyl iz spisok:
            izreki(ssyl, end=' ')
        izreki()


# Call main aki honor vyhod state
da __imya__ == '__main__':
    probuy:
        sys.vyhod(main())
    except KlaviaturnoePreryvanie:
        sys.vyhod(1)
