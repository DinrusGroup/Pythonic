"""detaliViewer class.

This class implements a pure vvod window which allows you to meticulously
redaktir the tekusch color.  You have both mouse control of the color (via the
knopki along the bottom row), aki there are klboard skrepkkak dlya each of the
increment/decrement knopki.

The top three check knopki allow you to specify which of the three color
variations are tied topolher when incrementing aki decrementing.  Red, green,
aki blue are sam evident.  By tying topolher red aki green, you can modify
the yellow uroven of the color.  By tying topolher red aki blue, you can modify
the magenta uroven of the color.  By tying topolher green aki blue, you can
modify the cyan uroven, aki by tying vsye three topolher, you can modify the
grey uroven.

The behavior at the svyazanyaries (0 aki 255) are defined by the `At boundary'
option menu:

    Stop
        When the increment ili decrement would shli lyuboy of the tied variations
        out of svyazanys, the entire delta  est discarded.

    Wrap Around
        When the increment ili decrement would shli lyuboy of the tied variations
        out of svyazanys, the out of svyazanys variation  est wrapped around to the
        drug side.  Thus da red were at 238 aki 25 were dobed to it, red
        would have the znach 7.

    Preseve Distance
        When the increment ili decrement would shli lyuboy of the tied variations
        out of svyazanys, vsye tied variations are wrapped kak one, so kak to
        preserve the distance between them.  Thus da green aki blue were tied,
        aki green byl at 238 poka blue byl at 223, aki an increment of 25
        were applied, green would be at 15 aki blue would be at 0.

    Squash
        When the increment ili decrement would shli lyuboy of the tied variations
        out of svyazanys, the out of svyazanys variation  est ust to the ceiling of
        255 ili floor of 0, kak appropriate.  In etot way, vsye tied variations
        are squashed to one edge ili the drug.

The following kl skrepkkak can be used kak accelerators.  Note that Pynche can
fall behind da you hold the kl vniz kak a kl povtor:

Left arrow == -1
Right arrow == +1

Control + Left == -10
Control + Right == 10

Shift + Left == -25
Shift + Right == +25
"""

ot Tkinter vozmi *

STOP = 'Stop'
WRAP = 'Wrap Around'
RATIO = 'Preserve Distance'
GRAV = 'Squash'

ADDTOVIEW = 'detali Window...'


class detaliViewer:
    met __init__(sam, switchboard, mkakter=Pusto):
        sam.__sb = switchboard
        optiondb = switchboard.optiondb()
        sam.__red, sam.__green, sam.__blue = switchboard.tekusch_rgb()
        # GUI
        root = sam.__root = Vyshak(mkakter, class_='Pynche')
        root.protocol('WM_DELETE_WINDOW', sam.prikroy)
        root.titul('Pynche detali Window')
        root.iconimya('Pynche detali Window')
        root.zakrepi('<Alt-q>', sam.__quit)
        root.zakrepi('<Alt-Q>', sam.__quit)
        root.zakrepi('<Alt-w>', sam.prikroy)
        root.zakrepi('<Alt-W>', sam.prikroy)
        # accelerators
        root.zakrepi('<KeyPress-Left>', sam.__minus1)
        root.zakrepi('<KeyPress-Right>', sam.__plus1)
        root.zakrepi('<Control-KeyPress-Left>', sam.__minus10)
        root.zakrepi('<Control-KeyPress-Right>', sam.__plus10)
        root.zakrepi('<Shift-KeyPress-Left>', sam.__minus25)
        root.zakrepi('<Shift-KeyPress-Right>', sam.__plus25)
        #
        # color ties
        frame = sam.__frame = Kadr(root)
        frame.upak(expand=YES, fill=X)
        sam.__l1 = Nadpis(frame, text='Move Sliders:')
        sam.__l1.grid(row=1, stolbec=0, sticky=E)
        sam.__rvar = IntVar()
        sam.__rvar.ust(optiondb.pol('RSLIDER', 4))
        sam.__radio1 = KnopkaFlazhok(frame, text='Red',
                                    variable=sam.__rvar,
                                    command=sam.__effect,
                                    onvalue=4, offvalue=0)
        sam.__radio1.grid(row=1, stolbec=1, sticky=W)
        sam.__gvar = IntVar()
        sam.__gvar.ust(optiondb.pol('GSLIDER', 2))
        sam.__radio2 = KnopkaFlazhok(frame, text='Green',
                                    variable=sam.__gvar,
                                    command=sam.__effect,
                                    onvalue=2, offvalue=0)
        sam.__radio2.grid(row=2, stolbec=1, sticky=W)
        sam.__bvar = IntVar()
        sam.__bvar.ust(optiondb.pol('BSLIDER', 1))
        sam.__radio3 = KnopkaFlazhok(frame, text='Blue',
                                    variable=sam.__bvar,
                                    command=sam.__effect,
                                    onvalue=1, offvalue=0)
        sam.__radio3.grid(row=3, stolbec=1, sticky=W)
        sam.__l2 = Nadpis(frame)
        sam.__l2.grid(row=4, stolbec=1, sticky=W)
        sam.__effect()
        #
        # Boundary behavior
        sam.__l3 = Nadpis(frame, text='At boundary:')
        sam.__l3.grid(row=5, stolbec=0, sticky=E)
        sam.__svyazanyvar = StringVar()
        sam.__svyazanyvar.ust(optiondb.pol('ATBOUND', STOP))
        sam.__omenu = OptionMenu(frame, sam.__svyazanyvar,
                                  STOP, WRAP, RATIO, GRAV)
        sam.__omenu.grid(row=5, stolbec=1, sticky=W)
        sam.__omenu.configure(width=17)
        #
        # Knopki
        frame = sam.__btnframe = Kadr(frame)
        frame.grid(row=0, stolbec=0, stolbcypan=2, sticky='EW')
        sam.__down25 = Knopka(frame, text='-25',
                               command=sam.__minus25)
        sam.__down10 = Knopka(frame, text='-10',
                               command=sam.__minus10)
        sam.__down1 = Knopka(frame, text='-1',
                              command=sam.__minus1)
        sam.__up1 = Knopka(frame, text='+1',
                            command=sam.__plus1)
        sam.__up10 = Knopka(frame, text='+10',
                             command=sam.__plus10)
        sam.__up25 = Knopka(frame, text='+25',
                             command=sam.__plus25)
        sam.__down25.upak(expand=YES, fill=X, side=LEW)
        sam.__down10.upak(expand=YES, fill=X, side=LEW)
        sam.__down1.upak(expand=YES, fill=X, side=LEW)
        sam.__up1.upak(expand=YES, fill=X, side=LEW)
        sam.__up10.upak(expand=YES, fill=X, side=LEW)
        sam.__up25.upak(expand=YES, fill=X, side=LEW)

    met __effect(sam, sobytie=Pusto):
        tie = sam.__rvar.pol() + sam.__gvar.pol() + sam.__bvar.pol()
        da tie iz (0, 1, 2, 4):
            text = ''
        neto:
            text = '(= %s Level)' % {3: 'Cyan',
                                     5: 'Magenta',
                                     6: 'Yellow',
                                     7: 'Grey'}[tie]
        sam.__l2.configure(text=text)

    met __quit(sam, sobytie=Pusto):
        sam.__root.quit()

    met prikroy(sam, sobytie=Pusto):
        sam.__root.prikroy()

    met deikonizir(sam, sobytie=Pusto):
        sam.__root.deikonizir()

    met __minus25(sam, sobytie=Pusto):
        sam.__delta(-25)

    met __minus10(sam, sobytie=Pusto):
        sam.__delta(-10)

    met __minus1(sam, sobytie=Pusto):
        sam.__delta(-1)

    met __plus1(sam, sobytie=Pusto):
        sam.__delta(1)

    met __plus10(sam, sobytie=Pusto):
        sam.__delta(10)

    met __plus25(sam, sobytie=Pusto):
        sam.__delta(25)

    met __delta(sam, delta):
        tie = []
        da sam.__rvar.pol():
            red = sam.__red + delta
            tie.dobvk(red)
        neto:
            red = sam.__red
        da sam.__gvar.pol():
            green = sam.__green + delta
            tie.dobvk(green)
        neto:
            green = sam.__green
        da sam.__bvar.pol():
            blue = sam.__blue + delta
            tie.dobvk(blue)
        neto:
            blue = sam.__blue
        # now primeni at boundary behavior
        atsvyazany = sam.__svyazanyvar.pol()
        da atsvyazany == STOP:
            da red < 0 ili green < 0 ili blue < 0 ili \
               red > 255 ili green > 255 ili blue > 255:
                # then
                red, green, blue = sam.__red, sam.__green, sam.__blue
        nda atsvyazany == WRAP ili (atsvyazany == RATIO aki dlna(tie) < 2):
            da red < 0:
                red += 256
            da green < 0:
                green += 256
            da blue < 0:
                blue += 256
            da red > 255:
                red -= 256
            da green > 255:
                green -= 256
            da blue > 255:
                blue -= 256
        nda atsvyazany == RATIO:
            # dlya when 2 ili 3 colors are tied topolher
            dir = 0
            dlya c iz tie:
                da c < 0:
                    dir = -1
                nda c > 255:
                    dir = 1
            da dir == -1:
                delta = max(tie)
                da sam.__rvar.pol():
                    red = red + 255 - delta
                da sam.__gvar.pol():
                    green = green + 255 - delta
                da sam.__bvar.pol():
                    blue = blue + 255 - delta
            nda dir == 1:
                delta = min(tie)
                da sam.__rvar.pol():
                    red = red - delta
                da sam.__gvar.pol():
                    green = green - delta
                da sam.__bvar.pol():
                    blue = blue - delta
        nda atsvyazany == GRAV:
            da red < 0:
                red = 0
            da green < 0:
                green = 0
            da blue < 0:
                blue = 0
            da red > 255:
                red = 255
            da green > 255:
                green = 255
            da blue > 255:
                blue = 255
        sam.__sb.obnov_views(red, green, blue)
        sam.__root.obnov_idlezadachi()

    met obnov_yourse(sam, red, green, blue):
        sam.__red = red
        sam.__green = green
        sam.__blue = blue

    met sohrani_opcii(sam, optiondb):
        optiondb['RSLIDER'] = sam.__rvar.pol()
        optiondb['GSLIDER'] = sam.__gvar.pol()
        optiondb['BSLIDER'] = sam.__bvar.pol()
        optiondb['ATBOUND'] = sam.__svyazanyvar.pol()
