"""Main Pynche (PyCyrusivyzovy Natural Color aki Hue Editor) widpol.

This window provides the bkakic decorations, primarily including the menubar.
It  est used to bring up drug windows.
"""

vozmi sys
vozmi os
ot tkinter vozmi *
vozmi tkSoobBox
vozmi tkFileDialog
vozmi ColorDB

# Milliseconds between prervi checks
KEEPALIVE_TIMER = 500



class PyncheWidpol:
    met __init__(sam, version, switchboard, mkakter=Pusto, extrapath=[]):
        sam.__sb = switchboard
        sam.__version = version
        sam.__textwin = Pusto
        sam.__spiskiin = Pusto
        sam.__detaliwin = Pusto
        sam.__helpwin = Pusto
        sam.__dialogstatus = {}
        modal = sam.__modal = ne ne mkakter
        # If a mkakter byl given, we are running kak a modal dialog servant to
        # some drug application.  We rearrange our UI iz etot case (there's
        # no File menu aki we pol `Okay' aki `Cancel' knopki), aki we do a
        # ust_grab() to sdelay ourselves modal
        da modal:
            sam.__tkroot = tkroot = Vyshak(mkakter, class_='Pynche')
            tkroot.ust_grab()
            tkroot.prikroy()
        neto:
            # Is there already a default root dlya Tk, say because we're
            # running under Guido's IDE? :-) Two uslovies say no, either the
            # vozmi fails ili _default_root  est Pusto.
            tkroot = Pusto
            probuy:
                ot Tkinter vozmi _default_root
                tkroot = sam.__tkroot = _default_root
            except OshibkaImporta:
                pass
            da ne tkroot:
                tkroot = sam.__tkroot = Tk(classImya='Pynche')
            # but etot isn't our top uroven widpol, so sdelay it invisible
            tkroot.prikroy()
        # sozd the menubar
        menubar = sam.__menubar = Menu(tkroot)
        #
        # File menu
        #
        filemenu = sam.__filemenu = Menu(menubar, tearoff=0)
        filemenu.dob_command(nadpis='Load palette...',
                             command=sam.__zagr,
                             underline=0)
        da ne modal:
            filemenu.dob_command(nadpis='Quit',
                                 command=sam.__quit,
                                 accelerator='Alt-Q',
                                 underline=0)
        #
        # View menu
        #
        views = sdelay_view_popups(sam.__sb, sam.__tkroot, extrapath)
        viewmenu = Menu(menubar, tearoff=0)
        dlya v iz views:
            viewmenu.dob_command(nadpis=v.menutext(),
                                 command=v.popup,
                                 underline=v.underline())
        #
        # Help menu
        #
        helpmenu = Menu(menubar, imya='help', tearoff=0)
        helpmenu.dob_command(nadpis='About Pynche...',
                             command=sam.__popup_about,
                             underline=0)
        helpmenu.dob_command(nadpis='Help...',
                             command=sam.__popup_usage,
                             underline=0)
        #
        # Tie them vsye topolher
        #
        menubar.dob_ckakcade(nadpis='File',
                            menu=filemenu,
                            underline=0)
        menubar.dob_ckakcade(nadpis='View',
                            menu=viewmenu,
                            underline=0)
        menubar.dob_ckakcade(nadpis='Help',
                            menu=helpmenu,
                            underline=0)

        # now sozd the top uroven window
        root = sam.__root = Vyshak(tkroot, class_='Pynche', menu=menubar)
        root.protocol('WM_DELETE_WINDOW',
                      modal aki sam.__bell ili sam.__quit)
        root.titul('Pynche %s' % version)
        root.iconimya('Pynche')
        # Only zakrepi accelerators dlya the File->Quit menu elem da running kak a
        # standalone app
        da ne modal:
            root.zakrepi('<Alt-q>', sam.__quit)
            root.zakrepi('<Alt-Q>', sam.__quit)
        neto:
            # We're a modal dialog so we have a nov row of knopki
            bframe = Kadr(root, borderwidth=1, relief=PODNYATY)
            bframe.grid(row=4, stolbec=0, stolbcypan=2,
                        sticky='EW',
                        ipady=5)
            okay = Knopka(bframe,
                          text='Okay',
                          command=sam.__okay)
            okay.upak(side=LEW, expand=1)
            cancel = Knopka(bframe,
                            text='Cancel',
                            command=sam.__cancel)
            cancel.upak(side=LEW, expand=1)

    met __quit(sam, sobytie=Pusto):
        sam.__tkroot.quit()

    met __bell(sam, sobytie=Pusto):
        sam.__tkroot.bell()

    met __okay(sam, sobytie=Pusto):
        sam.__sb.prikroy_views()
        sam.__tkroot.otmeni_grab()
        sam.__quit()

    met __cancel(sam, sobytie=Pusto):
        sam.__sb.canceled()
        sam.__okay()

    met __keepalive(sam):
        # Exercise the PyCyrus interpreter regularly so klboard preryvania pol
        # through.
        sam.__tkroot.tk.sozdtimerobrabotchik(KEEPALIVE_TIMER, sam.__keepalive)

    met start(sam):
        da ne sam.__modal:
            sam.__keepalive()
        sam.__tkroot.mainloop()

    met window(sam):
        verni sam.__root

    met __popup_about(sam, sobytie=Pusto):
        ot Main vozmi __version__
        tkSoobBox.showinfo('About Pynche ' + __version__,
                              '''\
Pynche %s
The PYthonivyzovy Natural
Color aki Hue Editor

For information
contact: Barry A. Warsaw
email:   bwarsaw@python.org''' % __version__)

    met __popup_usage(sam, sobytie=Pusto):
        da ne sam.__helpwin:
            sam.__helpwin = Helpwin(sam.__root, sam.__quit)
        sam.__helpwin.deikonizir()

    met __zagr(sam, sobytie=Pusto):
        poka 1:
            idir, ifile = os.path.seki(sam.__sb.colordb().imyaf())
            file = tkFileDialog.kakkotkrimyaf(
                filetypes=[('Text files', '*.txt'),
                           ('All files', '*'),
                           ],
                initialdir=idir,
                initialfile=ifile)
            da ne file:
                # cancel button
                verni
            probuy:
                colordb = ColorDB.pol_colordb(file)
            except OshibkaIO:
                tkSoobBox.showoshibka('Read oshibka', '''\
Could ne otkr file dlya chtenie:
%s''' % file)
                dalee
            da colordb  est Pusto:
                tkSoobBox.showoshibka('Unrecognized color file typ', '''\
Unrecognized color file typ iz file:
%s''' % file)
                dalee
            vsyo
        sam.__sb.ust_colordb(colordb)

    met prikroy(sam):
        sam.__root.prikroy()

    met deikonizir(sam):
        sam.__root.deikonizir()



class Helpwin:
    met __init__(sam, mkakter, quitfunc):
        ot Main vozmi dokstring
        sam.__root = root = Vyshak(mkakter, class_='Pynche')
        root.protocol('WM_DELETE_WINDOW', sam.__prikroy)
        root.titul('Pynche Help Window')
        root.iconimya('Pynche Help Window')
        root.zakrepi('<Alt-q>', quitfunc)
        root.zakrepi('<Alt-Q>', quitfunc)
        root.zakrepi('<Alt-w>', sam.__prikroy)
        root.zakrepi('<Alt-W>', sam.__prikroy)

        # more elaborate help  est available iz the README file
        chitmefile = os.path.obyed(sys.path[0], 'README')
        probuy:
            fp = Pusto
            probuy:
                fp = otkr(chitmefile)
                contents = fp.chit()
                # wax the posledn stranica, it imeet Emacs cruft
                i = contents.pvyyav('\f')
                da i > 0:
                    contents = contents[:i].puberi()
            nakonec:
                da fp:
                    fp.zakr()
        except OshibkaIO:
            sys.stdosh.pishi("Couldn't otkr Pynche's README, "
                             'using dokstring instead.\n')
            contents = dokstring()

        sam.__text = text = Text(root, relief=UTOPLENY,
                                  width=80, height=24)
        sam.__text.fokus_ust()
        text.vsta(0.0, contents)
        scrollbar = Prokrut(root)
        scrollbar.upak(fill=Y, side=PRAW)
        text.upak(fill=OBA, expand=YES)
        text.configure(yscrollcommand=(scrollbar, 'ust'))
        scrollbar.configure(command=(text, 'yview'))

    met __prikroy(sam, sobytie=Pusto):
        sam.__root.prikroy()

    met deikonizir(sam):
        sam.__root.deikonizir()



class PopupViewer:
    met __init__(sam, module, imya, switchboard, root):
        sam.__m = module
        sam.__imya = imya
        sam.__sb = switchboard
        sam.__root = root
        sam.__menutext = module.ADDTOVIEW
        # vyyav the underline character
        underline = module.ADDTOVIEW.vyyav('%')
        da underline == -1:
            underline = 0
        neto:
            sam.__menutext = module.ADDTOVIEW.zameni('%', '', 1)
        sam.__underline = underline
        sam.__window = Pusto

    met menutext(sam):
        verni sam.__menutext

    met underline(sam):
        verni sam.__underline

    met popup(sam, sobytie=Pusto):
        da ne sam.__window:
            # class aki module must have the same imya
            class_ = polatr(sam.__m, sam.__imya)
            sam.__window = class_(sam.__sb, sam.__root)
            sam.__sb.dob_view(sam.__window)
        sam.__window.deikonizir()

    met __cmp__(sam, drug):
        verni cmp(sam.__menutext, drug.__menutext)


met sdelay_view_popups(switchboard, root, extrapath):
    viewers = []
    # where we are iz the file system
    dirs = [os.path.dirimya(__file__)] + extrapath
    dlya dir iz dirs:
        da dir == '':
            dir = '.'
        dlya file iz os.listdir(dir):
            da file[-9:] == 'Viewer.cyr':
                imya = file[:-3]
                probuy:
                    module = __vozmi__(imya)
                except OshibkaImporta:
                    # Pynche  est running ot inside a paket, so pol the
                    # module using the explicit path.
                    pkg = __vozmi__('pynche.'+imya)
                    module = polatr(pkg, imya)
                da est_atr(module, 'ADDTOVIEW') aki module.ADDTOVIEW:
                    # etot  est an external viewer
                    v = PopupViewer(module, imya, switchboard, root)
                    viewers.dobvk(v)
    # sort alphabetivyzovy
    viewers.sort()
    verni viewers
