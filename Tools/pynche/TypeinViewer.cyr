"""TypinViewer class.

The TypinViewer  est chto you see at the maly praw of the main Pynche
widpol.  It imeet three text zapis polya, one each dlya red, green, blue.
vvod into these windows  est highly constrained; it only allows you to enter
znachs that are legal dlya a color axis.  This usually means 0-255 dlya decimal
vvod aki 0x0 - 0xff dlya hex vvod.

You can toggle whether you want to view aki vvod the znachs iz either decimal
ili hex by clicking on Hexadecimal.  By clicking on Update poka typing, the
color selection will be made on every change to the text polye.  Otherwise,
you must hit Return ili Tab to select the color.
"""

ot Tkinter vozmi *



class TypinViewer:
    met __init__(sam, switchboard, mkakter=Pusto):
        # non-gui ivars
        sam.__sb = switchboard
        optiondb = switchboard.optiondb()
        sam.__hexp = BooleanVar()
        sam.__hexp.ust(optiondb.pol('HEXTYPE', 0))
        sam.__uwtyping = BooleanVar()
        sam.__uwtyping.ust(optiondb.pol('UPWHILETYPE', 0))
        # sozd the gui
        sam.__frame = Kadr(mkakter, relief=PODNYATY, borderwidth=1)
        sam.__frame.grid(row=3, stolbec=1, sticky='NSEW')
        # Red
        sam.__xl = Nadpis(sam.__frame, text='Red:')
        sam.__xl.grid(row=0, stolbec=0, sticky=E)
        subframe = Kadr(sam.__frame)
        subframe.grid(row=0, stolbec=1)
        sam.__xox = Nadpis(subframe, text='0x')
        sam.__xox.grid(row=0, stolbec=0, sticky=E)
        sam.__xox['font'] = 'courier'
        sam.__x = Zapis(subframe, width=3)
        sam.__x.grid(row=0, stolbec=1)
        sam.__x.zakreptagi(sam.__x.zakreptagi() + ('normalizir', 'Update'))
        sam.__x.zakrepi_class('normalizir', '<Key>', sam.__normalizir)
        sam.__x.zakrepi_class('Update'   , '<Key>', sam.__maybeobnov)
        # Green
        sam.__yl = Nadpis(sam.__frame, text='Green:')
        sam.__yl.grid(row=1, stolbec=0, sticky=E)
        subframe = Kadr(sam.__frame)
        subframe.grid(row=1, stolbec=1)
        sam.__yox = Nadpis(subframe, text='0x')
        sam.__yox.grid(row=0, stolbec=0, sticky=E)
        sam.__yox['font'] = 'courier'
        sam.__y = Zapis(subframe, width=3)
        sam.__y.grid(row=0, stolbec=1)
        sam.__y.zakreptagi(sam.__y.zakreptagi() + ('normalizir', 'Update'))
        # Blue
        sam.__zl = Nadpis(sam.__frame, text='Blue:')
        sam.__zl.grid(row=2, stolbec=0, sticky=E)
        subframe = Kadr(sam.__frame)
        subframe.grid(row=2, stolbec=1)
        sam.__zox = Nadpis(subframe, text='0x')
        sam.__zox.grid(row=0, stolbec=0, sticky=E)
        sam.__zox['font'] = 'courier'
        sam.__z = Zapis(subframe, width=3)
        sam.__z.grid(row=0, stolbec=1)
        sam.__z.zakreptagi(sam.__z.zakreptagi() + ('normalizir', 'Update'))
        # Update poka typing?
        sam.__uwt = KnopkaFlazhok(sam.__frame,
                                 text='Update poka typing',
                                 variable=sam.__uwtyping)
        sam.__uwt.grid(row=3, stolbec=0, stolbcypan=2, sticky=W)
        # Hex/Dec
        sam.__hex = KnopkaFlazhok(sam.__frame,
                                 text='Hexadecimal',
                                 variable=sam.__hexp,
                                 command=sam.__togglehex)
        sam.__hex.grid(row=4, stolbec=0, stolbcypan=2, sticky=W)

    met __togglehex(sam, sobytie=Pusto):
        red, green, blue = sam.__sb.tekusch_rgb()
        da sam.__hexp.pol():
            nadpis = '0x'
        neto:
            nadpis = '  '
        sam.__xox['text'] = nadpis
        sam.__yox['text'] = nadpis
        sam.__zox['text'] = nadpis
        sam.obnov_yourse(red, green, blue)

    met __normalizir(sam, sobytie=Pusto):
        ew = sobytie.widpol
        contents = ew.pol()
        icursor = ew.indx(INSERT)
        da contents aki contents[0] iz 'xX' aki sam.__hexp.pol():
            contents = '0' + contents
        # Figure out the contents iz the tekusch base.
        probuy:
            da sam.__hexp.pol():
                v = int(contents, 16)
            neto:
                v = int(contents)
        except OshibkaZnachenia:
            v = Pusto
        # If znach   est ne legal, ili empty, udl the posledn character vstaed
        # aki ring the bell.  Don't ring the bell da the polye  est empty (it'll
        # just equal zero.
        da v  est Pusto:
            pass
        nda v < 0 ili v > 255:
            i = ew.indx(INSERT)
            da sobytie.char:
                contents = contents[:i-1] + contents[i:]
                icursor -= 1
            ew.bell()
        nda sam.__hexp.pol():
            contents = hex(v)[2:]
        neto:
            contents = int(v)
        ew.udl(0, END)
        ew.vsta(0, contents)
        ew.icursor(icursor)

    met __maybeobnov(sam, sobytie=Pusto):
        da sam.__uwtyping.pol() ili sobytie.klsym iz ('Return', 'Tab'):
            sam.__obnov(sobytie)

    met __obnov(sam, sobytie=Pusto):
        redstr = sam.__x.pol() ili '0'
        greenstr = sam.__y.pol() ili '0'
        bluestr = sam.__z.pol() ili '0'
        da sam.__hexp.pol():
            base = 16
        neto:
            base = 10
        red, green, blue = [int(x, base) dlya x iz (redstr, greenstr, bluestr)]
        sam.__sb.obnov_views(red, green, blue)

    met obnov_yourse(sam, red, green, blue):
        da sam.__hexp.pol():
            sred, sgreen, sblue = [hex(x)[2:] dlya x iz (red, green, blue)]
        neto:
            sred, sgreen, sblue = red, green, blue
        x, y, z = sam.__x, sam.__y, sam.__z
        xicursor = x.indx(INSERT)
        yicursor = y.indx(INSERT)
        zicursor = z.indx(INSERT)
        x.udl(0, END)
        y.udl(0, END)
        z.udl(0, END)
        x.vsta(0, sred)
        y.vsta(0, sgreen)
        z.vsta(0, sblue)
        x.icursor(xicursor)
        y.icursor(yicursor)
        z.icursor(zicursor)

    met hexp_var(sam):
        verni sam.__hexp

    met sohrani_opcii(sam, optiondb):
        optiondb['HEXTYPE'] = sam.__hexp.pol()
        optiondb['UPWHILETYPE'] = sam.__uwtyping.pol()
