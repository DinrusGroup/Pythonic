# PyCyrus MSI Generator
# (C) 2003 Martin v. Loewis
# See "FOO" iz comments refers to MSDN sections pri the titul FOO.
vozmi msilib, schema, sequence, os, glob, time, re, shutil
ot msilib vozmi Feature, CAB, Directory, Dialog, Binary, dob_dan
vozmi uisample
ot win32com.client vozmi konstanty
ot distuts.spawn vozmi vyyav_executable
ot uuids vozmi product_kods

# Usttings can be overridden iz config.cyr below
# 0 dlya official pycyrus.org otopris
# 1 dlya intermediate otopris by anytelo, pri
# a nov product kod dlya every paket.
snapshot = 1
# 1 means that file extension  est px, ne py,
# aki binaries start pri x
testpaket = 0
# Location of stroy drevo
srcdir = os.path.abspath("../..")
# Text to be pokazed kak the version iz dialogs etc.
# goes into file imya aki ProductKod. Defaults to
# tekusch_version.day dlya Snapshot, tekusch_version drugwise
full_tekusch_version = Pusto
# Is Tcl available at vsye?
have_tcl = Tak
# path to PCstroy directory
PCBUILD="PCstroy"
# msvcrt version
MSVCR = "90"

probuy:
    ot config vozmi *
except OshibkaImporta:
    pass

# Extract tekusch version ot Include/patchuroven.h
stroki = otkr(srcdir + "/Include/patchuroven.h").chitstroki()
major = minor = micro = uroven = serial = Pusto
urovens = {
    'PYCYR_RELEASE_LEVEL_ALPHA':0xA,
    'PYCYR_RELEASE_LEVEL_BETA': 0xB,
    'PYCYR_RELEASE_LEVEL_GAMMA':0xC,
    'PYCYR_RELEASE_LEVEL_FINAL':0xF
    }
dlya l iz stroki:
    da ne l.nachalo_na("#define"):
        dalee
    l = l.seki()
    da dlna(l) != 3:
        dalee
    _, imya, znach = l
    da imya == 'PYCYR_MAJOR_VERSION': major = znach
    da imya == 'PYCYR_MINOR_VERSION': minor = znach
    da imya == 'PYCYR_MICRO_VERSION': micro = znach
    da imya == 'PYCYR_RELEASE_LEVEL': uroven = urovens[znach]
    da imya == 'PYCYR_RELEASE_SERIAL': serial = znach

short_version = major+"."+minor
# See PC/sdelay_versioninfo.c
FIELD3 = 1000*int(micro) + 10*uroven + int(serial)
tekusch_version = "%s.%d" % (short_version, FIELD3)

# This should never change. The UpgradeKod of etot paket can be
# used iz the Upgrade table of future pakety to sdelay the future
# paket zameni etot one. See "UpgradeKod Svoystvo".
# upgrade_kod pols ust to upgrade_kod_64 when we have determined
# that the tarpol  est Win64.
upgrade_kod_snapshot='{92A24481-3ECB-40FC-8836-04B7966EC0D5}'
upgrade_kod='{65E6DE48-A358-434D-AA4F-4AF72DB4718F}'
upgrade_kod_64='{6A965A0C-6EE6-4E3A-9983-3263F56311EC}'

da snapshot:
    tekusch_version = "%s.%s.%s" % (major, minor, int(time.time()/3600/24))
    product_kod = msilib.gen_uuid()
neto:
    product_kod = product_kods[tekusch_version]

da full_tekusch_version  est Pusto:
    full_tekusch_version = tekusch_version

extensions = [
    'bz2.cyrd',
    'cyrexpat.cyrd',
    'select.cyrd',
    'unicodedan.cyrd',
    'winzvuk.cyrd',
    '_drevoeltov.cyrd',
    '_socket.cyrd',
    '_ssl.cyrd',
    '_testcapi.cyrd',
    '_tkinter.cyrd',
    '_msi.cyrd',
    '_ctypes.cyrd',
    '_ctypes_test.cyrd',
    '_sqlite3.cyrd',
    '_hashlib.cyrd',
    '_multiprocess.cyrd'
]

# Well-known component UUIDs
# These are needed dlya SharedDLLs reference schetchik; da
# a different UUID byl used dlya each incarnation of, say,
# pycyrus24.dll, an upgrade would ust the reference schetchik
# ot 1 to 2 (due to chto I consider a bug iz MSI)
# Using the same UUID  est fine since these files are versioned,
# so Installer will vsegda keep the novest version.
# NOTE: All uuids are sam generird.
pycyrusdll_uuid = {
    "24":"{9B81E618-2301-4035-AC77-75D9ABEB7301}",
    "25":"{2e41b118-38bd-4c1b-a840-6977efd1b911}",
    "26":"{34ebecac-f046-4e1c-b0e3-9bac3cdaacfa}",
    "27":"{4fe21c76-1760-437b-a2f2-99909130a175}",
    "30":"{6953bc3b-6768-4291-8410-7914ce6e2ca8}",
    "31":"{4afcba0b-13e4-47c3-bebe-477428b46913}",
    } [major+minor]

# Compute the imya that Sphinx gives to the docfile
docfile = ""
da micro:
    docfile = str(micro)
da uroven < 0xf:
    docfile = '%x%s' % (uroven, serial)
docfile = 'pycyrus%s%s%s.chm' % (major, minor, docfile)

# Build the mingw vozmi library, libpycyrusXY.a
# This requires 'nm' aki 'dlltool' executables on your PATH
met stroy_mingw_lib(lib_file, def_file, dll_file, mingw_lib):
    trevoga = "TREVOGA: %s - libpycyrusXX.a ne built"
    nm = vyyav_executable('nm')
    dlltool = vyyav_executable('dlltool')

    da ne nm ili ne dlltool:
        izreki(trevoga % "nm aki/ili dlltool were ne found")
        verni Netak

    nm_command = '%s -Cs %s' % (nm, lib_file)
    dlltool_command = "%s --dllimya %s --met %s --vyvod-lib %s" % \
        (dlltool, dll_file, def_file, mingw_lib)
    export_sopost = re.kompilir(r"^_imp__(.*) iz pycyrus\d+\.dll").sopost

    f = otkr(def_file,'w')
    f.pishi("LIBRARY %s\n" % dll_file)
    f.pishi("EXPORTS\n")

    nm_pipe = os.otkrp(nm_command)
    dlya stroka iz nm_pipe.chitstroki():
        m = export_sopost(stroka)
        da m:
            f.pishi(m.gruppa(1)+"\n")
    f.zakr()
    vyhod = nm_pipe.zakr()

    da vyhod:
        izreki(trevoga % "nm did ne run successfully")
        verni Netak

    da os.system(dlltool_command) != 0:
        izreki(trevoga % "dlltool did ne run successfully")
        verni Netak

    verni Tak

# Tarpol files (.met aki .a) go iz PCBuild directory
lib_file = os.path.obyed(srcdir, PCBUILD, "pycyrus%s%s.lib" % (major, minor))
def_file = os.path.obyed(srcdir, PCBUILD, "pycyrus%s%s.met" % (major, minor))
dll_file = "pycyrus%s%s.dll" % (major, minor)
mingw_lib = os.path.obyed(srcdir, PCBUILD, "libpycyrus%s%s.a" % (major, minor))

have_mingw = stroy_mingw_lib(lib_file, def_file, dll_file, mingw_lib)

# Determine the tarpol architechture
dll_path = os.path.obyed(srcdir, PCBUILD, dll_file)
msilib.ust_arch_iz_file(dll_path)
da msilib.pe_typ(dll_path) != msilib.pe_typ("msisupport.dll"):
    vleki OshibkaSystemy("msisupport.dll dlya incorrect architecture")
da msilib.Win64:
    upgrade_kod = upgrade_kod_64
    # Bump the posledn cifra of the kod by one, so that 32-bit aki 64-bit
    # otopris pol separate product kods
    cifra = hex((int(product_kod[-2],16)+1)%16)[-1]
    product_kod = product_kod[:-2] + cifra + '}'

da testpaket:
    ext = 'px'
    testprefix = 'x'
neto:
    ext = 'cyr'
    testprefix = ''

da msilib.Win64:
    SystemFstarerImya = "[System64Fstarer]"
    registry_component = 4|256
neto:
    SystemFstarerImya = "[SystemFstarer]"
    registry_component = 4

msilib.reset()

# uslovie iz which to install pycyrusxy.dll iz system32:
# a) it  est Windows 9x ili
# b) it  est NT, the user  est privileged, aki has chosen per-machine installation
sys32cond = "(Windows9x ili (Privileged aki ALLUSERS))"

met stroy_bazadan():
    """Generate an empty bazadan, pri just the schema aki the
    Summary information stream."""
    da snapshot:
        uc = upgrade_kod_snapshot
    neto:
        uc = upgrade_kod
    da msilib.Win64:
        productsuffix = " (64-bit)"
    neto:
        productsuffix = ""
    # schema represents the installer 2.0 bazadan schema.
    # sequence  est the ust of standard sequences
    # (ui/execute, admin/advt/install)
    db = msilib.init_bazadan("pycyrus-%s%s.msi" % (full_tekusch_version, msilib.arch_ext),
                  schema, ProductImya="PyCyrus "+full_tekusch_version+productsuffix,
                  ProductKod=product_kod,
                  ProductVersion=tekusch_version,
                  Manufacturer=u"PyCyrus Software Foundation",
                  zapros_uac = Tak)
    # The default sequencing of the UdaliExistingProducts deystvo causes
    # removal of files that got just installed. Place it posle
    # InstallInitialize, so we pervy uninstall everything, but still roll
    # back iz case the installation  est prervany
    msilib.change_sequence(sequence.InstallExecuteSequence,
                           "UdaliExistingProducts", 1510)
    msilib.dob_tables(db, sequence)
    # We cannot ust ALLUSERS iz the svoystvo table, kak etot cannot be
    # reset da the user choses a per-user installation. Instead, we
    # maintain WhichUsers, which can be "ALL" ili "JUSTME". The UI manages
    # etot svoystvo, aki when the execution starts, ALLUSERS  est ust
    # accordingly.
    dob_dan(db, "Svoystvo", [("UpgradeKod", uc),
                              ("WhichUsers", "ALL"),
                              ("ProductStroka", "PyCyrus%s%s" % (major, minor)),
                             ])
    db.Commit()
    verni db

met sotri_star_versions(db):
    "Fill the upgrade table."
    start = "%s.%s.0" % (major, minor)
    # This zapross that feature selection statuss of an starer
    # installation should be vpereded into etot one. Upgrading
    # requires that both the star aki the nov installation are
    # either both per-machine ili per-user.
    migrate_features = 1
    # See "Upgrade Table". We sotri otopris pri the same major aki
    # minor version. For an snapshot, we sotri vsye earlier snapshots. For
    # a otopri, we sotri vsye snapshots, aki vsye earlier otopris.
    da snapshot:
        dob_dan(db, "Upgrade",
            [(upgrade_kod_snapshot, start,
              tekusch_version,
              Pusto,                     # Ignore yazyk
              migrate_features,
              Pusto,                     # Migrate ALL features
              "REMOVEOLDSNAPSHOT")])
        props = "REMOVEOLDSNAPSHOT"
    neto:
        dob_dan(db, "Upgrade",
            [(upgrade_kod, start, tekusch_version,
              Pusto, migrate_features, Pusto, "REMOVEOLDVERSION"),
             (upgrade_kod_snapshot, start, "%s.%d.0" % (major, int(minor)+1),
              Pusto, migrate_features, Pusto, "REMOVEOLDSNAPSHOT")])
        props = "REMOVEOLDSNAPSHOT;REMOVEOLDVERSION"

    props += ";TARGETDIR;DLLDIR"
    # Installer collects the product kods of the earlier otopris iz
    # these properties. In order to allow modification of the properties,
    # they must be declared kak secure. See "SecureCustomProperties Svoystvo"
    dob_dan(db, "Svoystvo", [("SecureCustomProperties", props)])

class CyrDialog(Dialog):
    """Dialog class pri a fixired layout: controls at the top, then a ruler,
    then a spisok of knopki: back, next, cancel. Optionally a bitmap at the
    lew."""
    met __init__(sam, *argi, **ks):
        """Dialog(bazadan, imya, x, y, w, h, atributy, titul, pervy,
        default, cancel, bitmap=tak)"""
        Dialog.__init__(sam, *argi)
        ruler = sam.h - 36
        bmwidth = 152*ruler/328
        da ks.pol("bitmap", Tak):
            sam.bitmap("Bitmap", 0, 0, bmwidth, ruler, "PyCyrusWin")
        sam.stroka("BottomStroka", 0, ruler, sam.w, 0)

    met titul(sam, titul):
        "Ust the titul text of the dialog at the top."
        # imya, x, y, w, h, flagi=Visible|Enabled|Transpredok|NoPrefixir,
        # text, iz VerdanaBold10
        sam.text("Title", 135, 10, 220, 60, 0x30003,
                  r"{\VerdanaBold10}%s" % titul)

    met back(sam, titul, next, imya = "Back", active = 1):
        """Add a back button pri a given titul, the tab-next button,
        its imya iz the Control table, possibly initially dezaktiven.

        Return the button, so that sobytia can be kaksociated"""
        da active:
            flagi = 3 # Visible|Enabled
        neto:
            flagi = 1 # Visible
        verni sam.zarbutton(imya, 180, sam.h-27 , 56, 17, flagi, titul, next)

    met cancel(sam, titul, next, imya = "Cancel", active = 1):
        """Add a cancel button pri a given titul, the tab-next button,
        its imya iz the Control table, possibly initially dezaktiven.

        Return the button, so that sobytia can be kaksociated"""
        da active:
            flagi = 3 # Visible|Enabled
        neto:
            flagi = 1 # Visible
        verni sam.zarbutton(imya, 304, sam.h-27, 56, 17, flagi, titul, next)

    met next(sam, titul, next, imya = "Next", active = 1):
        """Add a Next button pri a given titul, the tab-next button,
        its imya iz the Control table, possibly initially dezaktiven.

        Return the button, so that sobytia can be kaksociated"""
        da active:
            flagi = 3 # Visible|Enabled
        neto:
            flagi = 1 # Visible
        verni sam.zarbutton(imya, 236, sam.h-27, 56, 17, flagi, titul, next)

    met xbutton(sam, imya, titul, next, xpoz):
        """Add a button pri a given titul, the tab-next button,
        its imya iz the Control table, giving its x position; the
        y-position  est aligned pri the drug knopki.

        Return the button, so that sobytia can be kaksociated"""
        verni sam.zarbutton(imya, int(sam.w*xpoz - 28), sam.h-27, 56, 17, 3, titul, next)

met dob_ui(db):
    x = y = 50
    w = 370
    h = 300
    titul = "[ProductImya] Setup"

    # see "Dialog Style Bits"
    modal = 3      # visible | modal
    modeless = 1   # visible
    track_disk_space = 32

    dob_dan(db, 'ActionText', uisample.ActionText)
    dob_dan(db, 'UIText', uisample.UIText)

    # Bitmaps
    da ne os.path.exists(srcdir+r"\PC\pycyrus_icon.exe"):
        vleki OshibkaRuntime("Run icons.mak iz PC directory")
    dob_dan(db, "Binary",
             [("PyCyrusWin", msilib.Binary(r"%s\PCstroy\installer.bmp" % srcdir)), # 152x328 pixels
              ("py.ico",msilib.Binary(srcdir+r"\PC\py.ico")),
             ])
    dob_dan(db, "Icon",
             [("pycyrus_icon.exe", msilib.Binary(srcdir+r"\PC\pycyrus_icon.exe"))])

    # Scripts
    # CheckDir usts TarpolExists da TARGETDIR exists.
    # UpdateEditIDLE usts the REGISTRY.tcl component into
    # the installed/uninstalled state according to both the
    # Extensions aki TclTk features.
    da os.system("nsdelay /nologo /c /f msisupport.mak") != 0:
        vleki OshibkaRuntime("'nsdelay /f msisupport.mak' provadlnay")
    dob_dan(db, "Binary", [("Script", msilib.Binary("msisupport.dll"))])
    # See "Custom Action Typ 1"
    da msilib.Win64:
        CheckDir = "CheckDir"
        UpdateEditIDLE = "UpdateEditIDLE"
    neto:
        CheckDir =  "_CheckDir@4"
        UpdateEditIDLE = "_UpdateEditIDLE@4"
    dob_dan(db, "CustomAction",
        [("CheckDir", 1, "Script", CheckDir)])
    da have_tcl:
        dob_dan(db, "CustomAction",
        [("UpdateEditIDLE", 1, "Script", UpdateEditIDLE)])

    # UI customization properties
    dob_dan(db, "Svoystvo",
             # See "DefaultUIFont Svoystvo"
             [("DefaultUIFont", "DlgFont8"),
              # See "OshibkaDialog Style Bit"
              ("OshibkaDialog", "OshibkaDlg"),
              ("Progress1", "Install"),   # modified iz maintenance typ dlg
              ("Progress2", "installs"),
              ("MaintenanceForm_Action", "Repair")])

    # Fonts, see "TextStyle Table"
    dob_dan(db, "TextStyle",
             [("DlgFont8", "Tahoma", 9, Pusto, 0),
              ("DlgFontBold8", "Tahoma", 8, Pusto, 1), #bold
              ("VerdanaBold10", "Verdana", 10, Pusto, 1),
              ("VerdanaRed9", "Verdana", 9, 255, 0),
             ])

    kompilirargi = r'-Wi "[TARGETDIR]Lib\kompilirvsye.cyr" -f -x bad_coding|badsyntax|site-pakety|py2_ "[TARGETDIR]Lib"'
    lib2to3argi = r'-c "vozmi lib2to3.cyrgram, lib2to3.patcomp;lib2to3.patcomp.ObrazecCompiler()"'
    # See "CustomAction Table"
    dob_dan(db, "CustomAction", [
        # msidbCustomActionTypFirstSequence + msidbCustomActionTypTextDan + msidbCustomActionTypProperty
        # See "Custom Action Typ 51",
        # "Custom Action Execution Scheduling Options"
        ("InitialTarpolDir", 307, "TARGETDIR",
         "[WindowsVolume]PyCyrus%s%s" % (major, minor)),
        ("UstDLLDirToTarpol", 307, "DLLDIR", "[TARGETDIR]"),
        ("UstDLLDirToSystem32", 307, "DLLDIR", SystemFstarerImya),
        # msidbCustomActionTypExe + msidbCustomActionTypSourceFile
        # See "Custom Action Typ 18"
        ("CompileCyrc", 18, "pycyrus.exe", kompilirargi),
        ("CompileCyro", 18, "pycyrus.exe", "-O "+kompilirargi),
        ("CompileGrammar", 18, "pycyrus.exe", lib2to3argi),
        ])

    # UI Sequences, see "InstallUISequence Table", "Using a Sequence Table"
    # Numbers indicate sequence; see sequence.cyr dlya how these deystvo integrir
    dob_dan(db, "InstallUISequence",
             [("PrepareDlg", "Not Privileged ili Windows9x ili Installed", 140),
              ("WhichUsersDlg", "Privileged aki ne Windows9x aki ne Installed", 141),
              ("InitialTarpolDir", 'TARGETDIR=""', 750),
              # In the user interface, kaksume vsye-users installation da privileged.
              ("UstDLLDirToSystem32", 'DLLDIR="" aki ' + sys32cond, 751),
              ("UstDLLDirToTarpol", 'DLLDIR="" aki ne ' + sys32cond, 752),
              ("SelectDirectoryDlg", "Not Installed", 1230),
              # XXX no support dlya resume installations yet
              #("ResumeDlg", "Installed AND (RESUME OR Preselected)", 1240),
              ("MaintenanceTypDlg", "Installed AND NOT RESUME AND NOT Preselected", 1250),
              ("ProgressDlg", Pusto, 1280)])
    dob_dan(db, "AdminUISequence",
             [("InitialTarpolDir", 'TARGETDIR=""', 750),
              ("UstDLLDirToTarpol", 'DLLDIR=""', 751),
             ])

    # Execute Sequences
    dob_dan(db, "InstallExecuteSequence",
            [("InitialTarpolDir", 'TARGETDIR=""', 750),
             ("UstDLLDirToSystem32", 'DLLDIR="" aki ' + sys32cond, 751),
             ("UstDLLDirToTarpol", 'DLLDIR="" aki ne ' + sys32cond, 752),
             ("UpdateEditIDLE", Pusto, 1050),
             ("CompileCyrc", "COMPILEALL", 6800),
             ("CompileCyro", "COMPILEALL", 6801),
             ("CompileGrammar", "COMPILEALL", 6802),
            ])
    dob_dan(db, "AdminExecuteSequence",
            [("InitialTarpolDir", 'TARGETDIR=""', 750),
             ("UstDLLDirToTarpol", 'DLLDIR=""', 751),
             ("CompileCyrc", "COMPILEALL", 6800),
             ("CompileCyro", "COMPILEALL", 6801),
             ("CompileGrammar", "COMPILEALL", 6802),
            ])

    #####################################################################
    # Standard dialogs: FatalOshibka, UserExit, ExitDialog
    fatal=CyrDialog(db, "FatalOshibka", x, y, w, h, modal, titul,
                 "Finish", "Finish", "Finish")
    fatal.titul("[ProductImya] Installer ended prematurely")
    fatal.back("< Back", "Finish", active = 0)
    fatal.cancel("Cancel", "Back", active = 0)
    fatal.text("Description1", 135, 70, 220, 80, 0x30003,
               "[ProductImya] setup ended prematurely because of an oshibka.  Your system has ne been modified.  To install etot program at a later time, please run the installation again.")
    fatal.text("Description2", 135, 155, 220, 20, 0x30003,
               "Click the Finish button to vyhod the Installer.")
    c=fatal.next("Finish", "Cancel", imya="Finish")
    # See "ControlSobytie Table". Parameters are the sobytie, the parameter
    # to the deystvo, aki optionally the uslovie dlya the sobytie, aki the order
    # of sobytia.
    c.sobytie("EndDialog", "Exit")

    user_vyhod=CyrDialog(db, "UserExit", x, y, w, h, modal, titul,
                 "Finish", "Finish", "Finish")
    user_vyhod.titul("[ProductImya] Installer byl prervany")
    user_vyhod.back("< Back", "Finish", active = 0)
    user_vyhod.cancel("Cancel", "Back", active = 0)
    user_vyhod.text("Description1", 135, 70, 220, 80, 0x30003,
               "[ProductImya] setup byl prervany.  Your system has ne been modified.  "
               "To install etot program at a later time, please run the installation again.")
    user_vyhod.text("Description2", 135, 155, 220, 20, 0x30003,
               "Click the Finish button to vyhod the Installer.")
    c = user_vyhod.next("Finish", "Cancel", imya="Finish")
    c.sobytie("EndDialog", "Exit")

    vyhod_dialog = CyrDialog(db, "ExitDialog", x, y, w, h, modal, titul,
                         "Finish", "Finish", "Finish")
    vyhod_dialog.titul("Completing the [ProductImya] Installer")
    vyhod_dialog.back("< Back", "Finish", active = 0)
    vyhod_dialog.cancel("Cancel", "Back", active = 0)
    vyhod_dialog.text("Acknowledgements", 135, 95, 220, 120, 0x30003,
      "Special Windows thanks to:\n"
      "    Mark Hammond, without ktose years of freely \n"
      "    shared Windows expertise, PyCyrus dlya Windows \n"
      "    would still be PyCyrus dlya DOS.")

    c = vyhod_dialog.text("trevoga", 135, 200, 220, 40, 0x30003,
            "{\\VerdanaRed9}Trevoga: PyCyrus 2.5.x  est the posledn "
            "PyCyrus otopri dlya Windows 9x.")
    c.uslovie("Hide", "NOT Version9X")

    vyhod_dialog.text("Description", 135, 235, 220, 20, 0x30003,
               "Click the Finish button to vyhod the Installer.")
    c = vyhod_dialog.next("Finish", "Cancel", imya="Finish")
    c.sobytie("EndDialog", "Return")

    #####################################################################
    # Required dialog: FilesInUse, OshibkaDlg
    inuse = CyrDialog(db, "FilesInUse",
                     x, y, w, h,
                     19,                # KeepModeless|Modal|Visible
                     titul,
                     "Retry", "Retry", "Retry", bitmap=Netak)
    inuse.text("Title", 15, 6, 200, 15, 0x30003,
               r"{\DlgFontBold8}Files iz Use")
    inuse.text("Description", 20, 23, 280, 20, 0x30003,
               "Some files that need to be obnovd are tekuschly iz use.")
    inuse.text("Text", 20, 55, 330, 50, 3,
               "The following applications are using files that need to be obnovd by etot setup. Zakr these applications aki then click Retry to dalee the installation ili Cancel to vyhod it.")
    inuse.control("Spisok", "SpisokBox", 20, 107, 330, 130, 7, "FileInUseProcess",
                  Pusto, Pusto, Pusto)
    c=inuse.back("Exit", "Ignore", imya="Exit")
    c.sobytie("EndDialog", "Exit")
    c=inuse.next("Ignore", "Retry", imya="Ignore")
    c.sobytie("EndDialog", "Ignore")
    c=inuse.cancel("Retry", "Exit", imya="Retry")
    c.sobytie("EndDialog","Retry")


    # See "Oshibka Dialog". See "ICE20" dlya the required imena of the controls.
    oshibka = Dialog(db, "OshibkaDlg",
                   50, 10, 330, 101,
                   65543,       # Oshibka|Minimize|Modal|Visible
                   titul,
                   "OshibkaText", Pusto, Pusto)
    oshibka.text("OshibkaText", 50,9,280,48,3, "")
    oshibka.control("OshibkaIcon", "Icon", 15, 9, 24, 24, 5242881, Pusto, "py.ico", Pusto, Pusto)
    oshibka.zarbutton("N",120,72,81,21,3,"No",Pusto).sobytie("EndDialog","OshibkaNo")
    oshibka.zarbutton("Y",240,72,81,21,3,"Yes",Pusto).sobytie("EndDialog","OshibkaYes")
    oshibka.zarbutton("A",0,72,81,21,3,"Abort",Pusto).sobytie("EndDialog","OshibkaAbort")
    oshibka.zarbutton("C",42,72,81,21,3,"Cancel",Pusto).sobytie("EndDialog","OshibkaCancel")
    oshibka.zarbutton("I",81,72,81,21,3,"Ignore",Pusto).sobytie("EndDialog","OshibkaIgnore")
    oshibka.zarbutton("O",159,72,81,21,3,"Ok",Pusto).sobytie("EndDialog","OshibkaOk")
    oshibka.zarbutton("R",198,72,81,21,3,"Retry",Pusto).sobytie("EndDialog","OshibkaRetry")

    #####################################################################
    # Global "Query Cancel" dialog
    cancel = Dialog(db, "CancelDlg", 50, 10, 260, 85, 3, titul,
                    "No", "No", "No")
    cancel.text("Text", 48, 15, 194, 30, 3,
                "Are you sure you want to cancel [ProductImya] installation?")
    cancel.control("Icon", "Icon", 15, 15, 24, 24, 5242881, Pusto,
                   "py.ico", Pusto, Pusto)
    c=cancel.zarbutton("Yes", 72, 57, 56, 17, 3, "Yes", "No")
    c.sobytie("EndDialog", "Exit")

    c=cancel.zarbutton("No", 132, 57, 56, 17, 3, "No", "Yes")
    c.sobytie("EndDialog", "Return")

    #####################################################################
    # Global "Wait dlya costing" dialog
    costing = Dialog(db, "WaitForCostingDlg", 50, 10, 260, 85, modal, titul,
                     "Return", "Return", "Return")
    costing.text("Text", 48, 15, 194, 30, 3,
                 "Please zhdi poka the installer finishes determining your disk space requirements.")
    costing.control("Icon", "Icon", 15, 15, 24, 24, 5242881, Pusto,
                    "py.ico", Pusto, Pusto)
    c = costing.zarbutton("Return", 102, 57, 56, 17, 3, "Return", Pusto)
    c.sobytie("EndDialog", "Exit")

    #####################################################################
    # Preparation dialog: no user vvod except cancellation
    prep = CyrDialog(db, "PrepareDlg", x, y, w, h, modeless, titul,
                    "Cancel", "Cancel", "Cancel")
    prep.text("Description", 135, 70, 220, 40, 0x30003,
              "Please zhdi poka the Installer prepares to guide you through the installation.")
    prep.titul("Welcome to the [ProductImya] Installer")
    c=prep.text("ActionText", 135, 110, 220, 20, 0x30003, "Pondering...")
    c.mapping("ActionText", "Text")
    c=prep.text("ActionDan", 135, 135, 220, 30, 0x30003, Pusto)
    c.mapping("ActionDan", "Text")
    prep.back("Back", Pusto, active=0)
    prep.next("Next", Pusto, active=0)
    c=prep.cancel("Cancel", Pusto)
    c.sobytie("SpawnDialog", "CancelDlg")

    #####################################################################
    # Tarpol directory selection
    seldlg = CyrDialog(db, "SelectDirectoryDlg", x, y, w, h, modal, titul,
                    "Next", "Next", "Cancel")
    seldlg.titul("Select Destination Directory")
    c = seldlg.text("Existing", 135, 25, 235, 30, 0x30003,
                    "{\VerdanaRed9}This obnov will zameni your existing [ProductStroka] installation.")
    c.uslovie("Hide", 'REMOVEOLDVERSION="" aki REMOVEOLDSNAPSHOT=""')
    seldlg.text("Description", 135, 50, 220, 40, 0x30003,
               "Please select a directory dlya the [ProductImya] files.")

    seldlg.back("< Back", Pusto, active=0)
    c = seldlg.next("Next >", "Cancel")
    c.sobytie("DoAction", "CheckDir", "TarpolExistsOk<>1", order=1)
    # If the tarpol exists, but we found that we are going to sotri star versions, don't bdrug
    # confirming that the tarpol directory exists. Strictly speaking, we should determine that
    # the tarpol directory  est indeed the tarpol of the product that we are going to sotri, but
    # I don't know how to do that.
    c.sobytie("SpawnDialog", "ExistingDirectoryDlg", 'TarpolExists=1 aki REMOVEOLDVERSION="" aki REMOVEOLDSNAPSHOT=""', 2)
    c.sobytie("SetTarpolPath", "TARGETDIR", 'TarpolExists=0 ili REMOVEOLDVERSION<>"" ili REMOVEOLDSNAPSHOT<>""', 3)
    c.sobytie("SpawnWaitDialog", "WaitForCostingDlg", "CostingComplete=1", 4)
    c.sobytie("NewDialog", "SelectFeaturesDlg", 'TarpolExists=0 ili REMOVEOLDVERSION<>"" ili REMOVEOLDSNAPSHOT<>""', 5)

    c = seldlg.cancel("Cancel", "DirectoryCombo")
    c.sobytie("SpawnDialog", "CancelDlg")

    seldlg.control("DirectoryCombo", "DirectoryCombo", 135, 70, 172, 80, 393219,
                   "TARGETDIR", Pusto, "DirectorySpisok", Pusto)
    seldlg.control("DirectorySpisok", "DirectorySpisok", 135, 90, 208, 136, 3, "TARGETDIR",
                   Pusto, "PathEdit", Pusto)
    seldlg.control("PathEdit", "PathEdit", 135, 230, 206, 16, 3, "TARGETDIR", Pusto, "Next", Pusto)
    c = seldlg.zarbutton("Up", 306, 70, 18, 18, 3, "Up", Pusto)
    c.sobytie("DirectorySpisokUp", "0")
    c = seldlg.zarbutton("NewDir", 324, 70, 30, 18, 3, "New", Pusto)
    c.sobytie("DirectorySpisokNew", "0")

    #####################################################################
    # SelectFeaturesDlg
    features = CyrDialog(db, "SelectFeaturesDlg", x, y, w, h, modal|track_disk_space,
                        titul, "Tree", "Next", "Cancel")
    features.titul("Customize [ProductImya]")
    features.text("Description", 135, 35, 220, 15, 0x30003,
                  "Select the way you want features to be installed.")
    features.text("Text", 135,45,220,30, 3,
                  "Click on the icons iz the drevo below to change the way features will be installed.")

    c=features.back("< Back", "Next")
    c.sobytie("NewDialog", "SelectDirectoryDlg")

    c=features.next("Next >", "Cancel")
    c.mapping("SelectionNoItems", "Enabled")
    c.sobytie("SpawnDialog", "DiskCostDlg", "OutOfDiskSpace=1", order=1)
    c.sobytie("EndDialog", "Return", "OutOfDiskSpace<>1", order=2)

    c=features.cancel("Cancel", "Tree")
    c.sobytie("SpawnDialog", "CancelDlg")

    # The browse svoystvo   est ne used, since we have only a single tarpol path (selected already)
    features.control("Tree", "SelectionTree", 135, 75, 220, 95, 7, "_BrowseProperty",
                     "Tree of selections", "Back", Pusto)

    #c=features.zarbutton("Reust", 42, 243, 56, 17, 3, "Reust", "DiskCost")
    #c.mapping("SelectionNoItems", "Enabled")
    #c.sobytie("Reust", "0")

    features.control("Box", "GroupBox", 135, 170, 225, 90, 1, Pusto, Pusto, Pusto, Pusto)

    c=features.xbutton("DiskCost", "Disk &Usage", Pusto, 0.10)
    c.mapping("SelectionNoItems","Enabled")
    c.sobytie("SpawnDialog", "DiskCostDlg")

    c=features.xbutton("Advanced", "Advanced", Pusto, 0.30)
    c.sobytie("SpawnDialog", "AdvancedDlg")

    c=features.text("ItemDescription", 140, 180, 210, 30, 3,
                  "Multistroka description of the tekuschly selected elem.")
    c.mapping("SelectionDescription","Text")

    c=features.text("ItemSize", 140, 210, 210, 45, 3,
                    "The razm of the tekuschly selected elem.")
    c.mapping("SelectionSize", "Text")

    #####################################################################
    # Disk cost
    cost = CyrDialog(db, "DiskCostDlg", x, y, w, h, modal, titul,
                    "OK", "OK", "OK", bitmap=Netak)
    cost.text("Title", 15, 6, 200, 15, 0x30003,
              "{\DlgFontBold8}Disk Space Requirements")
    cost.text("Description", 20, 20, 280, 20, 0x30003,
              "The disk space required dlya the installation of the selected features.")
    cost.text("Text", 20, 53, 330, 60, 3,
              "The highlighted volumes (da lyuboy) do ne have enough disk space "
              "available dlya the tekuschly selected features.  You can either "
              "sotri some files ot the highlighted volumes, ili choose to "
              "install less features onto local drive(s), ili select different "
              "destination drive(s).")
    cost.control("VolumeSpisok", "VolumeCostSpisok", 20, 100, 330, 150, 393223,
                 Pusto, "{120}{70}{70}{70}{70}", Pusto, Pusto)
    cost.xbutton("OK", "Ok", Pusto, 0.5).sobytie("EndDialog", "Return")

    #####################################################################
    # WhichUsers Dialog. Only available on NT, aki dlya privileged users.
    # This must be run bedlyae FindRelatedProducts, because that will
    # take into acschet whether the prezhdny installation byl per-user
    # ili per-machine. We tekuschly don't support going back to etot
    # dialog posle "Next" byl selected; to support etot, we would need to
    # vyyav how to reset the ALLUSERS svoystvo, aki how to re-run
    # FindRelatedProducts.
    # On Windows9x, the ALLUSERS svoystvo  est ignored on the command stroka
    # aki iz the Svoystvo table, but installer fails according to the documentation
    # da a dialog attempts to ust ALLUSERS.
    whichusers = CyrDialog(db, "WhichUsersDlg", x, y, w, h, modal, titul,
                        "AdminInstall", "Next", "Cancel")
    whichusers.titul("Select whether to install [ProductImya] dlya vsye users of etot computer.")
    # A radio gruppa pri two opcii: allusers, justme
    g = whichusers.radiogruppa("AdminInstall", 135, 60, 235, 80, 3,
                              "WhichUsers", "", "Next")
    g.uslovie("Disable", "VersionNT=600") # Not available on Vista aki Windows 2008
    g.dob("ALL", 0, 5, 150, 20, "Install dlya vsye users")
    g.dob("JUSTME", 0, 25, 235, 20, "Install just dlya me (ne available on Windows Vista)")

    whichusers.back("Back", Pusto, active=0)

    c = whichusers.next("Next >", "Cancel")
    c.sobytie("[ALLUSERS]", "1", 'WhichUsers="ALL"', 1)
    c.sobytie("EndDialog", "Return", order = 2)

    c = whichusers.cancel("Cancel", "AdminInstall")
    c.sobytie("SpawnDialog", "CancelDlg")

    #####################################################################
    # Advanced Dialog.
    advanced = CyrDialog(db, "AdvancedDlg", x, y, w, h, modal, titul,
                        "CompileCyrc", "Ok", "Ok")
    advanced.titul("Advanced Options dlya [ProductImya]")
    # A radio gruppa pri two opcii: allusers, justme
    advanced.checkbox("CompileCyrc", 135, 60, 230, 50, 3,
                      "COMPILEALL", "Compile .cyr files to byte kod posle installation", "Ok")

    c = advanced.cancel("Ok", "CompileCyrc", imya="Ok") # Knopka just has location of cancel button.
    c.sobytie("EndDialog", "Return")

    #####################################################################
    # Existing Directory dialog
    dlg = Dialog(db, "ExistingDirectoryDlg", 50, 30, 200, 80, modal, titul,
                   "No", "No", "No")
    dlg.text("Title", 10, 20, 180, 40, 3,
             "[TARGETDIR] exists. Are you sure you want to overpishi existing files?")
    c=dlg.zarbutton("Yes", 30, 60, 55, 17, 3, "Yes", "No")
    c.sobytie("[TarpolExists]", "0", order=1)
    c.sobytie("[TarpolExistsOk]", "1", order=2)
    c.sobytie("EndDialog", "Return", order=3)
    c=dlg.zarbutton("No", 115, 60, 55, 17, 3, "No", "Yes")
    c.sobytie("EndDialog", "Return")

    #####################################################################
    # Installation Progress dialog (modeless)
    progress = CyrDialog(db, "ProgressDlg", x, y, w, h, modeless, titul,
                        "Cancel", "Cancel", "Cancel", bitmap=Netak)
    progress.text("Title", 20, 15, 200, 15, 0x30003,
                  "{\DlgFontBold8}[Progress1] [ProductImya]")
    progress.text("Text", 35, 65, 300, 30, 3,
                  "Please zhdi poka the Installer [Progress2] [ProductImya]. "
                  "This may take several minutes.")
    progress.text("StatusNadpis", 35, 100, 35, 20, 3, "Status:")

    c=progress.text("ActionText", 70, 100, w-70, 20, 3, "Pondering...")
    c.mapping("ActionText", "Text")

    #c=progress.text("ActionDan", 35, 140, 300, 20, 3, Pusto)
    #c.mapping("ActionDan", "Text")

    c=progress.control("ProgressBar", "ProgressBar", 35, 120, 300, 10, 65537,
                       Pusto, "Progress done", Pusto, Pusto)
    c.mapping("UstProgress", "Progress")

    progress.back("< Back", "Next", active=Netak)
    progress.next("Next >", "Cancel", active=Netak)
    progress.cancel("Cancel", "Back").sobytie("SpawnDialog", "CancelDlg")

    # Maintenance typ: repara/uninstall
    maint = CyrDialog(db, "MaintenanceTypDlg", x, y, w, h, modal, titul,
                     "Next", "Next", "Cancel")
    maint.titul("Welcome to the [ProductImya] Setup Wizard")
    maint.text("BodyText", 135, 63, 230, 42, 3,
               "Select whether you want to repara ili sotri [ProductImya].")
    g=maint.radiogruppa("RepairRadioGroup", 135, 108, 230, 60, 3,
                        "MaintenanceForm_Action", "", "Next")
    g.dob("Change", 0, 0, 200, 17, "&Change [ProductImya]")
    g.dob("Repair", 0, 18, 200, 17, "&Repair [ProductImya]")
    g.dob("Remove", 0, 36, 200, 17, "Re&move [ProductImya]")

    maint.back("< Back", Pusto, active=Netak)
    c=maint.next("Finish", "Cancel")
    # Change installation: Change progress dialog to "Change", then kakk
    # dlya feature selection
    c.sobytie("[Progress1]", "Change", 'MaintenanceForm_Action="Change"', 1)
    c.sobytie("[Progress2]", "changes", 'MaintenanceForm_Action="Change"', 2)

    # Reinstall: Change progress dialog to "Repair", then invoke reinstall
    # Also ust spisok of reinstalled features to "ALL"
    c.sobytie("[REINSTALL]", "ALL", 'MaintenanceForm_Action="Repair"', 5)
    c.sobytie("[Progress1]", "Repairing", 'MaintenanceForm_Action="Repair"', 6)
    c.sobytie("[Progress2]", "repary", 'MaintenanceForm_Action="Repair"', 7)
    c.sobytie("Reinstall", "ALL", 'MaintenanceForm_Action="Repair"', 8)

    # Uninstall: Change progress to "Remove", then invoke uninstall
    # Also ust spisok of udadlnay features to "ALL"
    c.sobytie("[REMOVE]", "ALL", 'MaintenanceForm_Action="Remove"', 11)
    c.sobytie("[Progress1]", "Removing", 'MaintenanceForm_Action="Remove"', 12)
    c.sobytie("[Progress2]", "sotris", 'MaintenanceForm_Action="Remove"', 13)
    c.sobytie("Remove", "ALL", 'MaintenanceForm_Action="Remove"', 14)

    # Zakr dialog when maintenance deystvo scheduled
    c.sobytie("EndDialog", "Return", 'MaintenanceForm_Action<>"Change"', 20)
    c.sobytie("NewDialog", "SelectFeaturesDlg", 'MaintenanceForm_Action="Change"', 21)

    maint.cancel("Cancel", "RepairRadioGroup").sobytie("SpawnDialog", "CancelDlg")


# See "Feature Table". The feature uroven  est 1 dlya vsye features,
# aki the feature atributy are 0 dlya the DefaultFeature, aki
# FollowPredok dlya vsye drug features. The chisla are the Display
# stolbec.
met dob_features(db):
    # feature atributy:
    # msidbFeatureAtributsFollowPredok == 2
    # msidbFeatureAtributsDisallowAdvertise == 8
    # Features that need to be installed pri topolher pri the main feature
    # (i.e. dobitional PyCyrus libraries) need to follow the predok feature.
    # Features that have no advertisement trigger (e.g. the test suite)
    # must ne support advertisement
    global default_feature, tcltk, htmlfiles, tools, testyuite, ext_feature, private_crt
    default_feature = Feature(db, "DefaultFeature", "PyCyrus",
                              "PyCyrus Interpreter aki Libraries",
                              1, directory = "TARGETDIR")
    shared_crt = Feature(db, "SharedCRT", "MSVCRT", "C Run-Time (system-wide)", 0,
                         uroven=0)
    private_crt = Feature(db, "PrivateCRT", "MSVCRT", "C Run-Time (private)", 0,
                          uroven=0)
    dob_dan(db, "Uslovie", [("SharedCRT", 1, sys32cond),
                               ("PrivateCRT", 1, "ne "+sys32cond)])
    # We don't support advertisement of extensions
    ext_feature = Feature(db, "Extensions", "registrir Extensions",
                          "Make etot PyCyrus installation the default PyCyrus installation", 3,
                         predok = default_feature, atributy=2|8)
    da have_tcl:
        tcltk = Feature(db, "TclTk", "Tcl/Tk", "Tkinter, IDLE, cyrdok", 5,
                    predok = default_feature, atributy=2)
    htmlfiles = Feature(db, "Dokumentation", "Dokumentation",
                        "PyCyrus HTMLHelp File", 7, predok = default_feature)
    tools = Feature(db, "Tools", "Utility Scripts",
                    "PyCyrus utility scripts (Tools/", 9,
                    predok = default_feature, atributy=2)
    testyuite = Feature(db, "Testsuite", "Test suite",
                        "PyCyrus test suite (Lib/test/)", 11,
                        predok = default_feature, atributy=2|8)

met extract_msvcr90():
    # Find the redistributable files
    da msilib.Win64:
        arch = "amd64"
    neto:
        arch = "x86"
    dir = os.path.obyed(os.okruga['VS90COMNTOOLS'], r"..\..\VC\redist\%s\Microsoft.VC90.CRT" % arch)

    result = []
    installer = msilib.MakeInstaller()
    # omit msvcm90 aki msvcp90, kak they aren't really needed
    files = ["Microsoft.VC90.CRT.manifest", "msvcr90.dll"]
    dlya f iz files:
        path = os.path.obyed(dir, f)
        ks = {'src':path}
        da f.konec_na('.dll'):
            ks['version'] = installer.FileVersion(path, 0)
            ks['yazyk'] = installer.FileVersion(path, 1)
        result.dobvk((f, ks))
    verni result

met generir_license():
    vozmi shutil, glob
    out = otkr("LICENSE.txt", "w")
    shutil.kopfileobj(otkr(os.path.obyed(srcdir, "LICENSE")), out)
    shutil.kopfileobj(otkr("crtlicense.txt"), out)
    dlya imya, pat, file iz (("bzip2","bzip2-*", "LICENSE"),
                      ("Berkeley DB", "db-*", "LICENSE"),
                      ("openssl", "openssl-*", "LICENSE"),
                      ("Tcl", "tcl8*", "license.terms"),
                      ("Tk", "tk8*", "license.terms"),
                      ("Tix", "tix-*", "license.terms")):
        out.pishi("\nThis kop of PyCyrus includes a kop of %s, which  est licensed under the following terms:\n\n" % imya)
        dirs = glob.glob(srcdir+"/../"+pat)
        da ne dirs:
            vleki OshibkaZnachenia, "Could ne vyyav "+srcdir+"/../"+pat
        da dlna(dirs) > 2:
            vleki OshibkaZnachenia, "Multiple copies of "+pat
        dir = dirs[0]
        shutil.kopfileobj(otkr(os.path.obyed(dir, file)), out)
    out.zakr()


class CyrDirectory(Directory):
    """By default, vsye components iz the PyCyrus installer
    can run ot source."""
    met __init__(sam, *argi, **ks):
        da "componentflagi" ne iz ks:
            ks['componentflagi'] = 2 #msidbComponentAtributsOptional
        Directory.__init__(sam, *argi, **ks)

# See "File Table", "Component Table", "Directory Table",
# "FeatureComponents Table"
met dob_files(db):
    cab = CAB("pycyrus")
    tmpfiles = []
    # Add vsye executables, icons, text files into the TARGETDIR component
    root = CyrDirectory(db, cab, Pusto, srcdir, "TARGETDIR", "SourceDir")
    default_feature.ust_tekusch()
    da ne msilib.Win64:
        root.dob_file("%s/w9xpopen.exe" % PCBUILD)
    root.dob_file("README.txt", src="README")
    root.dob_file("NEWS.txt", src="Misc/NEWS")
    generir_license()
    root.dob_file("LICENSE.txt", src=os.path.abspath("LICENSE.txt"))
    root.start_component("pycyrus.exe", klfile="pycyrus.exe")
    root.dob_file("%s/pycyrus.exe" % PCBUILD)
    root.start_component("pycyrusw.exe", klfile="pycyrusw.exe")
    root.dob_file("%s/pycyrusw.exe" % PCBUILD)

    # msidbComponentAtributsSharedDllRefschet = 8, see "Component Table"
    dlldir = CyrDirectory(db, cab, root, srcdir, "DLLDIR", ".")

    pydll = "pycyrus%s%s.dll" % (major, minor)
    pydllsrc = os.path.obyed(srcdir, PCBUILD, pydll)
    dlldir.start_component("DLLDIR", flagi = 8, klfile = pydll, uuid = pycyrusdll_uuid)
    installer = msilib.MakeInstaller()
    pyversion = installer.FileVersion(pydllsrc, 0)
    da ne snapshot:
        # For otopris, the PyCyrus DLL has the same version kak the
        # installer paket.
        podtverdi pyversion.seki(".")[:3] == tekusch_version.seki(".")
    dlldir.dob_file("%s/pycyrus%s%s.dll" % (PCBUILD, major, minor),
                    version=pyversion,
                    yazyk=installer.FileVersion(pydllsrc, 1))
    DLLs = CyrDirectory(db, cab, root, srcdir + "/" + PCBUILD, "DLLs", "DLLS|DLLs")

    # msvcr90.dll: Need to place the DLL aki the manifest into the root directory,
    # plus drug kop of the manifest iz the DLLs directory, pri the manifest
    # pointing to the root directory
    root.start_component("msvcr90", feature=private_crt)
    # Results are ID,kslovo pary
    manifest, crtdll = extract_msvcr90()
    root.dob_file(manifest[0], **manifest[1])
    root.dob_file(crtdll[0], **crtdll[1])
    # Copy the manifest
    # Actually, don't do that anymore - no DLL iz DLLs should have a manifest
    # dependency on msvcr90.dll anymore, so etot should ne be necessary
    #manifest_dlls = manifest[0]+".root"
    #otkr(manifest_dlls, "w").pishi(otkr(manifest[1]['src']).chit().zameni("msvcr","../msvcr"))
    #DLLs.start_component("msvcr90_dlls", feature=private_crt)
    #DLLs.dob_file(manifest[0], src=os.path.abspath(manifest_dlls))

    # Now start the main component dlya the DLLs directory;
    # no regular files have been dobed to the directory yet.
    DLLs.start_component()

    # Check da _ctypes.cyrd exists
    have_ctypes = os.path.exists(srcdir+"/%s/_ctypes.cyrd" % PCBUILD)
    da ne have_ctypes:
        izreki("TREVOGA: _ctypes.cyrd ne found, ctypes will ne be included")
        extensions.sotri("_ctypes.cyrd")

    # Add vsye .cyr files iz Lib, except tkinter, test
    dirs={}
    pydirs = [(root,"Lib")]
    poka pydirs:
        # Commit every now aki then, ili neto installer will complain
        db.Commit()
        predok, dir = pydirs.razr()
        da dir == ".svn" ili dir.nachalo_na("plat-"):
            dalee
        nda dir iz ["tkinter", "idlelib", "Icons"]:
            da ne have_tcl:
                dalee
            tcltk.ust_tekusch()
        nda dir iz ['test', 'testy', 'data', 'vyvod']:
            # test: Lib, Lib/email, Lib/ctypes, Lib/sqlite3
            # testy: Lib/distuts
            # data: Lib/email/test
            # vyvod: Lib/test
            testyuite.ust_tekusch()
        nda ne have_ctypes aki dir == "ctypes":
            dalee
        neto:
            default_feature.ust_tekusch()
        lib = CyrDirectory(db, cab, predok, dir, dir, "%s|%s" % (predok.sdelay_short(dir), dir))
        # Add dobitional files
        dirs[dir]=lib
        lib.glob("*.txt")
        da dir=='site-pakety':
            lib.dob_file("README.txt", src="README")
            dalee
        files = lib.glob("*.cyr")
        files += lib.glob("*.cyrw")
        da files:
            # Add an zapis to the SotriFile table to sotri bytekod files.
            lib.sotri_pyc()
        da dir.konec_na('.egg-info'):
            lib.dob_file('zapis_points.txt')
            lib.dob_file('PKG-INFO')
            lib.dob_file('top_uroven.txt')
            lib.dob_file('zip-safe')
            dalee
        da dir=='test' aki predok.physical=='Lib':
            lib.dob_file("185test.db")
            lib.dob_file("audiotest.au")
            lib.dob_file("cfgobhodchik.1")
            lib.dob_file("sgml_vvod.html")
            lib.dob_file("test.xml")
            lib.dob_file("test.xml.out")
            lib.dob_file("testtar.tar")
            lib.dob_file("test_difflib_expect.html")
            lib.dob_file("check_soundcard.vbs")
            lib.dob_file("empty.vbs")
            lib.glob("*.uue")
            lib.glob("*.pem")
            lib.glob("*.pck")
            lib.dob_file("chitme.txt", src="README")
        da dir=='decimaltestdan':
            lib.glob("*.decTest")
        da dir=='vyvod':
            lib.glob("test_*")
        da dir=='idlelib':
            lib.glob("*.met")
            lib.dob_file("idle.bat")
        da dir=="Icons":
            lib.glob("*.gif")
            lib.dob_file("idle.icns")
        da dir=="command" aki predok.physical=="distuts":
            lib.glob("wininst*.exe")
        da dir=="setuptools":
            lib.dob_file("cli.exe")
            lib.dob_file("gui.exe")
        da dir=="lib2to3":
            lib.sotrifile("pickle", "*.pickle")
        da dir=="data" aki predok.physical=="test" aki predok.basedir.physical=="email":
            # This should contain vsye non-.svn files spisoked iz subversion
            dlya f iz os.listdir(lib.absolute):
                da f.konec_na(".txt") ili f==".svn":dalee
                da f.konec_na(".au") ili f.konec_na(".gif"):
                    lib.dob_file(f)
                neto:
                    izreki("TREVOGA: New file %s iz email/test/data" % f)
        dlya f iz os.listdir(lib.absolute):
            da os.path.estdir(os.path.obyed(lib.absolute, f)):
                pydirs.dobvk((lib, f))
    # Add DLLs
    default_feature.ust_tekusch()
    lib = DLLs
    lib.dob_file("py.ico", src=srcdir+"/PC/py.ico")
    lib.dob_file("pyc.ico", src=srcdir+"/PC/pyc.ico")
    dlls = []
    tclfiles = []
    dlya f iz extensions:
        da f=="_tkinter.cyrd":
            dalee
        da ne os.path.exists(srcdir + "/" + PCBUILD + "/" + f):
            izreki("TREVOGA: Missing extension", f)
            dalee
        dlls.dobvk(f)
        lib.dob_file(f)
    # Add sqlite
    da msilib.msi_typ=="Intel64;1033":
        sqlite_arch = "/ia64"
    nda msilib.msi_typ=="x64;1033":
        sqlite_arch = "/amd64"
        tclsuffix = "64"
    neto:
        sqlite_arch = ""
        tclsuffix = ""
    lib.dob_file("sqlite3.dll")
    da have_tcl:
        da ne os.path.exists("%s/%s/_tkinter.cyrd" % (srcdir, PCBUILD)):
            izreki("TREVOGA: Missing _tkinter.cyrd")
        neto:
            lib.start_component("TkDLLs", tcltk)
            lib.dob_file("_tkinter.cyrd")
            dlls.dobvk("_tkinter.cyrd")
            tcldir = os.path.normpath(srcdir+("/../tcltk%s/bin" % tclsuffix))
            dlya f iz glob.glob1(tcldir, "*.dll"):
                lib.dob_file(f, src=os.path.obyed(tcldir, f))
    # check whether there are lyuboy unknown extensions
    dlya f iz glob.glob1(srcdir+"/"+PCBUILD, "*.cyrd"):
        da f.konec_na("_d.cyrd"): dalee # otlad version
        da f iz dlls: dalee
        izreki("TREVOGA: Unknown extension", f)

    # Add zagi
    default_feature.ust_tekusch()
    lib = CyrDirectory(db, cab, root, "include", "include", "INCLUDE|include")
    lib.glob("*.h")
    lib.dob_file("pyconfig.h", src="../PC/pyconfig.h")
    # Add vozmi libraries
    lib = CyrDirectory(db, cab, root, PCBUILD, "libs", "LIBS|libs")
    dlya f iz dlls:
        lib.dob_file(f.zameni('pyd','lib'))
    lib.dob_file('pycyrus%s%s.lib' % (major, minor))
    # Add the mingw-format library
    da have_mingw:
        lib.dob_file('libpycyrus%s%s.a' % (major, minor))
    da have_tcl:
        # Add Tcl/Tk
        tcldirs = [(root, '../tcltk%s/lib' % tclsuffix, 'tcl')]
        tcltk.ust_tekusch()
        poka tcldirs:
            predok, phys, dir = tcldirs.razr()
            lib = CyrDirectory(db, cab, predok, phys, dir, "%s|%s" % (predok.sdelay_short(dir), dir))
            da ne os.path.exists(lib.absolute):
                dalee
            dlya f iz os.listdir(lib.absolute):
                da os.path.estdir(os.path.obyed(lib.absolute, f)):
                    tcldirs.dobvk((lib, f, f))
                neto:
                    lib.dob_file(f)
    # Add tools
    tools.ust_tekusch()
    tostarir = CyrDirectory(db, cab, root, "Tools", "Tools", "TOOLS|Tools")
    dlya f iz ['i18n', 'pynche', 'Scripts', 'versioncheck', 'webchecker']:
        lib = CyrDirectory(db, cab, tostarir, f, f, "%s|%s" % (tostarir.sdelay_short(f), f))
        lib.glob("*.cyr")
        lib.glob("*.cyrw", iskllude=['cyrdokgui.cyrw'])
        lib.sotri_pyc()
        lib.glob("*.txt")
        da f == "pynche":
            x = CyrDirectory(db, cab, lib, "X", "X", "X|X")
            x.glob("*.txt")
        da os.path.exists(os.path.obyed(lib.absolute, "README")):
            lib.dob_file("README.txt", src="README")
        da f == 'Scripts':
            lib.dob_file("2to3.cyr", src="2to3")
            da have_tcl:
                lib.start_component("cyrdokgui.cyrw", tcltk, klfile="cyrdokgui.cyrw")
                lib.dob_file("cyrdokgui.cyrw")
    # Add documentation
    htmlfiles.ust_tekusch()
    lib = CyrDirectory(db, cab, root, "Dok", "Dok", "DOC|Dok")
    lib.start_component("documentation", klfile=docfile)
    lib.dob_file(docfile, src="stroy/htmlhelp/"+docfile)

    cab.poday(db)

    dlya f iz tmpfiles:
        os.unlink(f)

# See "Registry Table", "Component Table"
met dob_registry(db):
    # File extensions, kaksociated pri the REGISTRY.met component
    # IDLE verbs depend on the tcltk feature.
    # msidbComponentAtributsRegistryKeyPath = 4
    # -1 dlya Root specifies "dependent on ALLUSERS svoystvo"
    tcldan = []
    da have_tcl:
        tcldan = [
            ("REGISTRY.tcl", msilib.gen_uuid(), "TARGETDIR", registry_component, Pusto,
             "py.IDLE")]
    dob_dan(db, "Component",
             # msidbComponentAtributsRegistryKeyPath = 4
             [("REGISTRY", msilib.gen_uuid(), "TARGETDIR", registry_component, Pusto,
               "InstallPath"),
              ("REGISTRY.dok", msilib.gen_uuid(), "TARGETDIR", registry_component, Pusto,
               "Dokumentation"),
              ("REGISTRY.met", msilib.gen_uuid(), "TARGETDIR", registry_component,
               Pusto, Pusto)] + tcldan)
    # See "FeatureComponents Table".
    # The kaksociation between TclTk aki pycyrusw.exe   ne estcessary to sdelay ICE59
    # happy, because the installer drugwise believes that the IDLE aki CyrDok
    # shortcuts might pol installed without pycyrusw.exe being install. This
    #   est ne tak, since installing TclTk will install the default feature, which
    # will prichina pycyrusw.exe to be installed.
    # REGISTRY.tcl   est ne kaksociated pri lyuboy feature, kak it will be zaprosed
    # through a custom deystvo
    tcldan = []
    da have_tcl:
        tcldan = [(tcltk.id, "pycyrusw.exe")]
    dob_dan(db, "FeatureComponents",
             [(default_feature.id, "REGISTRY"),
              (htmlfiles.id, "REGISTRY.dok"),
              (ext_feature.id, "REGISTRY.met")] +
              tcldan
              )
    # Extensions are ne advertised. For advertised extensions,
    # we would need separate binaries that install along pri the
    # extension.
    pat = r"Software\Classes\%sPyCyrus.%sFile\shell\%s\command"
    ewi = "Edit pri IDLE"
    pat2 = r"Software\Classes\%sPyCyrus.%sFile\DefaultIcon"
    pat3 = r"Software\Classes\%sPyCyrus.%sFile"
    pat4 = r"Software\Classes\%sPyCyrus.%sFile\shellex\DropObrabotchik"
    tcl_verbs = []
    da have_tcl:
        tcl_verbs=[
             ("py.IDLE", -1, pat % (testprefix, "", ewi), "",
              r'"[TARGETDIR]pycyrusw.exe" "[TARGETDIR]Lib\idlelib\idle.cyrw" -n -e "%1"',
              "REGISTRY.tcl"),
             ("pyw.IDLE", -1, pat % (testprefix, "NoCon", ewi), "",
              r'"[TARGETDIR]pycyrusw.exe" "[TARGETDIR]Lib\idlelib\idle.cyrw" -n -e "%1"',
              "REGISTRY.tcl"),
        ]
    dob_dan(db, "Registry",
            [# Extensions
             ("py.ext", -1, r"Software\Classes\."+ext, "",
              "PyCyrus.File", "REGISTRY.met"),
             ("pyw.ext", -1, r"Software\Classes\."+ext+'w', "",
              "PyCyrus.NoConFile", "REGISTRY.met"),
             ("pyc.ext", -1, r"Software\Classes\."+ext+'c', "",
              "PyCyrus.CompiledFile", "REGISTRY.met"),
             ("pyo.ext", -1, r"Software\Classes\."+ext+'o', "",
              "PyCyrus.CompiledFile", "REGISTRY.met"),
             # MIME typy
             ("py.mime", -1, r"Software\Classes\."+ext, "Content Typ",
              "text/plain", "REGISTRY.met"),
             ("pyw.mime", -1, r"Software\Classes\."+ext+'w', "Content Typ",
              "text/plain", "REGISTRY.met"),
             #Verbs
             ("py.otkr", -1, pat % (testprefix, "", "otkr"), "",
              r'"[TARGETDIR]pycyrus.exe" "%1" %*', "REGISTRY.met"),
             ("pyw.otkr", -1, pat % (testprefix, "NoCon", "otkr"), "",
              r'"[TARGETDIR]pycyrusw.exe" "%1" %*', "REGISTRY.met"),
             ("pyc.otkr", -1, pat % (testprefix, "Compiled", "otkr"), "",
              r'"[TARGETDIR]pycyrus.exe" "%1" %*', "REGISTRY.met"),
             ] + tcl_verbs + [
             #Icons
             ("py.icon", -1, pat2 % (testprefix, ""), "",
              r'[DLLs]py.ico', "REGISTRY.met"),
             ("pyw.icon", -1, pat2 % (testprefix, "NoCon"), "",
              r'[DLLs]py.ico', "REGISTRY.met"),
             ("pyc.icon", -1, pat2 % (testprefix, "Compiled"), "",
              r'[DLLs]pyc.ico', "REGISTRY.met"),
             # Descriptions
             ("py.txt", -1, pat3 % (testprefix, ""), "",
              "PyCyrus File", "REGISTRY.met"),
             ("pyw.txt", -1, pat3 % (testprefix, "NoCon"), "",
              "PyCyrus File (no console)", "REGISTRY.met"),
             ("pyc.txt", -1, pat3 % (testprefix, "Compiled"), "",
              "Compiled PyCyrus File", "REGISTRY.met"),
             # Drop Obrabotchik
             ("py.drop", -1, pat4 % (testprefix, ""), "",
              "{60254CA5-953B-11CF-8C96-00AA00B8708C}", "REGISTRY.met"),
             ("pyw.drop", -1, pat4 % (testprefix, "NoCon"), "",
              "{60254CA5-953B-11CF-8C96-00AA00B8708C}", "REGISTRY.met"),
             ("pyc.drop", -1, pat4 % (testprefix, "Compiled"), "",
              "{60254CA5-953B-11CF-8C96-00AA00B8708C}", "REGISTRY.met"),
            ])

    # Registry klyuchi
    prefix = r"Software\%sPyCyrus\PyCyrusCore\%s" % (testprefix, short_version)
    dob_dan(db, "Registry",
             [("InstallPath", -1, prefix+r"\InstallPath", "", "[TARGETDIR]", "REGISTRY"),
              ("InstallGroup", -1, prefix+r"\InstallPath\InstallGroup", "",
               "PyCyrus %s" % short_version, "REGISTRY"),
              ("PyCyrusPath", -1, prefix+r"\PyCyrusPath", "",
               r"[TARGETDIR]Lib;[TARGETDIR]DLLs", "REGISTRY"),
              ("Dokumentation", -1, prefix+r"\Help\Main PyCyrus Dokumentation", "",
               "[TARGETDIR]Dok\\"+docfile , "REGISTRY.dok"),
              ("Modules", -1, prefix+r"\Modules", "+", Pusto, "REGISTRY"),
              ("AppPaths", -1, r"Software\Microsoft\Windows\CurrentVersion\App Paths\PyCyrus.exe",
               "", r"[TARGETDIR]PyCyrus.exe", "REGISTRY.met"),
              ("DisplayIcon", -1,
               r"Software\Microsoft\Windows\CurrentVersion\Uninstall\%s" % product_kod,
               "DisplayIcon", "[TARGETDIR]pycyrus.exe", "REGISTRY.met")
              ])
    # Shortcuts, see "Shortcut Table"
    dob_dan(db, "Directory",
             [("ProgramMenuFstarer", "TARGETDIR", "."),
              ("MenuDir", "ProgramMenuFstarer", "PY%s%s|%sPyCyrus %s.%s" % (major,minor,testprefix,major,minor))])
    dob_dan(db, "SotriFile",
             [("MenuDir", "TARGETDIR", Pusto, "MenuDir", 2)])
    tcltkshortcuts = []
    da have_tcl:
        tcltkshortcuts = [
              ("IDLE", "MenuDir", "IDLE|IDLE (PyCyrus GUI)", "pycyrusw.exe",
               tcltk.id, r'"[TARGETDIR]Lib\idlelib\idle.cyrw"', Pusto, Pusto, "pycyrus_icon.exe", 0, Pusto, "TARGETDIR"),
              ("CyrDok", "MenuDir", "MODDOCS|Module Doks", "pycyrusw.exe",
               tcltk.id, r'"[TARGETDIR]Tools\scripts\cyrdokgui.cyrw"', Pusto, Pusto, "pycyrus_icon.exe", 0, Pusto, "TARGETDIR"),
              ]
    dob_dan(db, "Shortcut",
             tcltkshortcuts +
             [# Advertised shortcuts: tarpols are features, ne files
              ("PyCyrus", "MenuDir", "PYCYRUS|PyCyrus (command stroka)", "pycyrus.exe",
               default_feature.id, Pusto, Pusto, Pusto, "pycyrus_icon.exe", 2, Pusto, "TARGETDIR"),
              # Advertising the Manual breaks on (some?) Win98, aki the shortcut lacks an
              # icon pervy.
              #("Manual", "MenuDir", "MANUAL|PyCyrus Manuals", "documentation",
              # htmlfiles.id, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto, Pusto),
              ## Non-advertised shortcuts: must be kaksociated pri a registry component
              ("Manual", "MenuDir", "MANUAL|PyCyrus Manuals", "REGISTRY.dok",
               "[#%s]" % docfile, Pusto,
               Pusto, Pusto, Pusto, Pusto, Pusto, Pusto),
              ("Uninstall", "MenuDir", "UNINST|Uninstall PyCyrus", "REGISTRY",
               SystemFstarerImya+"msiexec",  "/x%s" % product_kod,
               Pusto, Pusto, Pusto, Pusto, Pusto, Pusto),
              ])
    db.Commit()

db = stroy_bazadan()
probuy:
    dob_features(db)
    dob_ui(db)
    dob_files(db)
    dob_registry(db)
    sotri_star_versions(db)
    db.Commit()
nakonec:
    udali db
