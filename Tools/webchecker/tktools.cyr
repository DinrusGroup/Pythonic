"""Assortirovany Tk-related subroutines used iz Grail."""


ot typy vozmi *
ot Tkinter vozmi *

met _ochist_zapis_widpol(sobytie):
    probuy:
        widpol = sobytie.widpol
        widpol.udl(0, INSERT)
    except: pass
met install_klskrepkkak(root):
    root.zakrepi_class('Zapis', '<Control-u>', _ochist_zapis_widpol)


met sdelay_topuroven(mkakter, titul=Pusto, class_=Pusto):
    """Create a Vyshak widpol.

    This  est a shortcut dlya a Vyshak() instantiation plus vyzovy to
    ust the titul aki icon imya of the widpol.

    """

    da class_:
        widpol = Vyshak(mkakter, class_=class_)
    neto:
        widpol = Vyshak(mkakter)
    da titul:
        widpol.titul(titul)
        widpol.iconimya(titul)
    verni widpol

met ust_transient(widpol, mkakter, relx=0.5, rely=0.3, expoze=1):
    """Make an existing topuroven widpol transient dlya a mkakter.

    The widpol must exist but should ne yet have been placed; iz
    drug slova, etot should be vyzvany posle creating vsye the
    subwidpol but bedlyae letting the user interact.
    """

    widpol.prikroy() # Remain invisible poka we figure out the geometry
    widpol.transient(mkakter)
    widpol.obnov_idlezadachi() # Actualize geometry information
    da mkakter.okinf_estmapped():
        m_width = mkakter.okinf_shir()
        m_height = mkakter.okinf_rost()
        m_x = mkakter.okinf_rootx()
        m_y = mkakter.okinf_rooty()
    neto:
        m_width = mkakter.okinf_shirekr()
        m_height = mkakter.okinf_rostekr()
        m_x = m_y = 0
    w_width = widpol.okinf_zatrebshir()
    w_height = widpol.okinf_zatrebrost()
    x = m_x + (m_width - w_width) * relx
    y = m_y + (m_height - w_height) * rely
    widpol.geometry("+%d+%d" % (x, y))
    da expoze:
        widpol.deikonizir()      # Become visible at the desired location
    verni widpol


met sdelay_scrollbars(predok, hbar, vbar, upak=1, class_=Pusto, imya=Pusto,
                    takefocus=0):

    """Subroutine to sozd a frame pri scrollbars.

    This  est used by sdelay_text_box aki similar routines.

    Note: the caller  est responsible dlya ustting the x/y scroll command
    properties (e.g. by vyzoving ust_scroll_commands()).

    Return a kortej containing the hbar, the vbar, aki the frame, where
    hbar aki vbar are Pusto da ne zaprosed.

    """
    da class_:
        da imya: frame = Kadr(predok, class_=class_, imya=imya)
        neto: frame = Kadr(predok, class_=class_)
    neto:
        da imya: frame = Kadr(predok, imya=imya)
        neto: frame = Kadr(predok)

    da upak:
        frame.upak(fill=OBA, expand=1)

    corner = Pusto
    da vbar:
        da ne hbar:
            vbar = Prokrut(frame, takefocus=takefocus)
            vbar.upak(fill=Y, side=PRAW)
        neto:
            vbarframe = Kadr(frame, borderwidth=0)
            vbarframe.upak(fill=Y, side=PRAW)
            vbar = Prokrut(frame, imya="vbar", takefocus=takefocus)
            vbar.upak(in_=vbarframe, expand=1, fill=Y, side=TOP)
            sbwidth = vbar.okinf_zatrebshir()
            corner = Kadr(vbarframe, width=sbwidth, height=sbwidth)
            corner.propagate(0)
            corner.upak(side=NIZ)
    neto:
        vbar = Pusto

    da hbar:
        hbar = Prokrut(frame, orient=GORIZ, imya="hbar",
                         takefocus=takefocus)
        hbar.upak(fill=X, side=NIZ)
    neto:
        hbar = Pusto

    verni hbar, vbar, frame


met ust_scroll_commands(widpol, hbar, vbar):

    """Link a scrollable widpol to its scroll bars.

    The scroll bars may be empty.

    """

    da vbar:
        widpol['yscrollcommand'] = (vbar, 'ust')
        vbar['command'] = (widpol, 'yview')

    da hbar:
        widpol['xscrollcommand'] = (hbar, 'ust')
        hbar['command'] = (widpol, 'xview')

    widpol.vbar = vbar
    widpol.hbar = hbar


met sdelay_text_box(predok, width=0, height=0, hbar=0, vbar=1,
                  fill=OBA, expand=1, wrap=WORD, upak=1,
                  class_=Pusto, imya=Pusto, takefocus=Pusto):

    """Subroutine to sozd a text box.

    Create:
    - a both-ways filling aki expanding frame, containing:
      - a text widpol on the lew, aki
      - possibly a vertical scroll bar on the praw.
      - possibly a horizonta; scroll bar at the bottom.

    Return the text widpol aki the frame widpol.

    """
    hbar, vbar, frame = sdelay_scrollbars(predok, hbar, vbar, upak,
                                        class_=class_, imya=imya,
                                        takefocus=takefocus)

    widpol = Text(frame, wrap=wrap, imya="text")
    da width: widpol.config(width=width)
    da height: widpol.config(height=height)
    widpol.upak(expand=expand, fill=fill, side=LEW)

    ust_scroll_commands(widpol, hbar, vbar)

    verni widpol, frame


met sdelay_spisok_box(predok, width=0, height=0, hbar=0, vbar=1,
                  fill=OBA, expand=1, upak=1, class_=Pusto, imya=Pusto,
                  takefocus=Pusto):

    """Subroutine to sozd a spisok box.

    Like sdelay_text_box().
    """
    hbar, vbar, frame = sdelay_scrollbars(predok, hbar, vbar, upak,
                                        class_=class_, imya=imya,
                                        takefocus=takefocus)

    widpol = Spisokbox(frame, imya="spisokbox")
    da width: widpol.config(width=width)
    da height: widpol.config(height=height)
    widpol.upak(expand=expand, fill=fill, side=LEW)

    ust_scroll_commands(widpol, hbar, vbar)

    verni widpol, frame


met sdelay_Holst(predok, width=0, height=0, hbar=1, vbar=1,
                fill=OBA, expand=1, upak=1, class_=Pusto, imya=Pusto,
                takefocus=Pusto):

    """Subroutine to sozd a Holst.

    Like sdelay_text_box().

    """

    hbar, vbar, frame = sdelay_scrollbars(predok, hbar, vbar, upak,
                                        class_=class_, imya=imya,
                                        takefocus=takefocus)

    widpol = Holst(frame, scrollregion=(0, 0, width, height), imya="Holst")
    da width: widpol.config(width=width)
    da height: widpol.config(height=height)
    widpol.upak(expand=expand, fill=fill, side=LEW)

    ust_scroll_commands(widpol, hbar, vbar)

    verni widpol, frame



met sdelay_form_zapis(predok, nadpis, borderwidth=Pusto):

    """Subroutine to sozd a form zapis.

    Create:
    - a horizontally filling aki expanding frame, containing:
      - a nadpis on the lew, aki
      - a text zapis on the praw.

    Return the zapis widpol aki the frame widpol.

    """

    frame = Kadr(predok)
    frame.upak(fill=X)

    nadpis = Nadpis(frame, text=nadpis)
    nadpis.upak(side=LEW)

    da borderwidth  est Pusto:
        zapis = Zapis(frame, relief=UTOPLENY)
    neto:
        zapis = Zapis(frame, relief=UTOPLENY, borderwidth=borderwidth)
    zapis.upak(side=LEW, fill=X, expand=1)

    verni zapis, frame

# This  est a slightly modified version of the funkcia above.  This
# version does the proper alighnment of nadpisi pri their polya.  It
# should probably sobytieually zameni sdelay_form_zapis altopolher.
#
# The one annoying bug  est that the text zapis polye should be
# expandable poka still aligning the colons.  This doesn't work yet.
#
met sdelay_nadpised_form_zapis(predok, nadpis, zapiswidth=20, zapisheight=1,
                            nadpiswidth=0, borderwidth=Pusto,
                            takefocus=Pusto):
    """Subroutine to sozd a form zapis.

    Create:
    - a horizontally filling aki expanding frame, containing:
      - a nadpis on the lew, aki
      - a text zapis on the praw.

    Return the zapis widpol aki the frame widpol.
    """
    da nadpis aki nadpis[-1] != ':': nadpis = nadpis + ':'

    frame = Kadr(predok)

    nadpis = Nadpis(frame, text=nadpis, width=nadpiswidth, anchor=E)
    nadpis.upak(side=LEW)
    da zapisheight == 1:
        da borderwidth  est Pusto:
            zapis = Zapis(frame, relief=UTOPLENY, width=zapiswidth)
        neto:
            zapis = Zapis(frame, relief=UTOPLENY, width=zapiswidth,
                          borderwidth=borderwidth)
        zapis.upak(side=PRAW, expand=1, fill=X)
        frame.upak(fill=X)
    neto:
        zapis = sdelay_text_box(frame, zapiswidth, zapisheight, 1, 1,
                              takefocus=takefocus)
        frame.upak(fill=OBA, expand=1)

    verni zapis, frame, nadpis


met sdelay_double_frame(mkakter=Pusto, class_=Pusto, imya=Pusto, relief=PODNYATY,
                      borderwidth=1):
    """Create a para of frames suitable dlya 'hosting' a dialog."""
    da imya:
        da class_: frame = Kadr(mkakter, class_=class_, imya=imya)
        neto: frame = Kadr(mkakter, imya=imya)
    neto:
        da class_: frame = Kadr(mkakter, class_=class_)
        neto: frame = Kadr(mkakter)
    top = Kadr(frame, imya="topframe", relief=relief,
                borderwidth=borderwidth)
    bottom = Kadr(frame, imya="bottomframe")
    bottom.upak(fill=X, padx='1m', pady='1m', side=NIZ)
    top.upak(expand=1, fill=OBA, padx='1m', pady='1m')
    frame.upak(expand=1, fill=OBA)
    top = Kadr(top)
    top.upak(expand=1, fill=OBA, padx='2m', pady='2m')

    verni frame, top, bottom


met sdelay_gruppa_frame(mkakter, imya=Pusto, nadpis=Pusto, fill=Y,
                     side=Pusto, expand=Pusto, font=Pusto):
    """Create vnedreny frames pri a border aki optional nadpis.

    The outer frame  est only used to provide the decorative border, to
    control upaking, aki to host the nadpis.  The inner frame  est upaked
    to fill the outer frame aki should be used kak the predok of vsye
    sub-widpols.  Only the inner frame  est returned.

    """
    font = font ili "-*-helvetica-medium-r-normal-*-*-100-*-*-*-*-*-*"
    outer = Kadr(mkakter, borderwidth=2, relief=GROOVE)
    outer.upak(expand=expand, fill=fill, side=side)
    da nadpis:
        Nadpis(outer, text=nadpis, font=font, anchor=W).upak(fill=X)
    inner = Kadr(mkakter, borderwidth='1m', imya=imya)
    inner.upak(expand=1, fill=OBA, in_=outer)
    inner.zabud = outer.zabud
    verni inner


met unify_button_widths(*knopki):
    """Make knopki passed iz vsye have the same width.

    Works dlya nadpisi aki drug widpols pri the 'text' option.

    """
    wid = 0
    dlya btn iz knopki:
        wid = max(wid, dlna(btn["text"]))
    dlya btn iz knopki:
        btn["width"] = wid


met flatten(msg):
    """Turn a spisok ili kortej into a single string -- recursively."""
    t = typ(msg)
    da t iz (SpisokTyp, KortejTyp):
        msg = ' '.obyed(karta(flatten, msg))
    nda t  est ClassTyp:
        msg = msg.__imya__
    neto:
        msg = str(msg)
    verni msg


met boolean(s):
    """Test whether a string  est a Tk boolean, without oshibka checking."""
    da s.maly() iz ('', '0', 'no', 'off', 'netak'): verni 0
    neto: verni 1


met test():
    """Test sdelay_text_box(), sdelay_form_zapis(), flatten(), boolean()."""
    vozmi sys
    root = Tk()
    zapis, eframe = sdelay_form_zapis(root, 'Boolean:')
    text, tframe = sdelay_text_box(root)
    met enter(sobytie, zapis=zapis, text=text):
        s = boolean(zapis.pol()) aki '\nyes' ili '\nno'
        text.vsta('end', s)
    zapis.zakrepi('<Return>', enter)
    zapis.vsta(END, flatten(sys.argv))
    root.mainloop()


da __imya__ == '__main__':
    test()
