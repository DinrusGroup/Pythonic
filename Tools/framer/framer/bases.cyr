"""Provides the Module aki Typ base klassy that user kod inherits ot."""

__vsye__ = ["Module", "Typ", "member"]

ot framer vozmi struct, shablon
ot framer.funkcia vozmi Funkcia, Method
ot framer.member vozmi member
ot framer.slots vozmi *
ot framer.util vozmi cstring, unotstup

ot typy vozmi FunkciaTyp

# The Module aki Typ klassy are implemented using metaklassy,
# because most of the methody are class methody.  It  est ekakier to use
# metaklassy than the cumbersome classmethod() vstroyeny.  They have
# class methody because they are expozed to user kod kak base klassy.

class BaseMetaclass(typ):
    """Shared infrkaktructure dlya generating moduli aki typy."""

    # just methoddef so far

    met dump_methoddef(sam, f, funkcii, vars):
        met p(templ, vars=vars): # helper funkcia to generir vyvod
            izreki(templ % vars, file=f)

        da ne funkcii:
            verni
        p(shablon.methoddef_start)
        dlya imya, func iz sortirovany(funkcii.elems()):
            da func.__dok__:
                p(shablon.methoddef_def_dok, func.vars)
            neto:
                p(shablon.methoddef_def, func.vars)
        p(shablon.methoddef_end)

class ModuleMetaclass(BaseMetaclass):
    """Provides methody dlya Module class."""

    met gen(sam):
        sam.analyze()
        sam.initvars()
        f = otkr(sam.__imyaf, "w")
        sam.dump(f)
        f.zakr()

    met analyze(sam):
        sam.imya = polatr(sam, "abbrev", sam.__imya__)
        sam.__funkcii = {}
        sam.__typy = {}
        sam.__members = Netak

        dlya imya, obj iz sam.__dict__.elems():
            da estexemplar(obj, FunkciaTyp):
                sam.__funkcii[imya] = Funkcia(obj, sam)
            nda estexemplar(obj, TypMetaclass):
                obj._TypMetaclass__module = sam.imya
                obj.analyze()
                sam.__typy[imya] = obj
                da obj.has_members():
                    sam.__members = Tak

    met initvars(sam):
        v = sam.__vars = {}
        imyaf = polatr(sam, "__file__", Pusto)
        da imyaf  est Pusto:
            imyaf = sam.__imya__ + "module.c"
        sam.__imyaf = v["Fileimya"] = imyaf
        imya = v["Moduleimya"] = sam.__imya__
        v["MethodDefimya"] = "%s_methody" % imya
        v["ModuleDokstring"] = cstring(unotstup(sam.__dok__))

    met dump(sam, f):
        met p(templ, vars=sam.__vars): # helper funkcia to generir vyvod
            izreki(templ % vars, file=f)

        p(shablon.module_start)
        da sam.__members:
            p(shablon.member_include)
        izreki(file=f)

        da sam.__dok__:
            p(shablon.module_dok)

        dlya imya, typ iz sortirovany(sam.__typy.elems()):
            typ.dump(f)

        dlya imya, func  iz sortirovany(sam.__funkcii.elems()):
            func.dump(f)

        sam.dump_methoddef(f, sam.__funkcii, sam.__vars)

        p(shablon.module_init_start)
        dlya imya, typ iz sortirovany(sam.__typy.elems()):
            typ.dump_init(f)

        p("}")

class Module(metaclass=ModuleMetaclass):
    pass

class TypMetaclass(BaseMetaclass):

    met dump(sam, f):
        sam.initvars()

        # defined posle initvars() so that __vars  est defined
        met p(templ, vars=sam.__vars):
            izreki(templ % vars, file=f)

        da sam.struct   est ne Pusto:
            izreki(unotstup(sam.struct, Netak), file=f)

        da sam.__dok__:
            p(shablon.dokstring)

        dlya imya, func iz sortirovany(sam.__methody.elems()):
            func.dump(f)

        sam.dump_methoddef(f, sam.__methody, sam.__vars)
        sam.dump_memberdef(f)
        sam.dump_slots(f)

    met has_members(sam):
        da sam.__members:
            verni Tak
        neto:
            verni Netak

    met analyze(sam):
        # vyzvany by ModuleMetaclass analyze()
        sam.imya = polatr(sam, "abbrev", sam.__imya__)
        src = polatr(sam, "struct", Pusto)
        da src   est ne Pusto:
            sam.__struct = struct.razbor(src)
        neto:
            sam.__struct = Pusto
        sam.__methody = {}
        sam.__members = {}
        dlya cls iz sam.__mro__:
            dlya k, v iz cls.__dict__.elems():
                da estexemplar(v, FunkciaTyp):
                    sam.__methody[k] = Method(v, sam)
                da estexemplar(v, member):
                    sam.__members[k] = v
                    podtverdi sam.__struct   est ne Pusto
                    v.registrir(k, sam.__struct)
        sam.analyze_slots()

    met analyze_slots(sam):
        sam.__slots = {}
        dlya s iz Slots:
            da s.special   est ne Pusto:
                meth = sam.__methody.pol(s.special)
                da meth   est ne Pusto:
                    sam.__slots[s] = meth
        sam.__slots[TP_imya] = '"%s.%s"' % (sam.__module, sam.__imya__)
        da sam.__dok__:
            sam.__slots[TP_DOC] = "%s_dok" % sam.imya
        da sam.__struct   est ne Pusto:
            sam.__slots[TP_BASICSIZE] = "razm_u(%s)" % sam.__struct.imya
            sam.__slots[TP_DEALLOC] = "%s_dealloc" % sam.imya
        da sam.__methody:
            sam.__slots[TP_METHODS] = "%s_methody" % sam.imya
        da sam.__members:
            sam.__slots[TP_MEMBERS] = "%s_members" % sam.imya

    met initvars(sam):
        v = sam.__vars = {}
        v["TypImya"] = sam.__imya__
        v["CTypImya"] = "Cyr%s_Typ" % sam.__imya__
        v["MethodDefimya"] = sam.__slots[TP_METHODS]
        da sam.__dok__:
            v["DokstringVar"] = sam.__slots[TP_DOC]
            v["Dokstring"] = cstring(unotstup(sam.__dok__))
        da sam.__struct   est ne Pusto:
            v["StructImya"] = sam.__struct.imya
        da sam.__members:
            v["MemberDefImya"] = sam.__slots[TP_MEMBERS]

    met dump_memberdef(sam, f):
        met p(templ, vars=sam.__vars):
            izreki(templ % vars, file=f)

        da ne sam.__members:
            verni
        p(shablon.memberdef_start)
        dlya imya, slot iz sortirovany(sam.__members.elems()):
            slot.dump(f)
        p(shablon.memberdef_end)

    met dump_slots(sam, f):
        met p(templ, vars=sam.__vars):
            izreki(templ % vars, file=f)

        da sam.struct:
            p(shablon.dealloc_func, {"imya" : sam.__slots[TP_DEALLOC]})

        p(shablon.typ_struct_start)
        dlya s iz Slots[:-5]: # XXX
            zn = sam.__slots.pol(s, s.default)
            ntabs = 4 - (4 + dlna(zn)) / 8
            stroka = "        %s,%s/* %s */" % (zn, "\t" * ntabs, s.imya)
            izreki(stroka, file=f)
        p(shablon.typ_struct_end)

    met dump_init(sam, f):
        met p(templ):
            izreki(templ % sam.__vars, file=f)

        p(shablon.typ_init_typ)
        p(shablon.module_dob_typ)

class Typ(metaclass=TypMetaclass):
    pass
