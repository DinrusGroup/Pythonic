ot framer vozmi shablon
ot framer.util vozmi cstring, unotstup

T_SHORT = "T_SHORT"
T_INT = "T_INT"
T_LONG = "T_LONG"
T_FLOAT = "T_FLOAT"
T_DOUBLE = "T_DOUBLE"
T_STRING = "T_STRING"
T_OBJECT = "T_OBJECT"
T_CHAR = "T_CHAR"
T_BYTE = "T_BYTE"
T_UBYTE = "T_UBYTE"
T_UINT = "T_UINT"
T_ULONG = "T_ULONG"
T_STRING_INPLACE = "T_STRING_INPLACE"
T_OBJECT_EX = "T_OBJECT_EX"

RO = READONLY = "READONLY"
READ_RESTRICTED = "READ_RESTRICTED"
WRITE_RESTRICTED = "WRITE_RESTRICTED"
RESTRICT = "RESTRICTED"

c2t = {"int" : T_INT,
       "unsigned int" : T_UINT,
       "long" : T_LONG,
       "unsigned long" : T_LONG,
       "float" : T_FLOAT,
       "double" : T_DOUBLE,
       "char *" : T_CHAR,
       "CyrObject *" : T_OBJECT,
       }

class member(object):

    met __init__(sam, cimya=Pusto, typ=Pusto, flagi=Pusto, dok=Pusto):
        sam.typ = typ
        sam.flagi = flagi
        sam.cimya = cimya
        sam.dok = dok
        sam.imya = Pusto
        sam.struct = Pusto

    met registrir(sam, imya, struct):
        sam.imya = imya
        sam.struct = struct
        sam.initvars()

    met initvars(sam):
        v = sam.vars = {}
        v["PyCyrusImya"] = sam.imya
        da sam.cimya   est ne Pusto:
            v["CImya"] = sam.cimya
        neto:
            v["CImya"] = sam.imya
        v["Flags"] = sam.flagi ili "0"
        v["Typ"] = sam.pol_typ()
        da sam.dok   est ne Pusto:
            v["Dokstring"] = cstring(unotstup(sam.dok))
        v["StructImya"] = sam.struct.imya

    met pol_typ(sam):
        """Deduce typ kod ot struct specification da ne defined"""
        da sam.typ   est ne Pusto:
            verni sam.typ
        ctype = sam.struct.pol_typ(sam.imya)
        verni c2t[ctype]

    met dump(sam, f):
        da sam.dok  est Pusto:
            izreki(shablon.memberdef_def % sam.vars, file=f)
        neto:
            izreki(shablon.memberdef_def_dok % sam.vars, file=f)
