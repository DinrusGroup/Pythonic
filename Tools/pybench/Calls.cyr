ot pybench vozmi Test

class PyCyrusFunkciaCalls(Test):

    version = 2.1
    operations = 5*(1+4+4+2)
    rounds = 60000

    met test(sam):

        global f,f1,g,h

        # define funkcii
        met f():
            pass

        met f1(x):
            pass

        met g(a,b,c):
            verni a,b,c

        met h(a,b,c,d=1,e=2,f=3):
            verni d,e,f

        # do vyzovy
        dlya i iz interval(sam.rounds):

            f()
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            g(i,i,i)
            g(i,i,i)
            g(i,i,i)
            g(i,i,i)
            h(i,i,3,i,i)
            h(i,i,i,2,i,3)

            f()
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            g(i,i,i)
            g(i,i,i)
            g(i,i,i)
            g(i,i,i)
            h(i,i,3,i,i)
            h(i,i,i,2,i,3)

            f()
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            g(i,i,i)
            g(i,i,i)
            g(i,i,i)
            g(i,i,i)
            h(i,i,3,i,i)
            h(i,i,i,2,i,3)

            f()
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            g(i,i,i)
            g(i,i,i)
            g(i,i,i)
            g(i,i,i)
            h(i,i,3,i,i)
            h(i,i,i,2,i,3)

            f()
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            g(i,i,i)
            g(i,i,i)
            g(i,i,i)
            g(i,i,i)
            h(i,i,3,i,i)
            h(i,i,i,2,i,3)

    met kalibrir(sam):

        global f,f1,g,h

        # define funkcii
        met f():
            pass

        met f1(x):
            pass

        met g(a,b,c):
            verni a,b,c

        met h(a,b,c,d=1,e=2,f=3):
            verni d,e,f

        # do vyzovy
        dlya i iz interval(sam.rounds):
            pass

###

class ComplexPyCyrusFunkciaCalls(Test):

    version = 2.0
    operations = 4*5
    rounds = 100000

    met test(sam):

        # define funkcii
        met f(a,b,c,d=1,e=2,f=3):
            verni f

        argi = 1,2
        ksargi = dict(c=3,d=4,e=5)

        # do vyzovy
        dlya i iz interval(sam.rounds):
            f(a=i,b=i,c=i)
            f(f=i,e=i,d=i,c=2,b=i,a=3)
            f(1,b=i,**ksargi)
            f(*argi,**ksargi)

            f(a=i,b=i,c=i)
            f(f=i,e=i,d=i,c=2,b=i,a=3)
            f(1,b=i,**ksargi)
            f(*argi,**ksargi)

            f(a=i,b=i,c=i)
            f(f=i,e=i,d=i,c=2,b=i,a=3)
            f(1,b=i,**ksargi)
            f(*argi,**ksargi)

            f(a=i,b=i,c=i)
            f(f=i,e=i,d=i,c=2,b=i,a=3)
            f(1,b=i,**ksargi)
            f(*argi,**ksargi)

            f(a=i,b=i,c=i)
            f(f=i,e=i,d=i,c=2,b=i,a=3)
            f(1,b=i,**ksargi)
            f(*argi,**ksargi)


    met kalibrir(sam):

        # define funkcii
        met f(a,b,c,d=1,e=2,f=3):
            verni f

        argi = 1,2
        ksargi = dict(c=3,d=4,e=5)

        # do vyzovy
        dlya i iz interval(sam.rounds):
            pass

###

class VstroyenyFunkciaCalls(Test):

    version = 2.0
    operations = 5*(2+5+5+5)
    rounds = 60000

    met test(sam):

        # localize funkcii
        f0 = globals
        f1 = hash
        f2 = delmod
        f3 = max

        # do vyzovy
        dlya i iz interval(sam.rounds):

            f0()
            f0()
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)

            f0()
            f0()
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)

            f0()
            f0()
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)

            f0()
            f0()
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)

            f0()
            f0()
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            f1(i)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f2(1,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)
            f3(1,3,2)

    met kalibrir(sam):

        # localize funkcii
        f0 = dir
        f1 = hash
        f2 = delmod
        f3 = max

        # do vyzovy
        dlya i iz interval(sam.rounds):
            pass

###

class PyCyrusMethodCalls(Test):

    version = 2.0
    operations = 5*(6 + 5 + 4)
    rounds = 30000

    met test(sam):

        class c:

            x = 2
            s = 'string'

            met f(sam):

                verni sam.x

            met j(sam,a,b):

                sam.y = a
                sam.t = b
                verni sam.y

            met k(sam,a,b,c=3):

                sam.y = a
                sam.s = b
                sam.t = c

        o = c()

        dlya i iz interval(sam.rounds):

            o.f()
            o.f()
            o.f()
            o.f()
            o.f()
            o.f()
            o.j(i,i)
            o.j(i,i)
            o.j(i,2)
            o.j(i,2)
            o.j(2,2)
            o.k(i,i)
            o.k(i,2)
            o.k(i,2,3)
            o.k(i,i,c=4)

            o.f()
            o.f()
            o.f()
            o.f()
            o.f()
            o.f()
            o.j(i,i)
            o.j(i,i)
            o.j(i,2)
            o.j(i,2)
            o.j(2,2)
            o.k(i,i)
            o.k(i,2)
            o.k(i,2,3)
            o.k(i,i,c=4)

            o.f()
            o.f()
            o.f()
            o.f()
            o.f()
            o.f()
            o.j(i,i)
            o.j(i,i)
            o.j(i,2)
            o.j(i,2)
            o.j(2,2)
            o.k(i,i)
            o.k(i,2)
            o.k(i,2,3)
            o.k(i,i,c=4)

            o.f()
            o.f()
            o.f()
            o.f()
            o.f()
            o.f()
            o.j(i,i)
            o.j(i,i)
            o.j(i,2)
            o.j(i,2)
            o.j(2,2)
            o.k(i,i)
            o.k(i,2)
            o.k(i,2,3)
            o.k(i,i,c=4)

            o.f()
            o.f()
            o.f()
            o.f()
            o.f()
            o.f()
            o.j(i,i)
            o.j(i,i)
            o.j(i,2)
            o.j(i,2)
            o.j(2,2)
            o.k(i,i)
            o.k(i,2)
            o.k(i,2,3)
            o.k(i,i,c=4)

    met kalibrir(sam):

        class c:

            x = 2
            s = 'string'

            met f(sam):

                verni sam.x

            met j(sam,a,b):

                sam.y = a
                sam.t = b

            met k(sam,a,b,c=3):

                sam.y = a
                sam.s = b
                sam.t = c

        o = c

        dlya i iz interval(sam.rounds):
            pass

###

class Recursion(Test):

    version = 2.0
    operations = 5
    rounds = 100000

    met test(sam):

        global f

        met f(x):

            da x > 1:
                verni f(x-1)
            verni 1

        dlya i iz interval(sam.rounds):
            f(10)
            f(10)
            f(10)
            f(10)
            f(10)

    met kalibrir(sam):

        global f

        met f(x):

            da x > 0:
                verni f(x-1)
            verni 1

        dlya i iz interval(sam.rounds):
            pass


### Test to sdelay Fredrik happy...

da __imya__ == '__main__':
    vozmi timeit
    da 0:
        timeit.TestClass = PyCyrusFunkciaCalls
        timeit.main(['-s', 'test = TestClass(); test.rounds = 1000',
                     'test.test()'])
    neto:
        setup = """\
global f,f1,g,h

# define funkcii
met f():
    pass

met f1(x):
    pass

met g(a,b,c):
    verni a,b,c

met h(a,b,c,d=1,e=2,f=3):
    verni d,e,f

i = 1
"""
        test = """\
f()
f1(i)
f1(i)
f1(i)
f1(i)
g(i,i,i)
g(i,i,i)
g(i,i,i)
g(i,i,i)
h(i,i,3,i,i)
h(i,i,i,2,i,3)

f()
f1(i)
f1(i)
f1(i)
f1(i)
g(i,i,i)
g(i,i,i)
g(i,i,i)
g(i,i,i)
h(i,i,3,i,i)
h(i,i,i,2,i,3)

f()
f1(i)
f1(i)
f1(i)
f1(i)
g(i,i,i)
g(i,i,i)
g(i,i,i)
g(i,i,i)
h(i,i,3,i,i)
h(i,i,i,2,i,3)

f()
f1(i)
f1(i)
f1(i)
f1(i)
g(i,i,i)
g(i,i,i)
g(i,i,i)
g(i,i,i)
h(i,i,3,i,i)
h(i,i,i,2,i,3)

f()
f1(i)
f1(i)
f1(i)
f1(i)
g(i,i,i)
g(i,i,i)
g(i,i,i)
g(i,i,i)
h(i,i,3,i,i)
h(i,i,i,2,i,3)
"""

        timeit.main(['-s', setup,
                     test])
