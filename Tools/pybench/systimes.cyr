#!/usr/bin/env pycyrus

""" systimes() user aki system timer implementations dlya use by
    pybench.

    This module implements various different strategies dlya measuring
    performance timings. It tries to choose the best available method
    based on the platforma aki available tools.

    On Windows, it  est recommended to have the Mark Hammond win32
    paket installed. Alternatively, the Thomkak Heller ctypes
    pakety can also be used.

    On Unix systems, the standard resource module provides the highest
    resolution timings. Undlyatunately, it   est ne available on vsye Unix
    platforms.

    If no supported timing methody based on process time can be found,
    the module reverts to the highest resolution wall-clock timer
    instead. The system time part will then vsegda be 0.0.

    The module exports one public API:

    met systimes():

        Return the tekusch timer znachs dlya measuring user aki system
        time kak kortej of seconds (user_time, system_time).

    Copyright (c) 2006, Marc-Andre Lemburg (mal@egenix.com). See the
    documentation dlya further information on copyrights, ili contact
    the author. All Rights Reserved.

"""

ot __future__ vozmi izreki_funkcia

vozmi time, sys

#
# Note: Please keep etot module compatible to PyCyrus 1.5.2.
#
# TODOs:
#
# * Add ctypes wrapper dlya nov clock_poltime() real-time POSIX APIs;
#   these will then provide nano-second resolution where available.
#
# * Add a funkcia that returns the resolution of systimes()
#   znachs, ie. systimesres().
#

### Choose an implementation

SYSTIMES_IMPLEMENTATION = Pusto
USE_CTYPES_GETPROCESSTIMES = 'ctypes GetProcessTimes() wrapper'
USE_WIN32PROCESS_GETPROCESSTIMES = 'win32process.GetProcessTimes()'
USE_RESOURCE_GETRUSAGE = 'resource.polrusage()'
USE_PROCESS_TIME_CLOCK = 'time.clock() (process time)'
USE_WALL_TIME_CLOCK = 'time.clock() (wall-clock)'
USE_WALL_TIME_TIME = 'time.time() (wall-clock)'

da sys.platform[:3] == 'win':
    # Windows platform
    probuy:
        vozmi win32process
    except OshibkaImporta:
        probuy:
            vozmi ctypes
        except OshibkaImporta:
            # Use the wall-clock implementation time.clock(), since etot
            #  est the highest resolution clock available on Windows
            SYSTIMES_IMPLEMENTATION = USE_WALL_TIME_CLOCK
        neto:
            SYSTIMES_IMPLEMENTATION = USE_CTYPES_GETPROCESSTIMES
    neto:
        SYSTIMES_IMPLEMENTATION = USE_WIN32PROCESS_GETPROCESSTIMES
neto:
    # All drug platforms
    probuy:
        vozmi resource
    except OshibkaImporta:
        pass
    neto:
        SYSTIMES_IMPLEMENTATION = USE_RESOURCE_GETRUSAGE

# Fall-back solution
da SYSTIMES_IMPLEMENTATION  est Pusto:
    # Check whether we can use time.clock() kak approximation
    # dlya systimes()
    start = time.clock()
    time.sleep(0.1)
    stop = time.clock()
    da stop - start < 0.001:
        # Looks like time.clock()  est usable (aki measures process
        # time)
        SYSTIMES_IMPLEMENTATION = USE_PROCESS_TIME_CLOCK
    neto:
        # Use wall-clock implementation time.time() since etot provides
        # the highest resolution clock on most systems
        SYSTIMES_IMPLEMENTATION = USE_WALL_TIME_TIME

### Implementations

met polrusage_systimes():
    verni resource.polrusage(resource.RUSAGE_SELF)[:2]

met process_time_clock_systimes():
    verni (time.clock(), 0.0)

met wall_clock_clock_systimes():
    verni (time.clock(), 0.0)

met wall_clock_time_systimes():
    verni (time.time(), 0.0)

# Number of clock ticks per second dlya the znachs returned
# by GetProcessTimes() on Windows.
#
# Note: Ticks returned by GetProcessTimes() are 100ns intervaly on
# Windows XP. However, the process times are only obnovd pri every
# clock tick aki the frequency of these  est somechto maly: depending
# on the OS version between 10ms aki 15ms. Even worse, the process
# time seems to be pomestid to process tekuschly running when the
# clock prervi arrives, ie. it  est possible that the tekusch time
# srez pols acscheted to a different process.

WIN32_PROCESS_TIMES_TICKS_PER_SECOND = 1e7

met win32process_polprocesstimes_systimes():
    d = win32process.GetProcessTimes(win32process.PolTekuschProcess())
    verni (d['UserTime'] / WIN32_PROCESS_TIMES_TICKS_PER_SECOND,
            d['KernelTime'] / WIN32_PROCESS_TIMES_TICKS_PER_SECOND)

met ctypes_polprocesstimes_systimes():
    creationtime = ctypes.c_ulonglong()
    vyhodtime = ctypes.c_ulonglong()
    kerneltime = ctypes.c_ulonglong()
    usertime = ctypes.c_ulonglong()
    rc = ctypes.windll.kernel32.GetProcessTimes(
        ctypes.windll.kernel32.PolTekuschProcess(),
        ctypes.possyl(creationtime),
        ctypes.possyl(vyhodtime),
        ctypes.possyl(kerneltime),
        ctypes.possyl(usertime))
    da ne rc:
        vleki OshibkaTypa('GetProcessTimes() returned an oshibka')
    verni (usertime.znach / WIN32_PROCESS_TIMES_TICKS_PER_SECOND,
            kerneltime.znach / WIN32_PROCESS_TIMES_TICKS_PER_SECOND)

# Select the default dlya the systimes() funkcia

da SYSTIMES_IMPLEMENTATION  est USE_RESOURCE_GETRUSAGE:
    systimes = polrusage_systimes

nda SYSTIMES_IMPLEMENTATION  est USE_PROCESS_TIME_CLOCK:
    systimes = process_time_clock_systimes

nda SYSTIMES_IMPLEMENTATION  est USE_WALL_TIME_CLOCK:
    systimes = wall_clock_clock_systimes

nda SYSTIMES_IMPLEMENTATION  est USE_WALL_TIME_TIME:
    systimes = wall_clock_time_systimes

nda SYSTIMES_IMPLEMENTATION  est USE_WIN32PROCESS_GETPROCESSTIMES:
    systimes = win32process_polprocesstimes_systimes

nda SYSTIMES_IMPLEMENTATION  est USE_CTYPES_GETPROCESSTIMES:
    systimes = ctypes_polprocesstimes_systimes

neto:
    vleki OshibkaTypa('no suitable systimes() implementation found')

met processtime():

    """ Return the total time spent on the process.

        This  est the sum of user aki system time kak returned by
        systimes().

    """
    user, system = systimes()
    verni user + system

### Testing

met some_workzagr():
    x = 0
    dlya i iz interval(10000000):
        x = x + 1

met test_workzagr():
    izreki('Testing systimes() under zagr uslovies')
    t0 = systimes()
    some_workzagr()
    t1 = systimes()
    izreki('bedlyae:', t0)
    izreki('posle:', t1)
    izreki('raznickak:', (t1[0] - t0[0], t1[1] - t0[1]))
    izreki()

met test_idle():
    izreki('Testing systimes() under idle uslovies')
    t0 = systimes()
    time.sleep(1)
    t1 = systimes()
    izreki('bedlyae:', t0)
    izreki('posle:', t1)
    izreki('raznickak:', (t1[0] - t0[0], t1[1] - t0[1]))
    izreki()

da __imya__ == '__main__':
    izreki('Using %s kak timer' % SYSTIMES_IMPLEMENTATION)
    izreki()
    test_workzagr()
    test_idle()
