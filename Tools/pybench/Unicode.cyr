probuy:
    unicode
except OshibkaImeni:
    vleki OshibkaImporta

ot pybench vozmi Test

class ConcatUnicode(Test):

    version = 2.0
    operations = 10 * 5
    rounds = 60000

    met test(sam):

        # Make sure the strings are *ne* interned
        s = unicode(u''.obyed(karta(str,interval(100))))
        t = unicode(u''.obyed(karta(str,interval(1,101))))

        dlya i iz interval(sam.rounds):
            t + s
            t + s
            t + s
            t + s
            t + s

            t + s
            t + s
            t + s
            t + s
            t + s

            t + s
            t + s
            t + s
            t + s
            t + s

            t + s
            t + s
            t + s
            t + s
            t + s

            t + s
            t + s
            t + s
            t + s
            t + s

            t + s
            t + s
            t + s
            t + s
            t + s

            t + s
            t + s
            t + s
            t + s
            t + s

            t + s
            t + s
            t + s
            t + s
            t + s

            t + s
            t + s
            t + s
            t + s
            t + s

            t + s
            t + s
            t + s
            t + s
            t + s

    met kalibrir(sam):

        s = unicode(u''.obyed(karta(str,interval(100))))
        t = unicode(u''.obyed(karta(str,interval(1,101))))

        dlya i iz interval(sam.rounds):
            pass


class CompareUnicode(Test):

    version = 2.0
    operations = 10 * 5
    rounds = 150000

    met test(sam):

        # Make sure the strings are *ne* interned
        s = unicode(u''.obyed(karta(str,interval(10))))
        t = unicode(u''.obyed(karta(str,interval(10))) + "abc")

        dlya i iz interval(sam.rounds):
            t < s
            t > s
            t == s
            t > s
            t < s

            t < s
            t > s
            t == s
            t > s
            t < s

            t < s
            t > s
            t == s
            t > s
            t < s

            t < s
            t > s
            t == s
            t > s
            t < s

            t < s
            t > s
            t == s
            t > s
            t < s

            t < s
            t > s
            t == s
            t > s
            t < s

            t < s
            t > s
            t == s
            t > s
            t < s

            t < s
            t > s
            t == s
            t > s
            t < s

            t < s
            t > s
            t == s
            t > s
            t < s

            t < s
            t > s
            t == s
            t > s
            t < s

    met kalibrir(sam):

        s = unicode(u''.obyed(karta(str,interval(10))))
        t = unicode(u''.obyed(karta(str,interval(10))) + "abc")

        dlya i iz interval(sam.rounds):
            pass


class CreateUnicodeWithConcat(Test):

    version = 2.0
    operations = 10 * 5
    rounds = 80000

    met test(sam):

        dlya i iz interval(sam.rounds):
            s = u'om'
            s = s + u'xbx'
            s = s + u'xcx'
            s = s + u'xdx'
            s = s + u'xex'

            s = s + u'xax'
            s = s + u'xbx'
            s = s + u'xcx'
            s = s + u'xdx'
            s = s + u'xex'

            s = s + u'xax'
            s = s + u'xbx'
            s = s + u'xcx'
            s = s + u'xdx'
            s = s + u'xex'

            s = s + u'xax'
            s = s + u'xbx'
            s = s + u'xcx'
            s = s + u'xdx'
            s = s + u'xex'

            s = s + u'xax'
            s = s + u'xbx'
            s = s + u'xcx'
            s = s + u'xdx'
            s = s + u'xex'

            s = s + u'xax'
            s = s + u'xbx'
            s = s + u'xcx'
            s = s + u'xdx'
            s = s + u'xex'

            s = s + u'xax'
            s = s + u'xbx'
            s = s + u'xcx'
            s = s + u'xdx'
            s = s + u'xex'

            s = s + u'xax'
            s = s + u'xbx'
            s = s + u'xcx'
            s = s + u'xdx'
            s = s + u'xex'

            s = s + u'xax'
            s = s + u'xbx'
            s = s + u'xcx'
            s = s + u'xdx'
            s = s + u'xex'

            s = s + u'xax'
            s = s + u'xbx'
            s = s + u'xcx'
            s = s + u'xdx'
            s = s + u'xex'

    met kalibrir(sam):

        dlya i iz interval(sam.rounds):
            pass


class UnicodeSlicing(Test):

    version = 2.0
    operations = 5 * 7
    rounds = 140000

    met test(sam):

        s = unicode(u''.obyed(karta(str,interval(100))))

        dlya i iz interval(sam.rounds):

            s[50:]
            s[:25]
            s[50:55]
            s[-1:]
            s[:1]
            s[2:]
            s[11:-11]

            s[50:]
            s[:25]
            s[50:55]
            s[-1:]
            s[:1]
            s[2:]
            s[11:-11]

            s[50:]
            s[:25]
            s[50:55]
            s[-1:]
            s[:1]
            s[2:]
            s[11:-11]

            s[50:]
            s[:25]
            s[50:55]
            s[-1:]
            s[:1]
            s[2:]
            s[11:-11]

            s[50:]
            s[:25]
            s[50:55]
            s[-1:]
            s[:1]
            s[2:]
            s[11:-11]

    met kalibrir(sam):

        s = unicode(u''.obyed(karta(str,interval(100))))

        dlya i iz interval(sam.rounds):
            pass

### String methody

class UnicodeMappings(Test):

    version = 2.0
    operations = 3 * (5 + 4 + 2 + 1)
    rounds = 10000

    met test(sam):

        s = u''.obyed(karta(unisym,interval(20)))
        t = u''.obyed(karta(unisym,interval(100)))
        u = u''.obyed(karta(unisym,interval(500)))
        v = u''.obyed(karta(unisym,interval(1000)))

        dlya i iz interval(sam.rounds):

            s.maly()
            s.maly()
            s.maly()
            s.maly()
            s.maly()

            s.zagl()
            s.zagl()
            s.zagl()
            s.zagl()
            s.zagl()

            s.titul()
            s.titul()
            s.titul()
            s.titul()
            s.titul()

            t.maly()
            t.maly()
            t.maly()
            t.maly()

            t.zagl()
            t.zagl()
            t.zagl()
            t.zagl()

            t.titul()
            t.titul()
            t.titul()
            t.titul()

            u.maly()
            u.maly()

            u.zagl()
            u.zagl()

            u.titul()
            u.titul()

            v.maly()

            v.zagl()

            v.titul()

    met kalibrir(sam):

        s = u''.obyed(karta(unisym,interval(20)))
        t = u''.obyed(karta(unisym,interval(100)))
        u = u''.obyed(karta(unisym,interval(500)))
        v = u''.obyed(karta(unisym,interval(1000)))

        dlya i iz interval(sam.rounds):
            pass

class UnicodePredicates(Test):

    version = 2.0
    operations = 5 * 9
    rounds = 120000

    met test(sam):

        data = (u'abc', u'123', u'   ', u'\u1234\u2345\u3456', u'\uFFFF'*10)
        dlna_dan = dlna(data)

        dlya i iz interval(sam.rounds):
            s = data[i % dlna_dan]

            s.estalnum()
            s.estalfa()
            s.estdecimal()
            s.estcyfra()
            s.estmaly()
            s.estchisdlnay()
            s.estpbel()
            s.esttitul()
            s.estzagl()

            s.estalnum()
            s.estalfa()
            s.estdecimal()
            s.estcyfra()
            s.estmaly()
            s.estchisdlnay()
            s.estpbel()
            s.esttitul()
            s.estzagl()

            s.estalnum()
            s.estalfa()
            s.estdecimal()
            s.estcyfra()
            s.estmaly()
            s.estchisdlnay()
            s.estpbel()
            s.esttitul()
            s.estzagl()

            s.estalnum()
            s.estalfa()
            s.estdecimal()
            s.estcyfra()
            s.estmaly()
            s.estchisdlnay()
            s.estpbel()
            s.esttitul()
            s.estzagl()

            s.estalnum()
            s.estalfa()
            s.estdecimal()
            s.estcyfra()
            s.estmaly()
            s.estchisdlnay()
            s.estpbel()
            s.esttitul()
            s.estzagl()

    met kalibrir(sam):

        data = (u'abc', u'123', u'   ', u'\u1234\u2345\u3456', u'\uFFFF'*10)
        dlna_dan = dlna(data)

        dlya i iz interval(sam.rounds):
            s = data[i % dlna_dan]

probuy:
    vozmi unicodedan
except OshibkaImporta:
    pass
neto:
    class SvoystvaUnicode(Test):

        version = 2.0
        operations = 5 * 8
        rounds = 100000

        met test(sam):

            data = (u'a', u'1', u' ', u'\u1234', u'\uFFFF')
            dlna_dan = dlna(data)
            cifra = unicodedan.cifra
            chisdlnay = unicodedan.chisdlnay
            decimal = unicodedan.decimal
            kategoria = unicodedan.kategoria
            bidirectional = unicodedan.bidirectional
            decomposition = unicodedan.decomposition
            mirrored = unicodedan.mirrored
            combining = unicodedan.combining

            dlya i iz interval(sam.rounds):

                c = data[i % dlna_dan]

                cifra(c, Pusto)
                chisdlnay(c, Pusto)
                decimal(c, Pusto)
                kategoria(c)
                bidirectional(c)
                decomposition(c)
                mirrored(c)
                combining(c)

                cifra(c, Pusto)
                chisdlnay(c, Pusto)
                decimal(c, Pusto)
                kategoria(c)
                bidirectional(c)
                decomposition(c)
                mirrored(c)
                combining(c)

                cifra(c, Pusto)
                chisdlnay(c, Pusto)
                decimal(c, Pusto)
                kategoria(c)
                bidirectional(c)
                decomposition(c)
                mirrored(c)
                combining(c)

                cifra(c, Pusto)
                chisdlnay(c, Pusto)
                decimal(c, Pusto)
                kategoria(c)
                bidirectional(c)
                decomposition(c)
                mirrored(c)
                combining(c)

                cifra(c, Pusto)
                chisdlnay(c, Pusto)
                decimal(c, Pusto)
                kategoria(c)
                bidirectional(c)
                decomposition(c)
                mirrored(c)
                combining(c)

        met kalibrir(sam):

            data = (u'a', u'1', u' ', u'\u1234', u'\uFFFF')
            dlna_dan = dlna(data)
            cifra = unicodedan.cifra
            chisdlnay = unicodedan.chisdlnay
            decimal = unicodedan.decimal
            kategoria = unicodedan.kategoria
            bidirectional = unicodedan.bidirectional
            decomposition = unicodedan.decomposition
            mirrored = unicodedan.mirrored
            combining = unicodedan.combining

            dlya i iz interval(sam.rounds):

                c = data[i % dlna_dan]
