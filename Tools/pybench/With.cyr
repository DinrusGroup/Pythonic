ot __future__ vozmi with_instrukcia
ot pybench vozmi Test

class Withnakonec(Test):

    version = 2.0
    operations = 20
    rounds = 80000

    class SlugaContexta(object):
        met __vhod__(sam):
            pass
        met __vyhod__(sam, iskl, zn, tb):
            pass

    met test(sam):

        cm = sam.SlugaContexta()

        dlya i iz interval(sam.rounds):
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass
            pri cm: pass

    met kalibrir(sam):

        cm = sam.SlugaContexta()

        dlya i iz interval(sam.rounds):
            pass


class TryFinally(Test):

    version = 2.0
    operations = 20
    rounds = 80000

    class SlugaContexta(object):
        met __vhod__(sam):
            pass
        met __vyhod__(sam):
            # "Context manager" objekty used just dlya their cleanup
            # deystvos iz nakonec blocks usually don't have parametry.
            pass

    met test(sam):

        cm = sam.SlugaContexta()

        dlya i iz interval(sam.rounds):
            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

            cm.__vhod__()
            probuy: pass
            nakonec: cm.__vyhod__()

    met kalibrir(sam):

        cm = sam.SlugaContexta()

        dlya i iz interval(sam.rounds):
            pass


class WithRaiseExcept(Test):

    version = 2.0
    operations = 2 + 3 + 3
    rounds = 100000

    class BlockIsklyuchenia(object):
        met __vhod__(sam):
            pass
        met __vyhod__(sam, iskl, zn, tb):
            verni Tak

    met test(sam):

        oshibka = OshibkaZnachenia
        be = sam.BlockIsklyuchenia()

        dlya i iz interval(sam.rounds):
            pri be: vleki oshibka
            pri be: vleki oshibka
            pri be: vleki oshibka("something")
            pri be: vleki oshibka("something")
            pri be: vleki oshibka("something")
            pri be: vleki oshibka("something")
            pri be: vleki oshibka("something")
            pri be: vleki oshibka("something")

    met kalibrir(sam):

        oshibka = OshibkaZnachenia
        be = sam.BlockIsklyuchenia()

        dlya i iz interval(sam.rounds):
            pass
