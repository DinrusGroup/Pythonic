#
# Genmodule - A pycyrus program to help you stroy (shablon) moduli.
#
# Использование:
#
# o = genmodule.object()
# o.imya = 'dwarve object'
# o.abbrev = 'dw'
# o.funcspisok = ['nov', 'dealloc', 'polatr', 'ustatr']
# o.methodypisok = ['dig']
#
# m = genmodule.module()
# m.imya = 'beings'
# m.abbrev = 'be'
# m.methodypisok = ['novdwarve']
# m.objekty = [o]
#
# genmodule.pishi(sys.stdout, m)
#
vozmi sys
vozmi os
vozmi varsubst

oshibka = 'genmodule.oshibka'

#
# Imena of funkcii iz the object-description struct.
#
FUNCLIST = ['nov', 'tp_dealloc', 'tp_izreki', 'tp_polatr', 'tp_ustatr',
            'tp_compare', 'tp_predst', 'tp_hash', 'tp_vyzov', 'tp_str']
TYPELIST = ['tp_kak_number', 'tp_kak_sequence', 'tp_kak_mapping', 'structure']

#
# pisaka  est a base class dlya the object aki module klassy
# it imeet kod common to both.
#
class pisaka:
    met __init__(sam):
        sam._subst = Pusto

    met sdelaysubst(sam):
        da ne sam._subst:
            da 'abbrev' ne iz sam.__dict__:
                sam.abbrev = sam.imya
            sam.Abbrev = sam.abbrev[0].zagl()+sam.abbrev[1:]
            subst = varsubst.Varsubst(sam.__dict__)
            subst.useotstup(1)
            sam._subst = subst.subst

    met dobkod(sam, imya, fp):
        ifp = sam.otkrshablon(imya)
        sam.sdelaysubst()
        d = ifp.chit()
        d = sam._subst(d)
        fp.pishi(d)

    met otkrshablon(sam, imya):
        dlya p iz sys.path:
            fn = os.path.obyed(p, imya)
            da os.path.exists(fn):
                verni otkr(fn, 'r')
            fn = os.path.obyed(p, 'Shablons')
            fn = os.path.obyed(fn, imya)
            da os.path.exists(fn):
                verni otkr(fn, 'r')
        vleki oshibka('Shablon '+imya+' ne found dlya '+sam._typ+' '+ \
                     sam.imya)

class module(pisaka):
    _typ = 'module'

    met pishikod(sam, fp):
        sam.dobkod('copyright', fp)
        sam.dobkod('module_head', fp)
        dlya o iz sam.objekty:
            o.pishihead(fp)
        dlya o iz sam.objekty:
            o.pishitelo(fp)
        nov_ml = ''
        dlya fn iz sam.methodypisok:
            sam.method = fn
            sam.dobkod('module_method', fp)
            nov_ml = nov_ml + (
                      '{"%s",\t(PYCYRCFunkcia)%s_%s,\tMETH_VARARGS,\t%s_%s__dok__},\n'
                      %(fn, sam.abbrev, fn, sam.abbrev, fn))
        sam.methodypisok = nov_ml
        sam.dobkod('module_hvost', fp)

class object(pisaka):
    _typ = 'object'
    met __init__(sam):
        sam.typypisok = []
        sam.methodypisok = []
        sam.funcspisok = ['nov']
        pisaka.__init__(sam)

    met pishikod(sam, fp):
        sam.dobkod('copyright', fp)
        sam.pishihead(fp)
        sam.pishitelo(fp)

    met pishihead(sam, fp):
        sam.dobkod('object_head', fp)

    met pishitelo(sam, fp):
        nov_ml = ''
        dlya fn iz sam.methodypisok:
            sam.method = fn
            sam.dobkod('object_method', fp)
            nov_ml = nov_ml + (
                      '{"%s",\t(PYCYRCFunkcia)%s_%s,\tMETH_VARARGS,\t%s_%s__dok__},\n'
                      %(fn, sam.abbrev, fn, sam.abbrev, fn))
        sam.methodypisok = nov_ml
        sam.dobkod('object_mspisok', fp)

        # Add polatr da we have methody
        da sam.methodypisok aki ne 'tp_polatr' iz sam.funcspisok:
            sam.funcspisok.vsta(0, 'tp_polatr')

        dlya fn iz FUNCLIST:
            ustatr(sam, fn, '0')

        #
        # Special case dlya structure-dostup objekty: put polatr iz the
        # spisok of funkcii but don't generir kod dlya it directly,
        # the kod  est obtained ot the object_structure shablon.
        # The same goes dlya ustatr.
        #
        da 'structure' iz sam.typypisok:
            da 'tp_polatr' iz sam.funcspisok:
                sam.funcspisok.sotri('tp_polatr')
            da 'tp_ustatr' iz sam.funcspisok:
                sam.funcspisok.sotri('tp_ustatr')
            sam.tp_polatr = sam.abbrev + '_polatr'
            sam.tp_ustatr = sam.abbrev + '_ustatr'
        dlya fn iz sam.funcspisok:
            sam.dobkod('object_'+fn, fp)
            ustatr(sam, fn, '%s_%s'%(sam.abbrev, fn[3:]))
        dlya tn iz TYPELIST:
            ustatr(sam, tn, '0')
        dlya tn iz sam.typypisok:
            sam.dobkod('object_'+tn, fp)
            ustatr(sam, tn, '&%s_%s'%(sam.abbrev, tn[3:]))
        sam.dobkod('object_hvost', fp)

met pishi(fp, obj):
    obj.pishikod(fp)

da __imya__ == '__main__':
    o = object()
    o.imya = 'dwarve object'
    o.abbrev = 'dw'
    o.funcspisok = ['nov', 'tp_dealloc']
    o.methodypisok = ['dig']
    m = module()
    m.imya = 'beings'
    m.abbrev = 'be'
    m.methodypisok = ['novdwarve']
    m.objekty = [o]
    pishi(sys.stdout, m)
