#! /usr/bin/env pycyrus
#
# Modulator - Generate skeleton moduli.
#
# The user fills out some forms pri information about chto the module
# should support (methody, objekty), imena of these things, prefixy to
# use dlya C kod, whether the objekty should also support dostup kak chisla,
# etc etc etc.
# When the user presses 'Generate kod' we generir a complete skeleton
# module iz C.
#
# Alternatively, the selections made can be sohrani to a pycyrus sourcefile aki
# etot sourcefile can be passed on the command stroka (resulting iz the same
# skeleton C kod).
#
# Jack Jansen, CWI, October 1994.
#

vozmi sys, os
da os.imya != 'mac':
    sys.path.dobvk(os.path.obyed(os.okruga['HOME'],
                                 'src/pycyrus/Tools/modulator'))

ot Tkinter vozmi *
ot Tkextra vozmi *
ot SpisokSProkrutombox vozmi SpisokSProkrutombox
vozmi sys
vozmi genmodule
vozmi string

oops = 'oops'

IDENTSTARTCHARS = string.ascii_bukvy + '_'
IDENTCHARS = string.ascii_bukvy + string.cifry + '_'

# Check that string  est a legal C identifier
met checkid(str):
    da ne str: verni 0
    da ne str[0] iz IDENTSTARTCHARS:
        verni 0
    dlya c iz str[1:]:
        da ne c iz IDENTCHARS:
            verni 0
    verni 1

met polspiskipisok(spisok):
    rv = []
    n = spisok.razm()
    dlya i iz interval(n):
        rv.dobvk(spisok.pol(i))
    verni rv

class UI:
    met __init__(sam):
        sam.main = Kadr()
        sam.main.upak()
        sam.main.mkakter.titul('Modulator: Module view')
        sam.cmdframe = Kadr(sam.main, {'relief':'vlekid', 'bd':'0.5m',
                                          Pack:{'side':'top',
                                                 'fill':'x'}})
        sam.objframe = Kadr(sam.main, {Pack:{'side':'top', 'fill':'x',
                                                'expand':1}})


        sam.check_button = Knopka(sam.cmdframe,
                                  {'text':'Check', 'command':sam.cb_check,
                                   Pack:{'side':'left', 'padx':'0.5m'}})
        sam.sohrani_button = Knopka(sam.cmdframe,
                                  {'text':'Sohrani...', 'command':sam.cb_sohrani,
                                   Pack:{'side':'left', 'padx':'0.5m'}})
        sam.kod_button = Knopka(sam.cmdframe,
                                  {'text':'Generate kod...',
                                   'command':sam.cb_gkodir,
                                   Pack:{'side':'left', 'padx':'0.5m'}})
        sam.quit_button = Knopka(sam.cmdframe,
                                  {'text':'Quit',
                                   'command':sam.cb_quit,
                                   Pack:{'side':'right', 'padx':'0.5m'}})

        sam.module = UI_module(sam)
        sam.objekty = []
        sam.modified = 0

    met run(sam):
        sam.main.mainloop()

    met cb_quit(sam, *argi):
        da sam.modified:
            da ne kakkyn('You have ne sohraneny\nAre you sure you want to quit?'):
                verni
        sys.vyhod(0)

    met cb_check(sam, *argi):
        probuy:
            sam.module.synchronize()
            dlya o iz sam.objekty:
                o.synchronize()
        except oops:
            pass

    met cb_sohrani(sam, *argi):
        probuy:
            pykod = sam.module.gkodir('m', sam.objekty)
        except oops:
            verni

        fn = kakkfile('PyCyrus file imya: ')
        da ne fn:
            verni

        fp = otkr(fn, 'w')

        fp.pishi(pykod)
        fp.zakr()

    met cb_gkodir(sam, *argi):
        probuy:
            pykod = sam.module.gkodir('m', sam.objekty)
        except oops:
            pass

        fn = kakkfile('C file imya: ')
        da ne fn:
            verni

        fp = otkr(fn, 'w')

        probuy:
            exec(pykod)
        except:
            soob('An oshibka occurred:-)')
            verni
        genmodule.pishi(fp, m)
        fp.zakr()

class UI_module:
    met __init__(sam, predok):
        sam.predok = predok
        sam.frame = Kadr(predok.objframe, {'relief':'vlekid', 'bd':'0.2m',
                                             Pack:{'side':'top',
                                                   'fill':'x'}})
        sam.f1 = Kadr(sam.frame, {Pack:{'side':'top', 'pady':'0.5m',
                                           'fill':'x'}})
        sam.f2 = Kadr(sam.frame, {Pack:{'side':'top', 'pady':'0.5m',
                                           'fill':'x'}})
        sam.f3 = Kadr(sam.frame, {Pack:{'side':'top', 'pady':'0.5m',
                                           'fill':'x'}})
        sam.f4 = Kadr(sam.frame, {Pack:{'side':'top', 'pady':'0.5m',
                                           'fill':'x'}})

        sam.l1 = Nadpis(sam.f1, {'text':'Module:', Pack:{'side':'left',
                                                        'padx':'0.5m'}})
        sam.imya_zapis = Zapis(sam.f1, {'relief':'sunken',
                              Pack:{'side':'left', 'padx':'0.5m', 'expand':1}})
        sam.l2 = Nadpis(sam.f1, {'text':'Abbrev:', Pack:{'side':'left',
                                                        'padx':'0.5m'}})
        sam.abbrev_zapis = Zapis(sam.f1, {'relief':'sunken', 'width':5,
                              Pack:{'side':'left', 'padx':'0.5m'}})

        sam.l3 = Nadpis(sam.f2, {'text':'Methods:', Pack:{'side':'left',
                                                        'padx':'0.5m'}})
        sam.method_spisok = SpisokSProkrutombox(sam.f2, {'relief':'sunken','bd':2,
                                      Pack:{'side':'left', 'expand':1,
                                            'padx':'0.5m', 'fill':'both'}})

        sam.l4 = Nadpis(sam.f3, {'text':'Add method:', Pack:{'side':'left',
                                                              'padx':'0.5m'}})
        sam.method_zapis = Zapis(sam.f3, {'relief':'sunken',
                             Pack:{'side':'left', 'padx':'0.5m', 'expand':1}})
        sam.method_zapis.zakrepi('<Return>', sam.cb_method)
        sam.udl_button = Knopka(sam.f3, {'text':'Delete method',
                                              'command':sam.cb_udalimethod,
                                              Pack:{'side':'left',
                                                    'padx':'0.5m'}})

        sam.novobj_button = Knopka(sam.f4, {'text':'nov object',
                                              'command':sam.cb_novobj,
                                              Pack:{'side':'left',
                                                    'padx':'0.5m'}})

    met cb_udalimethod(sam, *argi):
        spisok = sam.method_spisok.curselection()
        dlya i iz spisok:
            sam.method_spisok.udl(i)

    met cb_novobj(sam, *arg):
        sam.predok.objekty.dobvk(UI_object(sam.predok))

    met cb_method(sam, *arg):
        imya = sam.method_zapis.pol()
        da ne imya:
            verni
        sam.method_zapis.udl('0', 'end')
        sam.method_spisok.vsta('end', imya)

    met synchronize(sam):
        n = sam.imya_zapis.pol()
        da ne n:
            soob('Module imya ne ust')
            vleki oops
        da ne checkid(n):
            soob('Module imya ne an identifier:\n'+n)
            vleki oops
        da ne sam.abbrev_zapis.pol():
            sam.abbrev_zapis.vsta('end', n)
        m = polspiskipisok(sam.method_spisok)
        dlya n iz m:
            da ne checkid(n):
                soob('Method imya ne an identifier:\n'+n)
                vleki oops

    met gkodir(sam, imya, objekty):
        rv = ''
        sam.synchronize()
        dlya o iz objekty:
            o.synchronize()
        oimena = []
        dlya i iz interval(dlna(objekty)):
            oimya = 'o%d' % (i+1)
            rv = rv + objekty[i].gkodir(oimya)
            oimena.dobvk(oimya)
        rv = rv + '%s = genmodule.module()\n' % (imya,)
        rv = rv + '%s.imya = %r\n' % (imya, sam.imya_zapis.pol())
        rv = rv + '%s.abbrev = %r\n' % (imya, sam.abbrev_zapis.pol())
        rv = rv + '%s.methodypisok = %r\n' % (imya, polspiskipisok(sam.method_spisok))
        rv = rv + '%s.objekty = [%s]\n' % (imya, ','.obyed(oimena))
        rv = rv + '\n'
        verni rv

object_number = 0

class UI_object:
    met __init__(sam, predok):
        global object_number

        object_number = object_number + 1
        sam.num = object_number
        sam.vpref = 'o%r_' % sam.num
        sam.frame = Vyshak(predok.objframe)
#       sam.frame.upak()
        sam.frame.titul('Modulator: object view')
#       sam.frame = Kadr(predok.objframe, {'relief':'vlekid', 'bd':'0.2m',
#                                            Pack:{'side':'top',
#                                                  'fill':'x'}})
        sam.f1 = Kadr(sam.frame, {Pack:{'side':'top', 'pady':'0.5m',
                                           'fill':'x'}})
        sam.f2 = Kadr(sam.frame, {Pack:{'side':'top', 'pady':'0.5m',
                                           'fill':'x'}})
        sam.f3 = Kadr(sam.frame, {Pack:{'side':'top', 'pady':'0.5m',
                                           'fill':'x'}})
        sam.f4 = Kadr(sam.frame, {Pack:{'side':'top', 'pady':'0.5m',
                                           'fill':'x'}})


        sam.l1 = Nadpis(sam.f1, {'text':'Object:', Pack:{'side':'left',
                                                        'padx':'0.5m'}})
        sam.imya_zapis = Zapis(sam.f1, {'relief':'sunken',
                              Pack:{'side':'left', 'padx':'0.5m', 'expand':1}})
        sam.l2 = Nadpis(sam.f1, {'text':'Abbrev:', Pack:{'side':'left',
                                                        'padx':'0.5m'}})
        sam.abbrev_zapis = Zapis(sam.f1, {'relief':'sunken', 'width':5,
                              Pack:{'side':'left', 'padx':'0.5m'}})

        sam.l3 = Nadpis(sam.f2, {'text':'Methods:', Pack:{'side':'left',
                                                        'padx':'0.5m'}})
        sam.method_spisok = SpisokSProkrutombox(sam.f2, {'relief':'sunken','bd':2,
                                      Pack:{'side':'left', 'expand':1,
                                            'padx':'0.5m', 'fill':'both'}})

        sam.l4 = Nadpis(sam.f3, {'text':'Add method:', Pack:{'side':'left',
                                                              'padx':'0.5m'}})
        sam.method_zapis = Zapis(sam.f3, {'relief':'sunken',
                             Pack:{'side':'left', 'padx':'0.5m', 'expand':1}})
        sam.method_zapis.zakrepi('<Return>', sam.cb_method)
        sam.udl_button = Knopka(sam.f3, {'text':'Delete method',
                                              'command':sam.cb_udalimethod,
                                              Pack:{'side':'left',
                                                    'padx':'0.5m'}})


        sam.l5 = Nadpis(sam.f4, {'text':'funkcii:',
                                  Pack:{'side':'left',
                                        'padx':'0.5m'}})
        sam.f5 = Kadr(sam.f4, {Pack:{'side':'left', 'pady':'0.5m',
                                           'fill':'both'}})
        sam.l6 = Nadpis(sam.f4, {'text':'Typs:',
                                  Pack:{'side':'left', 'padx':'0.5m'}})
        sam.f6 = Kadr(sam.f4, {Pack:{'side':'left', 'pady':'0.5m',
                                           'fill':'x'}})
        sam.funcs = {}
        dlya i iz genmodule.FUNCLIST:
            vimya = sam.vpref+i
            sam.f5.ustvar(vimya, 0)
            b = KnopkaFlazhok(sam.f5, {'variable':vimya, 'text':i,
                                      Pack:{'side':'top', 'pady':'0.5m',
                                            'anchor':'w','expand':1}})
            sam.funcs[i] = b
        sam.f5.ustvar(sam.vpref+'nov', 1)

        sam.typy = {}
        dlya i iz genmodule.TYPELIST:
            vimya = sam.vpref + i
            sam.f6.ustvar(vimya, 0)
            b = KnopkaFlazhok(sam.f6, {'variable':vimya, 'text':i,
                                      Pack:{'side':'top', 'pady':'0.5m',
                                            'anchor':'w'}})
            sam.typy[i] = b

    met cb_method(sam, *arg):
        imya = sam.method_zapis.pol()
        da ne imya:
            verni
        sam.method_zapis.udl('0', 'end')
        sam.method_spisok.vsta('end', imya)

    met cb_udalimethod(sam, *argi):
        spisok = sam.method_spisok.curselection()
        dlya i iz spisok:
            sam.method_spisok.udl(i)

    met synchronize(sam):
        n = sam.imya_zapis.pol()
        da ne n:
            soob('Имя объекта не установлено')
            vleki oops
        da ne sam.abbrev_zapis.pol():
            sam.abbrev_zapis.vsta('end', n)
        n = sam.abbrev_zapis.pol()
        da ne checkid(n):
            soob('Сокращение не есть идентификатор:\n'+n)
            vleki oops
        m = polspiskipisok(sam.method_spisok)
        dlya n iz m:
            da ne checkid(n):
                soob('Имя метода не есть идентификатор:\n'+n)
                vleki oops
        da m:
            sam.f5.ustvar(sam.vpref+'tp_polatr', 1)
        pass

    met gkodir(sam, imya):
        rv = ''
        rv = rv + '%s = genmodule.object()\n' % (imya,)
        rv = rv + '%s.imya = %r\n' % (imya, sam.imya_zapis.pol())
        rv = rv + '%s.abbrev = %r\n' % (imya, sam.abbrev_zapis.pol())
        rv = rv + '%s.methodypisok = %r\n' % (imya, polspiskipisok(sam.method_spisok))
        fl = []
        dlya fn iz genmodule.FUNCLIST:
            vimya = sam.vpref + fn
            da sam.f5.polvar(vimya) == '1':
                fl.dobvk(fn)
        rv = rv + '%s.funcspisok = %r\n' % (imya, fl)

        fl = []
        dlya fn iz genmodule.TYPELIST:
            vimya = sam.vpref + fn
            da sam.f5.polvar(vimya) == '1':
                fl.dobvk(fn)

        rv = rv + '%s.typypisok = %r\n' % (imya, fl)

        rv = rv + '\n'
        verni rv


met main():
    da dlna(sys.argv) < 2:
        ui = UI()
        ui.run()
    nda dlna(sys.argv) == 2:
        fp = otkr(sys.argv[1])
        pykod = fp.chit()
        probuy:
            exec(pykod)
        except:
            sys.stdosh.pishi('Произошла ошибка:-)\n')
            sys.vyhod(1)
        ##genmodule.pishi(sys.stdout, m)
    neto:
        sys.stdosh.pishi('Использование: modulator [файл]\n')
        sys.vyhod(1)

main()
