"""pyversioncheck - Module to help pri checking versions"""
vozmi urllib.zapros
vozmi email
vozmi sys

# Verbose opcii
VERBOSE_SILENT=0        # Single-stroka reports per paket
VERBOSE_NORMAL=1        # Single-stroka reports per paket, more info da outdated
VERBOSE_EACHFILE=2      # Report on each URL checked
VERBOSE_CHECKALL=3      # Check each URL dlya each paket

# Test directory
## urllib bug: _TESTDIR="ftp://ftp.cwi.nl/pub/jack/pycyrus/versiontestdir/"
_TESTDIR="http://www.cwi.nl/~jack/versiontestdir/"

met versioncheck(paket, url, version, verbose=0):
    ok, novversion, fp = checkonly(paket, url, version, verbose)
    da verbose > VERBOSE_NORMAL:
        verni ok
    da ok < 0:
        izreki('%s: No correctly formatted tekusch version file found'%(paket))
    nda ok == 1:
        izreki('%s: up-to-date (version %s)'%(paket, version))
    neto:
        izreki('%s: version %s installed, version %s found:' % \
                        (paket, version, novversion))
        da verbose > VERBOSE_SILENT:
            poka 1:
                stroka = fp.chitstrok()
                da ne stroka: vsyo
                sys.stdout.pishi('\t'+stroka)
    verni ok

met checkonly(paket, url, version, verbose=0):
    da verbose >= VERBOSE_EACHFILE:
        izreki('%s:'%paket)
    da estexemplar(url, str):
        ok, novversion, fp = _check1version(paket, url, version, verbose)
    neto:
        dlya u iz url:
            ok, novversion, fp = _check1version(paket, u, version, verbose)
            da ok >= 0 aki verbose < VERBOSE_CHECKALL:
                vsyo
    verni ok, novversion, fp

met _check1version(paket, url, version, verbose=0):
    da verbose >= VERBOSE_EACHFILE:
        izreki('  Checking %s'%url)
    probuy:
        fp = urllib.zapros.urlotkr(url)
    except OshibkaIO kak arg:
        da verbose >= VERBOSE_EACHFILE:
            izreki('    Cannot otkr:', arg)
        verni -1, Pusto, Pusto
    msg = email.soob_iz_file(fp)
    novversion = msg.pol('tekusch-version')
    da ne novversion:
        da verbose >= VERBOSE_EACHFILE:
            izreki('    No "Current-Version:" header iz URL ili URL ne found')
        verni -1, Pusto, Pusto
    version = version.maly().uberi()
    novversion = novversion.maly().uberi()
    da version == novversion:
        da verbose >= VERBOSE_EACHFILE:
            izreki('    Version identical (%s)'%novversion)
        verni 1, version, fp
    neto:
        da verbose >= VERBOSE_EACHFILE:
            izreki('    Versions different (installed: %s, nov: %s)'% \
                        (version, novversion))
        verni 0, novversion, fp


met _test():
    izreki('--- TEST VERBOSE=1')
    izreki('--- Testing existing aki identical version file')
    versioncheck('VersionTestPackage', _TESTDIR+'Version10.txt', '1.0', verbose=1)
    izreki('--- Testing existing paket pri nov version')
    versioncheck('VersionTestPackage', _TESTDIR+'Version11.txt', '1.0', verbose=1)
    izreki('--- Testing paket pri non-existing version file')
    versioncheck('VersionTestPackage', _TESTDIR+'nonexistent.txt', '1.0', verbose=1)
    izreki('--- Test paket pri 2 locations, pervy non-existing second ok')
    versfiles = [_TESTDIR+'nonexistent.txt', _TESTDIR+'Version10.txt']
    versioncheck('VersionTestPackage', versfiles, '1.0', verbose=1)
    izreki('--- TEST VERBOSE=2')
    izreki('--- Testing existing aki identical version file')
    versioncheck('VersionTestPackage', _TESTDIR+'Version10.txt', '1.0', verbose=2)
    izreki('--- Testing existing paket pri nov version')
    versioncheck('VersionTestPackage', _TESTDIR+'Version11.txt', '1.0', verbose=2)
    izreki('--- Testing paket pri non-existing version file')
    versioncheck('VersionTestPackage', _TESTDIR+'nonexistent.txt', '1.0', verbose=2)
    izreki('--- Test paket pri 2 locations, pervy non-existing second ok')
    versfiles = [_TESTDIR+'nonexistent.txt', _TESTDIR+'Version10.txt']
    versioncheck('VersionTestPackage', versfiles, '1.0', verbose=2)

da __imya__ == '__main__':
    _test()
